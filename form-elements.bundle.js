!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=192)}({1:function(e,t,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a={};function s(e,t,n){for(var i=0;i<t.length;i++){var o={css:t[i][1],media:t[i][2],sourceMap:t[i][3]};a[e][i]?a[e][i](o):a[e].push(g(o,n))}}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=r(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var p,u=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function c(e,t,n,i){var o=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function f(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var d=null,m=0;function g(e,t){var n,i,o;if(t.singleton){var r=m++;n=d||(d=l(t)),i=c.bind(null,n,r,!1),o=c.bind(null,n,r,!0)}else n=l(t),i=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o()),e=n.base?e+n.base:e,t=t||[],a[e]||(a[e]=[]),s(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){a[e]||(a[e]=[]),s(e,t,n);for(var i=t.length;i<a[e].length;i++)a[e][i]();a[e].length=t.length,0===a[e].length&&delete a[e]}}}},10:function(e,t,n){e.exports=n.p+"db91cb6874cba0087e6545db4b5ad345.woff"},11:function(e,t,n){e.exports=n.p+"a3b387c93882604792867736aecd56c8.ttf"},12:function(e,t,n){e.exports=n.p+"04dd58d84ea0987b3dd7e26e23fae193.svg"},13:function(e,t,n){e.exports=n.p+"02969382c8f51c034b221b043a46e94a.woff"},14:function(e,t,n){e.exports=n.p+"678b12a6a938c32eb5fa88f2f439c2df.ttf"},15:function(e,t,n){e.exports=n.p+"68531a92e73b3a0b674c0bcf8001c74a.svg"},16:function(e,t,n){e.exports=n.p+"fa4554a21f2df2208345e7c153ea779e.woff"},17:function(e,t,n){e.exports=n.p+"809cd8ab97c465b57cb1a44b1795f12c.ttf"},18:function(e,t,n){e.exports=n.p+"d5247b3734bb0aa3e89c90513b4a4b7c.svg"},19:function(e,t,n){e.exports=n.p+"7f7e915e030991fd2a0ff3a260129894.svg"},192:function(e,t,n){"use strict";n.r(t);n(5),n(193);var i=n(24),o=n.n(i),r=n(22);o()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#maskedTextField"),o()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#arrival-input"),o()({mask:"99.99.9999",placeholder:"19.08.2019"}).mask("#departure-input");var a={container:document.querySelector("#drop-down-container"),input:document.querySelector("#number-guests-input2"),countElements:[{name:"Спальни",countGroupName:"bedrooms",startValue:2},{name:"Кровати",countGroupName:"bed",startValue:2},{name:"Ванные комнаты",countGroupName:"bath",startValue:0}],countGroupView:{bedrooms:{counter:2,views:["спальня","спальни","спален"]},bed:{counter:2,views:["кровать","кровати","кроватей"]},bath:{counter:0,views:["ванная комната","ванные комнаты","ванных комнат"]}},placeholder:"Удобства номера",isHideControl:!0,isPinShow:!0};new r.a(a).init();var s={container:document.querySelector("#drop-down-container2"),input:document.querySelector("#number-guests-input3"),countElements:[{name:"Взрослые",countGroupName:"guest"},{name:"Дети",countGroupName:"guest"},{name:"Младенцы",countGroupName:"child"}],countGroupView:{guest:{counter:0,views:["гость","гостя","гостей"]},child:{counter:0,views:["младенец","младенца","младенцев"]}},placeholder:"Сколько гостей",isPinShow:!0};new r.a(s).init();var l={container:document.querySelector("#drop-down-container3"),input:document.querySelector("#number-guests-input4"),countElements:[{name:"Взрослые",countGroupName:"guest",startValue:2},{name:"Дети",countGroupName:"guest",startValue:1},{name:"Младенцы",countGroupName:"child"}],countGroupView:{guest:{counter:3,views:["гость","гостя","гостей"]},child:{counter:0,views:["младенец","младенца","младенцев"]}},placeholder:"Сколько гостей",isPinShow:!0};new r.a(l).init()},193:function(e,t,n){var i=n(1),o=n(194);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},a=(i(e.i,o,r),o.locals?o.locals:{});e.exports=a},194:function(e,t,n){var i=n(2),o=n(3),r=n(34),a=n(36),s=n(37),l=n(26),p=n(27),u=n(20),c=n(19),f=n(35);t=i(!1);var d=o(r),m=o(a),g=o(s),h=o(l),b=o(p),v=o(u),x=o(c),k=o(f);t.push([e.i,'.checkbox__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.checkbox__title--expandable{position:relative}.checkbox__title--expandable button{width:100%;color:#1f2041;text-align:left}.checkbox__title--expandable button::after{position:absolute;top:4px;right:15px;width:12px;height:8px;content:"";background:url('+d+') no-repeat;cursor:pointer}.checkbox__title--expandable-open button::after{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.checkbox__expandable{margin:0;padding-left:0;padding-right:0;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase;border:none;background:transparent;cursor:pointer}.checkbox__item{width:240px;margin:0;margin-bottom:12px}.checkbox__item:last-child{margin-bottom:0}.checkbox--rich .checkbox__item{width:264px}.checkbox__item input[type="checkbox"]{display:none}.checkbox__item label{position:relative;display:block;padding-left:30px;color:rgba(31,32,65,0.45);font-size:14px;font-weight:normal;line-height:18px;cursor:pointer}.checkbox__item label::before{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;top:-2px;left:0;width:20px;height:20px;content:"";background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:4px;-webkit-transition:border 0.3s ease 0s;transition:border 0.3s ease 0s}.checkbox__item label::after{content:"";visibility:hidden;opacity:0;position:absolute;top:3px;left:7px;width:4px;height:6px;border-bottom:2px solid #bc9cff;border-right:2px solid #bc9cff;background-color:transparent;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s;transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s}.checkbox__item input[type="checkbox"]:checked+label::after{visibility:visible;opacity:1}.checkbox__item input[type="checkbox"]:checked+label::before{border-color:#bc9cff}.checkbox__descr{margin:0;margin-top:5px;font-weight:normal;color:rgba(31,32,65,0.5);font-size:12px;line-height:14px}.checkbox__item .checbox__lbl--rich{font-size:14px;font-weight:bold;line-height:18px;color:rgba(31,32,65,0.75)}.checkbox__item-list--hide{display:none}.radiobtn__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.radiobtn__item{display:inline-block;margin:0;margin-right:16px;vertical-align:top}.radiobtn__item:last-child{margin-right:0}.radiobtn__item input[type="radio"]{display:none}.radiobtn__item label{position:relative;display:block;padding-left:30px;color:rgba(31,32,65,0.45);font-size:14px;font-weight:normal;line-height:18px;cursor:pointer}.radiobtn__item label::before{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;top:-2px;left:0;width:20px;height:20px;content:"";background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:50%;-webkit-transition:border 0.3s ease 0s;transition:border 0.3s ease 0s}.radiobtn__item label::after{content:"";visibility:hidden;opacity:0;position:absolute;top:2px;left:4px;width:12px;height:12px;border-radius:50%;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);-webkit-transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s;transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s}.radiobtn__item input[type="radio"]:checked+label::after{visibility:visible;opacity:1}.radiobtn__item input[type="radio"]:checked+label::before{border-color:#bc9cff}.radiobtn__item input[type="radio"]:checked+label{color:rgba(31,32,65,0.75)}.toggle__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.toggle__item{margin:0;margin-bottom:15px}.toggle__item:last-child{margin-bottom:0}.toggle__item input[type="checkbox"]{display:none}.toggle__item label{position:relative;display:block;padding-left:50px;color:rgba(31,32,65,0.45);font-size:14px;font-weight:normal;line-height:18px;cursor:pointer}.toggle__item label::before{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;top:0;left:0;width:40px;height:20px;content:"";background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:10px;-webkit-transition:border 0.3s ease 0s;transition:border 0.3s ease 0s}.toggle__item label::after{content:"";position:absolute;top:4px;left:4px;width:12px;height:12px;border-radius:50%;background:rgba(31,32,65,0.25);-webkit-transition:-webkit-transform 0.2s ease 0s;transition:-webkit-transform 0.2s ease 0s;transition:transform 0.2s ease 0s;transition:transform 0.2s ease 0s, -webkit-transform 0.2s ease 0s}.toggle__item input[type="checkbox"]:checked+label::after{-webkit-transform:translateX(20px);transform:translateX(20px);background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%)}.toggle__item input[type="checkbox"]:checked+label::before{border-color:#bc9cff}.likebtn__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.likebtn__item{display:inline-block;vertical-align:top;margin:0;margin-right:6px}.likebtn__item:last-child{margin-right:0}.likebtn__item button{-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;width:40px;height:20px;margin:0;padding:0;padding-left:7px;content:"";color:rgba(31,32,65,0.45);font-family:"Montserrat", "Quicksand", sans-serif;font-weight:normal;font-size:10px;line-height:12px;background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:10px}.likebtn__item button::after{position:absolute;content:"";top:5px;left:3px;width:10px;height:8px;background:url('+m+") no-repeat}.likebtn__item--active button{color:#bc9cff;border-color:#bc9cff}.likebtn__item--active button::after{background:url("+g+') no-repeat}.ratebtn__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.ratebtn__item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;margin-right:25px;font-size:0}.ratebtn__item:last-child{margin-right:0}.ratebtn__item input[type="radio"]{display:none}.ratebtn__item label{position:relative;display:block;width:20px;height:20px;margin-left:4px;background:url('+h+") no-repeat;cursor:pointer}.ratebtn__item label:last-child{margin-left:0}.ratebtn__item label:hover,.ratebtn__item label:hover ~ label{background:url("+b+") no-repeat}.ratebtn__item input:checked ~ label{background:url("+b+') no-repeat}.ratebtn__item-wrap{display:-webkit-box;display:-ms-flexbox;display:flex}.range__wrap{position:relative}.range__head{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;font-size:0}.range__head span{color:rgba(31,32,65,0.45);font-size:13px}.range_value{-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:inline-block;margin:0;margin-right:2px;font-family:Montserrat;font-style:normal;font-weight:normal;color:rgba(31,32,65,0.45);font-size:12px;line-height:15px;text-transform:uppercase;vertical-align:top;border:none;background:transparent}.range_value:last-child{margin-right:0;margin-left:2px}.range__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.range__bar{position:absolute;left:0;top:16px;bottom:0;right:0;width:100%;height:4px;margin:auto;border-radius:3px;border:1px solid rgba(31,32,65,0.25);background-color:#fff}.range__scale{position:absolute;left:90px;top:0;height:4px;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%)}.range__toggle{position:absolute;top:0;left:0;width:12px;height:12px;border:2px solid #ffffff;border-radius:50%;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);cursor:pointer;-webkit-transition:background 0.4s ease 0s, border 0.4s ease 0s;transition:background 0.4s ease 0s, border 0.4s ease 0s}.range__toggle--min{left:75px}.range__toggle--max{left:160px}.title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.title-wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.title__descr{margin:0;padding-bottom:4px;color:rgba(31,32,65,0.45);font-family:Montserrat;font-size:12px;line-height:15px;text-transform:uppercase}.input-group{display:-webkit-box;display:-ms-flexbox;display:flex;margin:0}.input-group--column{-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.input-group:hover .input-group__input,.input-group:focus .input-group__input{border-color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-webkit-input-placeholder, .input-group:focus .input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-moz-placeholder, .input-group:focus .input-group__input::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input:-ms-input-placeholder, .input-group:focus .input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-ms-input-placeholder, .input-group:focus .input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::placeholder,.input-group:focus .input-group__input::placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__button-split,.input-group:focus .input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__label{margin:0;margin-bottom:5px}.input-group__descr{margin:0;padding-bottom:4px;color:rgba(31,32,65,0.45);font-family:Montserrat;font-size:12px;line-height:15px;text-transform:uppercase}.input-group__label--big{font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.input-group__split{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;margin:0}.input-group__input{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;padding:9px 14px;color:rgba(31,32,65,0.75);font-size:14px;font-family:"Quicksand","Montserrat",sans-serif;line-height:24px;border:1px solid rgba(31,32,65,0.25);border-radius:4px;outline:none;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__input--icon{background:url('+v+') no-repeat;background-position:95% center}.input-group__input--button-split{position:relative;padding-right:0;border-right:none;border-radius:4px 0 0 4px}.input-group__input--fake{cursor:pointer}.input-group__input--active{border-color:rgba(31,32,65,0.5)}.input-group__input--hover{border-color:rgba(31,32,65,0.75)}.input-group__input--hover::-webkit-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-moz-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover:-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-moz-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-moz-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:hover,.input-group__input:focus{border-color:rgba(31,32,65,0.75)}.input-group__input:hover+.input-group__button-split,.input-group__input:focus+.input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::placeholder{color:rgba(31,32,65,0.75)}.input-group__button-split{-webkit-box-sizing:border-box;box-sizing:border-box;width:44px;padding:0;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:1px solid rgba(31,32,65,0.25);border-left:none;border-radius:0 4px 4px 0;outline:none;cursor:pointer;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__button-split img{-webkit-transition:-webkit-transform 0.1s ease;transition:-webkit-transform 0.1s ease;transition:transform 0.1s ease;transition:transform 0.1s ease, -webkit-transform 0.1s ease}.input-group__button-split--down-animation:active img{-webkit-transform:translateY(2px);transform:translateY(2px)}.input-group__button-split--right-animation:active img{-webkit-transform:translateX(5px);transform:translateX(5px)}.button{position:relative;z-index:100;padding:10px 20px;color:#fff;font-weight:normal;font-size:12px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;line-height:15px;text-transform:uppercase;text-decoration:none;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border:none;border-radius:22px;cursor:pointer}.button--disable{opacity:0.5;cursor:default}.button--disable:hover::before{display:none}.button::before{position:absolute;top:0;left:0;z-index:-100;display:block;width:100%;height:100%;background:-webkit-gradient(linear, left top, left bottom, from(#9969ff), to(#5b7ef6));background:linear-gradient(#9969ff, #5b7ef6);border-radius:inherit;opacity:0;-webkit-transition:opacity 0.4s ease;transition:opacity 0.4s ease;content:""}.button:hover::before{opacity:1}.button--empty-style{padding:8px 18px;color:#bc9cff;background:#fff;border:2px solid #bc9cff}.button--empty-style::before{display:none}.button--empty-style:hover{color:#9969ff;border-color:#9969ff;background:#fff}.button--empty-disable{opacity:0.5;cursor:default}.button--empty-disable:hover{color:#bc9cff !important;background:#fff !important;border-color:#bc9cff !important}.button--icon{position:relative}.button--icon::after{position:absolute;top:50%;right:0;width:44px;height:44px;margin-top:-22px;background:url('+x+') no-repeat;background-position:center center;-webkit-transition:background 0.2s ease;transition:background 0.2s ease;content:""}.button--icon:active::after{background-position:20px center}.pagination__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.pagination__pages{margin:0;padding:0;list-style:none}.pagination__page-item{display:inline-block;vertical-align:top}.pagination__page-item a{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;width:40px;height:40px;padding:12px 0px;text-align:center;vertical-align:middle;color:rgba(31,32,65,0.5);font-family:Montserrat;font-weight:normal;font-size:12px;line-height:15px;text-decoration:none}.pagination__page-item--active a{color:#fff;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border-radius:50%}.pagination__page-next{position:relative}.pagination__page-next a{color:#fff;font-size:0;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);border-radius:50%}.pagination__page-next::after{position:absolute;top:0;bottom:0;right:0;left:0;width:18px;height:17px;margin:auto;content:"";background:url('+k+') no-repeat}.pagination__overview{padding-left:6px}.pagination__overview p{font-family:Montserrat;margin:0;margin-top:7px;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.features{margin:0;padding:0;padding-top:1px;list-style:none}.features__item{display:-webkit-box;display:-ms-flexbox;display:flex;margin-bottom:20px;padding-bottom:20px;border-bottom:1px solid rgba(31,32,65,0.1)}.features__item:last-child{margin-bottom:0}.features__item:nth-child(3){padding-bottom:0;border-bottom:none}.features__pict{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:9px;width:48px;height:48px}.features__content{font-size:14px;line-height:24px}.features__title{margin:0;font-size:14px;line-height:24px;font-weight:bold}.features__descr{margin:0}.bullet__title{margin:0;margin-bottom:14px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.bullet__title--lp{padding-left:20px}.bullet__list{padding:0;list-style:none}.bullet__item{position:relative;padding-left:21px;margin-bottom:10px;font-family:Montserrat;color:rgba(31,32,65,0.75);font-size:14px;line-height:24px}.bullet__item::before{position:absolute;top:7px;left:0;width:10px;height:10px;content:\'\';background:rgba(31,32,65,0.25);border-radius:50%}.comment{display:-webkit-box;display:-ms-flexbox;display:flex}.comment__wrap{margin-right:10px}.comment__wrap:nth-child(2){padding-top:15px}.comment__wrap:last-child{margin-right:0}.comment__pict{position:relative;width:44px;height:44px;margin-bottom:27px}.comment__pict img{position:absolute;top:1;left:-24px}.comment__title{margin:0;margin-bottom:8px;color:rgba(31,32,65,0.75);font-weight:bold;font-size:14px}.comment__date{margin:0;margin-bottom:14px;font-size:14px;color:rgba(31,32,65,0.75)}.comment__text{width:99%;margin:0;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.drop-down{position:absolute;top:198px;left:50%;z-index:100;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;margin-top:-200px;margin-left:-50%;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:0 0 4px 4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translateY(-10px);transform:translateY(-10px);visibility:hidden;opacity:0;-webkit-transition:all 0.2s ease-in;transition:all 0.2s ease-in}.drop-down--show{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible;opacity:1}.drop-down__wrap{padding-top:7px;padding-left:14px;padding-right:7px;padding-bottom:8px}.drop-down__count-list{margin:0;padding:0;list-style:none}.drop-down__count-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:7px}.drop-down__count-item:last-child{margin-bottom:0}.drop-down__counter-menu{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:92px}.drop-down__count-item-name{margin:0;padding:0;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.drop-down__select-view{width:20px;margin:0;font-weight:bold;font-size:12px;line-height:15px;text-align:center}.drop-down__counter-btn{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;width:30px;height:30px;padding:0;color:rgba(31,32,65,0.5);font-size:18px;text-align:center;vertical-align:middle;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:50%;cursor:pointer}.drop-down__counter-btn--plus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"+"}.drop-down__counter-btn--minus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"-"}.drop-down__counter-btn--disabled{color:rgba(31,32,65,0.25);border:1px solid rgba(31,32,65,0.25);cursor:default}.drop-down__control{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-top:20px}.drop-down__button{padding:0;color:rgba(31,32,65,0.5);font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase;background:transparent;border:none;cursor:pointer;-webkit-transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out, -webkit-transform 0.1s ease-in-out}.drop-down__button:hover{color:#bc9cff}.drop-down__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.drop-down__button--accent{color:#bc9cff}.drop-down__button--accent:hover{color:rgba(31,32,65,0.5)}.logo{position:relative;min-width:120px;min-height:38px}.logo--big{margin-top:30px;margin-left:30px}.logo__link{position:absolute;top:-2px}.logo__link:hover .logo__letter{fill:#9969ff}.logo__link:hover .logo__label-left{fill:#6fcf97}.logo__letter,.logo__label-left{-webkit-transition:fill 0.4s ease;transition:fill 0.4s ease}.ui-kit__wrap{padding-top:62px;padding-left:1px;padding-bottom:62px}.ui-kit__box{display:-webkit-box;display:-ms-flexbox;display:flex;margin-bottom:100px}.ui-kit__box--nm{margin-bottom:0px}.ui-kit__box:last-child{margin-bottom:0}.ui-kit__inputs{width:320px}.ui-kit__inputs .input-group{margin-bottom:20px}.ui-kit__inputs .input-group:last-child{margin-bottom:0}.ui-kit__column{position:relative;width:265px;margin-left:126px}.ui-kit__column--mls{margin-left:181px}.ui-kit__column--wl{width:320px}.ui-kit__column--xls{width:263px;margin-left:127px}.ui-kit__column--lms{margin-left:72px}.ui-kit__column:first-child{margin-left:0}.ui-kit__column .input-group{margin-bottom:20px}.ui-kit__column .input-group:last-child{margin-bottom:0}.ui-kit__column .comment{margin-left:4px}.ui-kit__column-row{margin-bottom:40px;font-size:0}.ui-kit__column-row--large{margin-bottom:55px}.ui-kit__column-row--bunny-hop{margin-top:255px}.ui-kit__column-row--mt-large{margin-top:171px;margin-bottom:46px}.ui-kit__column-row--small{margin-bottom:30px}.ui-kit__column-row .button{margin-right:20px;padding:14px 23px;font-weight:bold}.ui-kit__column-row .button--empty-style{padding:13px 21px}.ui-kit__column-row .bullet__item{width:237px}.ui-kit__inputs-column{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-top:42px}.ui-kit__inputs-column .input-group{margin-bottom:0;margin-right:20px}.ui-kit__inputs-column .input-group:last-child{margin-right:0}.ui-kit__inputs-column .input-group__button-split{width:66px}.ui-kit__inputs-column--small{width:266px}.ui-kit__inputs-column--small .input-group__button-split{width:55px}.ui-kit__column-row--lwidth{width:320px}.ui-kit__column-row--lwidth .button{width:100%}.ui-kit__link{display:inline-block;margin-right:20px;vertical-align:top;color:rgba(31,32,65,0.5);font-family:Montserrat;font-style:normal;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase;text-decoration:none;-webkit-transition:color 0.3s ease-in-out;transition:color 0.3s ease-in-out}.ui-kit__link:last-child{margin-right:0}.ui-kit__link--hover,.ui-kit__link:hover{color:#bc9cff}.ui-kit__box #drop-down-container .drop-down{top:345px}.ui-kit__box #drop-down-container2 .drop-down,.ui-kit__box #drop-down-container3 .drop-down{top:261px}\n',""]),e.exports=t},2:function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(a=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot).concat(e," */")}));return[n].concat(r).concat([o]).join("\n")}var a,s,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i=0;i<e.length;i++){var o=[].concat(e[i]);n&&(o[2]?o[2]="".concat(n," and ").concat(o[2]):o[2]=n),t.push(o)}},t}},20:function(e,t,n){e.exports=n.p+"2aca2b81629bfaae56f0a3532836a10e.svg"},22:function(e,t,n){"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t,n){var i=document.createElement(e);return t&&i.classList.add(t),n&&(i.textContent=n),i}function r(e,t){return t[e%100>4&&e%100<20?2:[2,0,1,1,1,2][e%10<5?e%10:5]]}t.a=function e(t){var n=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"hasHaveStartValue",(function(e){return e.some((function(e){if(e.startValue)return e.startValue>0}))})),i(this,"getModifiedCountElements",(function(){return n.countElements.map((function(e,t){var n,i,o=e.minValue?e.minValue:0,r=e.startValue?e.startValue:o;return e.id="".concat(t).concat((n=1,i=1e4,Math.floor(Math.random()*(+i-+n))+ +n)),e.counter=r,e.minValue=o,e}))})),i(this,"show",(function(){n.dropDownParent.classList.contains("drop-down--show")||(n.dropDownParent.classList.add("drop-down--show"),n.input.classList.add("input-group__input--active"),window.addEventListener("mouseup",n.onClickHide),window.addEventListener("keyup",n.onPressHide))})),i(this,"hide",(function(){n.isPinShow||n.dropDownParent.classList.contains("drop-down--show")&&(n.dropDownParent.classList.remove("drop-down--show"),n.input.classList.remove("input-group__input--active"),window.removeEventListener("mouseup",n.onClickHide),window.removeEventListener("keyup",n.onPressHide))})),i(this,"onClickHide",(function(e){var t=e.target===n.input,i=n.dropDownParent.contains(e.target);!t&&!i&&n.hide()})),i(this,"onPressHide",(function(e){27===e.keyCode&&n.hide()})),i(this,"onClickClear",(function(e){e.preventDefault(),n.discardCounter(),n.discardViewCounter(),n.input.textContent=n.placeholder})),i(this,"discardCounter",(function(){n.countElements.forEach((function(e){n.dropDownParent.querySelector("#view-".concat(e.id)).textContent=e.minValue,e.counter=e.minValue})),n.dropDownParent.querySelectorAll(".drop-down__counter-btn--minus").forEach((function(e){e.classList.add("drop-down__counter-btn--disabled"),e.setAttribute("disabled","true")}))})),i(this,"discardViewCounter",(function(){Object.keys(n.countGroupView).forEach((function(e){n.countGroupView[e].counter=0}))})),i(this,"renderViewCount",(function(){var e="";Object.keys(n.countGroupView).forEach((function(t,i){if(n.countGroupView[t].counter>0){var o=n.countGroupView[t],a=o.counter,s=r(a,o.views);i>0&&e.length>1&&(e+=", "),e+="".concat(a," ").concat(s)}})),e.length>=20&&Object.keys(n.countGroupView).length>2&&(e=e.slice(0,20)+"..."),n.input.textContent=e})),i(this,"renderStartCount",(function(e){var t=e.countElements,i="";t.forEach((function(t,n){if(t.startValue>0){var o=e.countGroupView[t.countGroupName],a=o.counter,s=r(a,o.views);n>0&&i.length>1&&(i+=", "),i+="".concat(a," ").concat(s)}})),i.length>=20&&t.length>2&&(i=i.slice(0,20)+"...");var o=i.split(",");o[0].trim()===o[1].trim()&&(i=o[0]),n.input.textContent=i})),i(this,"getCountItem",(function(e){var t=o("li","drop-down__count-item"),i=o("p","drop-down__count-item-name",e.name),r=o("div","drop-down__counter-menu"),a=o("button","drop-down__counter-btn");a.classList.add("drop-down__counter-btn--minus"),e.startValue?e.startValue===e.minValue&&(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")):(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")),a.type="button";var s=o("p","drop-down__select-view");s.textContent=e.counter,s.id="view-".concat(e.id);var l=o("button","drop-down__counter-btn");return l.classList.add("drop-down__counter-btn--plus"),l.type="button",l.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];e.counter++,t.counter++,s.textContent=e.counter,n.renderViewCount(),a.classList.contains("drop-down__counter-btn--disabled")&&(a.classList.remove("drop-down__counter-btn--disabled"),a.removeAttribute("disabled"))})),a.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];(e.counter--,t.counter--,s.textContent=e.counter,e.counter-1<e.minValue&&(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")),n.renderViewCount(),0===t.counter)&&(Object.keys(n.countGroupView).every((function(e){return 0===n.countGroupView[e].counter}))&&(n.input.textContent=n.placeholder))})),r.appendChild(a),r.appendChild(s),r.appendChild(l),t.appendChild(i),t.appendChild(r),t})),i(this,"init",(function(){var e=n.getModifiedCountElements();n.countElements=e;var t=o("div","drop-down__wrap"),i=o("ul","drop-down__count-list"),r=o("div","drop-down__control"),a=o("button","drop-down__button","Очистить");a.type="button",a.addEventListener("click",n.onClickClear);var s=o("button","drop-down__button","Применить");s.type="button",s.classList.add("drop-down__button--accent"),s.addEventListener("click",n.hide);var l=document.createDocumentFragment();n.countElements.forEach((function(e){var t=n.getCountItem(e);l.appendChild(t)})),i.appendChild(l),n.isHideControl||(r.appendChild(a),r.appendChild(s)),t.appendChild(i),n.isHideControl||t.appendChild(r),n.dropDownParent.appendChild(t),n.container.appendChild(n.dropDownParent)})),t.container){this.container=t.container;var a=o("section","drop-down");this.dropDownParent=a}else console.error("Expected container(node) inside constructor object but not received");if(t.input){var s=t.placeholder?t.placeholder:"Выберите элимент";this.placeholder=s,this.input=t.input,this.hasHaveStartValue(t.countElements)?this.renderStartCount(t):this.input.textContent=s,t.isPinShow?this.show():this.input.addEventListener("click",this.show)}else console.error("Expected input(node) inside constructor object but not received");t.countElements?(this.countElements=t.countElements,this.inputViews=[]):console.error("Expected countElements(Array) inside constructor object but not received"),t.countGroupView?this.countGroupView=t.countGroupView:console.error("Expected countGroupView(Array) inside constructor object but not received"),t.isHideControl&&(this.isHideControl=t.isHideControl),t.isPinShow&&(this.isPinShow=t.isPinShow)}},23:function(e,t,n){var i,o,r;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* inputmask.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(30),n(25)],void 0===(r="function"==typeof(i=function(e,t,n){var i=t.document,o=navigator.userAgent,r=o.indexOf("MSIE ")>0||o.indexOf("Trident/")>0,s=d("touchstart"),l=/iemobile/i.test(o),p=/iphone/i.test(o)&&!l;function u(t,i,o){if(!(this instanceof u))return new u(t,i,o);this.el=n,this.events={},this.maskset=n,this.refreshValue=!1,!0!==o&&(e.isPlainObject(t)?i=t:(i=i||{},t&&(i.alias=t)),this.opts=e.extend(!0,{},this.defaults,i),this.noMasksCache=i&&i.definitions!==n,this.userOptions=i||{},this.isRTL=this.opts.numericInput,c(this.opts.alias,i,this.opts))}function c(t,i,o){var r=u.prototype.aliases[t];return r?(r.alias&&c(r.alias,n,o),e.extend(!0,o,r),e.extend(!0,o,i),!0):(null===o.mask&&(o.mask=t),!1)}function f(t,i){function o(t,o,r){var a=!1;if(null!==t&&""!==t||((a=null!==r.regex)?t=(t=r.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(a=!0,t=".*")),1===t.length&&!1===r.greedy&&0!==r.repeat&&(r.placeholder=""),r.repeat>0||"*"===r.repeat||"+"===r.repeat){var s="*"===r.repeat?0:"+"===r.repeat?1:r.repeat;t=r.groupmarker[0]+t+r.groupmarker[1]+r.quantifiermarker[0]+s+","+r.repeat+r.quantifiermarker[1]}var l,p=a?"regex_"+r.regex:r.numericInput?t.split("").reverse().join(""):t;return u.prototype.masksCache[p]===n||!0===i?(l={mask:t,maskToken:u.prototype.analyseMask(t,a,r),validPositions:{},_buffer:n,buffer:n,tests:{},excludes:{},metadata:o,maskLength:n,jitOffset:{}},!0!==i&&(u.prototype.masksCache[p]=l,l=e.extend(!0,{},u.prototype.masksCache[p]))):l=e.extend(!0,{},u.prototype.masksCache[p]),l}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){if(null===t.keepStatic){t.keepStatic="auto";for(var r=0;r<t.mask.length;r++)if(t.mask[r].charAt(0)!==t.mask[0].charAt(0)){t.keepStatic=!0;break}}var a=t.groupmarker[0];return e.each(t.isRTL?t.mask.reverse():t.mask,(function(i,o){a.length>1&&(a+=t.groupmarker[1]+t.alternatormarker+t.groupmarker[0]),o.mask===n||e.isFunction(o.mask)?a+=o:a+=o.mask})),o(a+=t.groupmarker[1],t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==n&&!e.isFunction(t.mask.mask)?o(t.mask.mask,t.mask,t):o(t.mask,t.mask,t)}function d(e){var t=i.createElement("input"),n="on"+e,o=n in t;return o||(t.setAttribute(n,"return;"),o="function"==typeof t[n]),t=null,o}function m(o,c,f){c=c||this.maskset,f=f||this.opts;var g,h,b,v,x,k=this,y=this.el,_=this.isRTL,w=!1,E=!1,P=!1,C=!1,S=function(e,t,i,o,r){var a=f.greedy;r&&(f.greedy=!1),t=t||0;var s,l,p,u=[],c=0;j();do{if(!0===e&&A().validPositions[c])l=(p=r&&!0===A().validPositions[c].match.optionality&&A().validPositions[c+1]===n&&(!0===A().validPositions[c].generatedInput||A().validPositions[c].input==f.skipOptionalPartCharacter&&c>0)?z(c,G(c,s,c-1)):A().validPositions[c]).match,s=p.locator.slice(),u.push(!0===i?p.input:!1===i?l.nativeDef:J(c,l));else{l=(p=F(c,s,c-1)).match,s=p.locator.slice();var d=!0!==o&&(!1!==f.jitMasking?f.jitMasking:l.jit);(!1===d||d===n||"number"==typeof d&&isFinite(d)&&d>c)&&u.push(!1===i?l.nativeDef:J(c,l))}"auto"===f.keepStatic&&l.newBlockMarker&&null!==l.fn&&(f.keepStatic=c-1),c++}while((b===n||c<b)&&(null!==l.fn||""!==l.def)||t>c);return""===u[u.length-1]&&u.pop(),!1===i&&A().maskLength!==n||(A().maskLength=c-1),f.greedy=a,u};function A(){return c}function M(e){var t=A();t.buffer=n,!0!==e&&(t.validPositions={},t.p=0)}function j(e,t,i){var o=-1,r=-1,a=i||A().validPositions;for(var s in e===n&&(e=-1),a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(o=l),l>=e&&(r=l))}return-1===o||o==e?r:-1==r?o:e-o<r-e?o:r}function D(e){var t=e.locator[e.alternation];return"string"==typeof t&&t.length>0&&(t=t.split(",")[0]),t!==n?t.toString():""}function O(e,t){var i=(e.alternation!=n?e.mloc[D(e)]:e.locator).join("");if(""!==i)for(;i.length<t;)i+="0";return i}function z(e,t){for(var i,o,r,a=O(T(e=e>0?e-1:0)),s=0;s<t.length;s++){var l=t[s];i=O(l,a.length);var p=Math.abs(i-a);(o===n||""!==i&&p<o||r&&!f.greedy&&r.match.optionality&&"master"===r.match.newBlockMarker&&(!l.match.optionality||!l.match.newBlockMarker)||r&&r.match.optionalQuantifier&&!l.match.optionalQuantifier)&&(o=p,r=l)}return r}function F(e,t,n){return A().validPositions[e]||z(e,G(e,t?t.slice():t,n))}function T(e,t){return A().validPositions[e]?A().validPositions[e]:(t||G(e))[0]}function N(e,t){for(var n=!1,i=G(e),o=0;o<i.length;o++)if(i[o].match&&i[o].match.def===t){n=!0;break}return n}function G(t,i,o){var r,a=A().maskToken,s=i?o:0,l=i?i.slice():[0],p=[],u=!1,c=i?i.join(""):"";function d(i,o,a,l){function m(a,l,g){function h(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,(function(e,o){if(!0===o.isQuantifier?i=h(t,n.matches[e-1]):o.hasOwnProperty("matches")&&(i=h(t,o)),i)return!1})),i}function b(t,i,o){var r,a;if((A().tests[t]||A().validPositions[t])&&e.each(A().tests[t]||[A().validPositions[t]],(function(e,t){if(t.mloc[i])return r=t,!1;var s=o!==n?o:t.alternation,l=t.locator[s]!==n?t.locator[s].toString().indexOf(i):-1;(a===n||l<a)&&-1!==l&&(r=t,a=l)})),r){var s=r.locator[r.alternation];return(r.mloc[i]||r.mloc[s]||r.locator).slice((o!==n?o:r.alternation)+1)}return o!==n?b(t,i):n}function v(e,t){function n(e){for(var t,n,i=[],o=0,r=e.length;o<r;o++)if("-"===e.charAt(o))for(n=e.charCodeAt(o+1);++t<n;)i.push(String.fromCharCode(t));else t=e.charCodeAt(o),i.push(e.charAt(o));return i.join("")}return f.regex&&null!==e.match.fn&&null!==t.match.fn?-1!==n(t.match.def.replace(/[\[\]]/g,"")).indexOf(n(e.match.def.replace(/[\[\]]/g,""))):e.match.def===t.match.nativeDef}function x(e,t){if(t===n||e.alternation===t.alternation&&-1===e.locator[e.alternation].toString().indexOf(t.locator[t.alternation])){e.mloc=e.mloc||{};var i=e.locator[e.alternation];if(i!==n){if("string"==typeof i&&(i=i.split(",")[0]),e.mloc[i]===n&&(e.mloc[i]=e.locator.slice()),t!==n){for(var o in t.mloc)"string"==typeof o&&(o=o.split(",")[0]),e.mloc[o]===n&&(e.mloc[o]=t.mloc[o]);e.locator[e.alternation]=Object.keys(e.mloc).join(",")}return!0}e.alternation=n}return!1}if(s>500&&g!==n)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+A().mask;if(s===t&&a.matches===n)return p.push({match:a,locator:l.reverse(),cd:c,mloc:{}}),!0;if(a.matches!==n){if(a.isGroup&&g!==a){if(a=m(i.matches[e.inArray(a,i.matches)+1],l,g))return!0}else if(a.isOptional){var k=a;if(a=d(a,o,l,g)){if(e.each(p,(function(e,t){t.match.optionality=!0})),r=p[p.length-1].match,g!==n||!h(r,k))return!0;u=!0,s=t}}else if(a.isAlternator){var y,_=a,w=[],E=p.slice(),P=l.length,C=o.length>0?o.shift():-1;if(-1===C||"string"==typeof C){var S,M=s,j=o.slice(),D=[];if("string"==typeof C)D=C.split(",");else for(S=0;S<_.matches.length;S++)D.push(S.toString());if(A().excludes[t]){for(var O=D.slice(),z=0,F=A().excludes[t].length;z<F;z++)D.splice(D.indexOf(A().excludes[t][z].toString()),1);0===D.length&&(A().excludes[t]=n,D=O)}(!0===f.keepStatic||isFinite(parseInt(f.keepStatic))&&M>=f.keepStatic)&&(D=D.slice(0,1));for(var T=!1,N=0;N<D.length;N++){S=parseInt(D[N]),p=[],o="string"==typeof C&&b(s,S,P)||j.slice(),_.matches[S]&&m(_.matches[S],[S].concat(l),g)?a=!0:0===N&&(T=!0),y=p.slice(),s=M,p=[];for(var G=0;G<y.length;G++){var R=y[G],L=!1;R.match.jit=R.match.jit||T,R.alternation=R.alternation||P,x(R);for(var V=0;V<w.length;V++){var I=w[V];if("string"!=typeof C||R.alternation!==n&&-1!==e.inArray(R.locator[R.alternation].toString(),D)){if(R.match.nativeDef===I.match.nativeDef){L=!0,x(I,R);break}if(v(R,I)){x(R,I)&&(L=!0,w.splice(w.indexOf(I),0,R));break}if(v(I,R)){x(I,R);break}if(q=I,(K=R).locator.slice(K.alternation).join("")==q.locator.slice(q.alternation).join("")&&null===K.match.fn&&null!==q.match.fn&&q.match.fn.test(K.match.def,A(),t,!1,f,!1)){x(R,I)&&(L=!0,w.splice(w.indexOf(I),0,R));break}}}L||w.push(R)}}p=E.concat(w),s=t,u=p.length>0,a=w.length>0,o=j.slice()}else a=m(_.matches[C]||i.matches[C],[C].concat(l),g);if(a)return!0}else if(a.isQuantifier&&g!==i.matches[e.inArray(a,i.matches)-1])for(var B=a,H=o.length>0?o.shift():0;H<(isNaN(B.quantifier.max)?H+1:B.quantifier.max)&&s<=t;H++){var U=i.matches[e.inArray(B,i.matches)-1];if(a=m(U,[H].concat(l),U)){if((r=p[p.length-1].match).optionalQuantifier=H>=B.quantifier.min,r.jit=(H||1)*U.matches.indexOf(r)>=B.quantifier.jit,r.optionalQuantifier&&h(r,U)){u=!0,s=t;break}return r.jit&&(A().jitOffset[t]=U.matches.indexOf(r)),!0}}else if(a=d(a,o,l,g))return!0}else s++;var K,q}for(var g=o.length>0?o.shift():0;g<i.matches.length;g++)if(!0!==i.matches[g].isQuantifier){var h=m(i.matches[g],[g].concat(a),l);if(h&&s===t)return h;if(s>t)break}}if(t>-1){if(i===n){for(var m,g=t-1;(m=A().validPositions[g]||A().tests[g])===n&&g>-1;)g--;m!==n&&g>-1&&(l=function(t,i){var o=[];return e.isArray(i)||(i=[i]),i.length>0&&(i[0].alternation===n?0===(o=z(t,i.slice()).locator.slice()).length&&(o=i[0].locator.slice()):e.each(i,(function(e,t){if(""!==t.def)if(0===o.length)o=t.locator.slice();else for(var n=0;n<o.length;n++)t.locator[n]&&-1===o[n].toString().indexOf(t.locator[n])&&(o[n]+=","+t.locator[n])}))),o}(g,m),c=l.join(""),s=g)}if(A().tests[t]&&A().tests[t][0].cd===c)return A().tests[t];for(var h=l.shift();h<a.length&&!(d(a[h],l,[h])&&s===t||s>t);h++);}return(0===p.length||u)&&p.push({match:{fn:null,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:c}),i!==n&&A().tests[t]?e.extend(!0,[],p):(A().tests[t]=e.extend(!0,[],p),A().tests[t])}function R(){return A()._buffer===n&&(A()._buffer=S(!1,1),A().buffer===n&&(A().buffer=A()._buffer.slice())),A()._buffer}function L(e){return A().buffer!==n&&!0!==e||(A().buffer=S(!0,j(),!0),A()._buffer===n&&(A()._buffer=A().buffer.slice())),A().buffer}function V(e,t,i){var o,r;if(!0===e)M(),e=0,t=i.length;else for(o=e;o<t;o++)delete A().validPositions[o];for(r=e,o=e;o<t;o++)if(M(!0),i[o]!==f.skipOptionalPartCharacter){var a=U(r,i[o],!0,!0);!1!==a&&(M(!0),r=a.caret!==n?a.caret:a.pos+1)}}function I(t,n,i){switch(f.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var o=A().validPositions[i-1];t=0===i||o&&o.input===String.fromCharCode(u.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(f.casing)){var r=Array.prototype.slice.call(arguments);r.push(A().validPositions),t=f.casing.apply(this,r)}}return t}function B(t,i,o){for(var r,a=f.greedy?i:i.slice(0,1),s=!1,l=o!==n?o.split(","):[],p=0;p<l.length;p++)-1!==(r=t.indexOf(l[p]))&&t.splice(r,1);for(var u=0;u<t.length;u++)if(-1!==e.inArray(t[u],a)){s=!0;break}return s}function H(t,i,o,r,a){var s,l,p,u,c,f,d,m=e.extend(!0,{},A().validPositions),g=!1,h=a!==n?a:j();if(-1===h&&a===n)l=(u=T(s=0)).alternation;else for(;h>=0;h--)if((p=A().validPositions[h])&&p.alternation!==n){if(u&&u.locator[p.alternation]!==p.locator[p.alternation])break;s=h,l=A().validPositions[s].alternation,u=p}if(l!==n){d=parseInt(s),A().excludes[d]=A().excludes[d]||[],!0!==t&&A().excludes[d].push(D(u));var b=[],v=0;for(c=d;c<j(n,!0)+1;c++)(f=A().validPositions[c])&&!0!==f.generatedInput?b.push(f.input):c<t&&v++,delete A().validPositions[c];for(;A().excludes[d]&&A().excludes[d].length<10;){var x=-1*v,k=b.slice();for(A().tests[d]=n,M(!0),g=!0;k.length>0;){var y=k.shift();if(!(g=U(j(n,!0)+1,y,!1,r,!0)))break}if(g&&i!==n){var _=j(t)+1;for(c=d;c<j()+1;c++)((f=A().validPositions[c])===n||null==f.match.fn)&&c<t+x&&x++;g=U((t+=x)>_?_:t,i,o,r,!0)}if(g)break;if(M(),u=T(d),A().validPositions=e.extend(!0,{},m),!A().excludes[d]){g=H(t,i,o,r,d-1);break}var w=D(u);if(-1!==A().excludes[d].indexOf(w)){g=H(t,i,o,r,d-1);break}for(A().excludes[d].push(w),c=d;c<j(n,!0)+1;c++)delete A().validPositions[c]}}return A().excludes[d]=n,g}function U(t,i,o,r,a,s){function l(e){return _?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1}o=!0===o;var p=t;function u(i,o,a){var s=!1;return e.each(G(i),(function(p,u){var c=u.match;if(L(!0),!1!==(s=null!=c.fn?c.fn.test(o,A(),i,a,f,l(t)):(o===c.def||o===f.skipOptionalPartCharacter)&&""!==c.def&&{c:J(i,c,!0)||c.def,pos:i})){var d=s.c!==n?s.c:o,m=i;return d=d===f.skipOptionalPartCharacter&&null===c.fn?J(i,c,!0)||c.def:d,s.remove!==n&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort((function(e,t){return t-e})),(function(e,t){q({begin:t,end:t+1})}))),s.insert!==n&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort((function(e,t){return e-t})),(function(e,t){U(t.pos,t.c,!0,r)}))),!0!==s&&s.pos!==n&&s.pos!==i&&(m=s.pos),(!0===s||s.pos!==n||s.c!==n)&&(q(t,e.extend({},u,{input:I(d,c,m)}),r,m)||(s=!1),!1)}})),s}t.begin!==n&&(p=_?t.end:t.begin);var c=!0,d=e.extend(!0,{},A().validPositions);if(e.isFunction(f.preValidation)&&!o&&!0!==r&&!0!==s&&(c=f.preValidation(L(),p,i,l(t),f,A())),!0===c){if(K(n,p,!0),(b===n||p<b)&&(c=u(p,i,o),(!o||!0===r)&&!1===c&&!0!==s)){var m=A().validPositions[p];if(!m||null!==m.match.fn||m.match.def!==i&&i!==f.skipOptionalPartCharacter){if((f.insertMode||A().validPositions[W(p)]===n)&&(!Q(p,!0)||A().jitOffset[p]))if(A().jitOffset[p]&&A().validPositions[W(p)]===n)!1!==(c=U(p+A().jitOffset[p],i,o))&&(c.caret=p);else for(var g=p+1,h=W(p);g<=h;g++)if(!1!==(c=u(g,i,o))){c=K(p,c.pos!==n?c.pos:g)||c,p=g;break}}else c={caret:W(p)}}!1!==c||!1===f.keepStatic||null!=f.regex&&!se(L())||o||!0===a||(c=H(p,i,o,r)),!0===c&&(c={pos:p})}if(e.isFunction(f.postValidation)&&!1!==c&&!o&&!0!==r&&!0!==s){var v=f.postValidation(L(!0),t.begin!==n?_?t.end:t.begin:t,c,f);if(v!==n){if(v.refreshFromBuffer&&v.buffer){var x=v.refreshFromBuffer;V(!0===x?x:x.start,x.end,v.buffer)}c=!0===v?c:v}}return c&&c.pos===n&&(c.pos=p),!1!==c&&!0!==s||(M(!0),A().validPositions=e.extend(!0,{},d)),c}function K(t,i,o){var r;if(t===n)for(t=i-1;t>0&&!A().validPositions[t];t--);for(var a=t;a<i;a++)if(A().validPositions[a]===n&&!Q(a,!0)&&(0==a?T(a):A().validPositions[a-1])){var s=G(a).slice();""===s[s.length-1].match.def&&s.pop();var l=z(a,s);if((l=e.extend({},l,{input:J(a,l.match,!0)||l.match.def})).generatedInput=!0,q(a,l,!0),!0!==o){var p=A().validPositions[i].input;A().validPositions[i]=n,r=U(i,p,!0,!0)}}return r}function q(t,i,o,r){function a(e,t,i){var o=t[e];if(o!==n&&(null===o.match.fn&&!0!==o.match.optionality||o.input===f.radixPoint)){var r=i.begin<=e-1?t[e-1]&&null===t[e-1].match.fn&&t[e-1]:t[e-1],a=i.end>e+1?t[e+1]&&null===t[e+1].match.fn&&t[e+1]:t[e+1];return r&&a}return!1}var s=t.begin!==n?t.begin:t,l=t.end!==n?t.end:t;if(t.begin>t.end&&(s=t.end,l=t.begin),r=r!==n?r:s,s!==l||f.insertMode&&A().validPositions[r]!==n&&o===n){var p=e.extend(!0,{},A().validPositions),u=j(n,!0);for(A().p=s,h=u;h>=s;h--)A().validPositions[h]&&"+"===A().validPositions[h].match.nativeDef&&(f.isNegative=!1),delete A().validPositions[h];var c=!0,d=r,m=(A().validPositions,!1),g=d,h=d;for(i&&(A().validPositions[r]=e.extend(!0,{},i),g++,d++,s<l&&h++);h<=u;h++){var b=p[h];if(b!==n&&(h>=l||h>=s&&!0!==b.generatedInput&&a(h,p,{begin:s,end:l}))){for(;""!==T(g).match.def;){if(!1===m&&p[g]&&p[g].match.nativeDef===b.match.nativeDef)A().validPositions[g]=e.extend(!0,{},p[g]),A().validPositions[g].input=b.input,K(n,g,!0),d=g+1,c=!0;else if(f.shiftPositions&&N(g,b.match.def)){var v=U(g,b.input,!0,!0);c=!1!==v,d=v.caret||v.insert?j():g+1,m=!0}else c=!0===b.generatedInput||b.input===f.radixPoint&&!0===f.numericInput;if(c)break;if(!c&&g>l&&Q(g,!0)&&(null!==b.match.fn||g>A().maskLength))break;g++}""==T(g).match.def&&(c=!1),g=d}if(!c)break}if(!c)return A().validPositions=e.extend(!0,{},p),M(!0),!1}else i&&(A().validPositions[r]=e.extend(!0,{},i));return M(!0),!0}function Q(e,t){var n=F(e).match;if(""===n.def&&(n=T(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=G(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function W(e,t){for(var n=e+1;""!==T(n).match.def&&(!0===t&&(!0!==T(n).match.newBlockMarker||!Q(n))||!0!==t&&!Q(n));)n++;return n}function $(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==T(i).match.newBlockMarker||!0!==t&&!Q(i)&&((n=G(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function Y(t,i,o,r,a){if(r&&e.isFunction(f.onBeforeWrite)){var s=f.onBeforeWrite.call(k,r,i,o,f);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;V(!0===l?l:l.start,l.end,s.buffer||i),i=L(!0)}o!==n&&(o=s.caret!==n?s.caret:o)}}if(t!==n&&(t.inputmask._valueSet(i.join("")),o===n||r!==n&&"blur"===r.type?ue(t,o,0===i.length):oe(t,o),!0===a)){var p=e(t),u=t.inputmask._valueGet();E=!0,p.trigger("input"),setTimeout((function(){u===R().join("")?p.trigger("cleared"):!0===se(i)&&p.trigger("complete")}),0)}}function J(t,i,o){if((i=i||T(t).match).placeholder!==n||!0===o)return e.isFunction(i.placeholder)?i.placeholder(f):i.placeholder;if(null===i.fn){if(t>-1&&A().validPositions[t]===n){var r,a=G(t),s=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var l=0;l<a.length;l++)if(!0!==a[l].match.optionality&&!0!==a[l].match.optionalQuantifier&&(null===a[l].match.fn||r===n||!1!==a[l].match.fn.test(r.match.def,A(),t,!0,f))&&(s.push(a[l]),null===a[l].match.fn&&(r=a[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return f.placeholder.charAt(t%f.placeholder.length)}return i.def}return f.placeholder.charAt(t%f.placeholder.length)}function Z(e,t){if(r){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var n=L().slice(),i=e.inputmask._valueGet();if(i!==t){var o=j();-1===o&&i===R().join("")?n=[]:-1!==o&&ae(n),Y(e,n)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}var X,ee={on:function(t,i,o){var r=function(t){var i=this;if(i.inputmask===n&&"FORM"!==this.nodeName){var r=e.data(i,"_inputmask_opts");r?new u(r).mask(i):ee.off(i)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(i.disabled||i.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===f.tabThrough&&t.keyCode===u.keyCode.TAB))){switch(t.type){case"input":if(!0===E)return E=!1,t.preventDefault();if(s){var a=arguments;return setTimeout((function(){o.apply(i,a),oe(i,i.inputmask.caretPos,n,!0)}),0),!1}break;case"keydown":w=!1,E=!1;break;case"keypress":if(!0===w)return t.preventDefault();w=!0;break;case"click":if(l||p)return a=arguments,setTimeout((function(){o.apply(i,a)}),0),!1}var c=o.apply(i,arguments);return!1===c&&(t.preventDefault(),t.stopPropagation()),c}t.preventDefault()}};t.inputmask.events[i]=t.inputmask.events[i]||[],t.inputmask.events[i].push(r),-1!==e.inArray(i,["submit","reset"])?null!==t.form&&e(t.form).on(i,r):e(t).on(i,r)},off:function(t,n){var i;t.inputmask&&t.inputmask.events&&(n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,(function(n,i){for(;i.length>0;){var o=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,o):e(t).off(n,o)}delete t.inputmask.events[n]})))}},te={keydownEvent:function(t){var n=e(this),i=t.keyCode,o=oe(this);if(i===u.keyCode.BACKSPACE||i===u.keyCode.DELETE||p&&i===u.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&i===u.keyCode.X&&!d("cut"))t.preventDefault(),le(0,i,o),Y(this,L(!0),A().p,t,this.inputmask._valueGet()!==L().join(""));else if(i===u.keyCode.END||i===u.keyCode.PAGE_DOWN){t.preventDefault();var r=W(j());oe(this,t.shiftKey?o.begin:r,r,!0)}else i===u.keyCode.HOME&&!t.shiftKey||i===u.keyCode.PAGE_UP?(t.preventDefault(),oe(this,0,t.shiftKey?o.begin:0,!0)):(f.undoOnEscape&&i===u.keyCode.ESCAPE||90===i&&t.ctrlKey)&&!0!==t.altKey?(ne(this,!0,!1,g.split("")),n.trigger("click")):i!==u.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===f.tabThrough&&i===u.keyCode.TAB&&(!0===t.shiftKey?(null===T(o.begin).match.fn&&(o.begin=W(o.begin)),o.end=$(o.begin,!0),o.begin=$(o.end,!0)):(o.begin=W(o.begin,!0),o.end=W(o.begin,!0),o.end<A().maskLength&&o.end--),o.begin<A().maskLength&&(t.preventDefault(),oe(this,o.begin,o.end))):(f.insertMode=!f.insertMode,this.setAttribute("im-insert",f.insertMode));f.onKeyDown.call(this,t,L(),oe(this).begin,f),P=-1!==e.inArray(i,f.ignorables)},keypressEvent:function(t,i,o,r,a){var s=this,l=e(s),p=t.which||t.charCode||t.keyCode;if(!(!0===i||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||P))return p===u.keyCode.ENTER&&g!==L().join("")&&(g=L().join(""),setTimeout((function(){l.trigger("change")}),0)),!0;if(p){46===p&&!1===t.shiftKey&&""!==f.radixPoint&&(p=f.radixPoint.charCodeAt(0));var c,d=i?{begin:a,end:a}:oe(s),m=String.fromCharCode(p),h=0;if(f._radixDance&&f.numericInput){var b=L().indexOf(f.radixPoint.charAt(0))+1;d.begin<=b&&(p===f.radixPoint.charCodeAt(0)&&(h=1),d.begin-=1,d.end-=1)}A().writeOutBuffer=!0;var v=U(d,m,r);if(!1!==v&&(M(!0),c=v.caret!==n?v.caret:W(v.pos.begin?v.pos.begin:v.pos),A().p=c),c=(f.numericInput&&v.caret===n?$(c):c)+h,!1!==o&&(setTimeout((function(){f.onKeyValidation.call(s,p,v,f)}),0),A().writeOutBuffer&&!1!==v)){var x=L();Y(s,x,c,t,!0!==i)}if(t.preventDefault(),i)return!1!==v&&(v.forwardPosition=c),v}},pasteEvent:function(n){var i,o=n.originalEvent||n,r=(e(this),this.inputmask._valueGet(!0)),a=oe(this);_&&(i=a.end,a.end=a.begin,a.begin=i);var s=r.substr(0,a.begin),l=r.substr(a.end,r.length);if(s===(_?R().reverse():R()).slice(0,a.begin).join("")&&(s=""),l===(_?R().reverse():R()).slice(a.end).join("")&&(l=""),t.clipboardData&&t.clipboardData.getData)r=s+t.clipboardData.getData("Text")+l;else{if(!o.clipboardData||!o.clipboardData.getData)return!0;r=s+o.clipboardData.getData("text/plain")+l}var p=r;if(e.isFunction(f.onBeforePaste)){if(!1===(p=f.onBeforePaste.call(k,r,f)))return n.preventDefault();p||(p=r)}return ne(this,!1,!1,p.toString().split("")),Y(this,L(),W(j()),n,g!==L().join("")),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(L().join("")!==i){var o=oe(n);if(i=function(e,t,n){if(l){var i=t.replace(L().join(""),"");if(1===i.length){var o=t.split("");o.splice(n.begin,0,i),t=o.join("")}}return t}(0,i=function(e,t,n){return"."===t.charAt(n.begin-1)&&""!==f.radixPoint&&((t=t.split(""))[n.begin-1]=f.radixPoint.charAt(0),t=t.join("")),t}(0,i,o),o),L().join("")!==i){var r=L().join(""),a=!f.numericInput&&i.length>r.length?-1:0,s=i.substr(0,o.begin),p=i.substr(o.begin),c=r.substr(0,o.begin+a),d=r.substr(o.begin+a),m=o,g="",h=!1;if(s!==c){var b,v=(h=s.length>=c.length)?s.length:c.length;for(b=0;s.charAt(b)===c.charAt(b)&&b<v;b++);h&&(m.begin=b-a,g+=s.slice(b,m.end))}if(p!==d&&(p.length>d.length?g+=p.slice(0,1):p.length<d.length&&(m.end+=d.length-p.length,h||""===f.radixPoint||""!==p||s.charAt(m.begin+a-1)!==f.radixPoint||(m.begin--,g=f.radixPoint))),Y(n,L(),{begin:m.begin+a,end:m.end+a}),g.length>0)e.each(g.split(""),(function(t,i){var o=new e.Event("keypress");o.which=i.charCodeAt(0),P=!1,te.keypressEvent.call(n,o)}));else{m.begin===m.end-1&&(m.begin=$(m.begin+1),m.begin===m.end-1?oe(n,m.begin):oe(n,m.begin,m.end));var x=new e.Event("keydown");x.keyCode=f.numericInput?u.keyCode.BACKSPACE:u.keyCode.DELETE,te.keydownEvent.call(n,x)}t.preventDefault()}}},beforeInputEvent:function(t){if(t.cancelable){var n=this;switch(t.inputType){case"insertText":return e.each(t.data.split(""),(function(t,i){var o=new e.Event("keypress");o.which=i.charCodeAt(0),P=!1,te.keypressEvent.call(n,o)})),t.preventDefault();case"deleteContentBackward":return(i=new e.Event("keydown")).keyCode=u.keyCode.BACKSPACE,te.keydownEvent.call(n,i),t.preventDefault();case"deleteContentForward":var i;return(i=new e.Event("keydown")).keyCode=u.keyCode.DELETE,te.keydownEvent.call(n,i),t.preventDefault()}}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this,i=(i=t&&t.detail?t.detail[0]:arguments[1])||n.inputmask._valueGet(!0);e.isFunction(f.onBeforeMask)&&(i=f.onBeforeMask.call(k,i,f)||i),ne(n,!0,!1,i=i.toString().split("")),g=L().join(""),(f.clearMaskOnLostFocus||f.clearIncomplete)&&n.inputmask._valueGet()===R().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();f.showMaskOnFocus&&(t!==L().join("")?Y(this,L(),W(j())):!1===C&&oe(this,W(j()))),!0===f.positionCaretOnTab&&!1===C&&te.clickEvent.apply(this,[e,!0]),g=L().join("")},mouseleaveEvent:function(e){C=!1,f.clearMaskOnLostFocus&&i.activeElement!==this&&Z(this,x)},clickEvent:function(t,o){var r=this;setTimeout((function(){if(i.activeElement===r){var t=oe(r);if(o&&(_?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(f.positionCaretOnClick){case"none":break;case"select":oe(r,0,L().length);break;case"ignore":oe(r,W(j()));break;case"radixFocus":if(function(t){if(""!==f.radixPoint){var i=A().validPositions;if(i[t]===n||i[t].input===J(t)){if(t<W(-1))return!0;var o=e.inArray(f.radixPoint,L());if(-1!==o){for(var r in i)if(o<r&&i[r].input!==J(r))return!1;return!0}}}return!1}(t.begin)){var a=L().join("").indexOf(f.radixPoint);oe(r,f.numericInput?W(a):a);break}default:var s=t.begin,l=j(s,!0),p=W(l);if(s<p)oe(r,Q(s,!0)||Q(s-1,!0)?s:W(s));else{var u=A().validPositions[l],c=F(p,u?u.match.locator:n,u),d=J(p,c.match);if(""!==d&&L()[p]!==d&&!0!==c.match.optionalQuantifier&&!0!==c.match.newBlockMarker||!Q(p,f.keepStatic)&&c.match.def===d){var m=W(p);(s>=m||s===p)&&(p=m)}oe(r,p)}}}}),0)},cutEvent:function(n){e(this);var o=oe(this),r=n.originalEvent||n,a=t.clipboardData||r.clipboardData,s=_?L().slice(o.end,o.begin):L().slice(o.begin,o.end);a.setData("text",_?s.reverse().join(""):s.join("")),i.execCommand&&i.execCommand("copy"),le(0,u.keyCode.DELETE,o),Y(this,L(),A().p,n,g!==L().join(""))},blurEvent:function(t){var i=e(this);if(this.inputmask){Z(this,x);var o=this.inputmask._valueGet(),r=L().slice();""===o&&v===n||(f.clearMaskOnLostFocus&&(-1===j()&&o===R().join("")?r=[]:ae(r)),!1===se(r)&&(setTimeout((function(){i.trigger("incomplete")}),0),f.clearIncomplete&&(M(),r=f.clearMaskOnLostFocus?[]:R().slice())),Y(this,r,n,t)),g!==L().join("")&&(g=r.join(""),i.trigger("change"))}},mouseenterEvent:function(e){C=!0,i.activeElement!==this&&f.showMaskOnHover&&Z(this,(_?L().slice().reverse():L()).join(""))},submitEvent:function(e){g!==L().join("")&&h.trigger("change"),f.clearMaskOnLostFocus&&-1===j()&&y.inputmask._valueGet&&y.inputmask._valueGet()===R().join("")&&y.inputmask._valueSet(""),f.clearIncomplete&&!1===se(L())&&y.inputmask._valueSet(""),f.removeMaskOnSubmit&&(y.inputmask._valueSet(y.inputmask.unmaskedvalue(),!0),setTimeout((function(){Y(y,L())}),0))},resetEvent:function(e){y.inputmask.refreshValue=!0,setTimeout((function(){h.trigger("setvalue")}),0)}};function ne(t,i,o,r,a){var s=this||t.inputmask,l=r.slice(),p="",c=-1,d=n;if(M(),o||!0===f.autoUnmask)c=W(c);else{var m=R().slice(0,W(-1)).join(""),g=l.join("").match(new RegExp("^"+u.escapeRegex(m),"g"));g&&g.length>0&&(l.splice(0,g.length*m.length),c=W(c))}-1===c?(A().p=W(c),c=0):A().p=c,s.caretPos={begin:c},e.each(l,(function(i,r){if(r!==n)if(A().validPositions[i]===n&&l[i]===J(i)&&Q(i,!0)&&!1===U(i,l[i],!0,n,n,!0))A().p++;else{var a=new e.Event("_checkval");a.which=r.charCodeAt(0),p+=r;var u=j(n,!0);!function(e,t){return-1!==S(!0,0,!1).slice(e,W(e)).join("").replace(/'/g,"").indexOf(t)&&!Q(e)&&(T(e).match.nativeDef===t.charAt(0)||null===T(e).match.fn&&T(e).match.nativeDef==="'"+t.charAt(0)||" "===T(e).match.nativeDef&&(T(e+1).match.nativeDef===t.charAt(0)||null===T(e+1).match.fn&&T(e+1).match.nativeDef==="'"+t.charAt(0)))}(c,p)?(d=te.keypressEvent.call(t,a,!0,!1,o,s.caretPos.begin))&&(c=s.caretPos.begin+1,p=""):d=te.keypressEvent.call(t,a,!0,!1,o,u+1),d&&(Y(n,L(),d.forwardPosition,a,!1),s.caretPos={begin:d.forwardPosition,end:d.forwardPosition})}})),i&&Y(t,L(),d?d.forwardPosition:n,a||new e.Event("checkval"),a&&"input"===a.type)}function ie(t){if(t){if(t.inputmask===n)return t.value;t.inputmask&&t.inputmask.refreshValue&&te.setValueEvent.call(t)}var i=[],o=A().validPositions;for(var r in o)o[r].match&&null!=o[r].match.fn&&i.push(o[r].input);var a=0===i.length?"":(_?i.reverse():i).join("");if(e.isFunction(f.onUnMask)){var s=(_?L().slice().reverse():L()).join("");a=f.onUnMask.call(k,s,a,f)}return a}function oe(o,r,a,s){function l(e){return!_||"number"!=typeof e||f.greedy&&""===f.placeholder||!y||(e=y.inputmask._valueGet().length-e),e}var p;if(r===n)return"selectionStart"in o?(r=o.selectionStart,a=o.selectionEnd):t.getSelection?(p=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==o&&p.commonAncestorContainer!==o||(r=p.startOffset,a=p.endOffset):i.selection&&i.selection.createRange&&(a=(r=0-(p=i.selection.createRange()).duplicate().moveStart("character",-o.inputmask._valueGet().length))+p.text.length),{begin:s?r:l(r),end:s?a:l(a)};if(e.isArray(r)&&(a=_?r[0]:r[1],r=_?r[1]:r[0]),r.begin!==n&&(a=_?r.begin:r.end,r=_?r.end:r.begin),"number"==typeof r){r=s?r:l(r),a="number"==typeof(a=s?a:l(a))?a:r;var u=parseInt(((o.ownerDocument.defaultView||t).getComputedStyle?(o.ownerDocument.defaultView||t).getComputedStyle(o,null):o.currentStyle).fontSize)*a;if(o.scrollLeft=u>o.scrollWidth?u:0,o.inputmask.caretPos={begin:r,end:a},o===i.activeElement){if("selectionStart"in o)o.selectionStart=r,o.selectionEnd=a;else if(t.getSelection){if(p=i.createRange(),o.firstChild===n||null===o.firstChild){var c=i.createTextNode("");o.appendChild(c)}p.setStart(o.firstChild,r<o.inputmask._valueGet().length?r:o.inputmask._valueGet().length),p.setEnd(o.firstChild,a<o.inputmask._valueGet().length?a:o.inputmask._valueGet().length),p.collapse(!0);var d=t.getSelection();d.removeAllRanges(),d.addRange(p)}else o.createTextRange&&((p=o.createTextRange()).collapse(!0),p.moveEnd("character",a),p.moveStart("character",r),p.select());ue(o,{begin:r,end:a})}}}function re(t){var i,o,r=S(!0,j(),!0,!0),a=r.length,s=j(),l={},p=A().validPositions[s],u=p!==n?p.locator.slice():n;for(i=s+1;i<r.length;i++)u=(o=F(i,u,i-1)).locator.slice(),l[i]=e.extend(!0,{},o);var c=p&&p.alternation!==n?p.locator[p.alternation]:n;for(i=a-1;i>s&&((o=l[i]).match.optionality||o.match.optionalQuantifier&&o.match.newBlockMarker||c&&(c!==l[i].locator[p.alternation]&&null!=o.match.fn||null===o.match.fn&&o.locator[p.alternation]&&B(o.locator[p.alternation].toString().split(","),c.toString().split(","))&&""!==G(i)[0].def))&&r[i]===J(i,o.match);i--)a--;return t?{l:a,def:l[a]?l[a].match:n}:a}function ae(e){e.length=0;for(var t,i=S(!0,0,!0,n,!0);(t=i.shift())!==n;)e.push(t);return e}function se(t){if(e.isFunction(f.isComplete))return f.isComplete(t,f);if("*"===f.repeat)return n;var i=!1,o=re(!0),r=$(o.l);if(o.def===n||o.def.newBlockMarker||o.def.optionality||o.def.optionalQuantifier){i=!0;for(var a=0;a<=r;a++){var s=F(a).match;if(null!==s.fn&&A().validPositions[a]===n&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[a]!==J(a,s)){i=!1;break}}}return i}function le(e,t,i,o,r){if((f.numericInput||_)&&(t===u.keyCode.BACKSPACE?t=u.keyCode.DELETE:t===u.keyCode.DELETE&&(t=u.keyCode.BACKSPACE),_)){var a=i.end;i.end=i.begin,i.begin=a}if(t===u.keyCode.BACKSPACE&&i.end-i.begin<1?(i.begin=$(i.begin),A().validPositions[i.begin]!==n&&A().validPositions[i.begin].input===f.groupSeparator&&i.begin--):t===u.keyCode.DELETE&&i.begin===i.end&&(i.end=Q(i.end,!0)&&A().validPositions[i.end]&&A().validPositions[i.end].input!==f.radixPoint?i.end+1:W(i.end)+1,A().validPositions[i.begin]!==n&&A().validPositions[i.begin].input===f.groupSeparator&&i.end++),q(i),!0!==o&&!1!==f.keepStatic||null!==f.regex){var s=H(!0);if(s){var l=s.caret!==n?s.caret:s.pos?W(s.pos.begin?s.pos.begin:s.pos):j(-1,!0);(t!==u.keyCode.DELETE||i.begin>l)&&i.begin}}var p=j(i.begin,!0);if(p<i.begin||-1===i.begin)A().p=W(p);else if(!0!==o&&(A().p=i.begin,!0!==r))for(;A().p<p&&A().validPositions[A().p]===n;)A().p++}function pe(n){var o=(n.ownerDocument.defaultView||t).getComputedStyle(n,null),r=i.createElement("div");r.style.width=o.width,r.style.textAlign=o.textAlign,v=i.createElement("div"),n.inputmask.colorMask=v,v.className="im-colormask",n.parentNode.insertBefore(v,n),n.parentNode.removeChild(n),v.appendChild(n),v.appendChild(r),n.style.left=r.offsetLeft+"px",e(v).on("mouseleave",(function(e){return te.mouseleaveEvent.call(n,[e])})),e(v).on("mouseenter",(function(e){return te.mouseenterEvent.call(n,[e])})),e(v).on("click",(function(e){return oe(n,function(e){var t,r=i.createElement("span");for(var a in o)isNaN(a)&&-1!==a.indexOf("font")&&(r.style[a]=o[a]);r.style.textTransform=o.textTransform,r.style.letterSpacing=o.letterSpacing,r.style.position="absolute",r.style.height="auto",r.style.width="auto",r.style.visibility="hidden",r.style.whiteSpace="nowrap",i.body.appendChild(r);var s,l=n.inputmask._valueGet(),p=0;for(t=0,s=l.length;t<=s;t++){if(r.innerHTML+=l.charAt(t)||"_",r.offsetWidth>=e){var u=e-p,c=r.offsetWidth-e;r.innerHTML=l.charAt(t),t=(u-=r.offsetWidth/3)<c?t-1:t;break}p=r.offsetWidth}return i.body.removeChild(r),t}(e.clientX)),te.clickEvent.call(n,[e])}))}function ue(e,t,o){var r,a,s,l=[],p=!1,u=0;function c(e){if(e===n&&(e=""),p||null!==r.fn&&a.input!==n)if(p&&(null!==r.fn&&a.input!==n||""===r.def)){p=!1;var t=l.length;l[t-1]=l[t-1]+"</span>",l.push(e)}else l.push(e);else p=!0,l.push("<span class='im-static'>"+e)}if(v!==n){var d=L();if(t===n?t=oe(e):t.begin===n&&(t={begin:t,end:t}),!0!==o){var m=j();do{A().validPositions[u]?(a=A().validPositions[u],r=a.match,s=a.locator.slice(),c(d[u])):(a=F(u,s,u-1),r=a.match,s=a.locator.slice(),!1===f.jitMasking||u<m||"number"==typeof f.jitMasking&&isFinite(f.jitMasking)&&f.jitMasking>u?c(J(u,r)):p=!1),u++}while((b===n||u<b)&&(null!==r.fn||""!==r.def)||m>u||p);p&&c(),i.activeElement===e&&(l.splice(t.begin,0,t.begin===t.end||t.end>A().maskLength?'<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">':'<mark class="im-caret-select">'),l.splice(t.end+1,0,"</mark>"))}var g=v.getElementsByTagName("div")[0];g.innerHTML=l.join(""),e.inputmask.positionColorMask(e,g)}}if(o!==n)switch(o.action){case"isComplete":return y=o.el,se(L());case"unmaskedvalue":return y!==n&&o.value===n||(X=o.value,X=(e.isFunction(f.onBeforeMask)&&f.onBeforeMask.call(k,X,f)||X).split(""),ne.call(this,n,!1,!1,X),e.isFunction(f.onBeforeWrite)&&f.onBeforeWrite.call(k,n,L(),0,f)),ie(y);case"mask":!function(t){ee.off(t);var o=function(t,o){var r=t.getAttribute("type"),s="INPUT"===t.tagName&&-1!==e.inArray(r,o.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!s)if("INPUT"===t.tagName){var l=i.createElement("input");l.setAttribute("type",r),s="text"===l.type,l=null}else s="partial";return!1!==s?function(t){var r,s;function l(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==j()||!0!==o.nullable?i.activeElement===this&&o.clearMaskOnLostFocus?(_?ae(L().slice()).reverse():ae(L().slice())).join(""):r.call(this):"":r.call(this)}function p(t){s.call(this,t),this.inputmask&&e(this).trigger("setvalue",[t])}if(!t.inputmask.__valueGet){if(!0!==o.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===a("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var u=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):n;u&&u.get&&u.set?(r=u.get,s=u.set,Object.defineProperty(t,"value",{get:l,set:p,configurable:!0})):"INPUT"!==t.tagName&&(r=function(){return this.textContent},s=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:l,set:p,configurable:!0}))}else i.__lookupGetter__&&t.__lookupGetter__("value")&&(r=t.__lookupGetter__("value"),s=t.__lookupSetter__("value"),t.__defineGetter__("value",l),t.__defineSetter__("value",p));t.inputmask.__valueGet=r,t.inputmask.__valueSet=s}t.inputmask._valueGet=function(e){return _&&!0!==e?r.call(this.el).split("").reverse().join(""):r.call(this.el)},t.inputmask._valueSet=function(e,t){s.call(this.el,null===e||e===n?"":!0!==t&&_?e.split("").reverse().join(""):e)},r===n&&(r=function(){return this.value},s=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===n||!0!==e.valHooks[t].inputmaskpatch)){var i=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},r=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=i(e);return-1!==j(n,n,e.inputmask.maskset.validPositions)||!0!==o.nullable?t:""}return i(e)},set:function(t,n){var i,o=e(t);return i=r(t,n),t.inputmask&&o.trigger("setvalue",[n]),i},inputmaskpatch:!0}}}(t.type),function(t){ee.on(t,"mouseenter",(function(t){var n=e(this);this.inputmask._valueGet()!==L().join("")&&n.trigger("setvalue")}))}(t))}}(t):t.inputmask=n,s}(t,f);if(!1!==o&&(h=e(y=t),x=y.placeholder,-1===(b=y!==n?y.maxLength:n)&&(b=n),!0===f.colorMask&&pe(y),s&&("inputMode"in y&&(y.inputmode=f.inputmode,y.setAttribute("inputmode",f.inputmode)),!0===f.disablePredictiveText&&("autocorrect"in y?y.autocorrect=!1:(!0!==f.colorMask&&pe(y),y.type="password"))),!0===o&&(y.setAttribute("im-insert",f.insertMode),ee.on(y,"submit",te.submitEvent),ee.on(y,"reset",te.resetEvent),ee.on(y,"blur",te.blurEvent),ee.on(y,"focus",te.focusEvent),!0!==f.colorMask&&(ee.on(y,"click",te.clickEvent),ee.on(y,"mouseleave",te.mouseleaveEvent),ee.on(y,"mouseenter",te.mouseenterEvent)),ee.on(y,"paste",te.pasteEvent),ee.on(y,"cut",te.cutEvent),ee.on(y,"complete",f.oncomplete),ee.on(y,"incomplete",f.onincomplete),ee.on(y,"cleared",f.oncleared),s||!0===f.inputEventOnly?y.removeAttribute("maxLength"):(ee.on(y,"keydown",te.keydownEvent),ee.on(y,"keypress",te.keypressEvent)),ee.on(y,"input",te.inputFallBackEvent),ee.on(y,"beforeinput",te.beforeInputEvent)),ee.on(y,"setvalue",te.setValueEvent),g=R().join(""),""!==y.inputmask._valueGet(!0)||!1===f.clearMaskOnLostFocus||i.activeElement===y)){var r=e.isFunction(f.onBeforeMask)&&f.onBeforeMask.call(k,y.inputmask._valueGet(!0),f)||y.inputmask._valueGet(!0);""!==r&&ne(y,!0,!1,r.split(""));var l=L().slice();g=l.join(""),!1===se(l)&&f.clearIncomplete&&M(),f.clearMaskOnLostFocus&&i.activeElement!==y&&(-1===j()?l=[]:ae(l)),(!1===f.clearMaskOnLostFocus||f.showMaskOnFocus&&i.activeElement===y||""!==y.inputmask._valueGet(!0))&&Y(y,l),i.activeElement===y&&oe(y,W(j()))}}(y);break;case"format":return X=(e.isFunction(f.onBeforeMask)&&f.onBeforeMask.call(k,o.value,f)||o.value).split(""),ne.call(this,n,!0,!1,X),o.metadata?{value:_?L().slice().reverse().join(""):L().join(""),metadata:m.call(this,{action:"getmetadata"},c,f)}:_?L().slice().reverse().join(""):L().join("");case"isValid":o.value?(X=o.value.split(""),ne.call(this,n,!0,!0,X)):o.value=L().join("");for(var ce=L(),fe=re(),de=ce.length-1;de>fe&&!Q(de);de--);return ce.splice(fe,de+1-fe),se(ce)&&o.value===L().join("");case"getemptymask":return R().join("");case"remove":return y&&y.inputmask&&(e.data(y,"_inputmask_opts",null),h=e(y),y.inputmask._valueSet(f.autoUnmask?ie(y):y.inputmask._valueGet(!0)),ee.off(y),y.inputmask.colorMask&&((v=y.inputmask.colorMask).removeChild(y),v.parentNode.insertBefore(y,v),v.parentNode.removeChild(v)),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(y),"value")&&y.inputmask.__valueGet&&Object.defineProperty(y,"value",{get:y.inputmask.__valueGet,set:y.inputmask.__valueSet,configurable:!0}):i.__lookupGetter__&&y.__lookupGetter__("value")&&y.inputmask.__valueGet&&(y.__defineGetter__("value",y.inputmask.__valueGet),y.__defineSetter__("value",y.inputmask.__valueSet)),y.inputmask=n),y;case"getmetadata":if(e.isArray(c.metadata)){var me=S(!0,0,!1).join("");return e.each(c.metadata,(function(e,t){if(t.mask===me)return me=t,!1})),me}return c.metadata}}return u.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:n,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,disablePredictiveText:!1,importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(o){var r=this;return"string"==typeof o&&(o=i.getElementById(o)||i.querySelectorAll(o)),o=o.nodeName?[o]:o,e.each(o,(function(i,o){var a=e.extend(!0,{},r.opts);if(function(i,o,r,a){if(!0===o.importDataAttributes){var s,l,p,u,f=i.getAttribute(a),d=function(e,o){null!==(o=o!==n?o:i.getAttribute(a+"-"+e))&&("string"==typeof o&&(0===e.indexOf("on")?o=t[o]:"false"===o?o=!1:"true"===o&&(o=!0)),r[e]=o)};if(f&&""!==f&&(f=f.replace(/'/g,'"'),l=JSON.parse("{"+f+"}")),l)for(u in p=n,l)if("alias"===u.toLowerCase()){p=l[u];break}for(s in d("alias",p),r.alias&&c(r.alias,r,o),o){if(l)for(u in p=n,l)if(u.toLowerCase()===s.toLowerCase()){p=l[u];break}d(s,p)}}return e.extend(!0,o,r),("rtl"===i.dir||o.rightAlign)&&(i.style.textAlign="right"),("rtl"===i.dir||o.numericInput)&&(i.dir="ltr",i.removeAttribute("dir"),o.isRTL=!0),Object.keys(r).length}(o,a,e.extend(!0,{},r.userOptions),r.dataAttribute)){var s=f(a,r.noMasksCache);s!==n&&(o.inputmask!==n&&(o.inputmask.opts.autoUnmask=!0,o.inputmask.remove()),o.inputmask=new u(n,n,!0),o.inputmask.opts=a,o.inputmask.noMasksCache=r.noMasksCache,o.inputmask.userOptions=e.extend(!0,{},r.userOptions),o.inputmask.isRTL=a.isRTL||a.numericInput,o.inputmask.el=o,o.inputmask.maskset=s,e.data(o,"_inputmask_opts",a),m.call(o.inputmask,{action:"mask"}))}})),o&&o[0]&&o[0].inputmask||this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"===a(t)?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||f(this.opts,this.noMasksCache),m.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return m.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||f(this.opts,this.noMasksCache),m.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||f(this.opts,this.noMasksCache),m.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||f(this.opts,this.noMasksCache),m.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||f(this.opts,this.noMasksCache),m.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||f(this.opts,this.noMasksCache),m.call(this,{action:"format",value:e,metadata:t})},setValue:function(t){this.el&&e(this.el).trigger("setvalue",[t])},analyseMask:function(t,i,o){var r,a,s,l,p,c,f=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,d=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,m=!1,g=new v,h=[],b=[];function v(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function x(t,r,a){a=a!==n?a:t.matches.length;var s=t.matches[a-1];if(i)0===r.indexOf("[")||m&&/\\d|\\s|\\w]/i.test(r)||"."===r?t.matches.splice(a++,0,{fn:new RegExp(r,o.casing?"i":""),optionality:!1,newBlockMarker:s===n?"master":s.def!==r,casing:null,def:r,placeholder:n,nativeDef:r}):(m&&(r=r[r.length-1]),e.each(r.split(""),(function(e,i){s=t.matches[a-1],t.matches.splice(a++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==i&&null!==s.fn,casing:null,def:o.staticDefinitionSymbol||i,placeholder:o.staticDefinitionSymbol!==n?i:n,nativeDef:(m?"'":"")+i})}))),m=!1;else{var l=(o.definitions?o.definitions[r]:n)||u.prototype.definitions[r];l&&!m?t.matches.splice(a++,0,{fn:l.validator?"string"==typeof l.validator?new RegExp(l.validator,o.casing?"i":""):new function(){this.test=l.validator}:new RegExp("."),optionality:!1,newBlockMarker:s===n?"master":s.def!==(l.definitionSymbol||r),casing:l.casing,def:l.definitionSymbol||r,placeholder:l.placeholder,nativeDef:r}):(t.matches.splice(a++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==r&&null!==s.fn,casing:null,def:o.staticDefinitionSymbol||r,placeholder:o.staticDefinitionSymbol!==n?r:n,nativeDef:(m?"'":"")+r}),m=!1)}}function k(){if(h.length>0){if(x(l=h[h.length-1],a),l.isAlternator){p=h.pop();for(var e=0;e<p.matches.length;e++)p.matches[e].isGroup&&(p.matches[e].isGroup=!1);h.length>0?(l=h[h.length-1]).matches.push(p):g.matches.push(p)}}else x(g,a)}function y(e){var t=new v(!0);return t.openGroup=!1,t.matches=e,t}for(i&&(o.optionalmarker[0]=n,o.optionalmarker[1]=n);r=i?d.exec(t):f.exec(t);){if(a=r[0],i)switch(a.charAt(0)){case"?":a="{0,1}";break;case"+":case"*":a="{"+a+"}"}if(m)k();else switch(a.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case o.escapeChar:m=!0,i&&k();break;case o.optionalmarker[1]:case o.groupmarker[1]:if((s=h.pop()).openGroup=!1,s!==n)if(h.length>0){if((l=h[h.length-1]).matches.push(s),l.isAlternator){p=h.pop();for(var _=0;_<p.matches.length;_++)p.matches[_].isGroup=!1,p.matches[_].alternatorGroup=!1;h.length>0?(l=h[h.length-1]).matches.push(p):g.matches.push(p)}}else g.matches.push(s);else k();break;case o.optionalmarker[0]:h.push(new v(!1,!0));break;case o.groupmarker[0]:h.push(new v(!0));break;case o.quantifiermarker[0]:var w=new v(!1,!1,!0),E=(a=a.replace(/[{}]/g,"")).split("|"),P=E[0].split(","),C=isNaN(P[0])?P[0]:parseInt(P[0]),S=1===P.length?C:isNaN(P[1])?P[1]:parseInt(P[1]);"*"!==C&&"+"!==C||(C="*"===S?0:1),w.quantifier={min:C,max:S,jit:E[1]};var A=h.length>0?h[h.length-1].matches:g.matches;if((r=A.pop()).isAlternator){A.push(r),A=r.matches;var M=new v(!0),j=A.pop();A.push(M),A=M.matches,r=j}r.isGroup||(r=y([r])),A.push(r),A.push(w);break;case o.alternatormarker:var D=function(e){var t=e.pop();return t.isQuantifier&&(t=y([e.pop(),t])),t};if(h.length>0){var O=(l=h[h.length-1]).matches[l.matches.length-1];c=l.openGroup&&(O.matches===n||!1===O.isGroup&&!1===O.isAlternator)?h.pop():D(l.matches)}else c=D(g.matches);if(c.isAlternator)h.push(c);else if(c.alternatorGroup?(p=h.pop(),c.alternatorGroup=!1):p=new v(!1,!1,!1,!0),p.matches.push(c),h.push(p),c.openGroup){c.openGroup=!1;var z=new v(!0);z.alternatorGroup=!0,h.push(z)}break;default:k()}}for(;h.length>0;)s=h.pop(),g.matches.push(s);return g.matches.length>0&&(function t(r){r&&r.matches&&e.each(r.matches,(function(e,a){var s=r.matches[e+1];(s===n||s.matches===n||!1===s.isQuantifier)&&a&&a.isGroup&&(a.isGroup=!1,i||(x(a,o.groupmarker[0],0),!0!==a.openGroup&&x(a,o.groupmarker[1]))),t(a)}))}(g),b.push(g)),(o.numericInput||o.isRTL)&&function e(t){for(var i in t.matches=t.matches.reverse(),t.matches)if(t.matches.hasOwnProperty(i)){var r=parseInt(i);if(t.matches[i].isQuantifier&&t.matches[r+1]&&t.matches[r+1].isGroup){var a=t.matches[i];t.matches.splice(i,1),t.matches.splice(r+1,0,a)}t.matches[i].matches!==n?t.matches[i]=e(t.matches[i]):t.matches[i]=((s=t.matches[i])===o.optionalmarker[0]?s=o.optionalmarker[1]:s===o.optionalmarker[1]?s=o.optionalmarker[0]:s===o.groupmarker[0]?s=o.groupmarker[1]:s===o.groupmarker[1]&&(s=o.groupmarker[0]),s)}var s;return t}(b[0]),b},positionColorMask:function(e,t){e.style.left=t.offsetLeft+"px"}},u.extendDefaults=function(t){e.extend(!0,u.prototype.defaults,t)},u.extendDefinitions=function(t){e.extend(!0,u.prototype.definitions,t)},u.extendAliases=function(t){e.extend(!0,u.prototype.aliases,t)},u.format=function(e,t,n){return u(t).format(e,n)},u.unmask=function(e,t){return u(t).unmaskedvalue(e)},u.isValid=function(e,t){return u(t).isValid(e)},u.remove=function(t){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(e,t){t.inputmask&&t.inputmask.remove()}))},u.setValue=function(t,n){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(t,i){i.inputmask?i.inputmask.setValue(n):e(i).trigger("setvalue",[n])}))},u.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},u.keyCode={BACKSPACE:8,BACKSPACE_SAFARI:127,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,RIGHT:39,SPACE:32,TAB:9,UP:38,X:88,CONTROL:17},u.dependencyLib=e,u})?i.apply(t,o):i)||(e.exports=r)},24:function(e,t,n){n(29),n(31),n(32),e.exports=n(23)},25:function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* global/window.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},26:function(e,t,n){e.exports=n.p+"261b2f3994598526b1457617657f2c9e.png"},27:function(e,t,n){e.exports=n.p+"37926414e2534ee657ccddb5d73514a1.png"},29:function(e,t,n){var i,o,r;o=[n(23)],void 0===(r="function"==typeof(i=function(e){return e.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}}),e.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,o){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)}}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),e})?i.apply(t,o):i)||(e.exports=r)},3:function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},30:function(e,t,n){var i,o,r;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* dependencyLibs/inputmask.dependencyLib.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(25)],void 0===(r="function"==typeof(i=function(e){var t=e.document;function n(e){return null!=e&&e===e.window}function i(e){return e instanceof Element}function o(n){return n instanceof o?n:this instanceof o?void(null!=n&&n!==e&&(this[0]=n.nodeName?n:void 0!==n[0]&&n[0].nodeName?n[0]:t.querySelector(n),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new o(n)}return o.prototype={on:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,o=this[0],r=function(e,i){o.addEventListener?o.addEventListener(e,t,!1):o.attachEvent&&o.attachEvent("on"+e,t),n[e]=n[e]||{},n[e][i]=n[e][i]||[],n[e][i].push(t)},a=e.split(" "),s=0;s<a.length;s++){var l=a[s].split(".");r(l[0],l[1]||"global")}return this},off:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,o=this[0],r=function(e,t,i){if(e in n==1)if(o.removeEventListener?o.removeEventListener(e,i,!1):o.detachEvent&&o.detachEvent("on"+e,i),"global"===t)for(var r in n[e])n[e][r].splice(n[e][r].indexOf(i),1);else n[e][t].splice(n[e][t].indexOf(i),1)},a=function(e,i){var o,r,a=[];if(e.length>0)if(void 0===t)for(o=0,r=n[e][i].length;o<r;o++)a.push({ev:e,namespace:i&&i.length>0?i:"global",handler:n[e][i][o]});else a.push({ev:e,namespace:i&&i.length>0?i:"global",handler:t});else if(i.length>0)for(var s in n)for(var l in n[s])if(l===i)if(void 0===t)for(o=0,r=n[s][l].length;o<r;o++)a.push({ev:s,namespace:l,handler:n[s][l][o]});else a.push({ev:s,namespace:l,handler:t});return a},s=e.split(" "),l=0;l<s.length;l++)for(var p=s[l].split("."),u=a(p[0],p[1]),c=0,f=u.length;c<f;c++)r(u[c].ev,u[c].namespace,u[c].handler);return this},trigger:function(e){if(i(this[0]))for(var n=this[0].eventRegistry,r=this[0],a="string"==typeof e?e.split(" "):[e.type],s=0;s<a.length;s++){var l=a[s].split("."),p=l[0],u=l[1]||"global";if(void 0!==t&&"global"===u){var c,f,d={bubbles:!0,cancelable:!0,detail:arguments[1]};if(t.createEvent){try{c=new CustomEvent(p,d)}catch(e){(c=t.createEvent("CustomEvent")).initCustomEvent(p,d.bubbles,d.cancelable,d.detail)}e.type&&o.extend(c,e),r.dispatchEvent(c)}else(c=t.createEventObject()).eventType=p,c.detail=arguments[1],e.type&&o.extend(c,e),r.fireEvent("on"+c.eventType,c)}else if(void 0!==n[p])if(arguments[0]=arguments[0].type?arguments[0]:o.Event(arguments[0]),"global"===u)for(var m in n[p])for(f=0;f<n[p][m].length;f++)n[p][m][f].apply(r,arguments);else for(f=0;f<n[p][u].length;f++)n[p][u][f].apply(r,arguments)}return this}},o.isFunction=function(e){return"function"==typeof e},o.noop=function(){},o.isArray=Array.isArray,o.inArray=function(e,t,n){return null==t?-1:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}(t,e)},o.valHooks=void 0,o.isPlainObject=function(e){return!("object"!==a(e)||e.nodeType||n(e)||e.constructor&&!Object.hasOwnProperty.call(e.constructor.prototype,"isPrototypeOf"))},o.extend=function(){var e,t,n,i,r,s,l=arguments[0]||{},p=1,u=arguments.length,c=!1;for("boolean"==typeof l&&(c=l,l=arguments[p]||{},p++),"object"===a(l)||o.isFunction(l)||(l={}),p===u&&(l=this,p--);p<u;p++)if(null!=(e=arguments[p]))for(t in e)n=l[t],l!==(i=e[t])&&(c&&i&&(o.isPlainObject(i)||(r=o.isArray(i)))?(r?(r=!1,s=n&&o.isArray(n)?n:[]):s=n&&o.isPlainObject(n)?n:{},l[t]=o.extend(c,s,i)):void 0!==i&&(l[t]=i));return l},o.each=function(e,t){var i=0;if(function(e){var t="length"in e&&e.length,i=a(e);return"function"!==i&&!n(e)&&(!(1!==e.nodeType||!t)||("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e))}(e))for(var o=e.length;i<o&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},o.data=function(e,t,n){if(void 0===n)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=n},"function"==typeof e.CustomEvent?o.Event=e.CustomEvent:(o.Event=function(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var i=t.createEvent("CustomEvent");return i.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),i},o.Event.prototype=e.Event.prototype),o})?i.apply(t,o):i)||(e.exports=r)},31:function(e,t,n){var i,o,r;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* inputmask.date.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(23)],void 0===(r="function"==typeof(i=function(e){var t=e.dependencyLib,n={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return s(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return s(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return s(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return s(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return s(Date.prototype.getHours.call(this),2)}],hhh:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return s(Date.prototype.getHours.call(this),2)}],HHH:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return s(Date.prototype.getMinutes.call(this),2)}],ss:["[0-5][0-9]",Date.prototype.setSeconds,"seconds",function(){return s(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return s(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return s(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},i={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function o(e){if(!e.tokenizer){var t=[];for(var i in n)-1===t.indexOf(i[0])&&t.push(i[0]);e.tokenizer="("+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function r(t,i,r,a){for(var s,l="";s=o(r).exec(t);)if(void 0===i)if(n[s[0]])l+="("+n[s[0]][0]+")";else switch(s[0]){case"[":l+="(";break;case"]":l+=")?";break;default:l+=e.escapeRegex(s[0])}else n[s[0]]?!0!==a&&n[s[0]][3]?l+=n[s[0]][3].call(i.date):n[s[0]][2]?l+=i["raw"+n[s[0]][2]]:l+=s[0]:l+=s[0];return l}function s(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function l(e,t,i){var r,s,l,p={date:new Date(1,0,1)},u=e;function c(e){var t=e.replace(/[^0-9]/g,"0");if(t!=e){var n=e.replace(/[^0-9]/g,""),o=(i.min&&i.min[r]||e).toString(),a=(i.max&&i.max[r]||e).toString();t=n+(n<o.slice(0,n.length)?o.slice(n.length):n>a.slice(0,n.length)?a.slice(n.length):t.toString().slice(n.length))}return t}function f(e,t,n){e[r]=c(t),e["raw"+r]=t,void 0!==l&&l.call(e.date,"month"==r?parseInt(e[r])-1:e[r])}if("string"==typeof u){for(;s=o(i).exec(t);){var d=u.slice(0,s[0].length);n.hasOwnProperty(s[0])&&(n[s[0]][0],r=n[s[0]][2],l=n[s[0]][1],f(p,d)),u=u.slice(d.length)}return p}if(u&&"object"===a(u)&&u.hasOwnProperty("date"))return u}return e.extendAliases({datetime:{mask:function(e){return n.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=i[e.inputFormat]||e.inputFormat,e.displayFormat=i[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=i[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[\[\]]/,""),e.regex=r(e.inputFormat,void 0,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},postValidation:function(e,t,n,i){i.min=l(i.min,i.inputFormat,i),i.max=l(i.max,i.inputFormat,i);var o=n,a=l(e.join(""),i.inputFormat,i);return o&&a.date.getTime()==a.date.getTime()&&(o=(o=function(e,t){return(!isFinite(e.rawday)||"29"==e.day&&!isFinite(e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)&&t}(a,o))&&function(e,t){var n=!0;if(t.min){if(e.rawyear){var i=e.rawyear.replace(/[^0-9]/g,""),o=t.min.year.substr(0,i.length);n=o<=i}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(n=t.min.date.getTime()<=e.date.getTime())}return n&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(n=t.max.date.getTime()>=e.date.getTime()),n}(a,i)),t&&o&&n.pos!==t?{buffer:r(i.inputFormat,a,i),refreshFromBuffer:{start:t,end:n.pos}}:o},onKeyDown:function(n,i,r,a){if(n.ctrlKey&&n.keyCode===e.keyCode.RIGHT){for(var l,p=new Date,u="";l=o(a).exec(a.inputFormat);)"d"===l[0].charAt(0)?u+=s(p.getDate(),l[0].length):"m"===l[0].charAt(0)?u+=s(p.getMonth()+1,l[0].length):"yyyy"===l[0]?u+=p.getFullYear().toString():"y"===l[0].charAt(0)&&(u+=s(p.getYear(),l[0].length));this.inputmask._valueSet(u),t(this).trigger("setvalue")}},onUnMask:function(e,t,n){return r(n.outputFormat,l(e,n.inputFormat,n),n,!0)},casing:function(e,t,n,i){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},insertMode:!1,shiftPositions:!1}}),e})?i.apply(t,o):i)||(e.exports=r)},32:function(e,t,n){var i,o,r;o=[n(23)],void 0===(r="function"==typeof(i=function(e){var t=e.dependencyLib;function n(t,n){for(var i="",o=0;o<t.length;o++)e.prototype.definitions[t.charAt(o)]||n.definitions[t.charAt(o)]||n.optionalmarker.start===t.charAt(o)||n.optionalmarker.end===t.charAt(o)||n.quantifiermarker.start===t.charAt(o)||n.quantifiermarker.end===t.charAt(o)||n.groupmarker.start===t.charAt(o)||n.groupmarker.end===t.charAt(o)||n.alternatormarker===t.charAt(o)?i+="\\"+t.charAt(o):i+=t.charAt(o);return i}return e.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),i=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===i?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var o="[+]";if(o+=n(e.prefix,e),!0===e.integerOptional?o+="~{1,"+e.integerDigits+"}":o+="~{"+e.integerDigits+"}",void 0!==e.digits){var r=e.decimalProtect?":":e.radixPoint,a=e.digits.toString().split(",");isFinite(a[0])&&a[1]&&isFinite(a[1])?o+=r+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?o+="["+r+";{1,"+e.digits+"}]":o+=r+";{"+e.digits+"}")}return o+=n(e.suffix,e),o+="[-]",e.greedy=!1,o},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputType:"text",inputmode:"numeric",preValidation:function(e,n,i,o,r,a){if("-"===i||i===r.negationSymbol.front)return!0===r.allowMinus&&(r.isNegative=void 0===r.isNegative||!r.isNegative,""===e.join("")||{caret:a.validPositions[n]?n:void 0,dopost:!0});if(!1===o&&i===r.radixPoint&&void 0!==r.digits&&(isNaN(r.digits)||parseInt(r.digits)>0)){var s=t.inArray(r.radixPoint,e);if(-1!==s&&void 0!==a.validPositions[s])return!0===r.numericInput?n===s:{caret:s+1}}return!0},postValidation:function(n,i,o,r){var a=r.suffix.split(""),s=r.prefix.split("");if(void 0===o.pos&&void 0!==o.caret&&!0!==o.dopost)return o;var l=void 0!==o.caret?o.caret:o.pos,p=n.slice();r.numericInput&&(l=p.length-l-1,p=p.reverse());var u=p[l];if(u===r.groupSeparator&&(u=p[l+=1]),l===p.length-r.suffix.length-1&&u===r.radixPoint)return o;void 0!==u&&u!==r.radixPoint&&u!==r.negationSymbol.front&&u!==r.negationSymbol.back&&(p[l]="?",r.prefix.length>0&&l>=(!1===r.isNegative?1:0)&&l<r.prefix.length-1+(!1===r.isNegative?1:0)?s[l-(!1===r.isNegative?1:0)]="?":r.suffix.length>0&&l>=p.length-r.suffix.length-(!1===r.isNegative?1:0)&&(a[l-(p.length-r.suffix.length-(!1===r.isNegative?1:0))]="?")),s=s.join(""),a=a.join("");var c=p.join("").replace(s,"");if(c=(c=(c=(c=c.replace(a,"")).replace(new RegExp(e.escapeRegex(r.groupSeparator),"g"),"")).replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),""),isNaN(r.placeholder)&&(c=c.replace(new RegExp(e.escapeRegex(r.placeholder),"g"),"")),c.length>1&&1!==c.indexOf(r.radixPoint)&&("0"===u&&(c=c.replace(/^\?/g,"")),c=c.replace(/^0/g,"")),c.charAt(0)===r.radixPoint&&""!==r.radixPoint&&!0!==r.numericInput&&(c="0"+c),""!==c){if(c=c.split(""),(!r.digitsOptional||r.enforceDigitsOnBlur&&"blur"===o.event)&&isFinite(r.digits)){var f=t.inArray(r.radixPoint,c),d=t.inArray(r.radixPoint,p);-1===f&&(c.push(r.radixPoint),f=c.length-1);for(var m=1;m<=r.digits;m++)r.digitsOptional&&(!r.enforceDigitsOnBlur||"blur"!==o.event)||void 0!==c[f+m]&&c[f+m]!==r.placeholder.charAt(0)?-1!==d&&void 0!==p[d+m]&&(c[f+m]=c[f+m]||p[d+m]):c[f+m]=o.placeholder||r.placeholder.charAt(0)}if(!0!==r.autoGroup||""===r.groupSeparator||u===r.radixPoint&&void 0===o.pos&&!o.dopost)c=c.join("");else{var g=c[c.length-1]===r.radixPoint&&o.c===r.radixPoint;c=e(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(c,r),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(c.join("")),g&&(c+=r.radixPoint),c.charAt(0)===r.groupSeparator&&c.substr(1)}}if(r.isNegative&&"blur"===o.event&&(r.isNegative="0"!==c),c=s+c,c+=a,r.isNegative&&(c=r.negationSymbol.front+c,c+=r.negationSymbol.back),c=c.split(""),void 0!==u)if(u!==r.radixPoint&&u!==r.negationSymbol.front&&u!==r.negationSymbol.back)(l=t.inArray("?",c))>-1?c[l]=u:l=o.caret||0;else if(u===r.radixPoint||u===r.negationSymbol.front||u===r.negationSymbol.back){var h=t.inArray(u,c);-1!==h&&(l=h)}r.numericInput&&(l=c.length-l-1,c=c.reverse());var b={caret:void 0!==u&&void 0===o.pos||void 0===l?l:l+(r.numericInput?-1:1),buffer:c,refreshFromBuffer:o.dopost||n.join("")!==c.join("")};return b.refreshFromBuffer?b:o},onBeforeWrite:function(n,i,o,r){if(n)switch(n.type){case"keydown":return r.postValidation(i,o,{caret:o,dopost:!0},r);case"blur":case"checkval":var a;if(function(t){void 0===t.parseMinMaxOptions&&(null!==t.min&&(t.min=t.min.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.min=t.min.replace(t.radixPoint,".")),t.min=isFinite(t.min)?parseFloat(t.min):NaN,isNaN(t.min)&&(t.min=Number.MIN_VALUE)),null!==t.max&&(t.max=t.max.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.max=t.max.replace(t.radixPoint,".")),t.max=isFinite(t.max)?parseFloat(t.max):NaN,isNaN(t.max)&&(t.max=Number.MAX_VALUE)),t.parseMinMaxOptions="done")}(r),null!==r.min||null!==r.max){if(a=r.onUnMask(i.join(""),void 0,t.extend({},r,{unmaskAsNumber:!0})),null!==r.min&&a<r.min)return r.isNegative=r.min<0,r.postValidation(r.min.toString().replace(".",r.radixPoint).split(""),o,{caret:o,dopost:!0,placeholder:"0"},r);if(null!==r.max&&a>r.max)return r.isNegative=r.max<0,r.postValidation(r.max.toString().replace(".",r.radixPoint).split(""),o,{caret:o,dopost:!0,placeholder:"0"},r)}return r.postValidation(i,o,{caret:o,placeholder:"0",event:"blur"},r);case"_checkval":return{caret:o}}},regex:{integerPart:function(t,n){return n?new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?"):new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?\\d+")},integerNPart:function(t){return new RegExp("[\\d"+e.escapeRegex(t.groupSeparator)+e.escapeRegex(t.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(t,n,i,o,r,a){var s;if("k"===t||"m"===t){s={insert:[],c:0};for(var l=0,p="k"===t?2:5;l<p;l++)s.insert.push({pos:i+l,c:0});return s.pos=i+p,s}if(!0===(s=o?new RegExp("[0-9"+e.escapeRegex(r.groupSeparator)+"]").test(t):new RegExp("[0-9]").test(t))){if(!0!==r.numericInput&&void 0!==n.validPositions[i]&&"~"===n.validPositions[i].match.def&&!a){var u=n.buffer.join(""),c=(u=(u=u.replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),"")).split(r.radixPoint);c.length>1&&(c[1]=c[1].replace(/0/g,r.placeholder.charAt(0))),"0"===c[0]&&(c[0]=c[0].replace(/0/g,r.placeholder.charAt(0))),u=c[0]+r.radixPoint+c[1]||"";var f=n._buffer.join("");for(u===r.radixPoint&&(u=f);null===u.match(e.escapeRegex(f)+"$");)f=f.slice(1);s=void 0===(u=(u=u.replace(f,"")).split(""))[i]?{pos:i,remove:i}:{pos:i}}}else o||t!==r.radixPoint||void 0!==n.validPositions[i-1]||(s={insert:{pos:i,c:0},pos:i+1});return s},cardinality:1},"+":{validator:function(e,t,n,i,o){return o.allowMinus&&("-"===e||e===o.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,o){return o.allowMinus&&e===o.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(t,n,i,o,r){var a="["+e.escapeRegex(r.radixPoint)+"]",s=new RegExp(a).test(t);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===r.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(t,n,i){if(""===n&&!0===i.nullable)return n;var o=t.replace(i.prefix,"");return o=(o=o.replace(i.suffix,"")).replace(new RegExp(e.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(o=o.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==o.indexOf(i.radixPoint)&&(o=o.replace(e.escapeRegex.call(this,i.radixPoint),".")),o=(o=o.replace(new RegExp("^"+e.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(i.negationSymbol.back)+"$"),""),Number(o)):o},isComplete:function(t,n){var i=(n.numericInput?t.slice().reverse():t).join("");return i=(i=(i=(i=(i=i.replace(new RegExp("^"+e.escapeRegex(n.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(n.negationSymbol.back)+"$"),"")).replace(n.prefix,"")).replace(n.suffix,"")).replace(new RegExp(e.escapeRegex(n.groupSeparator)+"([0-9]{3})","g"),"$1"),","===n.radixPoint&&(i=i.replace(e.escapeRegex(n.radixPoint),".")),isFinite(i)},onBeforeMask:function(n,i){i.isNegative=void 0;var o=i.radixPoint||",";"number"!=typeof n&&"number"!==i.inputType||""===o||(n=n.toString().replace(".",o));var r=n.split(o),a=r[0].replace(/[^\-0-9]/g,""),s=r.length>1?r[1].replace(/[^0-9]/g,""):"";n=a+(""!==s?o+s:s);var l=0;if(""!==o&&(l=s.length,""!==s)){var p=Math.pow(10,l||1);isFinite(i.digits)&&(l=parseInt(i.digits),p=Math.pow(10,l)),n=n.replace(e.escapeRegex(o),"."),isFinite(n)&&(n=Math.round(parseFloat(n)*p)/p),n=n.toString().replace(".",o)}return 0===i.digits&&-1!==n.indexOf(e.escapeRegex(o))&&(n=n.substring(0,n.indexOf(e.escapeRegex(o)))),function(e,n,i){if(n>0){var o=t.inArray(i.radixPoint,e);-1===o&&(e.push(i.radixPoint),o=e.length-1);for(var r=1;r<=n;r++)e[o+r]=e[o+r]||"0"}return e}(n.toString().split(""),l,i).join("")},onKeyDown:function(n,i,o,r){var a=t(this);if(n.ctrlKey)switch(n.keyCode){case e.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(r.step)),a.trigger("setvalue");break;case e.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(r.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),e})?i.apply(t,o):i)||(e.exports=r)},34:function(e,t,n){e.exports=n.p+"09e20368035a249ccdf51caa4133854e.png"},35:function(e,t,n){e.exports=n.p+"a9d12e5858a2abf95248abb79981417e.png"},36:function(e,t,n){e.exports=n.p+"67df2c3afa3cde1140c230ce11a98edc.png"},37:function(e,t,n){e.exports=n.p+"2f9326a5e38216ad579c46b3671302e8.png"},5:function(e,t,n){var i=n(1),o=n(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},a=(i(e.i,o,r),o.locals?o.locals:{});e.exports=a},6:function(e,t,n){var i=n(2),o=n(3),r=n(7),a=n(8),s=n(9),l=n(10),p=n(11),u=n(12),c=n(13),f=n(14),d=n(15),m=n(16),g=n(17),h=n(18);t=i(!1);var b=o(r),v=o(a),x=o(s,{hash:"#webfont"}),k=o(l),y=o(p),_=o(u,{hash:"#webfont"}),w=o(c),E=o(f),P=o(d,{hash:"#webfont"}),C=o(m),S=o(g),A=o(h,{hash:"#webfont"});t.push([e.i,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{margin:0.67em 0;font-size:2em}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}@font-face{font-weight:normal;font-family:"Montserrat";font-style:normal;src:url('+b+");src:url("+b+') format("woff"),url('+v+') format("truetype"),url('+x+') format("svg")}@font-face{font-weight:bold;font-family:"Montserrat";font-style:normal;src:url('+k+");src:url("+k+') format("woff"),url('+y+') format("truetype"),url('+_+') format("svg")}@font-face{font-weight:normal;font-family:"Quicksand";font-style:normal;src:url('+w+");src:url("+w+') format("woff"),url('+E+') format("truetype"),url('+P+') format("svg")}@font-face{font-weight:bold;font-family:"Quicksand";font-style:normal;src:url('+C+");src:url("+C+') format("woff"),url('+S+') format("truetype"),url('+A+') format("svg")}body{color:#1f2041;font-size:14px;font-family:"Quicksand","Montserrat",sans-serif}.container{position:relative;width:80.5556%;min-width:320px;max-width:1920px;margin:0 auto;padding:0 10px}@media (max-width: 1300px){.container{width:90.5556%}}@media (max-width: 425px){.container{width:auto;margin:0;padding:0}}\n',""]),e.exports=t},7:function(e,t,n){e.exports=n.p+"69aaa9d6aa41b1f3656d9e4176b3a2bc.woff"},8:function(e,t,n){e.exports=n.p+"a8a117360e71de94ae3b0b0f8d15b44d.ttf"},9:function(e,t,n){e.exports=n.p+"f560c34781dabab984d59b379f3d7ffc.svg"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9mb250cy9Nb250c2VycmF0LUJvbGQud29mZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLnR0ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL1F1aWNrc2FuZC1Cb2xkLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbi9hcnJvdy5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvZm9ybS1lbGVtZW50cy9mb3JtLWVsZW1lbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlL2Zvcm0tZWxlbWVudHMvZm9ybS1lbGVtZW50cy5zY3NzPzY4ODIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvZm9ybS1lbGVtZW50cy9mb3JtLWVsZW1lbnRzLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnB1dC9leHBhbmQtbW9yZS5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZHJvcC1kb3duL2Ryb3AtZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svZ2xvYmFsL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yYXRlYnRuL3N0YXIucG5nIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3JhdGVidG4vc3Rhci1hY3RpdmUucG5nIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2RlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmRhdGUuZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5udW1lcmljLmV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY2hlY2tib3gvZXhwYW5kLW1vcmUucG5nIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3BhZ2luYXRpb24vYXJyb3cucG5nIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2xpa2VidG4vbGlrZS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbGlrZWJ0bi9saWtlLWFjdGl2ZS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2luZGV4LnNjc3M/YTAxOSIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLndvZmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtUmVndWxhci5mb250LnN2ZyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJvcHRpb25zIiwibGVuZ3RoIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiam9pbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJvYmoiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwiY29uY2F0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImJhc2UiLCJuZXdMaXN0IiwidG9TdHJpbmciLCJqIiwiSW5wdXRtYXNrIiwibWFzayIsInBsYWNlaG9sZGVyIiwiZHJvcERvd25PcHRpb25zIiwiY29udGFpbmVyIiwiaW5wdXQiLCJjb3VudEVsZW1lbnRzIiwiY291bnRHcm91cE5hbWUiLCJzdGFydFZhbHVlIiwiY291bnRHcm91cFZpZXciLCJiZWRyb29tcyIsImNvdW50ZXIiLCJ2aWV3cyIsImJlZCIsImJhdGgiLCJpc0hpZGVDb250cm9sIiwiaXNQaW5TaG93IiwiRHJvcERvd24iLCJpbml0IiwiZHJvcERvd25HdWVzdE9wdGlvbnMiLCJndWVzdCIsImNoaWxkIiwiZHJvcERvd25RdWVzdE9wdGlvbnMiLCJhcGkiLCJjb250ZW50IiwiZGVmYXVsdCIsImV4cG9ydGVkIiwibG9jYWxzIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwiX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzVfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfN19fXyIsInVzZVNvdXJjZU1hcCIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJiYXNlNjQiLCJkYXRhIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJnZXRIdG1sRWxlbWVudCIsInRhZ05hbWUiLCJjbGFzc05hbWUiLCJ0ZXh0IiwiZWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwiZGVjbE9mTnVtIiwibnVtYmVyIiwidGl0bGVzIiwic29tZSIsIm1pbiIsIm1heCIsIm1pblZhbHVlIiwiaWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJkcm9wRG93blBhcmVudCIsImNvbnRhaW5zIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2xpY2tIaWRlIiwib25QcmVzc0hpZGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZ0IiwiaXNJbnB1dENsaWNrIiwiaXNDYWxlbmRhckNsaWNrIiwiaGlkZSIsImtleUNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsImRpc2NhcmRDb3VudGVyIiwiZGlzY2FyZFZpZXdDb3VudGVyIiwicXVlcnlTZWxlY3RvckFsbCIsIndvcmRPZk51bSIsImN1cnJlbnRDb3VudGVyR3JvdXAiLCJjdXJyZW50Q291bnRlciIsImN1cnJlbnRXb3JkIiwic2xpY2UiLCJzcGxpdFdvcmRPZk51bSIsInNwbGl0IiwidHJpbSIsImNvdW50SXRlbSIsImNvdW50SXRlbU5hbWUiLCJjb3VudGVyTWVudSIsImNvdW50SXRlbU1pbnVzIiwidHlwZSIsImNvdW50SXRlbVZpZXciLCJjb3VudEl0ZW1QbHVzIiwiZ3JvdXBWaWV3IiwicmVuZGVyVmlld0NvdW50IiwiZXZlcnkiLCJtb2RpZmllZENvdW50RWxlbWVudHMiLCJnZXRNb2RpZmllZENvdW50RWxlbWVudHMiLCJkcm9wRG93blBhcmVudFdyYXAiLCJjb3VudExpc3QiLCJkcm9wRG93bkNvbnRyb2wiLCJjbGVhckJ0biIsIm9uQ2xpY2tDbGVhciIsImFjY2VwdEJ0biIsImNvdW50TGlzdEZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImdldENvdW50SXRlbSIsImNvbnNvbGUiLCJlcnJvciIsImhhc0hhdmVTdGFydFZhbHVlIiwicmVuZGVyU3RhcnRDb3VudCIsInNob3ciLCJpbnB1dFZpZXdzIiwiZGVmaW5lIiwiJCIsInVuZGVmaW5lZCIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaWUiLCJpbmRleE9mIiwibW9iaWxlIiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiaWVtb2JpbGUiLCJ0ZXN0IiwiaXBob25lIiwiYWxpYXMiLCJpbnRlcm5hbCIsImVsIiwiZXZlbnRzIiwibWFza3NldCIsInJlZnJlc2hWYWx1ZSIsImlzUGxhaW5PYmplY3QiLCJvcHRzIiwiZXh0ZW5kIiwiZGVmYXVsdHMiLCJub01hc2tzQ2FjaGUiLCJkZWZpbml0aW9ucyIsInVzZXJPcHRpb25zIiwiaXNSVEwiLCJudW1lcmljSW5wdXQiLCJyZXNvbHZlQWxpYXMiLCJhbGlhc1N0ciIsImFsaWFzRGVmaW5pdGlvbiIsImFsaWFzZXMiLCJnZW5lcmF0ZU1hc2tTZXQiLCJub2NhY2hlIiwiZ2VuZXJhdGVNYXNrIiwibWV0YWRhdGEiLCJyZWdleE1hc2siLCJyZWdleCIsInJlcGxhY2UiLCJncmVlZHkiLCJyZXBlYXQiLCJyZXBlYXRTdGFydCIsImdyb3VwbWFya2VyIiwicXVhbnRpZmllcm1hcmtlciIsIm1hc2tzZXREZWZpbml0aW9uIiwibWFza2RlZktleSIsInJldmVyc2UiLCJtYXNrc0NhY2hlIiwibWFza1Rva2VuIiwiYW5hbHlzZU1hc2siLCJ2YWxpZFBvc2l0aW9ucyIsIl9idWZmZXIiLCJidWZmZXIiLCJ0ZXN0cyIsImV4Y2x1ZGVzIiwibWFza0xlbmd0aCIsImppdE9mZnNldCIsImlzRnVuY3Rpb24iLCJpc0FycmF5Iiwia2VlcFN0YXRpYyIsImNoYXJBdCIsImFsdE1hc2siLCJlYWNoIiwibmR4IiwibXNrIiwiYWx0ZXJuYXRvcm1hcmtlciIsInBvcCIsImV2ZW50TmFtZSIsImV2TmFtZSIsImlzU3VwcG9ydGVkIiwibWFza1Njb3BlIiwiYWN0aW9uT2JqIiwidW5kb1ZhbHVlIiwiJGVsIiwibWF4TGVuZ3RoIiwiY29sb3JNYXNrIiwib3JpZ2luYWxQbGFjZWhvbGRlciIsImlucHV0bWFzayIsInNraXBLZXlQcmVzc0V2ZW50Iiwic2tpcElucHV0RXZlbnQiLCJpZ25vcmFibGUiLCJtb3VzZUVudGVyIiwiZ2V0TWFza1RlbXBsYXRlIiwiYmFzZU9uSW5wdXQiLCJtaW5pbWFsUG9zIiwiaW5jbHVkZU1vZGUiLCJub0ppdCIsImNsZWFyT3B0aW9uYWxUYWlsIiwibmR4SW50bHpyIiwidGVzdFBvcyIsIm1hc2tUZW1wbGF0ZSIsInBvcyIsImdldExhc3RWYWxpZFBvc2l0aW9uIiwiZ2V0TWFza1NldCIsIm1hdGNoIiwib3B0aW9uYWxpdHkiLCJnZW5lcmF0ZWRJbnB1dCIsInNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIiLCJkZXRlcm1pbmVUZXN0VGVtcGxhdGUiLCJnZXRUZXN0cyIsImxvY2F0b3IiLCJuYXRpdmVEZWYiLCJnZXRQbGFjZWhvbGRlciIsImdldFRlc3RUZW1wbGF0ZSIsImppdE1hc2tpbmciLCJqaXQiLCJpc0Zpbml0ZSIsIm5ld0Jsb2NrTWFya2VyIiwiZm4iLCJkZWYiLCJyZXNldE1hc2tTZXQiLCJzb2Z0IiwiY2xvc2VzdFRvIiwic3RyaWN0IiwiYmVmb3JlIiwiYWZ0ZXIiLCJ2YWxpZHMiLCJwb3NOZHgiLCJwc05keCIsInBhcnNlSW50IiwiZ2V0RGVjaXNpb25UYWtlciIsInRzdCIsImRlY2lzaW9uVGFrZXIiLCJhbHRlcm5hdGlvbiIsImdldExvY2F0b3IiLCJhbGlnbiIsIm1sb2MiLCJ0c3RMb2NhdG9yIiwiY2xvc2VzdCIsImJlc3RNYXRjaCIsInRhcmdldExvY2F0b3IiLCJnZXRUZXN0IiwiZGlzdGFuY2UiLCJhYnMiLCJvcHRpb25hbFF1YW50aWZpZXIiLCJ0c3RQcyIsInBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uIiwidmFsaWQiLCJ0bmR4IiwibGF0ZXN0TWF0Y2giLCJtYXNrVG9rZW5zIiwibmR4SW5pdGlhbGl6ZXIiLCJtYXRjaGVzIiwiaW5zZXJ0U3RvcCIsImNhY2hlRGVwZW5kZW5jeSIsInJlc29sdmVUZXN0RnJvbVRva2VuIiwibG9vcE5keCIsInF1YW50aWZpZXJSZWN1cnNlIiwiaGFuZGxlTWF0Y2giLCJpc0ZpcnN0TWF0Y2giLCJ0b2tlbkdyb3VwIiwiZmlyc3RNYXRjaCIsImluQXJyYXkiLCJpc1F1YW50aWZpZXIiLCJyZXNvbHZlTmR4SW5pdGlhbGl6ZXIiLCJhbHRlcm5hdGVOZHgiLCJ0YXJnZXRBbHRlcm5hdGlvbiIsImluZGV4UG9zIiwibG1udCIsIm5keFBvcyIsImJlc3RNYXRjaEFsdEluZGV4IiwiaXNTdWJzZXRPZiIsImV4cGFuZCIsInBhdHRlcm4iLCJzdGFydCIsImVuZCIsImV4cGFuZGVkIiwiY2hhckNvZGVBdCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNldE1lcmdlTG9jYXRvcnMiLCJ0YXJnZXRNYXRjaCIsImFsdE1hdGNoIiwibG9jTmR4IiwiY2QiLCJpc0dyb3VwIiwiaXNPcHRpb25hbCIsIm9wdGlvbmFsVG9rZW4iLCJtdGNoIiwiaXNBbHRlcm5hdG9yIiwibWFsdE1hdGNoZXMiLCJhbHRlcm5hdGVUb2tlbiIsIm1hbHRlcm5hdGVNYXRjaGVzIiwiY3VycmVudE1hdGNoZXMiLCJsb29wTmR4Q250IiwiYWx0SW5kZXgiLCJzaGlmdCIsImFtbmR4IiwiY3VycmVudFBvcyIsIm5keEluaXRpYWxpemVyQ2xvbmUiLCJhbHRJbmRleEFyciIsImFsdEluZGV4QXJyQ2xvbmUiLCJzcGxpY2UiLCJ1bk1hdGNoZWRBbHRlcm5hdGlvbiIsIm5keDEiLCJkcm9wTWF0Y2giLCJuZHgyIiwiYWx0TWF0Y2gyIiwicXQiLCJxbmR4IiwiaXNOYU4iLCJxdWFudGlmaWVyIiwicHJldmlvdXNQb3MiLCJtZXJnZUxvY2F0b3JzIiwibXRuZHgiLCJjYXNpbmciLCJnZXRCdWZmZXJUZW1wbGF0ZSIsImdldEJ1ZmZlciIsIm5vQ2FjaGUiLCJyZWZyZXNoRnJvbUJ1ZmZlciIsInZhbFJlc3VsdCIsImlzVmFsaWQiLCJjYXJldCIsImVsZW0iLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwicG9zQmVmb3JlIiwiU1BBQ0UiLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJhcHBseSIsImNoZWNrQWx0ZXJuYXRpb25NYXRjaCIsImFsdEFycjEiLCJhbHRBcnIyIiwibmEiLCJuYU5keCIsImFsdEFyckMiLCJpc01hdGNoIiwibmFBcnIiLCJhbG5keCIsImFsdGVybmF0ZSIsImZyb21TZXRWYWxpZCIsInJBbHRQb3MiLCJsYXN0QWx0IiwiYWx0UG9zIiwicHJldkFsdFBvcyIsInZhbGlkUG9zIiwiZGVjaXNpb25Qb3MiLCJ2YWxpZFBzQ2xvbmUiLCJpc1ZhbGlkUnNsdCIsImxBbHRQb3MiLCJ2YWxpZElucHV0c0Nsb25lIiwic3RhdGljSW5wdXRzQmVmb3JlUG9zIiwicG9zT2Zmc2V0IiwidmFsaWRJbnB1dHMiLCJ0YXJnZXRMdnAiLCJmcm9tQWx0ZXJuYXRlIiwidmFsaWRhdGVPbmx5IiwiaXNTZWxlY3Rpb24iLCJwb3NPYmoiLCJiZWdpbiIsIm1hc2tQb3MiLCJfaXNWYWxpZCIsInBvc2l0aW9uIiwicnNsdCIsInZhbGlkYXRlZFBvcyIsInNvcnQiLCJhIiwiYiIsInJldmFsaWRhdGVNYXNrIiwicmVzdWx0IiwicG9zaXRpb25zQ2xvbmUiLCJwcmVWYWxpZGF0aW9uIiwidHJhY2tiYWNrUG9zaXRpb25zIiwiY3VycmVudFBvc1ZhbGlkIiwiaW5zZXJ0TW9kZSIsInNlZWtOZXh0IiwiaXNNYXNrIiwiblBvcyIsInNuUG9zIiwiaXNDb21wbGV0ZSIsInBvc3RWYWxpZGF0aW9uIiwicG9zdFJlc3VsdCIsInJlZnJlc2giLCJvcmlnaW5hbFBvcyIsIm5ld1BvcyIsImZpbGxPbmx5IiwicHMiLCJjdnBJbnB1dCIsInZhbGlkVGVzdCIsIklzRW5jbG9zZWRTdGF0aWMiLCJzZWxlY3Rpb24iLCJwb3NNYXRjaCIsInJhZGl4UG9pbnQiLCJwcmV2TWF0Y2giLCJuZXh0TWF0Y2giLCJsdnAiLCJpc05lZ2F0aXZlIiwibmVlZHNWYWxpZGF0aW9uIiwic2hpZnRQb3NpdGlvbnMiLCJuZXdCbG9jayIsInNlZWtQcmV2aW91cyIsIndyaXRlQnVmZmVyIiwiY2FyZXRQb3MiLCJldmVudCIsInRyaWdnZXJFdmVudHMiLCJvbkJlZm9yZVdyaXRlIiwiX3ZhbHVlU2V0IiwicmVuZGVyQ29sb3JNYXNrIiwiJGlucHV0IiwibnB0VmFsIiwiX3ZhbHVlR2V0IiwidHJpZ2dlciIsInNldFRpbWVvdXQiLCJyZXR1cm5QTCIsInByZXZUZXN0Iiwic3RhdGljQWx0ZXJuYXRpb25zIiwiSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIiLCJucHQiLCJucHRWYWx1ZSIsInZhbHVlQnVmZmVyIiwiRXZlbnRSdWxlciIsIm9uIiwiZXZlbnRIYW5kbGVyIiwiZXYiLCJ0aGF0Iiwibm9kZU5hbWUiLCJpbU9wdHMiLCJvZmYiLCJkaXNhYmxlZCIsInJlYWRPbmx5IiwiY3RybEtleSIsInRhYlRocm91Z2giLCJUQUIiLCJyZXR1cm5WYWwiLCJzdG9wUHJvcGFnYXRpb24iLCJmb3JtIiwiZXZBcnIiLCJFdmVudEhhbmRsZXJzIiwia2V5ZG93bkV2ZW50IiwiayIsIkJBQ0tTUEFDRSIsIkRFTEVURSIsIkJBQ0tTUEFDRV9TQUZBUkkiLCJYIiwiaGFuZGxlUmVtb3ZlIiwiRU5EIiwiUEFHRV9ET1dOIiwic2hpZnRLZXkiLCJIT01FIiwiUEFHRV9VUCIsInVuZG9PbkVzY2FwZSIsIkVTQ0FQRSIsImFsdEtleSIsImNoZWNrVmFsIiwiSU5TRVJUIiwib25LZXlEb3duIiwiaWdub3JhYmxlcyIsImtleXByZXNzRXZlbnQiLCJjaGVja3ZhbCIsIndyaXRlT3V0Iiwid2hpY2giLCJjaGFyQ29kZSIsIm1ldGFLZXkiLCJFTlRFUiIsImZvcndhcmRQb3NpdGlvbiIsIm9mZnNldCIsIl9yYWRpeERhbmNlIiwid3JpdGVPdXRCdWZmZXIiLCJvbktleVZhbGlkYXRpb24iLCJwYXN0ZUV2ZW50IiwidGVtcFZhbHVlIiwib3JpZ2luYWxFdmVudCIsImlucHV0VmFsdWUiLCJ2YWx1ZUJlZm9yZUNhcmV0Iiwic3Vic3RyIiwidmFsdWVBZnRlckNhcmV0IiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJwYXN0ZVZhbHVlIiwib25CZWZvcmVQYXN0ZSIsImlucHV0RmFsbEJhY2tFdmVudCIsImlucHV0Q2hhciIsIml2IiwiaWVNb2JpbGVIYW5kbGVyIiwicmFkaXhQb2ludEhhbmRsZXIiLCJmcm9udFBhcnQiLCJiYWNrUGFydCIsImZyb250QnVmZmVyUGFydCIsImJhY2tCdWZmZXJQYXJ0IiwiZW50cmllcyIsImlzRW50cnkiLCJmcGwiLCJlbnRyeSIsImtleXByZXNzIiwiRXZlbnQiLCJrZXlkb3duIiwiYmVmb3JlSW5wdXRFdmVudCIsImNhbmNlbGFibGUiLCJpbnB1dFR5cGUiLCJzZXRWYWx1ZUV2ZW50IiwiZGV0YWlsIiwib25CZWZvcmVNYXNrIiwiY2xlYXJNYXNrT25Mb3N0Rm9jdXMiLCJjbGVhckluY29tcGxldGUiLCJmb2N1c0V2ZW50Iiwic2hvd01hc2tPbkZvY3VzIiwicG9zaXRpb25DYXJldE9uVGFiIiwiY2xpY2tFdmVudCIsIm1vdXNlbGVhdmVFdmVudCIsImFjdGl2ZUVsZW1lbnQiLCJ0YWJiZWQiLCJzZWxlY3RlZENhcmV0IiwicG9zaXRpb25DYXJldE9uQ2xpY2siLCJjbGlja1BvcyIsInZwcyIsInJhZGl4UG9zIiwidnAiLCJkb1JhZGl4Rm9jdXMiLCJjbGlja1Bvc2l0aW9uIiwibHZjbGlja1Bvc2l0aW9uIiwibGFzdFBvc2l0aW9uIiwidHQiLCJjdXRFdmVudCIsImNsaXBEYXRhIiwic2V0RGF0YSIsImV4ZWNDb21tYW5kIiwiYmx1ckV2ZW50IiwibW91c2VlbnRlckV2ZW50Iiwic2hvd01hc2tPbkhvdmVyIiwic3VibWl0RXZlbnQiLCJyZW1vdmVNYXNrT25TdWJtaXQiLCJ1bm1hc2tlZHZhbHVlIiwicmVzZXRFdmVudCIsIm5wdHZsIiwiaW5pdGlhdGluZ0V2ZW50IiwiY2hhckNvZGVzIiwiaW5pdGlhbE5keCIsImF1dG9Vbm1hc2siLCJzdGF0aWNJbnB1dCIsIlJlZ0V4cCIsImVzY2FwZVJlZ2V4IiwiaXNUZW1wbGF0ZU1hdGNoIiwidW1WYWx1ZSIsInBuZHgiLCJ1bm1hc2tlZFZhbHVlIiwib25Vbk1hc2siLCJidWZmZXJWYWx1ZSIsIm5vdHJhbnNsYXRlIiwidHJhbnNsYXRlUG9zaXRpb24iLCJyYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0UmFuZ2VBdCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJjcmVhdGVSYW5nZSIsImR1cGxpY2F0ZSIsIm1vdmVTdGFydCIsInNjcm9sbENhbGMiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwiZm9udFNpemUiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJ0ZXh0Tm9kZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29sbGFwc2UiLCJzZWwiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsIm1vdmVFbmQiLCJzZWxlY3QiLCJkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbiIsInJldHVybkRlZmluaXRpb24iLCJibCIsInBvc2l0aW9ucyIsImx2VGVzdCIsImx2VGVzdEFsdCIsInRlbXBsYXRlIiwiY29tcGxldGUiLCJscnAiLCJhbWwiLCJmcm9tSXNWYWxpZCIsInBlbmQiLCJncm91cFNlcGFyYXRvciIsImluaXRpYWxpemVDb2xvck1hc2siLCJjb21wdXRlZFN0eWxlIiwid2lkdGgiLCJ0ZXh0QWxpZ24iLCJsZWZ0Iiwib2Zmc2V0TGVmdCIsImNsaWVudHgiLCJ0ZXh0VHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImhlaWdodCIsInZpc2liaWxpdHkiLCJ3aGl0ZVNwYWNlIiwiYm9keSIsIml0bCIsImlucHV0VGV4dCIsInByZXZpb3VzV2lkdGgiLCJpbm5lckhUTUwiLCJvZmZzZXRXaWR0aCIsIm9mZnNldDEiLCJvZmZzZXQyIiwiZmluZENhcmV0UG9zIiwiY2xpZW50WCIsImNsZWFyIiwiaXNTdGF0aWMiLCJzZXRFbnRyeSIsIm10bCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicG9zaXRpb25Db2xvck1hc2siLCJhY3Rpb24iLCJlbGVtZW50VHlwZSIsImdldEF0dHJpYnV0ZSIsInN1cHBvcnRzSW5wdXRUeXBlIiwiaXNDb250ZW50RWRpdGFibGUiLCJ2YWx1ZUdldCIsInZhbHVlU2V0IiwibnVsbGFibGUiLCJzZXR0ZXIiLCJfX3ZhbHVlR2V0Iiwibm9WYWx1ZVBhdGNoaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJjb25zdHJ1Y3RvciIsInZhbHVlUHJvcGVydHkiLCJzZXQiLCJjb25maWd1cmFibGUiLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2RlZmluZVNldHRlcl9fIiwiX192YWx1ZVNldCIsIm92ZXJydWxlUlRMIiwidmFsSG9va3MiLCJpbnB1dG1hc2twYXRjaCIsInZhbGhvb2tHZXQiLCJ2YWxob29rU2V0IiwiJGVsZW0iLCJwYXRjaFZhbGhvb2siLCJpbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayIsInBhdGNoVmFsdWVQcm9wZXJ0eSIsImlzRWxlbWVudFR5cGVTdXBwb3J0ZWQiLCJpbnB1dG1vZGUiLCJkaXNhYmxlUHJlZGljdGl2ZVRleHQiLCJhdXRvY29ycmVjdCIsIm9uY29tcGxldGUiLCJvbmluY29tcGxldGUiLCJvbmNsZWFyZWQiLCJpbnB1dEV2ZW50T25seSIsImluaXRpYWxWYWx1ZSIsInJsIiwibG1pYiIsIm1hc2tUYXJnZXQiLCJtdGR0IiwiZGF0YUF0dHJpYnV0ZSIsIm9wdGlvbmFsbWFya2VyIiwiZXNjYXBlQ2hhciIsIm5vb3AiLCJwYXN0ZWRWYWx1ZSIsInJpZ2h0QWxpZ24iLCJzdGF0aWNEZWZpbml0aW9uU3ltYm9sIiwiaW1wb3J0RGF0YUF0dHJpYnV0ZXMiLCI5IiwidmFsaWRhdG9yIiwiZGVmaW5pdGlvblN5bWJvbCIsImVsZW1zIiwiZ2V0RWxlbWVudEJ5SWQiLCJzY29wZWRPcHRzIiwib3B0aW9uIiwiZGF0YW9wdGlvbnMiLCJvcHRpb25EYXRhIiwiYXR0ck9wdGlvbnMiLCJpbXBvcnRPcHRpb24iLCJwYXJzZSIsImRpciIsImltcG9ydEF0dHJpYnV0ZU9wdGlvbnMiLCJub3JlbWFzayIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJmb3JtYXQiLCJzZXRWYWx1ZSIsIm9wZW5pbmdUb2tlbiIsImN1cnJlbnRPcGVuaW5nVG9rZW4iLCJhbHRlcm5hdG9yIiwibGFzdE1hdGNoIiwidG9rZW5pemVyIiwicmVnZXhUb2tlbml6ZXIiLCJlc2NhcGVkIiwiY3VycmVudFRva2VuIiwiTWFza1Rva2VuIiwib3BlbmVuaW5ncyIsIm9wZW5Hcm91cCIsImFsdGVybmF0b3JHcm91cCIsImluc2VydFRlc3REZWZpbml0aW9uIiwibXRva2VuIiwibWFza2RlZiIsImRlZmF1bHRDYXNlIiwibW5keCIsImdyb3VwaWZ5IiwiZ3JvdXBUb2tlbiIsImV4ZWMiLCJtcWoiLCJtcSIsIm1xMCIsIm1xMSIsInRtcE1hdGNoIiwiZ3JvdXBRdWFudGlmaWVyIiwic3ViVG9rZW4iLCJ2ZXJpZnlHcm91cE1hcmtlciIsInRva2VuIiwibmV4dFRva2VuIiwicmV2ZXJzZVRva2VucyIsImludE1hdGNoIiwic3QiLCJleHRlbmREZWZhdWx0cyIsImV4dGVuZERlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4dGVuZEFsaWFzZXMiLCJ1bm1hc2siLCJzdHIiLCJET1dOIiwiTEVGVCIsIlJJR0hUIiwiVVAiLCJDT05UUk9MIiwiZGVwZW5kZW5jeUxpYiIsInJlcXVpcmUiLCJldmFsIiwiQSIsImNzc3VuaXQiLCJ1cmwiLCJpcCIsImNocnMiLCJtYXNrZWRWYWx1ZSIsImVtYWlsIiwibWFjIiwidmluIiwiViIsImhhc2giLCJuZWVkUXVvdGVzIiwiaXNXaW5kb3ciLCJpc1ZhbGlkRWxlbWVudCIsIkVsZW1lbnQiLCJEZXBlbmRlbmN5TGliIiwiZXZlbnRSZWdpc3RyeSIsImhhbmRsZXIiLCJhZGRFdmVudCIsIm5hbWVzcGFjZSIsImF0dGFjaEV2ZW50IiwiX2V2ZW50cyIsImVuZHgiLCJuc0V2ZW50IiwicmVtb3ZlRXZlbnQiLCJkZXRhY2hFdmVudCIsIm5tc3AiLCJyZXNvbHZlTmFtZXNwYWNlIiwiaG5keCIsImhuZEwiLCJldnRzIiwiZXZOZHgiLCJvZmZFdmVudHMiLCJvZmZFdmVudHNMIiwiZXZudCIsInBhcmFtcyIsImJ1YmJsZXMiLCJjcmVhdGVFdmVudCIsIkN1c3RvbUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiZmlyZUV2ZW50IiwiYXJyIiwibGVuIiwibm9kZVR5cGUiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJjYWxsYmFjayIsImx0eXBlIiwiaXNBcnJheWxpa2UiLCJvd25lciIsIl9fZGF0YSIsImZvcm1hdENvZGUiLCJEYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJkZCIsInBhZCIsImRkZCIsImRkZGQiLCJzZXRNb250aCIsImdldE1vbnRoIiwibW0iLCJtbW0iLCJtbW1tIiwieXkiLCJzZXRGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwieXl5eSIsImgiLCJzZXRIb3VycyIsImdldEhvdXJzIiwiaGgiLCJoaGgiLCJIIiwiSEgiLCJISEgiLCJNIiwic2V0TWludXRlcyIsImdldE1pbnV0ZXMiLCJNTSIsInNzIiwic2V0U2Vjb25kcyIsImdldFNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJMIiwiVCIsIlRUIiwiWiIsIlMiLCJmb3JtYXRBbGlhcyIsImlzb0RhdGUiLCJpc29UaW1lIiwiaXNvRGF0ZVRpbWUiLCJpc29VdGNEYXRlVGltZSIsImdldFRva2VuaXplciIsInRva2VucyIsImRhdGVPYmpWYWx1ZSIsInJhdyIsImRhdGUiLCJ2YWwiLCJtYXNrU3RyaW5nIiwidGFyZ2V0UHJvcCIsImRhdGVPcGVyYXRpb24iLCJkYXRlT2JqIiwiZXh0ZW5kUHJvcGVydHkiLCJjb3JyZWN0ZWRWYWx1ZSIsImVudGVyZWRQYXJ0IiwiZGF0ZXRpbWUiLCJpMThuIiwib3JkaW5hbFN1ZmZpeCIsImlucHV0Rm9ybWF0IiwiZGlzcGxheUZvcm1hdCIsIm91dHB1dEZvcm1hdCIsImRheU5hbWVzIiwibW9udGhOYW1lcyIsImN1cnJlbnRSZXN1bHQiLCJkYXRlUGFydHMiLCJnZXRUaW1lIiwicmF3ZGF5IiwiZGF5IiwicmF3eWVhciIsInJhd21vbnRoIiwibW9udGgiLCJpc1ZhbGlkRGF0ZSIsInJhd1llYXIiLCJtaW5ZZWFyIiwieWVhciIsImlzRGF0ZUluUmFuZ2UiLCJ0b2RheSIsImdldFllYXIiLCJhdXRvRXNjYXBlIiwidHh0IiwiZXNjYXBlZFR4dCIsIm51bWVyaWMiLCJpbnRlZ2VyRGlnaXRzIiwiZGlnaXRzIiwiYXV0b0dyb3VwIiwiZ3JvdXBTaXplIiwic2VwcyIsIm1vZCIsImludGVnZXJPcHRpb25hbCIsImRpZ2l0c09wdGlvbmFsIiwiZGVjaW1hbFByb3RlY3QiLCJwcmVmaXgiLCJyYWRpeERlZiIsImRxIiwic3VmZml4IiwiZW5mb3JjZURpZ2l0c09uQmx1ciIsImFsbG93TWludXMiLCJuZWdhdGlvblN5bWJvbCIsImZyb250IiwiYmFjayIsInN0ZXAiLCJ1bm1hc2tBc051bWJlciIsImRvcG9zdCIsImNoYXJBdFBvcyIsInByb2Nlc3NWYWx1ZSIsInJhZGl4UG9zaXRpb24iLCJycGIiLCJhZGRSYWRpeCIsInBvc3RNYXNrIiwicmFkaXhTcGxpdCIsImJ1aWxkUG9zdE1hc2siLCJjYXJkaW5hbGl0eSIsIm5ld0NhcmV0UG9zIiwidW5tYXNrZWQiLCJwYXJzZU1pbk1heE9wdGlvbnMiLCJwYXJzZUZsb2F0IiwiTmFOIiwiTnVtYmVyIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwiaW50ZWdlclBhcnQiLCJlbXB0eUNoZWNrIiwiaW50ZWdlck5QYXJ0IiwicHZSYWRpeFNwbGl0IiwiYnVmZmVyVGVtcGxhdGUiLCJyYWRpeCIsInZhbHVlUGFydHMiLCJkZWNpbWFsUGFydCIsImRpZ2l0c0ZhY3RvciIsInBvdyIsInJvdW5kIiwic3Vic3RyaW5nIiwiYWxpZ25EaWdpdHMiLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX18iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFC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LHdCQUE0QkMsRUFBcUMsNEJBQWdDbTVCLEVBQXFDLGlHQUF1R0MsRUFBcUMsYUFBZUEsRUFBcUMsd0JBQTRCQyxFQUFzQyw0QkFBZ0NDLEVBQXNDLDJVQUFrVixLQUV4bEg3aUMsRUFBT0QsUUFBVUEsRyxrQkMvQmpCQyxFQUFPRCxRQUFVLElBQTBCLHlDLGtCQ0EzQ0MsRUFBT0QsUUFBVSxJQUEwQix3QyxrQkNBM0NDLEVBQU9ELFFBQVUsSUFBMEIiLCJmaWxlIjoiZm9ybS1lbGVtZW50cy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTkyKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbGlzdCwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogbGlzdFtpXVsxXSxcbiAgICAgIG1lZGlhOiBsaXN0W2ldWzJdLFxuICAgICAgc291cmNlTWFwOiBsaXN0W2ldWzNdXG4gICAgfTtcblxuICAgIGlmIChzdHlsZXNJbkRvbVttb2R1bGVJZF1baV0pIHtcbiAgICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXVtpXShwYXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb21bbW9kdWxlSWRdLnB1c2goYWRkU3R5bGUocGFydCwgb3B0aW9ucykpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIG1vZHVsZUlkID0gb3B0aW9ucy5iYXNlID8gbW9kdWxlSWQgKyBvcHRpb25zLmJhc2UgOiBtb2R1bGVJZDtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG5cbiAgaWYgKCFzdHlsZXNJbkRvbVttb2R1bGVJZF0pIHtcbiAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0gPSBbXTtcbiAgfVxuXG4gIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc3R5bGVzSW5Eb21bbW9kdWxlSWRdKSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0gPSBbXTtcbiAgICB9XG5cbiAgICBtb2R1bGVzVG9Eb20obW9kdWxlSWQsIG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaiA9IG5ld0xpc3QubGVuZ3RoOyBqIDwgc3R5bGVzSW5Eb21bbW9kdWxlSWRdLmxlbmd0aDsgaisrKSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF1bal0oKTtcbiAgICB9XG5cbiAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0ubGVuZ3RoID0gbmV3TGlzdC5sZW5ndGg7XG5cbiAgICBpZiAoc3R5bGVzSW5Eb21bbW9kdWxlSWRdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW21vZHVsZUlkXTtcbiAgICB9XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImRiOTFjYjY4NzRjYmEwMDg3ZTY1NDVkYjRiNWFkMzQ1LndvZmZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhM2IzODdjOTM4ODI2MDQ3OTI4Njc3MzZhZWNkNTZjOC50dGZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIwNGRkNThkODRlYTA5ODdiM2RkN2UyNmUyM2ZhZTE5My5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIwMjk2OTM4MmM4ZjUxYzAzNGIyMjFiMDQzYTQ2ZTk0YS53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjc4YjEyYTZhOTM4YzMyZWI1ZmE4OGYyZjQzOWMyZGYudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjg1MzFhOTJlNzNiM2EwYjY3NGMwYmNmODAwMWM3NGEuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmE0NTU0YTIxZjJkZjIyMDgzNDVlN2MxNTNlYTc3OWUud29mZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjgwOWNkOGFiOTdjNDY1YjU3Y2IxYTQ0YjE3OTVmMTJjLnR0ZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImQ1MjQ3YjM3MzRiYjBhYTNlODljOTA1MTNiNGE0YjdjLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdmN2U5MTVlMDMwOTkxZmQyYTBmZjNhMjYwMTI5ODk0LnN2Z1wiOyIsImltcG9ydCBcIi4uLy4uL3N0eWxlL2luZGV4LnNjc3NcIjtcclxuaW1wb3J0IFwiLi9mb3JtLWVsZW1lbnRzLnNjc3NcIjtcclxuaW1wb3J0IElucHV0bWFzayBmcm9tIFwiaW5wdXRtYXNrXCI7XHJcbmltcG9ydCBEcm9wRG93biBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kcm9wLWRvd24vZHJvcC1kb3duXCI7XHJcblxyXG5JbnB1dG1hc2soeyBtYXNrOiBcIjk5Ljk5Ljk5OTlcIiwgcGxhY2Vob2xkZXI6IFwi0JTQlC7QnNCcLtCT0JPQk9CTXCIgfSkubWFzayhcclxuICBcIiNtYXNrZWRUZXh0RmllbGRcIlxyXG4pO1xyXG5JbnB1dG1hc2soeyBtYXNrOiBcIjk5Ljk5Ljk5OTlcIiwgcGxhY2Vob2xkZXI6IFwi0JTQlC7QnNCcLtCT0JPQk9CTXCIgfSkubWFzayhcclxuICBcIiNhcnJpdmFsLWlucHV0XCJcclxuKTtcclxuSW5wdXRtYXNrKHsgbWFzazogXCI5OS45OS45OTk5XCIsIHBsYWNlaG9sZGVyOiBcIjE5LjA4LjIwMTlcIiB9KS5tYXNrKFxyXG4gIFwiI2RlcGFydHVyZS1pbnB1dFwiXHJcbik7XHJcblxyXG5jb25zdCBkcm9wRG93bkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHJvcC1kb3duLWNvbnRhaW5lclwiKTtcclxuY29uc3QgaW5wdXREcm9wRG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbnVtYmVyLWd1ZXN0cy1pbnB1dDJcIik7XHJcblxyXG5jb25zdCBkcm9wRG93bk9wdGlvbnMgPSB7XHJcbiAgY29udGFpbmVyOiBkcm9wRG93bkNvbnRhaW5lcixcclxuICBpbnB1dDogaW5wdXREcm9wRG93bixcclxuICBjb3VudEVsZW1lbnRzOiBbXHJcbiAgICB7IG5hbWU6IFwi0KHQv9Cw0LvRjNC90LhcIiwgY291bnRHcm91cE5hbWU6IFwiYmVkcm9vbXNcIiwgc3RhcnRWYWx1ZTogMiB9LFxyXG4gICAgeyBuYW1lOiBcItCa0YDQvtCy0LDRgtC4XCIsIGNvdW50R3JvdXBOYW1lOiBcImJlZFwiLCBzdGFydFZhbHVlOiAyIH0sXHJcbiAgICB7IG5hbWU6IFwi0JLQsNC90L3Ri9C1INC60L7QvNC90LDRgtGLXCIsIGNvdW50R3JvdXBOYW1lOiBcImJhdGhcIiwgc3RhcnRWYWx1ZTogMCB9XHJcbiAgXSxcclxuICBjb3VudEdyb3VwVmlldzoge1xyXG4gICAgYmVkcm9vbXM6IHsgY291bnRlcjogMiwgdmlld3M6IFtcItGB0L/QsNC70YzQvdGPXCIsIFwi0YHQv9Cw0LvRjNC90LhcIiwgXCLRgdC/0LDQu9C10L1cIl0gfSxcclxuICAgIGJlZDogeyBjb3VudGVyOiAyLCB2aWV3czogW1wi0LrRgNC+0LLQsNGC0YxcIiwgXCLQutGA0L7QstCw0YLQuFwiLCBcItC60YDQvtCy0LDRgtC10LlcIl0gfSxcclxuICAgIGJhdGg6IHtcclxuICAgICAgY291bnRlcjogMCxcclxuICAgICAgdmlld3M6IFtcItCy0LDQvdC90LDRjyDQutC+0LzQvdCw0YLQsFwiLCBcItCy0LDQvdC90YvQtSDQutC+0LzQvdCw0YLRi1wiLCBcItCy0LDQvdC90YvRhSDQutC+0LzQvdCw0YJcIl1cclxuICAgIH1cclxuICB9LFxyXG4gIHBsYWNlaG9sZGVyOiBcItCj0LTQvtCx0YHRgtCy0LAg0L3QvtC80LXRgNCwXCIsXHJcbiAgaXNIaWRlQ29udHJvbDogdHJ1ZSxcclxuICBpc1BpblNob3c6IHRydWVcclxufTtcclxuXHJcbmNvbnN0IGRyb3BEb3duID0gbmV3IERyb3BEb3duKGRyb3BEb3duT3B0aW9ucyk7XHJcbmRyb3BEb3duLmluaXQoKTtcclxuXHJcbmNvbnN0IGRyb3BEb3duR3Vlc3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Ryb3AtZG93bi1jb250YWluZXIyXCIpO1xyXG5jb25zdCBpbnB1dERyb3BEb3duR3Vlc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI251bWJlci1ndWVzdHMtaW5wdXQzXCIpO1xyXG5cclxuY29uc3QgZHJvcERvd25HdWVzdE9wdGlvbnMgPSB7XHJcbiAgY29udGFpbmVyOiBkcm9wRG93bkd1ZXN0Q29udGFpbmVyLFxyXG4gIGlucHV0OiBpbnB1dERyb3BEb3duR3Vlc3QsXHJcbiAgY291bnRFbGVtZW50czogW1xyXG4gICAgeyBuYW1lOiBcItCS0LfRgNC+0YHQu9GL0LVcIiwgY291bnRHcm91cE5hbWU6IFwiZ3Vlc3RcIiB9LFxyXG4gICAgeyBuYW1lOiBcItCU0LXRgtC4XCIsIGNvdW50R3JvdXBOYW1lOiBcImd1ZXN0XCIgfSxcclxuICAgIHsgbmFtZTogXCLQnNC70LDQtNC10L3RhtGLXCIsIGNvdW50R3JvdXBOYW1lOiBcImNoaWxkXCIgfVxyXG4gIF0sXHJcbiAgY291bnRHcm91cFZpZXc6IHtcclxuICAgIGd1ZXN0OiB7IGNvdW50ZXI6IDAsIHZpZXdzOiBbXCLQs9C+0YHRgtGMXCIsIFwi0LPQvtGB0YLRj1wiLCBcItCz0L7RgdGC0LXQuVwiXSB9LFxyXG4gICAgY2hpbGQ6IHsgY291bnRlcjogMCwgdmlld3M6IFtcItC80LvQsNC00LXQvdC10YZcIiwgXCLQvNC70LDQtNC10L3RhtCwXCIsIFwi0LzQu9Cw0LTQtdC90YbQtdCyXCJdIH1cclxuICB9LFxyXG4gIHBsYWNlaG9sZGVyOiBcItCh0LrQvtC70YzQutC+INCz0L7RgdGC0LXQuVwiLFxyXG4gIGlzUGluU2hvdzogdHJ1ZVxyXG59O1xyXG5cclxuY29uc3QgZHJvcERvd25HdWVzdCA9IG5ldyBEcm9wRG93bihkcm9wRG93bkd1ZXN0T3B0aW9ucyk7XHJcbmRyb3BEb3duR3Vlc3QuaW5pdCgpO1xyXG5cclxuY29uc3QgZHJvcERvd25RdWVzdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHJvcC1kb3duLWNvbnRhaW5lcjNcIik7XHJcbmNvbnN0IGlucHV0RHJvcERvd25RdWVzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbnVtYmVyLWd1ZXN0cy1pbnB1dDRcIik7XHJcblxyXG5jb25zdCBkcm9wRG93blF1ZXN0T3B0aW9ucyA9IHtcclxuICBjb250YWluZXI6IGRyb3BEb3duUXVlc3RDb250YWluZXIsXHJcbiAgaW5wdXQ6IGlucHV0RHJvcERvd25RdWVzdCxcclxuICBjb3VudEVsZW1lbnRzOiBbXHJcbiAgICB7IG5hbWU6IFwi0JLQt9GA0L7RgdC70YvQtVwiLCBjb3VudEdyb3VwTmFtZTogXCJndWVzdFwiLCBzdGFydFZhbHVlOiAyIH0sXHJcbiAgICB7IG5hbWU6IFwi0JTQtdGC0LhcIiwgY291bnRHcm91cE5hbWU6IFwiZ3Vlc3RcIiwgc3RhcnRWYWx1ZTogMSB9LFxyXG4gICAgeyBuYW1lOiBcItCc0LvQsNC00LXQvdGG0YtcIiwgY291bnRHcm91cE5hbWU6IFwiY2hpbGRcIiB9XHJcbiAgXSxcclxuICBjb3VudEdyb3VwVmlldzoge1xyXG4gICAgZ3Vlc3Q6IHsgY291bnRlcjogMywgdmlld3M6IFtcItCz0L7RgdGC0YxcIiwgXCLQs9C+0YHRgtGPXCIsIFwi0LPQvtGB0YLQtdC5XCJdIH0sXHJcbiAgICBjaGlsZDogeyBjb3VudGVyOiAwLCB2aWV3czogW1wi0LzQu9Cw0LTQtdC90LXRhlwiLCBcItC80LvQsNC00LXQvdGG0LBcIiwgXCLQvNC70LDQtNC10L3RhtC10LJcIl0gfVxyXG4gIH0sXHJcbiAgcGxhY2Vob2xkZXI6IFwi0KHQutC+0LvRjNC60L4g0LPQvtGB0YLQtdC5XCIsXHJcbiAgaXNQaW5TaG93OiB0cnVlXHJcbn07XHJcblxyXG5jb25zdCBkcm9wRG93blF1ZXN0ID0gbmV3IERyb3BEb3duKGRyb3BEb3duUXVlc3RPcHRpb25zKTtcclxuZHJvcERvd25RdWVzdC5pbml0KCk7XHJcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS03LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9ybS1lbGVtZW50cy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2NoZWNrYm94L2V4cGFuZC1tb3JlLnBuZ1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2xpa2VidG4vbGlrZS5wbmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9saWtlYnRuL2xpa2UtYWN0aXZlLnBuZ1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL3JhdGVidG4vc3Rhci5wbmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9yYXRlYnRuL3N0YXItYWN0aXZlLnBuZ1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2lucHV0L2V4cGFuZC1tb3JlLnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2J1dHRvbi9hcnJvdy5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9wYWdpbmF0aW9uL2Fycm93LnBuZ1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jaGVja2JveF9fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxOHB4O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5jaGVja2JveF9fdGl0bGUtLWV4cGFuZGFibGV7cG9zaXRpb246cmVsYXRpdmV9LmNoZWNrYm94X190aXRsZS0tZXhwYW5kYWJsZSBidXR0b257d2lkdGg6MTAwJTtjb2xvcjojMWYyMDQxO3RleHQtYWxpZ246bGVmdH0uY2hlY2tib3hfX3RpdGxlLS1leHBhbmRhYmxlIGJ1dHRvbjo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjRweDtyaWdodDoxNXB4O3dpZHRoOjEycHg7aGVpZ2h0OjhweDtjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBuby1yZXBlYXQ7Y3Vyc29yOnBvaW50ZXJ9LmNoZWNrYm94X190aXRsZS0tZXhwYW5kYWJsZS1vcGVuIGJ1dHRvbjo6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfS5jaGVja2JveF9fZXhwYW5kYWJsZXttYXJnaW46MDtwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Ym9yZGVyOm5vbmU7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjdXJzb3I6cG9pbnRlcn0uY2hlY2tib3hfX2l0ZW17d2lkdGg6MjQwcHg7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxMnB4fS5jaGVja2JveF9faXRlbTpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0uY2hlY2tib3gtLXJpY2ggLmNoZWNrYm94X19pdGVte3dpZHRoOjI2NHB4fS5jaGVja2JveF9faXRlbSBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJde2Rpc3BsYXk6bm9uZX0uY2hlY2tib3hfX2l0ZW0gbGFiZWx7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztwYWRkaW5nLWxlZnQ6MzBweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNDUpO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDtsaW5lLWhlaWdodDoxOHB4O2N1cnNvcjpwb2ludGVyfS5jaGVja2JveF9faXRlbSBsYWJlbDo6YmVmb3Jley13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTJweDtsZWZ0OjA7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlci1yYWRpdXM6NHB4Oy13ZWJraXQtdHJhbnNpdGlvbjpib3JkZXIgMC4zcyBlYXNlIDBzO3RyYW5zaXRpb246Ym9yZGVyIDAuM3MgZWFzZSAwc30uY2hlY2tib3hfX2l0ZW0gbGFiZWw6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDozcHg7bGVmdDo3cHg7d2lkdGg6NHB4O2hlaWdodDo2cHg7Ym9yZGVyLWJvdHRvbToycHggc29saWQgI2JjOWNmZjtib3JkZXItcmlnaHQ6MnB4IHNvbGlkICNiYzljZmY7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDAuM3MgZWFzZSAwcywgdmlzaWJpbGl0eSAwLjNzIGVhc2UgMHM7dHJhbnNpdGlvbjpvcGFjaXR5IDAuM3MgZWFzZSAwcywgdmlzaWJpbGl0eSAwLjNzIGVhc2UgMHN9LmNoZWNrYm94X19pdGVtIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCtsYWJlbDo6YWZ0ZXJ7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0uY2hlY2tib3hfX2l0ZW0gaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTpjaGVja2VkK2xhYmVsOjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNiYzljZmZ9LmNoZWNrYm94X19kZXNjcnttYXJnaW46MDttYXJnaW4tdG9wOjVweDtmb250LXdlaWdodDpub3JtYWw7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE0cHh9LmNoZWNrYm94X19pdGVtIC5jaGVjYm94X19sYmwtLXJpY2h7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxOHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmNoZWNrYm94X19pdGVtLWxpc3QtLWhpZGV7ZGlzcGxheTpub25lfS5yYWRpb2J0bl9fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxOHB4O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5yYWRpb2J0bl9faXRlbXtkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW46MDttYXJnaW4tcmlnaHQ6MTZweDt2ZXJ0aWNhbC1hbGlnbjp0b3B9LnJhZGlvYnRuX19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9LnJhZGlvYnRuX19pdGVtIGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl17ZGlzcGxheTpub25lfS5yYWRpb2J0bl9faXRlbSBsYWJlbHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmctbGVmdDozMHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC40NSk7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6bm9ybWFsO2xpbmUtaGVpZ2h0OjE4cHg7Y3Vyc29yOnBvaW50ZXJ9LnJhZGlvYnRuX19pdGVtIGxhYmVsOjpiZWZvcmV7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMnB4O2xlZnQ6MDt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czo1MCU7LXdlYmtpdC10cmFuc2l0aW9uOmJvcmRlciAwLjNzIGVhc2UgMHM7dHJhbnNpdGlvbjpib3JkZXIgMC4zcyBlYXNlIDBzfS5yYWRpb2J0bl9faXRlbSBsYWJlbDo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjJweDtsZWZ0OjRweDt3aWR0aDoxMnB4O2hlaWdodDoxMnB4O2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjYmM5Y2ZmKSwgdG8oIzhiYTRmOSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiAwJSwgIzhiYTRmOSAxMDAlKTstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAwLjNzIGVhc2UgMHMsIHZpc2liaWxpdHkgMC4zcyBlYXNlIDBzO3RyYW5zaXRpb246b3BhY2l0eSAwLjNzIGVhc2UgMHMsIHZpc2liaWxpdHkgMC4zcyBlYXNlIDBzfS5yYWRpb2J0bl9faXRlbSBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQrbGFiZWw6OmFmdGVye3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjF9LnJhZGlvYnRuX19pdGVtIGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl06Y2hlY2tlZCtsYWJlbDo6YmVmb3Jle2JvcmRlci1jb2xvcjojYmM5Y2ZmfS5yYWRpb2J0bl9faXRlbSBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQrbGFiZWx7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0udG9nZ2xlX190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE4cHg7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnRvZ2dsZV9faXRlbXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE1cHh9LnRvZ2dsZV9faXRlbTpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0udG9nZ2xlX19pdGVtIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl17ZGlzcGxheTpub25lfS50b2dnbGVfX2l0ZW0gbGFiZWx7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztwYWRkaW5nLWxlZnQ6NTBweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNDUpO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDtsaW5lLWhlaWdodDoxOHB4O2N1cnNvcjpwb2ludGVyfS50b2dnbGVfX2l0ZW0gbGFiZWw6OmJlZm9yZXstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjQwcHg7aGVpZ2h0OjIwcHg7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItcmFkaXVzOjEwcHg7LXdlYmtpdC10cmFuc2l0aW9uOmJvcmRlciAwLjNzIGVhc2UgMHM7dHJhbnNpdGlvbjpib3JkZXIgMC4zcyBlYXNlIDBzfS50b2dnbGVfX2l0ZW0gbGFiZWw6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjRweDtsZWZ0OjRweDt3aWR0aDoxMnB4O2hlaWdodDoxMnB4O2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQ6cmdiYSgzMSwzMiw2NSwwLjI1KTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4ycyBlYXNlIDBzO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4ycyBlYXNlIDBzO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMnMgZWFzZSAwczt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjJzIGVhc2UgMHMsIC13ZWJraXQtdHJhbnNmb3JtIDAuMnMgZWFzZSAwc30udG9nZ2xlX19pdGVtIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCtsYWJlbDo6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oI2JjOWNmZiksIHRvKCM4YmE0ZjkpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYgMCUsICM4YmE0ZjkgMTAwJSl9LnRvZ2dsZV9faXRlbSBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQrbGFiZWw6OmJlZm9yZXtib3JkZXItY29sb3I6I2JjOWNmZn0ubGlrZWJ0bl9fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxOHB4O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5saWtlYnRuX19pdGVte2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcDttYXJnaW46MDttYXJnaW4tcmlnaHQ6NnB4fS5saWtlYnRuX19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9Lmxpa2VidG5fX2l0ZW0gYnV0dG9uey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo0MHB4O2hlaWdodDoyMHB4O21hcmdpbjowO3BhZGRpbmc6MDtwYWRkaW5nLWxlZnQ6N3B4O2NvbnRlbnQ6XFxcIlxcXCI7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MTBweDtsaW5lLWhlaWdodDoxMnB4O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlci1yYWRpdXM6MTBweH0ubGlrZWJ0bl9faXRlbSBidXR0b246OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFxcIlxcXCI7dG9wOjVweDtsZWZ0OjNweDt3aWR0aDoxMHB4O2hlaWdodDo4cHg7YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpIG5vLXJlcGVhdH0ubGlrZWJ0bl9faXRlbS0tYWN0aXZlIGJ1dHRvbntjb2xvcjojYmM5Y2ZmO2JvcmRlci1jb2xvcjojYmM5Y2ZmfS5saWtlYnRuX19pdGVtLS1hY3RpdmUgYnV0dG9uOjphZnRlcntiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gKyBcIikgbm8tcmVwZWF0fS5yYXRlYnRuX190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE4cHg7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnJhdGVidG5fX2l0ZW17ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246cmV2ZXJzZTstbXMtZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2U7ZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2U7LXdlYmtpdC1ib3gtcGFjazplbmQ7LW1zLWZsZXgtcGFjazplbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO21hcmdpbi1yaWdodDoyNXB4O2ZvbnQtc2l6ZTowfS5yYXRlYnRuX19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9LnJhdGVidG5fX2l0ZW0gaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXXtkaXNwbGF5Om5vbmV9LnJhdGVidG5fX2l0ZW0gbGFiZWx7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jazt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O21hcmdpbi1sZWZ0OjRweDtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gKyBcIikgbm8tcmVwZWF0O2N1cnNvcjpwb2ludGVyfS5yYXRlYnRuX19pdGVtIGxhYmVsOmxhc3QtY2hpbGR7bWFyZ2luLWxlZnQ6MH0ucmF0ZWJ0bl9faXRlbSBsYWJlbDpob3ZlciwucmF0ZWJ0bl9faXRlbSBsYWJlbDpob3ZlciB+IGxhYmVse2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSBuby1yZXBlYXR9LnJhdGVidG5fX2l0ZW0gaW5wdXQ6Y2hlY2tlZCB+IGxhYmVse2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSBuby1yZXBlYXR9LnJhdGVidG5fX2l0ZW0td3JhcHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fS5yYW5nZV9fd3JhcHtwb3NpdGlvbjpyZWxhdGl2ZX0ucmFuZ2VfX2hlYWR7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuOy13ZWJraXQtYm94LWFsaWduOnN0YXJ0Oy1tcy1mbGV4LWFsaWduOnN0YXJ0O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7Zm9udC1zaXplOjB9LnJhbmdlX19oZWFkIHNwYW57Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LXNpemU6MTNweH0ucmFuZ2VfdmFsdWV7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowO21hcmdpbi1yaWdodDoycHg7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpub3JtYWw7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt2ZXJ0aWNhbC1hbGlnbjp0b3A7Ym9yZGVyOm5vbmU7YmFja2dyb3VuZDp0cmFuc3BhcmVudH0ucmFuZ2VfdmFsdWU6bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MDttYXJnaW4tbGVmdDoycHh9LnJhbmdlX190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE4cHg7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnJhbmdlX19iYXJ7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDoxNnB4O2JvdHRvbTowO3JpZ2h0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6NHB4O21hcmdpbjphdXRvO2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnJhbmdlX19zY2FsZXtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjkwcHg7dG9wOjA7aGVpZ2h0OjRweDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oIzZmY2Y5NyksIHRvKCM2NmQyZWEpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICM2ZmNmOTcgMCUsICM2NmQyZWEgMTAwJSl9LnJhbmdlX190b2dnbGV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEycHg7aGVpZ2h0OjEycHg7Ym9yZGVyOjJweCBzb2xpZCAjZmZmZmZmO2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjNmZjZjk3KSwgdG8oIzY2ZDJlYSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZCAwLjRzIGVhc2UgMHMsIGJvcmRlciAwLjRzIGVhc2UgMHM7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDAuNHMgZWFzZSAwcywgYm9yZGVyIDAuNHMgZWFzZSAwc30ucmFuZ2VfX3RvZ2dsZS0tbWlue2xlZnQ6NzVweH0ucmFuZ2VfX3RvZ2dsZS0tbWF4e2xlZnQ6MTYwcHh9LnRpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MThweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0udGl0bGUtd3JhcHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnRpdGxlX19kZXNjcnttYXJnaW46MDtwYWRkaW5nLWJvdHRvbTo0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5pbnB1dC1ncm91cHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O21hcmdpbjowfS5pbnB1dC1ncm91cC0tY29sdW1uey1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQsLmlucHV0LWdyb3VwOmZvY3VzIC5pbnB1dC1ncm91cF9faW5wdXR7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVyLCAuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVyLCAuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6OnBsYWNlaG9sZGVyLC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cDpob3ZlciAuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdCwuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19idXR0b24tc3BsaXR7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19sYWJlbHttYXJnaW46MDttYXJnaW4tYm90dG9tOjVweH0uaW5wdXQtZ3JvdXBfX2Rlc2Nye21hcmdpbjowO3BhZGRpbmctYm90dG9tOjRweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNDUpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmlucHV0LWdyb3VwX19sYWJlbC0tYmlne2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5pbnB1dC1ncm91cF9fc3BsaXR7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO21hcmdpbjowfS5pbnB1dC1ncm91cF9faW5wdXR7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjEwMCU7cGFkZGluZzo5cHggMTRweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiLFxcXCJNb250c2VycmF0XFxcIixzYW5zLXNlcmlmO2xpbmUtaGVpZ2h0OjI0cHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlci1yYWRpdXM6NHB4O291dGxpbmU6bm9uZTstd2Via2l0LXRyYW5zaXRpb246Ym9yZGVyIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmJvcmRlciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dC0taWNvbntiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzVfX18gKyBcIikgbm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246OTUlIGNlbnRlcn0uaW5wdXQtZ3JvdXBfX2lucHV0LS1idXR0b24tc3BsaXR7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1yaWdodDowO2JvcmRlci1yaWdodDpub25lO2JvcmRlci1yYWRpdXM6NHB4IDAgMCA0cHh9LmlucHV0LWdyb3VwX19pbnB1dC0tZmFrZXtjdXJzb3I6cG9pbnRlcn0uaW5wdXQtZ3JvdXBfX2lucHV0LS1hY3RpdmV7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC41KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1ob3Zlcntib3JkZXItY29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1ob3Zlcjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6OnBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSkgIWltcG9ydGFudH0uaW5wdXQtZ3JvdXBfX2lucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXNpemU6MTRweDstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlO3RyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxNHB4Oy1tb3otdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxNHB4Oy1tcy10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxNHB4Oy1tcy10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjQpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC1zaXplOjE0cHg7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OmhvdmVyLC5pbnB1dC1ncm91cF9faW5wdXQ6Zm9jdXN7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dDpob3ZlcisuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdCwuaW5wdXQtZ3JvdXBfX2lucHV0OmZvY3VzKy5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0e2JvcmRlci1jb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9faW5wdXQtLWRhcmstcGxhY2Vob2xkZXI6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0ey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDo0NHB4O3BhZGRpbmc6MDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlciBjZW50ZXI7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlci1sZWZ0Om5vbmU7Ym9yZGVyLXJhZGl1czowIDRweCA0cHggMDtvdXRsaW5lOm5vbmU7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC10cmFuc2l0aW9uOmJvcmRlciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpib3JkZXIgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0IGltZ3std2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjFzIGVhc2UsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdC0tZG93bi1hbmltYXRpb246YWN0aXZlIGltZ3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMnB4KX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdC0tcmlnaHQtYW5pbWF0aW9uOmFjdGl2ZSBpbWd7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCl9LmJ1dHRvbntwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjEwMDtwYWRkaW5nOjEwcHggMjBweDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MTJweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO3RleHQtZGVjb3JhdGlvbjpub25lO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjYmM5Y2ZmKSwgdG8oIzhiYTRmOSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiAwJSwgIzhiYTRmOSAxMDAlKTtib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOjIycHg7Y3Vyc29yOnBvaW50ZXJ9LmJ1dHRvbi0tZGlzYWJsZXtvcGFjaXR5OjAuNTtjdXJzb3I6ZGVmYXVsdH0uYnV0dG9uLS1kaXNhYmxlOmhvdmVyOjpiZWZvcmV7ZGlzcGxheTpub25lfS5idXR0b246OmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7ei1pbmRleDotMTAwO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oIzk5NjlmZiksIHRvKCM1YjdlZjYpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgjOTk2OWZmLCAjNWI3ZWY2KTtib3JkZXItcmFkaXVzOmluaGVyaXQ7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDAuNHMgZWFzZTt0cmFuc2l0aW9uOm9wYWNpdHkgMC40cyBlYXNlO2NvbnRlbnQ6XFxcIlxcXCJ9LmJ1dHRvbjpob3Zlcjo6YmVmb3Jle29wYWNpdHk6MX0uYnV0dG9uLS1lbXB0eS1zdHlsZXtwYWRkaW5nOjhweCAxOHB4O2NvbG9yOiNiYzljZmY7YmFja2dyb3VuZDojZmZmO2JvcmRlcjoycHggc29saWQgI2JjOWNmZn0uYnV0dG9uLS1lbXB0eS1zdHlsZTo6YmVmb3Jle2Rpc3BsYXk6bm9uZX0uYnV0dG9uLS1lbXB0eS1zdHlsZTpob3Zlcntjb2xvcjojOTk2OWZmO2JvcmRlci1jb2xvcjojOTk2OWZmO2JhY2tncm91bmQ6I2ZmZn0uYnV0dG9uLS1lbXB0eS1kaXNhYmxle29wYWNpdHk6MC41O2N1cnNvcjpkZWZhdWx0fS5idXR0b24tLWVtcHR5LWRpc2FibGU6aG92ZXJ7Y29sb3I6I2JjOWNmZiAhaW1wb3J0YW50O2JhY2tncm91bmQ6I2ZmZiAhaW1wb3J0YW50O2JvcmRlci1jb2xvcjojYmM5Y2ZmICFpbXBvcnRhbnR9LmJ1dHRvbi0taWNvbntwb3NpdGlvbjpyZWxhdGl2ZX0uYnV0dG9uLS1pY29uOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO3JpZ2h0OjA7d2lkdGg6NDRweDtoZWlnaHQ6NDRweDttYXJnaW4tdG9wOi0yMnB4O2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyArIFwiKSBuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDAuMnMgZWFzZTt0cmFuc2l0aW9uOmJhY2tncm91bmQgMC4ycyBlYXNlO2NvbnRlbnQ6XFxcIlxcXCJ9LmJ1dHRvbi0taWNvbjphY3RpdmU6OmFmdGVye2JhY2tncm91bmQtcG9zaXRpb246MjBweCBjZW50ZXJ9LnBhZ2luYXRpb25fX3RpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MThweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucGFnaW5hdGlvbl9fcGFnZXN7bWFyZ2luOjA7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0ucGFnaW5hdGlvbl9fcGFnZS1pdGVte2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcH0ucGFnaW5hdGlvbl9fcGFnZS1pdGVtIGF7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjQwcHg7aGVpZ2h0OjQwcHg7cGFkZGluZzoxMnB4IDBweDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LnBhZ2luYXRpb25fX3BhZ2UtaXRlbS0tYWN0aXZlIGF7Y29sb3I6I2ZmZjtmb250LXdlaWdodDpib2xkO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjYmM5Y2ZmKSwgdG8oIzhiYTRmOSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiAwJSwgIzhiYTRmOSAxMDAlKTtib3JkZXItcmFkaXVzOjUwJX0ucGFnaW5hdGlvbl9fcGFnZS1uZXh0e3Bvc2l0aW9uOnJlbGF0aXZlfS5wYWdpbmF0aW9uX19wYWdlLW5leHQgYXtjb2xvcjojZmZmO2ZvbnQtc2l6ZTowO2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCM2ZmNmOTcpLCB0bygjNjZkMmVhKSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNmZjZjk3IDAlLCAjNjZkMmVhIDEwMCUpO2JvcmRlci1yYWRpdXM6NTAlfS5wYWdpbmF0aW9uX19wYWdlLW5leHQ6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO3JpZ2h0OjA7bGVmdDowO3dpZHRoOjE4cHg7aGVpZ2h0OjE3cHg7bWFyZ2luOmF1dG87Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gKyBcIikgbm8tcmVwZWF0fS5wYWdpbmF0aW9uX19vdmVydmlld3twYWRkaW5nLWxlZnQ6NnB4fS5wYWdpbmF0aW9uX19vdmVydmlldyBwe2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7bWFyZ2luOjA7bWFyZ2luLXRvcDo3cHg7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjRweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5mZWF0dXJlc3ttYXJnaW46MDtwYWRkaW5nOjA7cGFkZGluZy10b3A6MXB4O2xpc3Qtc3R5bGU6bm9uZX0uZmVhdHVyZXNfX2l0ZW17ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDttYXJnaW4tYm90dG9tOjIwcHg7cGFkZGluZy1ib3R0b206MjBweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMSl9LmZlYXR1cmVzX19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5mZWF0dXJlc19faXRlbTpudGgtY2hpbGQoMyl7cGFkZGluZy1ib3R0b206MDtib3JkZXItYm90dG9tOm5vbmV9LmZlYXR1cmVzX19waWN0e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW4tcmlnaHQ6OXB4O3dpZHRoOjQ4cHg7aGVpZ2h0OjQ4cHh9LmZlYXR1cmVzX19jb250ZW50e2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjI0cHh9LmZlYXR1cmVzX190aXRsZXttYXJnaW46MDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyNHB4O2ZvbnQtd2VpZ2h0OmJvbGR9LmZlYXR1cmVzX19kZXNjcnttYXJnaW46MH0uYnVsbGV0X190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE0cHg7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmJ1bGxldF9fdGl0bGUtLWxwe3BhZGRpbmctbGVmdDoyMHB4fS5idWxsZXRfX2xpc3R7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0uYnVsbGV0X19pdGVte3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctbGVmdDoyMXB4O21hcmdpbi1ib3R0b206MTBweDtmb250LWZhbWlseTpNb250c2VycmF0O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjRweH0uYnVsbGV0X19pdGVtOjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjdweDtsZWZ0OjA7d2lkdGg6MTBweDtoZWlnaHQ6MTBweDtjb250ZW50OicnO2JhY2tncm91bmQ6cmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItcmFkaXVzOjUwJX0uY29tbWVudHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fS5jb21tZW50X193cmFwe21hcmdpbi1yaWdodDoxMHB4fS5jb21tZW50X193cmFwOm50aC1jaGlsZCgyKXtwYWRkaW5nLXRvcDoxNXB4fS5jb21tZW50X193cmFwOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9LmNvbW1lbnRfX3BpY3R7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NDRweDtoZWlnaHQ6NDRweDttYXJnaW4tYm90dG9tOjI3cHh9LmNvbW1lbnRfX3BpY3QgaW1ne3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxO2xlZnQ6LTI0cHh9LmNvbW1lbnRfX3RpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206OHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTRweH0uY29tbWVudF9fZGF0ZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE0cHg7Zm9udC1zaXplOjE0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uY29tbWVudF9fdGV4dHt3aWR0aDo5OSU7bWFyZ2luOjA7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjRweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5kcm9wLWRvd257cG9zaXRpb246YWJzb2x1dGU7dG9wOjE5OHB4O2xlZnQ6NTAlO3otaW5kZXg6MTAwOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO21hcmdpbi10b3A6LTIwMHB4O21hcmdpbi1sZWZ0Oi01MCU7YmFja2dyb3VuZDojZmZmO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjUpO2JvcmRlci1yYWRpdXM6MCAwIDRweCA0cHg7LXdlYmtpdC1ib3gtc2hhZG93OjAgMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSk7Ym94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2UtaW47dHJhbnNpdGlvbjphbGwgMC4ycyBlYXNlLWlufS5kcm9wLWRvd24tLXNob3d7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxfS5kcm9wLWRvd25fX3dyYXB7cGFkZGluZy10b3A6N3B4O3BhZGRpbmctbGVmdDoxNHB4O3BhZGRpbmctcmlnaHQ6N3B4O3BhZGRpbmctYm90dG9tOjhweH0uZHJvcC1kb3duX19jb3VudC1saXN0e21hcmdpbjowO3BhZGRpbmc6MDtsaXN0LXN0eWxlOm5vbmV9LmRyb3AtZG93bl9fY291bnQtaXRlbXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luLWJvdHRvbTo3cHh9LmRyb3AtZG93bl9fY291bnQtaXRlbTpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0uZHJvcC1kb3duX19jb3VudGVyLW1lbnV7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3dpZHRoOjkycHh9LmRyb3AtZG93bl9fY291bnQtaXRlbS1uYW1le21hcmdpbjowO3BhZGRpbmc6MDtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5kcm9wLWRvd25fX3NlbGVjdC12aWV3e3dpZHRoOjIwcHg7bWFyZ2luOjA7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtYWxpZ246Y2VudGVyfS5kcm9wLWRvd25fX2NvdW50ZXItYnRue3Bvc2l0aW9uOnJlbGF0aXZlOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDozMHB4O2hlaWdodDozMHB4O3BhZGRpbmc6MDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC1zaXplOjE4cHg7dGV4dC1hbGlnbjpjZW50ZXI7dmVydGljYWwtYWxpZ246bWlkZGxlO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC41KTtib3JkZXItcmFkaXVzOjUwJTtjdXJzb3I6cG9pbnRlcn0uZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tcGx1czo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjJweDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtjb250ZW50OlxcXCIrXFxcIn0uZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tbWludXM6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDoycHg7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7Y29udGVudDpcXFwiLVxcXCJ9LmRyb3AtZG93bl9fY291bnRlci1idG4tLWRpc2FibGVke2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2N1cnNvcjpkZWZhdWx0fS5kcm9wLWRvd25fX2NvbnRyb2x7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbi10b3A6MjBweH0uZHJvcC1kb3duX19idXR0b257cGFkZGluZzowO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Ym9yZGVyOm5vbmU7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCB0cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dH0uZHJvcC1kb3duX19idXR0b246aG92ZXJ7Y29sb3I6I2JjOWNmZn0uZHJvcC1kb3duX19idXR0b246YWN0aXZley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoM3B4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgzcHgpfS5kcm9wLWRvd25fX2J1dHRvbi0tYWNjZW50e2NvbG9yOiNiYzljZmZ9LmRyb3AtZG93bl9fYnV0dG9uLS1hY2NlbnQ6aG92ZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpfS5sb2dve3Bvc2l0aW9uOnJlbGF0aXZlO21pbi13aWR0aDoxMjBweDttaW4taGVpZ2h0OjM4cHh9LmxvZ28tLWJpZ3ttYXJnaW4tdG9wOjMwcHg7bWFyZ2luLWxlZnQ6MzBweH0ubG9nb19fbGlua3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTJweH0ubG9nb19fbGluazpob3ZlciAubG9nb19fbGV0dGVye2ZpbGw6Izk5NjlmZn0ubG9nb19fbGluazpob3ZlciAubG9nb19fbGFiZWwtbGVmdHtmaWxsOiM2ZmNmOTd9LmxvZ29fX2xldHRlciwubG9nb19fbGFiZWwtbGVmdHstd2Via2l0LXRyYW5zaXRpb246ZmlsbCAwLjRzIGVhc2U7dHJhbnNpdGlvbjpmaWxsIDAuNHMgZWFzZX0udWkta2l0X193cmFwe3BhZGRpbmctdG9wOjYycHg7cGFkZGluZy1sZWZ0OjFweDtwYWRkaW5nLWJvdHRvbTo2MnB4fS51aS1raXRfX2JveHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O21hcmdpbi1ib3R0b206MTAwcHh9LnVpLWtpdF9fYm94LS1ubXttYXJnaW4tYm90dG9tOjBweH0udWkta2l0X19ib3g6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LnVpLWtpdF9faW5wdXRze3dpZHRoOjMyMHB4fS51aS1raXRfX2lucHV0cyAuaW5wdXQtZ3JvdXB7bWFyZ2luLWJvdHRvbToyMHB4fS51aS1raXRfX2lucHV0cyAuaW5wdXQtZ3JvdXA6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LnVpLWtpdF9fY29sdW1ue3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjI2NXB4O21hcmdpbi1sZWZ0OjEyNnB4fS51aS1raXRfX2NvbHVtbi0tbWxze21hcmdpbi1sZWZ0OjE4MXB4fS51aS1raXRfX2NvbHVtbi0td2x7d2lkdGg6MzIwcHh9LnVpLWtpdF9fY29sdW1uLS14bHN7d2lkdGg6MjYzcHg7bWFyZ2luLWxlZnQ6MTI3cHh9LnVpLWtpdF9fY29sdW1uLS1sbXN7bWFyZ2luLWxlZnQ6NzJweH0udWkta2l0X19jb2x1bW46Zmlyc3QtY2hpbGR7bWFyZ2luLWxlZnQ6MH0udWkta2l0X19jb2x1bW4gLmlucHV0LWdyb3Vwe21hcmdpbi1ib3R0b206MjBweH0udWkta2l0X19jb2x1bW4gLmlucHV0LWdyb3VwOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS51aS1raXRfX2NvbHVtbiAuY29tbWVudHttYXJnaW4tbGVmdDo0cHh9LnVpLWtpdF9fY29sdW1uLXJvd3ttYXJnaW4tYm90dG9tOjQwcHg7Zm9udC1zaXplOjB9LnVpLWtpdF9fY29sdW1uLXJvdy0tbGFyZ2V7bWFyZ2luLWJvdHRvbTo1NXB4fS51aS1raXRfX2NvbHVtbi1yb3ctLWJ1bm55LWhvcHttYXJnaW4tdG9wOjI1NXB4fS51aS1raXRfX2NvbHVtbi1yb3ctLW10LWxhcmdle21hcmdpbi10b3A6MTcxcHg7bWFyZ2luLWJvdHRvbTo0NnB4fS51aS1raXRfX2NvbHVtbi1yb3ctLXNtYWxse21hcmdpbi1ib3R0b206MzBweH0udWkta2l0X19jb2x1bW4tcm93IC5idXR0b257bWFyZ2luLXJpZ2h0OjIwcHg7cGFkZGluZzoxNHB4IDIzcHg7Zm9udC13ZWlnaHQ6Ym9sZH0udWkta2l0X19jb2x1bW4tcm93IC5idXR0b24tLWVtcHR5LXN0eWxle3BhZGRpbmc6MTNweCAyMXB4fS51aS1raXRfX2NvbHVtbi1yb3cgLmJ1bGxldF9faXRlbXt3aWR0aDoyMzdweH0udWkta2l0X19pbnB1dHMtY29sdW1ue2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW4tdG9wOjQycHh9LnVpLWtpdF9faW5wdXRzLWNvbHVtbiAuaW5wdXQtZ3JvdXB7bWFyZ2luLWJvdHRvbTowO21hcmdpbi1yaWdodDoyMHB4fS51aS1raXRfX2lucHV0cy1jb2x1bW4gLmlucHV0LWdyb3VwOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9LnVpLWtpdF9faW5wdXRzLWNvbHVtbiAuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdHt3aWR0aDo2NnB4fS51aS1raXRfX2lucHV0cy1jb2x1bW4tLXNtYWxse3dpZHRoOjI2NnB4fS51aS1raXRfX2lucHV0cy1jb2x1bW4tLXNtYWxsIC5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0e3dpZHRoOjU1cHh9LnVpLWtpdF9fY29sdW1uLXJvdy0tbHdpZHRoe3dpZHRoOjMyMHB4fS51aS1raXRfX2NvbHVtbi1yb3ctLWx3aWR0aCAuYnV0dG9ue3dpZHRoOjEwMCV9LnVpLWtpdF9fbGlua3tkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tcmlnaHQ6MjBweDt2ZXJ0aWNhbC1hbGlnbjp0b3A7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWRlY29yYXRpb246bm9uZTstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgMC4zcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIDAuM3MgZWFzZS1pbi1vdXR9LnVpLWtpdF9fbGluazpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS51aS1raXRfX2xpbmstLWhvdmVyLC51aS1raXRfX2xpbms6aG92ZXJ7Y29sb3I6I2JjOWNmZn0udWkta2l0X19ib3ggI2Ryb3AtZG93bi1jb250YWluZXIgLmRyb3AtZG93bnt0b3A6MzQ1cHh9LnVpLWtpdF9fYm94ICNkcm9wLWRvd24tY29udGFpbmVyMiAuZHJvcC1kb3duLC51aS1raXRfX2JveCAjZHJvcC1kb3duLWNvbnRhaW5lcjMgLmRyb3AtZG93bnt0b3A6MjYxcHh9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbaV0pO1xuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMmFjYTJiODE2MjliZmFhZTU2ZjBhMzUzMjgzNmExMGUuc3ZnXCI7IiwiZnVuY3Rpb24gZ2V0SHRtbEVsZW1lbnQodGFnTmFtZSwgY2xhc3NOYW1lLCB0ZXh0KSB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XHJcblxyXG4gIGlmIChjbGFzc05hbWUpIHtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRleHQpIHtcclxuICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihtaW4sIG1heCkge1xyXG4gIGNvbnN0IHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgrbWF4IC0gK21pbikpICsgK21pbjtcclxuICByZXR1cm4gcmFuZG9tTnVtYmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNsT2ZOdW0obnVtYmVyLCB0aXRsZXMpIHtcclxuICBjb25zdCBjYXNlcyA9IFsyLCAwLCAxLCAxLCAxLCAyXTtcclxuICByZXR1cm4gdGl0bGVzW1xyXG4gICAgbnVtYmVyICUgMTAwID4gNCAmJiBudW1iZXIgJSAxMDAgPCAyMFxyXG4gICAgICA/IDJcclxuICAgICAgOiBjYXNlc1tudW1iZXIgJSAxMCA8IDUgPyBudW1iZXIgJSAxMCA6IDVdXHJcbiAgXTtcclxufVxyXG5cclxuY2xhc3MgRHJvcERvd24ge1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zLmNvbnRhaW5lcikge1xyXG4gICAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xyXG4gICAgICBjb25zdCBkcm9wRG93blBhcmVudCA9IGdldEh0bWxFbGVtZW50KFwic2VjdGlvblwiLCBcImRyb3AtZG93blwiKTtcclxuICAgICAgdGhpcy5kcm9wRG93blBhcmVudCA9IGRyb3BEb3duUGFyZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIGNvbnRhaW5lcihub2RlKSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmlucHV0KSB7XHJcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gb3B0aW9ucy5wbGFjZWhvbGRlclxyXG4gICAgICAgID8gb3B0aW9ucy5wbGFjZWhvbGRlclxyXG4gICAgICAgIDogXCLQktGL0LHQtdGA0LjRgtC1INGN0LvQuNC80LXQvdGCXCI7XHJcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcclxuICAgICAgdGhpcy5pbnB1dCA9IG9wdGlvbnMuaW5wdXQ7XHJcbiAgICAgIGNvbnN0IGlzSGF2ZVN0YXJ0VmFsdWUgPSB0aGlzLmhhc0hhdmVTdGFydFZhbHVlKG9wdGlvbnMuY291bnRFbGVtZW50cyk7XHJcbiAgICAgIGlmIChpc0hhdmVTdGFydFZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJTdGFydENvdW50KG9wdGlvbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSBwbGFjZWhvbGRlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFvcHRpb25zLmlzUGluU2hvdykge1xyXG4gICAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2hvdyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBpbnB1dChub2RlKSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmNvdW50RWxlbWVudHMpIHtcclxuICAgICAgdGhpcy5jb3VudEVsZW1lbnRzID0gb3B0aW9ucy5jb3VudEVsZW1lbnRzO1xyXG4gICAgICB0aGlzLmlucHV0Vmlld3MgPSBbXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBjb3VudEVsZW1lbnRzKEFycmF5KSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmNvdW50R3JvdXBWaWV3KSB7XHJcbiAgICAgIHRoaXMuY291bnRHcm91cFZpZXcgPSBvcHRpb25zLmNvdW50R3JvdXBWaWV3O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIGNvdW50R3JvdXBWaWV3KEFycmF5KSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmlzSGlkZUNvbnRyb2wpIHtcclxuICAgICAgdGhpcy5pc0hpZGVDb250cm9sID0gb3B0aW9ucy5pc0hpZGVDb250cm9sO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmlzUGluU2hvdykge1xyXG4gICAgICB0aGlzLmlzUGluU2hvdyA9IG9wdGlvbnMuaXNQaW5TaG93O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFzSGF2ZVN0YXJ0VmFsdWUgPSBjb3VudEVsZW1lbnRzID0+IHtcclxuICAgIHJldHVybiBjb3VudEVsZW1lbnRzLnNvbWUoaXRlbSA9PiB7XHJcbiAgICAgIGlmIChpdGVtLnN0YXJ0VmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gaXRlbS5zdGFydFZhbHVlID4gMDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgZ2V0TW9kaWZpZWRDb3VudEVsZW1lbnRzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgbW9kaWZpZWRDb3VudEVsZW1lbnRzID0gdGhpcy5jb3VudEVsZW1lbnRzLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgY29uc3QgbWluVmFsdWUgPSBpdGVtLm1pblZhbHVlID8gaXRlbS5taW5WYWx1ZSA6IDA7XHJcbiAgICAgIGNvbnN0IGNvdW50ZXIgPSBpdGVtLnN0YXJ0VmFsdWUgPyBpdGVtLnN0YXJ0VmFsdWUgOiBtaW5WYWx1ZTtcclxuICAgICAgaXRlbS5pZCA9IGAke2luZGV4fSR7Z2V0UmFuZG9tTnVtYmVyKDEsIDEwMDAwKX1gO1xyXG4gICAgICBpdGVtLmNvdW50ZXIgPSBjb3VudGVyO1xyXG4gICAgICBpdGVtLm1pblZhbHVlID0gbWluVmFsdWU7XHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG1vZGlmaWVkQ291bnRFbGVtZW50cztcclxuICB9O1xyXG5cclxuICBzaG93ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgaXNIYXZlQ2xhc3MgPSB0aGlzLmRyb3BEb3duUGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgXCJkcm9wLWRvd24tLXNob3dcIlxyXG4gICAgKTtcclxuICAgIGlmICghaXNIYXZlQ2xhc3MpIHtcclxuICAgICAgdGhpcy5kcm9wRG93blBhcmVudC5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duLS1zaG93XCIpO1xyXG4gICAgICB0aGlzLmlucHV0LmNsYXNzTGlzdC5hZGQoXCJpbnB1dC1ncm91cF9faW5wdXQtLWFjdGl2ZVwiKTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25DbGlja0hpZGUpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMub25QcmVzc0hpZGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGhpZGUgPSAoKSA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1BpblNob3cpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlzSGF2ZUNsYXNzID0gdGhpcy5kcm9wRG93blBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgIFwiZHJvcC1kb3duLS1zaG93XCJcclxuICAgICk7XHJcbiAgICBpZiAoaXNIYXZlQ2xhc3MpIHtcclxuICAgICAgdGhpcy5kcm9wRG93blBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZHJvcC1kb3duLS1zaG93XCIpO1xyXG4gICAgICB0aGlzLmlucHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJpbnB1dC1ncm91cF9faW5wdXQtLWFjdGl2ZVwiKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25DbGlja0hpZGUpO1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMub25QcmVzc0hpZGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uQ2xpY2tIaWRlID0gZXZ0ID0+IHtcclxuICAgIGNvbnN0IGlzSW5wdXRDbGljayA9IGV2dC50YXJnZXQgPT09IHRoaXMuaW5wdXQ7XHJcbiAgICBjb25zdCBpc0NhbGVuZGFyQ2xpY2sgPSB0aGlzLmRyb3BEb3duUGFyZW50LmNvbnRhaW5zKGV2dC50YXJnZXQpO1xyXG4gICAgY29uc3QgaXNPdXRzaWRlQ2xpY2sgPSAhaXNJbnB1dENsaWNrICYmICFpc0NhbGVuZGFyQ2xpY2s7XHJcbiAgICBpZiAoaXNPdXRzaWRlQ2xpY2spIHtcclxuICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25QcmVzc0hpZGUgPSBldnQgPT4ge1xyXG4gICAgY29uc3QgaXNFc2NQcmVzcyA9IGV2dC5rZXlDb2RlID09PSAyNztcclxuICAgIGlmIChpc0VzY1ByZXNzKSB7XHJcbiAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uQ2xpY2tDbGVhciA9IGV2dCA9PiB7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHRoaXMuZGlzY2FyZENvdW50ZXIoKTtcclxuICAgIHRoaXMuZGlzY2FyZFZpZXdDb3VudGVyKCk7XHJcbiAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gdGhpcy5wbGFjZWhvbGRlcjtcclxuICB9O1xyXG5cclxuICBkaXNjYXJkQ291bnRlciA9ICgpID0+IHtcclxuICAgIHRoaXMuY291bnRFbGVtZW50cy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCB2aWV3Q291bnRlciA9IHRoaXMuZHJvcERvd25QYXJlbnQucXVlcnlTZWxlY3RvcihgI3ZpZXctJHtpdGVtLmlkfWApO1xyXG4gICAgICB2aWV3Q291bnRlci50ZXh0Q29udGVudCA9IGl0ZW0ubWluVmFsdWU7XHJcbiAgICAgIGl0ZW0uY291bnRlciA9IGl0ZW0ubWluVmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBtaW51c0J1dHRvbnMgPSB0aGlzLmRyb3BEb3duUGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLmRyb3AtZG93bl9fY291bnRlci1idG4tLW1pbnVzXCJcclxuICAgICk7XHJcbiAgICBtaW51c0J1dHRvbnMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgZGlzY2FyZFZpZXdDb3VudGVyID0gKCkgPT4ge1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5jb3VudEdyb3VwVmlldykuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgdGhpcy5jb3VudEdyb3VwVmlld1tpdGVtXS5jb3VudGVyID0gMDtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJlbmRlclZpZXdDb3VudCA9ICgpID0+IHtcclxuICAgIGxldCB3b3JkT2ZOdW0gPSBcIlwiO1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5jb3VudEdyb3VwVmlldykuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuY291bnRHcm91cFZpZXdbaXRlbV0uY291bnRlciA+IDApIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnRlckdyb3VwID0gdGhpcy5jb3VudEdyb3VwVmlld1tpdGVtXTtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnRlciA9IGN1cnJlbnRDb3VudGVyR3JvdXAuY291bnRlcjtcclxuICAgICAgICBjb25zdCBjdXJyZW50V29yZCA9IGRlY2xPZk51bShcclxuICAgICAgICAgIGN1cnJlbnRDb3VudGVyLFxyXG4gICAgICAgICAgY3VycmVudENvdW50ZXJHcm91cC52aWV3c1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCAmJiB3b3JkT2ZOdW0ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgd29yZE9mTnVtICs9IFwiLCBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd29yZE9mTnVtICs9IGAke2N1cnJlbnRDb3VudGVyfSAke2N1cnJlbnRXb3JkfWA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh3b3JkT2ZOdW0ubGVuZ3RoID49IDIwICYmIE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmxlbmd0aCA+IDIpIHtcclxuICAgICAgd29yZE9mTnVtID0gd29yZE9mTnVtLnNsaWNlKDAsIDIwKSArIFwiLi4uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHdvcmRPZk51bTtcclxuICB9O1xyXG5cclxuICByZW5kZXJTdGFydENvdW50ID0gb3B0aW9ucyA9PiB7XHJcbiAgICBjb25zdCBjb3VudEVsZW1lbnRzID0gb3B0aW9ucy5jb3VudEVsZW1lbnRzO1xyXG4gICAgbGV0IHdvcmRPZk51bSA9IFwiXCI7XHJcbiAgICBjb3VudEVsZW1lbnRzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChpdGVtLnN0YXJ0VmFsdWUgPiAwKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXJHcm91cCA9IG9wdGlvbnMuY291bnRHcm91cFZpZXdbaXRlbS5jb3VudEdyb3VwTmFtZV07XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXIgPSBjdXJyZW50Q291bnRlckdyb3VwLmNvdW50ZXI7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFdvcmQgPSBkZWNsT2ZOdW0oXHJcbiAgICAgICAgICBjdXJyZW50Q291bnRlcixcclxuICAgICAgICAgIGN1cnJlbnRDb3VudGVyR3JvdXAudmlld3NcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpbmRleCA+IDAgJiYgd29yZE9mTnVtLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHdvcmRPZk51bSArPSBcIiwgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdvcmRPZk51bSArPSBgJHtjdXJyZW50Q291bnRlcn0gJHtjdXJyZW50V29yZH1gO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAod29yZE9mTnVtLmxlbmd0aCA+PSAyMCAmJiBjb3VudEVsZW1lbnRzLmxlbmd0aCA+IDIpIHtcclxuICAgICAgd29yZE9mTnVtID0gd29yZE9mTnVtLnNsaWNlKDAsIDIwKSArIFwiLi4uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3BsaXRXb3JkT2ZOdW0gPSB3b3JkT2ZOdW0uc3BsaXQoXCIsXCIpO1xyXG5cclxuICAgIGlmIChzcGxpdFdvcmRPZk51bVswXS50cmltKCkgPT09IHNwbGl0V29yZE9mTnVtWzFdLnRyaW0oKSkge1xyXG4gICAgICB3b3JkT2ZOdW0gPSBzcGxpdFdvcmRPZk51bVswXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gd29yZE9mTnVtO1xyXG4gIH07XHJcblxyXG4gIGdldENvdW50SXRlbSA9IGVsZW1lbnQgPT4ge1xyXG4gICAgY29uc3QgY291bnRJdGVtID0gZ2V0SHRtbEVsZW1lbnQoXCJsaVwiLCBcImRyb3AtZG93bl9fY291bnQtaXRlbVwiKTtcclxuICAgIGNvbnN0IGNvdW50SXRlbU5hbWUgPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwiZHJvcC1kb3duX19jb3VudC1pdGVtLW5hbWVcIixcclxuICAgICAgZWxlbWVudC5uYW1lXHJcbiAgICApO1xyXG4gICAgY29uc3QgY291bnRlck1lbnUgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRyb3AtZG93bl9fY291bnRlci1tZW51XCIpO1xyXG4gICAgY29uc3QgY291bnRJdGVtTWludXMgPSBnZXRIdG1sRWxlbWVudChcImJ1dHRvblwiLCBcImRyb3AtZG93bl9fY291bnRlci1idG5cIik7XHJcbiAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tbWludXNcIik7XHJcbiAgICBpZiAoZWxlbWVudC5zdGFydFZhbHVlKSB7XHJcbiAgICAgIGlmIChlbGVtZW50LnN0YXJ0VmFsdWUgPT09IGVsZW1lbnQubWluVmFsdWUpIHtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgICAgY291bnRJdGVtTWludXMuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgIGNvdW50SXRlbU1pbnVzLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcclxuICAgIH1cclxuICAgIGNvdW50SXRlbU1pbnVzLnR5cGUgPSBcImJ1dHRvblwiO1xyXG4gICAgY29uc3QgY291bnRJdGVtVmlldyA9IGdldEh0bWxFbGVtZW50KFwicFwiLCBcImRyb3AtZG93bl9fc2VsZWN0LXZpZXdcIik7XHJcbiAgICBjb3VudEl0ZW1WaWV3LnRleHRDb250ZW50ID0gZWxlbWVudC5jb3VudGVyO1xyXG4gICAgY291bnRJdGVtVmlldy5pZCA9IGB2aWV3LSR7ZWxlbWVudC5pZH1gO1xyXG4gICAgY29uc3QgY291bnRJdGVtUGx1cyA9IGdldEh0bWxFbGVtZW50KFwiYnV0dG9uXCIsIFwiZHJvcC1kb3duX19jb3VudGVyLWJ0blwiKTtcclxuICAgIGNvdW50SXRlbVBsdXMuY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bl9fY291bnRlci1idG4tLXBsdXNcIik7XHJcbiAgICBjb3VudEl0ZW1QbHVzLnR5cGUgPSBcImJ1dHRvblwiO1xyXG5cclxuICAgIGNvdW50SXRlbVBsdXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgZ3JvdXBWaWV3ID0gdGhpcy5jb3VudEdyb3VwVmlld1tlbGVtZW50LmNvdW50R3JvdXBOYW1lXTtcclxuICAgICAgZWxlbWVudC5jb3VudGVyKys7XHJcbiAgICAgIGdyb3VwVmlldy5jb3VudGVyKys7XHJcbiAgICAgIGNvdW50SXRlbVZpZXcudGV4dENvbnRlbnQgPSBlbGVtZW50LmNvdW50ZXI7XHJcbiAgICAgIHRoaXMucmVuZGVyVmlld0NvdW50KCk7XHJcbiAgICAgIGNvbnN0IGlzTWludXNEaXNhYmxlZCA9IGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICBcImRyb3AtZG93bl9fY291bnRlci1idG4tLWRpc2FibGVkXCJcclxuICAgICAgKTtcclxuICAgICAgaWYgKGlzTWludXNEaXNhYmxlZCkge1xyXG4gICAgICAgIGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZFwiKTtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY291bnRJdGVtTWludXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgZ3JvdXBWaWV3ID0gdGhpcy5jb3VudEdyb3VwVmlld1tlbGVtZW50LmNvdW50R3JvdXBOYW1lXTtcclxuICAgICAgZWxlbWVudC5jb3VudGVyLS07XHJcbiAgICAgIGdyb3VwVmlldy5jb3VudGVyLS07XHJcbiAgICAgIGNvdW50SXRlbVZpZXcudGV4dENvbnRlbnQgPSBlbGVtZW50LmNvdW50ZXI7XHJcbiAgICAgIGNvbnN0IG5leHREZWNyaW1lbnRDb3VudGVyID0gZWxlbWVudC5jb3VudGVyIC0gMTtcclxuICAgICAgaWYgKG5leHREZWNyaW1lbnRDb3VudGVyIDwgZWxlbWVudC5taW5WYWx1ZSkge1xyXG4gICAgICAgIGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5hZGQoXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZFwiKTtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZW5kZXJWaWV3Q291bnQoKTtcclxuICAgICAgaWYgKGdyb3VwVmlldy5jb3VudGVyID09PSAwKSB7XHJcbiAgICAgICAgY29uc3QgaXNDb3VudGVyR3JvdXBDbGVhciA9IE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmV2ZXJ5KFxyXG4gICAgICAgICAgaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvdW50R3JvdXBWaWV3W2l0ZW1dLmNvdW50ZXIgPT09IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNDb3VudGVyR3JvdXBDbGVhcikge1xyXG4gICAgICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb3VudGVyTWVudS5hcHBlbmRDaGlsZChjb3VudEl0ZW1NaW51cyk7XHJcbiAgICBjb3VudGVyTWVudS5hcHBlbmRDaGlsZChjb3VudEl0ZW1WaWV3KTtcclxuICAgIGNvdW50ZXJNZW51LmFwcGVuZENoaWxkKGNvdW50SXRlbVBsdXMpO1xyXG4gICAgY291bnRJdGVtLmFwcGVuZENoaWxkKGNvdW50SXRlbU5hbWUpO1xyXG4gICAgY291bnRJdGVtLmFwcGVuZENoaWxkKGNvdW50ZXJNZW51KTtcclxuICAgIHJldHVybiBjb3VudEl0ZW07XHJcbiAgfTtcclxuXHJcbiAgaW5pdCA9ICgpID0+IHtcclxuICAgIGNvbnN0IG1vZGlmaWVkQ291bnRFbGVtZW50cyA9IHRoaXMuZ2V0TW9kaWZpZWRDb3VudEVsZW1lbnRzKCk7XHJcbiAgICB0aGlzLmNvdW50RWxlbWVudHMgPSBtb2RpZmllZENvdW50RWxlbWVudHM7XHJcbiAgICBjb25zdCBkcm9wRG93blBhcmVudFdyYXAgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRyb3AtZG93bl9fd3JhcFwiKTtcclxuICAgIGNvbnN0IGNvdW50TGlzdCA9IGdldEh0bWxFbGVtZW50KFwidWxcIiwgXCJkcm9wLWRvd25fX2NvdW50LWxpc3RcIik7XHJcbiAgICBjb25zdCBkcm9wRG93bkNvbnRyb2wgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRyb3AtZG93bl9fY29udHJvbFwiKTtcclxuICAgIGNvbnN0IGNsZWFyQnRuID0gZ2V0SHRtbEVsZW1lbnQoXCJidXR0b25cIiwgXCJkcm9wLWRvd25fX2J1dHRvblwiLCBcItCe0YfQuNGB0YLQuNGC0YxcIik7XHJcbiAgICBjbGVhckJ0bi50eXBlID0gXCJidXR0b25cIjtcclxuICAgIGNsZWFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2tDbGVhcik7XHJcbiAgICBjb25zdCBhY2NlcHRCdG4gPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJidXR0b25cIixcclxuICAgICAgXCJkcm9wLWRvd25fX2J1dHRvblwiLFxyXG4gICAgICBcItCf0YDQuNC80LXQvdC40YLRjFwiXHJcbiAgICApO1xyXG4gICAgYWNjZXB0QnRuLnR5cGUgPSBcImJ1dHRvblwiO1xyXG4gICAgYWNjZXB0QnRuLmNsYXNzTGlzdC5hZGQoXCJkcm9wLWRvd25fX2J1dHRvbi0tYWNjZW50XCIpO1xyXG4gICAgYWNjZXB0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhpZGUpO1xyXG4gICAgY29uc3QgY291bnRMaXN0RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG4gICAgdGhpcy5jb3VudEVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIGNvbnN0IGNvdW50SXRlbSA9IHRoaXMuZ2V0Q291bnRJdGVtKGVsZW1lbnQpO1xyXG4gICAgICBjb3VudExpc3RGcmFnbWVudC5hcHBlbmRDaGlsZChjb3VudEl0ZW0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY291bnRMaXN0LmFwcGVuZENoaWxkKGNvdW50TGlzdEZyYWdtZW50KTtcclxuICAgIGlmICghdGhpcy5pc0hpZGVDb250cm9sKSB7XHJcbiAgICAgIGRyb3BEb3duQ29udHJvbC5hcHBlbmRDaGlsZChjbGVhckJ0bik7XHJcbiAgICAgIGRyb3BEb3duQ29udHJvbC5hcHBlbmRDaGlsZChhY2NlcHRCdG4pO1xyXG4gICAgfVxyXG5cclxuICAgIGRyb3BEb3duUGFyZW50V3JhcC5hcHBlbmRDaGlsZChjb3VudExpc3QpO1xyXG5cclxuICAgIGlmICghdGhpcy5pc0hpZGVDb250cm9sKSB7XHJcbiAgICAgIGRyb3BEb3duUGFyZW50V3JhcC5hcHBlbmRDaGlsZChkcm9wRG93bkNvbnRyb2wpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5kcm9wRG93blBhcmVudC5hcHBlbmRDaGlsZChkcm9wRG93blBhcmVudFdyYXApO1xyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5kcm9wRG93blBhcmVudCk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJvcERvd247XHJcbiIsIi8qIVxuKiBpbnB1dG1hc2suanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC45XG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWyBcIi4vZGVwZW5kZW5jeUxpYnMvaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWJcIiwgXCIuL2dsb2JhbC93aW5kb3dcIiBdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9kZXBlbmRlbmN5TGlicy9pbnB1dG1hc2suZGVwZW5kZW5jeUxpYlwiKSwgcmVxdWlyZShcIi4vZ2xvYmFsL3dpbmRvd1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LklucHV0bWFzayA9IGZhY3Rvcnkod2luZG93LmRlcGVuZGVuY3lMaWIgfHwgalF1ZXJ5LCB3aW5kb3cpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKCQsIHdpbmRvdywgdW5kZWZpbmVkKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsIGllID0gdWEuaW5kZXhPZihcIk1TSUUgXCIpID4gMCB8fCB1YS5pbmRleE9mKFwiVHJpZGVudC9cIikgPiAwLCBtb2JpbGUgPSBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoXCJ0b3VjaHN0YXJ0XCIpLCBpZW1vYmlsZSA9IC9pZW1vYmlsZS9pLnRlc3QodWEpLCBpcGhvbmUgPSAvaXBob25lL2kudGVzdCh1YSkgJiYgIWllbW9iaWxlO1xuICAgIGZ1bmN0aW9uIElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIElucHV0bWFzaykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW5wdXRtYXNrKGFsaWFzLCBvcHRpb25zLCBpbnRlcm5hbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5tYXNrc2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlZnJlc2hWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoaW50ZXJuYWwgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICgkLmlzUGxhaW5PYmplY3QoYWxpYXMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGFsaWFzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgICAgICBpZiAoYWxpYXMpIG9wdGlvbnMuYWxpYXMgPSBhbGlhcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3B0cyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMubm9NYXNrc0NhY2hlID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlZmluaXRpb25zICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnVzZXJPcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMuaXNSVEwgPSB0aGlzLm9wdHMubnVtZXJpY0lucHV0O1xuICAgICAgICAgICAgcmVzb2x2ZUFsaWFzKHRoaXMub3B0cy5hbGlhcywgb3B0aW9ucywgdGhpcy5vcHRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBJbnB1dG1hc2sucHJvdG90eXBlID0ge1xuICAgICAgICBkYXRhQXR0cmlidXRlOiBcImRhdGEtaW5wdXRtYXNrXCIsXG4gICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJfXCIsXG4gICAgICAgICAgICBvcHRpb25hbG1hcmtlcjogWyBcIltcIiwgXCJdXCIgXSxcbiAgICAgICAgICAgIHF1YW50aWZpZXJtYXJrZXI6IFsgXCJ7XCIsIFwifVwiIF0sXG4gICAgICAgICAgICBncm91cG1hcmtlcjogWyBcIihcIiwgXCIpXCIgXSxcbiAgICAgICAgICAgIGFsdGVybmF0b3JtYXJrZXI6IFwifFwiLFxuICAgICAgICAgICAgZXNjYXBlQ2hhcjogXCJcXFxcXCIsXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxuICAgICAgICAgICAgcmVnZXg6IG51bGwsXG4gICAgICAgICAgICBvbmNvbXBsZXRlOiAkLm5vb3AsXG4gICAgICAgICAgICBvbmluY29tcGxldGU6ICQubm9vcCxcbiAgICAgICAgICAgIG9uY2xlYXJlZDogJC5ub29wLFxuICAgICAgICAgICAgcmVwZWF0OiAwLFxuICAgICAgICAgICAgZ3JlZWR5OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlLFxuICAgICAgICAgICAgcmVtb3ZlTWFza09uU3VibWl0OiBmYWxzZSxcbiAgICAgICAgICAgIGNsZWFyTWFza09uTG9zdEZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgaW5zZXJ0TW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgICBhbGlhczogbnVsbCxcbiAgICAgICAgICAgIG9uS2V5RG93bjogJC5ub29wLFxuICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBudWxsLFxuICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24ocGFzdGVkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwodGhpcywgcGFzdGVkVmFsdWUsIG9wdHMpIDogcGFzdGVkVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogbnVsbCxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBudWxsLFxuICAgICAgICAgICAgc2hvd01hc2tPbkZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgc2hvd01hc2tPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgb25LZXlWYWxpZGF0aW9uOiAkLm5vb3AsXG4gICAgICAgICAgICBza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyOiBcIiBcIixcbiAgICAgICAgICAgIG51bWVyaWNJbnB1dDogZmFsc2UsXG4gICAgICAgICAgICByaWdodEFsaWduOiBmYWxzZSxcbiAgICAgICAgICAgIHVuZG9PbkVzY2FwZTogdHJ1ZSxcbiAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiXCIsXG4gICAgICAgICAgICBfcmFkaXhEYW5jZTogZmFsc2UsXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgIGtlZXBTdGF0aWM6IG51bGwsXG4gICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25UYWI6IHRydWUsXG4gICAgICAgICAgICB0YWJUaHJvdWdoOiBmYWxzZSxcbiAgICAgICAgICAgIHN1cHBvcnRzSW5wdXRUeXBlOiBbIFwidGV4dFwiLCBcInRlbFwiLCBcInVybFwiLCBcInBhc3N3b3JkXCIsIFwic2VhcmNoXCIgXSxcbiAgICAgICAgICAgIGlnbm9yYWJsZXM6IFsgOCwgOSwgMTMsIDE5LCAyNywgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0NSwgNDYsIDkzLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzLCAwLCAyMjkgXSxcbiAgICAgICAgICAgIGlzQ29tcGxldGU6IG51bGwsXG4gICAgICAgICAgICBwcmVWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IG51bGwsXG4gICAgICAgICAgICBzdGF0aWNEZWZpbml0aW9uU3ltYm9sOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBqaXRNYXNraW5nOiBmYWxzZSxcbiAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgaW5wdXRFdmVudE9ubHk6IGZhbHNlLFxuICAgICAgICAgICAgbm9WYWx1ZVBhdGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHBvc2l0aW9uQ2FyZXRPbkNsaWNrOiBcImx2cFwiLFxuICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgaW5wdXRtb2RlOiBcInZlcmJhdGltXCIsXG4gICAgICAgICAgICBjb2xvck1hc2s6IGZhbHNlLFxuICAgICAgICAgICAgZGlzYWJsZVByZWRpY3RpdmVUZXh0OiBmYWxzZSxcbiAgICAgICAgICAgIGltcG9ydERhdGFBdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgc2hpZnRQb3NpdGlvbnM6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgIDk6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOVxcdWZmMTEtXFx1ZmYxOV1cIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uU3ltYm9sOiBcIipcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiW0EtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uU3ltYm9sOiBcIipcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlcXHVmZjExLVxcdWZmMTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxpYXNlczoge30sXG4gICAgICAgIG1hc2tzQ2FjaGU6IHt9LFxuICAgICAgICBtYXNrOiBmdW5jdGlvbihlbGVtcykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgZnVuY3Rpb24gaW1wb3J0QXR0cmlidXRlT3B0aW9ucyhucHQsIG9wdHMsIHVzZXJPcHRpb25zLCBkYXRhQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaW1wb3J0RGF0YUF0dHJpYnV0ZXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJPcHRpb25zID0gbnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKSwgb3B0aW9uLCBkYXRhb3B0aW9ucywgb3B0aW9uRGF0YSwgcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltcG9ydE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbiwgb3B0aW9uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IG9wdGlvbkRhdGEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbkRhdGEgOiBucHQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUgKyBcIi1cIiArIG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uRGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uRGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmluZGV4T2YoXCJvblwiKSA9PT0gMCkgb3B0aW9uRGF0YSA9IHdpbmRvd1tvcHRpb25EYXRhXTsgZWxzZSBpZiAob3B0aW9uRGF0YSA9PT0gXCJmYWxzZVwiKSBvcHRpb25EYXRhID0gZmFsc2U7IGVsc2UgaWYgKG9wdGlvbkRhdGEgPT09IFwidHJ1ZVwiKSBvcHRpb25EYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck9wdGlvbnNbb3B0aW9uXSA9IG9wdGlvbkRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyT3B0aW9ucyAmJiBhdHRyT3B0aW9ucyAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck9wdGlvbnMgPSBhdHRyT3B0aW9ucy5yZXBsYWNlKC8nL2csICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YW9wdGlvbnMgPSBKU09OLnBhcnNlKFwie1wiICsgYXR0ck9wdGlvbnMgKyBcIn1cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAudG9Mb3dlckNhc2UoKSA9PT0gXCJhbGlhc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBkYXRhb3B0aW9uc1twXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydE9wdGlvbihcImFsaWFzXCIsIG9wdGlvbkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlck9wdGlvbnMuYWxpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVBbGlhcyh1c2VyT3B0aW9ucy5hbGlhcywgdXNlck9wdGlvbnMsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAob3B0aW9uIGluIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLnRvTG93ZXJDYXNlKCkgPT09IG9wdGlvbi50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gZGF0YW9wdGlvbnNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydE9wdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIG9wdHMsIHVzZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAobnB0LmRpciA9PT0gXCJydGxcIiB8fCBvcHRzLnJpZ2h0QWxpZ24pIHtcbiAgICAgICAgICAgICAgICAgICAgbnB0LnN0eWxlLnRleHRBbGlnbiA9IFwicmlnaHRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5kaXIgPT09IFwicnRsXCIgfHwgb3B0cy5udW1lcmljSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbnB0LmRpciA9IFwibHRyXCI7XG4gICAgICAgICAgICAgICAgICAgIG5wdC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIik7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaXNSVEwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModXNlck9wdGlvbnMpLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcbiAgICAgICAgICAgICQuZWFjaChlbGVtcywgZnVuY3Rpb24obmR4LCBlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzY29wZWRPcHRzID0gJC5leHRlbmQodHJ1ZSwge30sIHRoYXQub3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMoZWwsIHNjb3BlZE9wdHMsICQuZXh0ZW5kKHRydWUsIHt9LCB0aGF0LnVzZXJPcHRpb25zKSwgdGhhdC5kYXRhQXR0cmlidXRlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza3NldCA9IGdlbmVyYXRlTWFza1NldChzY29wZWRPcHRzLCB0aGF0Lm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXNrc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzayA9IG5ldyBJbnB1dG1hc2sodW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm9wdHMgPSBzY29wZWRPcHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm5vTWFza3NDYWNoZSA9IHRoYXQubm9NYXNrc0NhY2hlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLnVzZXJPcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoYXQudXNlck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLmlzUlRMID0gc2NvcGVkT3B0cy5pc1JUTCB8fCBzY29wZWRPcHRzLm51bWVyaWNJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5lbCA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm1hc2tzZXQgPSBtYXNrc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRhKGVsLCBcIl9pbnB1dG1hc2tfb3B0c1wiLCBzY29wZWRPcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKGVsLmlucHV0bWFzaywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJtYXNrXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbXMgJiYgZWxlbXNbMF0gPyBlbGVtc1swXS5pbnB1dG1hc2sgfHwgdGhpcyA6IHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbjogZnVuY3Rpb24ob3B0aW9ucywgbm9yZW1hc2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdHNbb3B0aW9uc107XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgJC5leHRlbmQodGhpcy51c2VyT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWwgJiYgbm9yZW1hc2sgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrKHRoaXMuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdW5tYXNrZWR2YWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJ1bm1hc2tlZHZhbHVlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlbW92ZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0ZW1wdHltYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJnZXRlbXB0eW1hc2tcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc01hc2tlZFZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5vcHRzLmF1dG9Vbm1hc2s7XG4gICAgICAgIH0sXG4gICAgICAgIGlzQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKTtcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImlzQ29tcGxldGVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldG1ldGFkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJnZXRtZXRhZGF0YVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc1ZhbGlkXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0OiBmdW5jdGlvbih2YWx1ZSwgbWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJmb3JtYXRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbCkge1xuICAgICAgICAgICAgICAgICQodGhpcy5lbCkudHJpZ2dlcihcInNldHZhbHVlXCIsIFsgdmFsdWUgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFuYWx5c2VNYXNrOiBmdW5jdGlvbihtYXNrLCByZWdleE1hc2ssIG9wdHMpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbml6ZXIgPSAvKD86Wz8qK118XFx7WzAtOVxcK1xcKl0rKD86LFswLTlcXCtcXCpdKik/KD86XFx8WzAtOVxcK1xcKl0qKT9cXH0pfFteLj8qK14ke1tdKCl8XFxcXF0rfC4vZywgcmVnZXhUb2tlbml6ZXIgPSAvXFxbXFxeP10/KD86W15cXFxcXFxdXSt8XFxcXFtcXFNcXHNdPykqXT98XFxcXCg/OjAoPzpbMC0zXVswLTddezAsMn18WzQtN11bMC03XT8pP3xbMS05XVswLTldKnx4WzAtOUEtRmEtZl17Mn18dVswLTlBLUZhLWZdezR9fGNbQS1aYS16XXxbXFxTXFxzXT8pfFxcKCg/OlxcP1s6PSFdPyk/fCg/Ols/KitdfFxce1swLTldKyg/OixbMC05XSopP1xcfSlcXD8/fFteLj8qK14ke1soKXxcXFxcXSt8Li9nLCBlc2NhcGVkID0gZmFsc2UsIGN1cnJlbnRUb2tlbiA9IG5ldyBNYXNrVG9rZW4oKSwgbWF0Y2gsIG0sIG9wZW5lbmluZ3MgPSBbXSwgbWFza1Rva2VucyA9IFtdLCBvcGVuaW5nVG9rZW4sIGN1cnJlbnRPcGVuaW5nVG9rZW4sIGFsdGVybmF0b3IsIGxhc3RNYXRjaCwgZ3JvdXBUb2tlbjtcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1hc2tUb2tlbihpc0dyb3VwLCBpc09wdGlvbmFsLCBpc1F1YW50aWZpZXIsIGlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbkdyb3VwID0gaXNHcm91cCB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0b3JHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNHcm91cCA9IGlzR3JvdXAgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc09wdGlvbmFsID0gaXNPcHRpb25hbCB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUXVhbnRpZmllciA9IGlzUXVhbnRpZmllciB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzQWx0ZXJuYXRvciA9IGlzQWx0ZXJuYXRvciB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnF1YW50aWZpZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgICAgICAgICAgbWF4OiAxXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGluc2VydFRlc3REZWZpbml0aW9uKG10b2tlbiwgZWxlbWVudCwgcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uICE9PSB1bmRlZmluZWQgPyBwb3NpdGlvbiA6IG10b2tlbi5tYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgcHJldk1hdGNoID0gbXRva2VuLm1hdGNoZXNbcG9zaXRpb24gLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmluZGV4T2YoXCJbXCIpID09PSAwIHx8IGVzY2FwZWQgJiYgL1xcXFxkfFxcXFxzfFxcXFx3XS9pLnRlc3QoZWxlbWVudCkgfHwgZWxlbWVudCA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG5ldyBSZWdFeHAoZWxlbWVudCwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgPyBcIm1hc3RlclwiIDogcHJldk1hdGNoLmRlZiAhPT0gZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkKSBlbGVtZW50ID0gZWxlbWVudFtlbGVtZW50Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGVsZW1lbnQuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgbG1udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGxtbnQgJiYgcHJldk1hdGNoLmZuICE9PSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sIHx8IGxtbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgIT09IHVuZGVmaW5lZCA/IGxtbnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogKGVzY2FwZWQgPyBcIidcIiA6IFwiXCIpICsgbG1udFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrZGVmID0gKG9wdHMuZGVmaW5pdGlvbnMgPyBvcHRzLmRlZmluaXRpb25zW2VsZW1lbnRdIDogdW5kZWZpbmVkKSB8fCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zW2VsZW1lbnRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza2RlZiAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogbWFza2RlZi52YWxpZGF0b3IgPyB0eXBlb2YgbWFza2RlZi52YWxpZGF0b3IgPT0gXCJzdHJpbmdcIiA/IG5ldyBSZWdFeHAobWFza2RlZi52YWxpZGF0b3IsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSA6IG5ldyBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0ID0gbWFza2RlZi52YWxpZGF0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpIDogbmV3IFJlZ0V4cChcIi5cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSAobWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbWFza2RlZi5jYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBtYXNrZGVmLmRlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQgJiYgcHJldk1hdGNoLmZuICE9PSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgIT09IHVuZGVmaW5lZCA/IGVsZW1lbnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiAoZXNjYXBlZCA/IFwiJ1wiIDogXCJcIikgKyBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHZlcmlmeUdyb3VwTWFya2VyKG1hc2tUb2tlbikge1xuICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4gJiYgbWFza1Rva2VuLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG1hc2tUb2tlbi5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFRva2VuID0gbWFza1Rva2VuLm1hdGNoZXNbbmR4ICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKG5leHRUb2tlbiA9PT0gdW5kZWZpbmVkIHx8IChuZXh0VG9rZW4ubWF0Y2hlcyA9PT0gdW5kZWZpbmVkIHx8IG5leHRUb2tlbi5pc1F1YW50aWZpZXIgPT09IGZhbHNlKSkgJiYgdG9rZW4gJiYgdG9rZW4uaXNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLmlzR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbih0b2tlbiwgb3B0cy5ncm91cG1hcmtlclswXSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbi5vcGVuR3JvdXAgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKHRva2VuLCBvcHRzLmdyb3VwbWFya2VyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUdyb3VwTWFya2VyKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGVmYXVsdENhc2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50T3BlbmluZ1Rva2VuLCBtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50VG9rZW4sIG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VUb2tlbnMobWFza1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZVN0YXRpYyhzdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXJbMF0pIHN0ID0gb3B0cy5vcHRpb25hbG1hcmtlclsxXTsgZWxzZSBpZiAoc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXJbMV0pIHN0ID0gb3B0cy5vcHRpb25hbG1hcmtlclswXTsgZWxzZSBpZiAoc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXJbMF0pIHN0ID0gb3B0cy5ncm91cG1hcmtlclsxXTsgZWxzZSBpZiAoc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXJbMV0pIHN0ID0gb3B0cy5ncm91cG1hcmtlclswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcyA9IG1hc2tUb2tlbi5tYXRjaGVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtYXRjaCBpbiBtYXNrVG9rZW4ubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXMuaGFzT3duUHJvcGVydHkobWF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50TWF0Y2ggPSBwYXJzZUludChtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdLmlzUXVhbnRpZmllciAmJiBtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCArIDFdICYmIG1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoICsgMV0uaXNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdCA9IG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UobWF0Y2gsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShpbnRNYXRjaCArIDEsIDAsIHF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0ubWF0Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdID0gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0gPSByZXZlcnNlU3RhdGljKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdyb3VwaWZ5KG1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5vcGVuR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBncm91cFRva2VuLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgICAgICAgICAgICAgIHJldHVybiBncm91cFRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgIG9wdHMub3B0aW9uYWxtYXJrZXJbMF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgb3B0cy5vcHRpb25hbG1hcmtlclsxXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4TWFzayA/IHJlZ2V4VG9rZW5pemVyLmV4ZWMobWFzaykgOiB0b2tlbml6ZXIuZXhlYyhtYXNrKSkge1xuICAgICAgICAgICAgICAgIG0gPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiP1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFwiezAsMX1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFwie1wiICsgbSArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAobS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIoPz1cIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIoPyFcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIoPzw9XCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD88IVwiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmVzY2FwZUNoYXI6XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXJbMV06XG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXJbMV06XG4gICAgICAgICAgICAgICAgICAgIG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5pbmdUb2tlbi5vcGVuR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5pbmdUb2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHRlcm5hdG9yLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uYWx0ZXJuYXRvckdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlclswXTpcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4oZmFsc2UsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5ncm91cG1hcmtlclswXTpcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4odHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWFudGlmaWVyID0gbmV3IE1hc2tUb2tlbihmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBtID0gbS5yZXBsYWNlKC9be31dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXFqID0gbS5zcGxpdChcInxcIiksIG1xID0gbXFqWzBdLnNwbGl0KFwiLFwiKSwgbXEwID0gaXNOYU4obXFbMF0pID8gbXFbMF0gOiBwYXJzZUludChtcVswXSksIG1xMSA9IG1xLmxlbmd0aCA9PT0gMSA/IG1xMCA6IGlzTmFOKG1xWzFdKSA/IG1xWzFdIDogcGFyc2VJbnQobXFbMV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobXEwID09PSBcIipcIiB8fCBtcTAgPT09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtcTAgPSBtcTEgPT09IFwiKlwiID8gMCA6IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpZmllci5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBtcTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg6IG1xMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGppdDogbXFqWzFdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gb3BlbmVuaW5ncy5sZW5ndGggPiAwID8gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLm1hdGNoZXMgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcztcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IG1hdGNoLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTWF0Y2ggPSBtYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGdyb3VwVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IGdyb3VwVG9rZW4ubWF0Y2hlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdG1wTWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaC5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGdyb3VwaWZ5KFsgbWF0Y2ggXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmFsdGVybmF0b3JtYXJrZXI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cFF1YW50aWZpZXIgPSBmdW5jdGlvbihtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdE1hdGNoID0gbWF0Y2hlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWF0Y2guaXNRdWFudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gZ3JvdXBpZnkoWyBtYXRjaGVzLnBvcCgpLCBsYXN0TWF0Y2ggXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFzdE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlRva2VuID0gY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzW2N1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuLm9wZW5Hcm91cCAmJiAoc3ViVG9rZW4ubWF0Y2hlcyA9PT0gdW5kZWZpbmVkIHx8IHN1YlRva2VuLmlzR3JvdXAgPT09IGZhbHNlICYmIHN1YlRva2VuLmlzQWx0ZXJuYXRvciA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gZ3JvdXBRdWFudGlmaWVyKGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2ggPSBncm91cFF1YW50aWZpZXIoY3VycmVudFRva2VuLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobGFzdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWF0Y2guYWx0ZXJuYXRvckdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoLmFsdGVybmF0b3JHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gbmV3IE1hc2tUb2tlbihmYWxzZSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlcy5wdXNoKGxhc3RNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLm9wZW5Hcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5vcGVuR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRvckdyb3VwID0gbmV3IE1hc2tUb2tlbih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yR3JvdXAuYWx0ZXJuYXRvckdyb3VwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2goYWx0ZXJuYXRvckdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgb3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZlcmlmeUdyb3VwTWFya2VyKGN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICAgICAgbWFza1Rva2Vucy5wdXNoKGN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgfHwgb3B0cy5pc1JUTCkge1xuICAgICAgICAgICAgICAgIHJldmVyc2VUb2tlbnMobWFza1Rva2Vuc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFza1Rva2VucztcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb25Db2xvck1hc2s6IGZ1bmN0aW9uKGlucHV0LCB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgaW5wdXQuc3R5bGUubGVmdCA9IHRlbXBsYXRlLm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0bWFzay5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMgPSBmdW5jdGlvbihkZWZpbml0aW9uKSB7XG4gICAgICAgICQuZXh0ZW5kKHRydWUsIElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnMsIGRlZmluaXRpb24pO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMgPSBmdW5jdGlvbihhbGlhcykge1xuICAgICAgICAkLmV4dGVuZCh0cnVlLCBJbnB1dG1hc2sucHJvdG90eXBlLmFsaWFzZXMsIGFsaWFzKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5mb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucywgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5mb3JtYXQodmFsdWUsIG1ldGFkYXRhKTtcbiAgICB9O1xuICAgIElucHV0bWFzay51bm1hc2sgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLnVubWFza2VkdmFsdWUodmFsdWUpO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLmlzVmFsaWQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLmlzVmFsaWQodmFsdWUpO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLnJlbW92ZSA9IGZ1bmN0aW9uKGVsZW1zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcbiAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XG4gICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrKSBlbC5pbnB1dG1hc2sucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLnNldFZhbHVlID0gZnVuY3Rpb24oZWxlbXMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcbiAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XG4gICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrKSBlbC5pbnB1dG1hc2suc2V0VmFsdWUodmFsdWUpOyBlbHNlICQoZWwpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIElucHV0bWFzay5lc2NhcGVSZWdleCA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICB2YXIgc3BlY2lhbHMgPSBbIFwiL1wiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLCBcIj9cIiwgXCJ8XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIFwiXFxcXFwiLCBcIiRcIiwgXCJeXCIgXTtcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXFxcXFwiICsgc3BlY2lhbHMuam9pbihcInxcXFxcXCIpICsgXCIpXCIsIFwiZ2ltXCIpLCBcIlxcXFwkMVwiKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5rZXlDb2RlID0ge1xuICAgICAgICBCQUNLU1BBQ0U6IDgsXG4gICAgICAgIEJBQ0tTUEFDRV9TQUZBUkk6IDEyNyxcbiAgICAgICAgREVMRVRFOiA0NixcbiAgICAgICAgRE9XTjogNDAsXG4gICAgICAgIEVORDogMzUsXG4gICAgICAgIEVOVEVSOiAxMyxcbiAgICAgICAgRVNDQVBFOiAyNyxcbiAgICAgICAgSE9NRTogMzYsXG4gICAgICAgIElOU0VSVDogNDUsXG4gICAgICAgIExFRlQ6IDM3LFxuICAgICAgICBQQUdFX0RPV046IDM0LFxuICAgICAgICBQQUdFX1VQOiAzMyxcbiAgICAgICAgUklHSFQ6IDM5LFxuICAgICAgICBTUEFDRTogMzIsXG4gICAgICAgIFRBQjogOSxcbiAgICAgICAgVVA6IDM4LFxuICAgICAgICBYOiA4OCxcbiAgICAgICAgQ09OVFJPTDogMTdcbiAgICB9O1xuICAgIElucHV0bWFzay5kZXBlbmRlbmN5TGliID0gJDtcbiAgICBmdW5jdGlvbiByZXNvbHZlQWxpYXMoYWxpYXNTdHIsIG9wdGlvbnMsIG9wdHMpIHtcbiAgICAgICAgdmFyIGFsaWFzRGVmaW5pdGlvbiA9IElucHV0bWFzay5wcm90b3R5cGUuYWxpYXNlc1thbGlhc1N0cl07XG4gICAgICAgIGlmIChhbGlhc0RlZmluaXRpb24pIHtcbiAgICAgICAgICAgIGlmIChhbGlhc0RlZmluaXRpb24uYWxpYXMpIHJlc29sdmVBbGlhcyhhbGlhc0RlZmluaXRpb24uYWxpYXMsIHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBvcHRzLCBhbGlhc0RlZmluaXRpb24pO1xuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0cywgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRzLm1hc2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdHMubWFzayA9IGFsaWFzU3RyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrU2V0KG9wdHMsIG5vY2FjaGUpIHtcbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssIG1ldGFkYXRhLCBvcHRzKSB7XG4gICAgICAgICAgICB2YXIgcmVnZXhNYXNrID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAobWFzayA9PT0gbnVsbCB8fCBtYXNrID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgcmVnZXhNYXNrID0gb3B0cy5yZWdleCAhPT0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgPSBvcHRzLnJlZ2V4O1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5yZXBsYWNlKC9eKFxcXikoLiopKFxcJCkkLywgXCIkMlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWdleE1hc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gXCIuKlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXNrLmxlbmd0aCA9PT0gMSAmJiBvcHRzLmdyZWVkeSA9PT0gZmFsc2UgJiYgb3B0cy5yZXBlYXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLnJlcGVhdCA+IDAgfHwgb3B0cy5yZXBlYXQgPT09IFwiKlwiIHx8IG9wdHMucmVwZWF0ID09PSBcIitcIikge1xuICAgICAgICAgICAgICAgIHZhciByZXBlYXRTdGFydCA9IG9wdHMucmVwZWF0ID09PSBcIipcIiA/IDAgOiBvcHRzLnJlcGVhdCA9PT0gXCIrXCIgPyAxIDogb3B0cy5yZXBlYXQ7XG4gICAgICAgICAgICAgICAgbWFzayA9IG9wdHMuZ3JvdXBtYXJrZXJbMF0gKyBtYXNrICsgb3B0cy5ncm91cG1hcmtlclsxXSArIG9wdHMucXVhbnRpZmllcm1hcmtlclswXSArIHJlcGVhdFN0YXJ0ICsgXCIsXCIgKyBvcHRzLnJlcGVhdCArIG9wdHMucXVhbnRpZmllcm1hcmtlclsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtYXNrc2V0RGVmaW5pdGlvbiwgbWFza2RlZktleSA9IHJlZ2V4TWFzayA/IFwicmVnZXhfXCIgKyBvcHRzLnJlZ2V4IDogb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFzaztcbiAgICAgICAgICAgIGlmIChJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0gPT09IHVuZGVmaW5lZCB8fCBub2NhY2hlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbWFza3NldERlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2s6IG1hc2ssXG4gICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbjogSW5wdXRtYXNrLnByb3RvdHlwZS5hbmFseXNlTWFzayhtYXNrLCByZWdleE1hc2ssIG9wdHMpLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZFBvc2l0aW9uczoge30sXG4gICAgICAgICAgICAgICAgICAgIF9idWZmZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHRlc3RzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZXM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1hc2tMZW5ndGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgaml0T2Zmc2V0OiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKG5vY2FjaGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldID0gbWFza3NldERlZmluaXRpb247XG4gICAgICAgICAgICAgICAgICAgIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQodHJ1ZSwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQodHJ1ZSwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza3NldERlZmluaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1zO1xuICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMubWFzaykpIHtcbiAgICAgICAgICAgIG9wdHMubWFzayA9IG9wdHMubWFzayhvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJC5pc0FycmF5KG9wdHMubWFzaykpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLm1hc2subGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmtlZXBTdGF0aWMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5tYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXNrW2ldLmNoYXJBdCgwKSAhPT0gb3B0cy5tYXNrWzBdLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMua2VlcFN0YXRpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFsdE1hc2sgPSBvcHRzLmdyb3VwbWFya2VyWzBdO1xuICAgICAgICAgICAgICAgICQuZWFjaChvcHRzLmlzUlRMID8gb3B0cy5tYXNrLnJldmVyc2UoKSA6IG9wdHMubWFzaywgZnVuY3Rpb24obmR4LCBtc2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hc2subGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdICsgb3B0cy5hbHRlcm5hdG9ybWFya2VyICsgb3B0cy5ncm91cG1hcmtlclswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobXNrLm1hc2sgIT09IHVuZGVmaW5lZCAmJiAhJC5pc0Z1bmN0aW9uKG1zay5tYXNrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWFzayArPSBtc2subWFzaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gbXNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZU1hc2soYWx0TWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgICAgIH0gZWxzZSBvcHRzLm1hc2sgPSBvcHRzLm1hc2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMubWFzayAmJiBvcHRzLm1hc2subWFzayAhPT0gdW5kZWZpbmVkICYmICEkLmlzRnVuY3Rpb24ob3B0cy5tYXNrLm1hc2spKSB7XG4gICAgICAgICAgICBtcyA9IGdlbmVyYXRlTWFzayhvcHRzLm1hc2subWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1zID0gZ2VuZXJhdGVNYXNrKG9wdHMubWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzSW5wdXRFdmVudFN1cHBvcnRlZChldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCBldk5hbWUgPSBcIm9uXCIgKyBldmVudE5hbWUsIGlzU3VwcG9ydGVkID0gZXZOYW1lIGluIGVsO1xuICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZXZOYW1lLCBcInJldHVybjtcIik7XG4gICAgICAgICAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbFtldk5hbWVdID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWwgPSBudWxsO1xuICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hc2tTY29wZShhY3Rpb25PYmosIG1hc2tzZXQsIG9wdHMpIHtcbiAgICAgICAgbWFza3NldCA9IG1hc2tzZXQgfHwgdGhpcy5tYXNrc2V0O1xuICAgICAgICBvcHRzID0gb3B0cyB8fCB0aGlzLm9wdHM7XG4gICAgICAgIHZhciBpbnB1dG1hc2sgPSB0aGlzLCBlbCA9IHRoaXMuZWwsIGlzUlRMID0gdGhpcy5pc1JUTCwgdW5kb1ZhbHVlLCAkZWwsIHNraXBLZXlQcmVzc0V2ZW50ID0gZmFsc2UsIHNraXBJbnB1dEV2ZW50ID0gZmFsc2UsIGlnbm9yYWJsZSA9IGZhbHNlLCBtYXhMZW5ndGgsIG1vdXNlRW50ZXIgPSBmYWxzZSwgY29sb3JNYXNrLCBvcmlnaW5hbFBsYWNlaG9sZGVyO1xuICAgICAgICB2YXIgZ2V0TWFza1RlbXBsYXRlID0gZnVuY3Rpb24oYmFzZU9uSW5wdXQsIG1pbmltYWxQb3MsIGluY2x1ZGVNb2RlLCBub0ppdCwgY2xlYXJPcHRpb25hbFRhaWwpIHtcbiAgICAgICAgICAgIHZhciBncmVlZHkgPSBvcHRzLmdyZWVkeTtcbiAgICAgICAgICAgIGlmIChjbGVhck9wdGlvbmFsVGFpbCkgb3B0cy5ncmVlZHkgPSBmYWxzZTtcbiAgICAgICAgICAgIG1pbmltYWxQb3MgPSBtaW5pbWFsUG9zIHx8IDA7XG4gICAgICAgICAgICB2YXIgbWFza1RlbXBsYXRlID0gW10sIG5keEludGx6ciwgcG9zID0gMCwgdGVzdCwgdGVzdFBvcywgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoYmFzZU9uSW5wdXQgPT09IHRydWUgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGNsZWFyT3B0aW9uYWxUYWlsICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLm9wdGlvbmFsaXR5ID09PSB0cnVlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MgKyAxXSA9PT0gdW5kZWZpbmVkICYmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5nZW5lcmF0ZWRJbnB1dCA9PT0gdHJ1ZSB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCA9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgJiYgcG9zID4gMCkgPyBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgcG9zIC0gMSkpIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZU1vZGUgPT09IHRydWUgPyB0ZXN0UG9zLmlucHV0IDogaW5jbHVkZU1vZGUgPT09IGZhbHNlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaml0TWFza2luZyA9IG5vSml0ID09PSB0cnVlID8gZmFsc2UgOiBvcHRzLmppdE1hc2tpbmcgIT09IGZhbHNlID8gb3B0cy5qaXRNYXNraW5nIDogdGVzdC5qaXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqaXRNYXNraW5nID09PSBmYWxzZSB8fCBqaXRNYXNraW5nID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGppdE1hc2tpbmcgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUoaml0TWFza2luZykgJiYgaml0TWFza2luZyA+IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZU1vZGUgPT09IGZhbHNlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID09PSBcImF1dG9cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdC5uZXdCbG9ja01hcmtlciAmJiB0ZXN0LmZuICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmtlZXBTdGF0aWMgPSBwb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgfSB3aGlsZSAoKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHBvcyA8IG1heExlbmd0aCkgJiYgKHRlc3QuZm4gIT09IG51bGwgfHwgdGVzdC5kZWYgIT09IFwiXCIpIHx8IG1pbmltYWxQb3MgPiBwb3MpO1xuICAgICAgICAgICAgaWYgKG1hc2tUZW1wbGF0ZVttYXNrVGVtcGxhdGUubGVuZ3RoIC0gMV0gPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU1vZGUgIT09IGZhbHNlIHx8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID0gcG9zIC0gMTtcbiAgICAgICAgICAgIG9wdHMuZ3JlZWR5ID0gZ3JlZWR5O1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tUZW1wbGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWFza1NldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXNrc2V0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0TWFza1NldChzb2Z0KSB7XG4gICAgICAgICAgICB2YXIgbWFza3NldCA9IGdldE1hc2tTZXQoKTtcbiAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHNvZnQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBtYXNrc2V0LnZhbGlkUG9zaXRpb25zID0ge307XG4gICAgICAgICAgICAgICAgbWFza3NldC5wID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbG9zZXN0VG8sIHN0cmljdCwgdmFsaWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBiZWZvcmUgPSAtMSwgYWZ0ZXIgPSAtMSwgdmFsaWRzID0gdmFsaWRQb3NpdGlvbnMgfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xuICAgICAgICAgICAgaWYgKGNsb3Nlc3RUbyA9PT0gdW5kZWZpbmVkKSBjbG9zZXN0VG8gPSAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIHBvc05keCBpbiB2YWxpZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHNOZHggPSBwYXJzZUludChwb3NOZHgpO1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZHNbcHNOZHhdICYmIChzdHJpY3QgfHwgdmFsaWRzW3BzTmR4XS5nZW5lcmF0ZWRJbnB1dCAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBzTmR4IDw9IGNsb3Nlc3RUbykgYmVmb3JlID0gcHNOZHg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwc05keCA+PSBjbG9zZXN0VG8pIGFmdGVyID0gcHNOZHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJlZm9yZSA9PT0gLTEgfHwgYmVmb3JlID09IGNsb3Nlc3RUbyA/IGFmdGVyIDogYWZ0ZXIgPT0gLTEgPyBiZWZvcmUgOiBjbG9zZXN0VG8gLSBiZWZvcmUgPCBhZnRlciAtIGNsb3Nlc3RUbyA/IGJlZm9yZSA6IGFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldERlY2lzaW9uVGFrZXIodHN0KSB7XG4gICAgICAgICAgICB2YXIgZGVjaXNpb25UYWtlciA9IHRzdC5sb2NhdG9yW3RzdC5hbHRlcm5hdGlvbl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlY2lzaW9uVGFrZXIgPT0gXCJzdHJpbmdcIiAmJiBkZWNpc2lvblRha2VyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkZWNpc2lvblRha2VyID0gZGVjaXNpb25UYWtlci5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjaXNpb25UYWtlciAhPT0gdW5kZWZpbmVkID8gZGVjaXNpb25UYWtlci50b1N0cmluZygpIDogXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRMb2NhdG9yKHRzdCwgYWxpZ24pIHtcbiAgICAgICAgICAgIHZhciBsb2NhdG9yID0gKHRzdC5hbHRlcm5hdGlvbiAhPSB1bmRlZmluZWQgPyB0c3QubWxvY1tnZXREZWNpc2lvblRha2VyKHRzdCldIDogdHN0LmxvY2F0b3IpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICBpZiAobG9jYXRvciAhPT0gXCJcIikgd2hpbGUgKGxvY2F0b3IubGVuZ3RoIDwgYWxpZ24pIGxvY2F0b3IgKz0gXCIwXCI7XG4gICAgICAgICAgICByZXR1cm4gbG9jYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCB0ZXN0cykge1xuICAgICAgICAgICAgcG9zID0gcG9zID4gMCA/IHBvcyAtIDEgOiAwO1xuICAgICAgICAgICAgdmFyIGFsdFRlc3QgPSBnZXRUZXN0KHBvcyksIHRhcmdldExvY2F0b3IgPSBnZXRMb2NhdG9yKGFsdFRlc3QpLCB0c3RMb2NhdG9yLCBjbG9zZXN0LCBiZXN0TWF0Y2g7XG4gICAgICAgICAgICBmb3IgKHZhciBuZHggPSAwOyBuZHggPCB0ZXN0cy5sZW5ndGg7IG5keCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRzdCA9IHRlc3RzW25keF07XG4gICAgICAgICAgICAgICAgdHN0TG9jYXRvciA9IGdldExvY2F0b3IodHN0LCB0YXJnZXRMb2NhdG9yLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnModHN0TG9jYXRvciAtIHRhcmdldExvY2F0b3IpO1xuICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0ID09PSB1bmRlZmluZWQgfHwgdHN0TG9jYXRvciAhPT0gXCJcIiAmJiBkaXN0YW5jZSA8IGNsb3Nlc3QgfHwgYmVzdE1hdGNoICYmICFvcHRzLmdyZWVkeSAmJiBiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxpdHkgJiYgYmVzdE1hdGNoLm1hdGNoLm5ld0Jsb2NrTWFya2VyID09PSBcIm1hc3RlclwiICYmICghdHN0Lm1hdGNoLm9wdGlvbmFsaXR5IHx8ICF0c3QubWF0Y2gubmV3QmxvY2tNYXJrZXIpIHx8IGJlc3RNYXRjaCAmJiBiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmICF0c3QubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gdHN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiZXN0TWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCB0c3RQcykge1xuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdIHx8IGRldGVybWluZVRlc3RUZW1wbGF0ZShwb3MsIGdldFRlc3RzKHBvcywgbmR4SW50bHpyID8gbmR4SW50bHpyLnNsaWNlKCkgOiBuZHhJbnRsenIsIHRzdFBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdChwb3MsIHRlc3RzKSB7XG4gICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKHRlc3RzIHx8IGdldFRlc3RzKHBvcykpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvcywgZGVmKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWQgPSBmYWxzZSwgdGVzdHMgPSBnZXRUZXN0cyhwb3MpO1xuICAgICAgICAgICAgZm9yICh2YXIgdG5keCA9IDA7IHRuZHggPCB0ZXN0cy5sZW5ndGg7IHRuZHgrKykge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0c1t0bmR4XS5tYXRjaCAmJiB0ZXN0c1t0bmR4XS5tYXRjaC5kZWYgPT09IGRlZikge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgdHN0UHMpIHtcbiAgICAgICAgICAgIHZhciBtYXNrVG9rZW5zID0gZ2V0TWFza1NldCgpLm1hc2tUb2tlbiwgdGVzdFBvcyA9IG5keEludGx6ciA/IHRzdFBzIDogMCwgbmR4SW5pdGlhbGl6ZXIgPSBuZHhJbnRsenIgPyBuZHhJbnRsenIuc2xpY2UoKSA6IFsgMCBdLCBtYXRjaGVzID0gW10sIGluc2VydFN0b3AgPSBmYWxzZSwgbGF0ZXN0TWF0Y2gsIGNhY2hlRGVwZW5kZW5jeSA9IG5keEludGx6ciA/IG5keEludGx6ci5qb2luKFwiXCIpIDogXCJcIjtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbiwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlTWF0Y2gobWF0Y2gsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0TWF0Y2ggPSAkLmluQXJyYXkobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlcykgPT09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2godG9rZW5Hcm91cC5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pc1F1YW50aWZpZXIgPT09IHRydWUpIGZpcnN0TWF0Y2ggPSBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlc1tuZHggLSAxXSk7IGVsc2UgaWYgKG1hdGNoLmhhc093blByb3BlcnR5KFwibWF0Y2hlc1wiKSkgZmlyc3RNYXRjaCA9IGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgbWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RNYXRjaCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcywgYWx0ZXJuYXRlTmR4LCB0YXJnZXRBbHRlcm5hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaCwgaW5kZXhQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gfHwgWyBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSBdLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxtbnQubWxvY1thbHRlcm5hdGVOZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2ggPSBsbW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGlvbiA9IHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGxtbnQuYWx0ZXJuYXRpb24sIG5keFBvcyA9IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gIT09IHVuZGVmaW5lZCA/IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdGVybmF0ZU5keCkgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbmRleFBvcyA9PT0gdW5kZWZpbmVkIHx8IG5keFBvcyA8IGluZGV4UG9zKSAmJiBuZHhQb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2ggPSBsbW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhQb3MgPSBuZHhQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZXN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVzdE1hdGNoQWx0SW5kZXggPSBiZXN0TWF0Y2gubG9jYXRvcltiZXN0TWF0Y2guYWx0ZXJuYXRpb25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdG9yID0gYmVzdE1hdGNoLm1sb2NbYWx0ZXJuYXRlTmR4XSB8fCBiZXN0TWF0Y2gubWxvY1tiZXN0TWF0Y2hBbHRJbmRleF0gfHwgYmVzdE1hdGNoLmxvY2F0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3Iuc2xpY2UoKHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGJlc3RNYXRjaC5hbHRlcm5hdGlvbikgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyByZXNvbHZlTmR4SW5pdGlhbGl6ZXIocG9zLCBhbHRlcm5hdGVOZHgpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzU3Vic2V0T2Yoc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGFuZChwYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGFuZGVkID0gW10sIHN0YXJ0LCBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXR0ZXJuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0dGVybi5jaGFyQXQoaSkgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBwYXR0ZXJuLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCsrc3RhcnQgPCBlbmQpIGV4cGFuZGVkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShzdGFydCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBwYXR0ZXJuLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZC5wdXNoKHBhdHRlcm4uY2hhckF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kZWQuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJlZ2V4ICYmIHNvdXJjZS5tYXRjaC5mbiAhPT0gbnVsbCAmJiB0YXJnZXQubWF0Y2guZm4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kKHRhcmdldC5tYXRjaC5kZWYucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcIikpLmluZGV4T2YoZXhwYW5kKHNvdXJjZS5tYXRjaC5kZWYucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcIikpKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlLm1hdGNoLmRlZiA9PT0gdGFyZ2V0Lm1hdGNoLm5hdGl2ZURlZjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdGF0aWNDYW5NYXRjaERlZmluaXRpb24oc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbG9jID0gc291cmNlLmxvY2F0b3Iuc2xpY2Uoc291cmNlLmFsdGVybmF0aW9uKS5qb2luKFwiXCIpLCB0bG9jID0gdGFyZ2V0LmxvY2F0b3Iuc2xpY2UodGFyZ2V0LmFsdGVybmF0aW9uKS5qb2luKFwiXCIpLCBjYW5NYXRjaCA9IHNsb2MgPT0gdGxvYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbk1hdGNoID0gY2FuTWF0Y2ggJiYgc291cmNlLm1hdGNoLmZuID09PSBudWxsICYmIHRhcmdldC5tYXRjaC5mbiAhPT0gbnVsbCA/IHRhcmdldC5tYXRjaC5mbi50ZXN0KHNvdXJjZS5tYXRjaC5kZWYsIGdldE1hc2tTZXQoKSwgcG9zLCBmYWxzZSwgb3B0cywgZmFsc2UpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FuTWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0TWVyZ2VMb2NhdG9ycyh0YXJnZXRNYXRjaCwgYWx0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXRjaCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldE1hdGNoLmFsdGVybmF0aW9uID09PSBhbHRNYXRjaC5hbHRlcm5hdGlvbiAmJiB0YXJnZXRNYXRjaC5sb2NhdG9yW3RhcmdldE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YoYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1hdGNoLm1sb2MgPSB0YXJnZXRNYXRjaC5tbG9jIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NOZHggPSB0YXJnZXRNYXRjaC5sb2NhdG9yW3RhcmdldE1hdGNoLmFsdGVybmF0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jTmR4ID09PSB1bmRlZmluZWQpIHRhcmdldE1hdGNoLmFsdGVybmF0aW9uID0gdW5kZWZpbmVkOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2NOZHggPT09IFwic3RyaW5nXCIpIGxvY05keCA9IGxvY05keC5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNYXRjaC5tbG9jW2xvY05keF0gPT09IHVuZGVmaW5lZCkgdGFyZ2V0TWF0Y2gubWxvY1tsb2NOZHhdID0gdGFyZ2V0TWF0Y2gubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4IGluIGFsdE1hdGNoLm1sb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5keCA9PT0gXCJzdHJpbmdcIikgbmR4ID0gbmR4LnNwbGl0KFwiLFwiKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWF0Y2gubWxvY1tuZHhdID09PSB1bmRlZmluZWQpIHRhcmdldE1hdGNoLm1sb2NbbmR4XSA9IGFsdE1hdGNoLm1sb2NbbmR4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1hdGNoLmxvY2F0b3JbdGFyZ2V0TWF0Y2guYWx0ZXJuYXRpb25dID0gT2JqZWN0LmtleXModGFyZ2V0TWF0Y2gubWxvYykuam9pbihcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0UG9zID4gNTAwICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiSW5wdXRtYXNrOiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIG1hc2sgZGVmaW5pdGlvbiBvciBpbiB0aGUgY29kZS4gQ3JlYXRlIGFuIGlzc3VlIG9uIGdpdGh1YiB3aXRoIGFuIGV4YW1wbGUgb2YgdGhlIG1hc2sgeW91IGFyZSB1c2luZy4gXCIgKyBnZXRNYXNrU2V0KCkubWFzaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA9PT0gcG9zICYmIG1hdGNoLm1hdGNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRvcjogbG9vcE5keC5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Q6IGNhY2hlRGVwZW5kZW5jeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtbG9jOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5tYXRjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pc0dyb3VwICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgKyAxXSwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uYWxUb2tlbiA9IG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXRjaGVzLCBmdW5jdGlvbihuZHgsIG10Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10Y2gubWF0Y2gub3B0aW9uYWxpdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0TWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWFudGlmaWVyUmVjdXJzZSA9PT0gdW5kZWZpbmVkICYmIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgb3B0aW9uYWxUb2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0ZVRva2VuID0gbWF0Y2gsIG1hbHRlcm5hdGVNYXRjaGVzID0gW10sIG1hbHRNYXRjaGVzLCBjdXJyZW50TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoKSwgbG9vcE5keENudCA9IGxvb3BOZHgubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRJbmRleCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdEluZGV4ID09PSAtMSB8fCB0eXBlb2YgYWx0SW5kZXggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3MgPSB0ZXN0UG9zLCBuZHhJbml0aWFsaXplckNsb25lID0gbmR4SW5pdGlhbGl6ZXIuc2xpY2UoKSwgYWx0SW5kZXhBcnIgPSBbXSwgYW1uZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWx0SW5kZXggPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0SW5kZXhBcnIgPSBhbHRJbmRleC5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGFtbmR4ID0gMDsgYW1uZHggPCBhbHRlcm5hdGVUb2tlbi5tYXRjaGVzLmxlbmd0aDsgYW1uZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyLnB1c2goYW1uZHgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0SW5kZXhBcnJDbG9uZSA9IGFsdEluZGV4QXJyLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZWwgPSBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXS5sZW5ndGg7IGkgPCBlbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0SW5kZXhBcnIuc3BsaWNlKGFsdEluZGV4QXJyLmluZGV4T2YoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW3Bvc11baV0udG9TdHJpbmcoKSksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdEluZGV4QXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1twb3NdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyID0gYWx0SW5kZXhBcnJDbG9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID09PSB0cnVlIHx8IGlzRmluaXRlKHBhcnNlSW50KG9wdHMua2VlcFN0YXRpYykpICYmIGN1cnJlbnRQb3MgPj0gb3B0cy5rZWVwU3RhdGljKSBhbHRJbmRleEFyciA9IGFsdEluZGV4QXJyLnNsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5NYXRjaGVkQWx0ZXJuYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4ID0gMDsgbmR4IDwgYWx0SW5kZXhBcnIubGVuZ3RoOyBuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1uZHggPSBwYXJzZUludChhbHRJbmRleEFycltuZHhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEluaXRpYWxpemVyID0gdHlwZW9mIGFsdEluZGV4ID09PSBcInN0cmluZ1wiID8gcmVzb2x2ZU5keEluaXRpYWxpemVyKHRlc3RQb3MsIGFtbmR4LCBsb29wTmR4Q250KSB8fCBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCkgOiBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbW5keF0gJiYgaGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbW5keF0sIFsgYW1uZHggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKSkgbWF0Y2ggPSB0cnVlOyBlbHNlIGlmIChuZHggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bk1hdGNoZWRBbHRlcm5hdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBjdXJyZW50UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4MSA9IDA7IG5keDEgPCBtYWx0TWF0Y2hlcy5sZW5ndGg7IG5keDErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXRjaCA9IG1hbHRNYXRjaGVzW25keDFdLCBkcm9wTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaC5tYXRjaC5qaXQgPSBhbHRNYXRjaC5tYXRjaC5qaXQgfHwgdW5NYXRjaGVkQWx0ZXJuYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWF0Y2guYWx0ZXJuYXRpb24gPSBhbHRNYXRjaC5hbHRlcm5hdGlvbiB8fCBsb29wTmR4Q250O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDIgPSAwOyBuZHgyIDwgbWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoOyBuZHgyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hdGNoMiA9IG1hbHRlcm5hdGVNYXRjaGVzW25keDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFsdEluZGV4ICE9PSBcInN0cmluZ1wiIHx8IGFsdE1hdGNoLmFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgJiYgJC5pbkFycmF5KGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksIGFsdEluZGV4QXJyKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXRjaC5tYXRjaC5uYXRpdmVEZWYgPT09IGFsdE1hdGNoMi5tYXRjaC5uYXRpdmVEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3Vic2V0T2YoYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0TWVyZ2VMb2NhdG9ycyhhbHRNYXRjaCwgYWx0TWF0Y2gyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0ZXJuYXRlTWF0Y2hlcy5zcGxpY2UobWFsdGVybmF0ZU1hdGNoZXMuaW5kZXhPZihhbHRNYXRjaDIpLCAwLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N1YnNldE9mKGFsdE1hdGNoMiwgYWx0TWF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWVyZ2VMb2NhdG9ycyhhbHRNYXRjaDIsIGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGljQ2FuTWF0Y2hEZWZpbml0aW9uKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMCwgYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRyb3BNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0ZXJuYXRlTWF0Y2hlcy5wdXNoKGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IGN1cnJlbnRNYXRjaGVzLmNvbmNhdChtYWx0ZXJuYXRlTWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSBtYXRjaGVzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW5pdGlhbGl6ZXIgPSBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG1hdGNoID0gaGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbHRJbmRleF0gfHwgbWFza1Rva2VuLm1hdGNoZXNbYWx0SW5kZXhdLCBbIGFsdEluZGV4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNRdWFudGlmaWVyICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSBtYXNrVG9rZW4ubWF0Y2hlc1skLmluQXJyYXkobWF0Y2gsIG1hc2tUb2tlbi5tYXRjaGVzKSAtIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF0ID0gbWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcW5keCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogMDsgcW5keCA8IChpc05hTihxdC5xdWFudGlmaWVyLm1heCkgPyBxbmR4ICsgMSA6IHF0LnF1YW50aWZpZXIubWF4KSAmJiB0ZXN0UG9zIDw9IHBvczsgcW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbkdyb3VwID0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KHF0LCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBoYW5kbGVNYXRjaCh0b2tlbkdyb3VwLCBbIHFuZHggXS5jb25jYXQobG9vcE5keCksIHRva2VuR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0TWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyID0gcW5keCA+PSBxdC5xdWFudGlmaWVyLm1pbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoLmppdCA9IChxbmR4IHx8IDEpICogdG9rZW5Hcm91cC5tYXRjaGVzLmluZGV4T2YobGF0ZXN0TWF0Y2gpID49IHF0LnF1YW50aWZpZXIuaml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0U3RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaC5qaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuaml0T2Zmc2V0W3Bvc10gPSB0b2tlbkdyb3VwLm1hdGNoZXMuaW5kZXhPZihsYXRlc3RNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXRjaCwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHRuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHRuZHggPCBtYXNrVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IHRuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbdG5keF0uaXNRdWFudGlmaWVyICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBoYW5kbGVNYXRjaChtYXNrVG9rZW4ubWF0Y2hlc1t0bmR4XSwgWyB0bmR4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgdGVzdFBvcyA9PT0gcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZXN0UG9zID4gcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtZXJnZUxvY2F0b3JzKHBvcywgdGVzdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRvciA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICghJC5pc0FycmF5KHRlc3RzKSkgdGVzdHMgPSBbIHRlc3RzIF07XG4gICAgICAgICAgICAgICAgaWYgKHRlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzWzBdLmFsdGVybmF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0b3IgPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCB0ZXN0cy5zbGljZSgpKS5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYXRvci5sZW5ndGggPT09IDApIGxvY2F0b3IgPSB0ZXN0c1swXS5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2godGVzdHMsIGZ1bmN0aW9uKG5keCwgdHN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRzdC5kZWYgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0b3IubGVuZ3RoID09PSAwKSBsb2NhdG9yID0gdHN0LmxvY2F0b3Iuc2xpY2UoKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2F0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHN0LmxvY2F0b3JbaV0gJiYgbG9jYXRvcltpXS50b1N0cmluZygpLmluZGV4T2YodHN0LmxvY2F0b3JbaV0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yW2ldICs9IFwiLFwiICsgdHN0LmxvY2F0b3JbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobmR4SW50bHpyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUG9zID0gcG9zIC0gMSwgdGVzdDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCh0ZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ByZXZpb3VzUG9zXSB8fCBnZXRNYXNrU2V0KCkudGVzdHNbcHJldmlvdXNQb3NdKSA9PT0gdW5kZWZpbmVkICYmIHByZXZpb3VzUG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUG9zLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3QgIT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c1BvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZHhJbml0aWFsaXplciA9IG1lcmdlTG9jYXRvcnMocHJldmlvdXNQb3MsIHRlc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVEZXBlbmRlbmN5ID0gbmR4SW5pdGlhbGl6ZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwcmV2aW91c1BvcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gJiYgZ2V0TWFza1NldCgpLnRlc3RzW3Bvc11bMF0uY2QgPT09IGNhY2hlRGVwZW5kZW5jeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnRlc3RzW3Bvc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIG10bmR4ID0gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKTsgbXRuZHggPCBtYXNrVG9rZW5zLmxlbmd0aDsgbXRuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXNrVG9rZW5zW210bmR4XSwgbmR4SW5pdGlhbGl6ZXIsIFsgbXRuZHggXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiB0ZXN0UG9zID09PSBwb3MgfHwgdGVzdFBvcyA+IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDAgfHwgaW5zZXJ0U3RvcCkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IFtdLFxuICAgICAgICAgICAgICAgICAgICBtbG9jOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgY2Q6IGNhY2hlRGVwZW5kZW5jeVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5keEludGx6ciAhPT0gdW5kZWZpbmVkICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIFtdLCBtYXRjaGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdID0gJC5leHRlbmQodHJ1ZSwgW10sIG1hdGNoZXMpO1xuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlclRlbXBsYXRlKCkge1xuICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5fYnVmZmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuX2J1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZShmYWxzZSwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5idWZmZXIgPT09IHVuZGVmaW5lZCkgZ2V0TWFza1NldCgpLmJ1ZmZlciA9IGdldE1hc2tTZXQoKS5fYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLl9idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyKG5vQ2FjaGUpIHtcbiAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuYnVmZmVyID09PSB1bmRlZmluZWQgfHwgbm9DYWNoZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5fYnVmZmVyID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5fYnVmZmVyID0gZ2V0TWFza1NldCgpLmJ1ZmZlci5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVmcmVzaEZyb21CdWZmZXIoc3RhcnQsIGVuZCwgYnVmZmVyKSB7XG4gICAgICAgICAgICB2YXIgaSwgcDtcbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICBlbmQgPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCA9IHN0YXJ0O1xuICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyW2ldICE9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbFJlc3VsdCA9IGlzVmFsaWQocCwgYnVmZmVyW2ldLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB2YWxSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHZhbFJlc3VsdC5jYXJldCA6IHZhbFJlc3VsdC5wb3MgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhc2luZyhlbGVtLCB0ZXN0LCBwb3MpIHtcbiAgICAgICAgICAgIHN3aXRjaCAob3B0cy5jYXNpbmcgfHwgdGVzdC5jYXNpbmcpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInVwcGVyXCI6XG4gICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwibG93ZXJcIjpcbiAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgICAgICAgICAgIHZhciBwb3NCZWZvcmUgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCB8fCBwb3NCZWZvcmUgJiYgcG9zQmVmb3JlLmlucHV0ID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKElucHV0bWFzay5rZXlDb2RlLlNQQUNFKSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmNhc2luZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IG9wdHMuY2FzaW5nLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQWx0ZXJuYXRpb25NYXRjaChhbHRBcnIxLCBhbHRBcnIyLCBuYSkge1xuICAgICAgICAgICAgdmFyIGFsdEFyckMgPSBvcHRzLmdyZWVkeSA/IGFsdEFycjIgOiBhbHRBcnIyLnNsaWNlKDAsIDEpLCBpc01hdGNoID0gZmFsc2UsIG5hQXJyID0gbmEgIT09IHVuZGVmaW5lZCA/IG5hLnNwbGl0KFwiLFwiKSA6IFtdLCBuYU5keDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoKG5hTmR4ID0gYWx0QXJyMS5pbmRleE9mKG5hQXJyW2ldKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdEFycjEuc3BsaWNlKG5hTmR4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBhbG5keCA9IDA7IGFsbmR4IDwgYWx0QXJyMS5sZW5ndGg7IGFsbmR4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGFsdEFycjFbYWxuZHhdLCBhbHRBcnJDKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc01hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFsdGVybmF0ZShwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCByQWx0UG9zKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQc0Nsb25lID0gJC5leHRlbmQodHJ1ZSwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGxhc3RBbHQsIGFsdGVybmF0aW9uLCBpc1ZhbGlkUnNsdCA9IGZhbHNlLCBhbHRQb3MsIHByZXZBbHRQb3MsIGksIHZhbGlkUG9zLCBkZWNpc2lvblBvcywgbEFsdFBvcyA9IHJBbHRQb3MgIT09IHVuZGVmaW5lZCA/IHJBbHRQb3MgOiBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xuICAgICAgICAgICAgaWYgKGxBbHRQb3MgPT09IC0xICYmIHJBbHRQb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxhc3RBbHQgPSAwO1xuICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBnZXRUZXN0KGxhc3RBbHQpO1xuICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uID0gcHJldkFsdFBvcy5hbHRlcm5hdGlvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICg7bEFsdFBvcyA+PSAwOyBsQWx0UG9zLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWx0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2xBbHRQb3NdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWx0UG9zICYmIGFsdFBvcy5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldkFsdFBvcyAmJiBwcmV2QWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSAhPT0gYWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFsdCA9IGxBbHRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbiA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XS5hbHRlcm5hdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBhbHRQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlY2lzaW9uUG9zID0gcGFyc2VJbnQobGFzdEFsdCk7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSA9IGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10gfHwgW107XG4gICAgICAgICAgICAgICAgaWYgKHBvcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdLnB1c2goZ2V0RGVjaXNpb25UYWtlcihwcmV2QWx0UG9zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWxpZElucHV0c0Nsb25lID0gW10sIHN0YXRpY0lucHV0c0JlZm9yZVBvcyA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gZGVjaXNpb25Qb3M7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHRydWUpICsgMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRQb3MgJiYgdmFsaWRQb3MuZ2VuZXJhdGVkSW5wdXQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkSW5wdXRzQ2xvbmUucHVzaCh2YWxpZFBvcy5pbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IHBvcykgc3RhdGljSW5wdXRzQmVmb3JlUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdICYmIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10ubGVuZ3RoIDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc09mZnNldCA9IHN0YXRpY0lucHV0c0JlZm9yZVBvcyAqIC0xLCB2YWxpZElucHV0cyA9IHZhbGlkSW5wdXRzQ2xvbmUuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnRlc3RzW2RlY2lzaW9uUG9zXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkUnNsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh2YWxpZElucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB2YWxpZElucHV0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSkgKyAxLCBpbnB1dCwgZmFsc2UsIGZyb21TZXRWYWxpZCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRSc2x0ICYmIGMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcykgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gZGVjaXNpb25Qb3M7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICsgMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWxpZFBvcyA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkUG9zLm1hdGNoLmZuID09IG51bGwpICYmIGkgPCBwb3MgKyBwb3NPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zT2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gcG9zICsgcG9zT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKHBvcyA+IHRhcmdldEx2cCA/IHRhcmdldEx2cCA6IHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZFJzbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkFsdFBvcyA9IGdldFRlc3QoZGVjaXNpb25Qb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHZhbGlkUHNDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNpc2lvblRha2VyID0gZ2V0RGVjaXNpb25UYWtlcihwcmV2QWx0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5pbmRleE9mKGRlY2lzaW9uVGFrZXIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkUnNsdCA9IGFsdGVybmF0ZShwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCBkZWNpc2lvblBvcyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGRlY2lzaW9uVGFrZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKSArIDE7IGkrKykgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZGVjaXNpb25Qb3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gaXNWYWxpZFJzbHQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNWYWxpZChwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCBmcm9tQWx0ZXJuYXRlLCB2YWxpZGF0ZU9ubHkpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2VsZWN0aW9uKHBvc09iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1JUTCA/IHBvc09iai5iZWdpbiAtIHBvc09iai5lbmQgPiAxIHx8IHBvc09iai5iZWdpbiAtIHBvc09iai5lbmQgPT09IDEgOiBwb3NPYmouZW5kIC0gcG9zT2JqLmJlZ2luID4gMSB8fCBwb3NPYmouZW5kIC0gcG9zT2JqLmJlZ2luID09PSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyaWN0ID0gc3RyaWN0ID09PSB0cnVlO1xuICAgICAgICAgICAgdmFyIG1hc2tQb3MgPSBwb3M7XG4gICAgICAgICAgICBpZiAocG9zLmJlZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXNrUG9zID0gaXNSVEwgPyBwb3MuZW5kIDogcG9zLmJlZ2luO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX2lzVmFsaWQocG9zaXRpb24sIGMsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHZhciByc2x0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJC5lYWNoKGdldFRlc3RzKHBvc2l0aW9uKSwgZnVuY3Rpb24obmR4LCB0c3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QgPSB0c3QubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIGdldEJ1ZmZlcih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcnNsdCA9IHRlc3QuZm4gIT0gbnVsbCA/IHRlc3QuZm4udGVzdChjLCBnZXRNYXNrU2V0KCksIHBvc2l0aW9uLCBzdHJpY3QsIG9wdHMsIGlzU2VsZWN0aW9uKHBvcykpIDogKGMgPT09IHRlc3QuZGVmIHx8IGMgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikgJiYgdGVzdC5kZWYgIT09IFwiXCIgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBnZXRQbGFjZWhvbGRlcihwb3NpdGlvbiwgdGVzdCwgdHJ1ZSkgfHwgdGVzdC5kZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHJzbHQuYyAhPT0gdW5kZWZpbmVkID8gcnNsdC5jIDogYywgdmFsaWRhdGVkUG9zID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbSA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmIHRlc3QuZm4gPT09IG51bGwgPyBnZXRQbGFjZWhvbGRlcihwb3NpdGlvbiwgdGVzdCwgdHJ1ZSkgfHwgdGVzdC5kZWYgOiBlbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQucmVtb3ZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheShyc2x0LnJlbW92ZSkpIHJzbHQucmVtb3ZlID0gWyByc2x0LnJlbW92ZSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChyc2x0LnJlbW92ZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgLSBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZU1hc2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxtbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGxtbnQgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQuaW5zZXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheShyc2x0Lmluc2VydCkpIHJzbHQuaW5zZXJ0ID0gWyByc2x0Lmluc2VydCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChyc2x0Lmluc2VydC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZChsbW50LnBvcywgbG1udC5jLCB0cnVlLCBmcm9tU2V0VmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQgIT09IHRydWUgJiYgcnNsdC5wb3MgIT09IHVuZGVmaW5lZCAmJiByc2x0LnBvcyAhPT0gcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZWRQb3MgPSByc2x0LnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSB0cnVlICYmIHJzbHQucG9zID09PSB1bmRlZmluZWQgJiYgcnNsdC5jID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJldmFsaWRhdGVNYXNrKHBvcywgJC5leHRlbmQoe30sIHRzdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBjYXNpbmcoZWxlbSwgdGVzdCwgdmFsaWRhdGVkUG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZyb21TZXRWYWxpZCwgdmFsaWRhdGVkUG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzbHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByc2x0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRydWUsIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQodHJ1ZSwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyk7XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucHJlVmFsaWRhdGlvbikgJiYgIXN0cmljdCAmJiBmcm9tU2V0VmFsaWQgIT09IHRydWUgJiYgdmFsaWRhdGVPbmx5ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5wcmVWYWxpZGF0aW9uKGdldEJ1ZmZlcigpLCBtYXNrUG9zLCBjLCBpc1NlbGVjdGlvbihwb3MpLCBvcHRzLCBnZXRNYXNrU2V0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRyYWNrYmFja1Bvc2l0aW9ucyh1bmRlZmluZWQsIG1hc2tQb3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBtYXNrUG9zIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9pc1ZhbGlkKG1hc2tQb3MsIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoIXN0cmljdCB8fCBmcm9tU2V0VmFsaWQgPT09IHRydWUpICYmIHJlc3VsdCA9PT0gZmFsc2UgJiYgdmFsaWRhdGVPbmx5ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvc1ZhbGlkID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW21hc2tQb3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3NWYWxpZCAmJiBjdXJyZW50UG9zVmFsaWQubWF0Y2guZm4gPT09IG51bGwgJiYgKGN1cnJlbnRQb3NWYWxpZC5tYXRjaC5kZWYgPT09IGMgfHwgYyA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHNlZWtOZXh0KG1hc2tQb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChvcHRzLmluc2VydE1vZGUgfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3NlZWtOZXh0KG1hc2tQb3MpXSA9PT0gdW5kZWZpbmVkKSAmJiAoIWlzTWFzayhtYXNrUG9zLCB0cnVlKSB8fCBnZXRNYXNrU2V0KCkuaml0T2Zmc2V0W21hc2tQb3NdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmppdE9mZnNldFttYXNrUG9zXSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc2Vla05leHQobWFza1BvcyldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzVmFsaWQobWFza1BvcyArIGdldE1hc2tTZXQoKS5qaXRPZmZzZXRbbWFza1Bvc10sIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkgcmVzdWx0LmNhcmV0ID0gbWFza1BvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAodmFyIG5Qb3MgPSBtYXNrUG9zICsgMSwgc25Qb3MgPSBzZWVrTmV4dChtYXNrUG9zKTsgblBvcyA8PSBzblBvczsgblBvcysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfaXNWYWxpZChuUG9zLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2JhY2tQb3NpdGlvbnMobWFza1BvcywgcmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LnBvcyA6IG5Qb3MpIHx8IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrUG9zID0gblBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSAmJiBvcHRzLmtlZXBTdGF0aWMgIT09IGZhbHNlICYmIChvcHRzLnJlZ2V4ID09IG51bGwgfHwgaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkpICYmICFzdHJpY3QgJiYgZnJvbUFsdGVybmF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhbHRlcm5hdGUobWFza1BvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWFza1Bvc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5wb3N0VmFsaWRhdGlvbikgJiYgcmVzdWx0ICE9PSBmYWxzZSAmJiAhc3RyaWN0ICYmIGZyb21TZXRWYWxpZCAhPT0gdHJ1ZSAmJiB2YWxpZGF0ZU9ubHkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdFJlc3VsdCA9IG9wdHMucG9zdFZhbGlkYXRpb24oZ2V0QnVmZmVyKHRydWUpLCBwb3MuYmVnaW4gIT09IHVuZGVmaW5lZCA/IGlzUlRMID8gcG9zLmVuZCA6IHBvcy5iZWdpbiA6IHBvcywgcmVzdWx0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zdFJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N0UmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyICYmIHBvc3RSZXN1bHQuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHBvc3RSZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcihyZWZyZXNoID09PSB0cnVlID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCBwb3N0UmVzdWx0LmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcG9zdFJlc3VsdCA9PT0gdHJ1ZSA/IHJlc3VsdCA6IHBvc3RSZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQucG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucG9zID0gbWFza1BvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlIHx8IHZhbGlkYXRlT25seSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgcG9zaXRpb25zQ2xvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0cmFja2JhY2tQb3NpdGlvbnMob3JpZ2luYWxQb3MsIG5ld1BvcywgZmlsbE9ubHkpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICBpZiAob3JpZ2luYWxQb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZvciAob3JpZ2luYWxQb3MgPSBuZXdQb3MgLSAxOyBvcmlnaW5hbFBvcyA+IDA7IG9yaWdpbmFsUG9zLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tvcmlnaW5hbFBvc10pIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIHBzID0gb3JpZ2luYWxQb3M7IHBzIDwgbmV3UG9zOyBwcysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twc10gPT09IHVuZGVmaW5lZCAmJiAhaXNNYXNrKHBzLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdnAgPSBwcyA9PSAwID8gZ2V0VGVzdChwcykgOiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcHMgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwcykuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPT09IFwiXCIpIHRlc3RzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaCA9IGRldGVybWluZVRlc3RUZW1wbGF0ZShwcywgdGVzdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gJC5leHRlbmQoe30sIGJlc3RNYXRjaCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBnZXRQbGFjZWhvbGRlcihwcywgYmVzdE1hdGNoLm1hdGNoLCB0cnVlKSB8fCBiZXN0TWF0Y2gubWF0Y2guZGVmXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaC5nZW5lcmF0ZWRJbnB1dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXZhbGlkYXRlTWFzayhwcywgYmVzdE1hdGNoLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxsT25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdnBJbnB1dCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZXdQb3NdLmlucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZXdQb3NdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzVmFsaWQobmV3UG9zLCBjdnBJbnB1dCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJldmFsaWRhdGVNYXNrKHBvcywgdmFsaWRUZXN0LCBmcm9tU2V0VmFsaWQsIHZhbGlkYXRlZFBvcykge1xuICAgICAgICAgICAgZnVuY3Rpb24gSXNFbmNsb3NlZFN0YXRpYyhwb3MsIHZhbGlkcywgc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc01hdGNoID0gdmFsaWRzW3Bvc107XG4gICAgICAgICAgICAgICAgaWYgKHBvc01hdGNoICE9PSB1bmRlZmluZWQgJiYgKHBvc01hdGNoLm1hdGNoLmZuID09PSBudWxsICYmIHBvc01hdGNoLm1hdGNoLm9wdGlvbmFsaXR5ICE9PSB0cnVlIHx8IHBvc01hdGNoLmlucHV0ID09PSBvcHRzLnJhZGl4UG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2TWF0Y2ggPSBzZWxlY3Rpb24uYmVnaW4gPD0gcG9zIC0gMSA/IHZhbGlkc1twb3MgLSAxXSAmJiB2YWxpZHNbcG9zIC0gMV0ubWF0Y2guZm4gPT09IG51bGwgJiYgdmFsaWRzW3BvcyAtIDFdIDogdmFsaWRzW3BvcyAtIDFdLCBuZXh0TWF0Y2ggPSBzZWxlY3Rpb24uZW5kID4gcG9zICsgMSA/IHZhbGlkc1twb3MgKyAxXSAmJiB2YWxpZHNbcG9zICsgMV0ubWF0Y2guZm4gPT09IG51bGwgJiYgdmFsaWRzW3BvcyArIDFdIDogdmFsaWRzW3BvcyArIDFdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldk1hdGNoICYmIG5leHRNYXRjaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJlZ2luID0gcG9zLmJlZ2luICE9PSB1bmRlZmluZWQgPyBwb3MuYmVnaW4gOiBwb3MsIGVuZCA9IHBvcy5lbmQgIT09IHVuZGVmaW5lZCA/IHBvcy5lbmQgOiBwb3M7XG4gICAgICAgICAgICBpZiAocG9zLmJlZ2luID4gcG9zLmVuZCkge1xuICAgICAgICAgICAgICAgIGJlZ2luID0gcG9zLmVuZDtcbiAgICAgICAgICAgICAgICBlbmQgPSBwb3MuYmVnaW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWxpZGF0ZWRQb3MgPSB2YWxpZGF0ZWRQb3MgIT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlZFBvcyA6IGJlZ2luO1xuICAgICAgICAgICAgaWYgKGJlZ2luICE9PSBlbmQgfHwgb3B0cy5pbnNlcnRNb2RlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1t2YWxpZGF0ZWRQb3NdICE9PSB1bmRlZmluZWQgJiYgZnJvbVNldFZhbGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25zQ2xvbmUgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKSwgaTtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IGJlZ2luO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IGx2cDsgaSA+PSBiZWdpbjsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLm1hdGNoLm5hdGl2ZURlZiA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWxpZCA9IHRydWUsIGogPSB2YWxpZGF0ZWRQb3MsIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucywgbmVlZHNWYWxpZGF0aW9uID0gZmFsc2UsIHBvc01hdGNoID0gaiwgaSA9IGo7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkVGVzdCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB2YWxpZFRlc3QpO1xuICAgICAgICAgICAgICAgICAgICBwb3NNYXRjaCsrO1xuICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWdpbiA8IGVuZCkgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKDtpIDw9IGx2cDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gcG9zaXRpb25zQ2xvbmVbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICE9PSB1bmRlZmluZWQgJiYgKGkgPj0gZW5kIHx8IGkgPj0gYmVnaW4gJiYgdC5nZW5lcmF0ZWRJbnB1dCAhPT0gdHJ1ZSAmJiBJc0VuY2xvc2VkU3RhdGljKGksIHBvc2l0aW9uc0Nsb25lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgICAgICAgICB9KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChnZXRUZXN0KHBvc01hdGNoKS5tYXRjaC5kZWYgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZHNWYWxpZGF0aW9uID09PSBmYWxzZSAmJiBwb3NpdGlvbnNDbG9uZVtwb3NNYXRjaF0gJiYgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdLm1hdGNoLm5hdGl2ZURlZiA9PT0gdC5tYXRjaC5uYXRpdmVEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc01hdGNoXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBwb3NpdGlvbnNDbG9uZVtwb3NNYXRjaF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zTWF0Y2hdLmlucHV0ID0gdC5pbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tiYWNrUG9zaXRpb25zKHVuZGVmaW5lZCwgcG9zTWF0Y2gsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gcG9zTWF0Y2ggKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnNoaWZ0UG9zaXRpb25zICYmIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvc01hdGNoLCB0Lm1hdGNoLmRlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGlzVmFsaWQocG9zTWF0Y2gsIHQuaW5wdXQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHJlc3VsdCAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSByZXN1bHQuY2FyZXQgfHwgcmVzdWx0Lmluc2VydCA/IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgOiBwb3NNYXRjaCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRzVmFsaWRhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0LmdlbmVyYXRlZElucHV0ID09PSB0cnVlIHx8IHQuaW5wdXQgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkICYmIHBvc01hdGNoID4gZW5kICYmIGlzTWFzayhwb3NNYXRjaCwgdHJ1ZSkgJiYgKHQubWF0Y2guZm4gIT09IG51bGwgfHwgcG9zTWF0Y2ggPiBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc01hdGNoKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0VGVzdChwb3NNYXRjaCkubWF0Y2guZGVmID09IFwiXCIpIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NNYXRjaCA9IGo7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHBvc2l0aW9uc0Nsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWxpZFRlc3QpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB2YWxpZFRlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzZXRNYXNrU2V0KHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNNYXNrKHBvcywgc3RyaWN0KSB7XG4gICAgICAgICAgICB2YXIgdGVzdCA9IGdldFRlc3RUZW1wbGF0ZShwb3MpLm1hdGNoO1xuICAgICAgICAgICAgaWYgKHRlc3QuZGVmID09PSBcIlwiKSB0ZXN0ID0gZ2V0VGVzdChwb3MpLm1hdGNoO1xuICAgICAgICAgICAgaWYgKHRlc3QuZm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0LmZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0cmljdCAhPT0gdHJ1ZSAmJiBwb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgIHZhciB0ZXN0cyA9IGdldFRlc3RzKHBvcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RzLmxlbmd0aCA+IDEgKyAodGVzdHNbdGVzdHMubGVuZ3RoIC0gMV0ubWF0Y2guZGVmID09PSBcIlwiID8gMSA6IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNlZWtOZXh0KHBvcywgbmV3QmxvY2spIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHBvcyArIDE7XG4gICAgICAgICAgICB3aGlsZSAoZ2V0VGVzdChwb3NpdGlvbikubWF0Y2guZGVmICE9PSBcIlwiICYmIChuZXdCbG9jayA9PT0gdHJ1ZSAmJiAoZ2V0VGVzdChwb3NpdGlvbikubWF0Y2gubmV3QmxvY2tNYXJrZXIgIT09IHRydWUgfHwgIWlzTWFzayhwb3NpdGlvbikpIHx8IG5ld0Jsb2NrICE9PSB0cnVlICYmICFpc01hc2socG9zaXRpb24pKSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2Vla1ByZXZpb3VzKHBvcywgbmV3QmxvY2spIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHBvcywgdGVzdHM7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPD0gMCkgcmV0dXJuIDA7XG4gICAgICAgICAgICB3aGlsZSAoLS1wb3NpdGlvbiA+IDAgJiYgKG5ld0Jsb2NrID09PSB0cnVlICYmIGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8IG5ld0Jsb2NrICE9PSB0cnVlICYmICFpc01hc2socG9zaXRpb24pICYmICh0ZXN0cyA9IGdldFRlc3RzKHBvc2l0aW9uKSwgXG4gICAgICAgICAgICB0ZXN0cy5sZW5ndGggPCAyIHx8IHRlc3RzLmxlbmd0aCA9PT0gMiAmJiB0ZXN0c1sxXS5tYXRjaC5kZWYgPT09IFwiXCIpKSkge31cbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCBjYXJldFBvcywgZXZlbnQsIHRyaWdnZXJFdmVudHMpIHtcbiAgICAgICAgICAgIGlmIChldmVudCAmJiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dG1hc2ssIGV2ZW50LCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gdHJ1ZSA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcmVzdWx0LmJ1ZmZlciB8fCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gZ2V0QnVmZmVyKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJldFBvcyAhPT0gdW5kZWZpbmVkKSBjYXJldFBvcyA9IHJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LmNhcmV0IDogY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGJ1ZmZlci5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgIT09IHVuZGVmaW5lZCAmJiAoZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC50eXBlICE9PSBcImJsdXJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgcmVuZGVyQ29sb3JNYXNrKGlucHV0LCBjYXJldFBvcywgYnVmZmVyLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRyaWdnZXJFdmVudHMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQoaW5wdXQpLCBucHRWYWwgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHNraXBJbnB1dEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChucHRWYWwgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2xlYXJlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDb21wbGV0ZShidWZmZXIpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCwgcmV0dXJuUEwpIHtcbiAgICAgICAgICAgIHRlc3QgPSB0ZXN0IHx8IGdldFRlc3QocG9zKS5tYXRjaDtcbiAgICAgICAgICAgIGlmICh0ZXN0LnBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQgfHwgcmV0dXJuUEwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0Z1bmN0aW9uKHRlc3QucGxhY2Vob2xkZXIpID8gdGVzdC5wbGFjZWhvbGRlcihvcHRzKSA6IHRlc3QucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRlc3QuZm4gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocG9zID4gLTEgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwb3MpLCBzdGF0aWNBbHRlcm5hdGlvbnMgPSBbXSwgcHJldlRlc3Q7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0cy5sZW5ndGggPiAxICsgKHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiA9PT0gXCJcIiA/IDEgOiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbGl0eSAhPT0gdHJ1ZSAmJiB0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgIT09IHRydWUgJiYgKHRlc3RzW2ldLm1hdGNoLmZuID09PSBudWxsIHx8IChwcmV2VGVzdCA9PT0gdW5kZWZpbmVkIHx8IHRlc3RzW2ldLm1hdGNoLmZuLnRlc3QocHJldlRlc3QubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgdHJ1ZSwgb3B0cykgIT09IGZhbHNlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQWx0ZXJuYXRpb25zLnB1c2godGVzdHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbaV0ubWF0Y2guZm4gPT09IG51bGwpIHByZXZUZXN0ID0gdGVzdHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0aWNBbHRlcm5hdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9bMC05YS1iQS1aXS8udGVzdChzdGF0aWNBbHRlcm5hdGlvbnNbMF0ubWF0Y2guZGVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3QuZGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBIYW5kbGVOYXRpdmVQbGFjZWhvbGRlcihucHQsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobnB0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gdmFsdWUgJiYgKG5wdC5wbGFjZWhvbGRlciAhPT0gdmFsdWUgfHwgbnB0LnBsYWNlaG9sZGVyID09PSBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKSwgbnB0VmFsdWUgPSBucHQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnB0VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsdnAgPT09IC0xICYmIG5wdFZhbHVlID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobHZwICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihucHQsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5wdC5wbGFjZWhvbGRlciAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBucHQucGxhY2Vob2xkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAobnB0LnBsYWNlaG9sZGVyID09PSBcIlwiKSBucHQucmVtb3ZlQXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEV2ZW50UnVsZXIgPSB7XG4gICAgICAgICAgICBvbjogZnVuY3Rpb24oaW5wdXQsIGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LmlucHV0bWFzayA9PT0gdW5kZWZpbmVkICYmIHRoaXMubm9kZU5hbWUgIT09IFwiRk9STVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1PcHRzID0gJC5kYXRhKHRoYXQsIFwiX2lucHV0bWFza19vcHRzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltT3B0cykgbmV3IElucHV0bWFzayhpbU9wdHMpLm1hc2sodGhhdCk7IGVsc2UgRXZlbnRSdWxlci5vZmYodGhhdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50eXBlICE9PSBcInNldHZhbHVlXCIgJiYgdGhpcy5ub2RlTmFtZSAhPT0gXCJGT1JNXCIgJiYgKHRoYXQuZGlzYWJsZWQgfHwgdGhhdC5yZWFkT25seSAmJiAhKGUudHlwZSA9PT0gXCJrZXlkb3duXCIgJiYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IDY3KSB8fCBvcHRzLnRhYlRocm91Z2ggPT09IGZhbHNlICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuVEFCKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwSW5wdXRFdmVudCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQodGhhdCwgdGhhdC5pbnB1dG1hc2suY2FyZXRQb3MsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwS2V5UHJlc3NFdmVudCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwS2V5UHJlc3NFdmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsaWNrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGllbW9iaWxlIHx8IGlwaG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0dXJuVmFsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdO1xuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXS5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5mb3JtICE9PSBudWxsKSAkKGlucHV0LmZvcm0pLm9uKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQoaW5wdXQpLm9uKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvZmY6IGZ1bmN0aW9uKGlucHV0LCBldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgJiYgaW5wdXQuaW5wdXRtYXNrLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzW2V2ZW50XSA9IGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnRdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZXZlbnRzLCBmdW5jdGlvbihldmVudE5hbWUsIGV2QXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZXZBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldiA9IGV2QXJyLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoZXZlbnROYW1lLCBbIFwic3VibWl0XCIsIFwicmVzZXRcIiBdKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmZvcm0gIT09IG51bGwpICQoaW5wdXQuZm9ybSkub2ZmKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoaW5wdXQpLm9mZihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBFdmVudEhhbmRsZXJzID0ge1xuICAgICAgICAgICAga2V5ZG93bkV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLmtleUNvZGUsIHBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFIHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSB8fCBpcGhvbmUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFX1NBRkFSSSB8fCBlLmN0cmxLZXkgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuWCAmJiAhaXNJbnB1dEV2ZW50U3VwcG9ydGVkKFwiY3V0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKHRydWUpLCBnZXRNYXNrU2V0KCkucCwgZSwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVORCB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5QQUdFX0RPV04pIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiBjYXJldFBvcywgY2FyZXRQb3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuSE9NRSAmJiAhZS5zaGlmdEtleSB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5QQUdFX1VQKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiAwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChvcHRzLnVuZG9PbkVzY2FwZSAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FU0NBUEUgfHwgayA9PT0gOTAgJiYgZS5jdHJsS2V5KSAmJiBlLmFsdEtleSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbChpbnB1dCwgdHJ1ZSwgZmFsc2UsIHVuZG9WYWx1ZS5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2xpY2tcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5JTlNFUlQgJiYgIShlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnNlcnRNb2RlID0gIW9wdHMuaW5zZXJ0TW9kZTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiaW0taW5zZXJ0XCIsIG9wdHMuaW5zZXJ0TW9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnRhYlRocm91Z2ggPT09IHRydWUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuVEFCKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0VGVzdChwb3MuYmVnaW4pLm1hdGNoLmZuID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gc2Vla05leHQocG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9IHNlZWtQcmV2aW91cyhwb3MuZW5kLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gc2Vla05leHQocG9zLmJlZ2luLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MuZW5kIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpIHBvcy5lbmQtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmJlZ2luIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBwb3MuYmVnaW4sIHBvcy5lbmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMub25LZXlEb3duLmNhbGwodGhpcywgZSwgZ2V0QnVmZmVyKCksIGNhcmV0KGlucHV0KS5iZWdpbiwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWdub3JhYmxlID0gJC5pbkFycmF5KGssIG9wdHMuaWdub3JhYmxlcykgIT09IC0xO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtleXByZXNzRXZlbnQ6IGZ1bmN0aW9uKGUsIGNoZWNrdmFsLCB3cml0ZU91dCwgc3RyaWN0LCBuZHgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUud2hpY2ggfHwgZS5jaGFyQ29kZSB8fCBlLmtleUNvZGU7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrdmFsICE9PSB0cnVlICYmICghKGUuY3RybEtleSAmJiBlLmFsdEtleSkgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgaWdub3JhYmxlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVOVEVSICYmIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IDQ2ICYmIGUuc2hpZnRLZXkgPT09IGZhbHNlICYmIG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIikgayA9IG9wdHMucmFkaXhQb2ludC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGNoZWNrdmFsID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBuZHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBuZHhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBjYXJldChpbnB1dCksIGZvcndhcmRQb3NpdGlvbiwgYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoayksIG9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5fcmFkaXhEYW5jZSAmJiBvcHRzLm51bWVyaWNJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGdldEJ1ZmZlcigpLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50LmNoYXJBdCgwKSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MuYmVnaW4gPD0gY2FyZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IG9wdHMucmFkaXhQb2ludC5jaGFyQ29kZUF0KDApKSBvZmZzZXQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS53cml0ZU91dEJ1ZmZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsUmVzdWx0ID0gaXNWYWxpZChwb3MsIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsUmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkUG9zaXRpb24gPSB2YWxSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHZhbFJlc3VsdC5jYXJldCA6IHNlZWtOZXh0KHZhbFJlc3VsdC5wb3MuYmVnaW4gPyB2YWxSZXN1bHQucG9zLmJlZ2luIDogdmFsUmVzdWx0LnBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBmb3J3YXJkUG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkUG9zaXRpb24gPSAob3B0cy5udW1lcmljSW5wdXQgJiYgdmFsUmVzdWx0LmNhcmV0ID09PSB1bmRlZmluZWQgPyBzZWVrUHJldmlvdXMoZm9yd2FyZFBvc2l0aW9uKSA6IGZvcndhcmRQb3NpdGlvbikgKyBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod3JpdGVPdXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5vbktleVZhbGlkYXRpb24uY2FsbChpbnB1dCwgaywgdmFsUmVzdWx0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLndyaXRlT3V0QnVmZmVyICYmIHZhbFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCBmb3J3YXJkUG9zaXRpb24sIGUsIGNoZWNrdmFsICE9PSB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2t2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsUmVzdWx0ICE9PSBmYWxzZSkgdmFsUmVzdWx0LmZvcndhcmRQb3NpdGlvbiA9IGZvcndhcmRQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3RlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBldiA9IGUub3JpZ2luYWxFdmVudCB8fCBlLCAkaW5wdXQgPSAkKGlucHV0KSwgaW5wdXRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSksIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpLCB0ZW1wVmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGlzUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBWYWx1ZSA9IGNhcmV0UG9zLmVuZDtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MuZW5kID0gY2FyZXRQb3MuYmVnaW47XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zLmJlZ2luID0gdGVtcFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVCZWZvcmVDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgdmFsdWVBZnRlckNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoY2FyZXRQb3MuZW5kLCBpbnB1dFZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlQmVmb3JlQ2FyZXQgPT09IChpc1JUTCA/IGdldEJ1ZmZlclRlbXBsYXRlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyVGVtcGxhdGUoKSkuc2xpY2UoMCwgY2FyZXRQb3MuYmVnaW4pLmpvaW4oXCJcIikpIHZhbHVlQmVmb3JlQ2FyZXQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUFmdGVyQ2FyZXQgPT09IChpc1JUTCA/IGdldEJ1ZmZlclRlbXBsYXRlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyVGVtcGxhdGUoKSkuc2xpY2UoY2FyZXRQb3MuZW5kKS5qb2luKFwiXCIpKSB2YWx1ZUFmdGVyQ2FyZXQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuY2xpcGJvYXJkRGF0YSAmJiB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSB2YWx1ZUJlZm9yZUNhcmV0ICsgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcIlRleHRcIikgKyB2YWx1ZUFmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldi5jbGlwYm9hcmREYXRhICYmIGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgKyB2YWx1ZUFmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVQYXN0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFzdGVWYWx1ZSA9IG9wdHMub25CZWZvcmVQYXN0ZS5jYWxsKGlucHV0bWFzaywgaW5wdXRWYWx1ZSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXN0ZVZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhc3RlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCBmYWxzZSwgZmFsc2UsIHBhc3RlVmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlucHV0RmFsbEJhY2tFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJhZGl4UG9pbnRIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZS5jaGFyQXQoY2FyZXRQb3MuYmVnaW4gLSAxKSA9PT0gXCIuXCIgJiYgb3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWVbY2FyZXRQb3MuYmVnaW4gLSAxXSA9IG9wdHMucmFkaXhQb2ludC5jaGFyQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpZU1vYmlsZUhhbmRsZXIoaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZW1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0Q2hhciA9IGlucHV0VmFsdWUucmVwbGFjZShnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dENoYXIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl2ID0gaW5wdXRWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdi5zcGxpY2UoY2FyZXRQb3MuYmVnaW4sIDAsIGlucHV0Q2hhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGl2LmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIGlucHV0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgIT09IGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gcmFkaXhQb2ludEhhbmRsZXIoaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGllTW9iaWxlSGFuZGxlcihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAhPT0gaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIG9mZnNldCA9ICFvcHRzLm51bWVyaWNJbnB1dCAmJiBpbnB1dFZhbHVlLmxlbmd0aCA+IGJ1ZmZlci5sZW5ndGggPyAtMSA6IDAsIGZyb250UGFydCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgYmFja1BhcnQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5iZWdpbiksIGZyb250QnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4gKyBvZmZzZXQpLCBiYWNrQnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoY2FyZXRQb3MuYmVnaW4gKyBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGNhcmV0UG9zLCBlbnRyaWVzID0gXCJcIiwgaXNFbnRyeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyb250UGFydCAhPT0gZnJvbnRCdWZmZXJQYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZwbCA9IChpc0VudHJ5ID0gZnJvbnRQYXJ0Lmxlbmd0aCA+PSBmcm9udEJ1ZmZlclBhcnQubGVuZ3RoKSA/IGZyb250UGFydC5sZW5ndGggOiBmcm9udEJ1ZmZlclBhcnQubGVuZ3RoLCBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGZyb250UGFydC5jaGFyQXQoaSkgPT09IGZyb250QnVmZmVyUGFydC5jaGFyQXQoaSkgJiYgaSA8IGZwbDsgaSsrKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luID0gaSAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyArPSBmcm9udFBhcnQuc2xpY2UoaSwgc2VsZWN0aW9uLmVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tQYXJ0ICE9PSBiYWNrQnVmZmVyUGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWNrUGFydC5sZW5ndGggPiBiYWNrQnVmZmVyUGFydC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyArPSBiYWNrUGFydC5zbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja1BhcnQubGVuZ3RoIDwgYmFja0J1ZmZlclBhcnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZW5kICs9IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCAtIGJhY2tQYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFbnRyeSAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIgJiYgYmFja1BhcnQgPT09IFwiXCIgJiYgZnJvbnRQYXJ0LmNoYXJBdChzZWxlY3Rpb24uYmVnaW4gKyBvZmZzZXQgLSAxKSA9PT0gb3B0cy5yYWRpeFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyA9IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBzZWxlY3Rpb24uYmVnaW4gKyBvZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBzZWxlY3Rpb24uZW5kICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZW50cmllcy5zcGxpdChcIlwiKSwgZnVuY3Rpb24obmR4LCBlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGVudHJ5LmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uLmJlZ2luID09PSBzZWxlY3Rpb24uZW5kIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYmVnaW4gPSBzZWVrUHJldmlvdXMoc2VsZWN0aW9uLmJlZ2luICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24uYmVnaW4gPT09IHNlbGVjdGlvbi5lbmQgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgc2VsZWN0aW9uLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWxlY3Rpb24uYmVnaW4sIHNlbGVjdGlvbi5lbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlkb3duID0gbmV3ICQuRXZlbnQoXCJrZXlkb3duXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWRvd24ua2V5Q29kZSA9IG9wdHMubnVtZXJpY0lucHV0ID8gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFIDogSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsIGtleWRvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJlZm9yZUlucHV0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5pbnB1dFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5zZXJ0VGV4dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGUuZGF0YS5zcGxpdChcIlwiKSwgZnVuY3Rpb24obmR4LCBlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9IG5ldyAkLkV2ZW50KFwia2V5cHJlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSBlbnRyeS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZG93biA9IG5ldyAkLkV2ZW50KFwia2V5ZG93blwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWRvd24ua2V5Q29kZSA9IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsIGtleWRvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVDb250ZW50Rm9yd2FyZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleWRvd24gPSBuZXcgJC5FdmVudChcImtleWRvd25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEU7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0VmFsdWVFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIHZhbHVlID0gZSAmJiBlLmRldGFpbCA/IGUuZGV0YWlsWzBdIDogYXJndW1lbnRzWzFdLCB2YWx1ZSA9IHZhbHVlIHx8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykpIHZhbHVlID0gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIHZhbHVlLCBvcHRzKSB8fCB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsIHRydWUsIGZhbHNlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgb3B0cy5jbGVhckluY29tcGxldGUpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvY3VzRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBucHRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5zaG93TWFza09uRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5wdFZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb3VzZUVudGVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5wb3NpdGlvbkNhcmV0T25UYWIgPT09IHRydWUgJiYgbW91c2VFbnRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50LmFwcGx5KGlucHV0LCBbIGUsIHRydWUgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW91c2VsZWF2ZUV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBtb3VzZUVudGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIG9yaWdpbmFsUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGlja0V2ZW50OiBmdW5jdGlvbihlLCB0YWJiZWQpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1JhZGl4Rm9jdXMoY2xpY2tQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2cHNbY2xpY2tQb3NdID09PSB1bmRlZmluZWQgfHwgdnBzW2NsaWNrUG9zXS5pbnB1dCA9PT0gZ2V0UGxhY2Vob2xkZXIoY2xpY2tQb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrUG9zIDwgc2Vla05leHQoLTEpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBnZXRCdWZmZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2cCBpbiB2cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvcyA8IHZwICYmIHZwc1t2cF0uaW5wdXQgIT09IGdldFBsYWNlaG9sZGVyKHZwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ2FyZXQgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2FyZXQuZW5kID0gc2VsZWN0ZWRDYXJldC5iZWdpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENhcmV0LmJlZ2luID0gc2VsZWN0ZWRDYXJldC5lbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ2FyZXQuYmVnaW4gPT09IHNlbGVjdGVkQ2FyZXQuZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm9uZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgMCwgZ2V0QnVmZmVyKCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpZ25vcmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyYWRpeEZvY3VzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb1JhZGl4Rm9jdXMoc2VsZWN0ZWRDYXJldC5iZWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIG9wdHMubnVtZXJpY0lucHV0ID8gc2Vla05leHQocmFkaXhQb3MpIDogcmFkaXhQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsaWNrUG9zaXRpb24gPSBzZWxlY3RlZENhcmV0LmJlZ2luLCBsdmNsaWNrUG9zaXRpb24gPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbGlja1Bvc2l0aW9uLCB0cnVlKSwgbGFzdFBvc2l0aW9uID0gc2Vla05leHQobHZjbGlja1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrUG9zaXRpb24gPCBsYXN0UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCAhaXNNYXNrKGNsaWNrUG9zaXRpb24sIHRydWUpICYmICFpc01hc2soY2xpY2tQb3NpdGlvbiAtIDEsIHRydWUpID8gc2Vla05leHQoY2xpY2tQb3NpdGlvbikgOiBjbGlja1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZjbGlja1Bvc2l0aW9uXSwgdHQgPSBnZXRUZXN0VGVtcGxhdGUobGFzdFBvc2l0aW9uLCBsdnAgPyBsdnAubWF0Y2gubG9jYXRvciA6IHVuZGVmaW5lZCwgbHZwKSwgcGxhY2Vob2xkZXIgPSBnZXRQbGFjZWhvbGRlcihsYXN0UG9zaXRpb24sIHR0Lm1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlciAhPT0gXCJcIiAmJiBnZXRCdWZmZXIoKVtsYXN0UG9zaXRpb25dICE9PSBwbGFjZWhvbGRlciAmJiB0dC5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgIT09IHRydWUgJiYgdHQubWF0Y2gubmV3QmxvY2tNYXJrZXIgIT09IHRydWUgfHwgIWlzTWFzayhsYXN0UG9zaXRpb24sIG9wdHMua2VlcFN0YXRpYykgJiYgdHQubWF0Y2guZGVmID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdQb3MgPSBzZWVrTmV4dChsYXN0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1Bvc2l0aW9uID49IG5ld1BvcyB8fCBjbGlja1Bvc2l0aW9uID09PSBsYXN0UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBvc2l0aW9uID0gbmV3UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBsYXN0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGN1dEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIHBvcyA9IGNhcmV0KGlucHV0KSwgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xpcGJvYXJkRGF0YSA9IHdpbmRvdy5jbGlwYm9hcmREYXRhIHx8IGV2LmNsaXBib2FyZERhdGEsIGNsaXBEYXRhID0gaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZShwb3MuZW5kLCBwb3MuYmVnaW4pIDogZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmJlZ2luLCBwb3MuZW5kKTtcbiAgICAgICAgICAgICAgICBjbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0XCIsIGlzUlRMID8gY2xpcERhdGEucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBjbGlwRGF0YS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZXhlY0NvbW1hbmQpIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVSZW1vdmUoaW5wdXQsIElucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgcG9zKTtcbiAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIGdldE1hc2tTZXQoKS5wLCBlLCB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsdXJFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICBIYW5kbGVOYXRpdmVQbGFjZWhvbGRlcihpbnB1dCwgb3JpZ2luYWxQbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBucHRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSwgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5wdFZhbHVlICE9PSBcIlwiIHx8IGNvbG9yTWFzayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRMYXN0VmFsaWRQb3NpdGlvbigpID09PSAtMSAmJiBucHRWYWx1ZSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImluY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJJbmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCB1bmRlZmluZWQsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW91c2VlbnRlckV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBtb3VzZUVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQgJiYgb3B0cy5zaG93TWFza09uSG92ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIChpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWJtaXRFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmICh1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGdldExhc3RWYWxpZFBvc2l0aW9uKCkgPT09IC0xICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJJbmNvbXBsZXRlICYmIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZW1vdmVNYXNrT25TdWJtaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChlbC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGVsLCBnZXRCdWZmZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNldEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tWYWwoaW5wdXQsIHdyaXRlT3V0LCBzdHJpY3QsIG5wdHZsLCBpbml0aWF0aW5nRXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dG1hc2sgPSB0aGlzIHx8IGlucHV0LmlucHV0bWFzaywgaW5wdXRWYWx1ZSA9IG5wdHZsLnNsaWNlKCksIGNoYXJDb2RlcyA9IFwiXCIsIGluaXRpYWxOZHggPSAtMSwgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNUZW1wbGF0ZU1hdGNoKG5keCwgY2hhckNvZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJDb2RlTmR4ID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIDAsIGZhbHNlKS5zbGljZShuZHgsIHNlZWtOZXh0KG5keCkpLmpvaW4oXCJcIikucmVwbGFjZSgvJy9nLCBcIlwiKS5pbmRleE9mKGNoYXJDb2Rlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJDb2RlTmR4ICE9PSAtMSAmJiAhaXNNYXNrKG5keCkgJiYgKGdldFRlc3QobmR4KS5tYXRjaC5uYXRpdmVEZWYgPT09IGNoYXJDb2Rlcy5jaGFyQXQoMCkgfHwgZ2V0VGVzdChuZHgpLm1hdGNoLmZuID09PSBudWxsICYmIGdldFRlc3QobmR4KS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiJ1wiICsgY2hhckNvZGVzLmNoYXJBdCgwKSB8fCBnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBcIiBcIiAmJiAoZ2V0VGVzdChuZHggKyAxKS5tYXRjaC5uYXRpdmVEZWYgPT09IGNoYXJDb2Rlcy5jaGFyQXQoMCkgfHwgZ2V0VGVzdChuZHggKyAxKS5tYXRjaC5mbiA9PT0gbnVsbCAmJiBnZXRUZXN0KG5keCArIDEpLm1hdGNoLm5hdGl2ZURlZiA9PT0gXCInXCIgKyBjaGFyQ29kZXMuY2hhckF0KDApKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmIG9wdHMuYXV0b1VubWFzayAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0aWNJbnB1dCA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoMCwgc2Vla05leHQoLTEpKS5qb2luKFwiXCIpLCBtYXRjaGVzID0gaW5wdXRWYWx1ZS5qb2luKFwiXCIpLm1hdGNoKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgoc3RhdGljSW5wdXQpLCBcImdcIikpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlLnNwbGljZSgwLCBtYXRjaGVzLmxlbmd0aCAqIHN0YXRpY0lucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSBzZWVrTmV4dChpbml0aWFsTmR4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSBzZWVrTmV4dChpbml0aWFsTmR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbml0aWFsTmR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQoaW5pdGlhbE5keCk7XG4gICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgZ2V0TWFza1NldCgpLnAgPSBpbml0aWFsTmR4O1xuICAgICAgICAgICAgaW5wdXRtYXNrLmNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgIGJlZ2luOiBpbml0aWFsTmR4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJC5lYWNoKGlucHV0VmFsdWUsIGZ1bmN0aW9uKG5keCwgY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW25keF0gPT09IHVuZGVmaW5lZCAmJiBpbnB1dFZhbHVlW25keF0gPT09IGdldFBsYWNlaG9sZGVyKG5keCkgJiYgaXNNYXNrKG5keCwgdHJ1ZSkgJiYgaXNWYWxpZChuZHgsIGlucHV0VmFsdWVbbmR4XSwgdHJ1ZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnArKztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9IG5ldyAkLkV2ZW50KFwiX2NoZWNrdmFsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSBjaGFyQ29kZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGVzICs9IGNoYXJDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVNYXRjaChpbml0aWFsTmR4LCBjaGFyQ29kZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCB0cnVlLCBmYWxzZSwgc3RyaWN0LCBpbnB1dG1hc2suY2FyZXRQb3MuYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IGlucHV0bWFzay5jYXJldFBvcy5iZWdpbiArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlcyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsIHRydWUsIGZhbHNlLCBzdHJpY3QsIGx2cCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKHVuZGVmaW5lZCwgZ2V0QnVmZmVyKCksIHJlc3VsdC5mb3J3YXJkUG9zaXRpb24sIGtleXByZXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRtYXNrLmNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogcmVzdWx0LmZvcndhcmRQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiByZXN1bHQuZm9yd2FyZFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHdyaXRlT3V0KSB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHJlc3VsdCA/IHJlc3VsdC5mb3J3YXJkUG9zaXRpb24gOiB1bmRlZmluZWQsIGluaXRpYXRpbmdFdmVudCB8fCBuZXcgJC5FdmVudChcImNoZWNrdmFsXCIpLCBpbml0aWF0aW5nRXZlbnQgJiYgaW5pdGlhdGluZ0V2ZW50LnR5cGUgPT09IFwiaW5wdXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW5tYXNrZWR2YWx1ZShpbnB1dCkge1xuICAgICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzayAmJiBpbnB1dC5pbnB1dG1hc2sucmVmcmVzaFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMuc2V0VmFsdWVFdmVudC5jYWxsKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdW1WYWx1ZSA9IFtdLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICBmb3IgKHZhciBwbmR4IGluIHZwcykge1xuICAgICAgICAgICAgICAgIGlmICh2cHNbcG5keF0ubWF0Y2ggJiYgdnBzW3BuZHhdLm1hdGNoLmZuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdW1WYWx1ZS5wdXNoKHZwc1twbmR4XS5pbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVubWFza2VkVmFsdWUgPSB1bVZhbHVlLmxlbmd0aCA9PT0gMCA/IFwiXCIgOiAoaXNSVEwgPyB1bVZhbHVlLnJldmVyc2UoKSA6IHVtVmFsdWUpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25Vbk1hc2spKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlclZhbHVlID0gKGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkgOiBnZXRCdWZmZXIoKSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB1bm1hc2tlZFZhbHVlID0gb3B0cy5vblVuTWFzay5jYWxsKGlucHV0bWFzaywgYnVmZmVyVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2FyZXQoaW5wdXQsIGJlZ2luLCBlbmQsIG5vdHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiB0cmFuc2xhdGVQb3NpdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSVEwgJiYgdHlwZW9mIHBvcyA9PT0gXCJudW1iZXJcIiAmJiAoIW9wdHMuZ3JlZWR5IHx8IG9wdHMucGxhY2Vob2xkZXIgIT09IFwiXCIpICYmIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggLSBwb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmFuZ2U7XG4gICAgICAgICAgICBpZiAoYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGlzUlRMID8gYmVnaW5bMF0gOiBiZWdpblsxXTtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBpc1JUTCA/IGJlZ2luWzFdIDogYmVnaW5bMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChiZWdpbi5iZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGlzUlRMID8gYmVnaW4uYmVnaW4gOiBiZWdpbi5lbmQ7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gaXNSVEwgPyBiZWdpbi5lbmQgOiBiZWdpbi5iZWdpbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IG5vdHJhbnNsYXRlID8gYmVnaW4gOiB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbik7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IG5vdHJhbnNsYXRlID8gZW5kIDogdHJhbnNsYXRlUG9zaXRpb24oZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdHlwZW9mIGVuZCA9PSBcIm51bWJlclwiID8gZW5kIDogYmVnaW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxDYWxjID0gcGFyc2VJbnQoKChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZSA/IChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCwgbnVsbCkgOiBpbnB1dC5jdXJyZW50U3R5bGUpLmZvbnRTaXplKSAqIGVuZDtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2Nyb2xsTGVmdCA9IHNjcm9sbENhbGMgPiBpbnB1dC5zY3JvbGxXaWR0aCA/IHNjcm9sbENhbGMgOiAwO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suY2FyZXRQb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IGJlZ2luO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZmlyc3RDaGlsZCA9PT0gdW5kZWZpbmVkIHx8IGlucHV0LmZpcnN0Q2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKHRleHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoaW5wdXQuZmlyc3RDaGlsZCwgYmVnaW4gPCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoID8gYmVnaW4gOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQoaW5wdXQuZmlyc3RDaGlsZCwgZW5kIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGVuZCA6IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gaW5wdXQuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZChcImNoYXJhY3RlclwiLCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCBiZWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJDb2xvck1hc2soaW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJzZWxlY3Rpb25TdGFydFwiIGluIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gaW5wdXQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGlucHV0LnNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUgPT09IGlucHV0IHx8IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID09PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSByYW5nZS5zdGFydE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHJhbmdlLmVuZE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IDAgLSByYW5nZS5kdXBsaWNhdGUoKS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgLWlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBiZWdpbiArIHJhbmdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbjogbm90cmFuc2xhdGUgPyBiZWdpbiA6IHRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBub3RyYW5zbGF0ZSA/IGVuZCA6IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKHJldHVybkRlZmluaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgdHJ1ZSwgdHJ1ZSksIGJsID0gYnVmZmVyLmxlbmd0aCwgcG9zLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBwb3NpdGlvbnMgPSB7fSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5keEludGx6ciA9IGx2VGVzdCAhPT0gdW5kZWZpbmVkID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHVuZGVmaW5lZCwgdGVzdFBvcztcbiAgICAgICAgICAgIGZvciAocG9zID0gbHZwICsgMTsgcG9zIDwgYnVmZmVyLmxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgICAgICAgICB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKTtcbiAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbcG9zXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0ZXN0UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsdlRlc3RBbHQgPSBsdlRlc3QgJiYgbHZUZXN0LmFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyBsdlRlc3QubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgZm9yIChwb3MgPSBibCAtIDE7IHBvcyA+IGx2cDsgcG9zLS0pIHtcbiAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcG9zaXRpb25zW3Bvc107XG4gICAgICAgICAgICAgICAgaWYgKCh0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsaXR5IHx8IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmIHRlc3RQb3MubWF0Y2gubmV3QmxvY2tNYXJrZXIgfHwgbHZUZXN0QWx0ICYmIChsdlRlc3RBbHQgIT09IHBvc2l0aW9uc1twb3NdLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiB0ZXN0UG9zLm1hdGNoLmZuICE9IG51bGwgfHwgdGVzdFBvcy5tYXRjaC5mbiA9PT0gbnVsbCAmJiB0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiBjaGVja0FsdGVybmF0aW9uTWF0Y2godGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksIGx2VGVzdEFsdC50b1N0cmluZygpLnNwbGl0KFwiLFwiKSkgJiYgZ2V0VGVzdHMocG9zKVswXS5kZWYgIT09IFwiXCIpKSAmJiBidWZmZXJbcG9zXSA9PT0gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0UG9zLm1hdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICBibC0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5EZWZpbml0aW9uID8ge1xuICAgICAgICAgICAgICAgIGw6IGJsLFxuICAgICAgICAgICAgICAgIGRlZjogcG9zaXRpb25zW2JsXSA/IHBvc2l0aW9uc1tibF0ubWF0Y2ggOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0gOiBibDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpIHtcbiAgICAgICAgICAgIGJ1ZmZlci5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIDAsIHRydWUsIHVuZGVmaW5lZCwgdHJ1ZSksIGxtbnQsIHZhbGlkUG9zO1xuICAgICAgICAgICAgd2hpbGUgKGxtbnQgPSB0ZW1wbGF0ZS5zaGlmdCgpLCBsbW50ICE9PSB1bmRlZmluZWQpIGJ1ZmZlci5wdXNoKGxtbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0NvbXBsZXRlKGJ1ZmZlcikge1xuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmlzQ29tcGxldGUpKSByZXR1cm4gb3B0cy5pc0NvbXBsZXRlKGJ1ZmZlciwgb3B0cyk7XG4gICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgPT09IFwiKlwiKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gZmFsc2UsIGxycCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKHRydWUpLCBhbWwgPSBzZWVrUHJldmlvdXMobHJwLmwpO1xuICAgICAgICAgICAgaWYgKGxycC5kZWYgPT09IHVuZGVmaW5lZCB8fCBscnAuZGVmLm5ld0Jsb2NrTWFya2VyIHx8IGxycC5kZWYub3B0aW9uYWxpdHkgfHwgbHJwLmRlZi5vcHRpb25hbFF1YW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gYW1sOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUoaSkubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0LmZuICE9PSBudWxsICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSA9PT0gdW5kZWZpbmVkICYmIHRlc3Qub3B0aW9uYWxpdHkgIT09IHRydWUgJiYgdGVzdC5vcHRpb25hbFF1YW50aWZpZXIgIT09IHRydWUgfHwgdGVzdC5mbiA9PT0gbnVsbCAmJiBidWZmZXJbaV0gIT09IGdldFBsYWNlaG9sZGVyKGksIHRlc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MsIHN0cmljdCwgZnJvbUlzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCB8fCBpc1JUTCkge1xuICAgICAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UpIHtcbiAgICAgICAgICAgICAgICAgICAgayA9IElucHV0bWFzay5rZXlDb2RlLkRFTEVURTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSkge1xuICAgICAgICAgICAgICAgICAgICBrID0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmQgPSBwb3MuZW5kO1xuICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gcG9zLmJlZ2luO1xuICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBwZW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgJiYgcG9zLmVuZCAtIHBvcy5iZWdpbiA8IDEpIHtcbiAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCA9PT0gb3B0cy5ncm91cFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4tLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSAmJiBwb3MuYmVnaW4gPT09IHBvcy5lbmQpIHtcbiAgICAgICAgICAgICAgICBwb3MuZW5kID0gaXNNYXNrKHBvcy5lbmQsIHRydWUpICYmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmVuZF0gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5lbmRdLmlucHV0ICE9PSBvcHRzLnJhZGl4UG9pbnQpID8gcG9zLmVuZCArIDEgOiBzZWVrTmV4dChwb3MuZW5kKSArIDE7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dICE9PSB1bmRlZmluZWQgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0uaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldmFsaWRhdGVNYXNrKHBvcyk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICE9PSB0cnVlICYmIG9wdHMua2VlcFN0YXRpYyAhPT0gZmFsc2UgfHwgb3B0cy5yZWdleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhbHRlcm5hdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gcmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyByZXN1bHQuY2FyZXQgOiByZXN1bHQucG9zID8gc2Vla05leHQocmVzdWx0LnBvcy5iZWdpbiA/IHJlc3VsdC5wb3MuYmVnaW4gOiByZXN1bHQucG9zKSA6IGdldExhc3RWYWxpZFBvc2l0aW9uKC0xLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgIT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSB8fCBwb3MuYmVnaW4gPiBuZXdQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9PSBuZXdQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24ocG9zLmJlZ2luLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChsdnAgPCBwb3MuYmVnaW4gfHwgcG9zLmJlZ2luID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQobHZwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBwb3MuYmVnaW47XG4gICAgICAgICAgICAgICAgaWYgKGZyb21Jc1ZhbGlkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChnZXRNYXNrU2V0KCkucCA8IGx2cCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZ2V0TWFza1NldCgpLnBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbG9yTWFzayhpbnB1dCkge1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSAoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoaW5wdXQsIG51bGwpO1xuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENhcmV0UG9zKGNsaWVudHgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLCBjYXJldFBvcztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzdHlsZSBpbiBjb21wdXRlZFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihzdHlsZSkgJiYgc3R5bGUuaW5kZXhPZihcImZvbnRcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0eWxlW3N0eWxlXSA9IGNvbXB1dGVkU3R5bGVbc3R5bGVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUuc3R5bGUudGV4dFRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUudGV4dFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBjb21wdXRlZFN0eWxlLmxldHRlclNwYWNpbmc7XG4gICAgICAgICAgICAgICAgZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgIGUuc3R5bGUud2lkdGggPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgICAgIGUuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCI7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRUZXh0ID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLCBwcmV2aW91c1dpZHRoID0gMCwgaXRsO1xuICAgICAgICAgICAgICAgIGZvciAoY2FyZXRQb3MgPSAwLCBpdGwgPSBpbnB1dFRleHQubGVuZ3RoOyBjYXJldFBvcyA8PSBpdGw7IGNhcmV0UG9zKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZS5pbm5lckhUTUwgKz0gaW5wdXRUZXh0LmNoYXJBdChjYXJldFBvcykgfHwgXCJfXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm9mZnNldFdpZHRoID49IGNsaWVudHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQxID0gY2xpZW50eCAtIHByZXZpb3VzV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0MiA9IGUub2Zmc2V0V2lkdGggLSBjbGllbnR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5pbm5lckhUTUwgPSBpbnB1dFRleHQuY2hhckF0KGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDEgLT0gZS5vZmZzZXRXaWR0aCAvIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IG9mZnNldDEgPCBvZmZzZXQyID8gY2FyZXRQb3MgLSAxIDogY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1dpZHRoID0gZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZXRQb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdGVtcGxhdGUuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgICAgICAgICAgdGVtcGxhdGUuc3R5bGUudGV4dEFsaWduID0gY29tcHV0ZWRTdHlsZS50ZXh0QWxpZ247XG4gICAgICAgICAgICBjb2xvck1hc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmNvbG9yTWFzayA9IGNvbG9yTWFzaztcbiAgICAgICAgICAgIGNvbG9yTWFzay5jbGFzc05hbWUgPSBcImltLWNvbG9ybWFza1wiO1xuICAgICAgICAgICAgaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29sb3JNYXNrLCBpbnB1dCk7XG4gICAgICAgICAgICBpbnB1dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlucHV0KTtcbiAgICAgICAgICAgIGNvbG9yTWFzay5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICBjb2xvck1hc2suYXBwZW5kQ2hpbGQodGVtcGxhdGUpO1xuICAgICAgICAgICAgaW5wdXQuc3R5bGUubGVmdCA9IHRlbXBsYXRlLm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICAkKGNvbG9yTWFzaykub24oXCJtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVycy5tb3VzZWxlYXZlRXZlbnQuY2FsbChpbnB1dCwgWyBlIF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKGNvbG9yTWFzaykub24oXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVycy5tb3VzZWVudGVyRXZlbnQuY2FsbChpbnB1dCwgWyBlIF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKGNvbG9yTWFzaykub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGZpbmRDYXJldFBvcyhlLmNsaWVudFgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlckNvbG9yTWFzayhpbnB1dCwgY2FyZXRQb3MsIGNsZWFyKSB7XG4gICAgICAgICAgICB2YXIgbWFza1RlbXBsYXRlID0gW10sIGlzU3RhdGljID0gZmFsc2UsIHRlc3QsIHRlc3RQb3MsIG5keEludGx6ciwgcG9zID0gMDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldEVudHJ5KGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5ID09PSB1bmRlZmluZWQpIGVudHJ5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoIWlzU3RhdGljICYmICh0ZXN0LmZuID09PSBudWxsIHx8IHRlc3RQb3MuaW5wdXQgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTdGF0aWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUucHVzaChcIjxzcGFuIGNsYXNzPSdpbS1zdGF0aWMnPlwiICsgZW50cnkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdGF0aWMgJiYgKHRlc3QuZm4gIT09IG51bGwgJiYgdGVzdFBvcy5pbnB1dCAhPT0gdW5kZWZpbmVkIHx8IHRlc3QuZGVmID09PSBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXRsID0gbWFza1RlbXBsYXRlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlW210bCAtIDFdID0gbWFza1RlbXBsYXRlW210bCAtIDFdICsgXCI8L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbWFza1RlbXBsYXRlLnB1c2goZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0Q2FyZXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5zcGxpY2UoY2FyZXRQb3MuYmVnaW4sIDAsIGNhcmV0UG9zLmJlZ2luID09PSBjYXJldFBvcy5lbmQgfHwgY2FyZXRQb3MuZW5kID4gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggPyAnPG1hcmsgY2xhc3M9XCJpbS1jYXJldFwiIHN0eWxlPVwiYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7Ym9yZGVyLXJpZ2h0LXN0eWxlOiBzb2xpZDtcIj4nIDogJzxtYXJrIGNsYXNzPVwiaW0tY2FyZXQtc2VsZWN0XCI+Jyk7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5zcGxpY2UoY2FyZXRQb3MuZW5kICsgMSwgMCwgXCI8L21hcms+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2xvck1hc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNhcmV0UG9zLmJlZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGNhcmV0UG9zXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjbGVhciAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVudHJ5KGJ1ZmZlcltwb3NdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaml0TWFza2luZyA9PT0gZmFsc2UgfHwgcG9zIDwgbHZwIHx8IHR5cGVvZiBvcHRzLmppdE1hc2tpbmcgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUob3B0cy5qaXRNYXNraW5nKSAmJiBvcHRzLmppdE1hc2tpbmcgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RW50cnkoZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlzU3RhdGljID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHBvcyA8IG1heExlbmd0aCkgJiYgKHRlc3QuZm4gIT09IG51bGwgfHwgdGVzdC5kZWYgIT09IFwiXCIpIHx8IGx2cCA+IHBvcyB8fCBpc1N0YXRpYyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N0YXRpYykgc2V0RW50cnkoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q2FyZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gY29sb3JNYXNrLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpWzBdO1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IG1hc2tUZW1wbGF0ZS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5wb3NpdGlvbkNvbG9yTWFzayhpbnB1dCwgdGVtcGxhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hc2soZWxlbSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNFbGVtZW50VHlwZVN1cHBvcnRlZChpbnB1dCwgb3B0cykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBhdGNoVmFsdWVQcm9wZXJ0eShucHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlR2V0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVTZXQ7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBhdGNoVmFsaG9vayh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC52YWxIb29rcyAmJiAoJC52YWxIb29rc1t0eXBlXSA9PT0gdW5kZWZpbmVkIHx8ICQudmFsSG9va3NbdHlwZV0uaW5wdXRtYXNrcGF0Y2ggIT09IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGhvb2tHZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uZ2V0ID8gJC52YWxIb29rc1t0eXBlXS5nZXQgOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGhvb2tTZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uc2V0ID8gJC52YWxIb29rc1t0eXBlXS5zZXQgOiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC52YWxIb29rc1t0eXBlXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGhvb2tHZXQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHVuZGVmaW5lZCwgZWxlbS5pbnB1dG1hc2subWFza3NldC52YWxpZFBvc2l0aW9ucykgIT09IC0xIHx8IG9wdHMubnVsbGFibGUgIT09IHRydWUgPyByZXN1bHQgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdmFsaG9va0dldChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKSwgcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsaG9va1NldChlbGVtLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWxlbS50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyB2YWx1ZSBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFza3BhdGNoOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID8gdGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAhPT0gLTEgfHwgb3B0cy5udWxsYWJsZSAhPT0gdHJ1ZSA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMgJiYgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyA/IChpc1JUTCA/IGNsZWFyT3B0aW9uYWxUYWlsKGdldEJ1ZmZlcigpLnNsaWNlKCkpLnJldmVyc2UoKSA6IGNsZWFyT3B0aW9uYWxUYWlsKGdldEJ1ZmZlcigpLnNsaWNlKCkpKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzKSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmV0dXJuIHZhbHVlR2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0dGVyKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcihcInNldHZhbHVlXCIsIFsgdmFsdWUgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKG5wdCwgXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGlucHV0ID0gdGhpcywgdmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm5vVmFsdWVQYXRjaGluZyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldFByb3RvdHlwZU9mICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZiA9IHR5cGVvZiBcInRlc3RcIi5fX3Byb3RvX18gPT09IFwib2JqZWN0XCIgPyBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0Ll9fcHJvdG9fXztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihucHQpLCBcInZhbHVlXCIpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVQcm9wZXJ0eSAmJiB2YWx1ZVByb3BlcnR5LmdldCAmJiB2YWx1ZVByb3BlcnR5LnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSB2YWx1ZVByb3BlcnR5LmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0ID0gdmFsdWVQcm9wZXJ0eS5zZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5wdC50YWdOYW1lICE9PSBcIklOUFVUXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIG5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSBucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IG5wdC5fX2xvb2t1cFNldHRlcl9fKFwidmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIiwgZ2V0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0Ll9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLCBzZXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQgPSB2YWx1ZUdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl9fdmFsdWVTZXQgPSB2YWx1ZVNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0ID0gZnVuY3Rpb24ob3ZlcnJ1bGVSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgJiYgb3ZlcnJ1bGVSVEwgIT09IHRydWUgPyB2YWx1ZUdldC5jYWxsKHRoaXMuZWwpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl92YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlLCBvdmVycnVsZVJUTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcy5lbCwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBvdmVycnVsZVJUTCAhPT0gdHJ1ZSAmJiBpc1JUTCA/IHZhbHVlLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoVmFsaG9vayhucHQudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFR5cGUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICAgICAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGlucHV0LnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiAkLmluQXJyYXkoZWxlbWVudFR5cGUsIG9wdHMuc3VwcG9ydHNJbnB1dFR5cGUpICE9PSAtMSB8fCBpbnB1dC5pc0NvbnRlbnRFZGl0YWJsZSB8fCBpbnB1dC50YWdOYW1lID09PSBcIlRFWFRBUkVBXCI7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gXCJJTlBVVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGVsZW1lbnRUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gZWwudHlwZSA9PT0gXCJ0ZXh0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpc1N1cHBvcnRlZCA9IFwicGFydGlhbFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoVmFsdWVQcm9wZXJ0eShpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlucHV0LmlucHV0bWFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbGVtKTtcbiAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGlzRWxlbWVudFR5cGVTdXBwb3J0ZWQoZWxlbSwgb3B0cyk7XG4gICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZWwgPSBlbGVtO1xuICAgICAgICAgICAgICAgICRlbCA9ICQoZWwpO1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsUGxhY2Vob2xkZXIgPSBlbC5wbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSBlbCAhPT0gdW5kZWZpbmVkID8gZWwubWF4TGVuZ3RoIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChtYXhMZW5ndGggPT09IC0xKSBtYXhMZW5ndGggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDb2xvck1hc2soZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImlucHV0TW9kZVwiIGluIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1vZGUgPSBvcHRzLmlucHV0bW9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImlucHV0bW9kZVwiLCBvcHRzLmlucHV0bW9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlzYWJsZVByZWRpY3RpdmVUZXh0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJhdXRvY29ycmVjdFwiIGluIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuYXV0b2NvcnJlY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDb2xvck1hc2soZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC50eXBlID0gXCJwYXNzd29yZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc1N1cHBvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpbS1pbnNlcnRcIiwgb3B0cy5pbnNlcnRNb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJzdWJtaXRcIiwgRXZlbnRIYW5kbGVycy5zdWJtaXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwicmVzZXRcIiwgRXZlbnRIYW5kbGVycy5yZXNldEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJibHVyXCIsIEV2ZW50SGFuZGxlcnMuYmx1ckV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJmb2N1c1wiLCBFdmVudEhhbmRsZXJzLmZvY3VzRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jb2xvck1hc2sgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY2xpY2tcIiwgRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwibW91c2VsZWF2ZVwiLCBFdmVudEhhbmRsZXJzLm1vdXNlbGVhdmVFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcIm1vdXNlZW50ZXJcIiwgRXZlbnRIYW5kbGVycy5tb3VzZWVudGVyRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwicGFzdGVcIiwgRXZlbnRIYW5kbGVycy5wYXN0ZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjdXRcIiwgRXZlbnRIYW5kbGVycy5jdXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY29tcGxldGVcIiwgb3B0cy5vbmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJpbmNvbXBsZXRlXCIsIG9wdHMub25pbmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjbGVhcmVkXCIsIG9wdHMub25jbGVhcmVkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2JpbGUgJiYgb3B0cy5pbnB1dEV2ZW50T25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJrZXlkb3duXCIsIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwia2V5cHJlc3NcIiwgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcIm1heExlbmd0aFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImlucHV0XCIsIEV2ZW50SGFuZGxlcnMuaW5wdXRGYWxsQmFja0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJiZWZvcmVpbnB1dFwiLCBFdmVudEhhbmRsZXJzLmJlZm9yZUlucHV0RXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInNldHZhbHVlXCIsIEV2ZW50SGFuZGxlcnMuc2V0VmFsdWVFdmVudCk7XG4gICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpICE9PSBcIlwiIHx8IG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPT09IGZhbHNlIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSksIG9wdHMpIHx8IGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSkgOiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSBcIlwiKSBjaGVja1ZhbChlbCwgdHJ1ZSwgZmFsc2UsIGluaXRpYWxWYWx1ZS5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFySW5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyA9PT0gZmFsc2UgfHwgb3B0cy5zaG93TWFza09uRm9jdXMgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwgfHwgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSAhPT0gXCJcIikgd3JpdGVCdWZmZXIoZWwsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoZWwsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWVCdWZmZXI7XG4gICAgICAgIGlmIChhY3Rpb25PYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25PYmouYWN0aW9uKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJpc0NvbXBsZXRlXCI6XG4gICAgICAgICAgICAgICAgZWwgPSBhY3Rpb25PYmouZWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJ1bm1hc2tlZHZhbHVlXCI6XG4gICAgICAgICAgICAgICAgaWYgKGVsID09PSB1bmRlZmluZWQgfHwgYWN0aW9uT2JqLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVCdWZmZXIgPSBhY3Rpb25PYmoudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgdmFsdWVCdWZmZXIsIG9wdHMpIHx8IHZhbHVlQnVmZmVyIDogdmFsdWVCdWZmZXIpLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgZmFsc2UsIGZhbHNlLCB2YWx1ZUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkgb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCB1bmRlZmluZWQsIGdldEJ1ZmZlcigpLCAwLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkdmFsdWUoZWwpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJtYXNrXCI6XG4gICAgICAgICAgICAgICAgbWFzayhlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImZvcm1hdFwiOlxuICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgYWN0aW9uT2JqLnZhbHVlLCBvcHRzKSB8fCBhY3Rpb25PYmoudmFsdWUgOiBhY3Rpb25PYmoudmFsdWUpLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgIGNoZWNrVmFsLmNhbGwodGhpcywgdW5kZWZpbmVkLCB0cnVlLCBmYWxzZSwgdmFsdWVCdWZmZXIpO1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25PYmoubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbWFza3NldCwgb3B0cylcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImlzVmFsaWRcIjpcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uT2JqLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgdHJ1ZSwgdHJ1ZSwgdmFsdWVCdWZmZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbk9iai52YWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcmwgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbigpLCBsbWliID0gYnVmZmVyLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgZm9yICg7bG1pYiA+IHJsOyBsbWliLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFzayhsbWliKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1ZmZlci5zcGxpY2UocmwsIGxtaWIgKyAxIC0gcmwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0NvbXBsZXRlKGJ1ZmZlcikgJiYgYWN0aW9uT2JqLnZhbHVlID09PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJnZXRlbXB0eW1hc2tcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjpcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgZWwuaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZGF0YShlbCwgXCJfaW5wdXRtYXNrX29wdHNcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICRlbCA9ICQoZWwpO1xuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KG9wdHMuYXV0b1VubWFzayA/IHVubWFza2VkdmFsdWUoZWwpIDogZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub2ZmKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5jb2xvck1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFzayA9IGVsLmlucHV0bWFzay5jb2xvck1hc2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1hc2sucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCBjb2xvck1hc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29sb3JNYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoZWwpLCBcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIGVsLl9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgZWwuaW5wdXRtYXNrLl9fdmFsdWVTZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJnZXRtZXRhZGF0YVwiOlxuICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkobWFza3NldC5tZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tUYXJnZXQgPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgMCwgZmFsc2UpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXNrc2V0Lm1ldGFkYXRhLCBmdW5jdGlvbihuZHgsIG10ZHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdGR0Lm1hc2sgPT09IG1hc2tUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVGFyZ2V0ID0gbXRkdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza1RhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQubWV0YWRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElucHV0bWFzaztcbn0pOyIsInJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5leHRlbnNpb25zXCIpO1xyXG5yZXF1aXJlKFwiLi9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2suZGF0ZS5leHRlbnNpb25zXCIpO1xyXG5yZXF1aXJlKFwiLi9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2subnVtZXJpYy5leHRlbnNpb25zXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2suanNcIik7XHJcbiIsIi8qIVxuKiBnbG9iYWwvd2luZG93LmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBuZXcgKGV2YWwoXCJyZXF1aXJlKCdqc2RvbScpLkpTRE9NXCIpKShcIlwiKS53aW5kb3c7XG59KTsgZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG5ldyAoZXZhbChcInJlcXVpcmUoJ2pzZG9tJykuSlNET01cIikpKFwiXCIpLndpbmRvdzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyNjFiMmYzOTk0NTk4NTI2YjE0NTc2MTc2NTdmMmM5ZS5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzNzkyNjQxNGUyNTM0ZWU2NTdjY2RkYjVkNzM1MTRhMS5wbmdcIjsiLCIvKiFcbiogaW5wdXRtYXNrLmV4dGVuc2lvbnMuanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC45XG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWyBcIi4vaW5wdXRtYXNrXCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vaW5wdXRtYXNrXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KHdpbmRvdy5JbnB1dG1hc2spO1xuICAgIH1cbn0pKGZ1bmN0aW9uKElucHV0bWFzaykge1xuICAgIElucHV0bWFzay5leHRlbmREZWZpbml0aW9ucyh7XG4gICAgICAgIEE6IHtcbiAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxuICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCImXCI6IHtcbiAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxuICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIjXCI6IHtcbiAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1GYS1mXVwiLFxuICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgY3NzdW5pdDoge1xuICAgICAgICAgICAgcmVnZXg6IFwiWystXT9bMC05XStcXFxcLj8oWzAtOV0rKT8ocHh8ZW18cmVtfGV4fCV8aW58Y218bW18cHR8cGMpXCJcbiAgICAgICAgfSxcbiAgICAgICAgdXJsOiB7XG4gICAgICAgICAgICByZWdleDogXCIoaHR0cHM/fGZ0cCkvLy4qXCIsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBpcDoge1xuICAgICAgICAgICAgbWFzazogXCJpW2lbaV1dLmlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dXCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIGk6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyAtIDEgPiAtMSAmJiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJzID0gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gKyBjaHJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgLSAyID4gLTEgJiYgbWFza3NldC5idWZmZXJbcG9zIC0gMl0gIT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocnMgPSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSArIGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGNocnMgPSBcIjBcIiArIGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2hycyA9IFwiMDBcIiArIGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIjI1WzAtNV18MlswLTRdWzAtOV18WzAxXVswLTldWzAtOV1cIikudGVzdChjaHJzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24obWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza2VkVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRtb2RlOiBcIm51bWVyaWNcIlxuICAgICAgICB9LFxuICAgICAgICBlbWFpbDoge1xuICAgICAgICAgICAgbWFzazogXCIqezEsNjR9Wy4qezEsNjR9XVsuKnsxLDY0fV1bLip7MSw2M31dQC17MSw2M30uLXsxLDYzfVsuLXsxLDYzfV1bLi17MSw2M31dXCIsXG4gICAgICAgICAgICBncmVlZHk6IGZhbHNlLFxuICAgICAgICAgICAgY2FzaW5nOiBcImxvd2VyXCIsXG4gICAgICAgICAgICBvbkJlZm9yZVBhc3RlOiBmdW5jdGlvbihwYXN0ZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHBhc3RlZFZhbHVlID0gcGFzdGVkVmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFzdGVkVmFsdWUucmVwbGFjZShcIm1haWx0bzpcIiwgXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOVxcdWZmMTEtXFx1ZmYxOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNSEjJCUmJyorLz0/Xl9ge3x9fi1dXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiLVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1aYS16LV1cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24obWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza2VkVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRtb2RlOiBcImVtYWlsXCJcbiAgICAgICAgfSxcbiAgICAgICAgbWFjOiB7XG4gICAgICAgICAgICBtYXNrOiBcIiMjOiMjOiMjOiMjOiMjOiMjXCJcbiAgICAgICAgfSxcbiAgICAgICAgdmluOiB7XG4gICAgICAgICAgICBtYXNrOiBcIlZ7MTN9OXs0fVwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBWOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1ISi1OUFItWmEtaGotbnByLXpcXFxcZF1cIixcbiAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xlYXJJbmNvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgICAgYXV0b1VubWFzazogdHJ1ZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIElucHV0bWFzaztcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIi8qIVxuKiBkZXBlbmRlbmN5TGlicy9pbnB1dG1hc2suZGVwZW5kZW5jeUxpYi5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE5IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjlcbiovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbIFwiLi4vZ2xvYmFsL3dpbmRvd1wiIF0sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuLi9nbG9iYWwvd2luZG93XCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuZGVwZW5kZW5jeUxpYiA9IGZhY3Rvcnkod2luZG93KTtcbiAgICB9XG59KShmdW5jdGlvbih3aW5kb3cpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgZnVuY3Rpb24gaW5kZXhPZihsaXN0LCBlbGVtKSB7XG4gICAgICAgIHZhciBpID0gMCwgbGVuID0gbGlzdC5sZW5ndGg7XG4gICAgICAgIGZvciAoO2kgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0FycmF5bGlrZShvYmopIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsIGx0eXBlID0gdHlwZW9mIG9iajtcbiAgICAgICAgaWYgKGx0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgaXNXaW5kb3cob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHwgdHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmIGxlbmd0aCAtIDEgaW4gb2JqO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChlbGVtKSB7XG4gICAgICAgIHJldHVybiBlbGVtIGluc3RhbmNlb2YgRWxlbWVudDtcbiAgICB9XG4gICAgZnVuY3Rpb24gRGVwZW5kZW5jeUxpYihlbGVtKSB7XG4gICAgICAgIGlmIChlbGVtIGluc3RhbmNlb2YgRGVwZW5kZW5jeUxpYikge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERlcGVuZGVuY3lMaWIpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERlcGVuZGVuY3lMaWIoZWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0gIT09IHVuZGVmaW5lZCAmJiBlbGVtICE9PSBudWxsICYmIGVsZW0gIT09IHdpbmRvdykge1xuICAgICAgICAgICAgdGhpc1swXSA9IGVsZW0ubm9kZU5hbWUgPyBlbGVtIDogZWxlbVswXSAhPT0gdW5kZWZpbmVkICYmIGVsZW1bMF0ubm9kZU5hbWUgPyBlbGVtWzBdIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtKTtcbiAgICAgICAgICAgIGlmICh0aGlzWzBdICE9PSB1bmRlZmluZWQgJiYgdGhpc1swXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXNbMF0uZXZlbnRSZWdpc3RyeSA9IHRoaXNbMF0uZXZlbnRSZWdpc3RyeSB8fCB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRXaW5kb3coZWxlbSkge1xuICAgICAgICByZXR1cm4gaXNXaW5kb3coZWxlbSkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSA/IGVsZW0uZGVmYXVsdFZpZXcgfHwgZWxlbS5wYXJlbnRXaW5kb3cgOiBmYWxzZTtcbiAgICB9XG4gICAgRGVwZW5kZW5jeUxpYi5wcm90b3R5cGUgPSB7XG4gICAgICAgIG9uOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudCh0aGlzWzBdKSkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5LCBlbGVtID0gdGhpc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgYWRkRXZlbnQgPSBmdW5jdGlvbihldiwgbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcihldiwgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW0uYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uYXR0YWNoRXZlbnQoXCJvblwiICsgZXYsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdID0gZXZlbnRSZWdpc3RyeVtldl0gfHwge307XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0gPSBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdLnB1c2goaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgX2V2ZW50cyA9IGV2ZW50cy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZW5keCA9IDA7IGVuZHggPCBfZXZlbnRzLmxlbmd0aDsgZW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuc0V2ZW50ID0gX2V2ZW50c1tlbmR4XS5zcGxpdChcIi5cIiksIGV2ID0gbnNFdmVudFswXSwgbmFtZXNwYWNlID0gbnNFdmVudFsxXSB8fCBcImdsb2JhbFwiO1xuICAgICAgICAgICAgICAgICAgICBhZGRFdmVudChldiwgbmFtZXNwYWNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgb2ZmOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudCh0aGlzWzBdKSkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5LCBlbGVtID0gdGhpc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlRXZlbnQgPSBmdW5jdGlvbihldiwgbmFtZXNwYWNlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldiBpbiBldmVudFJlZ2lzdHJ5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKGV2LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW0uZGV0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRldGFjaEV2ZW50KFwib25cIiArIGV2LCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgPT09IFwiZ2xvYmFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBubXNwIGluIGV2ZW50UmVnaXN0cnlbZXZdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLnNwbGljZShldmVudFJlZ2lzdHJ5W2V2XVtubXNwXS5pbmRleE9mKGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uaW5kZXhPZihoYW5kbGVyKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciByZXNvbHZlTmFtZXNwYWNlID0gZnVuY3Rpb24oZXYsIG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZ0cyA9IFtdLCBobmR4LCBobmRMO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXYubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaG5keCA9IDAsIGhuZEwgPSBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdLmxlbmd0aDsgaG5keCA8IGhuZEw7IGhuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UgJiYgbmFtZXNwYWNlLmxlbmd0aCA+IDAgPyBuYW1lc3BhY2UgOiBcImdsb2JhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXVtobmR4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2OiBldixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UgJiYgbmFtZXNwYWNlLmxlbmd0aCA+IDAgPyBuYW1lc3BhY2UgOiBcImdsb2JhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGV2TmR4IGluIGV2ZW50UmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBubXNwIGluIGV2ZW50UmVnaXN0cnlbZXZOZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChubXNwID09PSBuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGhuZHggPSAwLCBobmRMID0gZXZlbnRSZWdpc3RyeVtldk5keF1bbm1zcF0ubGVuZ3RoOyBobmR4IDwgaG5kTDsgaG5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldjogZXZOZHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5tc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBldmVudFJlZ2lzdHJ5W2V2TmR4XVtubXNwXVtobmR4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2OiBldk5keCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBubXNwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2dHM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgX2V2ZW50cyA9IGV2ZW50cy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZW5keCA9IDA7IGVuZHggPCBfZXZlbnRzLmxlbmd0aDsgZW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuc0V2ZW50ID0gX2V2ZW50c1tlbmR4XS5zcGxpdChcIi5cIiksIG9mZkV2ZW50cyA9IHJlc29sdmVOYW1lc3BhY2UobnNFdmVudFswXSwgbnNFdmVudFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvZmZFdmVudHNMID0gb2ZmRXZlbnRzLmxlbmd0aDsgaSA8IG9mZkV2ZW50c0w7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQob2ZmRXZlbnRzW2ldLmV2LCBvZmZFdmVudHNbaV0ubmFtZXNwYWNlLCBvZmZFdmVudHNbaV0uaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQodGhpc1swXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRSZWdpc3RyeSA9IHRoaXNbMF0uZXZlbnRSZWdpc3RyeSwgZWxlbSA9IHRoaXNbMF07XG4gICAgICAgICAgICAgICAgdmFyIF9ldmVudHMgPSB0eXBlb2YgZXZlbnRzID09PSBcInN0cmluZ1wiID8gZXZlbnRzLnNwbGl0KFwiIFwiKSA6IFsgZXZlbnRzLnR5cGUgXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgZXYgPSBuc0V2ZW50WzBdLCBuYW1lc3BhY2UgPSBuc0V2ZW50WzFdIHx8IFwiZ2xvYmFsXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudCAhPT0gdW5kZWZpbmVkICYmIG5hbWVzcGFjZSA9PT0gXCJnbG9iYWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2bnQsIGksIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiBhcmd1bWVudHNbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50ID0gbmV3IEN1c3RvbUV2ZW50KGV2LCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQuaW5pdEN1c3RvbUV2ZW50KGV2LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLnR5cGUpIERlcGVuZGVuY3lMaWIuZXh0ZW5kKGV2bnQsIGV2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5kaXNwYXRjaEV2ZW50KGV2bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50LmV2ZW50VHlwZSA9IGV2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQuZGV0YWlsID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMudHlwZSkgRGVwZW5kZW5jeUxpYi5leHRlbmQoZXZudCwgZXZlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmZpcmVFdmVudChcIm9uXCIgKyBldm50LmV2ZW50VHlwZSwgZXZudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnRSZWdpc3RyeVtldl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gYXJndW1lbnRzWzBdLnR5cGUgPyBhcmd1bWVudHNbMF0gOiBEZXBlbmRlbmN5TGliLkV2ZW50KGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZXNwYWNlID09PSBcImdsb2JhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbm1zcCBpbiBldmVudFJlZ2lzdHJ5W2V2XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdW2ldLmFwcGx5KGVsZW0sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV1baV0uYXBwbHkoZWxlbSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLm5vb3AgPSBmdW5jdGlvbigpIHt9O1xuICAgIERlcGVuZGVuY3lMaWIuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gICAgRGVwZW5kZW5jeUxpYi5pbkFycmF5ID0gZnVuY3Rpb24oZWxlbSwgYXJyLCBpKSB7XG4gICAgICAgIHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZihhcnIsIGVsZW0sIGkpO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi52YWxIb29rcyA9IHVuZGVmaW5lZDtcbiAgICBEZXBlbmRlbmN5TGliLmlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGlzV2luZG93KG9iaikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLmNvbnN0cnVjdG9yICYmICFPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIuZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSwgdGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LCBpID0gMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwgZGVlcCA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIGRlZXAgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0YXJnZXQgPSBhcmd1bWVudHNbaV0gfHwge307XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIURlcGVuZGVuY3lMaWIuaXNGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB0aGlzO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoO2kgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKChvcHRpb25zID0gYXJndW1lbnRzW2ldKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yIChuYW1lIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3JjID0gdGFyZ2V0W25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBjb3B5ID0gb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gY29weSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgY29weSAmJiAoRGVwZW5kZW5jeUxpYi5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IERlcGVuZGVuY3lMaWIuaXNBcnJheShjb3B5KSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29weUlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5SXNBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmIERlcGVuZGVuY3lMaWIuaXNBcnJheShzcmMpID8gc3JjIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmIERlcGVuZGVuY3lMaWIuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBEZXBlbmRlbmN5TGliLmV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29weSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBjb3B5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLmVhY2ggPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgaSA9IDA7XG4gICAgICAgIGlmIChpc0FycmF5bGlrZShvYmopKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmNhbGwob2JqW2ldLCBpLCBvYmpbaV0pO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIuZGF0YSA9IGZ1bmN0aW9uKG93bmVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3duZXIuX19kYXRhID8gb3duZXIuX19kYXRhW2tleV0gOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3duZXIuX19kYXRhID0gb3duZXIuX19kYXRhIHx8IHt9O1xuICAgICAgICAgICAgb3duZXIuX19kYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBEZXBlbmRlbmN5TGliLkV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIERlcGVuZGVuY3lMaWIuRXZlbnQgPSBmdW5jdGlvbihldmVudCwgcGFyYW1zKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRldGFpbDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgICAgICAgcmV0dXJuIGV2dDtcbiAgICAgICAgfTtcbiAgICAgICAgRGVwZW5kZW5jeUxpYi5FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgIH1cbiAgICByZXR1cm4gRGVwZW5kZW5jeUxpYjtcbn0pOyIsIi8qIVxuKiBpbnB1dG1hc2suZGF0ZS5leHRlbnNpb25zLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuL2lucHV0bWFza1wiIF0sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2lucHV0bWFza1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeSh3aW5kb3cuSW5wdXRtYXNrKTtcbiAgICB9XG59KShmdW5jdGlvbihJbnB1dG1hc2spIHtcbiAgICB2YXIgJCA9IElucHV0bWFzay5kZXBlbmRlbmN5TGliO1xuICAgIHZhciBmb3JtYXRDb2RlID0ge1xuICAgICAgICBkOiBbIFwiWzEtOV18WzEyXVswLTldfDNbMDFdXCIsIERhdGUucHJvdG90eXBlLnNldERhdGUsIFwiZGF5XCIsIERhdGUucHJvdG90eXBlLmdldERhdGUgXSxcbiAgICAgICAgZGQ6IFsgXCIwWzEtOV18WzEyXVswLTldfDNbMDFdXCIsIERhdGUucHJvdG90eXBlLnNldERhdGUsIFwiZGF5XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXREYXRlLmNhbGwodGhpcyksIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIGRkZDogWyBcIlwiIF0sXG4gICAgICAgIGRkZGQ6IFsgXCJcIiBdLFxuICAgICAgICBtOiBbIFwiWzEtOV18MVswMTJdXCIsIERhdGUucHJvdG90eXBlLnNldE1vbnRoLCBcIm1vbnRoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUucHJvdG90eXBlLmdldE1vbnRoLmNhbGwodGhpcykgKyAxO1xuICAgICAgICB9IF0sXG4gICAgICAgIG1tOiBbIFwiMFsxLTldfDFbMDEyXVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNb250aCwgXCJtb250aFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TW9udGguY2FsbCh0aGlzKSArIDEsIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIG1tbTogWyBcIlwiIF0sXG4gICAgICAgIG1tbW06IFsgXCJcIiBdLFxuICAgICAgICB5eTogWyBcIlswLTldezJ9XCIsIERhdGUucHJvdG90eXBlLnNldEZ1bGxZZWFyLCBcInllYXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyLmNhbGwodGhpcyksIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIHl5eXk6IFsgXCJbMC05XXs0fVwiLCBEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhciwgXCJ5ZWFyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhci5jYWxsKHRoaXMpLCA0KTtcbiAgICAgICAgfSBdLFxuICAgICAgICBoOiBbIFwiWzEtOV18MVswLTJdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIERhdGUucHJvdG90eXBlLmdldEhvdXJzIF0sXG4gICAgICAgIGhoOiBbIFwiMFsxLTldfDFbMC0yXVwiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgaGhoOiBbIFwiWzAtOV0rXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIERhdGUucHJvdG90eXBlLmdldEhvdXJzIF0sXG4gICAgICAgIEg6IFsgXCIxP1swLTldfDJbMC0zXVwiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRIb3VycyBdLFxuICAgICAgICBISDogWyBcIjBbMC05XXwxWzAtOV18MlswLTNdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBISEg6IFsgXCJbMC05XStcIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgTTogWyBcIlsxLTVdP1swLTldXCIsIERhdGUucHJvdG90eXBlLnNldE1pbnV0ZXMsIFwibWludXRlc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRNaW51dGVzIF0sXG4gICAgICAgIE1NOiBbIFwiMFswLTldfDFbMC05XXwyWzAtOV18M1swLTldfDRbMC05XXw1WzAtOV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWludXRlcywgXCJtaW51dGVzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNaW51dGVzLmNhbGwodGhpcyksIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIHNzOiBbIFwiWzAtNV1bMC05XVwiLCBEYXRlLnByb3RvdHlwZS5zZXRTZWNvbmRzLCBcInNlY29uZHNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldFNlY29uZHMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgbDogWyBcIlswLTldezN9XCIsIERhdGUucHJvdG90eXBlLnNldE1pbGxpc2Vjb25kcywgXCJtaWxsaXNlY29uZHNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1pbGxpc2Vjb25kcy5jYWxsKHRoaXMpLCAzKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBMOiBbIFwiWzAtOV17Mn1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWlsbGlzZWNvbmRzLCBcIm1pbGxpc2Vjb25kc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzLmNhbGwodGhpcyksIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIHQ6IFsgXCJbYXBdXCIgXSxcbiAgICAgICAgdHQ6IFsgXCJbYXBdbVwiIF0sXG4gICAgICAgIFQ6IFsgXCJbQVBdXCIgXSxcbiAgICAgICAgVFQ6IFsgXCJbQVBdTVwiIF0sXG4gICAgICAgIFo6IFsgXCJcIiBdLFxuICAgICAgICBvOiBbIFwiXCIgXSxcbiAgICAgICAgUzogWyBcIlwiIF1cbiAgICB9LCBmb3JtYXRBbGlhcyA9IHtcbiAgICAgICAgaXNvRGF0ZTogXCJ5eXl5LW1tLWRkXCIsXG4gICAgICAgIGlzb1RpbWU6IFwiSEg6TU06c3NcIixcbiAgICAgICAgaXNvRGF0ZVRpbWU6IFwieXl5eS1tbS1kZCdUJ0hIOk1NOnNzXCIsXG4gICAgICAgIGlzb1V0Y0RhdGVUaW1lOiBcIlVUQzp5eXl5LW1tLWRkJ1QnSEg6TU06c3MnWidcIlxuICAgIH07XG4gICAgZnVuY3Rpb24gZ2V0VG9rZW5pemVyKG9wdHMpIHtcbiAgICAgICAgaWYgKCFvcHRzLnRva2VuaXplcikge1xuICAgICAgICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgbmR4IGluIGZvcm1hdENvZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5zLmluZGV4T2YobmR4WzBdKSA9PT0gLTEpIHRva2Vucy5wdXNoKG5keFswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRzLnRva2VuaXplciA9IFwiKFwiICsgdG9rZW5zLmpvaW4oXCIrfFwiKSArIFwiKSs/fC5cIjtcbiAgICAgICAgICAgIG9wdHMudG9rZW5pemVyID0gbmV3IFJlZ0V4cChvcHRzLnRva2VuaXplciwgXCJnXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRzLnRva2VuaXplcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNWYWxpZERhdGUoZGF0ZVBhcnRzLCBjdXJyZW50UmVzdWx0KSB7XG4gICAgICAgIHJldHVybiAhaXNGaW5pdGUoZGF0ZVBhcnRzLnJhd2RheSkgfHwgZGF0ZVBhcnRzLmRheSA9PSBcIjI5XCIgJiYgIWlzRmluaXRlKGRhdGVQYXJ0cy5yYXd5ZWFyKSB8fCBuZXcgRGF0ZShkYXRlUGFydHMuZGF0ZS5nZXRGdWxsWWVhcigpLCBpc0Zpbml0ZShkYXRlUGFydHMucmF3bW9udGgpID8gZGF0ZVBhcnRzLm1vbnRoIDogZGF0ZVBhcnRzLmRhdGUuZ2V0TW9udGgoKSArIDEsIDApLmdldERhdGUoKSA+PSBkYXRlUGFydHMuZGF5ID8gY3VycmVudFJlc3VsdCA6IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0RhdGVJblJhbmdlKGRhdGVQYXJ0cywgb3B0cykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9wdHMubWluKSB7XG4gICAgICAgICAgICBpZiAoZGF0ZVBhcnRzW1wicmF3eWVhclwiXSkge1xuICAgICAgICAgICAgICAgIHZhciByYXdZZWFyID0gZGF0ZVBhcnRzW1wicmF3eWVhclwiXS5yZXBsYWNlKC9bXjAtOV0vZywgXCJcIiksIG1pblllYXIgPSBvcHRzLm1pbi55ZWFyLnN1YnN0cigwLCByYXdZZWFyLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbWluWWVhciA8PSByYXdZZWFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVQYXJ0c1tcInllYXJcIl0gPT09IGRhdGVQYXJ0c1tcInJhd3llYXJcIl0pIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkgPT09IG9wdHMubWluLmRhdGUuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9wdHMubWluLmRhdGUuZ2V0VGltZSgpIDw9IGRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCAmJiBvcHRzLm1heCAmJiBvcHRzLm1heC5kYXRlLmdldFRpbWUoKSA9PT0gb3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG9wdHMubWF4LmRhdGUuZ2V0VGltZSgpID49IGRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZShmb3JtYXQsIGRhdGVPYmpWYWx1ZSwgb3B0cywgcmF3KSB7XG4gICAgICAgIHZhciBtYXNrID0gXCJcIiwgbWF0Y2g7XG4gICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGlmIChkYXRlT2JqVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChmb3JtYXRDb2RlW21hdGNoWzBdXSkge1xuICAgICAgICAgICAgICAgICAgICBtYXNrICs9IFwiKFwiICsgZm9ybWF0Q29kZVttYXRjaFswXV1bMF0gKyBcIilcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCIoXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJdXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IFwiKT9cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG1hdGNoWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXcgIT09IHRydWUgJiYgZm9ybWF0Q29kZVttYXRjaFswXV1bM10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZXRGbiA9IGZvcm1hdENvZGVbbWF0Y2hbMF1dWzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBnZXRGbi5jYWxsKGRhdGVPYmpWYWx1ZS5kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXRDb2RlW21hdGNoWzBdXVsyXSkgbWFzayArPSBkYXRlT2JqVmFsdWVbXCJyYXdcIiArIGZvcm1hdENvZGVbbWF0Y2hbMF1dWzJdXTsgZWxzZSBtYXNrICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBtYXNrICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXNrO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYWQodmFsLCBsZW4pIHtcbiAgICAgICAgdmFsID0gU3RyaW5nKHZhbCk7XG4gICAgICAgIGxlbiA9IGxlbiB8fCAyO1xuICAgICAgICB3aGlsZSAodmFsLmxlbmd0aCA8IGxlbikgdmFsID0gXCIwXCIgKyB2YWw7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFuYWx5c2VNYXNrKG1hc2tTdHJpbmcsIGZvcm1hdCwgb3B0cykge1xuICAgICAgICB2YXIgZGF0ZU9iaiA9IHtcbiAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKDEsIDAsIDEpXG4gICAgICAgIH0sIHRhcmdldFByb3AsIG1hc2sgPSBtYXNrU3RyaW5nLCBtYXRjaCwgZGF0ZU9wZXJhdGlvbiwgdGFyZ2V0VmFsaWRhdG9yO1xuICAgICAgICBmdW5jdGlvbiBleHRlbmRQcm9wZXJ0eSh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGNvcnJlY3RlZFZhbHVlID0gdmFsdWUucmVwbGFjZSgvW14wLTldL2csIFwiMFwiKTtcbiAgICAgICAgICAgIGlmIChjb3JyZWN0ZWRWYWx1ZSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRlcmVkUGFydCA9IHZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCBcIlwiKSwgbWluID0gKG9wdHMubWluICYmIG9wdHMubWluW3RhcmdldFByb3BdIHx8IHZhbHVlKS50b1N0cmluZygpLCBtYXggPSAob3B0cy5tYXggJiYgb3B0cy5tYXhbdGFyZ2V0UHJvcF0gfHwgdmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY29ycmVjdGVkVmFsdWUgPSBlbnRlcmVkUGFydCArIChlbnRlcmVkUGFydCA8IG1pbi5zbGljZSgwLCBlbnRlcmVkUGFydC5sZW5ndGgpID8gbWluLnNsaWNlKGVudGVyZWRQYXJ0Lmxlbmd0aCkgOiBlbnRlcmVkUGFydCA+IG1heC5zbGljZSgwLCBlbnRlcmVkUGFydC5sZW5ndGgpID8gbWF4LnNsaWNlKGVudGVyZWRQYXJ0Lmxlbmd0aCkgOiBjb3JyZWN0ZWRWYWx1ZS50b1N0cmluZygpLnNsaWNlKGVudGVyZWRQYXJ0Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvcnJlY3RlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldFZhbHVlKGRhdGVPYmosIHZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICBkYXRlT2JqW3RhcmdldFByb3BdID0gZXh0ZW5kUHJvcGVydHkodmFsdWUpO1xuICAgICAgICAgICAgZGF0ZU9ialtcInJhd1wiICsgdGFyZ2V0UHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChkYXRlT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpIGRhdGVPcGVyYXRpb24uY2FsbChkYXRlT2JqLmRhdGUsIHRhcmdldFByb3AgPT0gXCJtb250aFwiID8gcGFyc2VJbnQoZGF0ZU9ialt0YXJnZXRQcm9wXSkgLSAxIDogZGF0ZU9ialt0YXJnZXRQcm9wXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtYXNrID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBnZXRUb2tlbml6ZXIob3B0cykuZXhlYyhmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbWFzay5zbGljZSgwLCBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmIChmb3JtYXRDb2RlLmhhc093blByb3BlcnR5KG1hdGNoWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRWYWxpZGF0b3IgPSBmb3JtYXRDb2RlW21hdGNoWzBdXVswXTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UHJvcCA9IGZvcm1hdENvZGVbbWF0Y2hbMF1dWzJdO1xuICAgICAgICAgICAgICAgICAgICBkYXRlT3BlcmF0aW9uID0gZm9ybWF0Q29kZVttYXRjaFswXV1bMV07XG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGRhdGVPYmosIHZhbHVlLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFzayA9IG1hc2suc2xpY2UodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRlT2JqO1xuICAgICAgICB9IGVsc2UgaWYgKG1hc2sgJiYgdHlwZW9mIG1hc2sgPT09IFwib2JqZWN0XCIgJiYgbWFzay5oYXNPd25Qcm9wZXJ0eShcImRhdGVcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXNrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcbiAgICAgICAgZGF0ZXRpbWU6IHtcbiAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXRDb2RlLlMgPSBvcHRzLmkxOG4ub3JkaW5hbFN1ZmZpeC5qb2luKFwifFwiKTtcbiAgICAgICAgICAgICAgICBvcHRzLmlucHV0Rm9ybWF0ID0gZm9ybWF0QWxpYXNbb3B0cy5pbnB1dEZvcm1hdF0gfHwgb3B0cy5pbnB1dEZvcm1hdDtcbiAgICAgICAgICAgICAgICBvcHRzLmRpc3BsYXlGb3JtYXQgPSBmb3JtYXRBbGlhc1tvcHRzLmRpc3BsYXlGb3JtYXRdIHx8IG9wdHMuZGlzcGxheUZvcm1hdCB8fCBvcHRzLmlucHV0Rm9ybWF0O1xuICAgICAgICAgICAgICAgIG9wdHMub3V0cHV0Rm9ybWF0ID0gZm9ybWF0QWxpYXNbb3B0cy5vdXRwdXRGb3JtYXRdIHx8IG9wdHMub3V0cHV0Rm9ybWF0IHx8IG9wdHMuaW5wdXRGb3JtYXQ7XG4gICAgICAgICAgICAgICAgb3B0cy5wbGFjZWhvbGRlciA9IG9wdHMucGxhY2Vob2xkZXIgIT09IFwiXCIgPyBvcHRzLnBsYWNlaG9sZGVyIDogb3B0cy5pbnB1dEZvcm1hdC5yZXBsYWNlKC9bXFxbXFxdXS8sIFwiXCIpO1xuICAgICAgICAgICAgICAgIG9wdHMucmVnZXggPSBwYXJzZShvcHRzLmlucHV0Rm9ybWF0LCB1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxuICAgICAgICAgICAgaW5wdXRGb3JtYXQ6IFwiaXNvRGF0ZVRpbWVcIixcbiAgICAgICAgICAgIGRpc3BsYXlGb3JtYXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG91dHB1dEZvcm1hdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbWluOiBudWxsLFxuICAgICAgICAgICAgbWF4OiBudWxsLFxuICAgICAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgICAgIGRheU5hbWVzOiBbIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIsIFwiU3VuXCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIiwgXCJTdW5kYXlcIiBdLFxuICAgICAgICAgICAgICAgIG1vbnRoTmFtZXM6IFsgXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIiwgXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiIF0sXG4gICAgICAgICAgICAgICAgb3JkaW5hbFN1ZmZpeDogWyBcInN0XCIsIFwibmRcIiwgXCJyZFwiLCBcInRoXCIgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbihidWZmZXIsIHBvcywgY3VycmVudFJlc3VsdCwgb3B0cykge1xuICAgICAgICAgICAgICAgIG9wdHMubWluID0gYW5hbHlzZU1hc2sob3B0cy5taW4sIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpO1xuICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gYW5hbHlzZU1hc2sob3B0cy5tYXgsIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXJyZW50UmVzdWx0LCBkYXRlUGFydHMgPSBhbmFseXNlTWFzayhidWZmZXIuam9pbihcIlwiKSwgb3B0cy5pbnB1dEZvcm1hdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiBkYXRlUGFydHMuZGF0ZS5nZXRUaW1lKCkgPT09IGRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpc1ZhbGlkRGF0ZShkYXRlUGFydHMsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiBpc0RhdGVJblJhbmdlKGRhdGVQYXJ0cywgb3B0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3MgJiYgcmVzdWx0ICYmIGN1cnJlbnRSZXN1bHQucG9zICE9PSBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogcGFyc2Uob3B0cy5pbnB1dEZvcm1hdCwgZGF0ZVBhcnRzLCBvcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGN1cnJlbnRSZXN1bHQucG9zXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKSwgbWF0Y2gsIGRhdGUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBnZXRUb2tlbml6ZXIob3B0cykuZXhlYyhvcHRzLmlucHV0Rm9ybWF0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoWzBdLmNoYXJBdCgwKSA9PT0gXCJkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9IHBhZCh0b2RheS5nZXREYXRlKCksIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoWzBdLmNoYXJBdCgwKSA9PT0gXCJtXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9IHBhZCh0b2RheS5nZXRNb250aCgpICsgMSwgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0gPT09IFwieXl5eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSArPSB0b2RheS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoWzBdLmNoYXJBdCgwKSA9PT0gXCJ5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9IHBhZCh0b2RheS5nZXRZZWFyKCksIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZVNldChkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgJChpbnB1dCkudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24obWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2Uob3B0cy5vdXRwdXRGb3JtYXQsIGFuYWx5c2VNYXNrKG1hc2tlZFZhbHVlLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKSwgb3B0cywgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FzaW5nOiBmdW5jdGlvbihlbGVtLCB0ZXN0LCBwb3MsIHZhbGlkUG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlc3QubmF0aXZlRGVmLmluZGV4T2YoXCJbYXBdXCIpID09IDApIHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRlc3QubmF0aXZlRGVmLmluZGV4T2YoXCJbQVBdXCIpID09IDApIHJldHVybiBlbGVtLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5zZXJ0TW9kZTogZmFsc2UsXG4gICAgICAgICAgICBzaGlmdFBvc2l0aW9uczogZmFsc2VcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBJbnB1dG1hc2s7XG59KTsiLCIvKiFcbiogaW5wdXRtYXNrLm51bWVyaWMuZXh0ZW5zaW9ucy5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE5IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjlcbiovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbIFwiLi9pbnB1dG1hc2tcIiBdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9pbnB1dG1hc2tcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3Rvcnkod2luZG93LklucHV0bWFzayk7XG4gICAgfVxufSkoZnVuY3Rpb24oSW5wdXRtYXNrKSB7XG4gICAgdmFyICQgPSBJbnB1dG1hc2suZGVwZW5kZW5jeUxpYjtcbiAgICBmdW5jdGlvbiBhdXRvRXNjYXBlKHR4dCwgb3B0cykge1xuICAgICAgICB2YXIgZXNjYXBlZFR4dCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9uc1t0eHQuY2hhckF0KGkpXSB8fCBvcHRzLmRlZmluaXRpb25zW3R4dC5jaGFyQXQoaSldIHx8IG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5vcHRpb25hbG1hcmtlci5lbmQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5xdWFudGlmaWVybWFya2VyLnN0YXJ0ID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMucXVhbnRpZmllcm1hcmtlci5lbmQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5ncm91cG1hcmtlci5zdGFydCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLmdyb3VwbWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLmFsdGVybmF0b3JtYXJrZXIgPT09IHR4dC5jaGFyQXQoaSkpIHtcbiAgICAgICAgICAgICAgICBlc2NhcGVkVHh0ICs9IFwiXFxcXFwiICsgdHh0LmNoYXJBdChpKTtcbiAgICAgICAgICAgIH0gZWxzZSBlc2NhcGVkVHh0ICs9IHR4dC5jaGFyQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVzY2FwZWRUeHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFsaWduRGlnaXRzKGJ1ZmZlciwgZGlnaXRzLCBvcHRzKSB7XG4gICAgICAgIGlmIChkaWdpdHMgPiAwKSB7XG4gICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAocmFkaXhQb3NpdGlvbiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaChvcHRzLnJhZGl4UG9pbnQpO1xuICAgICAgICAgICAgICAgIHJhZGl4UG9zaXRpb24gPSBidWZmZXIubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGRpZ2l0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyW3JhZGl4UG9zaXRpb24gKyBpXSA9IGJ1ZmZlcltyYWRpeFBvc2l0aW9uICsgaV0gfHwgXCIwXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBudW1lcmljOiB7XG4gICAgICAgICAgICBtYXNrOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucmVwZWF0ICE9PSAwICYmIGlzTmFOKG9wdHMuaW50ZWdlckRpZ2l0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gb3B0cy5yZXBlYXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMucmVwZWF0ID0gMDtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5ncm91cFNlcGFyYXRvciA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIG9wdHMuZGlnaXRzICYmIG9wdHMuZGlnaXRzICE9PSBcIjBcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIi5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLFwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMucmFkaXhQb2ludCA9PT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIi5cIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5ncm91cFNlcGFyYXRvciA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRzLmF1dG9Hcm91cCA9IG9wdHMuYXV0b0dyb3VwICYmIG9wdHMuZ3JvdXBTZXBhcmF0b3IgIT09IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuYXV0b0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5ncm91cFNpemUgPT0gXCJzdHJpbmdcIiAmJiBpc0Zpbml0ZShvcHRzLmdyb3VwU2l6ZSkpIG9wdHMuZ3JvdXBTaXplID0gcGFyc2VJbnQob3B0cy5ncm91cFNpemUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUob3B0cy5pbnRlZ2VyRGlnaXRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcHMgPSBNYXRoLmZsb29yKG9wdHMuaW50ZWdlckRpZ2l0cyAvIG9wdHMuZ3JvdXBTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2QgPSBvcHRzLmludGVnZXJEaWdpdHMgJSBvcHRzLmdyb3VwU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaW50ZWdlckRpZ2l0cyA9IHBhcnNlSW50KG9wdHMuaW50ZWdlckRpZ2l0cykgKyAobW9kID09PSAwID8gc2VwcyAtIDEgOiBzZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmludGVnZXJEaWdpdHMgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gXCIqXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID09PSBcInJhZGl4Rm9jdXNcIiAmJiAob3B0cy5wbGFjZWhvbGRlciA9PT0gXCJcIiAmJiBvcHRzLmludGVnZXJPcHRpb25hbCA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPSBcImx2cFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRzLmRlZmluaXRpb25zW1wiO1wiXSA9IG9wdHMuZGVmaW5pdGlvbnNbXCJ+XCJdO1xuICAgICAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbXCI7XCJdLmRlZmluaXRpb25TeW1ib2wgPSBcIn5cIjtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9IG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPT09IFwicmFkaXhGb2N1c1wiID8gXCJsdnBcIiA6IG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2s7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZGlnaXRzT3B0aW9uYWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG9wdHMuZGlnaXRzKSkgb3B0cy5kaWdpdHMgPSAyO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmRlY2ltYWxQcm90ZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtYXNrID0gXCJbK11cIjtcbiAgICAgICAgICAgICAgICBtYXNrICs9IGF1dG9Fc2NhcGUob3B0cy5wcmVmaXgsIG9wdHMpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmludGVnZXJPcHRpb25hbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXNrICs9IFwifnsxLFwiICsgb3B0cy5pbnRlZ2VyRGlnaXRzICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2sgKz0gXCJ+e1wiICsgb3B0cy5pbnRlZ2VyRGlnaXRzICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlnaXRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4RGVmID0gb3B0cy5kZWNpbWFsUHJvdGVjdCA/IFwiOlwiIDogb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHEgPSBvcHRzLmRpZ2l0cy50b1N0cmluZygpLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRxWzBdKSAmJiBkcVsxXSAmJiBpc0Zpbml0ZShkcVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gcmFkaXhEZWYgKyBcIjt7XCIgKyBvcHRzLmRpZ2l0cyArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTmFOKG9wdHMuZGlnaXRzKSB8fCBwYXJzZUludChvcHRzLmRpZ2l0cykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHNPcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCJbXCIgKyByYWRpeERlZiArIFwiO3sxLFwiICsgb3B0cy5kaWdpdHMgKyBcIn1dXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbWFzayArPSByYWRpeERlZiArIFwiO3tcIiArIG9wdHMuZGlnaXRzICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFzayArPSBhdXRvRXNjYXBlKG9wdHMuc3VmZml4LCBvcHRzKTtcbiAgICAgICAgICAgICAgICBtYXNrICs9IFwiWy1dXCI7XG4gICAgICAgICAgICAgICAgb3B0cy5ncmVlZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFzaztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIixcbiAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXG4gICAgICAgICAgICBkaWdpdHM6IFwiKlwiLFxuICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6IHRydWUsXG4gICAgICAgICAgICBlbmZvcmNlRGlnaXRzT25CbHVyOiBmYWxzZSxcbiAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiLlwiLFxuICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uQ2xpY2s6IFwicmFkaXhGb2N1c1wiLFxuICAgICAgICAgICAgZ3JvdXBTaXplOiAzLFxuICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiXCIsXG4gICAgICAgICAgICBhdXRvR3JvdXA6IGZhbHNlLFxuICAgICAgICAgICAgYWxsb3dNaW51czogdHJ1ZSxcbiAgICAgICAgICAgIG5lZ2F0aW9uU3ltYm9sOiB7XG4gICAgICAgICAgICAgICAgZnJvbnQ6IFwiLVwiLFxuICAgICAgICAgICAgICAgIGJhY2s6IFwiXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnRlZ2VyRGlnaXRzOiBcIitcIixcbiAgICAgICAgICAgIGludGVnZXJPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgIHByZWZpeDogXCJcIixcbiAgICAgICAgICAgIHN1ZmZpeDogXCJcIixcbiAgICAgICAgICAgIHJpZ2h0QWxpZ246IHRydWUsXG4gICAgICAgICAgICBkZWNpbWFsUHJvdGVjdDogdHJ1ZSxcbiAgICAgICAgICAgIG1pbjogbnVsbCxcbiAgICAgICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgICAgIHN0ZXA6IDEsXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgYXV0b1VubWFzazogZmFsc2UsXG4gICAgICAgICAgICB1bm1hc2tBc051bWJlcjogZmFsc2UsXG4gICAgICAgICAgICBpbnB1dFR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgaW5wdXRtb2RlOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIHByZVZhbGlkYXRpb246IGZ1bmN0aW9uKGJ1ZmZlciwgcG9zLCBjLCBpc1NlbGVjdGlvbiwgb3B0cywgbWFza3NldCkge1xuICAgICAgICAgICAgICAgIGlmIChjID09PSBcIi1cIiB8fCBjID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmFsbG93TWludXMgIT09IHRydWUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pc05lZ2F0aXZlID0gb3B0cy5pc05lZ2F0aXZlID09PSB1bmRlZmluZWQgPyB0cnVlIDogIW9wdHMuaXNOZWdhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlci5qb2luKFwiXCIpID09PSBcIlwiKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gPyBwb3MgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzU2VsZWN0aW9uID09PSBmYWxzZSAmJiBjID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKG9wdHMuZGlnaXRzICE9PSB1bmRlZmluZWQgJiYgKGlzTmFOKG9wdHMuZGlnaXRzKSB8fCBwYXJzZUludChvcHRzLmRpZ2l0cykgPiAwKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zICE9PSAtMSAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3JhZGl4UG9zXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zID09PSByYWRpeFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHJhZGl4UG9zICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogZnVuY3Rpb24oYnVmZmVyLCBwb3MsIGN1cnJlbnRSZXN1bHQsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBidWlsZFBvc3RNYXNrKGJ1ZmZlciwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdE1hc2sgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBwb3N0TWFzayArPSBcIihcIiArIG9wdHMuZ3JvdXBTZXBhcmF0b3IgKyBcIip7XCIgKyBvcHRzLmdyb3VwU2l6ZSArIFwifSl7Kn1cIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4U3BsaXQgPSBidWZmZXIuam9pbihcIlwiKS5zcGxpdChvcHRzLnJhZGl4UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4U3BsaXRbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0TWFzayArPSBvcHRzLnJhZGl4UG9pbnQgKyBcIip7XCIgKyByYWRpeFNwbGl0WzFdLm1hdGNoKC9eXFxkKlxcPz9cXGQqLylbMF0ubGVuZ3RoICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvc3RNYXNrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3VmZml4ID0gb3B0cy5zdWZmaXguc3BsaXQoXCJcIiksIHByZWZpeCA9IG9wdHMucHJlZml4LnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVzdWx0LnBvcyA9PT0gdW5kZWZpbmVkICYmIGN1cnJlbnRSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCAmJiBjdXJyZW50UmVzdWx0LmRvcG9zdCAhPT0gdHJ1ZSkgcmV0dXJuIGN1cnJlbnRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY3VycmVudFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gY3VycmVudFJlc3VsdC5jYXJldCA6IGN1cnJlbnRSZXN1bHQucG9zO1xuICAgICAgICAgICAgICAgIHZhciBtYXNrZWRWYWx1ZSA9IGJ1ZmZlci5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IG1hc2tlZFZhbHVlLmxlbmd0aCAtIGNhcmV0UG9zIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjaGFyQXRQb3MgPSBtYXNrZWRWYWx1ZVtjYXJldFBvc107XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyA9PT0gb3B0cy5ncm91cFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyArPSAxO1xuICAgICAgICAgICAgICAgICAgICBjaGFyQXRQb3MgPSBtYXNrZWRWYWx1ZVtjYXJldFBvc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYXJldFBvcyA9PT0gbWFza2VkVmFsdWUubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoIC0gMSAmJiBjaGFyQXRQb3MgPT09IG9wdHMucmFkaXhQb2ludCkgcmV0dXJuIGN1cnJlbnRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXRQb3MgIT09IG9wdHMucmFkaXhQb2ludCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgJiYgY2hhckF0UG9zICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlW2NhcmV0UG9zXSA9IFwiP1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucHJlZml4Lmxlbmd0aCA+IDAgJiYgY2FyZXRQb3MgPj0gKG9wdHMuaXNOZWdhdGl2ZSA9PT0gZmFsc2UgPyAxIDogMCkgJiYgY2FyZXRQb3MgPCBvcHRzLnByZWZpeC5sZW5ndGggLSAxICsgKG9wdHMuaXNOZWdhdGl2ZSA9PT0gZmFsc2UgPyAxIDogMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXhbY2FyZXRQb3MgLSAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKV0gPSBcIj9cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5zdWZmaXgubGVuZ3RoID4gMCAmJiBjYXJldFBvcyA+PSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeFtjYXJldFBvcyAtIChtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSldID0gXCI/XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gcHJlZml4LmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgc3VmZml4ID0gc3VmZml4LmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tlZFZhbHVlLmpvaW4oXCJcIikucmVwbGFjZShwcmVmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKHN1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIlstXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIl1cIiwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5wbGFjZWhvbGRlciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWUubGVuZ3RoID4gMSAmJiBwcm9jZXNzVmFsdWUuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXRQb3MgPT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZSgvXlxcPy9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZSgvXjAvZywgXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWUuY2hhckF0KDApID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiICYmIG9wdHMubnVtZXJpY0lucHV0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IFwiMFwiICsgcHJvY2Vzc1ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCghb3B0cy5kaWdpdHNPcHRpb25hbCB8fCBvcHRzLmVuZm9yY2VEaWdpdHNPbkJsdXIgJiYgY3VycmVudFJlc3VsdC5ldmVudCA9PT0gXCJibHVyXCIpICYmIGlzRmluaXRlKG9wdHMuZGlnaXRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zaXRpb24gPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBwcm9jZXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJwYiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIG1hc2tlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZS5wdXNoKG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXhQb3NpdGlvbiA9IHByb2Nlc3NWYWx1ZS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gb3B0cy5kaWdpdHM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIW9wdHMuZGlnaXRzT3B0aW9uYWwgfHwgb3B0cy5lbmZvcmNlRGlnaXRzT25CbHVyICYmIGN1cnJlbnRSZXN1bHQuZXZlbnQgPT09IFwiYmx1clwiKSAmJiAocHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSA9PT0gdW5kZWZpbmVkIHx8IHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPT09IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID0gY3VycmVudFJlc3VsdC5wbGFjZWhvbGRlciB8fCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJwYiAhPT0gLTEgJiYgbWFza2VkVmFsdWVbcnBiICsgaV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID0gcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSB8fCBtYXNrZWRWYWx1ZVtycGIgKyBpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuYXV0b0dyb3VwID09PSB0cnVlICYmIG9wdHMuZ3JvdXBTZXBhcmF0b3IgIT09IFwiXCIgJiYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50IHx8IGN1cnJlbnRSZXN1bHQucG9zICE9PSB1bmRlZmluZWQgfHwgY3VycmVudFJlc3VsdC5kb3Bvc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkUmFkaXggPSBwcm9jZXNzVmFsdWVbcHJvY2Vzc1ZhbHVlLmxlbmd0aCAtIDFdID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgY3VycmVudFJlc3VsdC5jID09PSBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBJbnB1dG1hc2soYnVpbGRQb3N0TWFzayhwcm9jZXNzVmFsdWUsIG9wdHMpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJpY0lucHV0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGppdE1hc2tpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIqXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05P11cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5mb3JtYXQocHJvY2Vzc1ZhbHVlLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZFJhZGl4KSBwcm9jZXNzVmFsdWUgKz0gb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZS5jaGFyQXQoMCkgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmlzTmVnYXRpdmUgJiYgY3VycmVudFJlc3VsdC5ldmVudCA9PT0gXCJibHVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pc05lZ2F0aXZlID0gcHJvY2Vzc1ZhbHVlICE9PSBcIjBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJlZml4ICsgcHJvY2Vzc1ZhbHVlO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSArPSBzdWZmaXg7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaXNOZWdhdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ICsgcHJvY2Vzc1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgKz0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQXRQb3MgIT09IG9wdHMucmFkaXhQb2ludCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgJiYgY2hhckF0UG9zICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0gJC5pbkFycmF5KFwiP1wiLCBwcm9jZXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWVbY2FyZXRQb3NdID0gY2hhckF0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGNhcmV0UG9zID0gY3VycmVudFJlc3VsdC5jYXJldCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50IHx8IGNoYXJBdFBvcyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCB8fCBjaGFyQXRQb3MgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NhcmV0UG9zID0gJC5pbkFycmF5KGNoYXJBdFBvcywgcHJvY2Vzc1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdDYXJldFBvcyAhPT0gLTEpIGNhcmV0UG9zID0gbmV3Q2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0gcHJvY2Vzc1ZhbHVlLmxlbmd0aCAtIGNhcmV0UG9zIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJzbHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0OiAoY2hhckF0UG9zID09PSB1bmRlZmluZWQgfHwgY3VycmVudFJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCkgJiYgY2FyZXRQb3MgIT09IHVuZGVmaW5lZCA/IGNhcmV0UG9zICsgKG9wdHMubnVtZXJpY0lucHV0ID8gLTEgOiAxKSA6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHByb2Nlc3NWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IGN1cnJlbnRSZXN1bHQuZG9wb3N0IHx8IGJ1ZmZlci5qb2luKFwiXCIpICE9PSBwcm9jZXNzVmFsdWUuam9pbihcIlwiKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJzbHQucmVmcmVzaEZyb21CdWZmZXIgPyByc2x0IDogY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkJlZm9yZVdyaXRlOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VNaW5NYXhPcHRpb25zKG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucGFyc2VNaW5NYXhPcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWluID0gb3B0cy5taW4udG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLFwiKSBvcHRzLm1pbiA9IG9wdHMubWluLnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5taW4gPSBpc0Zpbml0ZShvcHRzLm1pbikgPyBwYXJzZUZsb2F0KG9wdHMubWluKSA6IE5hTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5taW4pKSBvcHRzLm1pbiA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm1heCA9IG9wdHMubWF4LnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikgb3B0cy5tYXggPSBvcHRzLm1heC5yZXBsYWNlKG9wdHMucmFkaXhQb2ludCwgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gaXNGaW5pdGUob3B0cy5tYXgpID8gcGFyc2VGbG9hdChvcHRzLm1heCkgOiBOYU47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG9wdHMubWF4KSkgb3B0cy5tYXggPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5wYXJzZU1pbk1heE9wdGlvbnMgPSBcImRvbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihidWZmZXIsIGNhcmV0UG9zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjaGVja3ZhbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVubWFza2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VNaW5NYXhPcHRpb25zKG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsIHx8IG9wdHMubWF4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXNrZWQgPSBvcHRzLm9uVW5NYXNrKGJ1ZmZlci5qb2luKFwiXCIpLCB1bmRlZmluZWQsICQuZXh0ZW5kKHt9LCBvcHRzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVubWFza0FzTnVtYmVyOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbiAhPT0gbnVsbCAmJiB1bm1hc2tlZCA8IG9wdHMubWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IG9wdHMubWluIDwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucG9zdFZhbGlkYXRpb24ob3B0cy5taW4udG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLCBjYXJldFBvcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5tYXggIT09IG51bGwgJiYgdW5tYXNrZWQgPiBvcHRzLm1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBvcHRzLm1heCA8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKG9wdHMubWF4LnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgb3B0cy5yYWRpeFBvaW50KS5zcGxpdChcIlwiKSwgY2FyZXRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihidWZmZXIsIGNhcmV0UG9zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogXCJibHVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIl9jaGVja3ZhbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVnZXg6IHtcbiAgICAgICAgICAgICAgICBpbnRlZ2VyUGFydDogZnVuY3Rpb24ob3B0cywgZW1wdHlDaGVjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlDaGVjayA/IG5ldyBSZWdFeHAoXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIitdP1wiKSA6IG5ldyBSZWdFeHAoXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIitdP1xcXFxkK1wiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGludGVnZXJOUGFydDogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIltcXFxcZFwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApKSArIFwiXStcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgXCJ+XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cywgaXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkLCBsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNocnMgPT09IFwia1wiIHx8IGNocnMgPT09IFwibVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaHJzID09PSBcImtcIiA/IDIgOiA1OyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQuaW5zZXJ0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MgKyBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZC5wb3MgPSBwb3MgKyBsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHN0cmljdCA/IG5ldyBSZWdFeHAoXCJbMC05XCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBcIl1cIikudGVzdChjaHJzKSA6IG5ldyBSZWdFeHAoXCJbMC05XVwiKS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgIT09IHRydWUgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICE9PSB1bmRlZmluZWQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLmRlZiA9PT0gXCJ+XCIgJiYgIWlzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrc2V0LmJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiWy1cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiXVwiLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB2UmFkaXhTcGxpdCA9IHByb2Nlc3NWYWx1ZS5zcGxpdChvcHRzLnJhZGl4UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHZSYWRpeFNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB2UmFkaXhTcGxpdFsxXSA9IHB2UmFkaXhTcGxpdFsxXS5yZXBsYWNlKC8wL2csIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHZSYWRpeFNwbGl0WzBdID09PSBcIjBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHZSYWRpeFNwbGl0WzBdID0gcHZSYWRpeFNwbGl0WzBdLnJlcGxhY2UoLzAvZywgb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHB2UmFkaXhTcGxpdFswXSArIG9wdHMucmFkaXhQb2ludCArIHB2UmFkaXhTcGxpdFsxXSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyVGVtcGxhdGUgPSBtYXNrc2V0Ll9idWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZSA9PT0gb3B0cy5yYWRpeFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBidWZmZXJUZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocHJvY2Vzc1ZhbHVlLm1hdGNoKElucHV0bWFzay5lc2NhcGVSZWdleChidWZmZXJUZW1wbGF0ZSkgKyBcIiRcIikgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlclRlbXBsYXRlID0gYnVmZmVyVGVtcGxhdGUuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoYnVmZmVyVGVtcGxhdGUsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWVbcG9zXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiBjaHJzID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3MgLSAxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCIrXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuYWxsb3dNaW51cyAmJiAoY2hycyA9PT0gXCItXCIgfHwgY2hycyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCItXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuYWxsb3dNaW51cyAmJiBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCI6XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4ID0gXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5yYWRpeFBvaW50KSArIFwiXVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBuZXcgUmVnRXhwKHJhZGl4KS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaC5wbGFjZWhvbGRlciA9PT0gb3B0cy5yYWRpeFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24obWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodW5tYXNrZWRWYWx1ZSA9PT0gXCJcIiAmJiBvcHRzLm51bGxhYmxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApLCBcImdcIiksIFwiMFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMudW5tYXNrQXNOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIiAmJiBwcm9jZXNzVmFsdWUuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpICE9PSAtMSkgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgb3B0cy5yYWRpeFBvaW50KSwgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpKSwgXCItXCIpO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcihwcm9jZXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzQ29tcGxldGU6IGZ1bmN0aW9uKGJ1ZmZlciwgb3B0cykge1xuICAgICAgICAgICAgICAgIHZhciBtYXNrZWRWYWx1ZSA9IChvcHRzLm51bWVyaWNJbnB1dCA/IGJ1ZmZlci5zbGljZSgpLnJldmVyc2UoKSA6IGJ1ZmZlcikuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIl5cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSksIFwiLVwiKTtcbiAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSArIFwiJFwiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIFwiKFswLTldezN9KVwiLCBcImdcIiksIFwiJDFcIik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCA9PT0gXCIsXCIpIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5yYWRpeFBvaW50KSwgXCIuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZShtYXNrZWRWYWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBmdW5jdGlvbihpbml0aWFsVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9pbnQgPSBvcHRzLnJhZGl4UG9pbnQgfHwgXCIsXCI7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgaW5pdGlhbFZhbHVlID09IFwibnVtYmVyXCIgfHwgb3B0cy5pbnB1dFR5cGUgPT09IFwibnVtYmVyXCIpICYmIHJhZGl4UG9pbnQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgcmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZVBhcnRzID0gaW5pdGlhbFZhbHVlLnNwbGl0KHJhZGl4UG9pbnQpLCBpbnRlZ2VyUGFydCA9IHZhbHVlUGFydHNbMF0ucmVwbGFjZSgvW15cXC0wLTldL2csIFwiXCIpLCBkZWNpbWFsUGFydCA9IHZhbHVlUGFydHMubGVuZ3RoID4gMSA/IHZhbHVlUGFydHNbMV0ucmVwbGFjZSgvW14wLTldL2csIFwiXCIpIDogXCJcIjtcbiAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbnRlZ2VyUGFydCArIChkZWNpbWFsUGFydCAhPT0gXCJcIiA/IHJhZGl4UG9pbnQgKyBkZWNpbWFsUGFydCA6IGRlY2ltYWxQYXJ0KTtcbiAgICAgICAgICAgICAgICB2YXIgZGlnaXRzID0gMDtcbiAgICAgICAgICAgICAgICBpZiAocmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBkZWNpbWFsUGFydC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWNpbWFsUGFydCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpZ2l0c0ZhY3RvciA9IE1hdGgucG93KDEwLCBkaWdpdHMgfHwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUob3B0cy5kaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzID0gcGFyc2VJbnQob3B0cy5kaWdpdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZ2l0c0ZhY3RvciA9IE1hdGgucG93KDEwLCBkaWdpdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHJhZGl4UG9pbnQpLCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUoaW5pdGlhbFZhbHVlKSkgaW5pdGlhbFZhbHVlID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGluaXRpYWxWYWx1ZSkgKiBkaWdpdHNGYWN0b3IpIC8gZGlnaXRzRmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgcmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlnaXRzID09PSAwICYmIGluaXRpYWxWYWx1ZS5pbmRleE9mKElucHV0bWFzay5lc2NhcGVSZWdleChyYWRpeFBvaW50KSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5zdWJzdHJpbmcoMCwgaW5pdGlhbFZhbHVlLmluZGV4T2YoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHJhZGl4UG9pbnQpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhbGlnbkRpZ2l0cyhpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIlwiKSwgZGlnaXRzLCBvcHRzKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24oZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xuICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIElucHV0bWFzay5rZXlDb2RlLlVQOlxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgKyBwYXJzZUludChvcHRzLnN0ZXApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgSW5wdXRtYXNrLmtleUNvZGUuRE9XTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwocGFyc2VGbG9hdCh0aGlzLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCkpIC0gcGFyc2VJbnQob3B0cy5zdGVwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbmN5OiB7XG4gICAgICAgICAgICBwcmVmaXg6IFwiJCBcIixcbiAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIixcIixcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjBcIixcbiAgICAgICAgICAgIGF1dG9Hcm91cDogdHJ1ZSxcbiAgICAgICAgICAgIGRpZ2l0czogMixcbiAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGNsZWFyTWFza09uTG9zdEZvY3VzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBkZWNpbWFsOiB7XG4gICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCJcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZWdlcjoge1xuICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgZGlnaXRzOiAwLFxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBwZXJjZW50YWdlOiB7XG4gICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXG4gICAgICAgICAgICBkaWdpdHM6IDIsXG4gICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiLlwiLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgYXV0b0dyb3VwOiBmYWxzZSxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMTAwLFxuICAgICAgICAgICAgc3VmZml4OiBcIiAlXCIsXG4gICAgICAgICAgICBhbGxvd01pbnVzOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIElucHV0bWFzaztcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjA5ZTIwMzY4MDM1YTI0OWNjZGY1MWNhYTQxMzM4NTRlLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImE5ZDEyZTU4NThhMmFiZjk1MjQ4YWJiNzk5ODE0MTdlLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjY3ZGYyYzNhZmEzY2RlMTE0MGMyMzBjZTExYTk4ZWRjLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjJmOTMyNmE1ZTM4MjE2YWQ1NzljNDZiMzY3MTMwMmU4LnBuZ1wiOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS03LTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLndvZmZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLnR0ZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1Cb2xkLndvZmZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1Cb2xkLnR0ZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LUJvbGQuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtUmVndWxhci50dGZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLUJvbGQud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLUJvbGQudHRmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtQm9sZC5mb250LnN2Z1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18sIHsgaGFzaDogXCIjd2ViZm9udFwiIH0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18sIHsgaGFzaDogXCIjd2ViZm9udFwiIH0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18sIHsgaGFzaDogXCIjd2ViZm9udFwiIH0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzExX19fLCB7IGhhc2g6IFwiI3dlYmZvbnRcIiB9KTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohIG5vcm1hbGl6ZS5jc3MgdjguMC4xIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL2h0bWx7bGluZS1oZWlnaHQ6MS4xNTstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6MTAwJX1ib2R5e21hcmdpbjowfW1haW57ZGlzcGxheTpibG9ja31oMXttYXJnaW46MC42N2VtIDA7Zm9udC1zaXplOjJlbX1ocnstd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtoZWlnaHQ6MDtvdmVyZmxvdzp2aXNpYmxlfXByZXtmb250LWZhbWlseTptb25vc3BhY2UsIG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWF7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1hYmJyW3RpdGxlXXtib3JkZXItYm90dG9tOm5vbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTstd2Via2l0LXRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkfWIsc3Ryb25ne2ZvbnQtd2VpZ2h0OmJvbGRlcn1jb2RlLGtiZCxzYW1we2ZvbnQtZmFtaWx5Om1vbm9zcGFjZSwgbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19c21hbGx7Zm9udC1zaXplOjgwJX1zdWIsc3Vwe2ZvbnQtc2l6ZTo3NSU7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjpyZWxhdGl2ZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX1zdWJ7Ym90dG9tOi0wLjI1ZW19c3Vwe3RvcDotMC41ZW19aW1ne2JvcmRlci1zdHlsZTpub25lfWJ1dHRvbixpbnB1dCxvcHRncm91cCxzZWxlY3QsdGV4dGFyZWF7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6MTAwJTtsaW5lLWhlaWdodDoxLjE1O21hcmdpbjowfWJ1dHRvbixpbnB1dHtvdmVyZmxvdzp2aXNpYmxlfWJ1dHRvbixzZWxlY3R7dGV4dC10cmFuc2Zvcm06bm9uZX1idXR0b24sW3R5cGU9XFxcImJ1dHRvblxcXCJdLFt0eXBlPVxcXCJyZXNldFxcXCJdLFt0eXBlPVxcXCJzdWJtaXRcXFwiXXstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9ufWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVye2JvcmRlci1zdHlsZTpub25lO3BhZGRpbmc6MH1idXR0b246LW1vei1mb2N1c3JpbmcsW3R5cGU9XFxcImJ1dHRvblxcXCJdOi1tb3otZm9jdXNyaW5nLFt0eXBlPVxcXCJyZXNldFxcXCJdOi1tb3otZm9jdXNyaW5nLFt0eXBlPVxcXCJzdWJtaXRcXFwiXTotbW96LWZvY3VzcmluZ3tvdXRsaW5lOjFweCBkb3R0ZWQgQnV0dG9uVGV4dH1maWVsZHNldHtwYWRkaW5nOjAuMzVlbSAwLjc1ZW0gMC42MjVlbX1sZWdlbmR7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2NvbG9yOmluaGVyaXQ7ZGlzcGxheTp0YWJsZTttYXgtd2lkdGg6MTAwJTtwYWRkaW5nOjA7d2hpdGUtc3BhY2U6bm9ybWFsfXByb2dyZXNze3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXRleHRhcmVhe292ZXJmbG93OmF1dG99W3R5cGU9XFxcImNoZWNrYm94XFxcIl0sW3R5cGU9XFxcInJhZGlvXFxcIl17LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3BhZGRpbmc6MH1bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9ue2hlaWdodDphdXRvfVt0eXBlPVxcXCJzZWFyY2hcXFwiXXstd2Via2l0LWFwcGVhcmFuY2U6dGV4dGZpZWxkO291dGxpbmUtb2Zmc2V0Oi0ycHh9W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uey13ZWJraXQtYXBwZWFyYW5jZTpub25lfTo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b257LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbjtmb250OmluaGVyaXR9ZGV0YWlsc3tkaXNwbGF5OmJsb2NrfXN1bW1hcnl7ZGlzcGxheTpsaXN0LWl0ZW19dGVtcGxhdGV7ZGlzcGxheTpub25lfVtoaWRkZW5de2Rpc3BsYXk6bm9uZX1AZm9udC1mYWNle2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKSBmb3JtYXQoXFxcInN2Z1xcXCIpfUBmb250LWZhY2V7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyArIFwiKSBmb3JtYXQoXFxcInN2Z1xcXCIpfUBmb250LWZhY2V7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fICsgXCIpO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzhfX18gKyBcIikgZm9ybWF0KFxcXCJzdmdcXFwiKX1AZm9udC1mYWNle2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTBfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fICsgXCIpIGZvcm1hdChcXFwic3ZnXFxcIil9Ym9keXtjb2xvcjojMWYyMDQxO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiLFxcXCJNb250c2VycmF0XFxcIixzYW5zLXNlcmlmfS5jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6ODAuNTU1NiU7bWluLXdpZHRoOjMyMHB4O21heC13aWR0aDoxOTIwcHg7bWFyZ2luOjAgYXV0bztwYWRkaW5nOjAgMTBweH1AbWVkaWEgKG1heC13aWR0aDogMTMwMHB4KXsuY29udGFpbmVye3dpZHRoOjkwLjU1NTYlfX1AbWVkaWEgKG1heC13aWR0aDogNDI1cHgpey5jb250YWluZXJ7d2lkdGg6YXV0bzttYXJnaW46MDtwYWRkaW5nOjB9fVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI2OWFhYTlkNmFhNDFiMWYzNjU2ZDllNDE3NmIzYTJiYy53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYThhMTE3MzYwZTcxZGU5NGFlM2IwYjBmOGQxNWI0NGQudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjU2MGMzNDc4MWRhYmFiOTg0ZDU5YjM3OWYzZDdmZmMuc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==