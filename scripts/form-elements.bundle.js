!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=199)}({1:function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(a=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([o]).join("\n")}var a,s,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i=0;i<e.length;i++){var o=[].concat(e[i]);n&&(o[2]?o[2]="".concat(n," and ").concat(o[2]):o[2]=n),t.push(o)}},t}},10:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Regular-a700954.ttf"},11:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Regular.font-cb83309.svg"},12:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Bold-3ac1a53.woff"},13:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Bold-9e3117a.ttf"},14:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Bold.font-597b76b.svg"},15:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Regular-b6db223.woff"},16:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Regular-7730093.ttf"},17:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Regular.font-0e54430.svg"},18:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Bold-d98e672.woff"},19:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Bold-70baeca.ttf"},199:function(e,t,n){"use strict";n.r(t);n(7),n(200);var i=n(5),o=n.n(i),r=n(24);n(42);o()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#maskedTextField"),o()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#arrival-input"),o()({mask:"99.99.9999",placeholder:"19.08.2019"}).mask("#departure-input");var a={container:document.querySelector("#drop-down-container"),input:document.querySelector("#number-guests-input2"),countElements:[{name:"Спальни",countGroupName:"bedrooms",startValue:2},{name:"Кровати",countGroupName:"bed",startValue:2},{name:"Ванные комнаты",countGroupName:"bath",startValue:0}],countGroupView:{bedrooms:{counter:2,views:["спальня","спальни","спален"]},bed:{counter:2,views:["кровать","кровати","кроватей"]},bath:{counter:0,views:["ванная комната","ванные комнаты","ванных комнат"]}},placeholder:"Удобства номера",isHideControl:!0,isPinShow:!0};new r.a(a).init();var s={container:document.querySelector("#drop-down-container2"),input:document.querySelector("#number-guests-input3"),countElements:[{name:"Взрослые",countGroupName:"guest"},{name:"Дети",countGroupName:"guest"},{name:"Младенцы",countGroupName:"child"}],countGroupView:{guest:{counter:0,views:["гость","гостя","гостей"]},child:{counter:0,views:["младенец","младенца","младенцев"]}},placeholder:"Сколько гостей",isPinShow:!0};new r.a(s).init();var l={container:document.querySelector("#drop-down-container3"),input:document.querySelector("#number-guests-input4"),countElements:[{name:"Взрослые",countGroupName:"guest",startValue:2},{name:"Дети",countGroupName:"guest",startValue:1},{name:"Младенцы",countGroupName:"child"}],countGroupView:{guest:{counter:3,views:["гость","гостя","гостей"]},child:{counter:0,views:["младенец","младенца","младенцев"]}},placeholder:"Сколько гостей",isPinShow:!0};new r.a(l).init()},2:function(e,t,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a={};function s(e,t,n){for(var i=0;i<t.length;i++){var o={css:t[i][1],media:t[i][2],sourceMap:t[i][3]};a[e][i]?a[e][i](o):a[e].push(h(o,n))}}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=r(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var p,u=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function c(e,t,n,i){var o=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function d(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,m=0;function h(e,t){var n,i,o;if(t.singleton){var r=m++;n=f||(f=l(t)),i=c.bind(null,n,r,!1),o=c.bind(null,n,r,!0)}else n=l(t),i=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o()),e=n.base?e+n.base:e,t=t||[],a[e]||(a[e]=[]),s(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){a[e]||(a[e]=[]),s(e,t,n);for(var i=t.length;i<a[e].length;i++)a[e][i]();a[e].length=t.length,0===a[e].length&&delete a[e]}}}},20:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Bold.font-3c9e7be.svg"},200:function(e,t,n){var i=n(2),o=n(201);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},a=(i(e.i,o,r),o.locals?o.locals:{});e.exports=a},201:function(e,t,n){var i=n(1),o=n(38),r=n(3),a=n(40),s=n(43),l=n(44),p=n(34),u=n(35),c=n(22),d=n(21),f=n(41);(t=i(!1)).i(o);var m=r(a),h=r(s),g=r(l),b=r(p),v=r(u),x=r(c),k=r(d),y=r(f);t.push([e.i,'.checkbox__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.checkbox__title--expandable{position:relative}.checkbox__title--expandable button{width:100%;color:#1f2041;text-align:left}.checkbox__title--expandable button::after{position:absolute;top:5px;right:16px;width:12px;height:8px;content:"";background:url('+m+') no-repeat;cursor:pointer}.checkbox__title--expandable-open button::after{-webkit-transform:rotate(180deg);transform:rotate(180deg);right:17px}.checkbox__expandable{margin:0;padding-left:0;padding-right:0;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase;border:none;background:transparent;cursor:pointer}.checkbox__item{width:240px;margin:0;margin-bottom:12px}.checkbox__item:last-child{margin-bottom:0}.checkbox--rich .checkbox__item{width:264px}.checkbox__item input[type="checkbox"]{display:none}.checkbox__item label{position:relative;display:block;padding-left:30px;color:rgba(31,32,65,0.45);font-size:14px;font-weight:normal;line-height:18px;cursor:pointer}.checkbox__item label::before{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;top:-2px;left:0;width:20px;height:20px;content:"";background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:4px;-webkit-transition:border 0.3s ease 0s;transition:border 0.3s ease 0s}.checkbox__item label::after{content:"";visibility:hidden;opacity:0;position:absolute;top:3px;left:7px;width:4px;height:6px;border-bottom:2px solid #bc9cff;border-right:2px solid #bc9cff;background-color:transparent;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s;transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s}.checkbox__item input[type="checkbox"]:checked+label::after{visibility:visible;opacity:1}.checkbox__item input[type="checkbox"]:checked+label::before{border-color:#bc9cff}.checkbox__descr{margin:0;margin-top:5px;font-weight:normal;color:rgba(31,32,65,0.5);font-size:12px;line-height:14px}.checkbox__item .checbox__lbl--rich{font-size:14px;font-weight:bold;line-height:18px;color:rgba(31,32,65,0.75)}.checkbox__item-list--hide{display:none}.radiobtn__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.radiobtn__item{display:inline-block;margin:0;margin-right:16px;vertical-align:top}.radiobtn__item:last-child{margin-right:0}.radiobtn__item input[type="radio"]{display:none}.radiobtn__item label{position:relative;display:block;padding-left:30px;color:rgba(31,32,65,0.45);font-size:14px;font-weight:normal;line-height:14px;cursor:pointer}.radiobtn__item label::before{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;top:-2px;left:0;width:20px;height:20px;content:"";background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:50%;-webkit-transition:border 0.3s ease 0s;transition:border 0.3s ease 0s}.radiobtn__item label::after{content:"";visibility:hidden;opacity:0;position:absolute;top:2px;left:4px;width:12px;height:12px;border-radius:50%;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);-webkit-transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s;transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s}.radiobtn__item input[type="radio"]:checked+label::after{visibility:visible;opacity:1}.radiobtn__item input[type="radio"]:checked+label::before{border-color:#bc9cff}.radiobtn__item input[type="radio"]:checked+label{color:rgba(31,32,65,0.75)}.toggle__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.toggle__item{margin:0;margin-bottom:15px}.toggle__item:last-child{margin-bottom:0}.toggle__item input[type="checkbox"]{display:none}.toggle__item label{position:relative;display:block;padding-left:50px;color:rgba(31,32,65,0.45);font-size:14px;font-weight:normal;line-height:18px;cursor:pointer}.toggle__item label::before{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;top:0;left:0;width:40px;height:20px;content:"";background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:10px;-webkit-transition:border 0.3s ease 0s;transition:border 0.3s ease 0s}.toggle__item label::after{content:"";position:absolute;top:4px;left:4px;width:12px;height:12px;border-radius:50%;background:rgba(31,32,65,0.25);-webkit-transition:-webkit-transform 0.2s ease 0s;transition:-webkit-transform 0.2s ease 0s;transition:transform 0.2s ease 0s;transition:transform 0.2s ease 0s, -webkit-transform 0.2s ease 0s}.toggle__item input[type="checkbox"]:checked+label::after{-webkit-transform:translateX(20px);transform:translateX(20px);background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%)}.toggle__item input[type="checkbox"]:checked+label::before{border-color:#bc9cff}.likebtn__title{margin:0;margin-bottom:16px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.likebtn__item{display:inline-block;vertical-align:top;margin:0;margin-right:6px}.likebtn__item:last-child{margin-right:0}.likebtn__item button{-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;width:40px;height:20px;margin:0;padding:0;padding-left:7px;content:"";color:rgba(31,32,65,0.45);font-family:"Montserrat", "Quicksand", sans-serif;font-weight:normal;font-size:10px;line-height:12px;background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:10px}.likebtn__item button::after{position:absolute;content:"";top:5px;left:3px;width:10px;height:8px;background:url('+h+") no-repeat}.likebtn__item--active button{color:#bc9cff;border-color:#bc9cff}.likebtn__item--active button::after{background:url("+g+') no-repeat}.ratebtn__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.ratebtn__item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;margin-right:25px;font-size:0}.ratebtn__item:last-child{margin-right:0}.ratebtn__item input[type="radio"]{display:none}.ratebtn__item label{position:relative;display:block;width:20px;height:20px;margin-left:4px;background:url('+b+") no-repeat;cursor:pointer}.ratebtn__item label:last-child{margin-left:0}.ratebtn__item label:hover,.ratebtn__item label:hover ~ label{background:url("+v+") no-repeat}.ratebtn__item input:checked ~ label{background:url("+v+') no-repeat}.ratebtn__item-wrap{display:-webkit-box;display:-ms-flexbox;display:flex}.range__view{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:22px}.range__price input{-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:inline-block;width:50px;margin:0;margin-right:2px;font-family:Montserrat;font-style:normal;font-weight:normal;color:rgba(31,32,65,0.45);font-size:12px;line-height:15px;text-transform:uppercase;vertical-align:top;border:none;background:transparent}.range__price input:last-child{margin-right:0;margin-left:2px}.range__slider{height:6px;border-radius:3px;border:1px solid rgba(31,32,65,0.25);background-color:#fff}.range__slider .noUi-connect{height:6px;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%)}.range__slider .noUi-handle{width:14px;height:14px;border:2px solid #ffffff;border-radius:50%;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);-webkit-box-shadow:none;box-shadow:none;cursor:pointer;-webkit-transition:background 0.4s ease 0s, border 0.4s ease 0s;transition:background 0.4s ease 0s, border 0.4s ease 0s}.range__slider .noUi-handle::after,.range__slider .noUi-handle::before{display:none}.range__slider .noUi-handle-upper,.range__slider .noUi-handle-lower{right:-8px}.range__cost{display:inline-block;margin:0;margin-right:8px;font-family:Montserrat;font-style:normal;font-weight:normal;color:rgba(31,32,65,0.45);font-size:12px;line-height:15px;text-transform:uppercase;vertical-align:middle}.range__cost:first-child{position:relative}.range__cost:first-child::after{position:absolute;top:0;right:-7.5px;content:"-";font-size:10px}.range__cost:last-child{margin-right:0}.range__title{margin:0;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.title-wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.title__descr{margin:0;padding-bottom:4px;color:rgba(31,32,65,0.45);font-family:Montserrat;font-size:12px;line-height:15px;text-transform:uppercase}.input-group{display:-webkit-box;display:-ms-flexbox;display:flex;margin:0}.input-group--column{-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.input-group:hover .input-group__input,.input-group:focus .input-group__input{border-color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-webkit-input-placeholder, .input-group:focus .input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-moz-placeholder, .input-group:focus .input-group__input::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input:-ms-input-placeholder, .input-group:focus .input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-ms-input-placeholder, .input-group:focus .input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::placeholder,.input-group:focus .input-group__input::placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__button-split,.input-group:focus .input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__label{margin:0;margin-bottom:5px}.input-group__descr{margin:0;padding-bottom:4px;color:rgba(31,32,65,0.45);font-family:Montserrat;font-size:12px;line-height:15px;text-transform:uppercase}.input-group__label--big{font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.input-group__split{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;margin:0}.input-group__input{-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;padding:9px 14px;color:rgba(31,32,65,0.75);font-size:14px;font-family:"Quicksand","Montserrat",sans-serif;line-height:24px;border:1px solid rgba(31,32,65,0.25);border-radius:4px;outline:none;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__input--icon{background:url('+x+') no-repeat;background-position:95% center}.input-group__input--button-split{position:relative;padding-right:0;border-right:none;border-radius:4px 0 0 4px}.input-group__input--fake{cursor:pointer}.input-group__input--active{border-color:rgba(31,32,65,0.5)}.input-group__input--hover{border-color:rgba(31,32,65,0.75)}.input-group__input--hover::-webkit-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-moz-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover:-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-moz-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-moz-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:hover,.input-group__input:focus{border-color:rgba(31,32,65,0.75)}.input-group__input:hover+.input-group__button-split,.input-group__input:focus+.input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::placeholder{color:rgba(31,32,65,0.75)}.input-group__button-split{-webkit-box-sizing:border-box;box-sizing:border-box;width:44px;padding:0;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:1px solid rgba(31,32,65,0.25);border-left:none;border-radius:0 4px 4px 0;outline:none;cursor:pointer;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__button-split img{-webkit-transition:-webkit-transform 0.1s ease;transition:-webkit-transform 0.1s ease;transition:transform 0.1s ease;transition:transform 0.1s ease, -webkit-transform 0.1s ease}.input-group__button-split--down-animation:active img{-webkit-transform:translateY(2px);transform:translateY(2px)}.input-group__button-split--right-animation:active img{-webkit-transform:translateX(5px);transform:translateX(5px)}.button{position:relative;z-index:100;padding:10px 20px;color:#fff;font-weight:normal;font-size:12px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;line-height:15px;text-transform:uppercase;text-decoration:none;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border:none;border-radius:22px;cursor:pointer}.button--disable{opacity:0.5;cursor:default}.button--disable:hover::before{display:none}.button::before{position:absolute;top:0;left:0;z-index:-100;display:block;width:100%;height:100%;background:-webkit-gradient(linear, left top, left bottom, from(#9969ff), to(#5b7ef6));background:linear-gradient(#9969ff, #5b7ef6);border-radius:inherit;opacity:0;-webkit-transition:opacity 0.4s ease;transition:opacity 0.4s ease;content:""}.button:hover::before{opacity:1}.button--empty-style{padding:8px 18px;color:#bc9cff;background:#fff;border:2px solid #bc9cff}.button--empty-style::before{display:none}.button--empty-style:hover{color:#9969ff;border-color:#9969ff;background:#fff}.button--empty-disable{opacity:0.5;cursor:default}.button--empty-disable:hover{color:#bc9cff !important;background:#fff !important;border-color:#bc9cff !important}.button--only-text{padding:0;color:#bc9cff;background:none}.button--only-text::before{display:none}.button--only-text:hover{color:#9969ff}.button--only-text-disable{color:rgba(31,32,65,0.5);cursor:default}.button--only-text-disable:hover{color:rgba(31,32,65,0.5)}.button--icon{position:relative}.button--icon::after{position:absolute;top:50%;right:0;width:44px;height:44px;margin-top:-22px;background:url('+k+') no-repeat;background-position:center center;-webkit-transition:background 0.2s ease;transition:background 0.2s ease;content:""}.button--icon:active::after{background-position:20px center}.pagination__title{margin:0;margin-bottom:16px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.pagination__pages{margin:0;padding:0;list-style:none}.pagination__page-item{display:inline-block;vertical-align:top}.pagination__page-item a{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;width:36px;padding:12px 0px;text-align:center;vertical-align:middle;color:rgba(31,32,65,0.5);font-family:Montserrat;font-weight:normal;font-size:12px;line-height:15px;text-decoration:none}.pagination__page-item--active a{width:40px;height:40px;color:#fff;font-weight:bold;font-size:12px;line-height:15px;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border-radius:50%}.pagination__page-next{position:relative;margin-left:-2px}.pagination__page-next a{width:40px;height:40px;color:#fff;font-size:0;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);border-radius:50%}.pagination__page-next::after{position:absolute;top:0;bottom:0;right:0;left:0;width:18px;height:17px;margin:auto;content:"";background:url('+y+') no-repeat}.pagination__overview{padding-left:6px}.pagination__overview p{font-family:Montserrat;margin:0;margin-top:7px;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.features{margin:0;padding:0;padding-top:1px;list-style:none}.features__item{display:-webkit-box;display:-ms-flexbox;display:flex;margin-bottom:20px;padding-bottom:20px;border-bottom:1px solid rgba(31,32,65,0.1)}.features__item:last-child{margin-bottom:0}.features__item:nth-child(3){padding-bottom:0;border-bottom:none}.features__pict{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:9px;width:48px;height:48px}.features__content{font-size:14px;line-height:24px}.features__title{margin:0;font-size:14px;line-height:24px;font-weight:bold}.features__descr{margin:0}.bullet__title{margin:0;margin-bottom:14px;font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.bullet__title--lp{padding-left:20px}.bullet__list{padding:0;list-style:none}.bullet__item{position:relative;padding-left:21px;margin-bottom:10px;font-family:Montserrat;color:rgba(31,32,65,0.75);font-size:14px;line-height:24px}.bullet__item::before{position:absolute;top:7px;left:0;width:10px;height:10px;content:"";background:rgba(31,32,65,0.25);border-radius:50%}.comment{display:-webkit-box;display:-ms-flexbox;display:flex}.comment__wrap{margin-right:10px}.comment__wrap:nth-child(2){padding-top:15px}.comment__wrap:last-child{margin-right:0}.comment__pict{position:relative;width:44px;height:44px;margin-bottom:27px}.comment__pict img{position:absolute;top:1px;left:-23px}.comment__title{margin:0;margin-bottom:8px;color:rgba(31,32,65,0.75);font-weight:bold;font-size:14px}.comment__date{margin:0;margin-bottom:14px;font-size:14px;color:rgba(31,32,65,0.75)}.comment__text{width:99%;margin:0;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.drop-down{position:absolute;top:198px;left:50%;z-index:100;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;margin-top:-200px;margin-left:-50%;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:0 0 4px 4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translateY(-10px);transform:translateY(-10px);visibility:hidden;opacity:0;-webkit-transition:all 0.2s ease-in;transition:all 0.2s ease-in}.drop-down--show{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible;opacity:1}.drop-down__wrap{padding-top:7px;padding-left:14px;padding-right:7px;padding-bottom:8px}.drop-down__count-list{margin:0;padding:0;list-style:none}.drop-down__count-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:7px}.drop-down__count-item:last-child{margin-bottom:0}.drop-down__counter-menu{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:92px}.drop-down__count-item-name{margin:0;padding:0;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.drop-down__select-view{width:20px;margin:0;font-weight:bold;font-size:12px;line-height:15px;text-align:center}.drop-down__counter-btn{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;width:30px;height:30px;padding:0;color:rgba(31,32,65,0.5);font-size:18px;text-align:center;vertical-align:middle;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:50%;cursor:pointer}.drop-down__counter-btn--plus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"+"}.drop-down__counter-btn--minus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"-"}.drop-down__counter-btn--disabled{color:rgba(31,32,65,0.25);border:1px solid rgba(31,32,65,0.25);cursor:default}.drop-down__control{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-top:20px}.drop-down__button{padding:0;color:rgba(31,32,65,0.5);font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase;background:transparent;border:none;cursor:pointer;-webkit-transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out, -webkit-transform 0.1s ease-in-out}.drop-down__button:hover{color:#bc9cff}.drop-down__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.drop-down__button--accent{color:#bc9cff}.drop-down__button--accent:hover{color:rgba(31,32,65,0.5)}.drop-down-container{position:relative}.logo{position:relative;min-width:120px;min-height:38px}.logo--big{margin-top:30px;margin-left:30px}.logo__link{position:absolute;top:-2px}.logo__link:hover .logo__letter{fill:#9969ff}.logo__link:hover .logo__label-left{fill:#6fcf97}.logo__letter,.logo__label-left{-webkit-transition:fill 0.4s ease;transition:fill 0.4s ease}.form-elements__wrap{padding-top:62px}.form-elements__row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.form-elements__row:first-child{margin-bottom:100px}.form-elements__row:nth-child(2){margin-bottom:40px}.form-elements__inputs{width:27.6%}.form-elements__inputs .input-group{margin-bottom:20px}.form-elements__inputs .input-group:nth-child(3){margin-bottom:23px}.form-elements__inputs-column{display:-webkit-box;display:-ms-flexbox;display:flex;margin-top:40px;margin-bottom:21px}.form-elements__inputs-column .input-group:first-child{margin-right:20px}.form-elements__inputs-column .input-group__button-split{width:60px}.form-elements__inputs-small{width:266px}.form-elements__inputs-small .input-group{margin-bottom:41px}.form-elements__inputs-small .input-group:last-child{margin-bottom:0}.form-elements__controls{width:22.9%}.form-elements__controls .checkbox{margin-bottom:40.88px}.form-elements__controls .radiobtn{margin-bottom:42px}.form-elements__controls .toggle{margin-bottom:46px}.form-elements__controls .likebtn{margin-bottom:40px}.form-elements__user-button{width:27.7%}.form-elements__user-button .range{width:82.8%;margin-bottom:42px}.form-elements__buttons .button{padding:14px 20px;font-weight:bold}.form-elements__buttons .button--empty-style{padding:12px 17px}.form-elements__buttons .button::last-child{margin-right:0}.form-elements__full-button{margin-bottom:30px}.form-elements__full-button .button{margin-right:13px}.form-elements__empty-button{margin-bottom:31px}.form-elements__empty-button .button{margin-right:17px}.form-elements__links{margin-bottom:30px}.form-elements__links .button{padding:0;margin-right:18px}.form-elements__links .button:last-child{margin-right:0}.form-elements__submit-btn{margin-bottom:41px}.form-elements__submit-btn .button{width:100%}.form-elements__drop-down-expand{width:23%;margin-right:108px}.form-elements__drop-down-expand .input-group{margin-bottom:20px}.form-elements__drop-down-expand .input-group:nth-child(2){margin-bottom:0}.form-elements__drop-down-expand .input-group__input--icon{background-position:94% center}.form-elements__drop-down-expand .drop-down__wrap{padding-top:5px;padding-bottom:9px}.form-elements__drop-down-rich{width:27.6%}.form-elements__drop-down-rich .drop-down__wrap{padding-top:5px;padding-bottom:13px}.form-elements__drop-down-rich .drop-down__control{margin-top:21px}.form-elements__drop-down-bullet{width:27.7%}.form-elements__drop-down-bullet .drop-down__wrap{padding-top:5px;padding-bottom:13px}.form-elements__drop-down-bullet .drop-down__control{margin-top:21px}.form-elements__exp-checkbox-close{margin-top:171px;margin-bottom:47px}.form-elements__bunny-hop{margin-top:255px}.form-elements__bunny-hop .checkbox__item:first-child{width:72%}.form-elements__bunny-hop .bullet__item:nth-child(3){padding-right:67px}.form-elements__features{width:24.2%}.form-elements__comment{width:61.3%}.form-elements #drop-down-container,.form-elements #drop-down-container2,.form-elements #drop-down-container3{position:relative}@media (max-width: 1060px){.form-elements .radiobtn__item{margin-bottom:15px}.form-elements .radiobtn__item:last-child{margin-bottom:0}}\n',""]),e.exports=t},21:function(e,t,n){e.exports=n.p+"img/arrow-032b0d5.svg"},22:function(e,t,n){e.exports=n.p+"img/expand-more-d04c9af.svg"},23:function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;
/*!
* global/window.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},24:function(e,t,n){"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t,n){var i=document.createElement(e);return t&&i.classList.add(t),n&&(i.textContent=n),i}function r(e,t){return t[e%100>4&&e%100<20?2:[2,0,1,1,1,2][e%10<5?e%10:5]]}t.a=function e(t){var n=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"hasHaveStartValue",(function(e){return e.some((function(e){if(e.startValue)return e.startValue>0}))})),i(this,"getModifiedCountElements",(function(){return n.countElements.map((function(e,t){var n,i,o=e.minValue?e.minValue:0,r=e.startValue?e.startValue:o;return e.id="".concat(t).concat((n=1,i=1e4,Math.floor(Math.random()*(+i-+n))+ +n)),e.counter=r,e.minValue=o,e}))})),i(this,"show",(function(){n.dropDownParent.classList.contains("drop-down--show")||(n.dropDownParent.classList.add("drop-down--show"),n.input.classList.add("input-group__input--active"),window.addEventListener("mouseup",n.onClickHide),window.addEventListener("keyup",n.onPressHide))})),i(this,"hide",(function(){n.isPinShow||n.dropDownParent.classList.contains("drop-down--show")&&(n.dropDownParent.classList.remove("drop-down--show"),n.input.classList.remove("input-group__input--active"),window.removeEventListener("mouseup",n.onClickHide),window.removeEventListener("keyup",n.onPressHide))})),i(this,"onClickHide",(function(e){var t=e.target===n.input,i=n.dropDownParent.contains(e.target);!t&&!i&&n.hide()})),i(this,"onPressHide",(function(e){27===e.keyCode&&n.hide()})),i(this,"onClickClear",(function(e){e.preventDefault(),n.discardCounter(),n.discardViewCounter(),n.input.textContent=n.placeholder})),i(this,"discardCounter",(function(){n.countElements.forEach((function(e){n.dropDownParent.querySelector("#view-".concat(e.id)).textContent=e.minValue,e.counter=e.minValue})),n.dropDownParent.querySelectorAll(".drop-down__counter-btn--minus").forEach((function(e){e.classList.add("drop-down__counter-btn--disabled"),e.setAttribute("disabled","true")}))})),i(this,"discardViewCounter",(function(){Object.keys(n.countGroupView).forEach((function(e){n.countGroupView[e].counter=0}))})),i(this,"renderViewCount",(function(){var e="";Object.keys(n.countGroupView).forEach((function(t,i){if(n.countGroupView[t].counter>0){var o=n.countGroupView[t],a=o.counter,s=r(a,o.views);i>0&&e.length>1&&(e+=", "),e+="".concat(a," ").concat(s)}})),e.length>=20&&Object.keys(n.countGroupView).length>2&&(e=e.slice(0,20)+"..."),n.input.textContent=e})),i(this,"renderStartCount",(function(e){var t=e.countElements,i="";t.forEach((function(t,n){if(t.startValue>0){var o=e.countGroupView[t.countGroupName],a=o.counter,s=r(a,o.views);n>0&&i.length>1&&(i+=", "),i+="".concat(a," ").concat(s)}})),i.length>=20&&t.length>2&&(i=i.slice(0,20)+"...");var o=i.split(",");o.length>1&&o[0].trim()===o[1].trim()&&(i=o[0]),n.input.textContent=i})),i(this,"getCountItem",(function(e){var t=o("li","drop-down__count-item"),i=o("p","drop-down__count-item-name",e.name),r=o("div","drop-down__counter-menu"),a=o("button","drop-down__counter-btn");a.classList.add("drop-down__counter-btn--minus"),e.startValue?e.startValue===e.minValue&&(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")):(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")),a.type="button";var s=o("p","drop-down__select-view");s.textContent=e.counter,s.id="view-".concat(e.id);var l=o("button","drop-down__counter-btn");return l.classList.add("drop-down__counter-btn--plus"),l.type="button",l.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];e.counter++,t.counter++,s.textContent=e.counter,n.renderViewCount(),a.classList.contains("drop-down__counter-btn--disabled")&&(a.classList.remove("drop-down__counter-btn--disabled"),a.removeAttribute("disabled"))})),a.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];(e.counter--,t.counter--,s.textContent=e.counter,e.counter-1<e.minValue&&(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")),n.renderViewCount(),0===t.counter)&&(Object.keys(n.countGroupView).every((function(e){return 0===n.countGroupView[e].counter}))&&(n.input.textContent=n.placeholder))})),r.appendChild(a),r.appendChild(s),r.appendChild(l),t.appendChild(i),t.appendChild(r),t})),i(this,"init",(function(){var e=n.getModifiedCountElements();n.countElements=e;var t=o("div","drop-down__wrap"),i=o("ul","drop-down__count-list"),r=o("div","drop-down__control"),a=o("button","drop-down__button","Очистить");a.type="button",a.addEventListener("click",n.onClickClear);var s=o("button","drop-down__button","Применить");s.type="button",s.classList.add("drop-down__button--accent"),s.addEventListener("click",n.hide);var l=document.createDocumentFragment();n.countElements.forEach((function(e){var t=n.getCountItem(e);l.appendChild(t)})),i.appendChild(l),n.isHideControl||(r.appendChild(a),r.appendChild(s)),t.appendChild(i),n.isHideControl||t.appendChild(r),n.dropDownParent.appendChild(t),n.container.appendChild(n.dropDownParent)})),t.container){this.container=t.container;var a=o("section","drop-down");this.dropDownParent=a}else console.error("Expected container(node) inside constructor object but not received");if(t.input){var s=t.placeholder?t.placeholder:"Выберите элимент";this.placeholder=s,this.input=t.input,this.hasHaveStartValue(t.countElements)?this.renderStartCount(t):this.input.textContent=s,t.isPinShow?this.show():this.input.addEventListener("click",this.show)}else console.error("Expected input(node) inside constructor object but not received");t.countElements?(this.countElements=t.countElements,this.inputViews=[]):console.error("Expected countElements(Array) inside constructor object but not received"),t.countGroupView?this.countGroupView=t.countGroupView:console.error("Expected countGroupView(Array) inside constructor object but not received"),t.isHideControl&&(this.isHideControl=t.isHideControl),t.isPinShow&&(this.isPinShow=t.isPinShow)}},26:function(e,t,n){var i,o,r;
/*!
* inputmask.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(4)],void 0===(r="function"==typeof(i=function(e){return e.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}}),e.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,o){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)}}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),e})?i.apply(t,o):i)||(e.exports=r)},27:function(e,t,n){var i,o,r;
/*!
* dependencyLibs/inputmask.dependencyLib.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(23)],void 0===(r="function"==typeof(i=function(e){var t=e.document;function n(e){return null!=e&&e===e.window}function i(e){return e instanceof Element}function o(n){return n instanceof o?n:this instanceof o?void(null!=n&&n!==e&&(this[0]=n.nodeName?n:void 0!==n[0]&&n[0].nodeName?n[0]:t.querySelector(n),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new o(n)}return o.prototype={on:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,o=this[0],r=function(e,i){o.addEventListener?o.addEventListener(e,t,!1):o.attachEvent&&o.attachEvent("on"+e,t),n[e]=n[e]||{},n[e][i]=n[e][i]||[],n[e][i].push(t)},a=e.split(" "),s=0;s<a.length;s++){var l=a[s].split(".");r(l[0],l[1]||"global")}return this},off:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,o=this[0],r=function(e,t,i){if(e in n==1)if(o.removeEventListener?o.removeEventListener(e,i,!1):o.detachEvent&&o.detachEvent("on"+e,i),"global"===t)for(var r in n[e])n[e][r].splice(n[e][r].indexOf(i),1);else n[e][t].splice(n[e][t].indexOf(i),1)},a=function(e,i){var o,r,a=[];if(e.length>0)if(void 0===t)for(o=0,r=n[e][i].length;o<r;o++)a.push({ev:e,namespace:i&&i.length>0?i:"global",handler:n[e][i][o]});else a.push({ev:e,namespace:i&&i.length>0?i:"global",handler:t});else if(i.length>0)for(var s in n)for(var l in n[s])if(l===i)if(void 0===t)for(o=0,r=n[s][l].length;o<r;o++)a.push({ev:s,namespace:l,handler:n[s][l][o]});else a.push({ev:s,namespace:l,handler:t});return a},s=e.split(" "),l=0;l<s.length;l++)for(var p=s[l].split("."),u=a(p[0],p[1]),c=0,d=u.length;c<d;c++)r(u[c].ev,u[c].namespace,u[c].handler);return this},trigger:function(e){if(i(this[0]))for(var n=this[0].eventRegistry,r=this[0],a="string"==typeof e?e.split(" "):[e.type],s=0;s<a.length;s++){var l=a[s].split("."),p=l[0],u=l[1]||"global";if(void 0!==t&&"global"===u){var c,d,f={bubbles:!0,cancelable:!0,detail:arguments[1]};if(t.createEvent){try{c=new CustomEvent(p,f)}catch(e){(c=t.createEvent("CustomEvent")).initCustomEvent(p,f.bubbles,f.cancelable,f.detail)}e.type&&o.extend(c,e),r.dispatchEvent(c)}else(c=t.createEventObject()).eventType=p,c.detail=arguments[1],e.type&&o.extend(c,e),r.fireEvent("on"+c.eventType,c)}else if(void 0!==n[p])if(arguments[0]=arguments[0].type?arguments[0]:o.Event(arguments[0]),"global"===u)for(var m in n[p])for(d=0;d<n[p][m].length;d++)n[p][m][d].apply(r,arguments);else for(d=0;d<n[p][u].length;d++)n[p][u][d].apply(r,arguments)}return this}},o.isFunction=function(e){return"function"==typeof e},o.noop=function(){},o.isArray=Array.isArray,o.inArray=function(e,t,n){return null==t?-1:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}(t,e)},o.valHooks=void 0,o.isPlainObject=function(e){return!("object"!=typeof e||e.nodeType||n(e)||e.constructor&&!Object.hasOwnProperty.call(e.constructor.prototype,"isPrototypeOf"))},o.extend=function(){var e,t,n,i,r,a,s=arguments[0]||{},l=1,p=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[l]||{},l++),"object"==typeof s||o.isFunction(s)||(s={}),l===p&&(s=this,l--);l<p;l++)if(null!=(e=arguments[l]))for(t in e)n=s[t],s!==(i=e[t])&&(u&&i&&(o.isPlainObject(i)||(r=o.isArray(i)))?(r?(r=!1,a=n&&o.isArray(n)?n:[]):a=n&&o.isPlainObject(n)?n:{},s[t]=o.extend(u,a,i)):void 0!==i&&(s[t]=i));return s},o.each=function(e,t){var i=0;if(function(e){var t="length"in e&&e.length,i=typeof e;return"function"!==i&&!n(e)&&(!(1!==e.nodeType||!t)||("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e))}(e))for(var o=e.length;i<o&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},o.data=function(e,t,n){if(void 0===n)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=n},"function"==typeof e.CustomEvent?o.Event=e.CustomEvent:(o.Event=function(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var i=t.createEvent("CustomEvent");return i.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),i},o.Event.prototype=e.Event.prototype),o})?i.apply(t,o):i)||(e.exports=r)},28:function(e,t,n){var i,o,r;
/*!
* inputmask.date.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(4)],void 0===(r="function"==typeof(i=function(e){var t=e.dependencyLib,n={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return a(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return a(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return a(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return a(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return a(Date.prototype.getHours.call(this),2)}],hhh:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return a(Date.prototype.getHours.call(this),2)}],HHH:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return a(Date.prototype.getMinutes.call(this),2)}],ss:["[0-5][0-9]",Date.prototype.setSeconds,"seconds",function(){return a(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return a(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return a(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},i={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function o(e){if(!e.tokenizer){var t=[];for(var i in n)-1===t.indexOf(i[0])&&t.push(i[0]);e.tokenizer="("+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function r(t,i,r,a){for(var s,l="";s=o(r).exec(t);)if(void 0===i)if(n[s[0]])l+="("+n[s[0]][0]+")";else switch(s[0]){case"[":l+="(";break;case"]":l+=")?";break;default:l+=e.escapeRegex(s[0])}else n[s[0]]?!0!==a&&n[s[0]][3]?l+=n[s[0]][3].call(i.date):n[s[0]][2]?l+=i["raw"+n[s[0]][2]]:l+=s[0]:l+=s[0];return l}function a(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function s(e,t,i){var r,a,s,l={date:new Date(1,0,1)},p=e;function u(e){var t=e.replace(/[^0-9]/g,"0");if(t!=e){var n=e.replace(/[^0-9]/g,""),o=(i.min&&i.min[r]||e).toString(),a=(i.max&&i.max[r]||e).toString();t=n+(n<o.slice(0,n.length)?o.slice(n.length):n>a.slice(0,n.length)?a.slice(n.length):t.toString().slice(n.length))}return t}function c(e,t,n){e[r]=u(t),e["raw"+r]=t,void 0!==s&&s.call(e.date,"month"==r?parseInt(e[r])-1:e[r])}if("string"==typeof p){for(;a=o(i).exec(t);){var d=p.slice(0,a[0].length);n.hasOwnProperty(a[0])&&(n[a[0]][0],r=n[a[0]][2],s=n[a[0]][1],c(l,d)),p=p.slice(d.length)}return l}if(p&&"object"==typeof p&&p.hasOwnProperty("date"))return p}return e.extendAliases({datetime:{mask:function(e){return n.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=i[e.inputFormat]||e.inputFormat,e.displayFormat=i[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=i[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[\[\]]/,""),e.regex=r(e.inputFormat,void 0,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},postValidation:function(e,t,n,i){i.min=s(i.min,i.inputFormat,i),i.max=s(i.max,i.inputFormat,i);var o=n,a=s(e.join(""),i.inputFormat,i);return o&&a.date.getTime()==a.date.getTime()&&(o=(o=function(e,t){return(!isFinite(e.rawday)||"29"==e.day&&!isFinite(e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)&&t}(a,o))&&function(e,t){var n=!0;if(t.min){if(e.rawyear){var i=e.rawyear.replace(/[^0-9]/g,""),o=t.min.year.substr(0,i.length);n=o<=i}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(n=t.min.date.getTime()<=e.date.getTime())}return n&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(n=t.max.date.getTime()>=e.date.getTime()),n}(a,i)),t&&o&&n.pos!==t?{buffer:r(i.inputFormat,a,i),refreshFromBuffer:{start:t,end:n.pos}}:o},onKeyDown:function(n,i,r,s){if(n.ctrlKey&&n.keyCode===e.keyCode.RIGHT){for(var l,p=new Date,u="";l=o(s).exec(s.inputFormat);)"d"===l[0].charAt(0)?u+=a(p.getDate(),l[0].length):"m"===l[0].charAt(0)?u+=a(p.getMonth()+1,l[0].length):"yyyy"===l[0]?u+=p.getFullYear().toString():"y"===l[0].charAt(0)&&(u+=a(p.getYear(),l[0].length));this.inputmask._valueSet(u),t(this).trigger("setvalue")}},onUnMask:function(e,t,n){return r(n.outputFormat,s(e,n.inputFormat,n),n,!0)},casing:function(e,t,n,i){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},insertMode:!1,shiftPositions:!1}}),e})?i.apply(t,o):i)||(e.exports=r)},29:function(e,t,n){var i,o,r;
/*!
* inputmask.numeric.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(4)],void 0===(r="function"==typeof(i=function(e){var t=e.dependencyLib;function n(t,n){for(var i="",o=0;o<t.length;o++)e.prototype.definitions[t.charAt(o)]||n.definitions[t.charAt(o)]||n.optionalmarker.start===t.charAt(o)||n.optionalmarker.end===t.charAt(o)||n.quantifiermarker.start===t.charAt(o)||n.quantifiermarker.end===t.charAt(o)||n.groupmarker.start===t.charAt(o)||n.groupmarker.end===t.charAt(o)||n.alternatormarker===t.charAt(o)?i+="\\"+t.charAt(o):i+=t.charAt(o);return i}return e.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),i=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===i?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var o="[+]";if(o+=n(e.prefix,e),!0===e.integerOptional?o+="~{1,"+e.integerDigits+"}":o+="~{"+e.integerDigits+"}",void 0!==e.digits){var r=e.decimalProtect?":":e.radixPoint,a=e.digits.toString().split(",");isFinite(a[0])&&a[1]&&isFinite(a[1])?o+=r+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?o+="["+r+";{1,"+e.digits+"}]":o+=r+";{"+e.digits+"}")}return o+=n(e.suffix,e),o+="[-]",e.greedy=!1,o},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputType:"text",inputmode:"numeric",preValidation:function(e,n,i,o,r,a){if("-"===i||i===r.negationSymbol.front)return!0===r.allowMinus&&(r.isNegative=void 0===r.isNegative||!r.isNegative,""===e.join("")||{caret:a.validPositions[n]?n:void 0,dopost:!0});if(!1===o&&i===r.radixPoint&&void 0!==r.digits&&(isNaN(r.digits)||parseInt(r.digits)>0)){var s=t.inArray(r.radixPoint,e);if(-1!==s&&void 0!==a.validPositions[s])return!0===r.numericInput?n===s:{caret:s+1}}return!0},postValidation:function(n,i,o,r){var a=r.suffix.split(""),s=r.prefix.split("");if(void 0===o.pos&&void 0!==o.caret&&!0!==o.dopost)return o;var l=void 0!==o.caret?o.caret:o.pos,p=n.slice();r.numericInput&&(l=p.length-l-1,p=p.reverse());var u=p[l];if(u===r.groupSeparator&&(u=p[l+=1]),l===p.length-r.suffix.length-1&&u===r.radixPoint)return o;void 0!==u&&u!==r.radixPoint&&u!==r.negationSymbol.front&&u!==r.negationSymbol.back&&(p[l]="?",r.prefix.length>0&&l>=(!1===r.isNegative?1:0)&&l<r.prefix.length-1+(!1===r.isNegative?1:0)?s[l-(!1===r.isNegative?1:0)]="?":r.suffix.length>0&&l>=p.length-r.suffix.length-(!1===r.isNegative?1:0)&&(a[l-(p.length-r.suffix.length-(!1===r.isNegative?1:0))]="?")),s=s.join(""),a=a.join("");var c=p.join("").replace(s,"");if(c=(c=(c=(c=c.replace(a,"")).replace(new RegExp(e.escapeRegex(r.groupSeparator),"g"),"")).replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),""),isNaN(r.placeholder)&&(c=c.replace(new RegExp(e.escapeRegex(r.placeholder),"g"),"")),c.length>1&&1!==c.indexOf(r.radixPoint)&&("0"===u&&(c=c.replace(/^\?/g,"")),c=c.replace(/^0/g,"")),c.charAt(0)===r.radixPoint&&""!==r.radixPoint&&!0!==r.numericInput&&(c="0"+c),""!==c){if(c=c.split(""),(!r.digitsOptional||r.enforceDigitsOnBlur&&"blur"===o.event)&&isFinite(r.digits)){var d=t.inArray(r.radixPoint,c),f=t.inArray(r.radixPoint,p);-1===d&&(c.push(r.radixPoint),d=c.length-1);for(var m=1;m<=r.digits;m++)r.digitsOptional&&(!r.enforceDigitsOnBlur||"blur"!==o.event)||void 0!==c[d+m]&&c[d+m]!==r.placeholder.charAt(0)?-1!==f&&void 0!==p[f+m]&&(c[d+m]=c[d+m]||p[f+m]):c[d+m]=o.placeholder||r.placeholder.charAt(0)}if(!0!==r.autoGroup||""===r.groupSeparator||u===r.radixPoint&&void 0===o.pos&&!o.dopost)c=c.join("");else{var h=c[c.length-1]===r.radixPoint&&o.c===r.radixPoint;c=e(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(c,r),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(c.join("")),h&&(c+=r.radixPoint),c.charAt(0)===r.groupSeparator&&c.substr(1)}}if(r.isNegative&&"blur"===o.event&&(r.isNegative="0"!==c),c=s+c,c+=a,r.isNegative&&(c=r.negationSymbol.front+c,c+=r.negationSymbol.back),c=c.split(""),void 0!==u)if(u!==r.radixPoint&&u!==r.negationSymbol.front&&u!==r.negationSymbol.back)(l=t.inArray("?",c))>-1?c[l]=u:l=o.caret||0;else if(u===r.radixPoint||u===r.negationSymbol.front||u===r.negationSymbol.back){var g=t.inArray(u,c);-1!==g&&(l=g)}r.numericInput&&(l=c.length-l-1,c=c.reverse());var b={caret:void 0!==u&&void 0===o.pos||void 0===l?l:l+(r.numericInput?-1:1),buffer:c,refreshFromBuffer:o.dopost||n.join("")!==c.join("")};return b.refreshFromBuffer?b:o},onBeforeWrite:function(n,i,o,r){if(n)switch(n.type){case"keydown":return r.postValidation(i,o,{caret:o,dopost:!0},r);case"blur":case"checkval":var a;if(function(t){void 0===t.parseMinMaxOptions&&(null!==t.min&&(t.min=t.min.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.min=t.min.replace(t.radixPoint,".")),t.min=isFinite(t.min)?parseFloat(t.min):NaN,isNaN(t.min)&&(t.min=Number.MIN_VALUE)),null!==t.max&&(t.max=t.max.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.max=t.max.replace(t.radixPoint,".")),t.max=isFinite(t.max)?parseFloat(t.max):NaN,isNaN(t.max)&&(t.max=Number.MAX_VALUE)),t.parseMinMaxOptions="done")}(r),null!==r.min||null!==r.max){if(a=r.onUnMask(i.join(""),void 0,t.extend({},r,{unmaskAsNumber:!0})),null!==r.min&&a<r.min)return r.isNegative=r.min<0,r.postValidation(r.min.toString().replace(".",r.radixPoint).split(""),o,{caret:o,dopost:!0,placeholder:"0"},r);if(null!==r.max&&a>r.max)return r.isNegative=r.max<0,r.postValidation(r.max.toString().replace(".",r.radixPoint).split(""),o,{caret:o,dopost:!0,placeholder:"0"},r)}return r.postValidation(i,o,{caret:o,placeholder:"0",event:"blur"},r);case"_checkval":return{caret:o}}},regex:{integerPart:function(t,n){return n?new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?"):new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?\\d+")},integerNPart:function(t){return new RegExp("[\\d"+e.escapeRegex(t.groupSeparator)+e.escapeRegex(t.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(t,n,i,o,r,a){var s;if("k"===t||"m"===t){s={insert:[],c:0};for(var l=0,p="k"===t?2:5;l<p;l++)s.insert.push({pos:i+l,c:0});return s.pos=i+p,s}if(!0===(s=o?new RegExp("[0-9"+e.escapeRegex(r.groupSeparator)+"]").test(t):new RegExp("[0-9]").test(t))){if(!0!==r.numericInput&&void 0!==n.validPositions[i]&&"~"===n.validPositions[i].match.def&&!a){var u=n.buffer.join(""),c=(u=(u=u.replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),"")).split(r.radixPoint);c.length>1&&(c[1]=c[1].replace(/0/g,r.placeholder.charAt(0))),"0"===c[0]&&(c[0]=c[0].replace(/0/g,r.placeholder.charAt(0))),u=c[0]+r.radixPoint+c[1]||"";var d=n._buffer.join("");for(u===r.radixPoint&&(u=d);null===u.match(e.escapeRegex(d)+"$");)d=d.slice(1);s=void 0===(u=(u=u.replace(d,"")).split(""))[i]?{pos:i,remove:i}:{pos:i}}}else o||t!==r.radixPoint||void 0!==n.validPositions[i-1]||(s={insert:{pos:i,c:0},pos:i+1});return s},cardinality:1},"+":{validator:function(e,t,n,i,o){return o.allowMinus&&("-"===e||e===o.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,o){return o.allowMinus&&e===o.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(t,n,i,o,r){var a="["+e.escapeRegex(r.radixPoint)+"]",s=new RegExp(a).test(t);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===r.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(t,n,i){if(""===n&&!0===i.nullable)return n;var o=t.replace(i.prefix,"");return o=(o=o.replace(i.suffix,"")).replace(new RegExp(e.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(o=o.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==o.indexOf(i.radixPoint)&&(o=o.replace(e.escapeRegex.call(this,i.radixPoint),".")),o=(o=o.replace(new RegExp("^"+e.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(i.negationSymbol.back)+"$"),""),Number(o)):o},isComplete:function(t,n){var i=(n.numericInput?t.slice().reverse():t).join("");return i=(i=(i=(i=(i=i.replace(new RegExp("^"+e.escapeRegex(n.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(n.negationSymbol.back)+"$"),"")).replace(n.prefix,"")).replace(n.suffix,"")).replace(new RegExp(e.escapeRegex(n.groupSeparator)+"([0-9]{3})","g"),"$1"),","===n.radixPoint&&(i=i.replace(e.escapeRegex(n.radixPoint),".")),isFinite(i)},onBeforeMask:function(n,i){i.isNegative=void 0;var o=i.radixPoint||",";"number"!=typeof n&&"number"!==i.inputType||""===o||(n=n.toString().replace(".",o));var r=n.split(o),a=r[0].replace(/[^\-0-9]/g,""),s=r.length>1?r[1].replace(/[^0-9]/g,""):"";n=a+(""!==s?o+s:s);var l=0;if(""!==o&&(l=s.length,""!==s)){var p=Math.pow(10,l||1);isFinite(i.digits)&&(l=parseInt(i.digits),p=Math.pow(10,l)),n=n.replace(e.escapeRegex(o),"."),isFinite(n)&&(n=Math.round(parseFloat(n)*p)/p),n=n.toString().replace(".",o)}return 0===i.digits&&-1!==n.indexOf(e.escapeRegex(o))&&(n=n.substring(0,n.indexOf(e.escapeRegex(o)))),function(e,n,i){if(n>0){var o=t.inArray(i.radixPoint,e);-1===o&&(e.push(i.radixPoint),o=e.length-1);for(var r=1;r<=n;r++)e[o+r]=e[o+r]||"0"}return e}(n.toString().split(""),l,i).join("")},onKeyDown:function(n,i,o,r){var a=t(this);if(n.ctrlKey)switch(n.keyCode){case e.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(r.step)),a.trigger("setvalue");break;case e.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(r.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),e})?i.apply(t,o):i)||(e.exports=r)},3:function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},34:function(e,t,n){e.exports=n.p+"img/star-baa2705.png"},35:function(e,t,n){e.exports=n.p+"img/star-active-1a5b8d2.png"},36:function(e,t,n){var i,o,r;/*! nouislider - 14.1.1 - 12/15/2019 */o=[],void 0===(r="function"==typeof(i=function(){"use strict";var e="14.1.1";function t(e){e.parentElement.removeChild(e)}function n(e){return null!=e}function i(e){e.preventDefault()}function o(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}function r(e,t,n){n>0&&(p(e,t),setTimeout((function(){u(e,t)}),n))}function a(e){return Math.max(Math.min(e,100),0)}function s(e){return Array.isArray(e)?e:[e]}function l(e){var t=(e=String(e)).split(".");return t.length>1?t[1].length:0}function p(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function u(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function c(e){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(e.compatMode||"");return{x:t?window.pageXOffset:n?e.documentElement.scrollLeft:e.body.scrollLeft,y:t?window.pageYOffset:n?e.documentElement.scrollTop:e.body.scrollTop}}function d(e,t){return 100/(t-e)}function f(e,t){return 100*t/(e[1]-e[0])}function m(e,t){for(var n=1;e>=t[n];)n+=1;return n}function h(e,t,n){if(n>=e.slice(-1)[0])return 100;var i=m(n,e),o=e[i-1],r=e[i],a=t[i-1],s=t[i];return a+function(e,t){return f(e,e[0]<0?t+Math.abs(e[0]):t-e[0])}([o,r],n)/d(a,s)}function g(e,t,n,i){if(100===i)return i;var o=m(i,e),r=e[o-1],a=e[o];return n?i-r>(a-r)/2?a:r:t[o-1]?e[o-1]+function(e,t){return Math.round(e/t)*t}(i-e[o-1],t[o-1]):i}function b(e,t,n){var i;if("number"==typeof t&&(t=[t]),!Array.isArray(t))throw new Error("noUiSlider (14.1.1): 'range' contains invalid value.");if(!o(i="min"===e?0:"max"===e?100:parseFloat(e))||!o(t[0]))throw new Error("noUiSlider (14.1.1): 'range' value isn't numeric.");n.xPct.push(i),n.xVal.push(t[0]),i?n.xSteps.push(!isNaN(t[1])&&t[1]):isNaN(t[1])||(n.xSteps[0]=t[1]),n.xHighestCompleteStep.push(0)}function v(e,t,n){if(t)if(n.xVal[e]!==n.xVal[e+1]){n.xSteps[e]=f([n.xVal[e],n.xVal[e+1]],t)/d(n.xPct[e],n.xPct[e+1]);var i=(n.xVal[e+1]-n.xVal[e])/n.xNumSteps[e],o=Math.ceil(Number(i.toFixed(3))-1),r=n.xVal[e]+n.xNumSteps[e]*o;n.xHighestCompleteStep[e]=r}else n.xSteps[e]=n.xHighestCompleteStep[e]=n.xVal[e]}function x(e,t,n){var i;this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=t;var o=[];for(i in e)e.hasOwnProperty(i)&&o.push([e[i],i]);for(o.length&&"object"==typeof o[0][0]?o.sort((function(e,t){return e[0][0]-t[0][0]})):o.sort((function(e,t){return e[0]-t[0]})),i=0;i<o.length;i++)b(o[i][1],o[i][0],this);for(this.xNumSteps=this.xSteps.slice(0),i=0;i<this.xNumSteps.length;i++)v(i,this.xNumSteps[i],this)}x.prototype.getMargin=function(e){var t=this.xNumSteps[0];if(t&&e/t%1!=0)throw new Error("noUiSlider (14.1.1): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&f(this.xVal,e)},x.prototype.toStepping=function(e){return e=h(this.xVal,this.xPct,e)},x.prototype.fromStepping=function(e){return function(e,t,n){if(n>=100)return e.slice(-1)[0];var i=m(n,t),o=e[i-1],r=e[i],a=t[i-1];return function(e,t){return t*(e[1]-e[0])/100+e[0]}([o,r],(n-a)*d(a,t[i]))}(this.xVal,this.xPct,e)},x.prototype.getStep=function(e){return e=g(this.xPct,this.xSteps,this.snap,e)},x.prototype.getDefaultStep=function(e,t,n){var i=m(e,this.xPct);return(100===e||t&&e===this.xPct[i-1])&&(i=Math.max(i-1,1)),(this.xVal[i]-this.xVal[i-1])/n},x.prototype.getNearbySteps=function(e){var t=m(e,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t],step:this.xNumSteps[t],highestStep:this.xHighestCompleteStep[t]}}},x.prototype.countStepDecimals=function(){var e=this.xNumSteps.map(l);return Math.max.apply(null,e)},x.prototype.convert=function(e){return this.getStep(this.toStepping(e))};var k={to:function(e){return void 0!==e&&e.toFixed(2)},from:Number};function y(e){if(function(e){return"object"==typeof e&&"function"==typeof e.to&&"function"==typeof e.from}(e))return!0;throw new Error("noUiSlider (14.1.1): 'format' requires 'to' and 'from' methods.")}function w(e,t){if(!o(t))throw new Error("noUiSlider (14.1.1): 'step' is not numeric.");e.singleStep=t}function _(e,t){if("object"!=typeof t||Array.isArray(t))throw new Error("noUiSlider (14.1.1): 'range' is not an object.");if(void 0===t.min||void 0===t.max)throw new Error("noUiSlider (14.1.1): Missing 'min' or 'max' in 'range'.");if(t.min===t.max)throw new Error("noUiSlider (14.1.1): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new x(t,e.snap,e.singleStep)}function E(e,t){if(t=s(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider (14.1.1): 'start' option is incorrect.");e.handles=t.length,e.start=t}function S(e,t){if(e.snap=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.1.1): 'snap' option must be a boolean.")}function C(e,t){if(e.animate=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.1.1): 'animate' option must be a boolean.")}function P(e,t){if(e.animationDuration=t,"number"!=typeof t)throw new Error("noUiSlider (14.1.1): 'animationDuration' option must be a number.")}function A(e,t){var n,i=[!1];if("lower"===t?t=[!0,!1]:"upper"===t&&(t=[!1,!0]),!0===t||!1===t){for(n=1;n<e.handles;n++)i.push(t);i.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==e.handles+1)throw new Error("noUiSlider (14.1.1): 'connect' option doesn't match handle count.");i=t}e.connect=i}function M(e,t){switch(t){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider (14.1.1): 'orientation' option is invalid.")}}function D(e,t){if(!o(t))throw new Error("noUiSlider (14.1.1): 'margin' option must be numeric.");if(0!==t&&(e.margin=e.spectrum.getMargin(t),!e.margin))throw new Error("noUiSlider (14.1.1): 'margin' option is only supported on linear sliders.")}function O(e,t){if(!o(t))throw new Error("noUiSlider (14.1.1): 'limit' option must be numeric.");if(e.limit=e.spectrum.getMargin(t),!e.limit||e.handles<2)throw new Error("noUiSlider (14.1.1): 'limit' option is only supported on linear sliders with 2 or more handles.")}function j(e,t){if(!o(t)&&!Array.isArray(t))throw new Error("noUiSlider (14.1.1): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(t)&&2!==t.length&&!o(t[0])&&!o(t[1]))throw new Error("noUiSlider (14.1.1): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==t){if(Array.isArray(t)||(t=[t,t]),e.padding=[e.spectrum.getMargin(t[0]),e.spectrum.getMargin(t[1])],!1===e.padding[0]||!1===e.padding[1])throw new Error("noUiSlider (14.1.1): 'padding' option is only supported on linear sliders.");if(e.padding[0]<0||e.padding[1]<0)throw new Error("noUiSlider (14.1.1): 'padding' option must be a positive number(s).");if(e.padding[0]+e.padding[1]>100)throw new Error("noUiSlider (14.1.1): 'padding' option must not exceed 100% of the range.")}}function U(e,t){switch(t){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider (14.1.1): 'direction' option was not recognized.")}}function N(e,t){if("string"!=typeof t)throw new Error("noUiSlider (14.1.1): 'behaviour' must be a string containing options.");var n=t.indexOf("tap")>=0,i=t.indexOf("drag")>=0,o=t.indexOf("fixed")>=0,r=t.indexOf("snap")>=0,a=t.indexOf("hover")>=0,s=t.indexOf("unconstrained")>=0;if(o){if(2!==e.handles)throw new Error("noUiSlider (14.1.1): 'fixed' behaviour must be used with 2 handles");D(e,e.start[1]-e.start[0])}if(s&&(e.margin||e.limit))throw new Error("noUiSlider (14.1.1): 'unconstrained' behaviour cannot be used with margin or limit");e.events={tap:n||r,drag:i,fixed:o,snap:r,hover:a,unconstrained:s}}function z(e,t){if(!1!==t)if(!0===t){e.tooltips=[];for(var n=0;n<e.handles;n++)e.tooltips.push(!0)}else{if(e.tooltips=s(t),e.tooltips.length!==e.handles)throw new Error("noUiSlider (14.1.1): must pass a formatter for all handles.");e.tooltips.forEach((function(e){if("boolean"!=typeof e&&("object"!=typeof e||"function"!=typeof e.to))throw new Error("noUiSlider (14.1.1): 'tooltips' must be passed a formatter or 'false'.")}))}}function F(e,t){e.ariaFormat=t,y(t)}function T(e,t){e.format=t,y(t)}function V(e,t){if(e.keyboardSupport=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.1.1): 'keyboardSupport' option must be a boolean.")}function L(e,t){e.documentElement=t}function R(e,t){if("string"!=typeof t&&!1!==t)throw new Error("noUiSlider (14.1.1): 'cssPrefix' must be a string or `false`.");e.cssPrefix=t}function B(e,t){if("object"!=typeof t)throw new Error("noUiSlider (14.1.1): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix)for(var n in e.cssClasses={},t)t.hasOwnProperty(n)&&(e.cssClasses[n]=e.cssPrefix+t[n]);else e.cssClasses=t}function G(e){var t={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:k,format:k},i={step:{r:!1,t:w},start:{r:!0,t:E},connect:{r:!0,t:A},direction:{r:!0,t:U},snap:{r:!1,t:S},animate:{r:!1,t:C},animationDuration:{r:!1,t:P},range:{r:!0,t:_},orientation:{r:!1,t:M},margin:{r:!1,t:D},limit:{r:!1,t:O},padding:{r:!1,t:j},behaviour:{r:!0,t:N},ariaFormat:{r:!1,t:F},format:{r:!1,t:T},tooltips:{r:!1,t:z},keyboardSupport:{r:!0,t:V},documentElement:{r:!1,t:L},cssPrefix:{r:!0,t:R},cssClasses:{r:!0,t:B}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};e.format&&!e.ariaFormat&&(e.ariaFormat=e.format),Object.keys(i).forEach((function(r){if(!n(e[r])&&void 0===o[r]){if(i[r].r)throw new Error("noUiSlider (14.1.1): '"+r+"' is required.");return!0}i[r].t(t,n(e[r])?e[r]:o[r])})),t.pips=e.pips;var r=document.createElement("div"),a=void 0!==r.style.msTransform,s=void 0!==r.style.transform;return t.transformRule=s?"transform":a?"msTransform":"webkitTransform",t.style=[["left","top"],["right","bottom"]][t.dir][t.ort],t}function I(e,n,o){var l,d,f,m,h,g,b,v,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},k=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}(),y=e,w=n.spectrum,_=[],E=[],S=[],C=0,P={},A=e.ownerDocument,M=n.documentElement||A.documentElement,D=A.body,O="rtl"===A.dir||1===n.ort?0:100;function j(e,t){var n=A.createElement("div");return t&&p(n,t),e.appendChild(n),n}function U(e,t){var i=j(e,n.cssClasses.origin),o=j(i,n.cssClasses.handle);return j(o,n.cssClasses.touchArea),o.setAttribute("data-handle",t),n.keyboardSupport&&(o.setAttribute("tabindex","0"),o.addEventListener("keydown",(function(e){return function(e,t){if(F()||T(t))return!1;var i=["Left","Right"],o=["Down","Up"],r=["PageDown","PageUp"],a=["Home","End"];n.dir&&!n.ort?i.reverse():n.ort&&!n.dir&&(o.reverse(),r.reverse());var s,l=e.key.replace("Arrow",""),p=l===r[0],u=l===r[1],c=l===o[0]||l===i[0]||p,d=l===o[1]||l===i[1]||u,f=l===a[0],m=l===a[1];if(!(c||d||f||m))return!0;if(e.preventDefault(),d||c){var h=c?0:1,g=de(t)[h];if(null===g)return!1;!1===g&&(g=w.getDefaultStep(E[t],c,10)),(u||p)&&(g*=5),g=Math.max(g,1e-7),g*=c?-1:1,s=_[t]+g}else s=m?n.spectrum.xVal[n.spectrum.xVal.length-1]:n.spectrum.xVal[0];return se(t,w.toStepping(s),!0,!0),te("slide",t),te("update",t),te("change",t),te("set",t),!1}(e,t)}))),o.setAttribute("role","slider"),o.setAttribute("aria-orientation",n.ort?"vertical":"horizontal"),0===t?p(o,n.cssClasses.handleLower):t===n.handles-1&&p(o,n.cssClasses.handleUpper),i}function N(e,t){return!!t&&j(e,n.cssClasses.connect)}function z(e,t){return!!n.tooltips[t]&&j(e.firstChild,n.cssClasses.tooltip)}function F(){return y.hasAttribute("disabled")}function T(e){return d[e].hasAttribute("disabled")}function V(){h&&(ee("update.tooltips"),h.forEach((function(e){e&&t(e)})),h=null)}function L(){V(),h=d.map(z),Z("update.tooltips",(function(e,t,i){if(h[t]){var o=e[t];!0!==n.tooltips[t]&&(o=n.tooltips[t].to(i[t])),h[t].innerHTML=o}}))}function R(e,t,i){var o=A.createElement("div"),r=[];r[0]=n.cssClasses.valueNormal,r[1]=n.cssClasses.valueLarge,r[2]=n.cssClasses.valueSub;var a=[];a[0]=n.cssClasses.markerNormal,a[1]=n.cssClasses.markerLarge,a[2]=n.cssClasses.markerSub;var s=[n.cssClasses.valueHorizontal,n.cssClasses.valueVertical],l=[n.cssClasses.markerHorizontal,n.cssClasses.markerVertical];function u(e,t){var i=t===n.cssClasses.value,o=i?r:a;return t+" "+(i?s:l)[n.ort]+" "+o[e]}return p(o,n.cssClasses.pips),p(o,0===n.ort?n.cssClasses.pipsHorizontal:n.cssClasses.pipsVertical),Object.keys(e).forEach((function(r){!function(e,r,a){if(-1!==(a=t?t(r,a):a)){var s=j(o,!1);s.className=u(a,n.cssClasses.marker),s.style[n.style]=e+"%",a>0&&((s=j(o,!1)).className=u(a,n.cssClasses.value),s.setAttribute("data-value",r),s.style[n.style]=e+"%",s.innerHTML=i.to(r))}}(r,e[r][0],e[r][1])})),o}function B(){m&&(t(m),m=null)}function I(e){B();var t=e.mode,n=e.density||1,i=e.filter||!1,o=function(e,t,n){if("range"===e||"steps"===e)return w.xVal;if("count"===e){if(t<2)throw new Error("noUiSlider (14.1.1): 'values' (>= 2) required for mode 'count'.");var i=t-1,o=100/i;for(t=[];i--;)t[i]=i*o;t.push(100),e="positions"}return"positions"===e?t.map((function(e){return w.fromStepping(n?w.getStep(e):e)})):"values"===e?n?t.map((function(e){return w.fromStepping(w.getStep(w.toStepping(e)))})):t:void 0}(t,e.values||!1,e.stepped||!1),r=function(e,t,n){var i,o={},r=w.xVal[0],a=w.xVal[w.xVal.length-1],s=!1,l=!1,p=0;return i=n.slice().sort((function(e,t){return e-t})),(n=i.filter((function(e){return!this[e]&&(this[e]=!0)}),{}))[0]!==r&&(n.unshift(r),s=!0),n[n.length-1]!==a&&(n.push(a),l=!0),n.forEach((function(i,r){var a,u,c,d,f,m,h,g,b,v,x=i,k=n[r+1],y="steps"===t;if(y&&(a=w.xNumSteps[r]),a||(a=k-x),!1!==x&&void 0!==k)for(a=Math.max(a,1e-7),u=x;u<=k;u=(u+a).toFixed(7)/1){for(g=(f=(d=w.toStepping(u))-p)/e,v=f/(b=Math.round(g)),c=1;c<=b;c+=1)o[(m=p+c*v).toFixed(5)]=[w.fromStepping(m),0];h=n.indexOf(u)>-1?1:y?2:0,!r&&s&&(h=0),u===k&&l||(o[d.toFixed(5)]=[u,h]),p=d}})),o}(n,t,o),a=e.format||{to:Math.round};return m=y.appendChild(R(r,i,a))}function H(){var e=l.getBoundingClientRect(),t="offset"+["Width","Height"][n.ort];return 0===n.ort?e.width||l[t]:e.height||l[t]}function K(e,t,i,o){var r=function(r){return!!(r=function(e,t,n){var i,o,r=0===e.type.indexOf("touch"),a=0===e.type.indexOf("mouse"),s=0===e.type.indexOf("pointer");if(0===e.type.indexOf("MSPointer")&&(s=!0),r){var l=function(e){return e.target===n||n.contains(e.target)};if("touchstart"===e.type){var p=Array.prototype.filter.call(e.touches,l);if(p.length>1)return!1;i=p[0].pageX,o=p[0].pageY}else{var u=Array.prototype.find.call(e.changedTouches,l);if(!u)return!1;i=u.pageX,o=u.pageY}}return t=t||c(A),(a||s)&&(i=e.clientX+t.x,o=e.clientY+t.y),e.pageOffset=t,e.points=[i,o],e.cursor=a||s,e}(r,o.pageOffset,o.target||t))&&!(F()&&!o.doNotReject)&&(a=y,s=n.cssClasses.tap,!((a.classList?a.classList.contains(s):new RegExp("\\b"+s+"\\b").test(a.className))&&!o.doNotReject)&&!(e===x.start&&void 0!==r.buttons&&r.buttons>1)&&(!o.hover||!r.buttons)&&(k||r.preventDefault(),r.calcPoint=r.points[n.ort],void i(r,o)));var a,s},a=[];return e.split(" ").forEach((function(e){t.addEventListener(e,r,!!k&&{passive:!0}),a.push([e,r])})),a}function q(e){var t,i,o,r,s,p,u=100*(e-(t=l,i=n.ort,o=t.getBoundingClientRect(),r=t.ownerDocument,s=r.documentElement,p=c(r),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(p.x=0),i?o.top+p.y-s.clientTop:o.left+p.x-s.clientLeft))/H();return u=a(u),n.dir?100-u:u}function Q(e,t){"mouseout"===e.type&&"HTML"===e.target.nodeName&&null===e.relatedTarget&&Y(e,t)}function W(e,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===e.buttons&&0!==t.buttonsProperty)return Y(e,t);var i=(n.dir?-1:1)*(e.calcPoint-t.startCalcPoint);oe(i>0,100*i/t.baseSize,t.locations,t.handleNumbers)}function Y(e,t){t.handle&&(u(t.handle,n.cssClasses.active),C-=1),t.listeners.forEach((function(e){M.removeEventListener(e[0],e[1])})),0===C&&(u(y,n.cssClasses.drag),ae(),e.cursor&&(D.style.cursor="",D.removeEventListener("selectstart",i))),t.handleNumbers.forEach((function(e){te("change",e),te("set",e),te("end",e)}))}function $(e,t){if(t.handleNumbers.some(T))return!1;var o;1===t.handleNumbers.length&&(o=d[t.handleNumbers[0]].children[0],C+=1,p(o,n.cssClasses.active)),e.stopPropagation();var r=[],a=K(x.move,M,W,{target:e.target,handle:o,listeners:r,startCalcPoint:e.calcPoint,baseSize:H(),pageOffset:e.pageOffset,handleNumbers:t.handleNumbers,buttonsProperty:e.buttons,locations:E.slice()}),s=K(x.end,M,Y,{target:e.target,handle:o,listeners:r,doNotReject:!0,handleNumbers:t.handleNumbers}),l=K("mouseout",M,Q,{target:e.target,handle:o,listeners:r,doNotReject:!0,handleNumbers:t.handleNumbers});r.push.apply(r,a.concat(s,l)),e.cursor&&(D.style.cursor=getComputedStyle(e.target).cursor,d.length>1&&p(y,n.cssClasses.drag),D.addEventListener("selectstart",i,!1)),t.handleNumbers.forEach((function(e){te("start",e)}))}function X(e){e.stopPropagation();var t=q(e.calcPoint),i=function(e){var t=100,n=!1;return d.forEach((function(i,o){if(!T(o)){var r=E[o],a=Math.abs(r-e);(a<t||a<=t&&e>r||100===a&&100===t)&&(n=o,t=a)}})),n}(t);if(!1===i)return!1;n.events.snap||r(y,n.cssClasses.tap,n.animationDuration),se(i,t,!0,!0),ae(),te("slide",i,!0),te("update",i,!0),te("change",i,!0),te("set",i,!0),n.events.snap&&$(e,{handleNumbers:[i]})}function J(e){var t=q(e.calcPoint),n=w.getStep(t),i=w.fromStepping(n);Object.keys(P).forEach((function(e){"hover"===e.split(".")[0]&&P[e].forEach((function(e){e.call(g,i)}))}))}function Z(e,t){P[e]=P[e]||[],P[e].push(t),"update"===e.split(".")[0]&&d.forEach((function(e,t){te("update",t)}))}function ee(e){var t=e&&e.split(".")[0],n=t&&e.substring(t.length);Object.keys(P).forEach((function(e){var i=e.split(".")[0],o=e.substring(i.length);t&&t!==i||n&&n!==o||delete P[e]}))}function te(e,t,i){Object.keys(P).forEach((function(o){var r=o.split(".")[0];e===r&&P[o].forEach((function(e){e.call(g,_.map(n.format.to),t,_.slice(),i||!1,E.slice())}))}))}function ne(e,t,i,o,r,s){return d.length>1&&!n.events.unconstrained&&(o&&t>0&&(i=Math.max(i,e[t-1]+n.margin)),r&&t<d.length-1&&(i=Math.min(i,e[t+1]-n.margin))),d.length>1&&n.limit&&(o&&t>0&&(i=Math.min(i,e[t-1]+n.limit)),r&&t<d.length-1&&(i=Math.max(i,e[t+1]-n.limit))),n.padding&&(0===t&&(i=Math.max(i,n.padding[0])),t===d.length-1&&(i=Math.min(i,100-n.padding[1]))),!((i=a(i=w.getStep(i)))===e[t]&&!s)&&i}function ie(e,t){var i=n.ort;return(i?t:e)+", "+(i?e:t)}function oe(e,t,n,i){var o=n.slice(),r=[!e,e],a=[e,!e];i=i.slice(),e&&i.reverse(),i.length>1?i.forEach((function(e,n){var i=ne(o,e,o[e]+t,r[n],a[n],!1);!1===i?t=0:(t=i-o[e],o[e]=i)})):r=a=[!0];var s=!1;i.forEach((function(e,i){s=se(e,n[e]+t,r[i],a[i])||s})),s&&i.forEach((function(e){te("update",e),te("slide",e)}))}function re(e,t){return n.dir?100-e-t:e}function ae(){S.forEach((function(e){var t=E[e]>50?-1:1,n=3+(d.length+t*e);d[e].style.zIndex=n}))}function se(e,t,i,o){return!1!==(t=ne(E,e,t,i,o,!1))&&(function(e,t){E[e]=t,_[e]=w.fromStepping(t);var i="translate("+ie(10*(re(t,0)-O)+"%","0")+")";d[e].style[n.transformRule]=i,le(e),le(e+1)}(e,t),!0)}function le(e){if(f[e]){var t=0,i=100;0!==e&&(t=E[e-1]),e!==f.length-1&&(i=E[e]);var o=i-t,r="translate("+ie(re(t,o)+"%","0")+")",a="scale("+ie(o/100,"1")+")";f[e].style[n.transformRule]=r+" "+a}}function pe(e,t){return null===e||!1===e||void 0===e?E[t]:("number"==typeof e&&(e=String(e)),e=n.format.from(e),!1===(e=w.toStepping(e))||isNaN(e)?E[t]:e)}function ue(e,t){var i=s(e),o=void 0===E[0];t=void 0===t||!!t,n.animate&&!o&&r(y,n.cssClasses.tap,n.animationDuration),S.forEach((function(e){se(e,pe(i[e],e),!0,!1)}));for(var a=1===S.length?0:1;a<S.length;++a)S.forEach((function(e){se(e,E[e],!0,!0)}));ae(),S.forEach((function(e){te("update",e),null!==i[e]&&t&&te("set",e)}))}function ce(){var e=_.map(n.format.to);return 1===e.length?e[0]:e}function de(e){var t=E[e],i=w.getNearbySteps(t),o=_[e],r=i.thisStep.step,a=null;if(n.snap)return[o-i.stepBefore.startValue||null,i.stepAfter.startValue-o||null];!1!==r&&o+r>i.stepAfter.startValue&&(r=i.stepAfter.startValue-o),a=o>i.thisStep.startValue?i.thisStep.step:!1!==i.stepBefore.step&&o-i.stepBefore.highestStep,100===t?r=null:0===t&&(a=null);var s=w.countStepDecimals();return null!==r&&!1!==r&&(r=Number(r.toFixed(s))),null!==a&&!1!==a&&(a=Number(a.toFixed(s))),[a,r]}return p(b=y,n.cssClasses.target),0===n.dir?p(b,n.cssClasses.ltr):p(b,n.cssClasses.rtl),0===n.ort?p(b,n.cssClasses.horizontal):p(b,n.cssClasses.vertical),p(b,"rtl"===getComputedStyle(b).direction?n.cssClasses.textDirectionRtl:n.cssClasses.textDirectionLtr),l=j(b,n.cssClasses.base),function(e,t){var i=j(t,n.cssClasses.connects);d=[],(f=[]).push(N(i,e[0]));for(var o=0;o<n.handles;o++)d.push(U(t,o)),S[o]=o,f.push(N(i,e[o+1]))}(n.connect,l),(v=n.events).fixed||d.forEach((function(e,t){K(x.start,e.children[0],$,{handleNumbers:[t]})})),v.tap&&K(x.start,l,X,{}),v.hover&&K(x.move,l,J,{hover:!0}),v.drag&&f.forEach((function(e,t){if(!1!==e&&0!==t&&t!==f.length-1){var i=d[t-1],o=d[t],r=[e];p(e,n.cssClasses.draggable),v.fixed&&(r.push(i.children[0]),r.push(o.children[0])),r.forEach((function(e){K(x.start,e,$,{handles:[i,o],handleNumbers:[t-1,t]})}))}})),ue(n.start),n.pips&&I(n.pips),n.tooltips&&L(),Z("update",(function(e,t,i,o,r){S.forEach((function(e){var t=d[e],o=ne(E,e,0,!0,!0,!0),a=ne(E,e,100,!0,!0,!0),s=r[e],l=n.ariaFormat.to(i[e]);o=w.fromStepping(o).toFixed(1),a=w.fromStepping(a).toFixed(1),s=w.fromStepping(s).toFixed(1),t.children[0].setAttribute("aria-valuemin",o),t.children[0].setAttribute("aria-valuemax",a),t.children[0].setAttribute("aria-valuenow",s),t.children[0].setAttribute("aria-valuetext",l)}))})),g={destroy:function(){for(var e in n.cssClasses)n.cssClasses.hasOwnProperty(e)&&u(y,n.cssClasses[e]);for(;y.firstChild;)y.removeChild(y.firstChild);delete y.noUiSlider},steps:function(){return S.map(de)},on:Z,off:ee,get:ce,set:ue,setHandle:function(e,t,n){if(!((e=Number(e))>=0&&e<S.length))throw new Error("noUiSlider (14.1.1): invalid handle number, got: "+e);se(e,pe(t,e),!0,!0),te("update",e),n&&te("set",e)},reset:function(e){ue(n.start,e)},__moveHandles:function(e,t,n){oe(e,t,E,n)},options:o,updateOptions:function(e,t){var i=ce(),r=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];r.forEach((function(t){void 0!==e[t]&&(o[t]=e[t])}));var a=G(o);r.forEach((function(t){void 0!==e[t]&&(n[t]=a[t])})),w=a.spectrum,n.margin=a.margin,n.limit=a.limit,n.padding=a.padding,n.pips?I(n.pips):B(),n.tooltips?L():V(),E=[],ue(e.start||i,t)},target:y,removePips:B,removeTooltips:V,pips:I}}return{__spectrum:x,version:e,create:function(e,t){if(!e||!e.nodeName)throw new Error("noUiSlider (14.1.1): create requires a single element, got: "+e);if(e.noUiSlider)throw new Error("noUiSlider (14.1.1): Slider was already initialized.");var n=I(e,G(t),t);return e.noUiSlider=n,n}}})?i.apply(t,o):i)||(e.exports=r)},37:function(e,t,n){var i,o,r;o=[],void 0===(r="function"==typeof(i=function(){"use strict";var e=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function t(e){return e.split("").reverse().join("")}function n(e,t){return e.substring(0,t.length)===t}function i(e,t,n){if((e[t]||e[n])&&e[t]===e[n])throw new Error(t)}function o(e){return"number"==typeof e&&isFinite(e)}function r(e,n,i,r,a,s,l,p,u,c,d,f){var m,h,g,b,v,x=f,k="",y="";return s&&(f=s(f)),!!o(f)&&(!1!==e&&0===parseFloat(f.toFixed(e))&&(f=0),f<0&&(m=!0,f=Math.abs(f)),!1!==e&&(v=e,b=(b=f).toString().split("e"),f=(+((b=(b=Math.round(+(b[0]+"e"+(b[1]?+b[1]+v:v)))).toString().split("e"))[0]+"e"+(b[1]?+b[1]-v:-v))).toFixed(v)),-1!==(f=f.toString()).indexOf(".")?(g=(h=f.split("."))[0],i&&(k=i+h[1])):g=f,n&&(g=t(g).match(/.{1,3}/g),g=t(g.join(t(n)))),m&&p&&(y+=p),r&&(y+=r),m&&u&&(y+=u),y+=g,y+=k,a&&(y+=a),c&&(y=c(y,x)),y)}function a(e,t,i,r,a,s,l,p,u,c,d,f){var m,h="";return d&&(f=d(f)),!(!f||"string"!=typeof f)&&(p&&n(f,p)&&(f=f.replace(p,""),m=!0),r&&n(f,r)&&(f=f.replace(r,"")),u&&n(f,u)&&(f=f.replace(u,""),m=!0),a&&function(e,t){return e.slice(-1*t.length)===t}(f,a)&&(f=f.slice(0,-1*a.length)),t&&(f=f.split(t).join("")),i&&(f=f.replace(i,".")),m&&(h+="-"),""!==(h=(h+=f).replace(/[^0-9\.\-.]/g,""))&&(h=Number(h),l&&(h=l(h)),!!o(h)&&h))}function s(t,n,i){var o,r=[];for(o=0;o<e.length;o+=1)r.push(t[e[o]]);return r.push(i),n.apply("",r)}return function t(n){if(!(this instanceof t))return new t(n);"object"==typeof n&&(n=function(t){var n,o,r,a={};for(void 0===t.suffix&&(t.suffix=t.postfix),n=0;n<e.length;n+=1)if(void 0===(r=t[o=e[n]]))"negative"!==o||a.negativeBefore?"mark"===o&&"."!==a.thousand?a[o]=".":a[o]=!1:a[o]="-";else if("decimals"===o){if(!(r>=0&&r<8))throw new Error(o);a[o]=r}else if("encoder"===o||"decoder"===o||"edit"===o||"undo"===o){if("function"!=typeof r)throw new Error(o);a[o]=r}else{if("string"!=typeof r)throw new Error(o);a[o]=r}return i(a,"mark","thousand"),i(a,"prefix","negative"),i(a,"prefix","negativeBefore"),a}(n),this.to=function(e){return s(n,r,e)},this.from=function(e){return s(n,a,e)})}})?i.apply(t,o):i)||(e.exports=r)},38:function(e,t,n){(t=n(1)(!1)).push([e.i,'/*! nouislider - 14.1.1 - 12/15/2019 */\n.noUi-target,.noUi-target *{-webkit-touch-callout:none;-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-ms-touch-action:none;touch-action:none;-ms-user-select:none;-moz-user-select:none;user-select:none;-moz-box-sizing:border-box;box-sizing:border-box}.noUi-target{position:relative}.noUi-base,.noUi-connects{width:100%;height:100%;position:relative;z-index:1}.noUi-connects{overflow:hidden;z-index:0}.noUi-connect,.noUi-origin{will-change:transform;position:absolute;z-index:1;top:0;right:0;-ms-transform-origin:0 0;-webkit-transform-origin:0 0;-webkit-transform-style:preserve-3d;transform-origin:0 0;transform-style:flat}.noUi-connect{height:100%;width:100%}.noUi-origin{height:10%;width:10%}.noUi-txt-dir-rtl.noUi-horizontal .noUi-origin{left:0;right:auto}.noUi-vertical .noUi-origin{width:0}.noUi-horizontal .noUi-origin{height:0}.noUi-handle{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute}.noUi-touch-area{height:100%;width:100%}.noUi-state-tap .noUi-connect,.noUi-state-tap .noUi-origin{-webkit-transition:transform .3s;transition:transform .3s}.noUi-state-drag *{cursor:inherit!important}.noUi-horizontal{height:18px}.noUi-horizontal .noUi-handle{width:34px;height:28px;right:-17px;top:-6px}.noUi-vertical{width:18px}.noUi-vertical .noUi-handle{width:28px;height:34px;right:-6px;top:-17px}.noUi-txt-dir-rtl.noUi-horizontal .noUi-handle{left:-17px;right:auto}.noUi-target{background:#FAFAFA;border-radius:4px;border:1px solid #D3D3D3;box-shadow:inset 0 1px 1px #F0F0F0,0 3px 6px -5px #BBB}.noUi-connects{border-radius:3px}.noUi-connect{background:#3FB8AF}.noUi-draggable{cursor:ew-resize}.noUi-vertical .noUi-draggable{cursor:ns-resize}.noUi-handle{border:1px solid #D9D9D9;border-radius:3px;background:#FFF;cursor:default;box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #EBEBEB,0 3px 6px -3px #BBB}.noUi-active{box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #DDD,0 3px 6px -3px #BBB}.noUi-handle:after,.noUi-handle:before{content:"";display:block;position:absolute;height:14px;width:1px;background:#E8E7E6;left:14px;top:6px}.noUi-handle:after{left:17px}.noUi-vertical .noUi-handle:after,.noUi-vertical .noUi-handle:before{width:14px;height:1px;left:6px;top:14px}.noUi-vertical .noUi-handle:after{top:17px}[disabled] .noUi-connect{background:#B8B8B8}[disabled] .noUi-handle,[disabled].noUi-handle,[disabled].noUi-target{cursor:not-allowed}.noUi-pips,.noUi-pips *{-moz-box-sizing:border-box;box-sizing:border-box}.noUi-pips{position:absolute;color:#999}.noUi-value{position:absolute;white-space:nowrap;text-align:center}.noUi-value-sub{color:#ccc;font-size:10px}.noUi-marker{position:absolute;background:#CCC}.noUi-marker-sub{background:#AAA}.noUi-marker-large{background:#AAA}.noUi-pips-horizontal{padding:10px 0;height:80px;top:100%;left:0;width:100%}.noUi-value-horizontal{-webkit-transform:translate(-50%,50%);transform:translate(-50%,50%)}.noUi-rtl .noUi-value-horizontal{-webkit-transform:translate(50%,50%);transform:translate(50%,50%)}.noUi-marker-horizontal.noUi-marker{margin-left:-1px;width:2px;height:5px}.noUi-marker-horizontal.noUi-marker-sub{height:10px}.noUi-marker-horizontal.noUi-marker-large{height:15px}.noUi-pips-vertical{padding:0 10px;height:100%;top:0;left:100%}.noUi-value-vertical{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);padding-left:25px}.noUi-rtl .noUi-value-vertical{-webkit-transform:translate(0,50%);transform:translate(0,50%)}.noUi-marker-vertical.noUi-marker{width:5px;height:2px;margin-top:-1px}.noUi-marker-vertical.noUi-marker-sub{width:10px}.noUi-marker-vertical.noUi-marker-large{width:15px}.noUi-tooltip{display:block;position:absolute;border:1px solid #D9D9D9;border-radius:3px;background:#fff;color:#000;padding:5px;text-align:center;white-space:nowrap}.noUi-horizontal .noUi-tooltip{-webkit-transform:translate(-50%,0);transform:translate(-50%,0);left:50%;bottom:120%}.noUi-vertical .noUi-tooltip{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);top:50%;right:120%}',""]),e.exports=t},4:function(e,t,n){var i,o,r;
/*!
* inputmask.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/o=[n(27),n(23)],void 0===(r="function"==typeof(i=function(e,t,n){var i=t.document,o=navigator.userAgent,r=o.indexOf("MSIE ")>0||o.indexOf("Trident/")>0,a=d("touchstart"),s=/iemobile/i.test(o),l=/iphone/i.test(o)&&!s;function p(t,i,o){if(!(this instanceof p))return new p(t,i,o);this.el=n,this.events={},this.maskset=n,this.refreshValue=!1,!0!==o&&(e.isPlainObject(t)?i=t:(i=i||{},t&&(i.alias=t)),this.opts=e.extend(!0,{},this.defaults,i),this.noMasksCache=i&&i.definitions!==n,this.userOptions=i||{},this.isRTL=this.opts.numericInput,u(this.opts.alias,i,this.opts))}function u(t,i,o){var r=p.prototype.aliases[t];return r?(r.alias&&u(r.alias,n,o),e.extend(!0,o,r),e.extend(!0,o,i),!0):(null===o.mask&&(o.mask=t),!1)}function c(t,i){function o(t,o,r){var a=!1;if(null!==t&&""!==t||((a=null!==r.regex)?t=(t=r.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(a=!0,t=".*")),1===t.length&&!1===r.greedy&&0!==r.repeat&&(r.placeholder=""),r.repeat>0||"*"===r.repeat||"+"===r.repeat){var s="*"===r.repeat?0:"+"===r.repeat?1:r.repeat;t=r.groupmarker[0]+t+r.groupmarker[1]+r.quantifiermarker[0]+s+","+r.repeat+r.quantifiermarker[1]}var l,u=a?"regex_"+r.regex:r.numericInput?t.split("").reverse().join(""):t;return p.prototype.masksCache[u]===n||!0===i?(l={mask:t,maskToken:p.prototype.analyseMask(t,a,r),validPositions:{},_buffer:n,buffer:n,tests:{},excludes:{},metadata:o,maskLength:n,jitOffset:{}},!0!==i&&(p.prototype.masksCache[u]=l,l=e.extend(!0,{},p.prototype.masksCache[u]))):l=e.extend(!0,{},p.prototype.masksCache[u]),l}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){if(null===t.keepStatic){t.keepStatic="auto";for(var r=0;r<t.mask.length;r++)if(t.mask[r].charAt(0)!==t.mask[0].charAt(0)){t.keepStatic=!0;break}}var a=t.groupmarker[0];return e.each(t.isRTL?t.mask.reverse():t.mask,(function(i,o){a.length>1&&(a+=t.groupmarker[1]+t.alternatormarker+t.groupmarker[0]),o.mask===n||e.isFunction(o.mask)?a+=o:a+=o.mask})),o(a+=t.groupmarker[1],t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==n&&!e.isFunction(t.mask.mask)?o(t.mask.mask,t.mask,t):o(t.mask,t.mask,t)}function d(e){var t=i.createElement("input"),n="on"+e,o=n in t;return o||(t.setAttribute(n,"return;"),o="function"==typeof t[n]),t=null,o}function f(o,u,c){u=u||this.maskset,c=c||this.opts;var m,h,g,b,v,x=this,k=this.el,y=this.isRTL,w=!1,_=!1,E=!1,S=!1,C=function(e,t,i,o,r){var a=c.greedy;r&&(c.greedy=!1),t=t||0;var s,l,p,u=[],d=0;M();do{if(!0===e&&P().validPositions[d])l=(p=r&&!0===P().validPositions[d].match.optionality&&P().validPositions[d+1]===n&&(!0===P().validPositions[d].generatedInput||P().validPositions[d].input==c.skipOptionalPartCharacter&&d>0)?j(d,F(d,s,d-1)):P().validPositions[d]).match,s=p.locator.slice(),u.push(!0===i?p.input:!1===i?l.nativeDef:$(d,l));else{l=(p=U(d,s,d-1)).match,s=p.locator.slice();var f=!0!==o&&(!1!==c.jitMasking?c.jitMasking:l.jit);(!1===f||f===n||"number"==typeof f&&isFinite(f)&&f>d)&&u.push(!1===i?l.nativeDef:$(d,l))}"auto"===c.keepStatic&&l.newBlockMarker&&null!==l.fn&&(c.keepStatic=d-1),d++}while((g===n||d<g)&&(null!==l.fn||""!==l.def)||t>d);return""===u[u.length-1]&&u.pop(),!1===i&&P().maskLength!==n||(P().maskLength=d-1),c.greedy=a,u};function P(){return u}function A(e){var t=P();t.buffer=n,!0!==e&&(t.validPositions={},t.p=0)}function M(e,t,i){var o=-1,r=-1,a=i||P().validPositions;for(var s in e===n&&(e=-1),a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(o=l),l>=e&&(r=l))}return-1===o||o==e?r:-1==r?o:e-o<r-e?o:r}function D(e){var t=e.locator[e.alternation];return"string"==typeof t&&t.length>0&&(t=t.split(",")[0]),t!==n?t.toString():""}function O(e,t){var i=(e.alternation!=n?e.mloc[D(e)]:e.locator).join("");if(""!==i)for(;i.length<t;)i+="0";return i}function j(e,t){for(var i,o,r,a=O(N(e=e>0?e-1:0)),s=0;s<t.length;s++){var l=t[s];i=O(l,a.length);var p=Math.abs(i-a);(o===n||""!==i&&p<o||r&&!c.greedy&&r.match.optionality&&"master"===r.match.newBlockMarker&&(!l.match.optionality||!l.match.newBlockMarker)||r&&r.match.optionalQuantifier&&!l.match.optionalQuantifier)&&(o=p,r=l)}return r}function U(e,t,n){return P().validPositions[e]||j(e,F(e,t?t.slice():t,n))}function N(e,t){return P().validPositions[e]?P().validPositions[e]:(t||F(e))[0]}function z(e,t){for(var n=!1,i=F(e),o=0;o<i.length;o++)if(i[o].match&&i[o].match.def===t){n=!0;break}return n}function F(t,i,o){var r,a=P().maskToken,s=i?o:0,l=i?i.slice():[0],p=[],u=!1,d=i?i.join(""):"";function f(i,o,a,l){function m(a,l,h){function g(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,(function(e,o){if(!0===o.isQuantifier?i=g(t,n.matches[e-1]):o.hasOwnProperty("matches")&&(i=g(t,o)),i)return!1})),i}function b(t,i,o){var r,a;if((P().tests[t]||P().validPositions[t])&&e.each(P().tests[t]||[P().validPositions[t]],(function(e,t){if(t.mloc[i])return r=t,!1;var s=o!==n?o:t.alternation,l=t.locator[s]!==n?t.locator[s].toString().indexOf(i):-1;(a===n||l<a)&&-1!==l&&(r=t,a=l)})),r){var s=r.locator[r.alternation];return(r.mloc[i]||r.mloc[s]||r.locator).slice((o!==n?o:r.alternation)+1)}return o!==n?b(t,i):n}function v(e,t){function n(e){for(var t,n,i=[],o=0,r=e.length;o<r;o++)if("-"===e.charAt(o))for(n=e.charCodeAt(o+1);++t<n;)i.push(String.fromCharCode(t));else t=e.charCodeAt(o),i.push(e.charAt(o));return i.join("")}return c.regex&&null!==e.match.fn&&null!==t.match.fn?-1!==n(t.match.def.replace(/[\[\]]/g,"")).indexOf(n(e.match.def.replace(/[\[\]]/g,""))):e.match.def===t.match.nativeDef}function x(e,t){if(t===n||e.alternation===t.alternation&&-1===e.locator[e.alternation].toString().indexOf(t.locator[t.alternation])){e.mloc=e.mloc||{};var i=e.locator[e.alternation];if(i!==n){if("string"==typeof i&&(i=i.split(",")[0]),e.mloc[i]===n&&(e.mloc[i]=e.locator.slice()),t!==n){for(var o in t.mloc)"string"==typeof o&&(o=o.split(",")[0]),e.mloc[o]===n&&(e.mloc[o]=t.mloc[o]);e.locator[e.alternation]=Object.keys(e.mloc).join(",")}return!0}e.alternation=n}return!1}if(s>500&&h!==n)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+P().mask;if(s===t&&a.matches===n)return p.push({match:a,locator:l.reverse(),cd:d,mloc:{}}),!0;if(a.matches!==n){if(a.isGroup&&h!==a){if(a=m(i.matches[e.inArray(a,i.matches)+1],l,h))return!0}else if(a.isOptional){var k=a;if(a=f(a,o,l,h)){if(e.each(p,(function(e,t){t.match.optionality=!0})),r=p[p.length-1].match,h!==n||!g(r,k))return!0;u=!0,s=t}}else if(a.isAlternator){var y,w=a,_=[],E=p.slice(),S=l.length,C=o.length>0?o.shift():-1;if(-1===C||"string"==typeof C){var A,M=s,D=o.slice(),O=[];if("string"==typeof C)O=C.split(",");else for(A=0;A<w.matches.length;A++)O.push(A.toString());if(P().excludes[t]){for(var j=O.slice(),U=0,N=P().excludes[t].length;U<N;U++)O.splice(O.indexOf(P().excludes[t][U].toString()),1);0===O.length&&(P().excludes[t]=n,O=j)}(!0===c.keepStatic||isFinite(parseInt(c.keepStatic))&&M>=c.keepStatic)&&(O=O.slice(0,1));for(var z=!1,F=0;F<O.length;F++){A=parseInt(O[F]),p=[],o="string"==typeof C&&b(s,A,S)||D.slice(),w.matches[A]&&m(w.matches[A],[A].concat(l),h)?a=!0:0===F&&(z=!0),y=p.slice(),s=M,p=[];for(var T=0;T<y.length;T++){var V=y[T],L=!1;V.match.jit=V.match.jit||z,V.alternation=V.alternation||S,x(V);for(var R=0;R<_.length;R++){var B=_[R];if("string"!=typeof C||V.alternation!==n&&-1!==e.inArray(V.locator[V.alternation].toString(),O)){if(V.match.nativeDef===B.match.nativeDef){L=!0,x(B,V);break}if(v(V,B)){x(V,B)&&(L=!0,_.splice(_.indexOf(B),0,V));break}if(v(B,V)){x(B,V);break}if(q=B,(K=V).locator.slice(K.alternation).join("")==q.locator.slice(q.alternation).join("")&&null===K.match.fn&&null!==q.match.fn&&q.match.fn.test(K.match.def,P(),t,!1,c,!1)){x(V,B)&&(L=!0,_.splice(_.indexOf(B),0,V));break}}}L||_.push(V)}}p=E.concat(_),s=t,u=p.length>0,a=_.length>0,o=D.slice()}else a=m(w.matches[C]||i.matches[C],[C].concat(l),h);if(a)return!0}else if(a.isQuantifier&&h!==i.matches[e.inArray(a,i.matches)-1])for(var G=a,I=o.length>0?o.shift():0;I<(isNaN(G.quantifier.max)?I+1:G.quantifier.max)&&s<=t;I++){var H=i.matches[e.inArray(G,i.matches)-1];if(a=m(H,[I].concat(l),H)){if((r=p[p.length-1].match).optionalQuantifier=I>=G.quantifier.min,r.jit=(I||1)*H.matches.indexOf(r)>=G.quantifier.jit,r.optionalQuantifier&&g(r,H)){u=!0,s=t;break}return r.jit&&(P().jitOffset[t]=H.matches.indexOf(r)),!0}}else if(a=f(a,o,l,h))return!0}else s++;var K,q}for(var h=o.length>0?o.shift():0;h<i.matches.length;h++)if(!0!==i.matches[h].isQuantifier){var g=m(i.matches[h],[h].concat(a),l);if(g&&s===t)return g;if(s>t)break}}if(t>-1){if(i===n){for(var m,h=t-1;(m=P().validPositions[h]||P().tests[h])===n&&h>-1;)h--;m!==n&&h>-1&&(l=function(t,i){var o=[];return e.isArray(i)||(i=[i]),i.length>0&&(i[0].alternation===n?0===(o=j(t,i.slice()).locator.slice()).length&&(o=i[0].locator.slice()):e.each(i,(function(e,t){if(""!==t.def)if(0===o.length)o=t.locator.slice();else for(var n=0;n<o.length;n++)t.locator[n]&&-1===o[n].toString().indexOf(t.locator[n])&&(o[n]+=","+t.locator[n])}))),o}(h,m),d=l.join(""),s=h)}if(P().tests[t]&&P().tests[t][0].cd===d)return P().tests[t];for(var g=l.shift();g<a.length&&!(f(a[g],l,[g])&&s===t||s>t);g++);}return(0===p.length||u)&&p.push({match:{fn:null,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:d}),i!==n&&P().tests[t]?e.extend(!0,[],p):(P().tests[t]=e.extend(!0,[],p),P().tests[t])}function T(){return P()._buffer===n&&(P()._buffer=C(!1,1),P().buffer===n&&(P().buffer=P()._buffer.slice())),P()._buffer}function V(e){return P().buffer!==n&&!0!==e||(P().buffer=C(!0,M(),!0),P()._buffer===n&&(P()._buffer=P().buffer.slice())),P().buffer}function L(e,t,i){var o,r;if(!0===e)A(),e=0,t=i.length;else for(o=e;o<t;o++)delete P().validPositions[o];for(r=e,o=e;o<t;o++)if(A(!0),i[o]!==c.skipOptionalPartCharacter){var a=I(r,i[o],!0,!0);!1!==a&&(A(!0),r=a.caret!==n?a.caret:a.pos+1)}}function R(t,n,i){switch(c.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var o=P().validPositions[i-1];t=0===i||o&&o.input===String.fromCharCode(p.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(c.casing)){var r=Array.prototype.slice.call(arguments);r.push(P().validPositions),t=c.casing.apply(this,r)}}return t}function B(t,i,o){for(var r,a=c.greedy?i:i.slice(0,1),s=!1,l=o!==n?o.split(","):[],p=0;p<l.length;p++)-1!==(r=t.indexOf(l[p]))&&t.splice(r,1);for(var u=0;u<t.length;u++)if(-1!==e.inArray(t[u],a)){s=!0;break}return s}function G(t,i,o,r,a){var s,l,p,u,c,d,f,m=e.extend(!0,{},P().validPositions),h=!1,g=a!==n?a:M();if(-1===g&&a===n)l=(u=N(s=0)).alternation;else for(;g>=0;g--)if((p=P().validPositions[g])&&p.alternation!==n){if(u&&u.locator[p.alternation]!==p.locator[p.alternation])break;s=g,l=P().validPositions[s].alternation,u=p}if(l!==n){f=parseInt(s),P().excludes[f]=P().excludes[f]||[],!0!==t&&P().excludes[f].push(D(u));var b=[],v=0;for(c=f;c<M(n,!0)+1;c++)(d=P().validPositions[c])&&!0!==d.generatedInput?b.push(d.input):c<t&&v++,delete P().validPositions[c];for(;P().excludes[f]&&P().excludes[f].length<10;){var x=-1*v,k=b.slice();for(P().tests[f]=n,A(!0),h=!0;k.length>0;){var y=k.shift();if(!(h=I(M(n,!0)+1,y,!1,r,!0)))break}if(h&&i!==n){var w=M(t)+1;for(c=f;c<M()+1;c++)((d=P().validPositions[c])===n||null==d.match.fn)&&c<t+x&&x++;h=I((t+=x)>w?w:t,i,o,r,!0)}if(h)break;if(A(),u=N(f),P().validPositions=e.extend(!0,{},m),!P().excludes[f]){h=G(t,i,o,r,f-1);break}var _=D(u);if(-1!==P().excludes[f].indexOf(_)){h=G(t,i,o,r,f-1);break}for(P().excludes[f].push(_),c=f;c<M(n,!0)+1;c++)delete P().validPositions[c]}}return P().excludes[f]=n,h}function I(t,i,o,r,a,s){function l(e){return y?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1}o=!0===o;var p=t;function u(i,o,a){var s=!1;return e.each(F(i),(function(p,u){var d=u.match;if(V(!0),!1!==(s=null!=d.fn?d.fn.test(o,P(),i,a,c,l(t)):(o===d.def||o===c.skipOptionalPartCharacter)&&""!==d.def&&{c:$(i,d,!0)||d.def,pos:i})){var f=s.c!==n?s.c:o,m=i;return f=f===c.skipOptionalPartCharacter&&null===d.fn?$(i,d,!0)||d.def:f,s.remove!==n&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort((function(e,t){return t-e})),(function(e,t){K({begin:t,end:t+1})}))),s.insert!==n&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort((function(e,t){return e-t})),(function(e,t){I(t.pos,t.c,!0,r)}))),!0!==s&&s.pos!==n&&s.pos!==i&&(m=s.pos),(!0===s||s.pos!==n||s.c!==n)&&(K(t,e.extend({},u,{input:R(f,d,m)}),r,m)||(s=!1),!1)}})),s}t.begin!==n&&(p=y?t.end:t.begin);var d=!0,f=e.extend(!0,{},P().validPositions);if(e.isFunction(c.preValidation)&&!o&&!0!==r&&!0!==s&&(d=c.preValidation(V(),p,i,l(t),c,P())),!0===d){if(H(n,p,!0),(g===n||p<g)&&(d=u(p,i,o),(!o||!0===r)&&!1===d&&!0!==s)){var m=P().validPositions[p];if(!m||null!==m.match.fn||m.match.def!==i&&i!==c.skipOptionalPartCharacter){if((c.insertMode||P().validPositions[Q(p)]===n)&&(!q(p,!0)||P().jitOffset[p]))if(P().jitOffset[p]&&P().validPositions[Q(p)]===n)!1!==(d=I(p+P().jitOffset[p],i,o))&&(d.caret=p);else for(var h=p+1,b=Q(p);h<=b;h++)if(!1!==(d=u(h,i,o))){d=H(p,d.pos!==n?d.pos:h)||d,p=h;break}}else d={caret:Q(p)}}!1!==d||!1===c.keepStatic||null!=c.regex&&!ae(V())||o||!0===a||(d=G(p,i,o,r)),!0===d&&(d={pos:p})}if(e.isFunction(c.postValidation)&&!1!==d&&!o&&!0!==r&&!0!==s){var v=c.postValidation(V(!0),t.begin!==n?y?t.end:t.begin:t,d,c);if(v!==n){if(v.refreshFromBuffer&&v.buffer){var x=v.refreshFromBuffer;L(!0===x?x:x.start,x.end,v.buffer)}d=!0===v?d:v}}return d&&d.pos===n&&(d.pos=p),!1!==d&&!0!==s||(A(!0),P().validPositions=e.extend(!0,{},f)),d}function H(t,i,o){var r;if(t===n)for(t=i-1;t>0&&!P().validPositions[t];t--);for(var a=t;a<i;a++)if(P().validPositions[a]===n&&!q(a,!0)&&(0==a?N(a):P().validPositions[a-1])){var s=F(a).slice();""===s[s.length-1].match.def&&s.pop();var l=j(a,s);if((l=e.extend({},l,{input:$(a,l.match,!0)||l.match.def})).generatedInput=!0,K(a,l,!0),!0!==o){var p=P().validPositions[i].input;P().validPositions[i]=n,r=I(i,p,!0,!0)}}return r}function K(t,i,o,r){function a(e,t,i){var o=t[e];if(o!==n&&(null===o.match.fn&&!0!==o.match.optionality||o.input===c.radixPoint)){var r=i.begin<=e-1?t[e-1]&&null===t[e-1].match.fn&&t[e-1]:t[e-1],a=i.end>e+1?t[e+1]&&null===t[e+1].match.fn&&t[e+1]:t[e+1];return r&&a}return!1}var s=t.begin!==n?t.begin:t,l=t.end!==n?t.end:t;if(t.begin>t.end&&(s=t.end,l=t.begin),r=r!==n?r:s,s!==l||c.insertMode&&P().validPositions[r]!==n&&o===n){var p=e.extend(!0,{},P().validPositions),u=M(n,!0);for(P().p=s,g=u;g>=s;g--)P().validPositions[g]&&"+"===P().validPositions[g].match.nativeDef&&(c.isNegative=!1),delete P().validPositions[g];var d=!0,f=r,m=(P().validPositions,!1),h=f,g=f;for(i&&(P().validPositions[r]=e.extend(!0,{},i),h++,f++,s<l&&g++);g<=u;g++){var b=p[g];if(b!==n&&(g>=l||g>=s&&!0!==b.generatedInput&&a(g,p,{begin:s,end:l}))){for(;""!==N(h).match.def;){if(!1===m&&p[h]&&p[h].match.nativeDef===b.match.nativeDef)P().validPositions[h]=e.extend(!0,{},p[h]),P().validPositions[h].input=b.input,H(n,h,!0),f=h+1,d=!0;else if(c.shiftPositions&&z(h,b.match.def)){var v=I(h,b.input,!0,!0);d=!1!==v,f=v.caret||v.insert?M():h+1,m=!0}else d=!0===b.generatedInput||b.input===c.radixPoint&&!0===c.numericInput;if(d)break;if(!d&&h>l&&q(h,!0)&&(null!==b.match.fn||h>P().maskLength))break;h++}""==N(h).match.def&&(d=!1),h=f}if(!d)break}if(!d)return P().validPositions=e.extend(!0,{},p),A(!0),!1}else i&&(P().validPositions[r]=e.extend(!0,{},i));return A(!0),!0}function q(e,t){var n=U(e).match;if(""===n.def&&(n=N(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=F(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function Q(e,t){for(var n=e+1;""!==N(n).match.def&&(!0===t&&(!0!==N(n).match.newBlockMarker||!q(n))||!0!==t&&!q(n));)n++;return n}function W(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==N(i).match.newBlockMarker||!0!==t&&!q(i)&&((n=F(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function Y(t,i,o,r,a){if(r&&e.isFunction(c.onBeforeWrite)){var s=c.onBeforeWrite.call(x,r,i,o,c);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;L(!0===l?l:l.start,l.end,s.buffer||i),i=V(!0)}o!==n&&(o=s.caret!==n?s.caret:o)}}if(t!==n&&(t.inputmask._valueSet(i.join("")),o===n||r!==n&&"blur"===r.type?pe(t,o,0===i.length):ie(t,o),!0===a)){var p=e(t),u=t.inputmask._valueGet();_=!0,p.trigger("input"),setTimeout((function(){u===T().join("")?p.trigger("cleared"):!0===ae(i)&&p.trigger("complete")}),0)}}function $(t,i,o){if((i=i||N(t).match).placeholder!==n||!0===o)return e.isFunction(i.placeholder)?i.placeholder(c):i.placeholder;if(null===i.fn){if(t>-1&&P().validPositions[t]===n){var r,a=F(t),s=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var l=0;l<a.length;l++)if(!0!==a[l].match.optionality&&!0!==a[l].match.optionalQuantifier&&(null===a[l].match.fn||r===n||!1!==a[l].match.fn.test(r.match.def,P(),t,!0,c))&&(s.push(a[l]),null===a[l].match.fn&&(r=a[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return c.placeholder.charAt(t%c.placeholder.length)}return i.def}return c.placeholder.charAt(t%c.placeholder.length)}function X(e,t){if(r){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var n=V().slice(),i=e.inputmask._valueGet();if(i!==t){var o=M();-1===o&&i===T().join("")?n=[]:-1!==o&&re(n),Y(e,n)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}var J,Z={on:function(t,i,o){var r=function(t){var i=this;if(i.inputmask===n&&"FORM"!==this.nodeName){var r=e.data(i,"_inputmask_opts");r?new p(r).mask(i):Z.off(i)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(i.disabled||i.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===c.tabThrough&&t.keyCode===p.keyCode.TAB))){switch(t.type){case"input":if(!0===_)return _=!1,t.preventDefault();if(a){var u=arguments;return setTimeout((function(){o.apply(i,u),ie(i,i.inputmask.caretPos,n,!0)}),0),!1}break;case"keydown":w=!1,_=!1;break;case"keypress":if(!0===w)return t.preventDefault();w=!0;break;case"click":if(s||l)return u=arguments,setTimeout((function(){o.apply(i,u)}),0),!1}var d=o.apply(i,arguments);return!1===d&&(t.preventDefault(),t.stopPropagation()),d}t.preventDefault()}};t.inputmask.events[i]=t.inputmask.events[i]||[],t.inputmask.events[i].push(r),-1!==e.inArray(i,["submit","reset"])?null!==t.form&&e(t.form).on(i,r):e(t).on(i,r)},off:function(t,n){var i;t.inputmask&&t.inputmask.events&&(n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,(function(n,i){for(;i.length>0;){var o=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,o):e(t).off(n,o)}delete t.inputmask.events[n]})))}},ee={keydownEvent:function(t){var n=e(this),i=t.keyCode,o=ie(this);if(i===p.keyCode.BACKSPACE||i===p.keyCode.DELETE||l&&i===p.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&i===p.keyCode.X&&!d("cut"))t.preventDefault(),se(0,i,o),Y(this,V(!0),P().p,t,this.inputmask._valueGet()!==V().join(""));else if(i===p.keyCode.END||i===p.keyCode.PAGE_DOWN){t.preventDefault();var r=Q(M());ie(this,t.shiftKey?o.begin:r,r,!0)}else i===p.keyCode.HOME&&!t.shiftKey||i===p.keyCode.PAGE_UP?(t.preventDefault(),ie(this,0,t.shiftKey?o.begin:0,!0)):(c.undoOnEscape&&i===p.keyCode.ESCAPE||90===i&&t.ctrlKey)&&!0!==t.altKey?(te(this,!0,!1,m.split("")),n.trigger("click")):i!==p.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===c.tabThrough&&i===p.keyCode.TAB&&(!0===t.shiftKey?(null===N(o.begin).match.fn&&(o.begin=Q(o.begin)),o.end=W(o.begin,!0),o.begin=W(o.end,!0)):(o.begin=Q(o.begin,!0),o.end=Q(o.begin,!0),o.end<P().maskLength&&o.end--),o.begin<P().maskLength&&(t.preventDefault(),ie(this,o.begin,o.end))):(c.insertMode=!c.insertMode,this.setAttribute("im-insert",c.insertMode));c.onKeyDown.call(this,t,V(),ie(this).begin,c),E=-1!==e.inArray(i,c.ignorables)},keypressEvent:function(t,i,o,r,a){var s=this,l=e(s),u=t.which||t.charCode||t.keyCode;if(!(!0===i||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||E))return u===p.keyCode.ENTER&&m!==V().join("")&&(m=V().join(""),setTimeout((function(){l.trigger("change")}),0)),!0;if(u){46===u&&!1===t.shiftKey&&""!==c.radixPoint&&(u=c.radixPoint.charCodeAt(0));var d,f=i?{begin:a,end:a}:ie(s),h=String.fromCharCode(u),g=0;if(c._radixDance&&c.numericInput){var b=V().indexOf(c.radixPoint.charAt(0))+1;f.begin<=b&&(u===c.radixPoint.charCodeAt(0)&&(g=1),f.begin-=1,f.end-=1)}P().writeOutBuffer=!0;var v=I(f,h,r);if(!1!==v&&(A(!0),d=v.caret!==n?v.caret:Q(v.pos.begin?v.pos.begin:v.pos),P().p=d),d=(c.numericInput&&v.caret===n?W(d):d)+g,!1!==o&&(setTimeout((function(){c.onKeyValidation.call(s,u,v,c)}),0),P().writeOutBuffer&&!1!==v)){var x=V();Y(s,x,d,t,!0!==i)}if(t.preventDefault(),i)return!1!==v&&(v.forwardPosition=d),v}},pasteEvent:function(n){var i,o=n.originalEvent||n,r=(e(this),this.inputmask._valueGet(!0)),a=ie(this);y&&(i=a.end,a.end=a.begin,a.begin=i);var s=r.substr(0,a.begin),l=r.substr(a.end,r.length);if(s===(y?T().reverse():T()).slice(0,a.begin).join("")&&(s=""),l===(y?T().reverse():T()).slice(a.end).join("")&&(l=""),t.clipboardData&&t.clipboardData.getData)r=s+t.clipboardData.getData("Text")+l;else{if(!o.clipboardData||!o.clipboardData.getData)return!0;r=s+o.clipboardData.getData("text/plain")+l}var p=r;if(e.isFunction(c.onBeforePaste)){if(!1===(p=c.onBeforePaste.call(x,r,c)))return n.preventDefault();p||(p=r)}return te(this,!1,!1,p.toString().split("")),Y(this,V(),Q(M()),n,m!==V().join("")),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(V().join("")!==i){var o=ie(n);if(i=function(e,t,n){if(s){var i=t.replace(V().join(""),"");if(1===i.length){var o=t.split("");o.splice(n.begin,0,i),t=o.join("")}}return t}(0,i=function(e,t,n){return"."===t.charAt(n.begin-1)&&""!==c.radixPoint&&((t=t.split(""))[n.begin-1]=c.radixPoint.charAt(0),t=t.join("")),t}(0,i,o),o),V().join("")!==i){var r=V().join(""),a=!c.numericInput&&i.length>r.length?-1:0,l=i.substr(0,o.begin),u=i.substr(o.begin),d=r.substr(0,o.begin+a),f=r.substr(o.begin+a),m=o,h="",g=!1;if(l!==d){var b,v=(g=l.length>=d.length)?l.length:d.length;for(b=0;l.charAt(b)===d.charAt(b)&&b<v;b++);g&&(m.begin=b-a,h+=l.slice(b,m.end))}if(u!==f&&(u.length>f.length?h+=u.slice(0,1):u.length<f.length&&(m.end+=f.length-u.length,g||""===c.radixPoint||""!==u||l.charAt(m.begin+a-1)!==c.radixPoint||(m.begin--,h=c.radixPoint))),Y(n,V(),{begin:m.begin+a,end:m.end+a}),h.length>0)e.each(h.split(""),(function(t,i){var o=new e.Event("keypress");o.which=i.charCodeAt(0),E=!1,ee.keypressEvent.call(n,o)}));else{m.begin===m.end-1&&(m.begin=W(m.begin+1),m.begin===m.end-1?ie(n,m.begin):ie(n,m.begin,m.end));var x=new e.Event("keydown");x.keyCode=c.numericInput?p.keyCode.BACKSPACE:p.keyCode.DELETE,ee.keydownEvent.call(n,x)}t.preventDefault()}}},beforeInputEvent:function(t){if(t.cancelable){var n=this;switch(t.inputType){case"insertText":return e.each(t.data.split(""),(function(t,i){var o=new e.Event("keypress");o.which=i.charCodeAt(0),E=!1,ee.keypressEvent.call(n,o)})),t.preventDefault();case"deleteContentBackward":return(i=new e.Event("keydown")).keyCode=p.keyCode.BACKSPACE,ee.keydownEvent.call(n,i),t.preventDefault();case"deleteContentForward":var i;return(i=new e.Event("keydown")).keyCode=p.keyCode.DELETE,ee.keydownEvent.call(n,i),t.preventDefault()}}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this,i=(i=t&&t.detail?t.detail[0]:arguments[1])||n.inputmask._valueGet(!0);e.isFunction(c.onBeforeMask)&&(i=c.onBeforeMask.call(x,i,c)||i),te(n,!0,!1,i=i.toString().split("")),m=V().join(""),(c.clearMaskOnLostFocus||c.clearIncomplete)&&n.inputmask._valueGet()===T().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();c.showMaskOnFocus&&(t!==V().join("")?Y(this,V(),Q(M())):!1===S&&ie(this,Q(M()))),!0===c.positionCaretOnTab&&!1===S&&ee.clickEvent.apply(this,[e,!0]),m=V().join("")},mouseleaveEvent:function(e){S=!1,c.clearMaskOnLostFocus&&i.activeElement!==this&&X(this,v)},clickEvent:function(t,o){var r=this;setTimeout((function(){if(i.activeElement===r){var t=ie(r);if(o&&(y?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(c.positionCaretOnClick){case"none":break;case"select":ie(r,0,V().length);break;case"ignore":ie(r,Q(M()));break;case"radixFocus":if(function(t){if(""!==c.radixPoint){var i=P().validPositions;if(i[t]===n||i[t].input===$(t)){if(t<Q(-1))return!0;var o=e.inArray(c.radixPoint,V());if(-1!==o){for(var r in i)if(o<r&&i[r].input!==$(r))return!1;return!0}}}return!1}(t.begin)){var a=V().join("").indexOf(c.radixPoint);ie(r,c.numericInput?Q(a):a);break}default:var s=t.begin,l=M(s,!0),p=Q(l);if(s<p)ie(r,q(s,!0)||q(s-1,!0)?s:Q(s));else{var u=P().validPositions[l],d=U(p,u?u.match.locator:n,u),f=$(p,d.match);if(""!==f&&V()[p]!==f&&!0!==d.match.optionalQuantifier&&!0!==d.match.newBlockMarker||!q(p,c.keepStatic)&&d.match.def===f){var m=Q(p);(s>=m||s===p)&&(p=m)}ie(r,p)}}}}),0)},cutEvent:function(n){e(this);var o=ie(this),r=n.originalEvent||n,a=t.clipboardData||r.clipboardData,s=y?V().slice(o.end,o.begin):V().slice(o.begin,o.end);a.setData("text",y?s.reverse().join(""):s.join("")),i.execCommand&&i.execCommand("copy"),se(0,p.keyCode.DELETE,o),Y(this,V(),P().p,n,m!==V().join(""))},blurEvent:function(t){var i=e(this);if(this.inputmask){X(this,v);var o=this.inputmask._valueGet(),r=V().slice();""===o&&b===n||(c.clearMaskOnLostFocus&&(-1===M()&&o===T().join("")?r=[]:re(r)),!1===ae(r)&&(setTimeout((function(){i.trigger("incomplete")}),0),c.clearIncomplete&&(A(),r=c.clearMaskOnLostFocus?[]:T().slice())),Y(this,r,n,t)),m!==V().join("")&&(m=r.join(""),i.trigger("change"))}},mouseenterEvent:function(e){S=!0,i.activeElement!==this&&c.showMaskOnHover&&X(this,(y?V().slice().reverse():V()).join(""))},submitEvent:function(e){m!==V().join("")&&h.trigger("change"),c.clearMaskOnLostFocus&&-1===M()&&k.inputmask._valueGet&&k.inputmask._valueGet()===T().join("")&&k.inputmask._valueSet(""),c.clearIncomplete&&!1===ae(V())&&k.inputmask._valueSet(""),c.removeMaskOnSubmit&&(k.inputmask._valueSet(k.inputmask.unmaskedvalue(),!0),setTimeout((function(){Y(k,V())}),0))},resetEvent:function(e){k.inputmask.refreshValue=!0,setTimeout((function(){h.trigger("setvalue")}),0)}};function te(t,i,o,r,a){var s=this||t.inputmask,l=r.slice(),u="",d=-1,f=n;if(A(),o||!0===c.autoUnmask)d=Q(d);else{var m=T().slice(0,Q(-1)).join(""),h=l.join("").match(new RegExp("^"+p.escapeRegex(m),"g"));h&&h.length>0&&(l.splice(0,h.length*m.length),d=Q(d))}-1===d?(P().p=Q(d),d=0):P().p=d,s.caretPos={begin:d},e.each(l,(function(i,r){if(r!==n)if(P().validPositions[i]===n&&l[i]===$(i)&&q(i,!0)&&!1===I(i,l[i],!0,n,n,!0))P().p++;else{var a=new e.Event("_checkval");a.which=r.charCodeAt(0),u+=r;var p=M(n,!0);!function(e,t){return-1!==C(!0,0,!1).slice(e,Q(e)).join("").replace(/'/g,"").indexOf(t)&&!q(e)&&(N(e).match.nativeDef===t.charAt(0)||null===N(e).match.fn&&N(e).match.nativeDef==="'"+t.charAt(0)||" "===N(e).match.nativeDef&&(N(e+1).match.nativeDef===t.charAt(0)||null===N(e+1).match.fn&&N(e+1).match.nativeDef==="'"+t.charAt(0)))}(d,u)?(f=ee.keypressEvent.call(t,a,!0,!1,o,s.caretPos.begin))&&(d=s.caretPos.begin+1,u=""):f=ee.keypressEvent.call(t,a,!0,!1,o,p+1),f&&(Y(n,V(),f.forwardPosition,a,!1),s.caretPos={begin:f.forwardPosition,end:f.forwardPosition})}})),i&&Y(t,V(),f?f.forwardPosition:n,a||new e.Event("checkval"),a&&"input"===a.type)}function ne(t){if(t){if(t.inputmask===n)return t.value;t.inputmask&&t.inputmask.refreshValue&&ee.setValueEvent.call(t)}var i=[],o=P().validPositions;for(var r in o)o[r].match&&null!=o[r].match.fn&&i.push(o[r].input);var a=0===i.length?"":(y?i.reverse():i).join("");if(e.isFunction(c.onUnMask)){var s=(y?V().slice().reverse():V()).join("");a=c.onUnMask.call(x,s,a,c)}return a}function ie(o,r,a,s){function l(e){return!y||"number"!=typeof e||c.greedy&&""===c.placeholder||!k||(e=k.inputmask._valueGet().length-e),e}var p;if(r===n)return"selectionStart"in o?(r=o.selectionStart,a=o.selectionEnd):t.getSelection?(p=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==o&&p.commonAncestorContainer!==o||(r=p.startOffset,a=p.endOffset):i.selection&&i.selection.createRange&&(a=(r=0-(p=i.selection.createRange()).duplicate().moveStart("character",-o.inputmask._valueGet().length))+p.text.length),{begin:s?r:l(r),end:s?a:l(a)};if(e.isArray(r)&&(a=y?r[0]:r[1],r=y?r[1]:r[0]),r.begin!==n&&(a=y?r.begin:r.end,r=y?r.end:r.begin),"number"==typeof r){r=s?r:l(r),a="number"==typeof(a=s?a:l(a))?a:r;var u=parseInt(((o.ownerDocument.defaultView||t).getComputedStyle?(o.ownerDocument.defaultView||t).getComputedStyle(o,null):o.currentStyle).fontSize)*a;if(o.scrollLeft=u>o.scrollWidth?u:0,o.inputmask.caretPos={begin:r,end:a},o===i.activeElement){if("selectionStart"in o)o.selectionStart=r,o.selectionEnd=a;else if(t.getSelection){if(p=i.createRange(),o.firstChild===n||null===o.firstChild){var d=i.createTextNode("");o.appendChild(d)}p.setStart(o.firstChild,r<o.inputmask._valueGet().length?r:o.inputmask._valueGet().length),p.setEnd(o.firstChild,a<o.inputmask._valueGet().length?a:o.inputmask._valueGet().length),p.collapse(!0);var f=t.getSelection();f.removeAllRanges(),f.addRange(p)}else o.createTextRange&&((p=o.createTextRange()).collapse(!0),p.moveEnd("character",a),p.moveStart("character",r),p.select());pe(o,{begin:r,end:a})}}}function oe(t){var i,o,r=C(!0,M(),!0,!0),a=r.length,s=M(),l={},p=P().validPositions[s],u=p!==n?p.locator.slice():n;for(i=s+1;i<r.length;i++)u=(o=U(i,u,i-1)).locator.slice(),l[i]=e.extend(!0,{},o);var c=p&&p.alternation!==n?p.locator[p.alternation]:n;for(i=a-1;i>s&&((o=l[i]).match.optionality||o.match.optionalQuantifier&&o.match.newBlockMarker||c&&(c!==l[i].locator[p.alternation]&&null!=o.match.fn||null===o.match.fn&&o.locator[p.alternation]&&B(o.locator[p.alternation].toString().split(","),c.toString().split(","))&&""!==F(i)[0].def))&&r[i]===$(i,o.match);i--)a--;return t?{l:a,def:l[a]?l[a].match:n}:a}function re(e){e.length=0;for(var t,i=C(!0,0,!0,n,!0);(t=i.shift())!==n;)e.push(t);return e}function ae(t){if(e.isFunction(c.isComplete))return c.isComplete(t,c);if("*"===c.repeat)return n;var i=!1,o=oe(!0),r=W(o.l);if(o.def===n||o.def.newBlockMarker||o.def.optionality||o.def.optionalQuantifier){i=!0;for(var a=0;a<=r;a++){var s=U(a).match;if(null!==s.fn&&P().validPositions[a]===n&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[a]!==$(a,s)){i=!1;break}}}return i}function se(e,t,i,o,r){if((c.numericInput||y)&&(t===p.keyCode.BACKSPACE?t=p.keyCode.DELETE:t===p.keyCode.DELETE&&(t=p.keyCode.BACKSPACE),y)){var a=i.end;i.end=i.begin,i.begin=a}if(t===p.keyCode.BACKSPACE&&i.end-i.begin<1?(i.begin=W(i.begin),P().validPositions[i.begin]!==n&&P().validPositions[i.begin].input===c.groupSeparator&&i.begin--):t===p.keyCode.DELETE&&i.begin===i.end&&(i.end=q(i.end,!0)&&P().validPositions[i.end]&&P().validPositions[i.end].input!==c.radixPoint?i.end+1:Q(i.end)+1,P().validPositions[i.begin]!==n&&P().validPositions[i.begin].input===c.groupSeparator&&i.end++),K(i),!0!==o&&!1!==c.keepStatic||null!==c.regex){var s=G(!0);if(s){var l=s.caret!==n?s.caret:s.pos?Q(s.pos.begin?s.pos.begin:s.pos):M(-1,!0);(t!==p.keyCode.DELETE||i.begin>l)&&i.begin}}var u=M(i.begin,!0);if(u<i.begin||-1===i.begin)P().p=Q(u);else if(!0!==o&&(P().p=i.begin,!0!==r))for(;P().p<u&&P().validPositions[P().p]===n;)P().p++}function le(n){var o=(n.ownerDocument.defaultView||t).getComputedStyle(n,null),r=i.createElement("div");r.style.width=o.width,r.style.textAlign=o.textAlign,b=i.createElement("div"),n.inputmask.colorMask=b,b.className="im-colormask",n.parentNode.insertBefore(b,n),n.parentNode.removeChild(n),b.appendChild(n),b.appendChild(r),n.style.left=r.offsetLeft+"px",e(b).on("mouseleave",(function(e){return ee.mouseleaveEvent.call(n,[e])})),e(b).on("mouseenter",(function(e){return ee.mouseenterEvent.call(n,[e])})),e(b).on("click",(function(e){return ie(n,function(e){var t,r=i.createElement("span");for(var a in o)isNaN(a)&&-1!==a.indexOf("font")&&(r.style[a]=o[a]);r.style.textTransform=o.textTransform,r.style.letterSpacing=o.letterSpacing,r.style.position="absolute",r.style.height="auto",r.style.width="auto",r.style.visibility="hidden",r.style.whiteSpace="nowrap",i.body.appendChild(r);var s,l=n.inputmask._valueGet(),p=0;for(t=0,s=l.length;t<=s;t++){if(r.innerHTML+=l.charAt(t)||"_",r.offsetWidth>=e){var u=e-p,c=r.offsetWidth-e;r.innerHTML=l.charAt(t),t=(u-=r.offsetWidth/3)<c?t-1:t;break}p=r.offsetWidth}return i.body.removeChild(r),t}(e.clientX)),ee.clickEvent.call(n,[e])}))}function pe(e,t,o){var r,a,s,l=[],p=!1,u=0;function d(e){if(e===n&&(e=""),p||null!==r.fn&&a.input!==n)if(p&&(null!==r.fn&&a.input!==n||""===r.def)){p=!1;var t=l.length;l[t-1]=l[t-1]+"</span>",l.push(e)}else l.push(e);else p=!0,l.push("<span class='im-static'>"+e)}if(b!==n){var f=V();if(t===n?t=ie(e):t.begin===n&&(t={begin:t,end:t}),!0!==o){var m=M();do{P().validPositions[u]?(a=P().validPositions[u],r=a.match,s=a.locator.slice(),d(f[u])):(a=U(u,s,u-1),r=a.match,s=a.locator.slice(),!1===c.jitMasking||u<m||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>u?d($(u,r)):p=!1),u++}while((g===n||u<g)&&(null!==r.fn||""!==r.def)||m>u||p);p&&d(),i.activeElement===e&&(l.splice(t.begin,0,t.begin===t.end||t.end>P().maskLength?'<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">':'<mark class="im-caret-select">'),l.splice(t.end+1,0,"</mark>"))}var h=b.getElementsByTagName("div")[0];h.innerHTML=l.join(""),e.inputmask.positionColorMask(e,h)}}if(o!==n)switch(o.action){case"isComplete":return k=o.el,ae(V());case"unmaskedvalue":return k!==n&&o.value===n||(J=o.value,J=(e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(x,J,c)||J).split(""),te.call(this,n,!1,!1,J),e.isFunction(c.onBeforeWrite)&&c.onBeforeWrite.call(x,n,V(),0,c)),ne(k);case"mask":!function(t){Z.off(t);var o=function(t,o){var r=t.getAttribute("type"),a="INPUT"===t.tagName&&-1!==e.inArray(r,o.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!a)if("INPUT"===t.tagName){var s=i.createElement("input");s.setAttribute("type",r),a="text"===s.type,s=null}else a="partial";return!1!==a?function(t){var r,a;function s(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==M()||!0!==o.nullable?i.activeElement===this&&o.clearMaskOnLostFocus?(y?re(V().slice()).reverse():re(V().slice())).join(""):r.call(this):"":r.call(this)}function l(t){a.call(this,t),this.inputmask&&e(this).trigger("setvalue",[t])}if(!t.inputmask.__valueGet){if(!0!==o.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"==typeof"test".__proto__?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var p=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):n;p&&p.get&&p.set?(r=p.get,a=p.set,Object.defineProperty(t,"value",{get:s,set:l,configurable:!0})):"INPUT"!==t.tagName&&(r=function(){return this.textContent},a=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:s,set:l,configurable:!0}))}else i.__lookupGetter__&&t.__lookupGetter__("value")&&(r=t.__lookupGetter__("value"),a=t.__lookupSetter__("value"),t.__defineGetter__("value",s),t.__defineSetter__("value",l));t.inputmask.__valueGet=r,t.inputmask.__valueSet=a}t.inputmask._valueGet=function(e){return y&&!0!==e?r.call(this.el).split("").reverse().join(""):r.call(this.el)},t.inputmask._valueSet=function(e,t){a.call(this.el,null===e||e===n?"":!0!==t&&y?e.split("").reverse().join(""):e)},r===n&&(r=function(){return this.value},a=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===n||!0!==e.valHooks[t].inputmaskpatch)){var i=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},r=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=i(e);return-1!==M(n,n,e.inputmask.maskset.validPositions)||!0!==o.nullable?t:""}return i(e)},set:function(t,n){var i,o=e(t);return i=r(t,n),t.inputmask&&o.trigger("setvalue",[n]),i},inputmaskpatch:!0}}}(t.type),function(t){Z.on(t,"mouseenter",(function(t){var n=e(this);this.inputmask._valueGet()!==V().join("")&&n.trigger("setvalue")}))}(t))}}(t):t.inputmask=n,a}(t,c);if(!1!==o&&(h=e(k=t),v=k.placeholder,-1===(g=k!==n?k.maxLength:n)&&(g=n),!0===c.colorMask&&le(k),a&&("inputMode"in k&&(k.inputmode=c.inputmode,k.setAttribute("inputmode",c.inputmode)),!0===c.disablePredictiveText&&("autocorrect"in k?k.autocorrect=!1:(!0!==c.colorMask&&le(k),k.type="password"))),!0===o&&(k.setAttribute("im-insert",c.insertMode),Z.on(k,"submit",ee.submitEvent),Z.on(k,"reset",ee.resetEvent),Z.on(k,"blur",ee.blurEvent),Z.on(k,"focus",ee.focusEvent),!0!==c.colorMask&&(Z.on(k,"click",ee.clickEvent),Z.on(k,"mouseleave",ee.mouseleaveEvent),Z.on(k,"mouseenter",ee.mouseenterEvent)),Z.on(k,"paste",ee.pasteEvent),Z.on(k,"cut",ee.cutEvent),Z.on(k,"complete",c.oncomplete),Z.on(k,"incomplete",c.onincomplete),Z.on(k,"cleared",c.oncleared),a||!0===c.inputEventOnly?k.removeAttribute("maxLength"):(Z.on(k,"keydown",ee.keydownEvent),Z.on(k,"keypress",ee.keypressEvent)),Z.on(k,"input",ee.inputFallBackEvent),Z.on(k,"beforeinput",ee.beforeInputEvent)),Z.on(k,"setvalue",ee.setValueEvent),m=T().join(""),""!==k.inputmask._valueGet(!0)||!1===c.clearMaskOnLostFocus||i.activeElement===k)){var r=e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(x,k.inputmask._valueGet(!0),c)||k.inputmask._valueGet(!0);""!==r&&te(k,!0,!1,r.split(""));var s=V().slice();m=s.join(""),!1===ae(s)&&c.clearIncomplete&&A(),c.clearMaskOnLostFocus&&i.activeElement!==k&&(-1===M()?s=[]:re(s)),(!1===c.clearMaskOnLostFocus||c.showMaskOnFocus&&i.activeElement===k||""!==k.inputmask._valueGet(!0))&&Y(k,s),i.activeElement===k&&ie(k,Q(M()))}}(k);break;case"format":return J=(e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(x,o.value,c)||o.value).split(""),te.call(this,n,!0,!1,J),o.metadata?{value:y?V().slice().reverse().join(""):V().join(""),metadata:f.call(this,{action:"getmetadata"},u,c)}:y?V().slice().reverse().join(""):V().join("");case"isValid":o.value?(J=o.value.split(""),te.call(this,n,!0,!0,J)):o.value=V().join("");for(var ue=V(),ce=oe(),de=ue.length-1;de>ce&&!q(de);de--);return ue.splice(ce,de+1-ce),ae(ue)&&o.value===V().join("");case"getemptymask":return T().join("");case"remove":return k&&k.inputmask&&(e.data(k,"_inputmask_opts",null),h=e(k),k.inputmask._valueSet(c.autoUnmask?ne(k):k.inputmask._valueGet(!0)),Z.off(k),k.inputmask.colorMask&&((b=k.inputmask.colorMask).removeChild(k),b.parentNode.insertBefore(k,b),b.parentNode.removeChild(b)),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(k),"value")&&k.inputmask.__valueGet&&Object.defineProperty(k,"value",{get:k.inputmask.__valueGet,set:k.inputmask.__valueSet,configurable:!0}):i.__lookupGetter__&&k.__lookupGetter__("value")&&k.inputmask.__valueGet&&(k.__defineGetter__("value",k.inputmask.__valueGet),k.__defineSetter__("value",k.inputmask.__valueSet)),k.inputmask=n),k;case"getmetadata":if(e.isArray(u.metadata)){var fe=C(!0,0,!1).join("");return e.each(u.metadata,(function(e,t){if(t.mask===fe)return fe=t,!1})),fe}return u.metadata}}return p.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:n,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,disablePredictiveText:!1,importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(o){var r=this;return"string"==typeof o&&(o=i.getElementById(o)||i.querySelectorAll(o)),o=o.nodeName?[o]:o,e.each(o,(function(i,o){var a=e.extend(!0,{},r.opts);if(function(i,o,r,a){if(!0===o.importDataAttributes){var s,l,p,c,d=i.getAttribute(a),f=function(e,o){null!==(o=o!==n?o:i.getAttribute(a+"-"+e))&&("string"==typeof o&&(0===e.indexOf("on")?o=t[o]:"false"===o?o=!1:"true"===o&&(o=!0)),r[e]=o)};if(d&&""!==d&&(d=d.replace(/'/g,'"'),l=JSON.parse("{"+d+"}")),l)for(c in p=n,l)if("alias"===c.toLowerCase()){p=l[c];break}for(s in f("alias",p),r.alias&&u(r.alias,r,o),o){if(l)for(c in p=n,l)if(c.toLowerCase()===s.toLowerCase()){p=l[c];break}f(s,p)}}return e.extend(!0,o,r),("rtl"===i.dir||o.rightAlign)&&(i.style.textAlign="right"),("rtl"===i.dir||o.numericInput)&&(i.dir="ltr",i.removeAttribute("dir"),o.isRTL=!0),Object.keys(r).length}(o,a,e.extend(!0,{},r.userOptions),r.dataAttribute)){var s=c(a,r.noMasksCache);s!==n&&(o.inputmask!==n&&(o.inputmask.opts.autoUnmask=!0,o.inputmask.remove()),o.inputmask=new p(n,n,!0),o.inputmask.opts=a,o.inputmask.noMasksCache=r.noMasksCache,o.inputmask.userOptions=e.extend(!0,{},r.userOptions),o.inputmask.isRTL=a.isRTL||a.numericInput,o.inputmask.el=o,o.inputmask.maskset=s,e.data(o,"_inputmask_opts",a),f.call(o.inputmask,{action:"mask"}))}})),o&&o[0]&&o[0].inputmask||this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"==typeof t?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return f.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),f.call(this,{action:"format",value:e,metadata:t})},setValue:function(t){this.el&&e(this.el).trigger("setvalue",[t])},analyseMask:function(t,i,o){var r,a,s,l,u,c,d=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,f=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,m=!1,h=new v,g=[],b=[];function v(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function x(t,r,a){a=a!==n?a:t.matches.length;var s=t.matches[a-1];if(i)0===r.indexOf("[")||m&&/\\d|\\s|\\w]/i.test(r)||"."===r?t.matches.splice(a++,0,{fn:new RegExp(r,o.casing?"i":""),optionality:!1,newBlockMarker:s===n?"master":s.def!==r,casing:null,def:r,placeholder:n,nativeDef:r}):(m&&(r=r[r.length-1]),e.each(r.split(""),(function(e,i){s=t.matches[a-1],t.matches.splice(a++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==i&&null!==s.fn,casing:null,def:o.staticDefinitionSymbol||i,placeholder:o.staticDefinitionSymbol!==n?i:n,nativeDef:(m?"'":"")+i})}))),m=!1;else{var l=(o.definitions?o.definitions[r]:n)||p.prototype.definitions[r];l&&!m?t.matches.splice(a++,0,{fn:l.validator?"string"==typeof l.validator?new RegExp(l.validator,o.casing?"i":""):new function(){this.test=l.validator}:new RegExp("."),optionality:!1,newBlockMarker:s===n?"master":s.def!==(l.definitionSymbol||r),casing:l.casing,def:l.definitionSymbol||r,placeholder:l.placeholder,nativeDef:r}):(t.matches.splice(a++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==r&&null!==s.fn,casing:null,def:o.staticDefinitionSymbol||r,placeholder:o.staticDefinitionSymbol!==n?r:n,nativeDef:(m?"'":"")+r}),m=!1)}}function k(){if(g.length>0){if(x(l=g[g.length-1],a),l.isAlternator){u=g.pop();for(var e=0;e<u.matches.length;e++)u.matches[e].isGroup&&(u.matches[e].isGroup=!1);g.length>0?(l=g[g.length-1]).matches.push(u):h.matches.push(u)}}else x(h,a)}function y(e){var t=new v(!0);return t.openGroup=!1,t.matches=e,t}for(i&&(o.optionalmarker[0]=n,o.optionalmarker[1]=n);r=i?f.exec(t):d.exec(t);){if(a=r[0],i)switch(a.charAt(0)){case"?":a="{0,1}";break;case"+":case"*":a="{"+a+"}"}if(m)k();else switch(a.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case o.escapeChar:m=!0,i&&k();break;case o.optionalmarker[1]:case o.groupmarker[1]:if((s=g.pop()).openGroup=!1,s!==n)if(g.length>0){if((l=g[g.length-1]).matches.push(s),l.isAlternator){u=g.pop();for(var w=0;w<u.matches.length;w++)u.matches[w].isGroup=!1,u.matches[w].alternatorGroup=!1;g.length>0?(l=g[g.length-1]).matches.push(u):h.matches.push(u)}}else h.matches.push(s);else k();break;case o.optionalmarker[0]:g.push(new v(!1,!0));break;case o.groupmarker[0]:g.push(new v(!0));break;case o.quantifiermarker[0]:var _=new v(!1,!1,!0),E=(a=a.replace(/[{}]/g,"")).split("|"),S=E[0].split(","),C=isNaN(S[0])?S[0]:parseInt(S[0]),P=1===S.length?C:isNaN(S[1])?S[1]:parseInt(S[1]);"*"!==C&&"+"!==C||(C="*"===P?0:1),_.quantifier={min:C,max:P,jit:E[1]};var A=g.length>0?g[g.length-1].matches:h.matches;if((r=A.pop()).isAlternator){A.push(r),A=r.matches;var M=new v(!0),D=A.pop();A.push(M),A=M.matches,r=D}r.isGroup||(r=y([r])),A.push(r),A.push(_);break;case o.alternatormarker:var O=function(e){var t=e.pop();return t.isQuantifier&&(t=y([e.pop(),t])),t};if(g.length>0){var j=(l=g[g.length-1]).matches[l.matches.length-1];c=l.openGroup&&(j.matches===n||!1===j.isGroup&&!1===j.isAlternator)?g.pop():O(l.matches)}else c=O(h.matches);if(c.isAlternator)g.push(c);else if(c.alternatorGroup?(u=g.pop(),c.alternatorGroup=!1):u=new v(!1,!1,!1,!0),u.matches.push(c),g.push(u),c.openGroup){c.openGroup=!1;var U=new v(!0);U.alternatorGroup=!0,g.push(U)}break;default:k()}}for(;g.length>0;)s=g.pop(),h.matches.push(s);return h.matches.length>0&&(function t(r){r&&r.matches&&e.each(r.matches,(function(e,a){var s=r.matches[e+1];(s===n||s.matches===n||!1===s.isQuantifier)&&a&&a.isGroup&&(a.isGroup=!1,i||(x(a,o.groupmarker[0],0),!0!==a.openGroup&&x(a,o.groupmarker[1]))),t(a)}))}(h),b.push(h)),(o.numericInput||o.isRTL)&&function e(t){for(var i in t.matches=t.matches.reverse(),t.matches)if(t.matches.hasOwnProperty(i)){var r=parseInt(i);if(t.matches[i].isQuantifier&&t.matches[r+1]&&t.matches[r+1].isGroup){var a=t.matches[i];t.matches.splice(i,1),t.matches.splice(r+1,0,a)}t.matches[i].matches!==n?t.matches[i]=e(t.matches[i]):t.matches[i]=((s=t.matches[i])===o.optionalmarker[0]?s=o.optionalmarker[1]:s===o.optionalmarker[1]?s=o.optionalmarker[0]:s===o.groupmarker[0]?s=o.groupmarker[1]:s===o.groupmarker[1]&&(s=o.groupmarker[0]),s)}var s;return t}(b[0]),b},positionColorMask:function(e,t){e.style.left=t.offsetLeft+"px"}},p.extendDefaults=function(t){e.extend(!0,p.prototype.defaults,t)},p.extendDefinitions=function(t){e.extend(!0,p.prototype.definitions,t)},p.extendAliases=function(t){e.extend(!0,p.prototype.aliases,t)},p.format=function(e,t,n){return p(t).format(e,n)},p.unmask=function(e,t){return p(t).unmaskedvalue(e)},p.isValid=function(e,t){return p(t).isValid(e)},p.remove=function(t){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(e,t){t.inputmask&&t.inputmask.remove()}))},p.setValue=function(t,n){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(t,i){i.inputmask?i.inputmask.setValue(n):e(i).trigger("setvalue",[n])}))},p.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},p.keyCode={BACKSPACE:8,BACKSPACE_SAFARI:127,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,RIGHT:39,SPACE:32,TAB:9,UP:38,X:88,CONTROL:17},p.dependencyLib=e,p})?i.apply(t,o):i)||(e.exports=r)},40:function(e,t,n){e.exports=n.p+"img/expand-more-0a11a12.png"},41:function(e,t,n){e.exports=n.p+"img/arrow-42103db.png"},42:function(e,t,n){"use strict";var i=n(36),o=n.n(i),r=n(37),a=n.n(r),s=document.getElementById("range-slider"),l=[document.querySelector("#lower-value"),document.querySelector("#upper-value")];o.a.create(s,{start:[5e3,1e4],connect:!0,format:a()({decimals:0}),step:100,range:{min:[300],max:15700}}),s.noUiSlider.on("update",(function(e,t){var n=e[t].replace(/(\d)(?=(\d{3})+(\D|$))/g,"$1 ");n+="₽",l[t].textContent=n}))},43:function(e,t,n){e.exports=n.p+"img/like-5b8322e.png"},44:function(e,t,n){e.exports=n.p+"img/like-active-224d573.png"},5:function(e,t,n){n(26),n(28),n(29),e.exports=n(4)},7:function(e,t,n){var i=n(2),o=n(8);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},a=(i(e.i,o,r),o.locals?o.locals:{});e.exports=a},8:function(e,t,n){var i=n(1),o=n(3),r=n(9),a=n(10),s=n(11),l=n(12),p=n(13),u=n(14),c=n(15),d=n(16),f=n(17),m=n(18),h=n(19),g=n(20);t=i(!1);var b=o(r),v=o(a),x=o(s,{hash:"#webfont"}),k=o(l),y=o(p),w=o(u,{hash:"#webfont"}),_=o(c),E=o(d),S=o(f,{hash:"#webfont"}),C=o(m),P=o(h),A=o(g,{hash:"#webfont"});t.push([e.i,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{margin:0.67em 0;font-size:2em}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}@font-face{font-weight:normal;font-family:"Montserrat";font-style:normal;src:url('+b+");src:url("+b+') format("woff"),url('+v+') format("truetype"),url('+x+') format("svg")}@font-face{font-weight:bold;font-family:"Montserrat";font-style:normal;src:url('+k+");src:url("+k+') format("woff"),url('+y+') format("truetype"),url('+w+') format("svg")}@font-face{font-weight:normal;font-family:"Quicksand";font-style:normal;src:url('+_+");src:url("+_+') format("woff"),url('+E+') format("truetype"),url('+S+') format("svg")}@font-face{font-weight:bold;font-family:"Quicksand";font-style:normal;src:url('+C+");src:url("+C+') format("woff"),url('+P+') format("truetype"),url('+A+') format("svg")}body{color:#1f2041;font-size:14px;font-family:"Quicksand","Montserrat",sans-serif}.container{position:relative;width:80.5556%;min-width:320px;max-width:1920px;margin:0 auto;padding:0 10px}@media (max-width: 1300px){.container{width:90.5556%}}@media (max-width: 425px){.container{width:auto;margin:0;padding:0}}\n',""]),e.exports=t},9:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Regular-ec92d31.woff"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLnR0ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9Nb250c2VycmF0LUJvbGQud29mZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLnR0ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvZm9ybS1lbGVtZW50cy9mb3JtLWVsZW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvUXVpY2tzYW5kLUJvbGQuZm9udC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvZm9ybS1lbGVtZW50cy9mb3JtLWVsZW1lbnRzLnNjc3M/Njg4MiIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZS9mb3JtLWVsZW1lbnRzL2Zvcm0tZWxlbWVudHMuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idXR0b24vYXJyb3cuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2lucHV0L2V4cGFuZC1tb3JlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2dsb2JhbC93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZHJvcC1kb3duL2Ryb3AtZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svZGVwZW5kZW5jeUxpYnMvaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2suZGF0ZS5leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLm51bWVyaWMuZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3JhdGVidG4vc3Rhci5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcmF0ZWJ0bi9zdGFyLWFjdGl2ZS5wbmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vdWlzbGlkZXIvZGlzdHJpYnV0ZS9ub3Vpc2xpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93bnVtYi93TnVtYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm91aXNsaWRlci9kaXN0cmlidXRlL25vdWlzbGlkZXIubWluLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jaGVja2JveC9leHBhbmQtbW9yZS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9hcnJvdy5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9saWtlYnRuL2xpa2UucG5nIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2xpa2VidG4vbGlrZS1hY3RpdmUucG5nIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2luZGV4LnNjc3M/YTAxOSIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLndvZmYiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiY29uY2F0Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwiam9pbiIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwibGVuZ3RoIiwicHVzaCIsIklucHV0bWFzayIsIm1hc2siLCJwbGFjZWhvbGRlciIsImRyb3BEb3duT3B0aW9ucyIsImNvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImlucHV0IiwiY291bnRFbGVtZW50cyIsImNvdW50R3JvdXBOYW1lIiwic3RhcnRWYWx1ZSIsImNvdW50R3JvdXBWaWV3IiwiYmVkcm9vbXMiLCJjb3VudGVyIiwidmlld3MiLCJiZWQiLCJiYXRoIiwiaXNIaWRlQ29udHJvbCIsImlzUGluU2hvdyIsIkRyb3BEb3duIiwiaW5pdCIsImRyb3BEb3duR3Vlc3RPcHRpb25zIiwiZ3Vlc3QiLCJjaGlsZCIsImRyb3BEb3duUXVlc3RPcHRpb25zIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwid2luZG93IiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsIm9iaiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJiYXNlIiwibmV3TGlzdCIsImoiLCJhcGkiLCJkZWZhdWx0IiwiZXhwb3J0ZWQiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fIiwiZXZhbCIsImdldEh0bWxFbGVtZW50IiwidGFnTmFtZSIsImNsYXNzTmFtZSIsInRleHQiLCJlbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJkZWNsT2ZOdW0iLCJudW1iZXIiLCJ0aXRsZXMiLCJzb21lIiwibWluIiwibWF4IiwibWluVmFsdWUiLCJpZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImRyb3BEb3duUGFyZW50IiwiY29udGFpbnMiLCJhZGRFdmVudExpc3RlbmVyIiwib25DbGlja0hpZGUiLCJvblByZXNzSGlkZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJpc0lucHV0Q2xpY2siLCJpc0NhbGVuZGFyQ2xpY2siLCJoaWRlIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwiZGlzY2FyZENvdW50ZXIiLCJkaXNjYXJkVmlld0NvdW50ZXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwid29yZE9mTnVtIiwiY3VycmVudENvdW50ZXJHcm91cCIsImN1cnJlbnRDb3VudGVyIiwiY3VycmVudFdvcmQiLCJzbGljZSIsInNwbGl0V29yZE9mTnVtIiwic3BsaXQiLCJ0cmltIiwiY291bnRJdGVtIiwiY291bnRJdGVtTmFtZSIsImNvdW50ZXJNZW51IiwiY291bnRJdGVtTWludXMiLCJ0eXBlIiwiY291bnRJdGVtVmlldyIsImNvdW50SXRlbVBsdXMiLCJncm91cFZpZXciLCJyZW5kZXJWaWV3Q291bnQiLCJldmVyeSIsIm1vZGlmaWVkQ291bnRFbGVtZW50cyIsImdldE1vZGlmaWVkQ291bnRFbGVtZW50cyIsImRyb3BEb3duUGFyZW50V3JhcCIsImNvdW50TGlzdCIsImRyb3BEb3duQ29udHJvbCIsImNsZWFyQnRuIiwib25DbGlja0NsZWFyIiwiYWNjZXB0QnRuIiwiY291bnRMaXN0RnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZ2V0Q291bnRJdGVtIiwiY29uc29sZSIsImVycm9yIiwiaGFzSGF2ZVN0YXJ0VmFsdWUiLCJyZW5kZXJTdGFydENvdW50Iiwic2hvdyIsImlucHV0Vmlld3MiLCJleHRlbmREZWZpbml0aW9ucyIsIkEiLCJ2YWxpZGF0b3IiLCJjYXNpbmciLCJleHRlbmRBbGlhc2VzIiwiY3NzdW5pdCIsInJlZ2V4IiwidXJsIiwiYXV0b1VubWFzayIsImlwIiwiZGVmaW5pdGlvbnMiLCJjaHJzIiwibWFza3NldCIsInBvcyIsInN0cmljdCIsIm9wdHMiLCJidWZmZXIiLCJSZWdFeHAiLCJ0ZXN0Iiwib25Vbk1hc2siLCJtYXNrZWRWYWx1ZSIsInVubWFza2VkVmFsdWUiLCJpbnB1dG1vZGUiLCJlbWFpbCIsImdyZWVkeSIsIm9uQmVmb3JlUGFzdGUiLCJwYXN0ZWRWYWx1ZSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIm1hYyIsInZpbiIsIlYiLCJjbGVhckluY29tcGxldGUiLCJpc1dpbmRvdyIsImlzVmFsaWRFbGVtZW50IiwiZWxlbSIsIkVsZW1lbnQiLCJEZXBlbmRlbmN5TGliIiwibm9kZU5hbWUiLCJ1bmRlZmluZWQiLCJldmVudFJlZ2lzdHJ5Iiwib24iLCJldmVudHMiLCJoYW5kbGVyIiwiYWRkRXZlbnQiLCJldiIsIm5hbWVzcGFjZSIsImF0dGFjaEV2ZW50IiwiX2V2ZW50cyIsImVuZHgiLCJuc0V2ZW50Iiwib2ZmIiwicmVtb3ZlRXZlbnQiLCJkZXRhY2hFdmVudCIsIm5tc3AiLCJzcGxpY2UiLCJpbmRleE9mIiwicmVzb2x2ZU5hbWVzcGFjZSIsImhuZHgiLCJobmRMIiwiZXZ0cyIsImV2TmR4Iiwib2ZmRXZlbnRzIiwib2ZmRXZlbnRzTCIsInRyaWdnZXIiLCJldm50IiwicGFyYW1zIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJhcmd1bWVudHMiLCJjcmVhdGVFdmVudCIsIkN1c3RvbUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZXh0ZW5kIiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiZmlyZUV2ZW50IiwiRXZlbnQiLCJhcHBseSIsImlzRnVuY3Rpb24iLCJub29wIiwiaXNBcnJheSIsIkFycmF5IiwiaW5BcnJheSIsImFyciIsImxlbiIsInZhbEhvb2tzIiwiaXNQbGFpbk9iamVjdCIsIm5vZGVUeXBlIiwiY29uc3RydWN0b3IiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJlYWNoIiwiY2FsbGJhY2siLCJsdHlwZSIsImlzQXJyYXlsaWtlIiwib3duZXIiLCJfX2RhdGEiLCJldmVudCIsIiQiLCJkZXBlbmRlbmN5TGliIiwiZm9ybWF0Q29kZSIsIkRhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImRkIiwicGFkIiwiZGRkIiwiZGRkZCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJtbSIsIm1tbSIsIm1tbW0iLCJ5eSIsInNldEZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJ5eXl5IiwiaCIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJoaCIsImhoaCIsIkgiLCJISCIsIkhISCIsIk0iLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsIk1NIiwic3MiLCJzZXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsInNldE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIkwiLCJ0dCIsIlQiLCJUVCIsIloiLCJTIiwiZm9ybWF0QWxpYXMiLCJpc29EYXRlIiwiaXNvVGltZSIsImlzb0RhdGVUaW1lIiwiaXNvVXRjRGF0ZVRpbWUiLCJnZXRUb2tlbml6ZXIiLCJ0b2tlbml6ZXIiLCJ0b2tlbnMiLCJuZHgiLCJwYXJzZSIsImZvcm1hdCIsImRhdGVPYmpWYWx1ZSIsInJhdyIsIm1hdGNoIiwiZXhlYyIsImVzY2FwZVJlZ2V4IiwiZGF0ZSIsInZhbCIsIlN0cmluZyIsImFuYWx5c2VNYXNrIiwibWFza1N0cmluZyIsInRhcmdldFByb3AiLCJkYXRlT3BlcmF0aW9uIiwiZGF0ZU9iaiIsImV4dGVuZFByb3BlcnR5IiwiY29ycmVjdGVkVmFsdWUiLCJlbnRlcmVkUGFydCIsInNldFZhbHVlIiwicGFyc2VJbnQiLCJkYXRldGltZSIsImkxOG4iLCJvcmRpbmFsU3VmZml4IiwiaW5wdXRGb3JtYXQiLCJkaXNwbGF5Rm9ybWF0Iiwib3V0cHV0Rm9ybWF0IiwiZGF5TmFtZXMiLCJtb250aE5hbWVzIiwicG9zdFZhbGlkYXRpb24iLCJjdXJyZW50UmVzdWx0IiwicmVzdWx0IiwiZGF0ZVBhcnRzIiwiZ2V0VGltZSIsImlzRmluaXRlIiwicmF3ZGF5IiwiZGF5IiwicmF3eWVhciIsInJhd21vbnRoIiwibW9udGgiLCJpc1ZhbGlkRGF0ZSIsInJhd1llYXIiLCJtaW5ZZWFyIiwieWVhciIsInN1YnN0ciIsImlzRGF0ZUluUmFuZ2UiLCJyZWZyZXNoRnJvbUJ1ZmZlciIsInN0YXJ0IiwiZW5kIiwib25LZXlEb3duIiwiY2FyZXRQb3MiLCJjdHJsS2V5IiwiUklHSFQiLCJ0b2RheSIsImNoYXJBdCIsImdldFllYXIiLCJpbnB1dG1hc2siLCJfdmFsdWVTZXQiLCJ2YWxpZFBvc2l0aW9ucyIsIm5hdGl2ZURlZiIsInRvVXBwZXJDYXNlIiwiaW5zZXJ0TW9kZSIsInNoaWZ0UG9zaXRpb25zIiwiYXV0b0VzY2FwZSIsInR4dCIsImVzY2FwZWRUeHQiLCJvcHRpb25hbG1hcmtlciIsInF1YW50aWZpZXJtYXJrZXIiLCJncm91cG1hcmtlciIsImFsdGVybmF0b3JtYXJrZXIiLCJudW1lcmljIiwicmVwZWF0IiwiaXNOYU4iLCJpbnRlZ2VyRGlnaXRzIiwiZ3JvdXBTZXBhcmF0b3IiLCJyYWRpeFBvaW50IiwiZGlnaXRzIiwic2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciIsImF1dG9Hcm91cCIsImdyb3VwU2l6ZSIsInNlcHMiLCJtb2QiLCJwb3NpdGlvbkNhcmV0T25DbGljayIsImludGVnZXJPcHRpb25hbCIsImRlZmluaXRpb25TeW1ib2wiLCJudW1lcmljSW5wdXQiLCJkaWdpdHNPcHRpb25hbCIsImRlY2ltYWxQcm90ZWN0IiwicHJlZml4IiwicmFkaXhEZWYiLCJkcSIsInN1ZmZpeCIsImVuZm9yY2VEaWdpdHNPbkJsdXIiLCJhbGxvd01pbnVzIiwibmVnYXRpb25TeW1ib2wiLCJmcm9udCIsImJhY2siLCJyaWdodEFsaWduIiwic3RlcCIsInVubWFza0FzTnVtYmVyIiwiaW5wdXRUeXBlIiwicHJlVmFsaWRhdGlvbiIsImlzU2VsZWN0aW9uIiwiaXNOZWdhdGl2ZSIsImNhcmV0IiwiZG9wb3N0IiwicmFkaXhQb3MiLCJyZXZlcnNlIiwiY2hhckF0UG9zIiwicHJvY2Vzc1ZhbHVlIiwicmFkaXhQb3NpdGlvbiIsInJwYiIsImFkZFJhZGl4IiwicG9zdE1hc2siLCJyYWRpeFNwbGl0IiwiYnVpbGRQb3N0TWFzayIsImppdE1hc2tpbmciLCJjYXJkaW5hbGl0eSIsIm5ld0NhcmV0UG9zIiwicnNsdCIsIm9uQmVmb3JlV3JpdGUiLCJ1bm1hc2tlZCIsInBhcnNlTWluTWF4T3B0aW9ucyIsInBhcnNlRmxvYXQiLCJOYU4iLCJOdW1iZXIiLCJNSU5fVkFMVUUiLCJNQVhfVkFMVUUiLCJpbnRlZ2VyUGFydCIsImVtcHR5Q2hlY2siLCJpbnRlZ2VyTlBhcnQiLCJpc1ZhbGlkIiwiZGVmIiwicHZSYWRpeFNwbGl0IiwiYnVmZmVyVGVtcGxhdGUiLCJfYnVmZmVyIiwicmFkaXgiLCJudWxsYWJsZSIsImlzQ29tcGxldGUiLCJvbkJlZm9yZU1hc2siLCJpbml0aWFsVmFsdWUiLCJ2YWx1ZVBhcnRzIiwiZGVjaW1hbFBhcnQiLCJkaWdpdHNGYWN0b3IiLCJwb3ciLCJyb3VuZCIsInN1YnN0cmluZyIsImFsaWduRGlnaXRzIiwiJGlucHV0IiwiVVAiLCJ1bm1hc2tlZHZhbHVlIiwiRE9XTiIsImN1cnJlbmN5IiwiYWxpYXMiLCJjbGVhck1hc2tPbkxvc3RGb2N1cyIsImRlY2ltYWwiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsImhhc2giLCJuZWVkUXVvdGVzIiwiVkVSU0lPTiIsInJlbW92ZUVsZW1lbnQiLCJlbCIsInBhcmVudEVsZW1lbnQiLCJpc1NldCIsImlzTnVtZXJpYyIsImEiLCJhZGRDbGFzc0ZvciIsImR1cmF0aW9uIiwiYWRkQ2xhc3MiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQ2xhc3MiLCJsaW1pdCIsImFzQXJyYXkiLCJjb3VudERlY2ltYWxzIiwibnVtU3RyIiwicGllY2VzIiwiZ2V0UGFnZU9mZnNldCIsImRvYyIsInN1cHBvcnRQYWdlT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJpc0NTUzFDb21wYXQiLCJjb21wYXRNb2RlIiwieCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbExlZnQiLCJib2R5IiwieSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwic3ViUmFuZ2VSYXRpbyIsInBhIiwicGIiLCJmcm9tUGVyY2VudGFnZSIsInJhbmdlIiwiZ2V0SiIsInRvU3RlcHBpbmciLCJ4VmFsIiwieFBjdCIsInZhIiwidmIiLCJhYnMiLCJ0b1BlcmNlbnRhZ2UiLCJnZXRTdGVwIiwieFN0ZXBzIiwic25hcCIsImIiLCJ0byIsImNsb3Nlc3QiLCJoYW5kbGVFbnRyeVBvaW50IiwidGhhdCIsInhIaWdoZXN0Q29tcGxldGVTdGVwIiwiaGFuZGxlU3RlcFBvaW50IiwidG90YWxTdGVwcyIsInhOdW1TdGVwcyIsImhpZ2hlc3RTdGVwIiwiY2VpbCIsInRvRml4ZWQiLCJTcGVjdHJ1bSIsImVudHJ5Iiwic2luZ2xlU3RlcCIsIm9yZGVyZWQiLCJzb3J0IiwiZ2V0TWFyZ2luIiwiZnJvbVN0ZXBwaW5nIiwiaXNQZXJjZW50YWdlIiwiZ2V0RGVmYXVsdFN0ZXAiLCJpc0Rvd24iLCJzaXplIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwidGhpc1N0ZXAiLCJzdGVwQWZ0ZXIiLCJjb3VudFN0ZXBEZWNpbWFscyIsInN0ZXBEZWNpbWFscyIsImNvbnZlcnQiLCJkZWZhdWx0Rm9ybWF0dGVyIiwiZnJvbSIsInZhbGlkYXRlRm9ybWF0IiwiaXNWYWxpZEZvcm1hdHRlciIsInRlc3RTdGVwIiwicGFyc2VkIiwidGVzdFJhbmdlIiwic3BlY3RydW0iLCJ0ZXN0U3RhcnQiLCJoYW5kbGVzIiwidGVzdFNuYXAiLCJ0ZXN0QW5pbWF0ZSIsImFuaW1hdGUiLCJ0ZXN0QW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25EdXJhdGlvbiIsInRlc3RDb25uZWN0IiwiY29ubmVjdCIsInRlc3RPcmllbnRhdGlvbiIsIm9ydCIsInRlc3RNYXJnaW4iLCJtYXJnaW4iLCJ0ZXN0TGltaXQiLCJ0ZXN0UGFkZGluZyIsInBhZGRpbmciLCJ0ZXN0RGlyZWN0aW9uIiwiZGlyIiwidGVzdEJlaGF2aW91ciIsInRhcCIsImRyYWciLCJmaXhlZCIsImhvdmVyIiwidW5jb25zdHJhaW5lZCIsInRlc3RUb29sdGlwcyIsInRvb2x0aXBzIiwiZm9ybWF0dGVyIiwidGVzdEFyaWFGb3JtYXQiLCJhcmlhRm9ybWF0IiwidGVzdEZvcm1hdCIsInRlc3RLZXlib2FyZFN1cHBvcnQiLCJrZXlib2FyZFN1cHBvcnQiLCJ0ZXN0RG9jdW1lbnRFbGVtZW50IiwidGVzdENzc1ByZWZpeCIsImNzc1ByZWZpeCIsInRlc3RDc3NDbGFzc2VzIiwiY3NzQ2xhc3NlcyIsInRlc3RPcHRpb25zIiwidGVzdHMiLCJkaXJlY3Rpb24iLCJvcmllbnRhdGlvbiIsImJlaGF2aW91ciIsImRlZmF1bHRzIiwib3JpZ2luIiwiaGFuZGxlIiwiaGFuZGxlTG93ZXIiLCJoYW5kbGVVcHBlciIsInRvdWNoQXJlYSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImJhY2tncm91bmQiLCJjb25uZWN0cyIsImx0ciIsInJ0bCIsInRleHREaXJlY3Rpb25MdHIiLCJ0ZXh0RGlyZWN0aW9uUnRsIiwiZHJhZ2dhYmxlIiwiYWN0aXZlIiwidG9vbHRpcCIsInBpcHMiLCJwaXBzSG9yaXpvbnRhbCIsInBpcHNWZXJ0aWNhbCIsIm1hcmtlciIsIm1hcmtlckhvcml6b250YWwiLCJtYXJrZXJWZXJ0aWNhbCIsIm1hcmtlck5vcm1hbCIsIm1hcmtlckxhcmdlIiwibWFya2VyU3ViIiwidmFsdWVIb3Jpem9udGFsIiwidmFsdWVWZXJ0aWNhbCIsInZhbHVlTm9ybWFsIiwidmFsdWVMYXJnZSIsInZhbHVlU3ViIiwibXNQcmVmaXgiLCJtc1RyYW5zZm9ybSIsIm5vUHJlZml4IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtUnVsZSIsInNjb3BlIiwib3JpZ2luYWxPcHRpb25zIiwic2NvcGVfQmFzZSIsInNjb3BlX0hhbmRsZXMiLCJzY29wZV9Db25uZWN0cyIsInNjb3BlX1BpcHMiLCJzY29wZV9Ub29sdGlwcyIsInNjb3BlX1NlbGYiLCJhZGRUYXJnZXQiLCJhY3Rpb25zIiwibmF2aWdhdG9yIiwicG9pbnRlckVuYWJsZWQiLCJtb3ZlIiwibXNQb2ludGVyRW5hYmxlZCIsInN1cHBvcnRzUGFzc2l2ZSIsIkNTUyIsInN1cHBvcnRzIiwiZ2V0U3VwcG9ydHNQYXNzaXZlIiwic2NvcGVfVGFyZ2V0Iiwic2NvcGVfU3BlY3RydW0iLCJzY29wZV9WYWx1ZXMiLCJzY29wZV9Mb2NhdGlvbnMiLCJzY29wZV9IYW5kbGVOdW1iZXJzIiwic2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50Iiwic2NvcGVfRXZlbnRzIiwic2NvcGVfRG9jdW1lbnQiLCJvd25lckRvY3VtZW50Iiwic2NvcGVfRG9jdW1lbnRFbGVtZW50Iiwic2NvcGVfQm9keSIsInNjb3BlX0Rpck9mZnNldCIsImFkZE5vZGVUbyIsImRpdiIsImFkZE9yaWdpbiIsImhhbmRsZU51bWJlciIsImlzU2xpZGVyRGlzYWJsZWQiLCJpc0hhbmRsZURpc2FibGVkIiwiaG9yaXpvbnRhbEtleXMiLCJ2ZXJ0aWNhbEtleXMiLCJsYXJnZVN0ZXBLZXlzIiwiZWRnZUtleXMiLCJpc0xhcmdlRG93biIsImlzTGFyZ2VVcCIsImlzVXAiLCJpc01pbiIsImlzTWF4IiwiZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlIiwic2V0SGFuZGxlIiwiZXZlbnRLZXlkb3duIiwiYWRkQ29ubmVjdCIsImFkZFRvb2x0aXAiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVUb29sdGlwcyIsImJpbmRFdmVudCIsInZhbHVlcyIsInVuZW5jb2RlZCIsImZvcm1hdHRlZFZhbHVlIiwiaW5uZXJIVE1MIiwiYWRkTWFya2luZyIsInNwcmVhZCIsImZpbHRlckZ1bmMiLCJ2YWx1ZVNpemVDbGFzc2VzIiwibWFya2VyU2l6ZUNsYXNzZXMiLCJ2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyIsIm1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyIsImdldENsYXNzZXMiLCJzaXplQ2xhc3NlcyIsIm9mZnNldCIsIm5vZGUiLCJhZGRTcHJlYWQiLCJyZW1vdmVQaXBzIiwiZ3JpZCIsImRlbnNpdHkiLCJncm91cCIsInN0ZXBwZWQiLCJpbnRlcnZhbCIsImdldEdyb3VwIiwiYXJyYXkiLCJpbmRleGVzIiwiZmlyc3RJblJhbmdlIiwibGFzdEluUmFuZ2UiLCJpZ25vcmVGaXJzdCIsImlnbm9yZUxhc3QiLCJwcmV2UGN0IiwidW5zaGlmdCIsImN1cnJlbnQiLCJxIiwibmV3UGN0IiwicGN0RGlmZmVyZW5jZSIsInBjdFBvcyIsInN0ZXBzIiwicmVhbFN0ZXBzIiwic3RlcFNpemUiLCJsb3ciLCJoaWdoIiwiaXNTdGVwcyIsImdlbmVyYXRlU3ByZWFkIiwiYmFzZVNpemUiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYWx0Iiwid2lkdGgiLCJoZWlnaHQiLCJtZXRob2QiLCJwYWdlT2Zmc2V0IiwiZXZlbnRUYXJnZXQiLCJ0b3VjaCIsIm1vdXNlIiwicG9pbnRlciIsImlzVG91Y2hPblRhcmdldCIsImNoZWNrVG91Y2giLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJ0YXJnZXRUb3VjaCIsImZpbmQiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwicG9pbnRzIiwiY3Vyc29yIiwiZml4RXZlbnQiLCJkb05vdFJlamVjdCIsImJ1dHRvbnMiLCJjYWxjUG9pbnQiLCJtZXRob2RzIiwiZXZlbnROYW1lIiwicGFzc2l2ZSIsImNhbGNQb2ludFRvUGVyY2VudGFnZSIsImRvY0VsZW0iLCJwcm9wb3NhbCIsInVzZXJBZ2VudCIsInRvcCIsImNsaWVudFRvcCIsImxlZnQiLCJjbGllbnRMZWZ0IiwiZG9jdW1lbnRMZWF2ZSIsInJlbGF0ZWRUYXJnZXQiLCJldmVudEVuZCIsImV2ZW50TW92ZSIsImFwcFZlcnNpb24iLCJidXR0b25zUHJvcGVydHkiLCJtb3ZlbWVudCIsInN0YXJ0Q2FsY1BvaW50IiwibW92ZUhhbmRsZXMiLCJsb2NhdGlvbnMiLCJoYW5kbGVOdW1iZXJzIiwibGlzdGVuZXJzIiwic2V0WmluZGV4IiwiZXZlbnRTdGFydCIsImNoaWxkcmVuIiwic3RvcFByb3BhZ2F0aW9uIiwibW92ZUV2ZW50IiwiZW5kRXZlbnQiLCJvdXRFdmVudCIsImdldENvbXB1dGVkU3R5bGUiLCJldmVudFRhcCIsImNsaWNrZWRQb3NpdGlvbiIsInNtYWxsZXN0RGlmZmVyZW5jZSIsImhhbmRsZVBvc2l0aW9uIiwiZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlIiwiZ2V0Q2xvc2VzdEhhbmRsZSIsImV2ZW50SG92ZXIiLCJ0YXJnZXRFdmVudCIsIm5hbWVzcGFjZWRFdmVudCIsInRFdmVudCIsInROYW1lc3BhY2UiLCJjaGVja0hhbmRsZVBvc2l0aW9uIiwicmVmZXJlbmNlIiwibG9va0JhY2t3YXJkIiwibG9va0ZvcndhcmQiLCJnZXRWYWx1ZSIsImluUnVsZU9yZGVyIiwidiIsInVwd2FyZCIsInByb3Bvc2FscyIsImYiLCJzdGF0ZSIsInRyYW5zZm9ybURpcmVjdGlvbiIsInpJbmRleCIsInRyYW5zbGF0ZVJ1bGUiLCJ1cGRhdGVDb25uZWN0IiwidXBkYXRlSGFuZGxlUG9zaXRpb24iLCJjb25uZWN0V2lkdGgiLCJzY2FsZVJ1bGUiLCJyZXNvbHZlVG9WYWx1ZSIsInZhbHVlU2V0IiwiZmlyZVNldEV2ZW50IiwiaXNJbml0IiwidmFsdWVHZXQiLCJsb2NhdGlvbiIsIm5lYXJieVN0ZXBzIiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiY29ubmVjdE9wdGlvbnMiLCJjb25uZWN0QmFzZSIsImFkZEVsZW1lbnRzIiwiaGFuZGxlQmVmb3JlIiwiaGFuZGxlQWZ0ZXIiLCJldmVudEhvbGRlcnMiLCJldmVudEhvbGRlciIsInBvc2l0aW9ucyIsIm5vdyIsImRlc3Ryb3kiLCJub1VpU2xpZGVyIiwic2V0IiwicmVzZXQiLCJfX21vdmVIYW5kbGVzIiwidXBkYXRlT3B0aW9ucyIsIm9wdGlvbnNUb1VwZGF0ZSIsInVwZGF0ZUFibGUiLCJuZXdPcHRpb25zIiwiX19zcGVjdHJ1bSIsInZlcnNpb24iLCJGb3JtYXRPcHRpb25zIiwic3RyUmV2ZXJzZSIsInN0clN0YXJ0c1dpdGgiLCJ0aHJvd0VxdWFsRXJyb3IiLCJGIiwiaXNWYWxpZE51bWJlciIsImZvcm1hdFRvIiwiZGVjaW1hbHMiLCJ0aG91c2FuZCIsIm1hcmsiLCJlbmNvZGVyIiwiZGVjb2RlciIsIm5lZ2F0aXZlQmVmb3JlIiwibmVnYXRpdmUiLCJlZGl0IiwidW5kbyIsImlucHV0SXNOZWdhdGl2ZSIsImlucHV0UGllY2VzIiwiaW5wdXRCYXNlIiwiZXhwIiwib3JpZ2luYWxJbnB1dCIsImlucHV0RGVjaW1hbHMiLCJvdXRwdXQiLCJmb3JtYXRGcm9tIiwic3RyRW5kc1dpdGgiLCJwYXNzQWxsIiwiYXJncyIsIndOdW1iIiwiaW5wdXRPcHRpb25zIiwib3B0aW9uTmFtZSIsIm9wdGlvblZhbHVlIiwiZmlsdGVyZWRPcHRpb25zIiwidmFsaWRhdGUiLCJ1YSIsImllIiwibW9iaWxlIiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiaWVtb2JpbGUiLCJpcGhvbmUiLCJpbnRlcm5hbCIsInJlZnJlc2hWYWx1ZSIsIm5vTWFza3NDYWNoZSIsInVzZXJPcHRpb25zIiwiaXNSVEwiLCJyZXNvbHZlQWxpYXMiLCJhbGlhc1N0ciIsImFsaWFzRGVmaW5pdGlvbiIsImFsaWFzZXMiLCJnZW5lcmF0ZU1hc2tTZXQiLCJub2NhY2hlIiwiZ2VuZXJhdGVNYXNrIiwibWV0YWRhdGEiLCJyZWdleE1hc2siLCJyZXBlYXRTdGFydCIsIm1hc2tzZXREZWZpbml0aW9uIiwibWFza2RlZktleSIsIm1hc2tzQ2FjaGUiLCJtYXNrVG9rZW4iLCJleGNsdWRlcyIsIm1hc2tMZW5ndGgiLCJqaXRPZmZzZXQiLCJrZWVwU3RhdGljIiwiYWx0TWFzayIsIm1zayIsInBvcCIsImV2TmFtZSIsImlzU3VwcG9ydGVkIiwibWFza1Njb3BlIiwiYWN0aW9uT2JqIiwidW5kb1ZhbHVlIiwiJGVsIiwibWF4TGVuZ3RoIiwiY29sb3JNYXNrIiwib3JpZ2luYWxQbGFjZWhvbGRlciIsInNraXBLZXlQcmVzc0V2ZW50Iiwic2tpcElucHV0RXZlbnQiLCJpZ25vcmFibGUiLCJtb3VzZUVudGVyIiwiZ2V0TWFza1RlbXBsYXRlIiwiYmFzZU9uSW5wdXQiLCJtaW5pbWFsUG9zIiwiaW5jbHVkZU1vZGUiLCJub0ppdCIsImNsZWFyT3B0aW9uYWxUYWlsIiwibmR4SW50bHpyIiwidGVzdFBvcyIsIm1hc2tUZW1wbGF0ZSIsImdldExhc3RWYWxpZFBvc2l0aW9uIiwiZ2V0TWFza1NldCIsIm9wdGlvbmFsaXR5IiwiZ2VuZXJhdGVkSW5wdXQiLCJkZXRlcm1pbmVUZXN0VGVtcGxhdGUiLCJnZXRUZXN0cyIsImxvY2F0b3IiLCJnZXRQbGFjZWhvbGRlciIsImdldFRlc3RUZW1wbGF0ZSIsImppdCIsIm5ld0Jsb2NrTWFya2VyIiwiZm4iLCJyZXNldE1hc2tTZXQiLCJzb2Z0IiwiY2xvc2VzdFRvIiwiYmVmb3JlIiwiYWZ0ZXIiLCJ2YWxpZHMiLCJwb3NOZHgiLCJwc05keCIsImdldERlY2lzaW9uVGFrZXIiLCJ0c3QiLCJkZWNpc2lvblRha2VyIiwiYWx0ZXJuYXRpb24iLCJnZXRMb2NhdG9yIiwiYWxpZ24iLCJtbG9jIiwidHN0TG9jYXRvciIsImJlc3RNYXRjaCIsInRhcmdldExvY2F0b3IiLCJnZXRUZXN0IiwiZGlzdGFuY2UiLCJvcHRpb25hbFF1YW50aWZpZXIiLCJ0c3RQcyIsInBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uIiwidmFsaWQiLCJ0bmR4IiwibGF0ZXN0TWF0Y2giLCJtYXNrVG9rZW5zIiwibmR4SW5pdGlhbGl6ZXIiLCJtYXRjaGVzIiwiaW5zZXJ0U3RvcCIsImNhY2hlRGVwZW5kZW5jeSIsInJlc29sdmVUZXN0RnJvbVRva2VuIiwibG9vcE5keCIsInF1YW50aWZpZXJSZWN1cnNlIiwiaGFuZGxlTWF0Y2giLCJpc0ZpcnN0TWF0Y2giLCJ0b2tlbkdyb3VwIiwiZmlyc3RNYXRjaCIsImlzUXVhbnRpZmllciIsInJlc29sdmVOZHhJbml0aWFsaXplciIsImFsdGVybmF0ZU5keCIsInRhcmdldEFsdGVybmF0aW9uIiwiaW5kZXhQb3MiLCJsbW50IiwibmR4UG9zIiwiYmVzdE1hdGNoQWx0SW5kZXgiLCJpc1N1YnNldE9mIiwiZXhwYW5kIiwicGF0dGVybiIsImV4cGFuZGVkIiwiY2hhckNvZGVBdCIsImZyb21DaGFyQ29kZSIsInNldE1lcmdlTG9jYXRvcnMiLCJ0YXJnZXRNYXRjaCIsImFsdE1hdGNoIiwibG9jTmR4IiwiY2QiLCJpc0dyb3VwIiwiaXNPcHRpb25hbCIsIm9wdGlvbmFsVG9rZW4iLCJtdGNoIiwiaXNBbHRlcm5hdG9yIiwibWFsdE1hdGNoZXMiLCJhbHRlcm5hdGVUb2tlbiIsIm1hbHRlcm5hdGVNYXRjaGVzIiwiY3VycmVudE1hdGNoZXMiLCJsb29wTmR4Q250IiwiYWx0SW5kZXgiLCJzaGlmdCIsImFtbmR4IiwiY3VycmVudFBvcyIsIm5keEluaXRpYWxpemVyQ2xvbmUiLCJhbHRJbmRleEFyciIsImFsdEluZGV4QXJyQ2xvbmUiLCJ1bk1hdGNoZWRBbHRlcm5hdGlvbiIsIm5keDEiLCJkcm9wTWF0Y2giLCJuZHgyIiwiYWx0TWF0Y2gyIiwicXQiLCJxbmR4IiwicXVhbnRpZmllciIsInByZXZpb3VzUG9zIiwibWVyZ2VMb2NhdG9ycyIsIm10bmR4IiwiZ2V0QnVmZmVyVGVtcGxhdGUiLCJnZXRCdWZmZXIiLCJub0NhY2hlIiwidmFsUmVzdWx0IiwicG9zQmVmb3JlIiwiU1BBQ0UiLCJjaGVja0FsdGVybmF0aW9uTWF0Y2giLCJhbHRBcnIxIiwiYWx0QXJyMiIsIm5hIiwibmFOZHgiLCJhbHRBcnJDIiwiaXNNYXRjaCIsIm5hQXJyIiwiYWxuZHgiLCJhbHRlcm5hdGUiLCJmcm9tU2V0VmFsaWQiLCJyQWx0UG9zIiwibGFzdEFsdCIsImFsdFBvcyIsInByZXZBbHRQb3MiLCJ2YWxpZFBvcyIsImRlY2lzaW9uUG9zIiwidmFsaWRQc0Nsb25lIiwiaXNWYWxpZFJzbHQiLCJsQWx0UG9zIiwidmFsaWRJbnB1dHNDbG9uZSIsInN0YXRpY0lucHV0c0JlZm9yZVBvcyIsInBvc09mZnNldCIsInZhbGlkSW5wdXRzIiwidGFyZ2V0THZwIiwiZnJvbUFsdGVybmF0ZSIsInZhbGlkYXRlT25seSIsInBvc09iaiIsImJlZ2luIiwibWFza1BvcyIsIl9pc1ZhbGlkIiwicG9zaXRpb24iLCJ2YWxpZGF0ZWRQb3MiLCJyZXZhbGlkYXRlTWFzayIsInBvc2l0aW9uc0Nsb25lIiwidHJhY2tiYWNrUG9zaXRpb25zIiwiY3VycmVudFBvc1ZhbGlkIiwic2Vla05leHQiLCJpc01hc2siLCJuUG9zIiwic25Qb3MiLCJwb3N0UmVzdWx0IiwicmVmcmVzaCIsIm9yaWdpbmFsUG9zIiwibmV3UG9zIiwiZmlsbE9ubHkiLCJwcyIsImN2cElucHV0IiwidmFsaWRUZXN0IiwiSXNFbmNsb3NlZFN0YXRpYyIsInNlbGVjdGlvbiIsInBvc01hdGNoIiwicHJldk1hdGNoIiwibmV4dE1hdGNoIiwibHZwIiwibmVlZHNWYWxpZGF0aW9uIiwibmV3QmxvY2siLCJzZWVrUHJldmlvdXMiLCJ3cml0ZUJ1ZmZlciIsInRyaWdnZXJFdmVudHMiLCJyZW5kZXJDb2xvck1hc2siLCJucHRWYWwiLCJfdmFsdWVHZXQiLCJyZXR1cm5QTCIsInByZXZUZXN0Iiwic3RhdGljQWx0ZXJuYXRpb25zIiwiSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIiLCJucHQiLCJucHRWYWx1ZSIsInZhbHVlQnVmZmVyIiwiRXZlbnRSdWxlciIsImV2ZW50SGFuZGxlciIsImltT3B0cyIsImRpc2FibGVkIiwicmVhZE9ubHkiLCJ0YWJUaHJvdWdoIiwiVEFCIiwicmV0dXJuVmFsIiwiZm9ybSIsImV2QXJyIiwiRXZlbnRIYW5kbGVycyIsImtleWRvd25FdmVudCIsImsiLCJCQUNLU1BBQ0UiLCJERUxFVEUiLCJCQUNLU1BBQ0VfU0FGQVJJIiwiWCIsImhhbmRsZVJlbW92ZSIsIkVORCIsIlBBR0VfRE9XTiIsInNoaWZ0S2V5IiwiSE9NRSIsIlBBR0VfVVAiLCJ1bmRvT25Fc2NhcGUiLCJFU0NBUEUiLCJhbHRLZXkiLCJjaGVja1ZhbCIsIklOU0VSVCIsImlnbm9yYWJsZXMiLCJrZXlwcmVzc0V2ZW50IiwiY2hlY2t2YWwiLCJ3cml0ZU91dCIsIndoaWNoIiwiY2hhckNvZGUiLCJtZXRhS2V5IiwiRU5URVIiLCJmb3J3YXJkUG9zaXRpb24iLCJfcmFkaXhEYW5jZSIsIndyaXRlT3V0QnVmZmVyIiwib25LZXlWYWxpZGF0aW9uIiwicGFzdGVFdmVudCIsInRlbXBWYWx1ZSIsIm9yaWdpbmFsRXZlbnQiLCJpbnB1dFZhbHVlIiwidmFsdWVCZWZvcmVDYXJldCIsInZhbHVlQWZ0ZXJDYXJldCIsImNsaXBib2FyZERhdGEiLCJnZXREYXRhIiwicGFzdGVWYWx1ZSIsImlucHV0RmFsbEJhY2tFdmVudCIsImlucHV0Q2hhciIsIml2IiwiaWVNb2JpbGVIYW5kbGVyIiwicmFkaXhQb2ludEhhbmRsZXIiLCJmcm9udFBhcnQiLCJiYWNrUGFydCIsImZyb250QnVmZmVyUGFydCIsImJhY2tCdWZmZXJQYXJ0IiwiZW50cmllcyIsImlzRW50cnkiLCJmcGwiLCJrZXlwcmVzcyIsImtleWRvd24iLCJiZWZvcmVJbnB1dEV2ZW50Iiwic2V0VmFsdWVFdmVudCIsImZvY3VzRXZlbnQiLCJzaG93TWFza09uRm9jdXMiLCJwb3NpdGlvbkNhcmV0T25UYWIiLCJjbGlja0V2ZW50IiwibW91c2VsZWF2ZUV2ZW50IiwiYWN0aXZlRWxlbWVudCIsInRhYmJlZCIsInNlbGVjdGVkQ2FyZXQiLCJjbGlja1BvcyIsInZwcyIsInZwIiwiZG9SYWRpeEZvY3VzIiwiY2xpY2tQb3NpdGlvbiIsImx2Y2xpY2tQb3NpdGlvbiIsImxhc3RQb3NpdGlvbiIsImN1dEV2ZW50IiwiY2xpcERhdGEiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJibHVyRXZlbnQiLCJtb3VzZWVudGVyRXZlbnQiLCJzaG93TWFza09uSG92ZXIiLCJzdWJtaXRFdmVudCIsInJlbW92ZU1hc2tPblN1Ym1pdCIsInJlc2V0RXZlbnQiLCJucHR2bCIsImluaXRpYXRpbmdFdmVudCIsImNoYXJDb2RlcyIsImluaXRpYWxOZHgiLCJzdGF0aWNJbnB1dCIsImlzVGVtcGxhdGVNYXRjaCIsInVtVmFsdWUiLCJwbmR4IiwiYnVmZmVyVmFsdWUiLCJub3RyYW5zbGF0ZSIsInRyYW5zbGF0ZVBvc2l0aW9uIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJnZXRSYW5nZUF0IiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImNyZWF0ZVJhbmdlIiwiZHVwbGljYXRlIiwibW92ZVN0YXJ0Iiwic2Nyb2xsQ2FsYyIsImRlZmF1bHRWaWV3IiwiY3VycmVudFN0eWxlIiwiZm9udFNpemUiLCJzY3JvbGxXaWR0aCIsInRleHROb2RlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb2xsYXBzZSIsInNlbCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwibW92ZUVuZCIsInNlbGVjdCIsImRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uIiwicmV0dXJuRGVmaW5pdGlvbiIsImJsIiwibHZUZXN0IiwibHZUZXN0QWx0IiwidGVtcGxhdGUiLCJjb21wbGV0ZSIsImxycCIsImFtbCIsImZyb21Jc1ZhbGlkIiwicGVuZCIsImluaXRpYWxpemVDb2xvck1hc2siLCJjb21wdXRlZFN0eWxlIiwidGV4dEFsaWduIiwib2Zmc2V0TGVmdCIsImNsaWVudHgiLCJ0ZXh0VHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsInZpc2liaWxpdHkiLCJ3aGl0ZVNwYWNlIiwiaXRsIiwiaW5wdXRUZXh0IiwicHJldmlvdXNXaWR0aCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0MSIsIm9mZnNldDIiLCJmaW5kQ2FyZXRQb3MiLCJjbGVhciIsImlzU3RhdGljIiwic2V0RW50cnkiLCJtdGwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBvc2l0aW9uQ29sb3JNYXNrIiwiYWN0aW9uIiwiZWxlbWVudFR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJzdXBwb3J0c0lucHV0VHlwZSIsImlzQ29udGVudEVkaXRhYmxlIiwic2V0dGVyIiwiX192YWx1ZUdldCIsIm5vVmFsdWVQYXRjaGluZyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwidmFsdWVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJfX3ZhbHVlU2V0Iiwib3ZlcnJ1bGVSVEwiLCJpbnB1dG1hc2twYXRjaCIsInZhbGhvb2tHZXQiLCJ2YWxob29rU2V0IiwiJGVsZW0iLCJwYXRjaFZhbGhvb2siLCJpbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayIsInBhdGNoVmFsdWVQcm9wZXJ0eSIsImlzRWxlbWVudFR5cGVTdXBwb3J0ZWQiLCJkaXNhYmxlUHJlZGljdGl2ZVRleHQiLCJhdXRvY29ycmVjdCIsIm9uY29tcGxldGUiLCJvbmluY29tcGxldGUiLCJvbmNsZWFyZWQiLCJpbnB1dEV2ZW50T25seSIsInJsIiwibG1pYiIsIm1hc2tUYXJnZXQiLCJtdGR0IiwiZGF0YUF0dHJpYnV0ZSIsImVzY2FwZUNoYXIiLCJzdGF0aWNEZWZpbml0aW9uU3ltYm9sIiwiaW1wb3J0RGF0YUF0dHJpYnV0ZXMiLCI5IiwiZWxlbXMiLCJnZXRFbGVtZW50QnlJZCIsInNjb3BlZE9wdHMiLCJvcHRpb24iLCJkYXRhb3B0aW9ucyIsIm9wdGlvbkRhdGEiLCJhdHRyT3B0aW9ucyIsImltcG9ydE9wdGlvbiIsImltcG9ydEF0dHJpYnV0ZU9wdGlvbnMiLCJub3JlbWFzayIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJvcGVuaW5nVG9rZW4iLCJjdXJyZW50T3BlbmluZ1Rva2VuIiwiYWx0ZXJuYXRvciIsImxhc3RNYXRjaCIsInJlZ2V4VG9rZW5pemVyIiwiZXNjYXBlZCIsImN1cnJlbnRUb2tlbiIsIk1hc2tUb2tlbiIsIm9wZW5lbmluZ3MiLCJvcGVuR3JvdXAiLCJhbHRlcm5hdG9yR3JvdXAiLCJpbnNlcnRUZXN0RGVmaW5pdGlvbiIsIm10b2tlbiIsIm1hc2tkZWYiLCJkZWZhdWx0Q2FzZSIsIm1uZHgiLCJncm91cGlmeSIsImdyb3VwVG9rZW4iLCJtcWoiLCJtcSIsIm1xMCIsIm1xMSIsInRtcE1hdGNoIiwiZ3JvdXBRdWFudGlmaWVyIiwic3ViVG9rZW4iLCJ2ZXJpZnlHcm91cE1hcmtlciIsInRva2VuIiwibmV4dFRva2VuIiwicmV2ZXJzZVRva2VucyIsImludE1hdGNoIiwic3QiLCJleHRlbmREZWZhdWx0cyIsImRlZmluaXRpb24iLCJ1bm1hc2siLCJzdHIiLCJMRUZUIiwiQ09OVFJPTCIsInN0ZXBzU2xpZGVyIiwidmlld05vZGVzIiwidmlld1ByaWNlIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzhfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTBfX18iLCJfX19D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QUFRLElBQ3hDQyxFQUFnQyxFQUFRLElBQ3hDbXdDLEVBQWdDLEVBQVEsSUFDeENDLEVBQWdDLEVBQVEsSUFDeENDLEVBQWlDLEVBQVEsSUFDekNDLEVBQWlDLEVBQVEsSUFDN0NyNkMsRUFBVXFKLEdBQTRCLEdBQ3RDLElBQUlXLEVBQXFDVCxFQUFnQ0MsR0FDckVTLEVBQXFDVixFQUFnQ0UsR0FDckVTLEVBQXFDWCxFQUFnQ0csRUFBK0IsQ0FBRTRZLEtBQU0sYUFDNUduWSxFQUFxQ1osRUFBZ0NJLEdBQ3JFUyxFQUFxQ2IsRUFBZ0NLLEdBQ3JFUyxFQUFxQ2QsRUFBZ0NNLEVBQStCLENBQUV5WSxLQUFNLGFBQzVHaFksRUFBcUNmLEVBQWdDTyxHQUNyRVMsRUFBcUNoQixFQUFnQ1EsR0FDckV1d0MsRUFBcUMvd0MsRUFBZ0Myd0MsRUFBK0IsQ0FBRTUzQixLQUFNLGFBQzVHaTRCLEVBQXFDaHhDLEVBQWdDNHdDLEdBQ3JFSyxFQUFzQ2p4QyxFQUFnQzZ3QyxHQUN0RUssRUFBc0NseEMsRUFBZ0M4d0MsRUFBZ0MsQ0FBRS8zQixLQUFNLGFBRWxIdGlCLEVBQVE0RCxLQUFLLENBQUMzRCxFQUFPQyxFQUFJLHFoRUFBdWpFOEosRUFBcUMsYUFBZUEsRUFBcUMsd0JBQTRCQyxFQUFxQyw0QkFBZ0NDLEVBQXFDLGtHQUF3R0MsRUFBcUMsYUFBZUEsRUFBcUMsd0JBQTRCQyxFQUFxQyw0QkFBZ0NDLEVBQXFDLG1HQUF5R0MsRUFBcUMsYUFBZUEsRUFBcUMsd0JBQTRCQyxFQUFxQyw0QkFBZ0MrdkMsRUFBcUMsaUdBQXVHQyxFQUFxQyxhQUFlQSxFQUFxQyx3QkFBNEJDLEVBQXNDLDRCQUFnQ0MsRUFBc0MsMlVBQWtWLEtBRXhsSHg2QyxFQUFPRCxRQUFVQSxHLGtCQy9CakJDLEVBQU9ELFFBQVUsSUFBMEIiLCJmaWxlIjoic2NyaXB0cy9mb3JtLWVsZW1lbnRzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxOTkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tpXSk7XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9Nb250c2VycmF0LVJlZ3VsYXItYTcwMDk1NC50dGZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9Nb250c2VycmF0LVJlZ3VsYXIuZm9udC1jYjgzMzA5LnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtQm9sZC0zYWMxYTUzLndvZmZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9Nb250c2VycmF0LUJvbGQtOWUzMTE3YS50dGZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9Nb250c2VycmF0LUJvbGQuZm9udC01OTdiNzZiLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLWI2ZGIyMjMud29mZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLTc3MzAwOTMudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIuZm9udC0wZTU0NDMwLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL1F1aWNrc2FuZC1Cb2xkLWQ5OGU2NzIud29mZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL1F1aWNrc2FuZC1Cb2xkLTcwYmFlY2EudHRmXCI7IiwiaW1wb3J0IFwiLi4vLi4vc3R5bGUvaW5kZXguc2Nzc1wiO1xyXG5pbXBvcnQgXCIuL2Zvcm0tZWxlbWVudHMuc2Nzc1wiO1xyXG5pbXBvcnQgSW5wdXRtYXNrIGZyb20gXCJpbnB1dG1hc2tcIjtcclxuaW1wb3J0IERyb3BEb3duIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2Ryb3AtZG93bi9kcm9wLWRvd25cIjtcclxuaW1wb3J0IFwiLi4vLi4vY29tcG9uZW50cy9yYW5nZS1zbGlkZXIvcmFuZ2Utc2xpZGVyXCI7XHJcblxyXG5JbnB1dG1hc2soeyBtYXNrOiBcIjk5Ljk5Ljk5OTlcIiwgcGxhY2Vob2xkZXI6IFwi0JTQlC7QnNCcLtCT0JPQk9CTXCIgfSkubWFzayhcclxuICBcIiNtYXNrZWRUZXh0RmllbGRcIlxyXG4pO1xyXG5JbnB1dG1hc2soeyBtYXNrOiBcIjk5Ljk5Ljk5OTlcIiwgcGxhY2Vob2xkZXI6IFwi0JTQlC7QnNCcLtCT0JPQk9CTXCIgfSkubWFzayhcclxuICBcIiNhcnJpdmFsLWlucHV0XCJcclxuKTtcclxuSW5wdXRtYXNrKHsgbWFzazogXCI5OS45OS45OTk5XCIsIHBsYWNlaG9sZGVyOiBcIjE5LjA4LjIwMTlcIiB9KS5tYXNrKFxyXG4gIFwiI2RlcGFydHVyZS1pbnB1dFwiXHJcbik7XHJcblxyXG5jb25zdCBkcm9wRG93bkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHJvcC1kb3duLWNvbnRhaW5lclwiKTtcclxuY29uc3QgaW5wdXREcm9wRG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbnVtYmVyLWd1ZXN0cy1pbnB1dDJcIik7XHJcblxyXG5jb25zdCBkcm9wRG93bk9wdGlvbnMgPSB7XHJcbiAgY29udGFpbmVyOiBkcm9wRG93bkNvbnRhaW5lcixcclxuICBpbnB1dDogaW5wdXREcm9wRG93bixcclxuICBjb3VudEVsZW1lbnRzOiBbXHJcbiAgICB7IG5hbWU6IFwi0KHQv9Cw0LvRjNC90LhcIiwgY291bnRHcm91cE5hbWU6IFwiYmVkcm9vbXNcIiwgc3RhcnRWYWx1ZTogMiB9LFxyXG4gICAgeyBuYW1lOiBcItCa0YDQvtCy0LDRgtC4XCIsIGNvdW50R3JvdXBOYW1lOiBcImJlZFwiLCBzdGFydFZhbHVlOiAyIH0sXHJcbiAgICB7IG5hbWU6IFwi0JLQsNC90L3Ri9C1INC60L7QvNC90LDRgtGLXCIsIGNvdW50R3JvdXBOYW1lOiBcImJhdGhcIiwgc3RhcnRWYWx1ZTogMCB9XHJcbiAgXSxcclxuICBjb3VudEdyb3VwVmlldzoge1xyXG4gICAgYmVkcm9vbXM6IHsgY291bnRlcjogMiwgdmlld3M6IFtcItGB0L/QsNC70YzQvdGPXCIsIFwi0YHQv9Cw0LvRjNC90LhcIiwgXCLRgdC/0LDQu9C10L1cIl0gfSxcclxuICAgIGJlZDogeyBjb3VudGVyOiAyLCB2aWV3czogW1wi0LrRgNC+0LLQsNGC0YxcIiwgXCLQutGA0L7QstCw0YLQuFwiLCBcItC60YDQvtCy0LDRgtC10LlcIl0gfSxcclxuICAgIGJhdGg6IHtcclxuICAgICAgY291bnRlcjogMCxcclxuICAgICAgdmlld3M6IFtcItCy0LDQvdC90LDRjyDQutC+0LzQvdCw0YLQsFwiLCBcItCy0LDQvdC90YvQtSDQutC+0LzQvdCw0YLRi1wiLCBcItCy0LDQvdC90YvRhSDQutC+0LzQvdCw0YJcIl1cclxuICAgIH1cclxuICB9LFxyXG4gIHBsYWNlaG9sZGVyOiBcItCj0LTQvtCx0YHRgtCy0LAg0L3QvtC80LXRgNCwXCIsXHJcbiAgaXNIaWRlQ29udHJvbDogdHJ1ZSxcclxuICBpc1BpblNob3c6IHRydWVcclxufTtcclxuXHJcbmNvbnN0IGRyb3BEb3duID0gbmV3IERyb3BEb3duKGRyb3BEb3duT3B0aW9ucyk7XHJcbmRyb3BEb3duLmluaXQoKTtcclxuXHJcbmNvbnN0IGRyb3BEb3duR3Vlc3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Ryb3AtZG93bi1jb250YWluZXIyXCIpO1xyXG5jb25zdCBpbnB1dERyb3BEb3duR3Vlc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI251bWJlci1ndWVzdHMtaW5wdXQzXCIpO1xyXG5cclxuY29uc3QgZHJvcERvd25HdWVzdE9wdGlvbnMgPSB7XHJcbiAgY29udGFpbmVyOiBkcm9wRG93bkd1ZXN0Q29udGFpbmVyLFxyXG4gIGlucHV0OiBpbnB1dERyb3BEb3duR3Vlc3QsXHJcbiAgY291bnRFbGVtZW50czogW1xyXG4gICAgeyBuYW1lOiBcItCS0LfRgNC+0YHQu9GL0LVcIiwgY291bnRHcm91cE5hbWU6IFwiZ3Vlc3RcIiB9LFxyXG4gICAgeyBuYW1lOiBcItCU0LXRgtC4XCIsIGNvdW50R3JvdXBOYW1lOiBcImd1ZXN0XCIgfSxcclxuICAgIHsgbmFtZTogXCLQnNC70LDQtNC10L3RhtGLXCIsIGNvdW50R3JvdXBOYW1lOiBcImNoaWxkXCIgfVxyXG4gIF0sXHJcbiAgY291bnRHcm91cFZpZXc6IHtcclxuICAgIGd1ZXN0OiB7IGNvdW50ZXI6IDAsIHZpZXdzOiBbXCLQs9C+0YHRgtGMXCIsIFwi0LPQvtGB0YLRj1wiLCBcItCz0L7RgdGC0LXQuVwiXSB9LFxyXG4gICAgY2hpbGQ6IHsgY291bnRlcjogMCwgdmlld3M6IFtcItC80LvQsNC00LXQvdC10YZcIiwgXCLQvNC70LDQtNC10L3RhtCwXCIsIFwi0LzQu9Cw0LTQtdC90YbQtdCyXCJdIH1cclxuICB9LFxyXG4gIHBsYWNlaG9sZGVyOiBcItCh0LrQvtC70YzQutC+INCz0L7RgdGC0LXQuVwiLFxyXG4gIGlzUGluU2hvdzogdHJ1ZVxyXG59O1xyXG5cclxuY29uc3QgZHJvcERvd25HdWVzdCA9IG5ldyBEcm9wRG93bihkcm9wRG93bkd1ZXN0T3B0aW9ucyk7XHJcbmRyb3BEb3duR3Vlc3QuaW5pdCgpO1xyXG5cclxuY29uc3QgZHJvcERvd25RdWVzdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHJvcC1kb3duLWNvbnRhaW5lcjNcIik7XHJcbmNvbnN0IGlucHV0RHJvcERvd25RdWVzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbnVtYmVyLWd1ZXN0cy1pbnB1dDRcIik7XHJcblxyXG5jb25zdCBkcm9wRG93blF1ZXN0T3B0aW9ucyA9IHtcclxuICBjb250YWluZXI6IGRyb3BEb3duUXVlc3RDb250YWluZXIsXHJcbiAgaW5wdXQ6IGlucHV0RHJvcERvd25RdWVzdCxcclxuICBjb3VudEVsZW1lbnRzOiBbXHJcbiAgICB7IG5hbWU6IFwi0JLQt9GA0L7RgdC70YvQtVwiLCBjb3VudEdyb3VwTmFtZTogXCJndWVzdFwiLCBzdGFydFZhbHVlOiAyIH0sXHJcbiAgICB7IG5hbWU6IFwi0JTQtdGC0LhcIiwgY291bnRHcm91cE5hbWU6IFwiZ3Vlc3RcIiwgc3RhcnRWYWx1ZTogMSB9LFxyXG4gICAgeyBuYW1lOiBcItCc0LvQsNC00LXQvdGG0YtcIiwgY291bnRHcm91cE5hbWU6IFwiY2hpbGRcIiB9XHJcbiAgXSxcclxuICBjb3VudEdyb3VwVmlldzoge1xyXG4gICAgZ3Vlc3Q6IHsgY291bnRlcjogMywgdmlld3M6IFtcItCz0L7RgdGC0YxcIiwgXCLQs9C+0YHRgtGPXCIsIFwi0LPQvtGB0YLQtdC5XCJdIH0sXHJcbiAgICBjaGlsZDogeyBjb3VudGVyOiAwLCB2aWV3czogW1wi0LzQu9Cw0LTQtdC90LXRhlwiLCBcItC80LvQsNC00LXQvdGG0LBcIiwgXCLQvNC70LDQtNC10L3RhtC10LJcIl0gfVxyXG4gIH0sXHJcbiAgcGxhY2Vob2xkZXI6IFwi0KHQutC+0LvRjNC60L4g0LPQvtGB0YLQtdC5XCIsXHJcbiAgaXNQaW5TaG93OiB0cnVlXHJcbn07XHJcblxyXG5jb25zdCBkcm9wRG93blF1ZXN0ID0gbmV3IERyb3BEb3duKGRyb3BEb3duUXVlc3RPcHRpb25zKTtcclxuZHJvcERvd25RdWVzdC5pbml0KCk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbGlzdCwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogbGlzdFtpXVsxXSxcbiAgICAgIG1lZGlhOiBsaXN0W2ldWzJdLFxuICAgICAgc291cmNlTWFwOiBsaXN0W2ldWzNdXG4gICAgfTtcblxuICAgIGlmIChzdHlsZXNJbkRvbVttb2R1bGVJZF1baV0pIHtcbiAgICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXVtpXShwYXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb21bbW9kdWxlSWRdLnB1c2goYWRkU3R5bGUocGFydCwgb3B0aW9ucykpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIG1vZHVsZUlkID0gb3B0aW9ucy5iYXNlID8gbW9kdWxlSWQgKyBvcHRpb25zLmJhc2UgOiBtb2R1bGVJZDtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG5cbiAgaWYgKCFzdHlsZXNJbkRvbVttb2R1bGVJZF0pIHtcbiAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0gPSBbXTtcbiAgfVxuXG4gIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc3R5bGVzSW5Eb21bbW9kdWxlSWRdKSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0gPSBbXTtcbiAgICB9XG5cbiAgICBtb2R1bGVzVG9Eb20obW9kdWxlSWQsIG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaiA9IG5ld0xpc3QubGVuZ3RoOyBqIDwgc3R5bGVzSW5Eb21bbW9kdWxlSWRdLmxlbmd0aDsgaisrKSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF1bal0oKTtcbiAgICB9XG5cbiAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0ubGVuZ3RoID0gbmV3TGlzdC5sZW5ndGg7XG5cbiAgICBpZiAoc3R5bGVzSW5Eb21bbW9kdWxlSWRdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW21vZHVsZUlkXTtcbiAgICB9XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL1F1aWNrc2FuZC1Cb2xkLmZvbnQtM2M5ZTdiZS5zdmdcIjsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNy0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Zvcm0tZWxlbWVudHMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbm91aXNsaWRlci9kaXN0cmlidXRlL25vdWlzbGlkZXIubWluLmNzc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9jaGVja2JveC9leHBhbmQtbW9yZS5wbmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9saWtlYnRuL2xpa2UucG5nXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudHMvbGlrZWJ0bi9saWtlLWFjdGl2ZS5wbmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9yYXRlYnRuL3N0YXIucG5nXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudHMvcmF0ZWJ0bi9zdGFyLWFjdGl2ZS5wbmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9pbnB1dC9leHBhbmQtbW9yZS5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9idXR0b24vYXJyb3cuc3ZnXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9hcnJvdy5wbmdcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jaGVja2JveF9fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxOHB4O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5jaGVja2JveF9fdGl0bGUtLWV4cGFuZGFibGV7cG9zaXRpb246cmVsYXRpdmV9LmNoZWNrYm94X190aXRsZS0tZXhwYW5kYWJsZSBidXR0b257d2lkdGg6MTAwJTtjb2xvcjojMWYyMDQxO3RleHQtYWxpZ246bGVmdH0uY2hlY2tib3hfX3RpdGxlLS1leHBhbmRhYmxlIGJ1dHRvbjo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjVweDtyaWdodDoxNnB4O3dpZHRoOjEycHg7aGVpZ2h0OjhweDtjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBuby1yZXBlYXQ7Y3Vyc29yOnBvaW50ZXJ9LmNoZWNrYm94X190aXRsZS0tZXhwYW5kYWJsZS1vcGVuIGJ1dHRvbjo6YWZ0ZXJ7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpO3JpZ2h0OjE3cHh9LmNoZWNrYm94X19leHBhbmRhYmxle21hcmdpbjowO3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6MDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtib3JkZXI6bm9uZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2N1cnNvcjpwb2ludGVyfS5jaGVja2JveF9faXRlbXt3aWR0aDoyNDBweDttYXJnaW46MDttYXJnaW4tYm90dG9tOjEycHh9LmNoZWNrYm94X19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5jaGVja2JveC0tcmljaCAuY2hlY2tib3hfX2l0ZW17d2lkdGg6MjY0cHh9LmNoZWNrYm94X19pdGVtIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl17ZGlzcGxheTpub25lfS5jaGVja2JveF9faXRlbSBsYWJlbHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmctbGVmdDozMHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC40NSk7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6bm9ybWFsO2xpbmUtaGVpZ2h0OjE4cHg7Y3Vyc29yOnBvaW50ZXJ9LmNoZWNrYm94X19pdGVtIGxhYmVsOjpiZWZvcmV7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMnB4O2xlZnQ6MDt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czo0cHg7LXdlYmtpdC10cmFuc2l0aW9uOmJvcmRlciAwLjNzIGVhc2UgMHM7dHJhbnNpdGlvbjpib3JkZXIgMC4zcyBlYXNlIDBzfS5jaGVja2JveF9faXRlbSBsYWJlbDo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjNweDtsZWZ0OjdweDt3aWR0aDo0cHg7aGVpZ2h0OjZweDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjYmM5Y2ZmO2JvcmRlci1yaWdodDoycHggc29saWQgI2JjOWNmZjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgMC4zcyBlYXNlIDBzLCB2aXNpYmlsaXR5IDAuM3MgZWFzZSAwczt0cmFuc2l0aW9uOm9wYWNpdHkgMC4zcyBlYXNlIDBzLCB2aXNpYmlsaXR5IDAuM3MgZWFzZSAwc30uY2hlY2tib3hfX2l0ZW0gaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTpjaGVja2VkK2xhYmVsOjphZnRlcnt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxfS5jaGVja2JveF9faXRlbSBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQrbGFiZWw6OmJlZm9yZXtib3JkZXItY29sb3I6I2JjOWNmZn0uY2hlY2tib3hfX2Rlc2Nye21hcmdpbjowO21hcmdpbi10b3A6NXB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTRweH0uY2hlY2tib3hfX2l0ZW0gLmNoZWNib3hfX2xibC0tcmljaHtmb250LXNpemU6MTRweDtmb250LXdlaWdodDpib2xkO2xpbmUtaGVpZ2h0OjE4cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uY2hlY2tib3hfX2l0ZW0tbGlzdC0taGlkZXtkaXNwbGF5Om5vbmV9LnJhZGlvYnRuX190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE4cHg7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnJhZGlvYnRuX19pdGVte2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowO21hcmdpbi1yaWdodDoxNnB4O3ZlcnRpY2FsLWFsaWduOnRvcH0ucmFkaW9idG5fX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0ucmFkaW9idG5fX2l0ZW0gaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXXtkaXNwbGF5Om5vbmV9LnJhZGlvYnRuX19pdGVtIGxhYmVse3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7cGFkZGluZy1sZWZ0OjMwcHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LXNpemU6MTRweDtmb250LXdlaWdodDpub3JtYWw7bGluZS1oZWlnaHQ6MTRweDtjdXJzb3I6cG9pbnRlcn0ucmFkaW9idG5fX2l0ZW0gbGFiZWw6OmJlZm9yZXstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246YWJzb2x1dGU7dG9wOi0ycHg7bGVmdDowO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItcmFkaXVzOjUwJTstd2Via2l0LXRyYW5zaXRpb246Ym9yZGVyIDAuM3MgZWFzZSAwczt0cmFuc2l0aW9uOmJvcmRlciAwLjNzIGVhc2UgMHN9LnJhZGlvYnRuX19pdGVtIGxhYmVsOjphZnRlcntjb250ZW50OlxcXCJcXFwiO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MnB4O2xlZnQ6NHB4O3dpZHRoOjEycHg7aGVpZ2h0OjEycHg7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCNiYzljZmYpLCB0bygjOGJhNGY5KSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmIDAlLCAjOGJhNGY5IDEwMCUpOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDAuM3MgZWFzZSAwcywgdmlzaWJpbGl0eSAwLjNzIGVhc2UgMHM7dHJhbnNpdGlvbjpvcGFjaXR5IDAuM3MgZWFzZSAwcywgdmlzaWJpbGl0eSAwLjNzIGVhc2UgMHN9LnJhZGlvYnRuX19pdGVtIGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl06Y2hlY2tlZCtsYWJlbDo6YWZ0ZXJ7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0ucmFkaW9idG5fX2l0ZW0gaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXTpjaGVja2VkK2xhYmVsOjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNiYzljZmZ9LnJhZGlvYnRuX19pdGVtIGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl06Y2hlY2tlZCtsYWJlbHtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS50b2dnbGVfX3RpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MThweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0udG9nZ2xlX19pdGVte21hcmdpbjowO21hcmdpbi1ib3R0b206MTVweH0udG9nZ2xlX19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS50b2dnbGVfX2l0ZW0gaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXXtkaXNwbGF5Om5vbmV9LnRvZ2dsZV9faXRlbSBsYWJlbHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmctbGVmdDo1MHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC40NSk7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6bm9ybWFsO2xpbmUtaGVpZ2h0OjE4cHg7Y3Vyc29yOnBvaW50ZXJ9LnRvZ2dsZV9faXRlbSBsYWJlbDo6YmVmb3Jley13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6NDBweDtoZWlnaHQ6MjBweDtjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlci1yYWRpdXM6MTBweDstd2Via2l0LXRyYW5zaXRpb246Ym9yZGVyIDAuM3MgZWFzZSAwczt0cmFuc2l0aW9uOmJvcmRlciAwLjNzIGVhc2UgMHN9LnRvZ2dsZV9faXRlbSBsYWJlbDo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NHB4O2xlZnQ6NHB4O3dpZHRoOjEycHg7aGVpZ2h0OjEycHg7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZDpyZ2JhKDMxLDMyLDY1LDAuMjUpOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAwLjJzIGVhc2UgMHM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAwLjJzIGVhc2UgMHM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4ycyBlYXNlIDBzO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMnMgZWFzZSAwcywgLXdlYmtpdC10cmFuc2Zvcm0gMC4ycyBlYXNlIDBzfS50b2dnbGVfX2l0ZW0gaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTpjaGVja2VkK2xhYmVsOjphZnRlcnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjYmM5Y2ZmKSwgdG8oIzhiYTRmOSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiAwJSwgIzhiYTRmOSAxMDAlKX0udG9nZ2xlX19pdGVtIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCtsYWJlbDo6YmVmb3Jle2JvcmRlci1jb2xvcjojYmM5Y2ZmfS5saWtlYnRuX190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE2cHg7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9Lmxpa2VidG5fX2l0ZW17ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246dG9wO21hcmdpbjowO21hcmdpbi1yaWdodDo2cHh9Lmxpa2VidG5fX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0ubGlrZWJ0bl9faXRlbSBidXR0b257LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjQwcHg7aGVpZ2h0OjIwcHg7bWFyZ2luOjA7cGFkZGluZzowO3BhZGRpbmctbGVmdDo3cHg7Y29udGVudDpcXFwiXFxcIjtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNDUpO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIlF1aWNrc2FuZFxcXCIsIHNhbnMtc2VyaWY7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxMHB4O2xpbmUtaGVpZ2h0OjEycHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czoxMHB4fS5saWtlYnRuX19pdGVtIGJ1dHRvbjo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXFwiXFxcIjt0b3A6NXB4O2xlZnQ6M3B4O3dpZHRoOjEwcHg7aGVpZ2h0OjhweDtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIikgbm8tcmVwZWF0fS5saWtlYnRuX19pdGVtLS1hY3RpdmUgYnV0dG9ue2NvbG9yOiNiYzljZmY7Ym9yZGVyLWNvbG9yOiNiYzljZmZ9Lmxpa2VidG5fX2l0ZW0tLWFjdGl2ZSBidXR0b246OmFmdGVye2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKSBuby1yZXBlYXR9LnJhdGVidG5fX3RpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MThweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucmF0ZWJ0bl9faXRlbXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpyZXZlcnNlOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTstd2Via2l0LWJveC1wYWNrOmVuZDstbXMtZmxleC1wYWNrOmVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7bWFyZ2luLXJpZ2h0OjI1cHg7Zm9udC1zaXplOjB9LnJhdGVidG5fX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0ucmF0ZWJ0bl9faXRlbSBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJde2Rpc3BsYXk6bm9uZX0ucmF0ZWJ0bl9faXRlbSBsYWJlbHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7bWFyZ2luLWxlZnQ6NHB4O2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyArIFwiKSBuby1yZXBlYXQ7Y3Vyc29yOnBvaW50ZXJ9LnJhdGVidG5fX2l0ZW0gbGFiZWw6bGFzdC1jaGlsZHttYXJnaW4tbGVmdDowfS5yYXRlYnRuX19pdGVtIGxhYmVsOmhvdmVyLC5yYXRlYnRuX19pdGVtIGxhYmVsOmhvdmVyIH4gbGFiZWx7YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fICsgXCIpIG5vLXJlcGVhdH0ucmF0ZWJ0bl9faXRlbSBpbnB1dDpjaGVja2VkIH4gbGFiZWx7YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fICsgXCIpIG5vLXJlcGVhdH0ucmF0ZWJ0bl9faXRlbS13cmFwe2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXh9LnJhbmdlX192aWV3e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW4tYm90dG9tOjIycHh9LnJhbmdlX19wcmljZSBpbnB1dHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6NTBweDttYXJnaW46MDttYXJnaW4tcmlnaHQ6MnB4O2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6bm9ybWFsO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC40NSk7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7dmVydGljYWwtYWxpZ246dG9wO2JvcmRlcjpub25lO2JhY2tncm91bmQ6dHJhbnNwYXJlbnR9LnJhbmdlX19wcmljZSBpbnB1dDpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowO21hcmdpbi1sZWZ0OjJweH0ucmFuZ2VfX3NsaWRlcntoZWlnaHQ6NnB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnJhbmdlX19zbGlkZXIgLm5vVWktY29ubmVjdHtoZWlnaHQ6NnB4O2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjNmZjZjk3KSwgdG8oIzY2ZDJlYSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKX0ucmFuZ2VfX3NsaWRlciAubm9VaS1oYW5kbGV7d2lkdGg6MTRweDtoZWlnaHQ6MTRweDtib3JkZXI6MnB4IHNvbGlkICNmZmZmZmY7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCM2ZmNmOTcpLCB0bygjNjZkMmVhKSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNmZjZjk3IDAlLCAjNjZkMmVhIDEwMCUpOy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZCAwLjRzIGVhc2UgMHMsIGJvcmRlciAwLjRzIGVhc2UgMHM7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDAuNHMgZWFzZSAwcywgYm9yZGVyIDAuNHMgZWFzZSAwc30ucmFuZ2VfX3NsaWRlciAubm9VaS1oYW5kbGU6OmFmdGVyLC5yYW5nZV9fc2xpZGVyIC5ub1VpLWhhbmRsZTo6YmVmb3Jle2Rpc3BsYXk6bm9uZX0ucmFuZ2VfX3NsaWRlciAubm9VaS1oYW5kbGUtdXBwZXIsLnJhbmdlX19zbGlkZXIgLm5vVWktaGFuZGxlLWxvd2Vye3JpZ2h0Oi04cHh9LnJhbmdlX19jb3N0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowO21hcmdpbi1yaWdodDo4cHg7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpub3JtYWw7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LnJhbmdlX19jb3N0OmZpcnN0LWNoaWxke3Bvc2l0aW9uOnJlbGF0aXZlfS5yYW5nZV9fY29zdDpmaXJzdC1jaGlsZDo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6LTcuNXB4O2NvbnRlbnQ6XFxcIi1cXFwiO2ZvbnQtc2l6ZToxMHB4fS5yYW5nZV9fY29zdDpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS5yYW5nZV9fdGl0bGV7bWFyZ2luOjA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnRpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MThweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0udGl0bGUtd3JhcHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnRpdGxlX19kZXNjcnttYXJnaW46MDtwYWRkaW5nLWJvdHRvbTo0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5pbnB1dC1ncm91cHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O21hcmdpbjowfS5pbnB1dC1ncm91cC0tY29sdW1uey1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQsLmlucHV0LWdyb3VwOmZvY3VzIC5pbnB1dC1ncm91cF9faW5wdXR7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVyLCAuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVyLCAuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6OnBsYWNlaG9sZGVyLC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cDpob3ZlciAuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdCwuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19idXR0b24tc3BsaXR7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19sYWJlbHttYXJnaW46MDttYXJnaW4tYm90dG9tOjVweH0uaW5wdXQtZ3JvdXBfX2Rlc2Nye21hcmdpbjowO3BhZGRpbmctYm90dG9tOjRweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNDUpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmlucHV0LWdyb3VwX19sYWJlbC0tYmlne2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5pbnB1dC1ncm91cF9fc3BsaXR7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlO21hcmdpbjowfS5pbnB1dC1ncm91cF9faW5wdXR7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO3BhZGRpbmc6OXB4IDE0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KTtmb250LXNpemU6MTRweDtmb250LWZhbWlseTpcXFwiUXVpY2tzYW5kXFxcIixcXFwiTW9udHNlcnJhdFxcXCIsc2Fucy1zZXJpZjtsaW5lLWhlaWdodDoyNHB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItcmFkaXVzOjRweDtvdXRsaW5lOm5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOmJvcmRlciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpib3JkZXIgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9faW5wdXQtLWljb257YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fICsgXCIpIG5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOjk1JSBjZW50ZXJ9LmlucHV0LWdyb3VwX19pbnB1dC0tYnV0dG9uLXNwbGl0e3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctcmlnaHQ6MDtib3JkZXItcmlnaHQ6bm9uZTtib3JkZXItcmFkaXVzOjRweCAwIDAgNHB4fS5pbnB1dC1ncm91cF9faW5wdXQtLWZha2V7Y3Vyc29yOnBvaW50ZXJ9LmlucHV0LWdyb3VwX19pbnB1dC0tYWN0aXZle2JvcmRlci1jb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXJ7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSkgIWltcG9ydGFudH0uaW5wdXQtZ3JvdXBfX2lucHV0LS1ob3ZlcjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjQpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC1zaXplOjE0cHg7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXNpemU6MTRweDstbW96LXRyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlO3RyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXNpemU6MTRweDstbXMtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXNpemU6MTRweDstbXMtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDo6cGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxNHB4Oy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDpob3ZlciwuaW5wdXQtZ3JvdXBfX2lucHV0OmZvY3Vze2JvcmRlci1jb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9faW5wdXQ6aG92ZXIrLmlucHV0LWdyb3VwX19idXR0b24tc3BsaXQsLmlucHV0LWdyb3VwX19pbnB1dDpmb2N1cysuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdHtib3JkZXItY29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9faW5wdXQtLWRhcmstcGxhY2Vob2xkZXI6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjo6cGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6NDRweDtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItbGVmdDpub25lO2JvcmRlci1yYWRpdXM6MCA0cHggNHB4IDA7b3V0bGluZTpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNpdGlvbjpib3JkZXIgMC40cyBlYXNlO3RyYW5zaXRpb246Ym9yZGVyIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdCBpbWd7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZTt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjFzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4xcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2V9LmlucHV0LWdyb3VwX19idXR0b24tc3BsaXQtLWRvd24tYW5pbWF0aW9uOmFjdGl2ZSBpbWd7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCl9LmlucHV0LWdyb3VwX19idXR0b24tc3BsaXQtLXJpZ2h0LWFuaW1hdGlvbjphY3RpdmUgaW1ney13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpfS5idXR0b257cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoxMDA7cGFkZGluZzoxMHB4IDIwcHg7Y29sb3I6I2ZmZjtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zaXplOjEycHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWRlY29yYXRpb246bm9uZTtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oI2JjOWNmZiksIHRvKCM4YmE0ZjkpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYgMCUsICM4YmE0ZjkgMTAwJSk7Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czoyMnB4O2N1cnNvcjpwb2ludGVyfS5idXR0b24tLWRpc2FibGV7b3BhY2l0eTowLjU7Y3Vyc29yOmRlZmF1bHR9LmJ1dHRvbi0tZGlzYWJsZTpob3Zlcjo6YmVmb3Jle2Rpc3BsYXk6bm9uZX0uYnV0dG9uOjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3otaW5kZXg6LTEwMDtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCM5OTY5ZmYpLCB0bygjNWI3ZWY2KSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoIzk5NjlmZiwgIzViN2VmNik7Ym9yZGVyLXJhZGl1czppbmhlcml0O29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAwLjRzIGVhc2U7dHJhbnNpdGlvbjpvcGFjaXR5IDAuNHMgZWFzZTtjb250ZW50OlxcXCJcXFwifS5idXR0b246aG92ZXI6OmJlZm9yZXtvcGFjaXR5OjF9LmJ1dHRvbi0tZW1wdHktc3R5bGV7cGFkZGluZzo4cHggMThweDtjb2xvcjojYmM5Y2ZmO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MnB4IHNvbGlkICNiYzljZmZ9LmJ1dHRvbi0tZW1wdHktc3R5bGU6OmJlZm9yZXtkaXNwbGF5Om5vbmV9LmJ1dHRvbi0tZW1wdHktc3R5bGU6aG92ZXJ7Y29sb3I6Izk5NjlmZjtib3JkZXItY29sb3I6Izk5NjlmZjtiYWNrZ3JvdW5kOiNmZmZ9LmJ1dHRvbi0tZW1wdHktZGlzYWJsZXtvcGFjaXR5OjAuNTtjdXJzb3I6ZGVmYXVsdH0uYnV0dG9uLS1lbXB0eS1kaXNhYmxlOmhvdmVye2NvbG9yOiNiYzljZmYgIWltcG9ydGFudDtiYWNrZ3JvdW5kOiNmZmYgIWltcG9ydGFudDtib3JkZXItY29sb3I6I2JjOWNmZiAhaW1wb3J0YW50fS5idXR0b24tLW9ubHktdGV4dHtwYWRkaW5nOjA7Y29sb3I6I2JjOWNmZjtiYWNrZ3JvdW5kOm5vbmV9LmJ1dHRvbi0tb25seS10ZXh0OjpiZWZvcmV7ZGlzcGxheTpub25lfS5idXR0b24tLW9ubHktdGV4dDpob3Zlcntjb2xvcjojOTk2OWZmfS5idXR0b24tLW9ubHktdGV4dC1kaXNhYmxle2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtjdXJzb3I6ZGVmYXVsdH0uYnV0dG9uLS1vbmx5LXRleHQtZGlzYWJsZTpob3Zlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmJ1dHRvbi0taWNvbntwb3NpdGlvbjpyZWxhdGl2ZX0uYnV0dG9uLS1pY29uOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO3JpZ2h0OjA7d2lkdGg6NDRweDtoZWlnaHQ6NDRweDttYXJnaW4tdG9wOi0yMnB4O2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyArIFwiKSBuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDAuMnMgZWFzZTt0cmFuc2l0aW9uOmJhY2tncm91bmQgMC4ycyBlYXNlO2NvbnRlbnQ6XFxcIlxcXCJ9LmJ1dHRvbi0taWNvbjphY3RpdmU6OmFmdGVye2JhY2tncm91bmQtcG9zaXRpb246MjBweCBjZW50ZXJ9LnBhZ2luYXRpb25fX3RpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MTZweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucGFnaW5hdGlvbl9fcGFnZXN7bWFyZ2luOjA7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0ucGFnaW5hdGlvbl9fcGFnZS1pdGVte2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcH0ucGFnaW5hdGlvbl9fcGFnZS1pdGVtIGF7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjM2cHg7cGFkZGluZzoxMnB4IDBweDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LnBhZ2luYXRpb25fX3BhZ2UtaXRlbS0tYWN0aXZlIGF7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oI2JjOWNmZiksIHRvKCM4YmE0ZjkpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYgMCUsICM4YmE0ZjkgMTAwJSk7Ym9yZGVyLXJhZGl1czo1MCV9LnBhZ2luYXRpb25fX3BhZ2UtbmV4dHtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDotMnB4fS5wYWdpbmF0aW9uX19wYWdlLW5leHQgYXt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O2NvbG9yOiNmZmY7Zm9udC1zaXplOjA7Zm9udC13ZWlnaHQ6Ym9sZDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oIzZmY2Y5NyksIHRvKCM2NmQyZWEpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICM2ZmNmOTcgMCUsICM2NmQyZWEgMTAwJSk7Ym9yZGVyLXJhZGl1czo1MCV9LnBhZ2luYXRpb25fX3BhZ2UtbmV4dDo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7cmlnaHQ6MDtsZWZ0OjA7d2lkdGg6MThweDtoZWlnaHQ6MTdweDttYXJnaW46YXV0bztjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfN19fXyArIFwiKSBuby1yZXBlYXR9LnBhZ2luYXRpb25fX292ZXJ2aWV3e3BhZGRpbmctbGVmdDo2cHh9LnBhZ2luYXRpb25fX292ZXJ2aWV3IHB7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDttYXJnaW46MDttYXJnaW4tdG9wOjdweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyNHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmZlYXR1cmVze21hcmdpbjowO3BhZGRpbmc6MDtwYWRkaW5nLXRvcDoxcHg7bGlzdC1zdHlsZTpub25lfS5mZWF0dXJlc19faXRlbXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O21hcmdpbi1ib3R0b206MjBweDtwYWRkaW5nLWJvdHRvbToyMHB4O2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4xKX0uZmVhdHVyZXNfX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LmZlYXR1cmVzX19pdGVtOm50aC1jaGlsZCgzKXtwYWRkaW5nLWJvdHRvbTowO2JvcmRlci1ib3R0b206bm9uZX0uZmVhdHVyZXNfX3BpY3R7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbi1yaWdodDo5cHg7d2lkdGg6NDhweDtoZWlnaHQ6NDhweH0uZmVhdHVyZXNfX2NvbnRlbnR7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjRweH0uZmVhdHVyZXNfX3RpdGxle21hcmdpbjowO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjI0cHg7Zm9udC13ZWlnaHQ6Ym9sZH0uZmVhdHVyZXNfX2Rlc2Nye21hcmdpbjowfS5idWxsZXRfX3RpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MTRweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uYnVsbGV0X190aXRsZS0tbHB7cGFkZGluZy1sZWZ0OjIwcHh9LmJ1bGxldF9fbGlzdHtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lfS5idWxsZXRfX2l0ZW17cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjIxcHg7bWFyZ2luLWJvdHRvbToxMHB4O2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KTtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyNHB4fS5idWxsZXRfX2l0ZW06OmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6N3B4O2xlZnQ6MDt3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZDpyZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlci1yYWRpdXM6NTAlfS5jb21tZW50e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXh9LmNvbW1lbnRfX3dyYXB7bWFyZ2luLXJpZ2h0OjEwcHh9LmNvbW1lbnRfX3dyYXA6bnRoLWNoaWxkKDIpe3BhZGRpbmctdG9wOjE1cHh9LmNvbW1lbnRfX3dyYXA6bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0uY29tbWVudF9fcGljdHtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo0NHB4O2hlaWdodDo0NHB4O21hcmdpbi1ib3R0b206MjdweH0uY29tbWVudF9fcGljdCBpbWd7cG9zaXRpb246YWJzb2x1dGU7dG9wOjFweDtsZWZ0Oi0yM3B4fS5jb21tZW50X190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjhweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjE0cHh9LmNvbW1lbnRfX2RhdGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxNHB4O2ZvbnQtc2l6ZToxNHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmNvbW1lbnRfX3RleHR7d2lkdGg6OTklO21hcmdpbjowO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjI0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uZHJvcC1kb3due3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxOThweDtsZWZ0OjUwJTt6LWluZGV4OjEwMDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MTAwJTttYXJnaW4tdG9wOi0yMDBweDttYXJnaW4tbGVmdDotNTAlO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC41KTtib3JkZXItcmFkaXVzOjAgMCA0cHggNHB4Oy13ZWJraXQtYm94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowOy13ZWJraXQtdHJhbnNpdGlvbjphbGwgMC4ycyBlYXNlLWluO3RyYW5zaXRpb246YWxsIDAuMnMgZWFzZS1pbn0uZHJvcC1kb3duLS1zaG93ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0uZHJvcC1kb3duX193cmFwe3BhZGRpbmctdG9wOjdweDtwYWRkaW5nLWxlZnQ6MTRweDtwYWRkaW5nLXJpZ2h0OjdweDtwYWRkaW5nLWJvdHRvbTo4cHh9LmRyb3AtZG93bl9fY291bnQtbGlzdHttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lfS5kcm9wLWRvd25fX2NvdW50LWl0ZW17ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbi1ib3R0b206N3B4fS5kcm9wLWRvd25fX2NvdW50LWl0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LmRyb3AtZG93bl9fY291bnRlci1tZW51e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDo5MnB4fS5kcm9wLWRvd25fX2NvdW50LWl0ZW0tbmFtZXttYXJnaW46MDtwYWRkaW5nOjA7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uZHJvcC1kb3duX19zZWxlY3Qtdmlld3t3aWR0aDoyMHB4O21hcmdpbjowO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LWFsaWduOmNlbnRlcn0uZHJvcC1kb3duX19jb3VudGVyLWJ0bntwb3NpdGlvbjpyZWxhdGl2ZTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtwYWRkaW5nOjA7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxOHB4O3RleHQtYWxpZ246Y2VudGVyO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuNSk7Ym9yZGVyLXJhZGl1czo1MCU7Y3Vyc29yOnBvaW50ZXJ9LmRyb3AtZG93bl9fY291bnRlci1idG4tLXBsdXM6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDoycHg7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7Y29udGVudDpcXFwiK1xcXCJ9LmRyb3AtZG93bl9fY291bnRlci1idG4tLW1pbnVzOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MnB4O3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO2NvbnRlbnQ6XFxcIi1cXFwifS5kcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZHtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtjdXJzb3I6ZGVmYXVsdH0uZHJvcC1kb3duX19jb250cm9se2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW4tdG9wOjIwcHh9LmRyb3AtZG93bl9fYnV0dG9ue3BhZGRpbmc6MDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXR9LmRyb3AtZG93bl9fYnV0dG9uOmhvdmVye2NvbG9yOiNiYzljZmZ9LmRyb3AtZG93bl9fYnV0dG9uOmFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDNweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoM3B4KX0uZHJvcC1kb3duX19idXR0b24tLWFjY2VudHtjb2xvcjojYmM5Y2ZmfS5kcm9wLWRvd25fX2J1dHRvbi0tYWNjZW50OmhvdmVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KX0uZHJvcC1kb3duLWNvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZX0ubG9nb3twb3NpdGlvbjpyZWxhdGl2ZTttaW4td2lkdGg6MTIwcHg7bWluLWhlaWdodDozOHB4fS5sb2dvLS1iaWd7bWFyZ2luLXRvcDozMHB4O21hcmdpbi1sZWZ0OjMwcHh9LmxvZ29fX2xpbmt7cG9zaXRpb246YWJzb2x1dGU7dG9wOi0ycHh9LmxvZ29fX2xpbms6aG92ZXIgLmxvZ29fX2xldHRlcntmaWxsOiM5OTY5ZmZ9LmxvZ29fX2xpbms6aG92ZXIgLmxvZ29fX2xhYmVsLWxlZnR7ZmlsbDojNmZjZjk3fS5sb2dvX19sZXR0ZXIsLmxvZ29fX2xhYmVsLWxlZnR7LXdlYmtpdC10cmFuc2l0aW9uOmZpbGwgMC40cyBlYXNlO3RyYW5zaXRpb246ZmlsbCAwLjRzIGVhc2V9LmZvcm0tZWxlbWVudHNfX3dyYXB7cGFkZGluZy10b3A6NjJweH0uZm9ybS1lbGVtZW50c19fcm93e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmZvcm0tZWxlbWVudHNfX3JvdzpmaXJzdC1jaGlsZHttYXJnaW4tYm90dG9tOjEwMHB4fS5mb3JtLWVsZW1lbnRzX19yb3c6bnRoLWNoaWxkKDIpe21hcmdpbi1ib3R0b206NDBweH0uZm9ybS1lbGVtZW50c19faW5wdXRze3dpZHRoOjI3LjYlfS5mb3JtLWVsZW1lbnRzX19pbnB1dHMgLmlucHV0LWdyb3Vwe21hcmdpbi1ib3R0b206MjBweH0uZm9ybS1lbGVtZW50c19faW5wdXRzIC5pbnB1dC1ncm91cDpudGgtY2hpbGQoMyl7bWFyZ2luLWJvdHRvbToyM3B4fS5mb3JtLWVsZW1lbnRzX19pbnB1dHMtY29sdW1ue2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7bWFyZ2luLXRvcDo0MHB4O21hcmdpbi1ib3R0b206MjFweH0uZm9ybS1lbGVtZW50c19faW5wdXRzLWNvbHVtbiAuaW5wdXQtZ3JvdXA6Zmlyc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjIwcHh9LmZvcm0tZWxlbWVudHNfX2lucHV0cy1jb2x1bW4gLmlucHV0LWdyb3VwX19idXR0b24tc3BsaXR7d2lkdGg6NjBweH0uZm9ybS1lbGVtZW50c19faW5wdXRzLXNtYWxse3dpZHRoOjI2NnB4fS5mb3JtLWVsZW1lbnRzX19pbnB1dHMtc21hbGwgLmlucHV0LWdyb3Vwe21hcmdpbi1ib3R0b206NDFweH0uZm9ybS1lbGVtZW50c19faW5wdXRzLXNtYWxsIC5pbnB1dC1ncm91cDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0uZm9ybS1lbGVtZW50c19fY29udHJvbHN7d2lkdGg6MjIuOSV9LmZvcm0tZWxlbWVudHNfX2NvbnRyb2xzIC5jaGVja2JveHttYXJnaW4tYm90dG9tOjQwLjg4cHh9LmZvcm0tZWxlbWVudHNfX2NvbnRyb2xzIC5yYWRpb2J0bnttYXJnaW4tYm90dG9tOjQycHh9LmZvcm0tZWxlbWVudHNfX2NvbnRyb2xzIC50b2dnbGV7bWFyZ2luLWJvdHRvbTo0NnB4fS5mb3JtLWVsZW1lbnRzX19jb250cm9scyAubGlrZWJ0bnttYXJnaW4tYm90dG9tOjQwcHh9LmZvcm0tZWxlbWVudHNfX3VzZXItYnV0dG9ue3dpZHRoOjI3LjclfS5mb3JtLWVsZW1lbnRzX191c2VyLWJ1dHRvbiAucmFuZ2V7d2lkdGg6ODIuOCU7bWFyZ2luLWJvdHRvbTo0MnB4fS5mb3JtLWVsZW1lbnRzX19idXR0b25zIC5idXR0b257cGFkZGluZzoxNHB4IDIwcHg7Zm9udC13ZWlnaHQ6Ym9sZH0uZm9ybS1lbGVtZW50c19fYnV0dG9ucyAuYnV0dG9uLS1lbXB0eS1zdHlsZXtwYWRkaW5nOjEycHggMTdweH0uZm9ybS1lbGVtZW50c19fYnV0dG9ucyAuYnV0dG9uOjpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS5mb3JtLWVsZW1lbnRzX19mdWxsLWJ1dHRvbnttYXJnaW4tYm90dG9tOjMwcHh9LmZvcm0tZWxlbWVudHNfX2Z1bGwtYnV0dG9uIC5idXR0b257bWFyZ2luLXJpZ2h0OjEzcHh9LmZvcm0tZWxlbWVudHNfX2VtcHR5LWJ1dHRvbnttYXJnaW4tYm90dG9tOjMxcHh9LmZvcm0tZWxlbWVudHNfX2VtcHR5LWJ1dHRvbiAuYnV0dG9ue21hcmdpbi1yaWdodDoxN3B4fS5mb3JtLWVsZW1lbnRzX19saW5rc3ttYXJnaW4tYm90dG9tOjMwcHh9LmZvcm0tZWxlbWVudHNfX2xpbmtzIC5idXR0b257cGFkZGluZzowO21hcmdpbi1yaWdodDoxOHB4fS5mb3JtLWVsZW1lbnRzX19saW5rcyAuYnV0dG9uOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9LmZvcm0tZWxlbWVudHNfX3N1Ym1pdC1idG57bWFyZ2luLWJvdHRvbTo0MXB4fS5mb3JtLWVsZW1lbnRzX19zdWJtaXQtYnRuIC5idXR0b257d2lkdGg6MTAwJX0uZm9ybS1lbGVtZW50c19fZHJvcC1kb3duLWV4cGFuZHt3aWR0aDoyMyU7bWFyZ2luLXJpZ2h0OjEwOHB4fS5mb3JtLWVsZW1lbnRzX19kcm9wLWRvd24tZXhwYW5kIC5pbnB1dC1ncm91cHttYXJnaW4tYm90dG9tOjIwcHh9LmZvcm0tZWxlbWVudHNfX2Ryb3AtZG93bi1leHBhbmQgLmlucHV0LWdyb3VwOm50aC1jaGlsZCgyKXttYXJnaW4tYm90dG9tOjB9LmZvcm0tZWxlbWVudHNfX2Ryb3AtZG93bi1leHBhbmQgLmlucHV0LWdyb3VwX19pbnB1dC0taWNvbntiYWNrZ3JvdW5kLXBvc2l0aW9uOjk0JSBjZW50ZXJ9LmZvcm0tZWxlbWVudHNfX2Ryb3AtZG93bi1leHBhbmQgLmRyb3AtZG93bl9fd3JhcHtwYWRkaW5nLXRvcDo1cHg7cGFkZGluZy1ib3R0b206OXB4fS5mb3JtLWVsZW1lbnRzX19kcm9wLWRvd24tcmljaHt3aWR0aDoyNy42JX0uZm9ybS1lbGVtZW50c19fZHJvcC1kb3duLXJpY2ggLmRyb3AtZG93bl9fd3JhcHtwYWRkaW5nLXRvcDo1cHg7cGFkZGluZy1ib3R0b206MTNweH0uZm9ybS1lbGVtZW50c19fZHJvcC1kb3duLXJpY2ggLmRyb3AtZG93bl9fY29udHJvbHttYXJnaW4tdG9wOjIxcHh9LmZvcm0tZWxlbWVudHNfX2Ryb3AtZG93bi1idWxsZXR7d2lkdGg6MjcuNyV9LmZvcm0tZWxlbWVudHNfX2Ryb3AtZG93bi1idWxsZXQgLmRyb3AtZG93bl9fd3JhcHtwYWRkaW5nLXRvcDo1cHg7cGFkZGluZy1ib3R0b206MTNweH0uZm9ybS1lbGVtZW50c19fZHJvcC1kb3duLWJ1bGxldCAuZHJvcC1kb3duX19jb250cm9se21hcmdpbi10b3A6MjFweH0uZm9ybS1lbGVtZW50c19fZXhwLWNoZWNrYm94LWNsb3Nle21hcmdpbi10b3A6MTcxcHg7bWFyZ2luLWJvdHRvbTo0N3B4fS5mb3JtLWVsZW1lbnRzX19idW5ueS1ob3B7bWFyZ2luLXRvcDoyNTVweH0uZm9ybS1lbGVtZW50c19fYnVubnktaG9wIC5jaGVja2JveF9faXRlbTpmaXJzdC1jaGlsZHt3aWR0aDo3MiV9LmZvcm0tZWxlbWVudHNfX2J1bm55LWhvcCAuYnVsbGV0X19pdGVtOm50aC1jaGlsZCgzKXtwYWRkaW5nLXJpZ2h0OjY3cHh9LmZvcm0tZWxlbWVudHNfX2ZlYXR1cmVze3dpZHRoOjI0LjIlfS5mb3JtLWVsZW1lbnRzX19jb21tZW50e3dpZHRoOjYxLjMlfS5mb3JtLWVsZW1lbnRzICNkcm9wLWRvd24tY29udGFpbmVyLC5mb3JtLWVsZW1lbnRzICNkcm9wLWRvd24tY29udGFpbmVyMiwuZm9ybS1lbGVtZW50cyAjZHJvcC1kb3duLWNvbnRhaW5lcjN7cG9zaXRpb246cmVsYXRpdmV9QG1lZGlhIChtYXgtd2lkdGg6IDEwNjBweCl7LmZvcm0tZWxlbWVudHMgLnJhZGlvYnRuX19pdGVte21hcmdpbi1ib3R0b206MTVweH0uZm9ybS1lbGVtZW50cyAucmFkaW9idG5fX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9fVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvYXJyb3ctMDMyYjBkNS5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvZXhwYW5kLW1vcmUtZDA0YzlhZi5zdmdcIjsiLCIvKiFcbiogZ2xvYmFsL3dpbmRvdy5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE5IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjlcbiovXG5cbmlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbmV3IChldmFsKFwicmVxdWlyZSgnanNkb20nKS5KU0RPTVwiKSkoXCJcIikud2luZG93O1xufSk7IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBuZXcgKGV2YWwoXCJyZXF1aXJlKCdqc2RvbScpLkpTRE9NXCIpKShcIlwiKS53aW5kb3c7IiwiZnVuY3Rpb24gZ2V0SHRtbEVsZW1lbnQodGFnTmFtZSwgY2xhc3NOYW1lLCB0ZXh0KSB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XHJcblxyXG4gIGlmIChjbGFzc05hbWUpIHtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRleHQpIHtcclxuICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihtaW4sIG1heCkge1xyXG4gIGNvbnN0IHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgrbWF4IC0gK21pbikpICsgK21pbjtcclxuICByZXR1cm4gcmFuZG9tTnVtYmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNsT2ZOdW0obnVtYmVyLCB0aXRsZXMpIHtcclxuICBjb25zdCBjYXNlcyA9IFsyLCAwLCAxLCAxLCAxLCAyXTtcclxuICByZXR1cm4gdGl0bGVzW1xyXG4gICAgbnVtYmVyICUgMTAwID4gNCAmJiBudW1iZXIgJSAxMDAgPCAyMFxyXG4gICAgICA/IDJcclxuICAgICAgOiBjYXNlc1tudW1iZXIgJSAxMCA8IDUgPyBudW1iZXIgJSAxMCA6IDVdXHJcbiAgXTtcclxufVxyXG5cclxuY2xhc3MgRHJvcERvd24ge1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zLmNvbnRhaW5lcikge1xyXG4gICAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xyXG4gICAgICBjb25zdCBkcm9wRG93blBhcmVudCA9IGdldEh0bWxFbGVtZW50KFwic2VjdGlvblwiLCBcImRyb3AtZG93blwiKTtcclxuICAgICAgdGhpcy5kcm9wRG93blBhcmVudCA9IGRyb3BEb3duUGFyZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIGNvbnRhaW5lcihub2RlKSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmlucHV0KSB7XHJcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gb3B0aW9ucy5wbGFjZWhvbGRlclxyXG4gICAgICAgID8gb3B0aW9ucy5wbGFjZWhvbGRlclxyXG4gICAgICAgIDogXCLQktGL0LHQtdGA0LjRgtC1INGN0LvQuNC80LXQvdGCXCI7XHJcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcclxuICAgICAgdGhpcy5pbnB1dCA9IG9wdGlvbnMuaW5wdXQ7XHJcbiAgICAgIGNvbnN0IGlzSGF2ZVN0YXJ0VmFsdWUgPSB0aGlzLmhhc0hhdmVTdGFydFZhbHVlKG9wdGlvbnMuY291bnRFbGVtZW50cyk7XHJcbiAgICAgIGlmIChpc0hhdmVTdGFydFZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJTdGFydENvdW50KG9wdGlvbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSBwbGFjZWhvbGRlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFvcHRpb25zLmlzUGluU2hvdykge1xyXG4gICAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2hvdyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBpbnB1dChub2RlKSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmNvdW50RWxlbWVudHMpIHtcclxuICAgICAgdGhpcy5jb3VudEVsZW1lbnRzID0gb3B0aW9ucy5jb3VudEVsZW1lbnRzO1xyXG4gICAgICB0aGlzLmlucHV0Vmlld3MgPSBbXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBjb3VudEVsZW1lbnRzKEFycmF5KSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmNvdW50R3JvdXBWaWV3KSB7XHJcbiAgICAgIHRoaXMuY291bnRHcm91cFZpZXcgPSBvcHRpb25zLmNvdW50R3JvdXBWaWV3O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIGNvdW50R3JvdXBWaWV3KEFycmF5KSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmlzSGlkZUNvbnRyb2wpIHtcclxuICAgICAgdGhpcy5pc0hpZGVDb250cm9sID0gb3B0aW9ucy5pc0hpZGVDb250cm9sO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmlzUGluU2hvdykge1xyXG4gICAgICB0aGlzLmlzUGluU2hvdyA9IG9wdGlvbnMuaXNQaW5TaG93O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFzSGF2ZVN0YXJ0VmFsdWUgPSBjb3VudEVsZW1lbnRzID0+IHtcclxuICAgIHJldHVybiBjb3VudEVsZW1lbnRzLnNvbWUoaXRlbSA9PiB7XHJcbiAgICAgIGlmIChpdGVtLnN0YXJ0VmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gaXRlbS5zdGFydFZhbHVlID4gMDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgZ2V0TW9kaWZpZWRDb3VudEVsZW1lbnRzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgbW9kaWZpZWRDb3VudEVsZW1lbnRzID0gdGhpcy5jb3VudEVsZW1lbnRzLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgY29uc3QgbWluVmFsdWUgPSBpdGVtLm1pblZhbHVlID8gaXRlbS5taW5WYWx1ZSA6IDA7XHJcbiAgICAgIGNvbnN0IGNvdW50ZXIgPSBpdGVtLnN0YXJ0VmFsdWUgPyBpdGVtLnN0YXJ0VmFsdWUgOiBtaW5WYWx1ZTtcclxuICAgICAgaXRlbS5pZCA9IGAke2luZGV4fSR7Z2V0UmFuZG9tTnVtYmVyKDEsIDEwMDAwKX1gO1xyXG4gICAgICBpdGVtLmNvdW50ZXIgPSBjb3VudGVyO1xyXG4gICAgICBpdGVtLm1pblZhbHVlID0gbWluVmFsdWU7XHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG1vZGlmaWVkQ291bnRFbGVtZW50cztcclxuICB9O1xyXG5cclxuICBzaG93ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgaXNIYXZlQ2xhc3MgPSB0aGlzLmRyb3BEb3duUGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgXCJkcm9wLWRvd24tLXNob3dcIlxyXG4gICAgKTtcclxuICAgIGlmICghaXNIYXZlQ2xhc3MpIHtcclxuICAgICAgdGhpcy5kcm9wRG93blBhcmVudC5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duLS1zaG93XCIpO1xyXG4gICAgICB0aGlzLmlucHV0LmNsYXNzTGlzdC5hZGQoXCJpbnB1dC1ncm91cF9faW5wdXQtLWFjdGl2ZVwiKTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25DbGlja0hpZGUpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMub25QcmVzc0hpZGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGhpZGUgPSAoKSA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1BpblNob3cpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlzSGF2ZUNsYXNzID0gdGhpcy5kcm9wRG93blBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgIFwiZHJvcC1kb3duLS1zaG93XCJcclxuICAgICk7XHJcbiAgICBpZiAoaXNIYXZlQ2xhc3MpIHtcclxuICAgICAgdGhpcy5kcm9wRG93blBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZHJvcC1kb3duLS1zaG93XCIpO1xyXG4gICAgICB0aGlzLmlucHV0LmNsYXNzTGlzdC5yZW1vdmUoXCJpbnB1dC1ncm91cF9faW5wdXQtLWFjdGl2ZVwiKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25DbGlja0hpZGUpO1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMub25QcmVzc0hpZGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uQ2xpY2tIaWRlID0gZXZ0ID0+IHtcclxuICAgIGNvbnN0IGlzSW5wdXRDbGljayA9IGV2dC50YXJnZXQgPT09IHRoaXMuaW5wdXQ7XHJcbiAgICBjb25zdCBpc0NhbGVuZGFyQ2xpY2sgPSB0aGlzLmRyb3BEb3duUGFyZW50LmNvbnRhaW5zKGV2dC50YXJnZXQpO1xyXG4gICAgY29uc3QgaXNPdXRzaWRlQ2xpY2sgPSAhaXNJbnB1dENsaWNrICYmICFpc0NhbGVuZGFyQ2xpY2s7XHJcbiAgICBpZiAoaXNPdXRzaWRlQ2xpY2spIHtcclxuICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25QcmVzc0hpZGUgPSBldnQgPT4ge1xyXG4gICAgY29uc3QgaXNFc2NQcmVzcyA9IGV2dC5rZXlDb2RlID09PSAyNztcclxuICAgIGlmIChpc0VzY1ByZXNzKSB7XHJcbiAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uQ2xpY2tDbGVhciA9IGV2dCA9PiB7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHRoaXMuZGlzY2FyZENvdW50ZXIoKTtcclxuICAgIHRoaXMuZGlzY2FyZFZpZXdDb3VudGVyKCk7XHJcbiAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gdGhpcy5wbGFjZWhvbGRlcjtcclxuICB9O1xyXG5cclxuICBkaXNjYXJkQ291bnRlciA9ICgpID0+IHtcclxuICAgIHRoaXMuY291bnRFbGVtZW50cy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCB2aWV3Q291bnRlciA9IHRoaXMuZHJvcERvd25QYXJlbnQucXVlcnlTZWxlY3RvcihgI3ZpZXctJHtpdGVtLmlkfWApO1xyXG4gICAgICB2aWV3Q291bnRlci50ZXh0Q29udGVudCA9IGl0ZW0ubWluVmFsdWU7XHJcbiAgICAgIGl0ZW0uY291bnRlciA9IGl0ZW0ubWluVmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBtaW51c0J1dHRvbnMgPSB0aGlzLmRyb3BEb3duUGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLmRyb3AtZG93bl9fY291bnRlci1idG4tLW1pbnVzXCJcclxuICAgICk7XHJcbiAgICBtaW51c0J1dHRvbnMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgZGlzY2FyZFZpZXdDb3VudGVyID0gKCkgPT4ge1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5jb3VudEdyb3VwVmlldykuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgdGhpcy5jb3VudEdyb3VwVmlld1tpdGVtXS5jb3VudGVyID0gMDtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJlbmRlclZpZXdDb3VudCA9ICgpID0+IHtcclxuICAgIGxldCB3b3JkT2ZOdW0gPSBcIlwiO1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5jb3VudEdyb3VwVmlldykuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuY291bnRHcm91cFZpZXdbaXRlbV0uY291bnRlciA+IDApIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnRlckdyb3VwID0gdGhpcy5jb3VudEdyb3VwVmlld1tpdGVtXTtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnRlciA9IGN1cnJlbnRDb3VudGVyR3JvdXAuY291bnRlcjtcclxuICAgICAgICBjb25zdCBjdXJyZW50V29yZCA9IGRlY2xPZk51bShcclxuICAgICAgICAgIGN1cnJlbnRDb3VudGVyLFxyXG4gICAgICAgICAgY3VycmVudENvdW50ZXJHcm91cC52aWV3c1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCAmJiB3b3JkT2ZOdW0ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgd29yZE9mTnVtICs9IFwiLCBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd29yZE9mTnVtICs9IGAke2N1cnJlbnRDb3VudGVyfSAke2N1cnJlbnRXb3JkfWA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh3b3JkT2ZOdW0ubGVuZ3RoID49IDIwICYmIE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmxlbmd0aCA+IDIpIHtcclxuICAgICAgd29yZE9mTnVtID0gd29yZE9mTnVtLnNsaWNlKDAsIDIwKSArIFwiLi4uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHdvcmRPZk51bTtcclxuICB9O1xyXG5cclxuICByZW5kZXJTdGFydENvdW50ID0gb3B0aW9ucyA9PiB7XHJcbiAgICBjb25zdCBjb3VudEVsZW1lbnRzID0gb3B0aW9ucy5jb3VudEVsZW1lbnRzO1xyXG4gICAgbGV0IHdvcmRPZk51bSA9IFwiXCI7XHJcbiAgICBjb3VudEVsZW1lbnRzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChpdGVtLnN0YXJ0VmFsdWUgPiAwKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXJHcm91cCA9IG9wdGlvbnMuY291bnRHcm91cFZpZXdbaXRlbS5jb3VudEdyb3VwTmFtZV07XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXIgPSBjdXJyZW50Q291bnRlckdyb3VwLmNvdW50ZXI7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFdvcmQgPSBkZWNsT2ZOdW0oXHJcbiAgICAgICAgICBjdXJyZW50Q291bnRlcixcclxuICAgICAgICAgIGN1cnJlbnRDb3VudGVyR3JvdXAudmlld3NcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpbmRleCA+IDAgJiYgd29yZE9mTnVtLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHdvcmRPZk51bSArPSBcIiwgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdvcmRPZk51bSArPSBgJHtjdXJyZW50Q291bnRlcn0gJHtjdXJyZW50V29yZH1gO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAod29yZE9mTnVtLmxlbmd0aCA+PSAyMCAmJiBjb3VudEVsZW1lbnRzLmxlbmd0aCA+IDIpIHtcclxuICAgICAgd29yZE9mTnVtID0gd29yZE9mTnVtLnNsaWNlKDAsIDIwKSArIFwiLi4uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3BsaXRXb3JkT2ZOdW0gPSB3b3JkT2ZOdW0uc3BsaXQoXCIsXCIpO1xyXG4gICAgaWYgKHNwbGl0V29yZE9mTnVtLmxlbmd0aCA+IDEpIHtcclxuICAgICAgaWYgKHNwbGl0V29yZE9mTnVtWzBdLnRyaW0oKSA9PT0gc3BsaXRXb3JkT2ZOdW1bMV0udHJpbSgpKSB7XHJcbiAgICAgICAgd29yZE9mTnVtID0gc3BsaXRXb3JkT2ZOdW1bMF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gd29yZE9mTnVtO1xyXG4gIH07XHJcblxyXG4gIGdldENvdW50SXRlbSA9IGVsZW1lbnQgPT4ge1xyXG4gICAgY29uc3QgY291bnRJdGVtID0gZ2V0SHRtbEVsZW1lbnQoXCJsaVwiLCBcImRyb3AtZG93bl9fY291bnQtaXRlbVwiKTtcclxuICAgIGNvbnN0IGNvdW50SXRlbU5hbWUgPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwiZHJvcC1kb3duX19jb3VudC1pdGVtLW5hbWVcIixcclxuICAgICAgZWxlbWVudC5uYW1lXHJcbiAgICApO1xyXG4gICAgY29uc3QgY291bnRlck1lbnUgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRyb3AtZG93bl9fY291bnRlci1tZW51XCIpO1xyXG4gICAgY29uc3QgY291bnRJdGVtTWludXMgPSBnZXRIdG1sRWxlbWVudChcImJ1dHRvblwiLCBcImRyb3AtZG93bl9fY291bnRlci1idG5cIik7XHJcbiAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tbWludXNcIik7XHJcbiAgICBpZiAoZWxlbWVudC5zdGFydFZhbHVlKSB7XHJcbiAgICAgIGlmIChlbGVtZW50LnN0YXJ0VmFsdWUgPT09IGVsZW1lbnQubWluVmFsdWUpIHtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgICAgY291bnRJdGVtTWludXMuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgIGNvdW50SXRlbU1pbnVzLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcclxuICAgIH1cclxuICAgIGNvdW50SXRlbU1pbnVzLnR5cGUgPSBcImJ1dHRvblwiO1xyXG4gICAgY29uc3QgY291bnRJdGVtVmlldyA9IGdldEh0bWxFbGVtZW50KFwicFwiLCBcImRyb3AtZG93bl9fc2VsZWN0LXZpZXdcIik7XHJcbiAgICBjb3VudEl0ZW1WaWV3LnRleHRDb250ZW50ID0gZWxlbWVudC5jb3VudGVyO1xyXG4gICAgY291bnRJdGVtVmlldy5pZCA9IGB2aWV3LSR7ZWxlbWVudC5pZH1gO1xyXG4gICAgY29uc3QgY291bnRJdGVtUGx1cyA9IGdldEh0bWxFbGVtZW50KFwiYnV0dG9uXCIsIFwiZHJvcC1kb3duX19jb3VudGVyLWJ0blwiKTtcclxuICAgIGNvdW50SXRlbVBsdXMuY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bl9fY291bnRlci1idG4tLXBsdXNcIik7XHJcbiAgICBjb3VudEl0ZW1QbHVzLnR5cGUgPSBcImJ1dHRvblwiO1xyXG5cclxuICAgIGNvdW50SXRlbVBsdXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgZ3JvdXBWaWV3ID0gdGhpcy5jb3VudEdyb3VwVmlld1tlbGVtZW50LmNvdW50R3JvdXBOYW1lXTtcclxuICAgICAgZWxlbWVudC5jb3VudGVyKys7XHJcbiAgICAgIGdyb3VwVmlldy5jb3VudGVyKys7XHJcbiAgICAgIGNvdW50SXRlbVZpZXcudGV4dENvbnRlbnQgPSBlbGVtZW50LmNvdW50ZXI7XHJcbiAgICAgIHRoaXMucmVuZGVyVmlld0NvdW50KCk7XHJcbiAgICAgIGNvbnN0IGlzTWludXNEaXNhYmxlZCA9IGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICBcImRyb3AtZG93bl9fY291bnRlci1idG4tLWRpc2FibGVkXCJcclxuICAgICAgKTtcclxuICAgICAgaWYgKGlzTWludXNEaXNhYmxlZCkge1xyXG4gICAgICAgIGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZFwiKTtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY291bnRJdGVtTWludXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgZ3JvdXBWaWV3ID0gdGhpcy5jb3VudEdyb3VwVmlld1tlbGVtZW50LmNvdW50R3JvdXBOYW1lXTtcclxuICAgICAgZWxlbWVudC5jb3VudGVyLS07XHJcbiAgICAgIGdyb3VwVmlldy5jb3VudGVyLS07XHJcbiAgICAgIGNvdW50SXRlbVZpZXcudGV4dENvbnRlbnQgPSBlbGVtZW50LmNvdW50ZXI7XHJcbiAgICAgIGNvbnN0IG5leHREZWNyaW1lbnRDb3VudGVyID0gZWxlbWVudC5jb3VudGVyIC0gMTtcclxuICAgICAgaWYgKG5leHREZWNyaW1lbnRDb3VudGVyIDwgZWxlbWVudC5taW5WYWx1ZSkge1xyXG4gICAgICAgIGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5hZGQoXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZFwiKTtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZW5kZXJWaWV3Q291bnQoKTtcclxuICAgICAgaWYgKGdyb3VwVmlldy5jb3VudGVyID09PSAwKSB7XHJcbiAgICAgICAgY29uc3QgaXNDb3VudGVyR3JvdXBDbGVhciA9IE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmV2ZXJ5KFxyXG4gICAgICAgICAgaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvdW50R3JvdXBWaWV3W2l0ZW1dLmNvdW50ZXIgPT09IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNDb3VudGVyR3JvdXBDbGVhcikge1xyXG4gICAgICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb3VudGVyTWVudS5hcHBlbmRDaGlsZChjb3VudEl0ZW1NaW51cyk7XHJcbiAgICBjb3VudGVyTWVudS5hcHBlbmRDaGlsZChjb3VudEl0ZW1WaWV3KTtcclxuICAgIGNvdW50ZXJNZW51LmFwcGVuZENoaWxkKGNvdW50SXRlbVBsdXMpO1xyXG4gICAgY291bnRJdGVtLmFwcGVuZENoaWxkKGNvdW50SXRlbU5hbWUpO1xyXG4gICAgY291bnRJdGVtLmFwcGVuZENoaWxkKGNvdW50ZXJNZW51KTtcclxuICAgIHJldHVybiBjb3VudEl0ZW07XHJcbiAgfTtcclxuXHJcbiAgaW5pdCA9ICgpID0+IHtcclxuICAgIGNvbnN0IG1vZGlmaWVkQ291bnRFbGVtZW50cyA9IHRoaXMuZ2V0TW9kaWZpZWRDb3VudEVsZW1lbnRzKCk7XHJcbiAgICB0aGlzLmNvdW50RWxlbWVudHMgPSBtb2RpZmllZENvdW50RWxlbWVudHM7XHJcbiAgICBjb25zdCBkcm9wRG93blBhcmVudFdyYXAgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRyb3AtZG93bl9fd3JhcFwiKTtcclxuICAgIGNvbnN0IGNvdW50TGlzdCA9IGdldEh0bWxFbGVtZW50KFwidWxcIiwgXCJkcm9wLWRvd25fX2NvdW50LWxpc3RcIik7XHJcbiAgICBjb25zdCBkcm9wRG93bkNvbnRyb2wgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRyb3AtZG93bl9fY29udHJvbFwiKTtcclxuICAgIGNvbnN0IGNsZWFyQnRuID0gZ2V0SHRtbEVsZW1lbnQoXCJidXR0b25cIiwgXCJkcm9wLWRvd25fX2J1dHRvblwiLCBcItCe0YfQuNGB0YLQuNGC0YxcIik7XHJcbiAgICBjbGVhckJ0bi50eXBlID0gXCJidXR0b25cIjtcclxuICAgIGNsZWFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2tDbGVhcik7XHJcbiAgICBjb25zdCBhY2NlcHRCdG4gPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJidXR0b25cIixcclxuICAgICAgXCJkcm9wLWRvd25fX2J1dHRvblwiLFxyXG4gICAgICBcItCf0YDQuNC80LXQvdC40YLRjFwiXHJcbiAgICApO1xyXG4gICAgYWNjZXB0QnRuLnR5cGUgPSBcImJ1dHRvblwiO1xyXG4gICAgYWNjZXB0QnRuLmNsYXNzTGlzdC5hZGQoXCJkcm9wLWRvd25fX2J1dHRvbi0tYWNjZW50XCIpO1xyXG4gICAgYWNjZXB0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhpZGUpO1xyXG4gICAgY29uc3QgY291bnRMaXN0RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG4gICAgdGhpcy5jb3VudEVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIGNvbnN0IGNvdW50SXRlbSA9IHRoaXMuZ2V0Q291bnRJdGVtKGVsZW1lbnQpO1xyXG4gICAgICBjb3VudExpc3RGcmFnbWVudC5hcHBlbmRDaGlsZChjb3VudEl0ZW0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY291bnRMaXN0LmFwcGVuZENoaWxkKGNvdW50TGlzdEZyYWdtZW50KTtcclxuICAgIGlmICghdGhpcy5pc0hpZGVDb250cm9sKSB7XHJcbiAgICAgIGRyb3BEb3duQ29udHJvbC5hcHBlbmRDaGlsZChjbGVhckJ0bik7XHJcbiAgICAgIGRyb3BEb3duQ29udHJvbC5hcHBlbmRDaGlsZChhY2NlcHRCdG4pO1xyXG4gICAgfVxyXG5cclxuICAgIGRyb3BEb3duUGFyZW50V3JhcC5hcHBlbmRDaGlsZChjb3VudExpc3QpO1xyXG5cclxuICAgIGlmICghdGhpcy5pc0hpZGVDb250cm9sKSB7XHJcbiAgICAgIGRyb3BEb3duUGFyZW50V3JhcC5hcHBlbmRDaGlsZChkcm9wRG93bkNvbnRyb2wpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5kcm9wRG93blBhcmVudC5hcHBlbmRDaGlsZChkcm9wRG93blBhcmVudFdyYXApO1xyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5kcm9wRG93blBhcmVudCk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJvcERvd247XHJcbiIsIi8qIVxuKiBpbnB1dG1hc2suZXh0ZW5zaW9ucy5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE5IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjlcbiovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbIFwiLi9pbnB1dG1hc2tcIiBdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9pbnB1dG1hc2tcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3Rvcnkod2luZG93LklucHV0bWFzayk7XG4gICAgfVxufSkoZnVuY3Rpb24oSW5wdXRtYXNrKSB7XG4gICAgSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zKHtcbiAgICAgICAgQToge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiZcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiNcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLUZhLWZdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9XG4gICAgfSk7XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBjc3N1bml0OiB7XG4gICAgICAgICAgICByZWdleDogXCJbKy1dP1swLTldK1xcXFwuPyhbMC05XSspPyhweHxlbXxyZW18ZXh8JXxpbnxjbXxtbXxwdHxwYylcIlxuICAgICAgICB9LFxuICAgICAgICB1cmw6IHtcbiAgICAgICAgICAgIHJlZ2V4OiBcIihodHRwcz98ZnRwKS8vLipcIixcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGlwOiB7XG4gICAgICAgICAgICBtYXNrOiBcImlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV1cIixcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgaToge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zIC0gMSA+IC0xICYmIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICE9PSBcIi5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocnMgPSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSArIGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyAtIDIgPiAtMSAmJiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2hycyA9IFwiMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjaHJzID0gXCIwMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XVwiKS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICBtYXNrOiBcIip7MSw2NH1bLip7MSw2NH1dWy4qezEsNjR9XVsuKnsxLDYzfV1ALXsxLDYzfS4tezEsNjN9Wy4tezEsNjN9XVsuLXsxLDYzfV1cIixcbiAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXG4gICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIixcbiAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgcGFzdGVkVmFsdWUgPSBwYXN0ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXN0ZWRWYWx1ZS5yZXBsYWNlKFwibWFpbHRvOlwiLCBcIlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1ISMkJSYnKisvPT9eX2B7fH1+LV1cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCItXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXotXVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwiZW1haWxcIlxuICAgICAgICB9LFxuICAgICAgICBtYWM6IHtcbiAgICAgICAgICAgIG1hc2s6IFwiIyM6IyM6IyM6IyM6IyM6IyNcIlxuICAgICAgICB9LFxuICAgICAgICB2aW46IHtcbiAgICAgICAgICAgIG1hc2s6IFwiVnsxM305ezR9XCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFY6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLUhKLU5QUi1aYS1oai1ucHItelxcXFxkXVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhckluY29tcGxldGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSW5wdXRtYXNrO1xufSk7IiwiLyohXG4qIGRlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuLi9nbG9iYWwvd2luZG93XCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4uL2dsb2JhbC93aW5kb3dcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5kZXBlbmRlbmN5TGliID0gZmFjdG9yeSh3aW5kb3cpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICBmdW5jdGlvbiBpbmRleE9mKGxpc3QsIGVsZW0pIHtcbiAgICAgICAgdmFyIGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgICAgICAgZm9yICg7aSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQXJyYXlsaWtlKG9iaikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCwgbHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgICAgICBpZiAobHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBpc1dpbmRvdyhvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIC0gMSBpbiBvYmo7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIGVsZW0gaW5zdGFuY2VvZiBFbGVtZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBEZXBlbmRlbmN5TGliKGVsZW0pIHtcbiAgICAgICAgaWYgKGVsZW0gaW5zdGFuY2VvZiBEZXBlbmRlbmN5TGliKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVwZW5kZW5jeUxpYikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGVwZW5kZW5jeUxpYihlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbSAhPT0gdW5kZWZpbmVkICYmIGVsZW0gIT09IG51bGwgJiYgZWxlbSAhPT0gd2luZG93KSB7XG4gICAgICAgICAgICB0aGlzWzBdID0gZWxlbS5ub2RlTmFtZSA/IGVsZW0gOiBlbGVtWzBdICE9PSB1bmRlZmluZWQgJiYgZWxlbVswXS5ub2RlTmFtZSA/IGVsZW1bMF0gOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0pO1xuICAgICAgICAgICAgaWYgKHRoaXNbMF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzWzBdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpc1swXS5ldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5IHx8IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtKSB7XG4gICAgICAgIHJldHVybiBpc1dpbmRvdyhlbGVtKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ID8gZWxlbS5kZWZhdWx0VmlldyB8fCBlbGVtLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xuICAgIH1cbiAgICBEZXBlbmRlbmN5TGliLnByb3RvdHlwZSA9IHtcbiAgICAgICAgb246IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBhZGRFdmVudCA9IGZ1bmN0aW9uKGV2LCBuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKGV2LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hdHRhY2hFdmVudChcIm9uXCIgKyBldiwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl0gPSBldmVudFJlZ2lzdHJ5W2V2XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXSA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0gfHwgW107XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ucHVzaChoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBfZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgZXYgPSBuc0V2ZW50WzBdLCBuYW1lc3BhY2UgPSBuc0V2ZW50WzFdIHx8IFwiZ2xvYmFsXCI7XG4gICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50KGV2LCBuYW1lc3BhY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGV2LCBuYW1lc3BhY2UsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2IGluIGV2ZW50UmVnaXN0cnkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZGV0YWNoRXZlbnQoXCJvblwiICsgZXYsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJnbG9iYWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLmluZGV4T2YoaGFuZGxlciksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5zcGxpY2UoZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5pbmRleE9mKGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVOYW1lc3BhY2UgPSBmdW5jdGlvbihldiwgbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldnRzID0gW10sIGhuZHgsIGhuZEw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChobmR4ID0gMCwgaG5kTCA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBobmR4IDwgaG5kTDsgaG5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldjogZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXZOZHggaW4gZXZlbnRSZWdpc3RyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldk5keF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5tc3AgPT09IG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaG5keCA9IDAsIGhuZEwgPSBldmVudFJlZ2lzdHJ5W2V2TmR4XVtubXNwXS5sZW5ndGg7IGhuZHggPCBobmRMOyBobmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2OiBldk5keCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbm1zcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGV2ZW50UmVnaXN0cnlbZXZOZHhdW25tc3BdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2TmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5tc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZ0cztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBfZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgb2ZmRXZlbnRzID0gcmVzb2x2ZU5hbWVzcGFjZShuc0V2ZW50WzBdLCBuc0V2ZW50WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG9mZkV2ZW50c0wgPSBvZmZFdmVudHMubGVuZ3RoOyBpIDwgb2ZmRXZlbnRzTDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFdmVudChvZmZFdmVudHNbaV0uZXYsIG9mZkV2ZW50c1tpXS5uYW1lc3BhY2UsIG9mZkV2ZW50c1tpXS5oYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudCh0aGlzWzBdKSkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5LCBlbGVtID0gdGhpc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgX2V2ZW50cyA9IHR5cGVvZiBldmVudHMgPT09IFwic3RyaW5nXCIgPyBldmVudHMuc3BsaXQoXCIgXCIpIDogWyBldmVudHMudHlwZSBdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGVuZHggPSAwOyBlbmR4IDwgX2V2ZW50cy5sZW5ndGg7IGVuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnNFdmVudCA9IF9ldmVudHNbZW5keF0uc3BsaXQoXCIuXCIpLCBldiA9IG5zRXZlbnRbMF0sIG5hbWVzcGFjZSA9IG5zRXZlbnRbMV0gfHwgXCJnbG9iYWxcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50ICE9PSB1bmRlZmluZWQgJiYgbmFtZXNwYWNlID09PSBcImdsb2JhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZudCwgaSwgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXYsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudC5pbml0Q3VzdG9tRXZlbnQoZXYsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMudHlwZSkgRGVwZW5kZW5jeUxpYi5leHRlbmQoZXZudCwgZXZlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoZXZudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQuZXZlbnRUeXBlID0gZXY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudC5kZXRhaWwgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cy50eXBlKSBEZXBlbmRlbmN5TGliLmV4dGVuZChldm50LCBldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZmlyZUV2ZW50KFwib25cIiArIGV2bnQuZXZlbnRUeXBlLCBldm50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudFJlZ2lzdHJ5W2V2XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBhcmd1bWVudHNbMF0udHlwZSA/IGFyZ3VtZW50c1swXSA6IERlcGVuZGVuY3lMaWIuRXZlbnQoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgPT09IFwiZ2xvYmFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBubXNwIGluIGV2ZW50UmVnaXN0cnlbZXZdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudFJlZ2lzdHJ5W2V2XVtubXNwXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF1baV0uYXBwbHkoZWxlbSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXVtpXS5hcHBseShlbGVtLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIubm9vcCA9IGZ1bmN0aW9uKCkge307XG4gICAgRGVwZW5kZW5jeUxpYi5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbiAgICBEZXBlbmRlbmN5TGliLmluQXJyYXkgPSBmdW5jdGlvbihlbGVtLCBhcnIsIGkpIHtcbiAgICAgICAgcmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mKGFyciwgZWxlbSwgaSk7XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLnZhbEhvb2tzID0gdW5kZWZpbmVkO1xuICAgIERlcGVuZGVuY3lMaWIuaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgaXNXaW5kb3cob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmouY29uc3RydWN0b3IgJiYgIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5leHRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLCB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBkZWVwID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgZGVlcCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1tpXSB8fCB7fTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhRGVwZW5kZW5jeUxpYi5pc0Z1bmN0aW9uKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRoaXM7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7aSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMgPSBhcmd1bWVudHNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvcHkgPSBvcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBjb3B5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVlcCAmJiBjb3B5ICYmIChEZXBlbmRlbmN5TGliLmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gRGVwZW5kZW5jeUxpYi5pc0FycmF5KGNvcHkpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5SXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlJc0FycmF5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgRGVwZW5kZW5jeUxpYi5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgRGVwZW5kZW5jeUxpYi5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IERlcGVuZGVuY3lMaWIuZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3B5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGNvcHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIuZWFjaCA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHZhbHVlLCBpID0gMDtcbiAgICAgICAgaWYgKGlzQXJyYXlsaWtlKG9iaikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5kYXRhID0gZnVuY3Rpb24ob3duZXIsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvd25lci5fX2RhdGEgPyBvd25lci5fX2RhdGFba2V5XSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvd25lci5fX2RhdGEgPSBvd25lci5fX2RhdGEgfHwge307XG4gICAgICAgICAgICBvd25lci5fX2RhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIERlcGVuZGVuY3lMaWIuRXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgRGVwZW5kZW5jeUxpYi5FdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7XG4gICAgICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgICB9O1xuICAgICAgICBEZXBlbmRlbmN5TGliLkV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgfVxuICAgIHJldHVybiBEZXBlbmRlbmN5TGliO1xufSk7IiwiLyohXG4qIGlucHV0bWFzay5kYXRlLmV4dGVuc2lvbnMuanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC45XG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWyBcIi4vaW5wdXRtYXNrXCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vaW5wdXRtYXNrXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KHdpbmRvdy5JbnB1dG1hc2spO1xuICAgIH1cbn0pKGZ1bmN0aW9uKElucHV0bWFzaykge1xuICAgIHZhciAkID0gSW5wdXRtYXNrLmRlcGVuZGVuY3lMaWI7XG4gICAgdmFyIGZvcm1hdENvZGUgPSB7XG4gICAgICAgIGQ6IFsgXCJbMS05XXxbMTJdWzAtOV18M1swMV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSwgXCJkYXlcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSBdLFxuICAgICAgICBkZDogWyBcIjBbMS05XXxbMTJdWzAtOV18M1swMV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSwgXCJkYXlcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldERhdGUuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgZGRkOiBbIFwiXCIgXSxcbiAgICAgICAgZGRkZDogWyBcIlwiIF0sXG4gICAgICAgIG06IFsgXCJbMS05XXwxWzAxMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TW9udGgsIFwibW9udGhcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5wcm90b3R5cGUuZ2V0TW9udGguY2FsbCh0aGlzKSArIDE7XG4gICAgICAgIH0gXSxcbiAgICAgICAgbW06IFsgXCIwWzEtOV18MVswMTJdXCIsIERhdGUucHJvdG90eXBlLnNldE1vbnRoLCBcIm1vbnRoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNb250aC5jYWxsKHRoaXMpICsgMSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgbW1tOiBbIFwiXCIgXSxcbiAgICAgICAgbW1tbTogWyBcIlwiIF0sXG4gICAgICAgIHl5OiBbIFwiWzAtOV17Mn1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXIsIFwieWVhclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgeXl5eTogWyBcIlswLTldezR9XCIsIERhdGUucHJvdG90eXBlLnNldEZ1bGxZZWFyLCBcInllYXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyLmNhbGwodGhpcyksIDQpO1xuICAgICAgICB9IF0sXG4gICAgICAgIGg6IFsgXCJbMS05XXwxWzAtMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgaGg6IFsgXCIwWzEtOV18MVswLTJdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBoaGg6IFsgXCJbMC05XStcIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgSDogWyBcIjE/WzAtOV18MlswLTNdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIERhdGUucHJvdG90eXBlLmdldEhvdXJzIF0sXG4gICAgICAgIEhIOiBbIFwiMFswLTldfDFbMC05XXwyWzAtM11cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEhvdXJzLmNhbGwodGhpcyksIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIEhISDogWyBcIlswLTldK1wiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRIb3VycyBdLFxuICAgICAgICBNOiBbIFwiWzEtNV0/WzAtOV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWludXRlcywgXCJtaW51dGVzXCIsIERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMgXSxcbiAgICAgICAgTU06IFsgXCIwWzAtOV18MVswLTldfDJbMC05XXwzWzAtOV18NFswLTldfDVbMC05XVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaW51dGVzLCBcIm1pbnV0ZXNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgc3M6IFsgXCJbMC01XVswLTldXCIsIERhdGUucHJvdG90eXBlLnNldFNlY29uZHMsIFwic2Vjb25kc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0U2Vjb25kcy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBsOiBbIFwiWzAtOV17M31cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWlsbGlzZWNvbmRzLCBcIm1pbGxpc2Vjb25kc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzLmNhbGwodGhpcyksIDMpO1xuICAgICAgICB9IF0sXG4gICAgICAgIEw6IFsgXCJbMC05XXsyfVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMsIFwibWlsbGlzZWNvbmRzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNaWxsaXNlY29uZHMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgdDogWyBcIlthcF1cIiBdLFxuICAgICAgICB0dDogWyBcIlthcF1tXCIgXSxcbiAgICAgICAgVDogWyBcIltBUF1cIiBdLFxuICAgICAgICBUVDogWyBcIltBUF1NXCIgXSxcbiAgICAgICAgWjogWyBcIlwiIF0sXG4gICAgICAgIG86IFsgXCJcIiBdLFxuICAgICAgICBTOiBbIFwiXCIgXVxuICAgIH0sIGZvcm1hdEFsaWFzID0ge1xuICAgICAgICBpc29EYXRlOiBcInl5eXktbW0tZGRcIixcbiAgICAgICAgaXNvVGltZTogXCJISDpNTTpzc1wiLFxuICAgICAgICBpc29EYXRlVGltZTogXCJ5eXl5LW1tLWRkJ1QnSEg6TU06c3NcIixcbiAgICAgICAgaXNvVXRjRGF0ZVRpbWU6IFwiVVRDOnl5eXktbW0tZGQnVCdISDpNTTpzcydaJ1wiXG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRUb2tlbml6ZXIob3B0cykge1xuICAgICAgICBpZiAoIW9wdHMudG9rZW5pemVyKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBuZHggaW4gZm9ybWF0Q29kZSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMuaW5kZXhPZihuZHhbMF0pID09PSAtMSkgdG9rZW5zLnB1c2gobmR4WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdHMudG9rZW5pemVyID0gXCIoXCIgKyB0b2tlbnMuam9pbihcIit8XCIpICsgXCIpKz98LlwiO1xuICAgICAgICAgICAgb3B0cy50b2tlbml6ZXIgPSBuZXcgUmVnRXhwKG9wdHMudG9rZW5pemVyLCBcImdcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdHMudG9rZW5pemVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlUGFydHMsIGN1cnJlbnRSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuICFpc0Zpbml0ZShkYXRlUGFydHMucmF3ZGF5KSB8fCBkYXRlUGFydHMuZGF5ID09IFwiMjlcIiAmJiAhaXNGaW5pdGUoZGF0ZVBhcnRzLnJhd3llYXIpIHx8IG5ldyBEYXRlKGRhdGVQYXJ0cy5kYXRlLmdldEZ1bGxZZWFyKCksIGlzRmluaXRlKGRhdGVQYXJ0cy5yYXdtb250aCkgPyBkYXRlUGFydHMubW9udGggOiBkYXRlUGFydHMuZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF0ZSgpID49IGRhdGVQYXJ0cy5kYXkgPyBjdXJyZW50UmVzdWx0IDogZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRGF0ZUluUmFuZ2UoZGF0ZVBhcnRzLCBvcHRzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgICBpZiAob3B0cy5taW4pIHtcbiAgICAgICAgICAgIGlmIChkYXRlUGFydHNbXCJyYXd5ZWFyXCJdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhd1llYXIgPSBkYXRlUGFydHNbXCJyYXd5ZWFyXCJdLnJlcGxhY2UoL1teMC05XS9nLCBcIlwiKSwgbWluWWVhciA9IG9wdHMubWluLnllYXIuc3Vic3RyKDAsIHJhd1llYXIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBtaW5ZZWFyIDw9IHJhd1llYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZVBhcnRzW1wieWVhclwiXSA9PT0gZGF0ZVBhcnRzW1wicmF3eWVhclwiXSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbi5kYXRlLmdldFRpbWUoKSA9PT0gb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkgPD0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ICYmIG9wdHMubWF4ICYmIG9wdHMubWF4LmRhdGUuZ2V0VGltZSgpID09PSBvcHRzLm1heC5kYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkgPj0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlKGZvcm1hdCwgZGF0ZU9ialZhbHVlLCBvcHRzLCByYXcpIHtcbiAgICAgICAgdmFyIG1hc2sgPSBcIlwiLCBtYXRjaDtcbiAgICAgICAgd2hpbGUgKG1hdGNoID0gZ2V0VG9rZW5pemVyKG9wdHMpLmV4ZWMoZm9ybWF0KSkge1xuICAgICAgICAgICAgaWYgKGRhdGVPYmpWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCIoXCIgKyBmb3JtYXRDb2RlW21hdGNoWzBdXVswXSArIFwiKVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiW1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIihcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIl1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCIpP1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBJbnB1dG1hc2suZXNjYXBlUmVnZXgobWF0Y2hbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Q29kZVttYXRjaFswXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhdyAhPT0gdHJ1ZSAmJiBmb3JtYXRDb2RlW21hdGNoWzBdXVszXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldEZuID0gZm9ybWF0Q29kZVttYXRjaFswXV1bM107XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IGdldEZuLmNhbGwoZGF0ZU9ialZhbHVlLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dWzJdKSBtYXNrICs9IGRhdGVPYmpWYWx1ZVtcInJhd1wiICsgZm9ybWF0Q29kZVttYXRjaFswXV1bMl1dOyBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhZCh2YWwsIGxlbikge1xuICAgICAgICB2YWwgPSBTdHJpbmcodmFsKTtcbiAgICAgICAgbGVuID0gbGVuIHx8IDI7XG4gICAgICAgIHdoaWxlICh2YWwubGVuZ3RoIDwgbGVuKSB2YWwgPSBcIjBcIiArIHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5hbHlzZU1hc2sobWFza1N0cmluZywgZm9ybWF0LCBvcHRzKSB7XG4gICAgICAgIHZhciBkYXRlT2JqID0ge1xuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoMSwgMCwgMSlcbiAgICAgICAgfSwgdGFyZ2V0UHJvcCwgbWFzayA9IG1hc2tTdHJpbmcsIG1hdGNoLCBkYXRlT3BlcmF0aW9uLCB0YXJnZXRWYWxpZGF0b3I7XG4gICAgICAgIGZ1bmN0aW9uIGV4dGVuZFByb3BlcnR5KHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY29ycmVjdGVkVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgXCIwXCIpO1xuICAgICAgICAgICAgaWYgKGNvcnJlY3RlZFZhbHVlICE9IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudGVyZWRQYXJ0ID0gdmFsdWUucmVwbGFjZSgvW14wLTldL2csIFwiXCIpLCBtaW4gPSAob3B0cy5taW4gJiYgb3B0cy5taW5bdGFyZ2V0UHJvcF0gfHwgdmFsdWUpLnRvU3RyaW5nKCksIG1heCA9IChvcHRzLm1heCAmJiBvcHRzLm1heFt0YXJnZXRQcm9wXSB8fCB2YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb3JyZWN0ZWRWYWx1ZSA9IGVudGVyZWRQYXJ0ICsgKGVudGVyZWRQYXJ0IDwgbWluLnNsaWNlKDAsIGVudGVyZWRQYXJ0Lmxlbmd0aCkgPyBtaW4uc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSA6IGVudGVyZWRQYXJ0ID4gbWF4LnNsaWNlKDAsIGVudGVyZWRQYXJ0Lmxlbmd0aCkgPyBtYXguc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSA6IGNvcnJlY3RlZFZhbHVlLnRvU3RyaW5nKCkuc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29ycmVjdGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0VmFsdWUoZGF0ZU9iaiwgdmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgIGRhdGVPYmpbdGFyZ2V0UHJvcF0gPSBleHRlbmRQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgICAgICBkYXRlT2JqW1wicmF3XCIgKyB0YXJnZXRQcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGRhdGVPcGVyYXRpb24gIT09IHVuZGVmaW5lZCkgZGF0ZU9wZXJhdGlvbi5jYWxsKGRhdGVPYmouZGF0ZSwgdGFyZ2V0UHJvcCA9PSBcIm1vbnRoXCIgPyBwYXJzZUludChkYXRlT2JqW3RhcmdldFByb3BdKSAtIDEgOiBkYXRlT2JqW3RhcmdldFByb3BdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1hc2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBtYXNrLnNsaWNlKDAsIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdENvZGUuaGFzT3duUHJvcGVydHkobWF0Y2hbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFZhbGlkYXRvciA9IGZvcm1hdENvZGVbbWF0Y2hbMF1dWzBdO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRQcm9wID0gZm9ybWF0Q29kZVttYXRjaFswXV1bMl07XG4gICAgICAgICAgICAgICAgICAgIGRhdGVPcGVyYXRpb24gPSBmb3JtYXRDb2RlW21hdGNoWzBdXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZU9iaiwgdmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5zbGljZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGVPYmo7XG4gICAgICAgIH0gZWxzZSBpZiAobWFzayAmJiB0eXBlb2YgbWFzayA9PT0gXCJvYmplY3RcIiAmJiBtYXNrLmhhc093blByb3BlcnR5KFwiZGF0ZVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBkYXRldGltZToge1xuICAgICAgICAgICAgbWFzazogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgIGZvcm1hdENvZGUuUyA9IG9wdHMuaTE4bi5vcmRpbmFsU3VmZml4LmpvaW4oXCJ8XCIpO1xuICAgICAgICAgICAgICAgIG9wdHMuaW5wdXRGb3JtYXQgPSBmb3JtYXRBbGlhc1tvcHRzLmlucHV0Rm9ybWF0XSB8fCBvcHRzLmlucHV0Rm9ybWF0O1xuICAgICAgICAgICAgICAgIG9wdHMuZGlzcGxheUZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMuZGlzcGxheUZvcm1hdF0gfHwgb3B0cy5kaXNwbGF5Rm9ybWF0IHx8IG9wdHMuaW5wdXRGb3JtYXQ7XG4gICAgICAgICAgICAgICAgb3B0cy5vdXRwdXRGb3JtYXQgPSBmb3JtYXRBbGlhc1tvcHRzLm91dHB1dEZvcm1hdF0gfHwgb3B0cy5vdXRwdXRGb3JtYXQgfHwgb3B0cy5pbnB1dEZvcm1hdDtcbiAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gb3B0cy5wbGFjZWhvbGRlciAhPT0gXCJcIiA/IG9wdHMucGxhY2Vob2xkZXIgOiBvcHRzLmlucHV0Rm9ybWF0LnJlcGxhY2UoL1tcXFtcXF1dLywgXCJcIik7XG4gICAgICAgICAgICAgICAgb3B0cy5yZWdleCA9IHBhcnNlKG9wdHMuaW5wdXRGb3JtYXQsIHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXG4gICAgICAgICAgICBpbnB1dEZvcm1hdDogXCJpc29EYXRlVGltZVwiLFxuICAgICAgICAgICAgZGlzcGxheUZvcm1hdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3V0cHV0Rm9ybWF0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtaW46IG51bGwsXG4gICAgICAgICAgICBtYXg6IG51bGwsXG4gICAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICAgICAgZGF5TmFtZXM6IFsgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiLCBcIlN1bmRheVwiIF0sXG4gICAgICAgICAgICAgICAgbW9udGhOYW1lczogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiLCBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcbiAgICAgICAgICAgICAgICBvcmRpbmFsU3VmZml4OiBbIFwic3RcIiwgXCJuZFwiLCBcInJkXCIsIFwidGhcIiBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IGZ1bmN0aW9uKGJ1ZmZlciwgcG9zLCBjdXJyZW50UmVzdWx0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5taW4gPSBhbmFseXNlTWFzayhvcHRzLm1pbiwgb3B0cy5pbnB1dEZvcm1hdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgb3B0cy5tYXggPSBhbmFseXNlTWFzayhvcHRzLm1heCwgb3B0cy5pbnB1dEZvcm1hdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1cnJlbnRSZXN1bHQsIGRhdGVQYXJ0cyA9IGFuYWx5c2VNYXNrKGJ1ZmZlci5qb2luKFwiXCIpLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIGRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKSA9PT0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzVmFsaWREYXRlKGRhdGVQYXJ0cywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICYmIGlzRGF0ZUluUmFuZ2UoZGF0ZVBhcnRzLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBvcyAmJiByZXN1bHQgJiYgY3VycmVudFJlc3VsdC5wb3MgIT09IHBvcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBwYXJzZShvcHRzLmlucHV0Rm9ybWF0LCBkYXRlUGFydHMsIG9wdHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogY3VycmVudFJlc3VsdC5wb3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpLCBtYXRjaCwgZGF0ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKG9wdHMuaW5wdXRGb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcImRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldERhdGUoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcIm1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldE1vbnRoKCkgKyAxLCBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gXCJ5eXl5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9IHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcInlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldFllYXIoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZShvcHRzLm91dHB1dEZvcm1hdCwgYW5hbHlzZU1hc2sobWFza2VkVmFsdWUsIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpLCBvcHRzLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXNpbmc6IGZ1bmN0aW9uKGVsZW0sIHRlc3QsIHBvcywgdmFsaWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIlthcF1cIikgPT0gMCkgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIltBUF1cIikgPT0gMCkgcmV0dXJuIGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIHNoaWZ0UG9zaXRpb25zOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIElucHV0bWFzaztcbn0pOyIsIi8qIVxuKiBpbnB1dG1hc2subnVtZXJpYy5leHRlbnNpb25zLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuL2lucHV0bWFza1wiIF0sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2lucHV0bWFza1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeSh3aW5kb3cuSW5wdXRtYXNrKTtcbiAgICB9XG59KShmdW5jdGlvbihJbnB1dG1hc2spIHtcbiAgICB2YXIgJCA9IElucHV0bWFzay5kZXBlbmRlbmN5TGliO1xuICAgIGZ1bmN0aW9uIGF1dG9Fc2NhcGUodHh0LCBvcHRzKSB7XG4gICAgICAgIHZhciBlc2NhcGVkVHh0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zW3R4dC5jaGFyQXQoaSldIHx8IG9wdHMuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gfHwgb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5xdWFudGlmaWVybWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuZ3JvdXBtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuYWx0ZXJuYXRvcm1hcmtlciA9PT0gdHh0LmNoYXJBdChpKSkge1xuICAgICAgICAgICAgICAgIGVzY2FwZWRUeHQgKz0gXCJcXFxcXCIgKyB0eHQuY2hhckF0KGkpO1xuICAgICAgICAgICAgfSBlbHNlIGVzY2FwZWRUeHQgKz0gdHh0LmNoYXJBdChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXNjYXBlZFR4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWxpZ25EaWdpdHMoYnVmZmVyLCBkaWdpdHMsIG9wdHMpIHtcbiAgICAgICAgaWYgKGRpZ2l0cyA+IDApIHtcbiAgICAgICAgICAgIHZhciByYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChyYWRpeFBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgcmFkaXhQb3NpdGlvbiA9IGJ1ZmZlci5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZGlnaXRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldID0gYnVmZmVyW3JhZGl4UG9zaXRpb24gKyBpXSB8fCBcIjBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XG4gICAgICAgIG51bWVyaWM6IHtcbiAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgIT09IDAgJiYgaXNOYU4ob3B0cy5pbnRlZ2VyRGlnaXRzKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPSBvcHRzLnJlcGVhdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5yZXBlYXQgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmdyb3VwU2VwYXJhdG9yID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5kaWdpdHMgJiYgb3B0cy5kaWdpdHMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmdyb3VwU2VwYXJhdG9yID0gXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLlwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmdyb3VwU2VwYXJhdG9yID09PSBcIiBcIikge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuYXV0b0dyb3VwID0gb3B0cy5hdXRvR3JvdXAgJiYgb3B0cy5ncm91cFNlcGFyYXRvciAhPT0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5hdXRvR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmdyb3VwU2l6ZSA9PSBcInN0cmluZ1wiICYmIGlzRmluaXRlKG9wdHMuZ3JvdXBTaXplKSkgb3B0cy5ncm91cFNpemUgPSBwYXJzZUludChvcHRzLmdyb3VwU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShvcHRzLmludGVnZXJEaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwcyA9IE1hdGguZmxvb3Iob3B0cy5pbnRlZ2VyRGlnaXRzIC8gb3B0cy5ncm91cFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZCA9IG9wdHMuaW50ZWdlckRpZ2l0cyAlIG9wdHMuZ3JvdXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gcGFyc2VJbnQob3B0cy5pbnRlZ2VyRGlnaXRzKSArIChtb2QgPT09IDAgPyBzZXBzIC0gMSA6IHNlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaW50ZWdlckRpZ2l0cyA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPSBcIipcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5wbGFjZWhvbGRlci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPT09IFwicmFkaXhGb2N1c1wiICYmIChvcHRzLnBsYWNlaG9sZGVyID09PSBcIlwiICYmIG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9IFwibHZwXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbXCI7XCJdID0gb3B0cy5kZWZpbml0aW9uc1tcIn5cIl07XG4gICAgICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9uc1tcIjtcIl0uZGVmaW5pdGlvblN5bWJvbCA9IFwiflwiO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID0gb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9PT0gXCJyYWRpeEZvY3VzXCIgPyBcImx2cFwiIDogb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljaztcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kaWdpdHNPcHRpb25hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5kaWdpdHMpKSBvcHRzLmRpZ2l0cyA9IDI7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZGVjaW1hbFByb3RlY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1hc2sgPSBcIlsrXVwiO1xuICAgICAgICAgICAgICAgIG1hc2sgKz0gYXV0b0VzY2FwZShvcHRzLnByZWZpeCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCJ+ezEsXCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbWFzayArPSBcIn57XCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhEZWYgPSBvcHRzLmRlY2ltYWxQcm90ZWN0ID8gXCI6XCIgOiBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcSA9IG9wdHMuZGlnaXRzLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUoZHFbMF0pICYmIGRxWzFdICYmIGlzRmluaXRlKGRxWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSByYWRpeERlZiArIFwiO3tcIiArIG9wdHMuZGlnaXRzICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpZ2l0c09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIltcIiArIHJhZGl4RGVmICsgXCI7ezEsXCIgKyBvcHRzLmRpZ2l0cyArIFwifV1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXNrICs9IHJhZGl4RGVmICsgXCI7e1wiICsgb3B0cy5kaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrICs9IGF1dG9Fc2NhcGUob3B0cy5zdWZmaXgsIG9wdHMpO1xuICAgICAgICAgICAgICAgIG1hc2sgKz0gXCJbLV1cIjtcbiAgICAgICAgICAgICAgICBvcHRzLmdyZWVkeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxuICAgICAgICAgICAgZ3JlZWR5OiBmYWxzZSxcbiAgICAgICAgICAgIGRpZ2l0czogXCIqXCIsXG4gICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgIGVuZm9yY2VEaWdpdHNPbkJsdXI6IGZhbHNlLFxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25DbGljazogXCJyYWRpeEZvY3VzXCIsXG4gICAgICAgICAgICBncm91cFNpemU6IDMsXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgIGF1dG9Hcm91cDogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd01pbnVzOiB0cnVlLFxuICAgICAgICAgICAgbmVnYXRpb25TeW1ib2w6IHtcbiAgICAgICAgICAgICAgICBmcm9udDogXCItXCIsXG4gICAgICAgICAgICAgICAgYmFjazogXCJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGludGVnZXJEaWdpdHM6IFwiK1wiLFxuICAgICAgICAgICAgaW50ZWdlck9wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgcHJlZml4OiBcIlwiLFxuICAgICAgICAgICAgc3VmZml4OiBcIlwiLFxuICAgICAgICAgICAgcmlnaHRBbGlnbjogdHJ1ZSxcbiAgICAgICAgICAgIGRlY2ltYWxQcm90ZWN0OiB0cnVlLFxuICAgICAgICAgICAgbWluOiBudWxsLFxuICAgICAgICAgICAgbWF4OiBudWxsLFxuICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgIGluc2VydE1vZGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiBmYWxzZSxcbiAgICAgICAgICAgIHVubWFza0FzTnVtYmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGlucHV0VHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogZnVuY3Rpb24oYnVmZmVyLCBwb3MsIGMsIGlzU2VsZWN0aW9uLCBvcHRzLCBtYXNrc2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IFwiLVwiIHx8IGMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuYWxsb3dNaW51cyAhPT0gdHJ1ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBvcHRzLmlzTmVnYXRpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhb3B0cy5pc05lZ2F0aXZlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmpvaW4oXCJcIikgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSA/IHBvcyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTZWxlY3Rpb24gPT09IGZhbHNlICYmIGMgPT09IG9wdHMucmFkaXhQb2ludCAmJiAob3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCAmJiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3MgIT09IC0xICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3NdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3MgPT09IHJhZGl4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcmFkaXhQb3MgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbihidWZmZXIsIHBvcywgY3VycmVudFJlc3VsdCwgb3B0cykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkUG9zdE1hc2soYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3N0TWFzayA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHBvc3RNYXNrICs9IFwiKFwiICsgb3B0cy5ncm91cFNlcGFyYXRvciArIFwiKntcIiArIG9wdHMuZ3JvdXBTaXplICsgXCJ9KXsqfVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhTcGxpdCA9IGJ1ZmZlci5qb2luKFwiXCIpLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhTcGxpdFsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RNYXNrICs9IG9wdHMucmFkaXhQb2ludCArIFwiKntcIiArIHJhZGl4U3BsaXRbMV0ubWF0Y2goL15cXGQqXFw/P1xcZCovKVswXS5sZW5ndGggKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zdE1hc2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSBvcHRzLnN1ZmZpeC5zcGxpdChcIlwiKSwgcHJlZml4ID0gb3B0cy5wcmVmaXguc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZXN1bHQucG9zID09PSB1bmRlZmluZWQgJiYgY3VycmVudFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkICYmIGN1cnJlbnRSZXN1bHQuZG9wb3N0ICE9PSB0cnVlKSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjdXJyZW50UmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyBjdXJyZW50UmVzdWx0LmNhcmV0IDogY3VycmVudFJlc3VsdC5wb3M7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0gbWFza2VkVmFsdWUubGVuZ3RoIC0gY2FyZXRQb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zID09PSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAxICYmIGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50KSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWVbY2FyZXRQb3NdID0gXCI/XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wcmVmaXgubGVuZ3RoID4gMCAmJiBjYXJldFBvcyA+PSAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSAmJiBjYXJldFBvcyA8IG9wdHMucHJlZml4Lmxlbmd0aCAtIDEgKyAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeFtjYXJldFBvcyAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApXSA9IFwiP1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnN1ZmZpeC5sZW5ndGggPiAwICYmIGNhcmV0UG9zID49IG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4W2NhcmV0UG9zIC0gKG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApKV0gPSBcIj9cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVmaXggPSBwcmVmaXguam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBzdWZmaXggPSBzdWZmaXguam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUuam9pbihcIlwiKS5yZXBsYWNlKHByZWZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uoc3VmZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiWy1cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiXVwiLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihvcHRzLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnBsYWNlaG9sZGVyKSwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZS5sZW5ndGggPiAxICYmIHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKC9eXFw/L2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKC9eMC9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZS5jaGFyQXQoMCkgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIgJiYgb3B0cy5udW1lcmljSW5wdXQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gXCIwXCIgKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKCFvcHRzLmRpZ2l0c09wdGlvbmFsIHx8IG9wdHMuZW5mb3JjZURpZ2l0c09uQmx1ciAmJiBjdXJyZW50UmVzdWx0LmV2ZW50ID09PSBcImJsdXJcIikgJiYgaXNGaW5pdGUob3B0cy5kaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnBiID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza2VkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zaXRpb24gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlLnB1c2gob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpeFBvc2l0aW9uID0gcHJvY2Vzc1ZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBvcHRzLmRpZ2l0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghb3B0cy5kaWdpdHNPcHRpb25hbCB8fCBvcHRzLmVuZm9yY2VEaWdpdHNPbkJsdXIgJiYgY3VycmVudFJlc3VsdC5ldmVudCA9PT0gXCJibHVyXCIpICYmIChwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID09PSB1bmRlZmluZWQgfHwgcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSA9PT0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBjdXJyZW50UmVzdWx0LnBsYWNlaG9sZGVyIHx8IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocnBiICE9PSAtMSAmJiBtYXNrZWRWYWx1ZVtycGIgKyBpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldIHx8IG1hc2tlZFZhbHVlW3JwYiArIGldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5hdXRvR3JvdXAgPT09IHRydWUgJiYgb3B0cy5ncm91cFNlcGFyYXRvciAhPT0gXCJcIiAmJiAoY2hhckF0UG9zICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgY3VycmVudFJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCB8fCBjdXJyZW50UmVzdWx0LmRvcG9zdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRSYWRpeCA9IHByb2Nlc3NWYWx1ZVtwcm9jZXNzVmFsdWUubGVuZ3RoIC0gMV0gPT09IG9wdHMucmFkaXhQb2ludCAmJiBjdXJyZW50UmVzdWx0LmMgPT09IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IElucHV0bWFzayhidWlsZFBvc3RNYXNrKHByb2Nlc3NWYWx1ZSwgb3B0cyksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmljSW5wdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaml0TWFza2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTk/XVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmZvcm1hdChwcm9jZXNzVmFsdWUuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkUmFkaXgpIHByb2Nlc3NWYWx1ZSArPSBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlLmNoYXJBdCgwKSA9PT0gb3B0cy5ncm91cFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaXNOZWdhdGl2ZSAmJiBjdXJyZW50UmVzdWx0LmV2ZW50ID09PSBcImJsdXJcIikge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBwcm9jZXNzVmFsdWUgIT09IFwiMFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcmVmaXggKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlICs9IHN1ZmZpeDtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5pc05lZ2F0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSArPSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSAkLmluQXJyYXkoXCI/XCIsIHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtjYXJldFBvc10gPSBjaGFyQXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2FyZXRQb3MgPSBjdXJyZW50UmVzdWx0LmNhcmV0IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckF0UG9zID09PSBvcHRzLnJhZGl4UG9pbnQgfHwgY2hhckF0UG9zID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IHx8IGNoYXJBdFBvcyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2FyZXRQb3MgPSAkLmluQXJyYXkoY2hhckF0UG9zLCBwcm9jZXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NhcmV0UG9zICE9PSAtMSkgY2FyZXRQb3MgPSBuZXdDYXJldFBvcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBwcm9jZXNzVmFsdWUubGVuZ3RoIC0gY2FyZXRQb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IChjaGFyQXRQb3MgPT09IHVuZGVmaW5lZCB8fCBjdXJyZW50UmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkKSAmJiBjYXJldFBvcyAhPT0gdW5kZWZpbmVkID8gY2FyZXRQb3MgKyAob3B0cy5udW1lcmljSW5wdXQgPyAtMSA6IDEpIDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogcHJvY2Vzc1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogY3VycmVudFJlc3VsdC5kb3Bvc3QgfHwgYnVmZmVyLmpvaW4oXCJcIikgIT09IHByb2Nlc3NWYWx1ZS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlciA/IHJzbHQgOiBjdXJyZW50UmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXJzZU1pbk1heE9wdGlvbnMob3B0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wYXJzZU1pbk1heE9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5taW4gPSBvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCA9PT0gXCIsXCIpIG9wdHMubWluID0gb3B0cy5taW4ucmVwbGFjZShvcHRzLnJhZGl4UG9pbnQsIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm1pbiA9IGlzRmluaXRlKG9wdHMubWluKSA/IHBhcnNlRmxvYXQob3B0cy5taW4pIDogTmFOO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihvcHRzLm1pbikpIG9wdHMubWluID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1heCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gb3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLFwiKSBvcHRzLm1heCA9IG9wdHMubWF4LnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5tYXggPSBpc0Zpbml0ZShvcHRzLm1heCkgPyBwYXJzZUZsb2F0KG9wdHMubWF4KSA6IE5hTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5tYXgpKSBvcHRzLm1heCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnBhcnNlTWluTWF4T3B0aW9ucyA9IFwiZG9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgY2FyZXRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJibHVyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZU1pbk1heE9wdGlvbnMob3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5taW4gIT09IG51bGwgfHwgb3B0cy5tYXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tlZCA9IG9wdHMub25Vbk1hc2soYnVmZmVyLmpvaW4oXCJcIiksIHVuZGVmaW5lZCwgJC5leHRlbmQoe30sIG9wdHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsICYmIHVubWFza2VkIDwgb3B0cy5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc05lZ2F0aXZlID0gb3B0cy5taW4gPCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksIGNhcmV0UG9zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLm1heCAhPT0gbnVsbCAmJiB1bm1hc2tlZCA+IG9wdHMubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IG9wdHMubWF4IDwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucG9zdFZhbGlkYXRpb24ob3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLCBjYXJldFBvcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgY2FyZXRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImJsdXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiX2NoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdleDoge1xuICAgICAgICAgICAgICAgIGludGVnZXJQYXJ0OiBmdW5jdGlvbihvcHRzLCBlbXB0eUNoZWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eUNoZWNrID8gbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XCIpIDogbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XFxcXGQrXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZWdlck5QYXJ0OiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiW1xcXFxkXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpICsgXCJdK1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBcIn5cIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzLCBpc1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQsIGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hycyA9PT0gXCJrXCIgfHwgY2hycyA9PT0gXCJtXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNocnMgPT09IFwia1wiID8gMiA6IDU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZC5pbnNlcnQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkLnBvcyA9IHBvcyArIGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gc3RyaWN0ID8gbmV3IFJlZ0V4cChcIlswLTlcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIFwiXVwiKS50ZXN0KGNocnMpIDogbmV3IFJlZ0V4cChcIlswLTldXCIpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCAhPT0gdHJ1ZSAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gIT09IHVuZGVmaW5lZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10ubWF0Y2guZGVmID09PSBcIn5cIiAmJiAhaXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCJdXCIsIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHZSYWRpeFNwbGl0ID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHZSYWRpeFNwbGl0WzFdID0gcHZSYWRpeFNwbGl0WzFdLnJlcGxhY2UoLzAvZywgb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXRbMF0gPT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdlJhZGl4U3BsaXRbMF0gPSBwdlJhZGl4U3BsaXRbMF0ucmVwbGFjZSgvMC9nLCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHZSYWRpeFNwbGl0WzBdICsgb3B0cy5yYWRpeFBvaW50ICsgcHZSYWRpeFNwbGl0WzFdIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJUZW1wbGF0ZSA9IG1hc2tzZXQuX2J1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IGJ1ZmZlclRlbXBsYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcm9jZXNzVmFsdWUubWF0Y2goSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KGJ1ZmZlclRlbXBsYXRlKSArIFwiJFwiKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyVGVtcGxhdGUgPSBidWZmZXJUZW1wbGF0ZS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShidWZmZXJUZW1wbGF0ZSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZVtwb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIGNocnMgPT09IG9wdHMucmFkaXhQb2ludCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIitcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIChjaHJzID09PSBcIi1cIiB8fCBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIi1cIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIjpcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXggPSBcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpICsgXCJdXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG5ldyBSZWdFeHAocmFkaXgpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLnBsYWNlaG9sZGVyID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIGlmICh1bm1hc2tlZFZhbHVlID09PSBcIlwiICYmIG9wdHMubnVsbGFibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCksIFwiZ1wiKSwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy51bm1hc2tBc051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiICYmIHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgIT09IC0xKSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkpLCBcIi1cIik7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24oYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gKG9wdHMubnVtZXJpY0lucHV0ID8gYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpIDogYnVmZmVyKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpKSwgXCItXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgXCIoWzAtOV17M30pXCIsIFwiZ1wiKSwgXCIkMVwiKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKG1hc2tlZFZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkJlZm9yZU1hc2s6IGZ1bmN0aW9uKGluaXRpYWxWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb2ludCA9IG9wdHMucmFkaXhQb2ludCB8fCBcIixcIjtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBpbml0aWFsVmFsdWUgPT0gXCJudW1iZXJcIiB8fCBvcHRzLmlucHV0VHlwZSA9PT0gXCJudW1iZXJcIikgJiYgcmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlUGFydHMgPSBpbml0aWFsVmFsdWUuc3BsaXQocmFkaXhQb2ludCksIGludGVnZXJQYXJ0ID0gdmFsdWVQYXJ0c1swXS5yZXBsYWNlKC9bXlxcLTAtOV0vZywgXCJcIiksIGRlY2ltYWxQYXJ0ID0gdmFsdWVQYXJ0cy5sZW5ndGggPiAxID8gdmFsdWVQYXJ0c1sxXS5yZXBsYWNlKC9bXjAtOV0vZywgXCJcIikgOiBcIlwiO1xuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGludGVnZXJQYXJ0ICsgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiID8gcmFkaXhQb2ludCArIGRlY2ltYWxQYXJ0IDogZGVjaW1hbFBhcnQpO1xuICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9IGRlY2ltYWxQYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyB8fCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShvcHRzLmRpZ2l0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBwYXJzZUludChvcHRzLmRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCksIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShpbml0aWFsVmFsdWUpKSBpbml0aWFsVmFsdWUgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoaW5pdGlhbFZhbHVlKSAqIGRpZ2l0c0ZhY3RvcikgLyBkaWdpdHNGYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHMgPT09IDAgJiYgaW5pdGlhbFZhbHVlLmluZGV4T2YoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHJhZGl4UG9pbnQpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZihJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsaWduRGlnaXRzKGluaXRpYWxWYWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpLCBkaWdpdHMsIG9wdHMpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgSW5wdXRtYXNrLmtleUNvZGUuVVA6XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKSArIHBhcnNlSW50KG9wdHMuc3RlcCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnB1dG1hc2sua2V5Q29kZS5ET1dOOlxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgLSBwYXJzZUludChvcHRzLnN0ZXApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVuY3k6IHtcbiAgICAgICAgICAgIHByZWZpeDogXCIkIFwiLFxuICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiLFwiLFxuICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgYXV0b0dyb3VwOiB0cnVlLFxuICAgICAgICAgICAgZGlnaXRzOiAyLFxuICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGRlY2ltYWw6IHtcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIlxuICAgICAgICB9LFxuICAgICAgICBpbnRlZ2VyOiB7XG4gICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXG4gICAgICAgICAgICBkaWdpdHM6IDAsXG4gICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIHBlcmNlbnRhZ2U6IHtcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIGRpZ2l0czogMixcbiAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXG4gICAgICAgICAgICBhdXRvR3JvdXA6IGZhbHNlLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgICAgICBzdWZmaXg6IFwiICVcIixcbiAgICAgICAgICAgIGFsbG93TWludXM6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSW5wdXRtYXNrO1xufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL3N0YXItYmFhMjcwNS5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvc3Rhci1hY3RpdmUtMWE1YjhkMi5wbmdcIjsiLCIvKiEgbm91aXNsaWRlciAtIDE0LjEuMSAtIDEyLzE1LzIwMTkgKi9cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIHdpbmRvdy5ub1VpU2xpZGVyID0gZmFjdG9yeSgpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIFZFUlNJT04gPSBcIjE0LjEuMVwiO1xuXG4gICAgLy9yZWdpb24gSGVscGVyIE1ldGhvZHNcblxuICAgIGZ1bmN0aW9uIGlzVmFsaWRGb3JtYXR0ZXIoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZW50cnkudG8gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZW50cnkuZnJvbSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWwpIHtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gQmluZGFibGUgdmVyc2lvblxuICAgIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGFuIGFycmF5LlxuICAgIGZ1bmN0aW9uIHVuaXF1ZShhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpc1thXSA/ICh0aGlzW2FdID0gdHJ1ZSkgOiBmYWxzZTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIC8vIFJvdW5kIGEgdmFsdWUgdG8gdGhlIGNsb3Nlc3QgJ3RvJy5cbiAgICBmdW5jdGlvbiBjbG9zZXN0KHZhbHVlLCB0bykge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAvIHRvKSAqIHRvO1xuICAgIH1cblxuICAgIC8vIEN1cnJlbnQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW0sIG9yaWVudGF0aW9uKSB7XG4gICAgICAgIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgcGFnZU9mZnNldCA9IGdldFBhZ2VPZmZzZXQoZG9jKTtcblxuICAgICAgICAvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgY29udGFpbnMgbGVmdCBzY3JvbGwgaW4gQ2hyb21lIG9uIEFuZHJvaWQuXG4gICAgICAgIC8vIEkgaGF2ZW4ndCBmb3VuZCBhIGZlYXR1cmUgZGV0ZWN0aW9uIHRoYXQgcHJvdmVzIHRoaXMuIFdvcnN0IGNhc2VcbiAgICAgICAgLy8gc2NlbmFyaW8gb24gbWlzLW1hdGNoOiB0aGUgJ3RhcCcgZmVhdHVyZSBvbiBob3Jpem9udGFsIHNsaWRlcnMgYnJlYWtzLlxuICAgICAgICBpZiAoL3dlYmtpdC4qQ2hyb21lLipNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBwYWdlT2Zmc2V0LnggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9yaWVudGF0aW9uXG4gICAgICAgICAgICA/IHJlY3QudG9wICsgcGFnZU9mZnNldC55IC0gZG9jRWxlbS5jbGllbnRUb3BcbiAgICAgICAgICAgIDogcmVjdC5sZWZ0ICsgcGFnZU9mZnNldC54IC0gZG9jRWxlbS5jbGllbnRMZWZ0O1xuICAgIH1cblxuICAgIC8vIENoZWNrcyB3aGV0aGVyIGEgdmFsdWUgaXMgbnVtZXJpY2FsLlxuICAgIGZ1bmN0aW9uIGlzTnVtZXJpYyhhKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgYSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4oYSkgJiYgaXNGaW5pdGUoYSk7XG4gICAgfVxuXG4gICAgLy8gU2V0cyBhIGNsYXNzIGFuZCByZW1vdmVzIGl0IGFmdGVyIFtkdXJhdGlvbl0gbXMuXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3NGb3IoZWxlbWVudCwgY2xhc3NOYW1lLCBkdXJhdGlvbikge1xuICAgICAgICBpZiAoZHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGltaXRzIGEgdmFsdWUgdG8gMCAtIDEwMFxuICAgIGZ1bmN0aW9uIGxpbWl0KGEpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKGEsIDEwMCksIDApO1xuICAgIH1cblxuICAgIC8vIFdyYXBzIGEgdmFyaWFibGUgYXMgYW4gYXJyYXksIGlmIGl0IGlzbid0IG9uZSB5ZXQuXG4gICAgLy8gTm90ZSB0aGF0IGFuIGlucHV0IGFycmF5IGlzIHJldHVybmVkIGJ5IHJlZmVyZW5jZSFcbiAgICBmdW5jdGlvbiBhc0FycmF5KGEpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYSkgPyBhIDogW2FdO1xuICAgIH1cblxuICAgIC8vIENvdW50cyBkZWNpbWFsc1xuICAgIGZ1bmN0aW9uIGNvdW50RGVjaW1hbHMobnVtU3RyKSB7XG4gICAgICAgIG51bVN0ciA9IFN0cmluZyhudW1TdHIpO1xuICAgICAgICB2YXIgcGllY2VzID0gbnVtU3RyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIHBpZWNlcy5sZW5ndGggPiAxID8gcGllY2VzWzFdLmxlbmd0aCA6IDA7XG4gICAgfVxuXG4gICAgLy8gaHR0cDovL3lvdW1pZ2h0bm90bmVlZGpxdWVyeS5jb20vI2FkZF9jbGFzc1xuICAgIGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xhc3NOYW1lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cDovL3lvdW1pZ2h0bm90bmVlZGpxdWVyeS5jb20vI3JlbW92ZV9jbGFzc1xuICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcIihefFxcXFxiKVwiICsgY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKSArIFwiKFxcXFxifCQpXCIsIFwiZ2lcIiksXG4gICAgICAgICAgICAgICAgXCIgXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBodHRwczovL3BsYWluanMuY29tL2phdmFzY3JpcHQvYXR0cmlidXRlcy9hZGRpbmctcmVtb3ZpbmctYW5kLXRlc3RpbmctZm9yLWNsYXNzZXMtOS9cbiAgICBmdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3RcbiAgICAgICAgICAgID8gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSlcbiAgICAgICAgICAgIDogbmV3IFJlZ0V4cChcIlxcXFxiXCIgKyBjbGFzc05hbWUgKyBcIlxcXFxiXCIpLnRlc3QoZWwuY2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L3Njcm9sbFkjTm90ZXNcbiAgICBmdW5jdGlvbiBnZXRQYWdlT2Zmc2V0KGRvYykge1xuICAgICAgICB2YXIgc3VwcG9ydFBhZ2VPZmZzZXQgPSB3aW5kb3cucGFnZVhPZmZzZXQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGlzQ1NTMUNvbXBhdCA9IChkb2MuY29tcGF0TW9kZSB8fCBcIlwiKSA9PT0gXCJDU1MxQ29tcGF0XCI7XG4gICAgICAgIHZhciB4ID0gc3VwcG9ydFBhZ2VPZmZzZXRcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VYT2Zmc2V0XG4gICAgICAgICAgICA6IGlzQ1NTMUNvbXBhdFxuICAgICAgICAgICAgICAgID8gZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0XG4gICAgICAgICAgICAgICAgOiBkb2MuYm9keS5zY3JvbGxMZWZ0O1xuICAgICAgICB2YXIgeSA9IHN1cHBvcnRQYWdlT2Zmc2V0XG4gICAgICAgICAgICA/IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgICAgICAgICAgOiBpc0NTUzFDb21wYXRcbiAgICAgICAgICAgICAgICA/IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgOiBkb2MuYm9keS5zY3JvbGxUb3A7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gd2UgcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGNvbXB1dGUgY29uc3RhbnRzIGluc3RlYWRcbiAgICAvLyBvZiBhY2Nlc3Npbmcgd2luZG93LiogYXMgc29vbiBhcyB0aGUgbW9kdWxlIG5lZWRzIGl0XG4gICAgLy8gc28gdGhhdCB3ZSBkbyBub3QgY29tcHV0ZSBhbnl0aGluZyBpZiBub3QgbmVlZGVkXG4gICAgZnVuY3Rpb24gZ2V0QWN0aW9ucygpIHtcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBldmVudHMgdG8gYmluZC4gSUUxMSBpbXBsZW1lbnRzIHBvaW50ZXJFdmVudHMgd2l0aG91dFxuICAgICAgICAvLyBhIHByZWZpeCwgd2hpY2ggYnJlYWtzIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgSUUxMCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgICAgICAgICAgIG1vdmU6IFwicG9pbnRlcm1vdmVcIixcbiAgICAgICAgICAgICAgICAgIGVuZDogXCJwb2ludGVydXBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZFxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcIk1TUG9pbnRlckRvd25cIixcbiAgICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIk1TUG9pbnRlck1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IFwiTVNQb2ludGVyVXBcIlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcIm1vdXNlZG93biB0b3VjaHN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgbW92ZTogXCJtb3VzZW1vdmUgdG91Y2htb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZW5kOiBcIm1vdXNldXAgdG91Y2hlbmRcIlxuICAgICAgICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9FdmVudExpc3RlbmVyT3B0aW9ucy9ibG9iL2doLXBhZ2VzL2V4cGxhaW5lci5tZFxuICAgIC8vIElzc3VlICM3ODVcbiAgICBmdW5jdGlvbiBnZXRTdXBwb3J0c1Bhc3NpdmUoKSB7XG4gICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIFwicGFzc2l2ZVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwsIG9wdHMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5DU1MgJiYgQ1NTLnN1cHBvcnRzICYmIENTUy5zdXBwb3J0cyhcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIik7XG4gICAgfVxuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIFJhbmdlIENhbGN1bGF0aW9uXG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIHNpemUgb2YgYSBzdWItcmFuZ2UgaW4gcmVsYXRpb24gdG8gYSBmdWxsIHJhbmdlLlxuICAgIGZ1bmN0aW9uIHN1YlJhbmdlUmF0aW8ocGEsIHBiKSB7XG4gICAgICAgIHJldHVybiAxMDAgLyAocGIgLSBwYSk7XG4gICAgfVxuXG4gICAgLy8gKHBlcmNlbnRhZ2UpIEhvdyBtYW55IHBlcmNlbnQgaXMgdGhpcyB2YWx1ZSBvZiB0aGlzIHJhbmdlP1xuICAgIGZ1bmN0aW9uIGZyb21QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICogMTAwKSAvIChyYW5nZVsxXSAtIHJhbmdlWzBdKTtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgV2hlcmUgaXMgdGhpcyB2YWx1ZSBvbiB0aGlzIHJhbmdlP1xuICAgIGZ1bmN0aW9uIHRvUGVyY2VudGFnZShyYW5nZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZyb21QZXJjZW50YWdlKHJhbmdlLCByYW5nZVswXSA8IDAgPyB2YWx1ZSArIE1hdGguYWJzKHJhbmdlWzBdKSA6IHZhbHVlIC0gcmFuZ2VbMF0pO1xuICAgIH1cblxuICAgIC8vICh2YWx1ZSkgSG93IG11Y2ggaXMgdGhpcyBwZXJjZW50YWdlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gaXNQZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICogKHJhbmdlWzFdIC0gcmFuZ2VbMF0pKSAvIDEwMCArIHJhbmdlWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEoodmFsdWUsIGFycikge1xuICAgICAgICB2YXIgaiA9IDE7XG5cbiAgICAgICAgd2hpbGUgKHZhbHVlID49IGFycltqXSkge1xuICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGo7XG4gICAgfVxuXG4gICAgLy8gKHBlcmNlbnRhZ2UpIElucHV0IGEgdmFsdWUsIGZpbmQgd2hlcmUsIG9uIGEgc2NhbGUgb2YgMC0xMDAsIGl0IGFwcGxpZXMuXG4gICAgZnVuY3Rpb24gdG9TdGVwcGluZyh4VmFsLCB4UGN0LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPj0geFZhbC5zbGljZSgtMSlbMF0pIHtcbiAgICAgICAgICAgIHJldHVybiAxMDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHhWYWwpO1xuICAgICAgICB2YXIgdmEgPSB4VmFsW2ogLSAxXTtcbiAgICAgICAgdmFyIHZiID0geFZhbFtqXTtcbiAgICAgICAgdmFyIHBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBwYiA9IHhQY3Rbal07XG5cbiAgICAgICAgcmV0dXJuIHBhICsgdG9QZXJjZW50YWdlKFt2YSwgdmJdLCB2YWx1ZSkgLyBzdWJSYW5nZVJhdGlvKHBhLCBwYik7XG4gICAgfVxuXG4gICAgLy8gKHZhbHVlKSBJbnB1dCBhIHBlcmNlbnRhZ2UsIGZpbmQgd2hlcmUgaXQgaXMgb24gdGhlIHNwZWNpZmllZCByYW5nZS5cbiAgICBmdW5jdGlvbiBmcm9tU3RlcHBpbmcoeFZhbCwgeFBjdCwgdmFsdWUpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gcmFuZ2UgZ3JvdXAgdGhhdCBmaXRzIDEwMFxuICAgICAgICBpZiAodmFsdWUgPj0gMTAwKSB7XG4gICAgICAgICAgICByZXR1cm4geFZhbC5zbGljZSgtMSlbMF07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHhQY3QpO1xuICAgICAgICB2YXIgdmEgPSB4VmFsW2ogLSAxXTtcbiAgICAgICAgdmFyIHZiID0geFZhbFtqXTtcbiAgICAgICAgdmFyIHBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBwYiA9IHhQY3Rbal07XG5cbiAgICAgICAgcmV0dXJuIGlzUGVyY2VudGFnZShbdmEsIHZiXSwgKHZhbHVlIC0gcGEpICogc3ViUmFuZ2VSYXRpbyhwYSwgcGIpKTtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgR2V0IHRoZSBzdGVwIHRoYXQgYXBwbGllcyBhdCBhIGNlcnRhaW4gdmFsdWUuXG4gICAgZnVuY3Rpb24gZ2V0U3RlcCh4UGN0LCB4U3RlcHMsIHNuYXAsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHhQY3QpO1xuICAgICAgICB2YXIgYSA9IHhQY3RbaiAtIDFdO1xuICAgICAgICB2YXIgYiA9IHhQY3Rbal07XG5cbiAgICAgICAgLy8gSWYgJ3NuYXAnIGlzIHNldCwgc3RlcHMgYXJlIHVzZWQgYXMgZml4ZWQgcG9pbnRzIG9uIHRoZSBzbGlkZXIuXG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IHBvc2l0aW9uLCBhIG9yIGIuXG4gICAgICAgICAgICBpZiAodmFsdWUgLSBhID4gKGIgLSBhKSAvIDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXhTdGVwc1tqIC0gMV0pIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB4UGN0W2ogLSAxXSArIGNsb3Nlc3QodmFsdWUgLSB4UGN0W2ogLSAxXSwgeFN0ZXBzW2ogLSAxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRW50cnlQb2ludChpbmRleCwgdmFsdWUsIHRoYXQpIHtcbiAgICAgICAgdmFyIHBlcmNlbnRhZ2U7XG5cbiAgICAgICAgLy8gV3JhcCBudW1lcmljYWwgaW5wdXQgaW4gYW4gYXJyYXkuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3ZhbHVlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlamVjdCBhbnkgaW52YWxpZCBpbnB1dCwgYnkgdGVzdGluZyB3aGV0aGVyIHZhbHVlIGlzIGFuIGFycmF5LlxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgY29udGFpbnMgaW52YWxpZCB2YWx1ZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3ZlcnQgbWluL21heCBzeW50YXggdG8gMCBhbmQgMTAwLlxuICAgICAgICBpZiAoaW5kZXggPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gMTAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVyY2VudGFnZSA9IHBhcnNlRmxvYXQoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGNvcnJlY3QgaW5wdXQuXG4gICAgICAgIGlmICghaXNOdW1lcmljKHBlcmNlbnRhZ2UpIHx8ICFpc051bWVyaWModmFsdWVbMF0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgdmFsdWUgaXNuJ3QgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB2YWx1ZXMuXG4gICAgICAgIHRoYXQueFBjdC5wdXNoKHBlcmNlbnRhZ2UpO1xuICAgICAgICB0aGF0LnhWYWwucHVzaCh2YWx1ZVswXSk7XG5cbiAgICAgICAgLy8gTmFOIHdpbGwgZXZhbHVhdGUgdG8gZmFsc2UgdG9vLCBidXQgdG8ga2VlcFxuICAgICAgICAvLyBsb2dnaW5nIGNsZWFyLCBzZXQgc3RlcCBleHBsaWNpdGx5LiBNYWtlIHN1cmVcbiAgICAgICAgLy8gbm90IHRvIG92ZXJyaWRlIHRoZSAnc3RlcCcgc2V0dGluZyB3aXRoIGZhbHNlLlxuICAgICAgICBpZiAoIXBlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWVbMV0pKSB7XG4gICAgICAgICAgICAgICAgdGhhdC54U3RlcHNbMF0gPSB2YWx1ZVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoYXQueFN0ZXBzLnB1c2goaXNOYU4odmFsdWVbMV0pID8gZmFsc2UgOiB2YWx1ZVsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0LnhIaWdoZXN0Q29tcGxldGVTdGVwLnB1c2goMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RlcFBvaW50KGksIG4sIHRoYXQpIHtcbiAgICAgICAgLy8gSWdub3JlICdmYWxzZScgc3RlcHBpbmcuXG4gICAgICAgIGlmICghbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RlcCBvdmVyIHplcm8tbGVuZ3RoIHJhbmdlcyAoIzk0OCk7XG4gICAgICAgIGlmICh0aGF0LnhWYWxbaV0gPT09IHRoYXQueFZhbFtpICsgMV0pIHtcbiAgICAgICAgICAgIHRoYXQueFN0ZXBzW2ldID0gdGhhdC54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHRoYXQueFZhbFtpXTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmFjdG9yIHRvIHJhbmdlIHJhdGlvXG4gICAgICAgIHRoYXQueFN0ZXBzW2ldID1cbiAgICAgICAgICAgIGZyb21QZXJjZW50YWdlKFt0aGF0LnhWYWxbaV0sIHRoYXQueFZhbFtpICsgMV1dLCBuKSAvIHN1YlJhbmdlUmF0aW8odGhhdC54UGN0W2ldLCB0aGF0LnhQY3RbaSArIDFdKTtcblxuICAgICAgICB2YXIgdG90YWxTdGVwcyA9ICh0aGF0LnhWYWxbaSArIDFdIC0gdGhhdC54VmFsW2ldKSAvIHRoYXQueE51bVN0ZXBzW2ldO1xuICAgICAgICB2YXIgaGlnaGVzdFN0ZXAgPSBNYXRoLmNlaWwoTnVtYmVyKHRvdGFsU3RlcHMudG9GaXhlZCgzKSkgLSAxKTtcbiAgICAgICAgdmFyIHN0ZXAgPSB0aGF0LnhWYWxbaV0gKyB0aGF0LnhOdW1TdGVwc1tpXSAqIGhpZ2hlc3RTdGVwO1xuXG4gICAgICAgIHRoYXQueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaV0gPSBzdGVwO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBTcGVjdHJ1bVxuXG4gICAgZnVuY3Rpb24gU3BlY3RydW0oZW50cnksIHNuYXAsIHNpbmdsZVN0ZXApIHtcbiAgICAgICAgdGhpcy54UGN0ID0gW107XG4gICAgICAgIHRoaXMueFZhbCA9IFtdO1xuICAgICAgICB0aGlzLnhTdGVwcyA9IFtzaW5nbGVTdGVwIHx8IGZhbHNlXTtcbiAgICAgICAgdGhpcy54TnVtU3RlcHMgPSBbZmFsc2VdO1xuICAgICAgICB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwID0gW107XG5cbiAgICAgICAgdGhpcy5zbmFwID0gc25hcDtcblxuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIHZhciBvcmRlcmVkID0gW107IC8vIFswLCAnbWluJ10sIFsxLCAnNTAlJ10sIFsyLCAnbWF4J11cblxuICAgICAgICAvLyBNYXAgdGhlIG9iamVjdCBrZXlzIHRvIGFuIGFycmF5LlxuICAgICAgICBmb3IgKGluZGV4IGluIGVudHJ5KSB7XG4gICAgICAgICAgICBpZiAoZW50cnkuaGFzT3duUHJvcGVydHkoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgb3JkZXJlZC5wdXNoKFtlbnRyeVtpbmRleF0sIGluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb3J0IGFsbCBlbnRyaWVzIGJ5IHZhbHVlIChudW1lcmljIHNvcnQpLlxuICAgICAgICBpZiAob3JkZXJlZC5sZW5ndGggJiYgdHlwZW9mIG9yZGVyZWRbMF1bMF0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIG9yZGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF1bMF0gLSBiWzBdWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmRlcmVkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCBhbGwgZW50cmllcyB0byBzdWJyYW5nZXMuXG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG9yZGVyZWQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBoYW5kbGVFbnRyeVBvaW50KG9yZGVyZWRbaW5kZXhdWzFdLCBvcmRlcmVkW2luZGV4XVswXSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgYWN0dWFsIHN0ZXAgdmFsdWVzLlxuICAgICAgICAvLyB4U3RlcHMgaXMgc29ydGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHhQY3QgYW5kIHhWYWwuXG4gICAgICAgIHRoaXMueE51bVN0ZXBzID0gdGhpcy54U3RlcHMuc2xpY2UoMCk7XG5cbiAgICAgICAgLy8gQ29udmVydCBhbGwgbnVtZXJpYyBzdGVwcyB0byB0aGUgcGVyY2VudGFnZSBvZiB0aGUgc3VicmFuZ2UgdGhleSByZXByZXNlbnQuXG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRoaXMueE51bVN0ZXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgaGFuZGxlU3RlcFBvaW50KGluZGV4LCB0aGlzLnhOdW1TdGVwc1tpbmRleF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldE1hcmdpbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBzdGVwID0gdGhpcy54TnVtU3RlcHNbMF07XG5cbiAgICAgICAgaWYgKHN0ZXAgJiYgKHZhbHVlIC8gc3RlcCkgJSAxICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdsaW1pdCcsICdtYXJnaW4nIGFuZCAncGFkZGluZycgbXVzdCBiZSBkaXZpc2libGUgYnkgc3RlcC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy54UGN0Lmxlbmd0aCA9PT0gMiA/IGZyb21QZXJjZW50YWdlKHRoaXMueFZhbCwgdmFsdWUpIDogZmFsc2U7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS50b1N0ZXBwaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0b1N0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZnJvbVN0ZXBwaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZyb21TdGVwcGluZyh0aGlzLnhWYWwsIHRoaXMueFBjdCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0U3RlcCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0U3RlcCh0aGlzLnhQY3QsIHRoaXMueFN0ZXBzLCB0aGlzLnNuYXAsIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXREZWZhdWx0U3RlcCA9IGZ1bmN0aW9uKHZhbHVlLCBpc0Rvd24sIHNpemUpIHtcbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB0aGlzLnhQY3QpO1xuXG4gICAgICAgIC8vIFdoZW4gYXQgdGhlIHRvcCBvciBzdGVwcGluZyBkb3duLCBsb29rIGF0IHRoZSBwcmV2aW91cyBzdWItcmFuZ2VcbiAgICAgICAgaWYgKHZhbHVlID09PSAxMDAgfHwgKGlzRG93biAmJiB2YWx1ZSA9PT0gdGhpcy54UGN0W2ogLSAxXSkpIHtcbiAgICAgICAgICAgIGogPSBNYXRoLm1heChqIC0gMSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHRoaXMueFZhbFtqXSAtIHRoaXMueFZhbFtqIC0gMV0pIC8gc2l6ZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldE5lYXJieVN0ZXBzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB0aGlzLnhQY3QpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGVwQmVmb3JlOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2ogLSAyXSxcbiAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqIC0gMl0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDJdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpc1N0ZXA6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbaiAtIDFdLFxuICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAxXSxcbiAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqIC0gMV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGVwQWZ0ZXI6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbal0sXG4gICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbal0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbal1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmNvdW50U3RlcERlY2ltYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGVwRGVjaW1hbHMgPSB0aGlzLnhOdW1TdGVwcy5tYXAoY291bnREZWNpbWFscyk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBzdGVwRGVjaW1hbHMpO1xuICAgIH07XG5cbiAgICAvLyBPdXRzaWRlIHRlc3RpbmdcbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0ZXAodGhpcy50b1N0ZXBwaW5nKHZhbHVlKSk7XG4gICAgfTtcblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBPcHRpb25zXG5cbiAgICAvKlx0RXZlcnkgaW5wdXQgb3B0aW9uIGlzIHRlc3RlZCBhbmQgcGFyc2VkLiBUaGlzJ2xsIHByZXZlbnRcbiAgICAgICAgZW5kbGVzcyB2YWxpZGF0aW9uIGluIGludGVybmFsIG1ldGhvZHMuIFRoZXNlIHRlc3RzIGFyZVxuICAgICAgICBzdHJ1Y3R1cmVkIHdpdGggYW4gaXRlbSBmb3IgZXZlcnkgb3B0aW9uIGF2YWlsYWJsZS4gQW5cbiAgICAgICAgb3B0aW9uIGNhbiBiZSBtYXJrZWQgYXMgcmVxdWlyZWQgYnkgc2V0dGluZyB0aGUgJ3InIGZsYWcuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAgICAgICAgLSBUaGUgcHJvdmlkZWQgdmFsdWUgZm9yIHRoZSBvcHRpb247XG4gICAgICAgICAgICAtIEEgcmVmZXJlbmNlIHRvIHRoZSBvcHRpb25zIG9iamVjdDtcbiAgICAgICAgICAgIC0gVGhlIG5hbWUgZm9yIHRoZSBvcHRpb247XG5cbiAgICAgICAgVGhlIHRlc3RpbmcgZnVuY3Rpb24gcmV0dXJucyBmYWxzZSB3aGVuIGFuIGVycm9yIGlzIGRldGVjdGVkLFxuICAgICAgICBvciB0cnVlIHdoZW4gZXZlcnl0aGluZyBpcyBPSy4gSXQgY2FuIGFsc28gbW9kaWZ5IHRoZSBvcHRpb25cbiAgICAgICAgb2JqZWN0LCB0byBtYWtlIHN1cmUgYWxsIHZhbHVlcyBjYW4gYmUgY29ycmVjdGx5IGxvb3BlZCBlbHNld2hlcmUuICovXG5cbiAgICB2YXIgZGVmYXVsdEZvcm1hdHRlciA9IHtcbiAgICAgICAgdG86IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZS50b0ZpeGVkKDIpO1xuICAgICAgICB9LFxuICAgICAgICBmcm9tOiBOdW1iZXJcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZW50cnkpIHtcbiAgICAgICAgLy8gQW55IG9iamVjdCB3aXRoIGEgdG8gYW5kIGZyb20gbWV0aG9kIGlzIHN1cHBvcnRlZC5cbiAgICAgICAgaWYgKGlzVmFsaWRGb3JtYXR0ZXIoZW50cnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Zvcm1hdCcgcmVxdWlyZXMgJ3RvJyBhbmQgJ2Zyb20nIG1ldGhvZHMuXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTdGVwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzdGVwJyBpcyBub3QgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgc3RlcCBvcHRpb24gY2FuIHN0aWxsIGJlIHVzZWQgdG8gc2V0IHN0ZXBwaW5nXG4gICAgICAgIC8vIGZvciBsaW5lYXIgc2xpZGVycy4gT3ZlcndyaXR0ZW4gaWYgc2V0IGluICdyYW5nZScuXG4gICAgICAgIHBhcnNlZC5zaW5nbGVTdGVwID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFJhbmdlKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gRmlsdGVyIGluY29ycmVjdCBpbnB1dC5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIiB8fCBBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnIGlzIG5vdCBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2F0Y2ggbWlzc2luZyBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IHVuZGVmaW5lZCB8fCBlbnRyeS5tYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBNaXNzaW5nICdtaW4nIG9yICdtYXgnIGluICdyYW5nZScuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2F0Y2ggZXF1YWwgc3RhcnQgb3IgZW5kLlxuICAgICAgICBpZiAoZW50cnkubWluID09PSBlbnRyeS5tYXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyAnbWluJyBhbmQgJ21heCcgY2Fubm90IGJlIGVxdWFsLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5zcGVjdHJ1bSA9IG5ldyBTcGVjdHJ1bShlbnRyeSwgcGFyc2VkLnNuYXAsIHBhcnNlZC5zaW5nbGVTdGVwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0U3RhcnQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBlbnRyeSA9IGFzQXJyYXkoZW50cnkpO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlIGlucHV0LiBWYWx1ZXMgYXJlbid0IHRlc3RlZCwgYXMgdGhlIHB1YmxpYyAudmFsIG1ldGhvZFxuICAgICAgICAvLyB3aWxsIGFsd2F5cyBwcm92aWRlIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnc3RhcnQnIG9wdGlvbiBpcyBpbmNvcnJlY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgdGhlIG51bWJlciBvZiBoYW5kbGVzLlxuICAgICAgICBwYXJzZWQuaGFuZGxlcyA9IGVudHJ5Lmxlbmd0aDtcblxuICAgICAgICAvLyBXaGVuIHRoZSBzbGlkZXIgaXMgaW5pdGlhbGl6ZWQsIHRoZSAudmFsIG1ldGhvZCB3aWxsXG4gICAgICAgIC8vIGJlIGNhbGxlZCB3aXRoIHRoZSBzdGFydCBvcHRpb25zLlxuICAgICAgICBwYXJzZWQuc3RhcnQgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0U25hcChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuc25hcCA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzbmFwJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFuaW1hdGUocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBFbmZvcmNlIDEwMCUgc3RlcHBpbmcgd2l0aGluIHN1YnJhbmdlcy5cbiAgICAgICAgcGFyc2VkLmFuaW1hdGUgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYW5pbWF0ZScgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RBbmltYXRpb25EdXJhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5hbmltYXRpb25EdXJhdGlvbiA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2FuaW1hdGlvbkR1cmF0aW9uJyBvcHRpb24gbXVzdCBiZSBhIG51bWJlci5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Q29ubmVjdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHZhciBjb25uZWN0ID0gW2ZhbHNlXTtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgLy8gTWFwIGxlZ2FjeSBvcHRpb25zXG4gICAgICAgIGlmIChlbnRyeSA9PT0gXCJsb3dlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFt0cnVlLCBmYWxzZV07XG4gICAgICAgIH0gZWxzZSBpZiAoZW50cnkgPT09IFwidXBwZXJcIikge1xuICAgICAgICAgICAgZW50cnkgPSBbZmFsc2UsIHRydWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGJvb2xlYW4gb3B0aW9uc1xuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbm5lY3QucHVzaChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWplY3QgaW52YWxpZCBpbnB1dFxuICAgICAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCB8fCBlbnRyeS5sZW5ndGggIT09IHBhcnNlZC5oYW5kbGVzICsgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY29ubmVjdCcgb3B0aW9uIGRvZXNuJ3QgbWF0Y2ggaGFuZGxlIGNvdW50LlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3QgPSBlbnRyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5jb25uZWN0ID0gY29ubmVjdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0T3JpZW50YXRpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBTZXQgb3JpZW50YXRpb24gdG8gYW4gYSBudW1lcmljYWwgdmFsdWUgZm9yIGVhc3lcbiAgICAgICAgLy8gYXJyYXkgc2VsZWN0aW9uLlxuICAgICAgICBzd2l0Y2ggKGVudHJ5KSB7XG4gICAgICAgICAgICBjYXNlIFwiaG9yaXpvbnRhbFwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5vcnQgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZlcnRpY2FsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ29yaWVudGF0aW9uJyBvcHRpb24gaXMgaW52YWxpZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0TWFyZ2luKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdtYXJnaW4nIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXNzdWUgIzU4MlxuICAgICAgICBpZiAoZW50cnkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5tYXJnaW4gPSBwYXJzZWQuc3BlY3RydW0uZ2V0TWFyZ2luKGVudHJ5KTtcblxuICAgICAgICBpZiAoIXBhcnNlZC5tYXJnaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ21hcmdpbicgb3B0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGxpbmVhciBzbGlkZXJzLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RMaW1pdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnbGltaXQnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmxpbWl0ID0gcGFyc2VkLnNwZWN0cnVtLmdldE1hcmdpbihlbnRyeSk7XG5cbiAgICAgICAgaWYgKCFwYXJzZWQubGltaXQgfHwgcGFyc2VkLmhhbmRsZXMgPCAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJub1VpU2xpZGVyIChcIiArXG4gICAgICAgICAgICAgICAgICAgIFZFUlNJT04gK1xuICAgICAgICAgICAgICAgICAgICBcIik6ICdsaW1pdCcgb3B0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGxpbmVhciBzbGlkZXJzIHdpdGggMiBvciBtb3JlIGhhbmRsZXMuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0UGFkZGluZyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSAmJiAhQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkgJiYgIShlbnRyeS5sZW5ndGggPT09IDIgfHwgaXNOdW1lcmljKGVudHJ5WzBdKSB8fCBpc051bWVyaWMoZW50cnlbMV0pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgbnVtZXJpYyBvciBhcnJheSBvZiBleGFjdGx5IDIgbnVtYmVycy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgZW50cnkgPSBbZW50cnksIGVudHJ5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdnZXRNYXJnaW4nIHJldHVybnMgZmFsc2UgZm9yIGludmFsaWQgdmFsdWVzLlxuICAgICAgICBwYXJzZWQucGFkZGluZyA9IFtwYXJzZWQuc3BlY3RydW0uZ2V0TWFyZ2luKGVudHJ5WzBdKSwgcGFyc2VkLnNwZWN0cnVtLmdldE1hcmdpbihlbnRyeVsxXSldO1xuXG4gICAgICAgIGlmIChwYXJzZWQucGFkZGluZ1swXSA9PT0gZmFsc2UgfHwgcGFyc2VkLnBhZGRpbmdbMV0gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdIDwgMCB8fCBwYXJzZWQucGFkZGluZ1sxXSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyKHMpLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZWQucGFkZGluZ1swXSArIHBhcnNlZC5wYWRkaW5nWzFdID4gMTAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBub3QgZXhjZWVkIDEwMCUgb2YgdGhlIHJhbmdlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3REaXJlY3Rpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBTZXQgZGlyZWN0aW9uIGFzIGEgbnVtZXJpY2FsIHZhbHVlIGZvciBlYXN5IHBhcnNpbmcuXG4gICAgICAgIC8vIEludmVydCBjb25uZWN0aW9uIGZvciBSVEwgc2xpZGVycywgc28gdGhhdCB0aGUgcHJvcGVyXG4gICAgICAgIC8vIGhhbmRsZXMgZ2V0IHRoZSBjb25uZWN0L2JhY2tncm91bmQgY2xhc3Nlcy5cbiAgICAgICAgc3dpdGNoIChlbnRyeSkge1xuICAgICAgICAgICAgY2FzZSBcImx0clwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5kaXIgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJ0bFwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5kaXIgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdkaXJlY3Rpb24nIG9wdGlvbiB3YXMgbm90IHJlY29nbml6ZWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEJlaGF2aW91cihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgaW5wdXQgaXMgYSBzdHJpbmcuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2JlaGF2aW91cicgbXVzdCBiZSBhIHN0cmluZyBjb250YWluaW5nIG9wdGlvbnMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHN0cmluZyBjb250YWlucyBhbnkga2V5d29yZHMuXG4gICAgICAgIC8vIE5vbmUgYXJlIHJlcXVpcmVkLlxuICAgICAgICB2YXIgdGFwID0gZW50cnkuaW5kZXhPZihcInRhcFwiKSA+PSAwO1xuICAgICAgICB2YXIgZHJhZyA9IGVudHJ5LmluZGV4T2YoXCJkcmFnXCIpID49IDA7XG4gICAgICAgIHZhciBmaXhlZCA9IGVudHJ5LmluZGV4T2YoXCJmaXhlZFwiKSA+PSAwO1xuICAgICAgICB2YXIgc25hcCA9IGVudHJ5LmluZGV4T2YoXCJzbmFwXCIpID49IDA7XG4gICAgICAgIHZhciBob3ZlciA9IGVudHJ5LmluZGV4T2YoXCJob3ZlclwiKSA+PSAwO1xuICAgICAgICB2YXIgdW5jb25zdHJhaW5lZCA9IGVudHJ5LmluZGV4T2YoXCJ1bmNvbnN0cmFpbmVkXCIpID49IDA7XG5cbiAgICAgICAgaWYgKGZpeGVkKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkLmhhbmRsZXMgIT09IDIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdmaXhlZCcgYmVoYXZpb3VyIG11c3QgYmUgdXNlZCB3aXRoIDIgaGFuZGxlc1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIG1hcmdpbiB0byBlbmZvcmNlIGZpeGVkIHN0YXRlXG4gICAgICAgICAgICB0ZXN0TWFyZ2luKHBhcnNlZCwgcGFyc2VkLnN0YXJ0WzFdIC0gcGFyc2VkLnN0YXJ0WzBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmNvbnN0cmFpbmVkICYmIChwYXJzZWQubWFyZ2luIHx8IHBhcnNlZC5saW1pdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3VuY29uc3RyYWluZWQnIGJlaGF2aW91ciBjYW5ub3QgYmUgdXNlZCB3aXRoIG1hcmdpbiBvciBsaW1pdFwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmV2ZW50cyA9IHtcbiAgICAgICAgICAgIHRhcDogdGFwIHx8IHNuYXAsXG4gICAgICAgICAgICBkcmFnOiBkcmFnLFxuICAgICAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICAgICAgc25hcDogc25hcCxcbiAgICAgICAgICAgIGhvdmVyOiBob3ZlcixcbiAgICAgICAgICAgIHVuY29uc3RyYWluZWQ6IHVuY29uc3RyYWluZWRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0VG9vbHRpcHMocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNlZC5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMucHVzaCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcyA9IGFzQXJyYXkoZW50cnkpO1xuXG4gICAgICAgICAgICBpZiAocGFyc2VkLnRvb2x0aXBzLmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IG11c3QgcGFzcyBhIGZvcm1hdHRlciBmb3IgYWxsIGhhbmRsZXMuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMuZm9yRWFjaChmdW5jdGlvbihmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwiYm9vbGVhblwiICYmXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZm9ybWF0dGVyICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmb3JtYXR0ZXIudG8gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndG9vbHRpcHMnIG11c3QgYmUgcGFzc2VkIGEgZm9ybWF0dGVyIG9yICdmYWxzZScuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFyaWFGb3JtYXQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBwYXJzZWQuYXJpYUZvcm1hdCA9IGVudHJ5O1xuICAgICAgICB2YWxpZGF0ZUZvcm1hdChlbnRyeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5mb3JtYXQgPSBlbnRyeTtcbiAgICAgICAgdmFsaWRhdGVGb3JtYXQoZW50cnkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZFN1cHBvcnQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBwYXJzZWQua2V5Ym9hcmRTdXBwb3J0ID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2tleWJvYXJkU3VwcG9ydCcgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3REb2N1bWVudEVsZW1lbnQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBUaGlzIGlzIGFuIGFkdmFuY2VkIG9wdGlvbi4gUGFzc2VkIHZhbHVlcyBhcmUgdXNlZCB3aXRob3V0IHZhbGlkYXRpb24uXG4gICAgICAgIHBhcnNlZC5kb2N1bWVudEVsZW1lbnQgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzUHJlZml4KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIiAmJiBlbnRyeSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Nzc1ByZWZpeCcgbXVzdCBiZSBhIHN0cmluZyBvciBgZmFsc2VgLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5jc3NQcmVmaXggPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzQ2xhc3NlcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Nzc0NsYXNzZXMnIG11c3QgYmUgYW4gb2JqZWN0LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcGFyc2VkLmNzc1ByZWZpeCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSB7fTtcblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlbnRyeS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzW2tleV0gPSBwYXJzZWQuY3NzUHJlZml4ICsgZW50cnlba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzID0gZW50cnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUZXN0IGFsbCBkZXZlbG9wZXIgc2V0dGluZ3MgYW5kIHBhcnNlIHRvIGFzc3VtcHRpb24tc2FmZSB2YWx1ZXMuXG4gICAgZnVuY3Rpb24gdGVzdE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICAvLyBUbyBwcm92ZSBhIGZpeCBmb3IgIzUzNywgZnJlZXplIG9wdGlvbnMgaGVyZS5cbiAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBpcyBtb2RpZmllZCwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICAgIC8vIE9iamVjdC5mcmVlemUob3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIHBhcnNlZCA9IHtcbiAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgIGxpbWl0OiAwLFxuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgYXJpYUZvcm1hdDogZGVmYXVsdEZvcm1hdHRlcixcbiAgICAgICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdHRlclxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRlc3RzIGFyZSBleGVjdXRlZCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcHJlc2VudGVkIGhlcmUuXG4gICAgICAgIHZhciB0ZXN0cyA9IHtcbiAgICAgICAgICAgIHN0ZXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RTdGVwIH0sXG4gICAgICAgICAgICBzdGFydDogeyByOiB0cnVlLCB0OiB0ZXN0U3RhcnQgfSxcbiAgICAgICAgICAgIGNvbm5lY3Q6IHsgcjogdHJ1ZSwgdDogdGVzdENvbm5lY3QgfSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogeyByOiB0cnVlLCB0OiB0ZXN0RGlyZWN0aW9uIH0sXG4gICAgICAgICAgICBzbmFwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0U25hcCB9LFxuICAgICAgICAgICAgYW5pbWF0ZTogeyByOiBmYWxzZSwgdDogdGVzdEFuaW1hdGUgfSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiB7IHI6IGZhbHNlLCB0OiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24gfSxcbiAgICAgICAgICAgIHJhbmdlOiB7IHI6IHRydWUsIHQ6IHRlc3RSYW5nZSB9LFxuICAgICAgICAgICAgb3JpZW50YXRpb246IHsgcjogZmFsc2UsIHQ6IHRlc3RPcmllbnRhdGlvbiB9LFxuICAgICAgICAgICAgbWFyZ2luOiB7IHI6IGZhbHNlLCB0OiB0ZXN0TWFyZ2luIH0sXG4gICAgICAgICAgICBsaW1pdDogeyByOiBmYWxzZSwgdDogdGVzdExpbWl0IH0sXG4gICAgICAgICAgICBwYWRkaW5nOiB7IHI6IGZhbHNlLCB0OiB0ZXN0UGFkZGluZyB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiB7IHI6IHRydWUsIHQ6IHRlc3RCZWhhdmlvdXIgfSxcbiAgICAgICAgICAgIGFyaWFGb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RBcmlhRm9ybWF0IH0sXG4gICAgICAgICAgICBmb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RGb3JtYXQgfSxcbiAgICAgICAgICAgIHRvb2x0aXBzOiB7IHI6IGZhbHNlLCB0OiB0ZXN0VG9vbHRpcHMgfSxcbiAgICAgICAgICAgIGtleWJvYXJkU3VwcG9ydDogeyByOiB0cnVlLCB0OiB0ZXN0S2V5Ym9hcmRTdXBwb3J0IH0sXG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQ6IHsgcjogZmFsc2UsIHQ6IHRlc3REb2N1bWVudEVsZW1lbnQgfSxcbiAgICAgICAgICAgIGNzc1ByZWZpeDogeyByOiB0cnVlLCB0OiB0ZXN0Q3NzUHJlZml4IH0sXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiB7IHI6IHRydWUsIHQ6IHRlc3RDc3NDbGFzc2VzIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBjb25uZWN0OiBmYWxzZSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJsdHJcIixcbiAgICAgICAgICAgIGJlaGF2aW91cjogXCJ0YXBcIixcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgIGtleWJvYXJkU3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgIGNzc1ByZWZpeDogXCJub1VpLVwiLFxuICAgICAgICAgICAgY3NzQ2xhc3Nlczoge1xuICAgICAgICAgICAgICAgIHRhcmdldDogXCJ0YXJnZXRcIixcbiAgICAgICAgICAgICAgICBiYXNlOiBcImJhc2VcIixcbiAgICAgICAgICAgICAgICBvcmlnaW46IFwib3JpZ2luXCIsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBcImhhbmRsZVwiLFxuICAgICAgICAgICAgICAgIGhhbmRsZUxvd2VyOiBcImhhbmRsZS1sb3dlclwiLFxuICAgICAgICAgICAgICAgIGhhbmRsZVVwcGVyOiBcImhhbmRsZS11cHBlclwiLFxuICAgICAgICAgICAgICAgIHRvdWNoQXJlYTogXCJ0b3VjaC1hcmVhXCIsXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IFwidmVydGljYWxcIixcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcImJhY2tncm91bmRcIixcbiAgICAgICAgICAgICAgICBjb25uZWN0OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICBjb25uZWN0czogXCJjb25uZWN0c1wiLFxuICAgICAgICAgICAgICAgIGx0cjogXCJsdHJcIixcbiAgICAgICAgICAgICAgICBydGw6IFwicnRsXCIsXG4gICAgICAgICAgICAgICAgdGV4dERpcmVjdGlvbkx0cjogXCJ0eHQtZGlyLWx0clwiLFxuICAgICAgICAgICAgICAgIHRleHREaXJlY3Rpb25SdGw6IFwidHh0LWRpci1ydGxcIixcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IFwiZHJhZ2dhYmxlXCIsXG4gICAgICAgICAgICAgICAgZHJhZzogXCJzdGF0ZS1kcmFnXCIsXG4gICAgICAgICAgICAgICAgdGFwOiBcInN0YXRlLXRhcFwiLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogXCJhY3RpdmVcIixcbiAgICAgICAgICAgICAgICB0b29sdGlwOiBcInRvb2x0aXBcIixcbiAgICAgICAgICAgICAgICBwaXBzOiBcInBpcHNcIixcbiAgICAgICAgICAgICAgICBwaXBzSG9yaXpvbnRhbDogXCJwaXBzLWhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICBwaXBzVmVydGljYWw6IFwicGlwcy12ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgICAgIG1hcmtlcjogXCJtYXJrZXJcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJIb3Jpem9udGFsOiBcIm1hcmtlci1ob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgbWFya2VyVmVydGljYWw6IFwibWFya2VyLXZlcnRpY2FsXCIsXG4gICAgICAgICAgICAgICAgbWFya2VyTm9ybWFsOiBcIm1hcmtlci1ub3JtYWxcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJMYXJnZTogXCJtYXJrZXItbGFyZ2VcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJTdWI6IFwibWFya2VyLXN1YlwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVIb3Jpem9udGFsOiBcInZhbHVlLWhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVZlcnRpY2FsOiBcInZhbHVlLXZlcnRpY2FsXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVOb3JtYWw6IFwidmFsdWUtbm9ybWFsXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVMYXJnZTogXCJ2YWx1ZS1sYXJnZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlU3ViOiBcInZhbHVlLXN1YlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQXJpYUZvcm1hdCBkZWZhdWx0cyB0byByZWd1bGFyIGZvcm1hdCwgaWYgYW55LlxuICAgICAgICBpZiAob3B0aW9ucy5mb3JtYXQgJiYgIW9wdGlvbnMuYXJpYUZvcm1hdCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hcmlhRm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdW4gYWxsIG9wdGlvbnMgdGhyb3VnaCBhIHRlc3RpbmcgbWVjaGFuaXNtIHRvIGVuc3VyZSBjb3JyZWN0XG4gICAgICAgIC8vIGlucHV0LiBJdCBzaG91bGQgYmUgbm90ZWQgdGhhdCBvcHRpb25zIG1pZ2h0IGdldCBtb2RpZmllZCB0b1xuICAgICAgICAvLyBiZSBoYW5kbGVkIHByb3Blcmx5LiBFLmcuIHdyYXBwaW5nIGludGVnZXJzIGluIGFycmF5cy5cbiAgICAgICAgT2JqZWN0LmtleXModGVzdHMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIG9wdGlvbiBpc24ndCBzZXQsIGJ1dCBpdCBpcyByZXF1aXJlZCwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICAgICAgICBpZiAoIWlzU2V0KG9wdGlvbnNbbmFtZV0pICYmIGRlZmF1bHRzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdHNbbmFtZV0ucikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdcIiArIG5hbWUgKyBcIicgaXMgcmVxdWlyZWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZXN0c1tuYW1lXS50KHBhcnNlZCwgIWlzU2V0KG9wdGlvbnNbbmFtZV0pID8gZGVmYXVsdHNbbmFtZV0gOiBvcHRpb25zW25hbWVdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRm9yd2FyZCBwaXBzIG9wdGlvbnNcbiAgICAgICAgcGFyc2VkLnBpcHMgPSBvcHRpb25zLnBpcHM7XG5cbiAgICAgICAgLy8gQWxsIHJlY2VudCBicm93c2VycyBhY2NlcHQgdW5wcmVmaXhlZCB0cmFuc2Zvcm0uXG4gICAgICAgIC8vIFdlIG5lZWQgLW1zLSBmb3IgSUU5IGFuZCAtd2Via2l0LSBmb3Igb2xkZXIgQW5kcm9pZDtcbiAgICAgICAgLy8gQXNzdW1lIHVzZSBvZiAtd2Via2l0LSBpZiB1bnByZWZpeGVkIGFuZCAtbXMtIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXRyYW5zZm9ybXMyZFxuICAgICAgICB2YXIgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBtc1ByZWZpeCA9IGQuc3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG5vUHJlZml4ID0gZC5zdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcblxuICAgICAgICBwYXJzZWQudHJhbnNmb3JtUnVsZSA9IG5vUHJlZml4ID8gXCJ0cmFuc2Zvcm1cIiA6IG1zUHJlZml4ID8gXCJtc1RyYW5zZm9ybVwiIDogXCJ3ZWJraXRUcmFuc2Zvcm1cIjtcblxuICAgICAgICAvLyBQaXBzIGRvbid0IG1vdmUsIHNvIHdlIGNhbiBwbGFjZSB0aGVtIHVzaW5nIGxlZnQvdG9wLlxuICAgICAgICB2YXIgc3R5bGVzID0gW1tcImxlZnRcIiwgXCJ0b3BcIl0sIFtcInJpZ2h0XCIsIFwiYm90dG9tXCJdXTtcblxuICAgICAgICBwYXJzZWQuc3R5bGUgPSBzdHlsZXNbcGFyc2VkLmRpcl1bcGFyc2VkLm9ydF07XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgZnVuY3Rpb24gc2NvcGUodGFyZ2V0LCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBnZXRBY3Rpb25zKCk7XG4gICAgICAgIHZhciBzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9IGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCk7XG4gICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSAmJiBnZXRTdXBwb3J0c1Bhc3NpdmUoKTtcblxuICAgICAgICAvLyBBbGwgdmFyaWFibGVzIGxvY2FsIHRvICdzY29wZScgYXJlIHByZWZpeGVkIHdpdGggJ3Njb3BlXydcblxuICAgICAgICAvLyBTbGlkZXIgRE9NIE5vZGVzXG4gICAgICAgIHZhciBzY29wZV9UYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHZhciBzY29wZV9CYXNlO1xuICAgICAgICB2YXIgc2NvcGVfSGFuZGxlcztcbiAgICAgICAgdmFyIHNjb3BlX0Nvbm5lY3RzO1xuICAgICAgICB2YXIgc2NvcGVfUGlwcztcbiAgICAgICAgdmFyIHNjb3BlX1Rvb2x0aXBzO1xuXG4gICAgICAgIC8vIFNsaWRlciBzdGF0ZSB2YWx1ZXNcbiAgICAgICAgdmFyIHNjb3BlX1NwZWN0cnVtID0gb3B0aW9ucy5zcGVjdHJ1bTtcbiAgICAgICAgdmFyIHNjb3BlX1ZhbHVlcyA9IFtdO1xuICAgICAgICB2YXIgc2NvcGVfTG9jYXRpb25zID0gW107XG4gICAgICAgIHZhciBzY29wZV9IYW5kbGVOdW1iZXJzID0gW107XG4gICAgICAgIHZhciBzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgPSAwO1xuICAgICAgICB2YXIgc2NvcGVfRXZlbnRzID0ge307XG5cbiAgICAgICAgLy8gRXhwb3NlZCBBUElcbiAgICAgICAgdmFyIHNjb3BlX1NlbGY7XG5cbiAgICAgICAgLy8gRG9jdW1lbnQgTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Eb2N1bWVudEVsZW1lbnQgPSBvcHRpb25zLmRvY3VtZW50RWxlbWVudCB8fCBzY29wZV9Eb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Cb2R5ID0gc2NvcGVfRG9jdW1lbnQuYm9keTtcblxuICAgICAgICAvLyBQaXBzIGNvbnN0YW50c1xuICAgICAgICB2YXIgUElQU19OT05FID0gLTE7XG4gICAgICAgIHZhciBQSVBTX05PX1ZBTFVFID0gMDtcbiAgICAgICAgdmFyIFBJUFNfTEFSR0VfVkFMVUUgPSAxO1xuICAgICAgICB2YXIgUElQU19TTUFMTF9WQUxVRSA9IDI7XG5cbiAgICAgICAgLy8gRm9yIGhvcml6b250YWwgc2xpZGVycyBpbiBzdGFuZGFyZCBsdHIgZG9jdW1lbnRzLFxuICAgICAgICAvLyBtYWtlIC5ub1VpLW9yaWdpbiBvdmVyZmxvdyB0byB0aGUgbGVmdCBzbyB0aGUgZG9jdW1lbnQgZG9lc24ndCBzY3JvbGwuXG4gICAgICAgIHZhciBzY29wZV9EaXJPZmZzZXQgPSBzY29wZV9Eb2N1bWVudC5kaXIgPT09IFwicnRsXCIgfHwgb3B0aW9ucy5vcnQgPT09IDEgPyAwIDogMTAwO1xuXG4gICAgICAgIC8vIENyZWF0ZXMgYSBub2RlLCBhZGRzIGl0IHRvIHRhcmdldCwgcmV0dXJucyB0aGUgbmV3IG5vZGUuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE5vZGVUbyhhZGRUYXJnZXQsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdmFyIGRpdiA9IHNjb3BlX0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhkaXYsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZFRhcmdldC5hcHBlbmRDaGlsZChkaXYpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZW5kIGEgb3JpZ2luIHRvIHRoZSBiYXNlXG4gICAgICAgIGZ1bmN0aW9uIGFkZE9yaWdpbihiYXNlLCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvcmlnaW4gPSBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLm9yaWdpbik7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gYWRkTm9kZVRvKG9yaWdpbiwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZSk7XG5cbiAgICAgICAgICAgIGFkZE5vZGVUbyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b3VjaEFyZWEpO1xuXG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1oYW5kbGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMua2V5Ym9hcmRTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleFxuICAgICAgICAgICAgICAgIC8vIDAgPSBmb2N1c2FibGUgYW5kIHJlYWNoYWJsZVxuICAgICAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgaGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudEtleWRvd24oZXZlbnQsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwic2xpZGVyXCIpO1xuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcImFyaWEtb3JpZW50YXRpb25cIiwgb3B0aW9ucy5vcnQgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIik7XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGVMb3dlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZU51bWJlciA9PT0gb3B0aW9ucy5oYW5kbGVzIC0gMSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZVVwcGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc2VydCBub2RlcyBmb3IgY29ubmVjdCBlbGVtZW50c1xuICAgICAgICBmdW5jdGlvbiBhZGRDb25uZWN0KGJhc2UsIGFkZCkge1xuICAgICAgICAgICAgaWYgKCFhZGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGhhbmRsZXMgdG8gdGhlIHNsaWRlciBiYXNlLlxuICAgICAgICBmdW5jdGlvbiBhZGRFbGVtZW50cyhjb25uZWN0T3B0aW9ucywgYmFzZSkge1xuICAgICAgICAgICAgdmFyIGNvbm5lY3RCYXNlID0gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5jb25uZWN0cyk7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMgPSBbXTtcbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzID0gW107XG5cbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLnB1c2goYWRkQ29ubmVjdChjb25uZWN0QmFzZSwgY29ubmVjdE9wdGlvbnNbMF0pKTtcblxuICAgICAgICAgICAgLy8gWzo6OjpPPT09PU89PT09Tz09PT1dXG4gICAgICAgICAgICAvLyBjb25uZWN0T3B0aW9ucyA9IFswLCAxLCAxLCAxXVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBhIGxpc3Qgb2YgYWxsIGFkZGVkIGhhbmRsZXMuXG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5wdXNoKGFkZE9yaWdpbihiYXNlLCBpKSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVyc1tpXSA9IGk7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1tpICsgMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgYSBzaW5nbGUgc2xpZGVyLlxuICAgICAgICBmdW5jdGlvbiBhZGRTbGlkZXIoYWRkVGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBBcHBseSBjbGFzc2VzIGFuZCBkYXRhIHRvIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXJnZXQpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5sdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ydGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vcnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ob3Jpem9udGFsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudmVydGljYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGV4dERpcmVjdGlvbiA9IGdldENvbXB1dGVkU3R5bGUoYWRkVGFyZ2V0KS5kaXJlY3Rpb247XG5cbiAgICAgICAgICAgIGlmICh0ZXh0RGlyZWN0aW9uID09PSBcInJ0bFwiKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvblJ0bCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRleHREaXJlY3Rpb25MdHIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmJhc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkVG9vbHRpcChoYW5kbGUsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oaGFuZGxlLmZpcnN0Q2hpbGQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b29sdGlwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzU2xpZGVyRGlzYWJsZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfVGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgc2xpZGVyIGRyYWdnaW5nIGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgZnVuY3Rpb24gaXNIYW5kbGVEaXNhYmxlZChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlT3JpZ2luLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVG9vbHRpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfVG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudChcInVwZGF0ZS50b29sdGlwc1wiKTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgdG9vbHRpcHMgb3B0aW9uIGlzIGEgc2hvcnRoYW5kIGZvciB1c2luZyB0aGUgJ3VwZGF0ZScgZXZlbnQuXG4gICAgICAgIGZ1bmN0aW9uIHRvb2x0aXBzKCkge1xuICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcblxuICAgICAgICAgICAgLy8gVG9vbHRpcHMgYXJlIGFkZGVkIHdpdGggb3B0aW9ucy50b29sdGlwcyBpbiBvcmlnaW5hbCBvcmRlci5cbiAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzID0gc2NvcGVfSGFuZGxlcy5tYXAoYWRkVG9vbHRpcCk7XG5cbiAgICAgICAgICAgIGJpbmRFdmVudChcInVwZGF0ZS50b29sdGlwc1wiLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZV9Ub29sdGlwc1toYW5kbGVOdW1iZXJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSB2YWx1ZXNbaGFuZGxlTnVtYmVyXTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0gIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0udG8odW5lbmNvZGVkW2hhbmRsZU51bWJlcl0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0uaW5uZXJIVE1MID0gZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFyaWEoKSB7XG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGVcIiwgZnVuY3Rpb24odmFsdWVzLCBoYW5kbGVOdW1iZXIsIHVuZW5jb2RlZCwgdGFwLCBwb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQXJpYSBWYWx1ZXMgZm9yIGFsbCBoYW5kbGVzLCBhcyBhIGNoYW5nZSBpbiBvbmUgY2hhbmdlcyBtaW4gYW5kIG1heCB2YWx1ZXMgZm9yIHRoZSBuZXh0LlxuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbiA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBpbmRleCwgMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaW5kZXgsIDEwMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IHBvc2l0aW9uc1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9ybWF0dGVkIHZhbHVlIGZvciBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gb3B0aW9ucy5hcmlhRm9ybWF0LnRvKHVuZW5jb2RlZFtpbmRleF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcCB0byBzbGlkZXIgcmFuZ2UgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtaW4pLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtYXgpLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG5vdyA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhub3cpLnRvRml4ZWQoMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtaW5cIiwgbWluKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtYXhcIiwgbWF4KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIiwgbm93KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWV0ZXh0XCIsIHRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHcm91cChtb2RlLCB2YWx1ZXMsIHN0ZXBwZWQpIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcmFuZ2UuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJyYW5nZVwiIHx8IG1vZGUgPT09IFwic3RlcHNcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS54VmFsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJjb3VudFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlcyA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndmFsdWVzJyAoPj0gMikgcmVxdWlyZWQgZm9yIG1vZGUgJ2NvdW50Jy5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGl2aWRlIDAgLSAxMDAgaW4gJ2NvdW50JyBwYXJ0cy5cbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSB2YWx1ZXMgLSAxO1xuICAgICAgICAgICAgICAgIHZhciBzcHJlYWQgPSAxMDAgLyBpbnRlcnZhbDtcblxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy8gTGlzdCB0aGVzZSBwYXJ0cyBhbmQgaGF2ZSB0aGVtIGhhbmRsZWQgYXMgJ3Bvc2l0aW9ucycuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGludGVydmFsLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ludGVydmFsXSA9IGludGVydmFsICogc3ByZWFkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKDEwMCk7XG5cbiAgICAgICAgICAgICAgICBtb2RlID0gXCJwb3NpdGlvbnNcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwicG9zaXRpb25zXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXAgYWxsIHBlcmNlbnRhZ2VzIHRvIG9uLXJhbmdlIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHN0ZXBwZWQgPyBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwidmFsdWVzXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgbXVzdCBiZSBzdGVwcGVkLCBpdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBwZXJjZW50YWdlIGZpcnN0LlxuICAgICAgICAgICAgICAgIGlmIChzdGVwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRvIHBlcmNlbnRhZ2UsIGFwcGx5IHN0ZXAsIHJldHVybiB0byB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcoc2NvcGVfU3BlY3RydW0uZ2V0U3RlcChzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHZhbHVlKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlU3ByZWFkKGRlbnNpdHksIG1vZGUsIGdyb3VwKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzYWZlSW5jcmVtZW50KHZhbHVlLCBpbmNyZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBmbG9hdGluZyBwb2ludCB2YXJpYW5jZSBieSBkcm9wcGluZyB0aGUgc21hbGxlc3QgZGVjaW1hbCBwbGFjZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSArIGluY3JlbWVudCkudG9GaXhlZCg3KSAvIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbmRleGVzID0ge307XG4gICAgICAgICAgICB2YXIgZmlyc3RJblJhbmdlID0gc2NvcGVfU3BlY3RydW0ueFZhbFswXTtcbiAgICAgICAgICAgIHZhciBsYXN0SW5SYW5nZSA9IHNjb3BlX1NwZWN0cnVtLnhWYWxbc2NvcGVfU3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHZhciBpZ25vcmVGaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGlnbm9yZUxhc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBwcmV2UGN0ID0gMDtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgZ3JvdXAsIHNvcnQgaXQgYW5kIGZpbHRlciBhd2F5IGFsbCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgZ3JvdXAgPSB1bmlxdWUoXG4gICAgICAgICAgICAgICAgZ3JvdXAuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHJhbmdlIHN0YXJ0cyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgICAgICAgICAgaWYgKGdyb3VwWzBdICE9PSBmaXJzdEluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBncm91cC51bnNoaWZ0KGZpcnN0SW5SYW5nZSk7XG4gICAgICAgICAgICAgICAgaWdub3JlRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaWtld2lzZSBmb3IgdGhlIGxhc3Qgb25lLlxuICAgICAgICAgICAgaWYgKGdyb3VwW2dyb3VwLmxlbmd0aCAtIDFdICE9PSBsYXN0SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnB1c2gobGFzdEluUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlnbm9yZUxhc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBncm91cC5mb3JFYWNoKGZ1bmN0aW9uKGN1cnJlbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgYW5kIHRoZSBsb3dlciArIHVwcGVyIHBvc2l0aW9ucy5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgcTtcbiAgICAgICAgICAgICAgICB2YXIgbG93ID0gY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgaGlnaCA9IGdyb3VwW2luZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgdmFyIG5ld1BjdDtcbiAgICAgICAgICAgICAgICB2YXIgcGN0RGlmZmVyZW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgcGN0UG9zO1xuICAgICAgICAgICAgICAgIHZhciB0eXBlO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwcztcbiAgICAgICAgICAgICAgICB2YXIgcmVhbFN0ZXBzO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdGVwcyA9IG1vZGUgPT09IFwic3RlcHNcIjtcblxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdXNpbmcgJ3N0ZXBzJyBtb2RlLCB1c2UgdGhlIHByb3ZpZGVkIHN0ZXBzLlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgc3RlcCBvbiB0byB0aGUgbmV4dCBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICBpZiAoaXNTdGVwcykge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gc2NvcGVfU3BlY3RydW0ueE51bVN0ZXBzW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGEgJ2Z1bGwnIHN0ZXAuXG4gICAgICAgICAgICAgICAgaWYgKCFzdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBoaWdoIC0gbG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIExvdyBjYW4gYmUgMCwgc28gdGVzdCBmb3IgZmFsc2UuIElmIGhpZ2ggaXMgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBhdCB0aGUgbGFzdCBzdWJyYW5nZS4gSW5kZXggMCBpcyBhbHJlYWR5IGhhbmRsZWQuXG4gICAgICAgICAgICAgICAgaWYgKGxvdyA9PT0gZmFsc2UgfHwgaGlnaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgc3RlcCBpc24ndCAwLCB3aGljaCB3b3VsZCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wICgjNjU0KVxuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLm1heChzdGVwLCAwLjAwMDAwMDEpO1xuXG4gICAgICAgICAgICAgICAgLy8gRmluZCBhbGwgc3RlcHMgaW4gdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgIGZvciAoaSA9IGxvdzsgaSA8PSBoaWdoOyBpID0gc2FmZUluY3JlbWVudChpLCBzdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc2l6ZSBmb3IgdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBuZXdQY3QgPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKGkpO1xuICAgICAgICAgICAgICAgICAgICBwY3REaWZmZXJlbmNlID0gbmV3UGN0IC0gcHJldlBjdDtcblxuICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHBjdERpZmZlcmVuY2UgLyBkZW5zaXR5O1xuICAgICAgICAgICAgICAgICAgICByZWFsU3RlcHMgPSBNYXRoLnJvdW5kKHN0ZXBzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJhdGlvIHJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiBwZXJjZW50YWdlLXNwYWNlIGEgcG9pbnQgaW5kaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYSBkZW5zaXR5IDEgdGhlIHBvaW50cy9wZXJjZW50YWdlID0gMS4gRm9yIGRlbnNpdHkgMiwgdGhhdCBwZXJjZW50YWdlIG5lZWRzIHRvIGJlIHJlLWRpdmlkZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRoZSBwZXJjZW50YWdlIG9mZnNldCB0byBhbiBldmVuIG51bWJlciwgdGhlbiBkaXZpZGUgYnkgdHdvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHNwcmVhZCB0aGUgb2Zmc2V0IG9uIGJvdGggc2lkZXMgb2YgdGhlIHJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZSA9IHBjdERpZmZlcmVuY2UgLyByZWFsU3RlcHM7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGl2aWRlIGFsbCBwb2ludHMgZXZlbmx5LCBhZGRpbmcgdGhlIGNvcnJlY3QgbnVtYmVyIHRvIHRoaXMgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biB1cCB0byA8PSBzbyB0aGF0IDEwMCUgZ2V0cyBhIHBvaW50LCBldmVudCBpZiBpZ25vcmVMYXN0IGlzIHNldC5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChxID0gMTsgcSA8PSByZWFsU3RlcHM7IHEgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJhdGlvIGJldHdlZW4gdGhlIHJvdW5kZWQgdmFsdWUgYW5kIHRoZSBhY3R1YWwgc2l6ZSBtaWdodCBiZSB+MSUgb2ZmLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29ycmVjdCB0aGUgcGVyY2VudGFnZSBvZmZzZXQgYnkgdGhlIG51bWJlciBvZiBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBlciBzdWJyYW5nZS4gZGVuc2l0eSA9IDEgd2lsbCByZXN1bHQgaW4gMTAwIHBvaW50cyBvbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZ1bGwgcmFuZ2UsIDIgZm9yIDUwLCA0IGZvciAyNSwgZXRjLlxuICAgICAgICAgICAgICAgICAgICAgICAgcGN0UG9zID0gcHJldlBjdCArIHEgKiBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbcGN0UG9zLnRvRml4ZWQoNSldID0gW3Njb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhwY3RQb3MpLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgcG9pbnQgdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IGdyb3VwLmluZGV4T2YoaSkgPiAtMSA/IFBJUFNfTEFSR0VfVkFMVUUgOiBpc1N0ZXBzID8gUElQU19TTUFMTF9WQUxVRSA6IFBJUFNfTk9fVkFMVUU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW5mb3JjZSB0aGUgJ2lnbm9yZUZpcnN0JyBvcHRpb24gYnkgb3ZlcndyaXRpbmcgdGhlIHR5cGUgZm9yIDAuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5kZXggJiYgaWdub3JlRmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA9PT0gaGlnaCAmJiBpZ25vcmVMYXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgJ3R5cGUnIG9mIHRoaXMgcG9pbnQuIDAgPSBwbGFpbiwgMSA9IHJlYWwgdmFsdWUsIDIgPSBzdGVwIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1tuZXdQY3QudG9GaXhlZCg1KV0gPSBbaSwgdHlwZV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHBlcmNlbnRhZ2UgY291bnQuXG4gICAgICAgICAgICAgICAgICAgIHByZXZQY3QgPSBuZXdQY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkTWFya2luZyhzcHJlYWQsIGZpbHRlckZ1bmMsIGZvcm1hdHRlcikge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBzY29wZV9Eb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVTaXplQ2xhc3NlcyA9IFtdO1xuICAgICAgICAgICAgdmFsdWVTaXplQ2xhc3Nlc1tQSVBTX05PX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZU5vcm1hbDtcbiAgICAgICAgICAgIHZhbHVlU2l6ZUNsYXNzZXNbUElQU19MQVJHRV9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVMYXJnZTtcbiAgICAgICAgICAgIHZhbHVlU2l6ZUNsYXNzZXNbUElQU19TTUFMTF9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVTdWI7XG5cbiAgICAgICAgICAgIHZhciBtYXJrZXJTaXplQ2xhc3NlcyA9IFtdO1xuICAgICAgICAgICAgbWFya2VyU2l6ZUNsYXNzZXNbUElQU19OT19WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyTm9ybWFsO1xuICAgICAgICAgICAgbWFya2VyU2l6ZUNsYXNzZXNbUElQU19MQVJHRV9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyTGFyZ2U7XG4gICAgICAgICAgICBtYXJrZXJTaXplQ2xhc3Nlc1tQSVBTX1NNQUxMX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJTdWI7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyA9IFtvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVIb3Jpem9udGFsLCBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVWZXJ0aWNhbF07XG4gICAgICAgICAgICB2YXIgbWFya2VyT3JpZW50YXRpb25DbGFzc2VzID0gW29wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJIb3Jpem9udGFsLCBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyVmVydGljYWxdO1xuXG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcHRpb25zLmNzc0NsYXNzZXMucGlwcyk7XG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcHRpb25zLm9ydCA9PT0gMCA/IG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzSG9yaXpvbnRhbCA6IG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzVmVydGljYWwpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRDbGFzc2VzKHR5cGUsIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gc291cmNlID09PSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWVudGF0aW9uQ2xhc3NlcyA9IGEgPyB2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyA6IG1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcztcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZUNsYXNzZXMgPSBhID8gdmFsdWVTaXplQ2xhc3NlcyA6IG1hcmtlclNpemVDbGFzc2VzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZSArIFwiIFwiICsgb3JpZW50YXRpb25DbGFzc2VzW29wdGlvbnMub3J0XSArIFwiIFwiICsgc2l6ZUNsYXNzZXNbdHlwZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFNwcmVhZChvZmZzZXQsIHZhbHVlLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhlIGZpbHRlciBmdW5jdGlvbiwgaWYgaXQgaXMgc2V0LlxuICAgICAgICAgICAgICAgIHR5cGUgPSBmaWx0ZXJGdW5jID8gZmlsdGVyRnVuYyh2YWx1ZSwgdHlwZSkgOiB0eXBlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFBJUFNfTk9ORSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQWRkIGEgbWFya2VyIGZvciBldmVyeSBwb2ludFxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gYWRkTm9kZVRvKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGdldENsYXNzZXModHlwZSwgb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlcik7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZVtvcHRpb25zLnN0eWxlXSA9IG9mZnNldCArIFwiJVwiO1xuXG4gICAgICAgICAgICAgICAgLy8gVmFsdWVzIGFyZSBvbmx5IGFwcGVuZGVkIGZvciBwb2ludHMgbWFya2VkICcxJyBvciAnMicuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPiBQSVBTX05PX1ZBTFVFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBhZGROb2RlVG8oZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGdldENsYXNzZXModHlwZSwgb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZVtvcHRpb25zLnN0eWxlXSA9IG9mZnNldCArIFwiJVwiO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IGZvcm1hdHRlci50byh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBcHBlbmQgYWxsIHBvaW50cy5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNwcmVhZCkuZm9yRWFjaChmdW5jdGlvbihvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBhZGRTcHJlYWQob2Zmc2V0LCBzcHJlYWRbb2Zmc2V0XVswXSwgc3ByZWFkW29mZnNldF1bMV0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlUGlwcygpIHtcbiAgICAgICAgICAgIGlmIChzY29wZV9QaXBzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudChzY29wZV9QaXBzKTtcbiAgICAgICAgICAgICAgICBzY29wZV9QaXBzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBpcHMoZ3JpZCkge1xuICAgICAgICAgICAgLy8gRml4ICM2NjlcbiAgICAgICAgICAgIHJlbW92ZVBpcHMoKTtcblxuICAgICAgICAgICAgdmFyIG1vZGUgPSBncmlkLm1vZGU7XG4gICAgICAgICAgICB2YXIgZGVuc2l0eSA9IGdyaWQuZGVuc2l0eSB8fCAxO1xuICAgICAgICAgICAgdmFyIGZpbHRlciA9IGdyaWQuZmlsdGVyIHx8IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGdyaWQudmFsdWVzIHx8IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHN0ZXBwZWQgPSBncmlkLnN0ZXBwZWQgfHwgZmFsc2U7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBnZXRHcm91cChtb2RlLCB2YWx1ZXMsIHN0ZXBwZWQpO1xuICAgICAgICAgICAgdmFyIHNwcmVhZCA9IGdlbmVyYXRlU3ByZWFkKGRlbnNpdHksIG1vZGUsIGdyb3VwKTtcbiAgICAgICAgICAgIHZhciBmb3JtYXQgPSBncmlkLmZvcm1hdCB8fCB7XG4gICAgICAgICAgICAgICAgdG86IE1hdGgucm91bmRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNjb3BlX1BpcHMgPSBzY29wZV9UYXJnZXQuYXBwZW5kQ2hpbGQoYWRkTWFya2luZyhzcHJlYWQsIGZpbHRlciwgZm9ybWF0KSk7XG5cbiAgICAgICAgICAgIHJldHVybiBzY29wZV9QaXBzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvcnRoYW5kIGZvciBiYXNlIGRpbWVuc2lvbnMuXG4gICAgICAgIGZ1bmN0aW9uIGJhc2VTaXplKCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBzY29wZV9CYXNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIGFsdCA9IFwib2Zmc2V0XCIgKyBbXCJXaWR0aFwiLCBcIkhlaWdodFwiXVtvcHRpb25zLm9ydF07XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5vcnQgPT09IDAgPyByZWN0LndpZHRoIHx8IHNjb3BlX0Jhc2VbYWx0XSA6IHJlY3QuaGVpZ2h0IHx8IHNjb3BlX0Jhc2VbYWx0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZXIgZm9yIGF0dGFjaGluZyBldmVudHMgdHJvdWdoIGEgcHJveHkuXG4gICAgICAgIGZ1bmN0aW9uIGF0dGFjaEV2ZW50KGV2ZW50cywgZWxlbWVudCwgY2FsbGJhY2ssIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gJ2ZpbHRlcicgZXZlbnRzIHRvIHRoZSBzbGlkZXIuXG4gICAgICAgICAgICAvLyBlbGVtZW50IGlzIGEgbm9kZSwgbm90IGEgbm9kZUxpc3RcblxuICAgICAgICAgICAgdmFyIG1ldGhvZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlID0gZml4RXZlbnQoZSwgZGF0YS5wYWdlT2Zmc2V0LCBkYXRhLnRhcmdldCB8fCBlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIC8vIGZpeEV2ZW50IHJldHVybnMgZmFsc2UgaWYgdGhpcyBldmVudCBoYXMgYSBkaWZmZXJlbnQgdGFyZ2V0XG4gICAgICAgICAgICAgICAgLy8gd2hlbiBoYW5kbGluZyAobXVsdGktKSB0b3VjaCBldmVudHM7XG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBkb05vdFJlamVjdCBpcyBwYXNzZWQgYnkgYWxsIGVuZCBldmVudHMgdG8gbWFrZSBzdXJlIHJlbGVhc2VkIHRvdWNoZXNcbiAgICAgICAgICAgICAgICAvLyBhcmUgbm90IHJlamVjdGVkLCBsZWF2aW5nIHRoZSBzbGlkZXIgXCJzdHVja1wiIHRvIHRoZSBjdXJzb3I7XG4gICAgICAgICAgICAgICAgaWYgKGlzU2xpZGVyRGlzYWJsZWQoKSAmJiAhZGF0YS5kb05vdFJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBhbiBhY3RpdmUgJ3RhcCcgdHJhbnNpdGlvbiBpcyB0YWtpbmcgcGxhY2UuXG4gICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSByaWdodCBvciBtaWRkbGUgY2xpY2tzIG9uIHN0YXJ0ICM0NTRcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzID09PSBhY3Rpb25zLnN0YXJ0ICYmIGUuYnV0dG9ucyAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9ucyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSByaWdodCBvciBtaWRkbGUgY2xpY2tzIG9uIHN0YXJ0ICM0NTRcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5ob3ZlciAmJiBlLmJ1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vICdzdXBwb3J0c1Bhc3NpdmUnIGlzIG9ubHkgdHJ1ZSBpZiBhIGJyb3dzZXIgYWxzbyBzdXBwb3J0cyB0b3VjaC1hY3Rpb246IG5vbmUgaW4gQ1NTLlxuICAgICAgICAgICAgICAgIC8vIGlPUyBzYWZhcmkgZG9lcyBub3QsIHNvIGl0IGRvZXNuJ3QgZ2V0IHRvIGJlbmVmaXQgZnJvbSBwYXNzaXZlIHNjcm9sbGluZy4gaU9TIGRvZXMgc3VwcG9ydFxuICAgICAgICAgICAgICAgIC8vIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uLCBidXQgdGhhdCBhbGxvd3MgcGFubmluZywgd2hpY2ggYnJlYWtzXG4gICAgICAgICAgICAgICAgLy8gc2xpZGVycyBhZnRlciB6b29taW5nL29uIG5vbi1yZXNwb25zaXZlIHBhZ2VzLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzMzExMlxuICAgICAgICAgICAgICAgIGlmICghc3VwcG9ydHNQYXNzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlLmNhbGNQb2ludCA9IGUucG9pbnRzW29wdGlvbnMub3J0XTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGhhbmRsZXIgd2l0aCB0aGUgZXZlbnQgWyBhbmQgYWRkaXRpb25hbCBkYXRhIF0uXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZGF0YSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgbWV0aG9kcyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBCaW5kIGEgY2xvc3VyZSBvbiB0aGUgdGFyZ2V0IGZvciBldmVyeSBldmVudCB0eXBlLlxuICAgICAgICAgICAgZXZlbnRzLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG1ldGhvZCwgc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5wdXNoKFtldmVudE5hbWUsIG1ldGhvZF0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBtZXRob2RzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJvdmlkZSBhIGNsZWFuIGV2ZW50IHdpdGggc3RhbmRhcmRpemVkIG9mZnNldCB2YWx1ZXMuXG4gICAgICAgIGZ1bmN0aW9uIGZpeEV2ZW50KGUsIHBhZ2VPZmZzZXQsIGV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBGaWx0ZXIgdGhlIGV2ZW50IHRvIHJlZ2lzdGVyIHRoZSB0eXBlLCB3aGljaCBjYW4gYmVcbiAgICAgICAgICAgIC8vIHRvdWNoLCBtb3VzZSBvciBwb2ludGVyLiBPZmZzZXQgY2hhbmdlcyBuZWVkIHRvIGJlXG4gICAgICAgICAgICAvLyBtYWRlIG9uIGFuIGV2ZW50IHNwZWNpZmljIGJhc2lzLlxuICAgICAgICAgICAgdmFyIHRvdWNoID0gZS50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSA9PT0gMDtcbiAgICAgICAgICAgIHZhciBtb3VzZSA9IGUudHlwZS5pbmRleE9mKFwibW91c2VcIikgPT09IDA7XG4gICAgICAgICAgICB2YXIgcG9pbnRlciA9IGUudHlwZS5pbmRleE9mKFwicG9pbnRlclwiKSA9PT0gMDtcblxuICAgICAgICAgICAgdmFyIHg7XG4gICAgICAgICAgICB2YXIgeTtcblxuICAgICAgICAgICAgLy8gSUUxMCBpbXBsZW1lbnRlZCBwb2ludGVyIGV2ZW50cyB3aXRoIGEgcHJlZml4O1xuICAgICAgICAgICAgaWYgKGUudHlwZS5pbmRleE9mKFwiTVNQb2ludGVyXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRlciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBvbmx5IHRoaW5nIG9uZSBoYW5kbGUgc2hvdWxkIGJlIGNvbmNlcm5lZCBhYm91dCBpcyB0aGUgdG91Y2hlcyB0aGF0IG9yaWdpbmF0ZWQgb24gdG9wIG9mIGl0LlxuICAgICAgICAgICAgaWYgKHRvdWNoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJucyB0cnVlIGlmIGEgdG91Y2ggb3JpZ2luYXRlZCBvbiB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgICAgIHZhciBpc1RvdWNoT25UYXJnZXQgPSBmdW5jdGlvbihjaGVja1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja1RvdWNoLnRhcmdldCA9PT0gZXZlbnRUYXJnZXQgfHwgZXZlbnRUYXJnZXQuY29udGFpbnMoY2hlY2tUb3VjaC50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0b3VjaHN0YXJ0IGV2ZW50cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgc3RpbGwgbm8gbW9yZSB0aGFuIG9uZVxuICAgICAgICAgICAgICAgIC8vIHRvdWNoIG9uIHRoZSB0YXJnZXQgc28gd2UgbG9vayBhbW9uZ3N0IGFsbCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUudG91Y2hlcywgaXNUb3VjaE9uVGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qgc3VwcG9ydCBtb3JlIHRoYW4gb25lIHRvdWNoIHBlciBoYW5kbGUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHggPSB0YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGUgb3RoZXIgY2FzZXMsIGZpbmQgb24gY2hhbmdlZFRvdWNoZXMgaXMgZW5vdWdoLlxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VG91Y2ggPSBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGlzVG91Y2hPblRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FuY2VsIGlmIHRoZSB0YXJnZXQgdG91Y2ggaGFzIG5vdCBtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWdlT2Zmc2V0ID0gcGFnZU9mZnNldCB8fCBnZXRQYWdlT2Zmc2V0KHNjb3BlX0RvY3VtZW50KTtcblxuICAgICAgICAgICAgaWYgKG1vdXNlIHx8IHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICB4ID0gZS5jbGllbnRYICsgcGFnZU9mZnNldC54O1xuICAgICAgICAgICAgICAgIHkgPSBlLmNsaWVudFkgKyBwYWdlT2Zmc2V0Lnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQ7XG4gICAgICAgICAgICBlLnBvaW50cyA9IFt4LCB5XTtcbiAgICAgICAgICAgIGUuY3Vyc29yID0gbW91c2UgfHwgcG9pbnRlcjsgLy8gRml4ICM0MzVcblxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFuc2xhdGUgYSBjb29yZGluYXRlIGluIHRoZSBkb2N1bWVudCB0byBhIHBlcmNlbnRhZ2Ugb24gdGhlIHNsaWRlclxuICAgICAgICBmdW5jdGlvbiBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoY2FsY1BvaW50KSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjYWxjUG9pbnQgLSBvZmZzZXQoc2NvcGVfQmFzZSwgb3B0aW9ucy5vcnQpO1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gKGxvY2F0aW9uICogMTAwKSAvIGJhc2VTaXplKCk7XG5cbiAgICAgICAgICAgIC8vIENsYW1wIHByb3Bvc2FsIGJldHdlZW4gMCUgYW5kIDEwMCVcbiAgICAgICAgICAgIC8vIE91dC1vZi1ib3VuZCBjb29yZGluYXRlcyBtYXkgb2NjdXIgd2hlbiAubm9VaS1iYXNlIHBzZXVkby1lbGVtZW50c1xuICAgICAgICAgICAgLy8gYXJlIHVzZWQgKGUuZy4gY29udGFpbmVkIGhhbmRsZXMgZmVhdHVyZSlcbiAgICAgICAgICAgIHByb3Bvc2FsID0gbGltaXQocHJvcG9zYWwpO1xuXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBwcm9wb3NhbCA6IHByb3Bvc2FsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBoYW5kbGUgY2xvc2VzdCB0byBhIGNlcnRhaW4gcGVyY2VudGFnZSBvbiB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RIYW5kbGUoY2xpY2tlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc21hbGxlc3REaWZmZXJlbmNlID0gMTAwO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIERpc2FibGVkIGhhbmRsZXMgYXJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNIYW5kbGVEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVQb3NpdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1tpbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSA9IE1hdGguYWJzKGhhbmRsZVBvc2l0aW9uIC0gY2xpY2tlZFBvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIC8vIEluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICB2YXIgY2xpY2tBdEVkZ2UgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPT09IDEwMCAmJiBzbWFsbGVzdERpZmZlcmVuY2UgPT09IDEwMDtcblxuICAgICAgICAgICAgICAgIC8vIERpZmZlcmVuY2Ugd2l0aCB0aGlzIGhhbmRsZSBpcyBzbWFsbGVyIHRoYW4gdGhlIHByZXZpb3VzbHkgY2hlY2tlZCBoYW5kbGVcbiAgICAgICAgICAgICAgICB2YXIgaXNDbG9zZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPCBzbWFsbGVzdERpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGlzQ2xvc2VyQWZ0ZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPD0gc21hbGxlc3REaWZmZXJlbmNlICYmIGNsaWNrZWRQb3NpdGlvbiA+IGhhbmRsZVBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2xvc2VyIHx8IGlzQ2xvc2VyQWZ0ZXIgfHwgY2xpY2tBdEVkZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsZXN0RGlmZmVyZW5jZSA9IGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU51bWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmUgJ2VuZCcgd2hlbiBhIG1vdXNlIG9yIHBlbiBsZWF2ZXMgdGhlIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudExlYXZlKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZW91dFwiICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJIVE1MXCIgJiYgZXZlbnQucmVsYXRlZFRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGV2ZW50RW5kKGV2ZW50LCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBtb3ZlbWVudCBvbiBkb2N1bWVudCBmb3IgaGFuZGxlIGFuZCByYW5nZSBkcmFnLlxuICAgICAgICBmdW5jdGlvbiBldmVudE1vdmUoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNDk4XG4gICAgICAgICAgICAvLyBDaGVjayB2YWx1ZSBvZiAuYnV0dG9ucyBpbiAnc3RhcnQnIHRvIHdvcmsgYXJvdW5kIGEgYnVnIGluIElFMTAgbW9iaWxlIChkYXRhLmJ1dHRvbnNQcm9wZXJ0eSkuXG4gICAgICAgICAgICAvLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzkyNzAwNS9tb2JpbGUtaWUxMC13aW5kb3dzLXBob25lLWJ1dHRvbnMtcHJvcGVydHktb2YtcG9pbnRlcm1vdmUtZXZlbnQtYWx3YXlzLXplcm9cbiAgICAgICAgICAgIC8vIElFOSBoYXMgLmJ1dHRvbnMgYW5kIC53aGljaCB6ZXJvIG9uIG1vdXNlbW92ZS5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggYnJlYWtzIHRoZSBzcGVjIE1ETiBkZWZpbmVzLlxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoXCJNU0lFIDlcIikgPT09IC0xICYmIGV2ZW50LmJ1dHRvbnMgPT09IDAgJiYgZGF0YS5idXR0b25zUHJvcGVydHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBhcmUgbW92aW5nIHVwIG9yIGRvd25cbiAgICAgICAgICAgIHZhciBtb3ZlbWVudCA9IChvcHRpb25zLmRpciA/IC0xIDogMSkgKiAoZXZlbnQuY2FsY1BvaW50IC0gZGF0YS5zdGFydENhbGNQb2ludCk7XG5cbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIG1vdmVtZW50IGludG8gYSBwZXJjZW50YWdlIG9mIHRoZSBzbGlkZXIgd2lkdGgvaGVpZ2h0XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSAobW92ZW1lbnQgKiAxMDApIC8gZGF0YS5iYXNlU2l6ZTtcblxuICAgICAgICAgICAgbW92ZUhhbmRsZXMobW92ZW1lbnQgPiAwLCBwcm9wb3NhbCwgZGF0YS5sb2NhdGlvbnMsIGRhdGEuaGFuZGxlTnVtYmVycyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmJpbmQgbW92ZSBldmVudHMgb24gZG9jdW1lbnQsIGNhbGwgY2FsbGJhY2tzLlxuICAgICAgICBmdW5jdGlvbiBldmVudEVuZChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gVGhlIGhhbmRsZSBpcyBubyBsb25nZXIgYWN0aXZlLCBzbyByZW1vdmUgdGhlIGNsYXNzLlxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZGF0YS5oYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCAtPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVbmJpbmQgdGhlIG1vdmUgYW5kIGVuZCBldmVudHMsIHdoaWNoIGFyZSBhZGRlZCBvbiAnc3RhcnQnLlxuICAgICAgICAgICAgZGF0YS5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfRG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoY1swXSwgY1sxXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBkcmFnZ2luZyBjbGFzcy5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICBzZXRaaW5kZXgoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJzb3Igc3R5bGVzIGFuZCB0ZXh0LXNlbGVjdGlvbiBldmVudHMgYm91bmQgdG8gdGhlIGJvZHkuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImVuZFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIG1vdmUgZXZlbnRzIG9uIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBldmVudFN0YXJ0KGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgZXZlbnQgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlTnVtYmVycy5zb21lKGlzSGFuZGxlRGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaGFuZGxlO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVOdW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2RhdGEuaGFuZGxlTnVtYmVyc1swXV07XG5cbiAgICAgICAgICAgICAgICBoYW5kbGUgPSBoYW5kbGVPcmlnaW4uY2hpbGRyZW5bMF07XG4gICAgICAgICAgICAgICAgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ICs9IDE7XG5cbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBoYW5kbGUgYXMgJ2FjdGl2ZScgc28gaXQgY2FuIGJlIHN0eWxlZC5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBIGRyYWcgc2hvdWxkIG5ldmVyIHByb3BhZ2F0ZSB1cCB0byB0aGUgJ3RhcCcgZXZlbnQuXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgbW92ZSBhbmQgZW5kIGV2ZW50cy5cbiAgICAgICAgICAgIHZhciBtb3ZlRXZlbnQgPSBhdHRhY2hFdmVudChhY3Rpb25zLm1vdmUsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZXZlbnRNb3ZlLCB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV2ZW50IHRhcmdldCBoYXMgY2hhbmdlZCBzbyB3ZSBuZWVkIHRvIHByb3BhZ2F0ZSB0aGUgb3JpZ2luYWwgb25lIHNvIHRoYXQgd2Uga2VlcFxuICAgICAgICAgICAgICAgIC8vIHJlbHlpbmcgb24gaXQgdG8gZXh0cmFjdCB0YXJnZXQgdG91Y2hlcy5cbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBzdGFydENhbGNQb2ludDogZXZlbnQuY2FsY1BvaW50LFxuICAgICAgICAgICAgICAgIGJhc2VTaXplOiBiYXNlU2l6ZSgpLFxuICAgICAgICAgICAgICAgIHBhZ2VPZmZzZXQ6IGV2ZW50LnBhZ2VPZmZzZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNQcm9wZXJ0eTogZXZlbnQuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGVuZEV2ZW50ID0gYXR0YWNoRXZlbnQoYWN0aW9ucy5lbmQsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZXZlbnRFbmQsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBkb05vdFJlamVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgb3V0RXZlbnQgPSBhdHRhY2hFdmVudChcIm1vdXNlb3V0XCIsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZG9jdW1lbnRMZWF2ZSwge1xuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIGRvTm90UmVqZWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVyc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIHB1c2hlZCB0aGUgbGlzdGVuZXJzIGluIHRoZSBsaXN0ZW5lciBsaXN0IHJhdGhlciB0aGFuIGNyZWF0aW5nXG4gICAgICAgICAgICAvLyBhIG5ldyBvbmUgYXMgaXQgaGFzIGFscmVhZHkgYmVlbiBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2guYXBwbHkobGlzdGVuZXJzLCBtb3ZlRXZlbnQuY29uY2F0KGVuZEV2ZW50LCBvdXRFdmVudCkpO1xuXG4gICAgICAgICAgICAvLyBUZXh0IHNlbGVjdGlvbiBpc24ndCBhbiBpc3N1ZSBvbiB0b3VjaCBkZXZpY2VzLFxuICAgICAgICAgICAgLy8gc28gYWRkaW5nIGN1cnNvciBzdHlsZXMgY2FuIGJlIHNraXBwZWQuXG4gICAgICAgICAgICBpZiAoZXZlbnQuY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0aGUgJ0knIGN1cnNvciBhbmQgZXh0ZW5kIHRoZSByYW5nZS1kcmFnIGN1cnNvci5cbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IGdldENvbXB1dGVkU3R5bGUoZXZlbnQudGFyZ2V0KS5jdXJzb3I7XG5cbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSB0YXJnZXQgd2l0aCBhIGRyYWdnaW5nIHN0YXRlLlxuICAgICAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0ZXh0IHNlbGVjdGlvbiB3aGVuIGRyYWdnaW5nIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgICAgIC8vIEluIG5vVWlTbGlkZXIgPD0gOS4yLjAsIHRoaXMgd2FzIGhhbmRsZWQgYnkgY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBvbiBtb3VzZS90b3VjaCBzdGFydC9tb3ZlLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIGlzIHNjcm9sbCBibG9ja2luZy4gVGhlIHNlbGVjdHN0YXJ0IGV2ZW50IGlzIHN1cHBvcnRlZCBieSBGaXJlRm94IHN0YXJ0aW5nIGZyb20gdmVyc2lvbiA1MixcbiAgICAgICAgICAgICAgICAvLyBtZWFuaW5nIHRoZSBvbmx5IGhvbGRvdXQgaXMgaU9TIFNhZmFyaS4gVGhpcyBkb2Vzbid0IG1hdHRlcjogdGV4dCBzZWxlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIHRoZXJlLlxuICAgICAgICAgICAgICAgIC8vIFRoZSAnY3Vyc29yJyBmbGFnIGlzIGZhbHNlLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2VsZWN0c3RhcnRcbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzdGFydFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlIGNsb3Nlc3QgaGFuZGxlIHRvIHRhcHBlZCBsb2NhdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRUYXAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0YXAgZXZlbnQgc2hvdWxkbid0IHByb3BhZ2F0ZSB1cFxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IGNhbGNQb2ludFRvUGVyY2VudGFnZShldmVudC5jYWxjUG9pbnQpO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGdldENsb3Nlc3RIYW5kbGUocHJvcG9zYWwpO1xuXG4gICAgICAgICAgICAvLyBUYWNrbGUgdGhlIGNhc2UgdGhhdCBhbGwgaGFuZGxlcyBhcmUgJ2Rpc2FibGVkJy5cbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGbGFnIHRoZSBzbGlkZXIgYXMgaXQgaXMgbm93IGluIGEgdHJhbnNpdGlvbmFsIHN0YXRlLlxuICAgICAgICAgICAgLy8gVHJhbnNpdGlvbiB0YWtlcyBhIGNvbmZpZ3VyYWJsZSBhbW91bnQgb2YgbXMgKGRlZmF1bHQgMzAwKS4gUmUtZW5hYmxlIHRoZSBzbGlkZXIgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzRm9yKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCwgb3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHByb3Bvc2FsLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmV2ZW50cy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRTdGFydChldmVudCwgeyBoYW5kbGVOdW1iZXJzOiBbaGFuZGxlTnVtYmVyXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmVzIGEgJ2hvdmVyJyBldmVudCBmb3IgYSBob3ZlcmVkIG1vdXNlL3BlbiBwb3NpdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRIb3ZlcihldmVudCkge1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gY2FsY1BvaW50VG9QZXJjZW50YWdlKGV2ZW50LmNhbGNQb2ludCk7XG5cbiAgICAgICAgICAgIHZhciB0byA9IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAocHJvcG9zYWwpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHRhcmdldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiaG92ZXJcIiA9PT0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChzY29wZV9TZWxmLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlcyBrZXlkb3duIG9uIGZvY3VzZWQgaGFuZGxlc1xuICAgICAgICAvLyBEb24ndCBtb3ZlIHRoZSBkb2N1bWVudCB3aGVuIHByZXNzaW5nIGFycm93IGtleXMgb24gZm9jdXNlZCBoYW5kbGVzXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpIHx8IGlzSGFuZGxlRGlzYWJsZWQoaGFuZGxlTnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGhvcml6b250YWxLZXlzID0gW1wiTGVmdFwiLCBcIlJpZ2h0XCJdO1xuICAgICAgICAgICAgdmFyIHZlcnRpY2FsS2V5cyA9IFtcIkRvd25cIiwgXCJVcFwiXTtcbiAgICAgICAgICAgIHZhciBsYXJnZVN0ZXBLZXlzID0gW1wiUGFnZURvd25cIiwgXCJQYWdlVXBcIl07XG4gICAgICAgICAgICB2YXIgZWRnZUtleXMgPSBbXCJIb21lXCIsIFwiRW5kXCJdO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgJiYgIW9wdGlvbnMub3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYW4gcmlnaHQtdG8tbGVmdCBzbGlkZXIsIHRoZSBsZWZ0IGFuZCByaWdodCBrZXlzIGFjdCBpbnZlcnRlZFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vcnQgJiYgIW9wdGlvbnMuZGlyKSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYSB0b3AtdG8tYm90dG9tIHNsaWRlciwgdGhlIHVwIGFuZCBkb3duIGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgdmVydGljYWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICBsYXJnZVN0ZXBLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RyaXAgXCJBcnJvd1wiIGZvciBJRSBjb21wYXRpYmlsaXR5LiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlcbiAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC5rZXkucmVwbGFjZShcIkFycm93XCIsIFwiXCIpO1xuXG4gICAgICAgICAgICB2YXIgaXNMYXJnZURvd24gPSBrZXkgPT09IGxhcmdlU3RlcEtleXNbMF07XG4gICAgICAgICAgICB2YXIgaXNMYXJnZVVwID0ga2V5ID09PSBsYXJnZVN0ZXBLZXlzWzFdO1xuICAgICAgICAgICAgdmFyIGlzRG93biA9IGtleSA9PT0gdmVydGljYWxLZXlzWzBdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMF0gfHwgaXNMYXJnZURvd247XG4gICAgICAgICAgICB2YXIgaXNVcCA9IGtleSA9PT0gdmVydGljYWxLZXlzWzFdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMV0gfHwgaXNMYXJnZVVwO1xuICAgICAgICAgICAgdmFyIGlzTWluID0ga2V5ID09PSBlZGdlS2V5c1swXTtcbiAgICAgICAgICAgIHZhciBpc01heCA9IGtleSA9PT0gZWRnZUtleXNbMV07XG5cbiAgICAgICAgICAgIGlmICghaXNEb3duICYmICFpc1VwICYmICFpc01pbiAmJiAhaXNNYXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyIHRvO1xuXG4gICAgICAgICAgICBpZiAoaXNVcCB8fCBpc0Rvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IDU7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRG93biA/IDAgOiAxO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwID0gc3RlcHNbZGlyZWN0aW9uXTtcblxuICAgICAgICAgICAgICAgIC8vIEF0IHRoZSBlZGdlIG9mIGEgc2xpZGVyLCBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE5vIHN0ZXAgc2V0LCB1c2UgdGhlIGRlZmF1bHQgb2YgMTAlIG9mIHRoZSBzdWItcmFuZ2VcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IHNjb3BlX1NwZWN0cnVtLmdldERlZmF1bHRTdGVwKHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdLCBpc0Rvd24sIDEwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNMYXJnZVVwIHx8IGlzTGFyZ2VEb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgKj0gbXVsdGlwbGllcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgICAgICAgICBzdGVwID0gTWF0aC5tYXgoc3RlcCwgMC4wMDAwMDAxKTtcblxuICAgICAgICAgICAgICAgIC8vIERlY3JlbWVudCBmb3IgZG93biBzdGVwc1xuICAgICAgICAgICAgICAgIHN0ZXAgPSAoaXNEb3duID8gLTEgOiAxKSAqIHN0ZXA7XG5cbiAgICAgICAgICAgICAgICB0byA9IHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdICsgc3RlcDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXgpIHtcbiAgICAgICAgICAgICAgICAvLyBFbmQga2V5XG4gICAgICAgICAgICAgICAgdG8gPSBvcHRpb25zLnNwZWN0cnVtLnhWYWxbb3B0aW9ucy5zcGVjdHJ1bS54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBIb21lIGtleVxuICAgICAgICAgICAgICAgIHRvID0gb3B0aW9ucy5zcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHRvKSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF0dGFjaCBldmVudHMgdG8gc2V2ZXJhbCBzbGlkZXIgcGFydHMuXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRTbGlkZXJFdmVudHMoYmVoYXZpb3VyKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHN0YW5kYXJkIGRyYWcgZXZlbnQgdG8gdGhlIGhhbmRsZXMuXG4gICAgICAgICAgICBpZiAoIWJlaGF2aW91ci5maXhlZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGV2ZW50cyBhcmUgb25seSBib3VuZCB0byB0aGUgdmlzdWFsIGhhbmRsZVxuICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50LCBub3QgdGhlICdyZWFsJyBvcmlnaW4gZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgaGFuZGxlLmNoaWxkcmVuWzBdLCBldmVudFN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHRhcCBldmVudCB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLnRhcCkge1xuICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIHNjb3BlX0Jhc2UsIGV2ZW50VGFwLCB7fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpcmUgaG92ZXIgZXZlbnRzXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmhvdmVyKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9CYXNlLCBldmVudEhvdmVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1ha2UgdGhlIHJhbmdlIGRyYWdnYWJsZS5cbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZHJhZykge1xuICAgICAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24oY29ubmVjdCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3QgPT09IGZhbHNlIHx8IGluZGV4ID09PSAwIHx8IGluZGV4ID09PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQmVmb3JlID0gc2NvcGVfSGFuZGxlc1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQWZ0ZXIgPSBzY29wZV9IYW5kbGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50SG9sZGVycyA9IFtjb25uZWN0XTtcblxuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhjb25uZWN0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZ2dhYmxlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSByYW5nZSBpcyBmaXhlZCwgdGhlIGVudGlyZSByYW5nZSBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gYmUgZHJhZ2dlZCBieSB0aGUgaGFuZGxlcy4gVGhlIGhhbmRsZSBpbiB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gb3JpZ2luIHdpbGwgcHJvcGFnYXRlIHRoZSBzdGFydCBldmVudCB1cHdhcmQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpdCBuZWVkcyB0byBiZSBib3VuZCBtYW51YWxseSBvbiB0aGUgb3RoZXIuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5wdXNoKGhhbmRsZUJlZm9yZS5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMucHVzaChoYW5kbGVBZnRlci5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMuZm9yRWFjaChmdW5jdGlvbihldmVudEhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgZXZlbnRIb2xkZXIsIGV2ZW50U3RhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbaGFuZGxlQmVmb3JlLCBoYW5kbGVBZnRlcl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogW2luZGV4IC0gMSwgaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRhY2ggYW4gZXZlbnQgdG8gdGhpcyBzbGlkZXIsIHBvc3NpYmx5IGluY2x1ZGluZyBhIG5hbWVzcGFjZVxuICAgICAgICBmdW5jdGlvbiBiaW5kRXZlbnQobmFtZXNwYWNlZEV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0gPSBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgYm91bmQgaXMgJ3VwZGF0ZSwnIGZpcmUgaXQgaW1tZWRpYXRlbHkgZm9yIGFsbCBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZWRFdmVudC5zcGxpdChcIi5cIilbMF0gPT09IFwidXBkYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oYSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuZG8gYXR0YWNobWVudCBvZiBldmVudFxuICAgICAgICBmdW5jdGlvbiByZW1vdmVFdmVudChuYW1lc3BhY2VkRXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5hbWVzcGFjZWRFdmVudCAmJiBuYW1lc3BhY2VkRXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IGV2ZW50ICYmIG5hbWVzcGFjZWRFdmVudC5zdWJzdHJpbmcoZXZlbnQubGVuZ3RoKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGJpbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdEV2ZW50ID0gYmluZC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICAgICAgdmFyIHROYW1lc3BhY2UgPSBiaW5kLnN1YnN0cmluZyh0RXZlbnQubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIGlmICgoIWV2ZW50IHx8IGV2ZW50ID09PSB0RXZlbnQpICYmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gdE5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjb3BlX0V2ZW50c1tiaW5kXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4dGVybmFsIGV2ZW50IGhhbmRsaW5nXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVFdmVudChldmVudE5hbWUsIGhhbmRsZU51bWJlciwgdGFwKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNsaWRlciBwdWJsaWMgQVBJIGFzIHRoZSBzY29wZSAoJ3RoaXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1NlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHZhbHVlcyBhcyBhcnJheSwgc28gYXJnXzFbYXJnXzJdIGlzIGFsd2F5cyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9WYWx1ZXMubWFwKG9wdGlvbnMuZm9ybWF0LnRvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgaW5kZXgsIDAgb3IgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbi1mb3JtYXR0ZWQgc2xpZGVyIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1ZhbHVlcy5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV2ZW50IGlzIGZpcmVkIGJ5IHRhcCwgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZWZ0IG9mZnNldCBvZiB0aGUgaGFuZGxlLCBpbiByZWxhdGlvbiB0byB0aGUgc2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zLnNsaWNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BsaXQgb3V0IHRoZSBoYW5kbGUgcG9zaXRpb25pbmcgbG9naWMgc28gdGhlIE1vdmUgZXZlbnQgY2FuIHVzZSBpdCwgdG9vXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrSGFuZGxlUG9zaXRpb24ocmVmZXJlbmNlLCBoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkLCBnZXRWYWx1ZSkge1xuICAgICAgICAgICAgLy8gRm9yIHNsaWRlcnMgd2l0aCBtdWx0aXBsZSBoYW5kbGVzLCBsaW1pdCBtb3ZlbWVudCB0byB0aGUgb3RoZXIgaGFuZGxlLlxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIG1hcmdpbiBvcHRpb24gYnkgYWRkaW5nIGl0IHRvIHRoZSBoYW5kbGUgcG9zaXRpb25zLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiAhb3B0aW9ucy5ldmVudHMudW5jb25zdHJhaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCByZWZlcmVuY2VbaGFuZGxlTnVtYmVyIC0gMV0gKyBvcHRpb25zLm1hcmdpbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxvb2tGb3J3YXJkICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCByZWZlcmVuY2VbaGFuZGxlTnVtYmVyICsgMV0gLSBvcHRpb25zLm1hcmdpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgbGltaXQgb3B0aW9uIGhhcyB0aGUgb3Bwb3NpdGUgZWZmZWN0LCBsaW1pdGluZyBoYW5kbGVzIHRvIGFcbiAgICAgICAgICAgIC8vIG1heGltdW0gZGlzdGFuY2UgZnJvbSBhbm90aGVyLiBMaW1pdCBtdXN0IGJlID4gMCwgYXMgb3RoZXJ3aXNlXG4gICAgICAgICAgICAvLyBoYW5kbGVzIHdvdWxkIGJlIHVubW92YWJsZS5cbiAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEgJiYgb3B0aW9ucy5saW1pdCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCByZWZlcmVuY2VbaGFuZGxlTnVtYmVyIC0gMV0gKyBvcHRpb25zLmxpbWl0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9va0ZvcndhcmQgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgKyAxXSAtIG9wdGlvbnMubGltaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIHBhZGRpbmcgb3B0aW9uIGtlZXBzIHRoZSBoYW5kbGVzIGEgY2VydGFpbiBkaXN0YW5jZSBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gZWRnZXMgb2YgdGhlIHNsaWRlci4gUGFkZGluZyBtdXN0IGJlID4gMC5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhZGRpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIG9wdGlvbnMucGFkZGluZ1swXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIDEwMCAtIG9wdGlvbnMucGFkZGluZ1sxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0byA9IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAodG8pO1xuXG4gICAgICAgICAgICAvLyBMaW1pdCBwZXJjZW50YWdlIHRvIHRoZSAwIC0gMTAwIHJhbmdlXG4gICAgICAgICAgICB0byA9IGxpbWl0KHRvKTtcblxuICAgICAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGlmIGhhbmRsZSBjYW4ndCBtb3ZlXG4gICAgICAgICAgICBpZiAodG8gPT09IHJlZmVyZW5jZVtoYW5kbGVOdW1iZXJdICYmICFnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXNlcyBzbGlkZXIgb3JpZW50YXRpb24gdG8gY3JlYXRlIENTUyBydWxlcy4gYSA9IGJhc2UgdmFsdWU7XG4gICAgICAgIGZ1bmN0aW9uIGluUnVsZU9yZGVyKHYsIGEpIHtcbiAgICAgICAgICAgIHZhciBvID0gb3B0aW9ucy5vcnQ7XG4gICAgICAgICAgICByZXR1cm4gKG8gPyBhIDogdikgKyBcIiwgXCIgKyAobyA/IHYgOiBhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmVzIGhhbmRsZShzKSBieSBhIHBlcmNlbnRhZ2VcbiAgICAgICAgLy8gKGJvb2wsICUgdG8gbW92ZSwgWyUgd2hlcmUgaGFuZGxlIHN0YXJ0ZWQsIC4uLl0sIFtpbmRleCBpbiBzY29wZV9IYW5kbGVzLCAuLi5dKVxuICAgICAgICBmdW5jdGlvbiBtb3ZlSGFuZGxlcyh1cHdhcmQsIHByb3Bvc2FsLCBsb2NhdGlvbnMsIGhhbmRsZU51bWJlcnMpIHtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbHMgPSBsb2NhdGlvbnMuc2xpY2UoKTtcblxuICAgICAgICAgICAgdmFyIGIgPSBbIXVwd2FyZCwgdXB3YXJkXTtcbiAgICAgICAgICAgIHZhciBmID0gW3Vwd2FyZCwgIXVwd2FyZF07XG5cbiAgICAgICAgICAgIC8vIENvcHkgaGFuZGxlTnVtYmVycyBzbyB3ZSBkb24ndCBjaGFuZ2UgdGhlIGRhdGFzZXRcbiAgICAgICAgICAgIGhhbmRsZU51bWJlcnMgPSBoYW5kbGVOdW1iZXJzLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSB3aGljaCBoYW5kbGUgaXMgJ2xlYWRpbmcnLlxuICAgICAgICAgICAgLy8gSWYgdGhhdCBvbmUgY2FuJ3QgbW92ZSB0aGUgc2Vjb25kIGNhbid0IGVpdGhlci5cbiAgICAgICAgICAgIGlmICh1cHdhcmQpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RlcCAxOiBnZXQgdGhlIG1heGltdW0gcGVyY2VudGFnZSB0aGF0IGFueSBvZiB0aGUgaGFuZGxlcyBjYW4gbW92ZVxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIsIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gY2hlY2tIYW5kbGVQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBiW29dLFxuICAgICAgICAgICAgICAgICAgICAgICAgZltvXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBvbmUgb2YgdGhlIGhhbmRsZXMgY2FuJ3QgbW92ZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwgPSB0byAtIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzW2hhbmRsZU51bWJlcl0gPSB0bztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB1c2luZyBvbmUgaGFuZGxlLCBjaGVjayBiYWNrd2FyZCBBTkQgZm9yd2FyZFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYiA9IGYgPSBbdHJ1ZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBTdGVwIDI6IFRyeSB0byBzZXQgdGhlIGhhbmRsZXMgd2l0aCB0aGUgZm91bmQgcGVyY2VudGFnZVxuICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlciwgbykge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgbG9jYXRpb25zW2hhbmRsZU51bWJlcl0gKyBwcm9wb3NhbCwgYltvXSwgZltvXSkgfHwgc3RhdGU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gU3RlcCAzOiBJZiBhIGhhbmRsZSBtb3ZlZCwgZmlyZSBldmVudHNcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUYWtlcyBhIGJhc2UgdmFsdWUgYW5kIGFuIG9mZnNldC4gVGhpcyBvZmZzZXQgaXMgdXNlZCBmb3IgdGhlIGNvbm5lY3QgYmFyIHNpemUuXG4gICAgICAgIC8vIEluIHRoZSBpbml0aWFsIGRlc2lnbiBmb3IgdGhpcyBmZWF0dXJlLCB0aGUgb3JpZ2luIGVsZW1lbnQgd2FzIDElIHdpZGUuXG4gICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIGEgcm91bmRpbmcgYnVnIGluIENocm9tZSBtYWtlcyBpdCBpbXBvc3NpYmxlIHRvIGltcGxlbWVudCB0aGlzIGZlYXR1cmVcbiAgICAgICAgLy8gaW4gdGhpcyBtYW5uZXI6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTc5ODIyM1xuICAgICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1EaXJlY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlyID8gMTAwIC0gYSAtIGIgOiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlcyBzY29wZV9Mb2NhdGlvbnMgYW5kIHNjb3BlX1ZhbHVlcywgdXBkYXRlcyB2aXN1YWwgc3RhdGVcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlSGFuZGxlUG9zaXRpb24oaGFuZGxlTnVtYmVyLCB0bykge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGxvY2F0aW9ucy5cbiAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID0gdG87XG5cbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIHRoZSBzbGlkZXIgc3RlcHBpbmcvcmFuZ2UuXG4gICAgICAgICAgICBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXSA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyh0byk7XG5cbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IDEwICogKHRyYW5zZm9ybURpcmVjdGlvbih0bywgMCkgLSBzY29wZV9EaXJPZmZzZXQpO1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVJ1bGUgPSBcInRyYW5zbGF0ZShcIiArIGluUnVsZU9yZGVyKHRyYW5zbGF0aW9uICsgXCIlXCIsIFwiMFwiKSArIFwiKVwiO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzW2hhbmRsZU51bWJlcl0uc3R5bGVbb3B0aW9ucy50cmFuc2Zvcm1SdWxlXSA9IHRyYW5zbGF0ZVJ1bGU7XG5cbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGVzIGJlZm9yZSB0aGUgc2xpZGVyIG1pZGRsZSBhcmUgc3RhY2tlZCBsYXRlciA9IGhpZ2hlcixcbiAgICAgICAgLy8gSGFuZGxlcyBhZnRlciB0aGUgbWlkZGxlIGxhdGVyIGlzIGxvd2VyXG4gICAgICAgIC8vIFtbN10gWzhdIC4uLi4uLi4uLi4gfCAuLi4uLi4uLi4uIFs1XSBbNF1cbiAgICAgICAgZnVuY3Rpb24gc2V0WmluZGV4KCkge1xuICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIHZhciBkaXIgPSBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSA+IDUwID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgIHZhciB6SW5kZXggPSAzICsgKHNjb3BlX0hhbmRsZXMubGVuZ3RoICsgZGlyICogaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzW2hhbmRsZU51bWJlcl0uc3R5bGUuekluZGV4ID0gekluZGV4O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZXN0IHN1Z2dlc3RlZCB2YWx1ZXMgYW5kIGFwcGx5IG1hcmdpbiwgc3RlcC5cbiAgICAgICAgZnVuY3Rpb24gc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgdG8sIGxvb2tCYWNrd2FyZCwgbG9va0ZvcndhcmQpIHtcbiAgICAgICAgICAgIHRvID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGhhbmRsZU51bWJlciwgdG8sIGxvb2tCYWNrd2FyZCwgbG9va0ZvcndhcmQsIGZhbHNlKTtcblxuICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdXBkYXRlSGFuZGxlUG9zaXRpb24oaGFuZGxlTnVtYmVyLCB0byk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlcyBzdHlsZSBhdHRyaWJ1dGUgZm9yIGNvbm5lY3Qgbm9kZXNcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ29ubmVjdChpbmRleCkge1xuICAgICAgICAgICAgLy8gU2tpcCBjb25uZWN0cyBzZXQgdG8gZmFsc2VcbiAgICAgICAgICAgIGlmICghc2NvcGVfQ29ubmVjdHNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbCA9IDA7XG4gICAgICAgICAgICB2YXIgaCA9IDEwMDtcblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbCA9IHNjb3BlX0xvY2F0aW9uc1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IHNjb3BlX0Nvbm5lY3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBoID0gc2NvcGVfTG9jYXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gV2UgdXNlIHR3byBydWxlczpcbiAgICAgICAgICAgIC8vICd0cmFuc2xhdGUnIHRvIGNoYW5nZSB0aGUgbGVmdC90b3Agb2Zmc2V0O1xuICAgICAgICAgICAgLy8gJ3NjYWxlJyB0byBjaGFuZ2UgdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50O1xuICAgICAgICAgICAgLy8gQXMgdGhlIGVsZW1lbnQgaGFzIGEgd2lkdGggb2YgMTAwJSwgYSB0cmFuc2xhdGlvbiBvZiAxMDAlIGlzIGVxdWFsIHRvIDEwMCUgb2YgdGhlIHBhcmVudCAoLm5vVWktYmFzZSlcbiAgICAgICAgICAgIHZhciBjb25uZWN0V2lkdGggPSBoIC0gbDtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVSdWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2Zvcm1EaXJlY3Rpb24obCwgY29ubmVjdFdpZHRoKSArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcbiAgICAgICAgICAgIHZhciBzY2FsZVJ1bGUgPSBcInNjYWxlKFwiICsgaW5SdWxlT3JkZXIoY29ubmVjdFdpZHRoIC8gMTAwLCBcIjFcIikgKyBcIilcIjtcblxuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHNbaW5kZXhdLnN0eWxlW29wdGlvbnMudHJhbnNmb3JtUnVsZV0gPSB0cmFuc2xhdGVSdWxlICsgXCIgXCIgKyBzY2FsZVJ1bGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQYXJzZXMgdmFsdWUgcGFzc2VkIHRvIC5zZXQgbWV0aG9kLiBSZXR1cm5zIGN1cnJlbnQgdmFsdWUgaWYgbm90IHBhcnNlLWFibGUuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVUb1ZhbHVlKHRvLCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIC8vIFNldHRpbmcgd2l0aCBudWxsIGluZGljYXRlcyBhbiAnaWdub3JlJy5cbiAgICAgICAgICAgIC8vIElucHV0dGluZyAnZmFsc2UnIGlzIGludmFsaWQuXG4gICAgICAgICAgICBpZiAodG8gPT09IG51bGwgfHwgdG8gPT09IGZhbHNlIHx8IHRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGEgZm9ybWF0dGVkIG51bWJlciB3YXMgcGFzc2VkLCBhdHRlbXB0IHRvIGRlY29kZSBpdC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB0byA9IFN0cmluZyh0byk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvID0gb3B0aW9ucy5mb3JtYXQuZnJvbSh0byk7XG4gICAgICAgICAgICB0byA9IHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcodG8pO1xuXG4gICAgICAgICAgICAvLyBJZiBwYXJzaW5nIHRoZSBudW1iZXIgZmFpbGVkLCB1c2UgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlIHx8IGlzTmFOKHRvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlU2V0KGlucHV0LCBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBhc0FycmF5KGlucHV0KTtcbiAgICAgICAgICAgIHZhciBpc0luaXQgPSBzY29wZV9Mb2NhdGlvbnNbMF0gPT09IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgLy8gRXZlbnQgZmlyZXMgYnkgZGVmYXVsdFxuICAgICAgICAgICAgZmlyZVNldEV2ZW50ID0gZmlyZVNldEV2ZW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFmaXJlU2V0RXZlbnQ7XG5cbiAgICAgICAgICAgIC8vIEFuaW1hdGlvbiBpcyBvcHRpb25hbC5cbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgaW5pdGlhbCB2YWx1ZXMgd2VyZSBzZXQgYmVmb3JlIHVzaW5nIGFuaW1hdGVkIHBsYWNlbWVudC5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGUgJiYgIWlzSW5pdCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzRm9yKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCwgb3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpcnN0IHBhc3MsIHdpdGhvdXQgbG9va0FoZWFkIGJ1dCB3aXRoIGxvb2tCYWNrd2FyZC4gVmFsdWVzIGFyZSBzZXQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHJlc29sdmVUb1ZhbHVlKHZhbHVlc1toYW5kbGVOdW1iZXJdLCBoYW5kbGVOdW1iZXIpLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGkgPSBzY29wZV9IYW5kbGVOdW1iZXJzLmxlbmd0aCA9PT0gMSA/IDAgOiAxO1xuXG4gICAgICAgICAgICAvLyBTZWNvbmRhcnkgcGFzc2VzLiBOb3cgdGhhdCBhbGwgYmFzZSB2YWx1ZXMgYXJlIHNldCwgYXBwbHkgY29uc3RyYWludHMuXG4gICAgICAgICAgICAvLyBJdGVyYXRlIGFsbCBoYW5kbGVzIHRvIGVuc3VyZSBjb25zdHJhaW50cyBhcmUgYXBwbGllZCBmb3IgdGhlIGVudGlyZSBzbGlkZXIgKElzc3VlICMxMDA5KVxuICAgICAgICAgICAgZm9yICg7IGkgPCBzY29wZV9IYW5kbGVOdW1iZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFppbmRleCgpO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgICAgICAvLyBGaXJlIHRoZSBldmVudCBvbmx5IGZvciBoYW5kbGVzIHRoYXQgcmVjZWl2ZWQgYSBuZXcgdmFsdWUsIGFzIHBlciAjNTc5XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1toYW5kbGVOdW1iZXJdICE9PSBudWxsICYmIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IHNsaWRlciB0byBpbml0aWFsIHZhbHVlc1xuICAgICAgICBmdW5jdGlvbiB2YWx1ZVJlc2V0KGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCwgZmlyZVNldEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB2YWx1ZSBmb3IgYSBzaW5nbGUgaGFuZGxlXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlU2V0SGFuZGxlKGhhbmRsZU51bWJlciwgdmFsdWUsIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIG51bWVyaWMgaW5wdXRcbiAgICAgICAgICAgIGhhbmRsZU51bWJlciA9IE51bWJlcihoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICBpZiAoIShoYW5kbGVOdW1iZXIgPj0gMCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVOdW1iZXJzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IGludmFsaWQgaGFuZGxlIG51bWJlciwgZ290OiBcIiArIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvb2sgYm90aCBiYWNrd2FyZCBhbmQgZm9yd2FyZCwgc2luY2Ugd2UgZG9uJ3Qgd2FudCB0aGlzIGhhbmRsZSB0byBcInB1c2hcIiBvdGhlciBoYW5kbGVzICgjOTYwKTtcbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHJlc29sdmVUb1ZhbHVlKHZhbHVlLCBoYW5kbGVOdW1iZXIpLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIGlmIChmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0aGUgc2xpZGVyIHZhbHVlLlxuICAgICAgICBmdW5jdGlvbiB2YWx1ZUdldCgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBzY29wZV9WYWx1ZXMubWFwKG9wdGlvbnMuZm9ybWF0LnRvKTtcblxuICAgICAgICAgICAgLy8gSWYgb25seSBvbmUgaGFuZGxlIGlzIHVzZWQsIHJldHVybiBhIHNpbmdsZSB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1swXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZXMgY2xhc3NlcyBmcm9tIHRoZSByb290IGFuZCBlbXB0aWVzIGl0LlxuICAgICAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY3NzQ2xhc3Nlcykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5jc3NDbGFzc2VzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzW2tleV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9UYXJnZXQucmVtb3ZlQ2hpbGQoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgc2NvcGVfVGFyZ2V0Lm5vVWlTbGlkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXROZXh0U3RlcHNGb3JIYW5kbGUoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHZhciBuZWFyYnlTdGVwcyA9IHNjb3BlX1NwZWN0cnVtLmdldE5lYXJieVN0ZXBzKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgdmFyIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0ZXA7XG4gICAgICAgICAgICB2YXIgZGVjcmVtZW50ID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gSWYgc25hcHBlZCwgZGlyZWN0bHkgdXNlIGRlZmluZWQgc3RlcCB2YWx1ZVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc25hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlIC0gbmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5zdGFydFZhbHVlIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWUgfHwgbnVsbFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBuZXh0IHZhbHVlIGluIHRoaXMgc3RlcCBtb3ZlcyBpbnRvIHRoZSBuZXh0IHN0ZXAsXG4gICAgICAgICAgICAvLyB0aGUgaW5jcmVtZW50IGlzIHRoZSBzdGFydCBvZiB0aGUgbmV4dCBzdGVwIC0gdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgIGlmIChpbmNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICsgaW5jcmVtZW50ID4gbmVhcmJ5U3RlcHMuc3RlcEFmdGVyLnN0YXJ0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbmVhcmJ5U3RlcHMuc3RlcEFmdGVyLnN0YXJ0VmFsdWUgLSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBiZXlvbmQgdGhlIHN0YXJ0aW5nIHBvaW50XG4gICAgICAgICAgICBpZiAodmFsdWUgPiBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RlcDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5zdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBhIGhhbmRsZSBpcyBhdCB0aGUgc3RhcnQgb2YgYSBzdGVwLCBpdCBhbHdheXMgc3RlcHMgYmFjayBpbnRvIHRoZSBwcmV2aW91cyBzdGVwIGZpcnN0XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSB2YWx1ZSAtIG5lYXJieVN0ZXBzLnN0ZXBCZWZvcmUuaGlnaGVzdFN0ZXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5vdywgaWYgYXQgdGhlIHNsaWRlciBlZGdlcywgdGhlcmUgaXMgbm8gaW4vZGVjcmVtZW50XG4gICAgICAgICAgICBpZiAobG9jYXRpb24gPT09IDEwMCkge1xuICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXMgcGVyICMzOTEsIHRoZSBjb21wYXJpc29uIGZvciB0aGUgZGVjcmVtZW50IHN0ZXAgY2FuIGhhdmUgc29tZSByb3VuZGluZyBpc3N1ZXMuXG4gICAgICAgICAgICB2YXIgc3RlcERlY2ltYWxzID0gc2NvcGVfU3BlY3RydW0uY291bnRTdGVwRGVjaW1hbHMoKTtcblxuICAgICAgICAgICAgLy8gUm91bmQgcGVyICMzOTFcbiAgICAgICAgICAgIGlmIChpbmNyZW1lbnQgIT09IG51bGwgJiYgaW5jcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IE51bWJlcihpbmNyZW1lbnQudG9GaXhlZChzdGVwRGVjaW1hbHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRlY3JlbWVudCAhPT0gbnVsbCAmJiBkZWNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gTnVtYmVyKGRlY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gW2RlY3JlbWVudCwgaW5jcmVtZW50XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBzdGVwIHNpemUgZm9yIHRoZSBzbGlkZXIuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5leHRTdGVwcygpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29wZV9IYW5kbGVOdW1iZXJzLm1hcChnZXROZXh0U3RlcHNGb3JIYW5kbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlYWJsZTogbWFyZ2luLCBsaW1pdCwgcGFkZGluZywgc3RlcCwgcmFuZ2UsIGFuaW1hdGUsIHNuYXBcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhvcHRpb25zVG9VcGRhdGUsIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgLy8gU3BlY3RydW0gaXMgY3JlYXRlZCB1c2luZyB0aGUgcmFuZ2UsIHNuYXAsIGRpcmVjdGlvbiBhbmQgc3RlcCBvcHRpb25zLlxuICAgICAgICAgICAgLy8gJ3NuYXAnIGFuZCAnc3RlcCcgY2FuIGJlIHVwZGF0ZWQuXG4gICAgICAgICAgICAvLyBJZiAnc25hcCcgYW5kICdzdGVwJyBhcmUgbm90IHBhc3NlZCwgdGhleSBzaG91bGQgcmVtYWluIHVuY2hhbmdlZC5cbiAgICAgICAgICAgIHZhciB2ID0gdmFsdWVHZXQoKTtcblxuICAgICAgICAgICAgdmFyIHVwZGF0ZUFibGUgPSBbXG4gICAgICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgICAgICBcImxpbWl0XCIsXG4gICAgICAgICAgICAgICAgXCJwYWRkaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJyYW5nZVwiLFxuICAgICAgICAgICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICAgICAgICAgIFwic25hcFwiLFxuICAgICAgICAgICAgICAgIFwic3RlcFwiLFxuICAgICAgICAgICAgICAgIFwiZm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgXCJwaXBzXCIsXG4gICAgICAgICAgICAgICAgXCJ0b29sdGlwc1wiXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAvLyBPbmx5IGNoYW5nZSBvcHRpb25zIHRoYXQgd2UncmUgYWN0dWFsbHkgcGFzc2VkIHRvIHVwZGF0ZS5cbiAgICAgICAgICAgIHVwZGF0ZUFibGUuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHVuZGVmaW5lZC4gbnVsbCByZW1vdmVzIHRoZSB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1RvVXBkYXRlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxPcHRpb25zW25hbWVdID0gb3B0aW9uc1RvVXBkYXRlW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIExvYWQgbmV3IG9wdGlvbnMgaW50byB0aGUgc2xpZGVyIHN0YXRlXG4gICAgICAgICAgICB1cGRhdGVBYmxlLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVG9VcGRhdGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW25hbWVdID0gbmV3T3B0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2NvcGVfU3BlY3RydW0gPSBuZXdPcHRpb25zLnNwZWN0cnVtO1xuXG4gICAgICAgICAgICAvLyBMaW1pdCwgbWFyZ2luIGFuZCBwYWRkaW5nIGRlcGVuZCBvbiB0aGUgc3BlY3RydW0gYnV0IGFyZSBzdG9yZWQgb3V0c2lkZSBvZiBpdC4gKCM2NzcpXG4gICAgICAgICAgICBvcHRpb25zLm1hcmdpbiA9IG5ld09wdGlvbnMubWFyZ2luO1xuICAgICAgICAgICAgb3B0aW9ucy5saW1pdCA9IG5ld09wdGlvbnMubGltaXQ7XG4gICAgICAgICAgICBvcHRpb25zLnBhZGRpbmcgPSBuZXdPcHRpb25zLnBhZGRpbmc7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwaXBzLCByZW1vdmVzIGV4aXN0aW5nLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGlwcykge1xuICAgICAgICAgICAgICAgIHBpcHMob3B0aW9ucy5waXBzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlUGlwcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdG9vbHRpcHMsIHJlbW92ZXMgZXhpc3RpbmcuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50b29sdGlwcykge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEludmFsaWRhdGUgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgc28gdmFsdWVTZXQgZm9yY2VzIGFuIHVwZGF0ZS5cbiAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9uc1RvVXBkYXRlLnN0YXJ0IHx8IHYsIGZpcmVTZXRFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXphdGlvbiBzdGVwc1xuICAgICAgICBmdW5jdGlvbiBzZXR1cFNsaWRlcigpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgYmFzZSBlbGVtZW50LCBpbml0aWFsaXplIEhUTUwgYW5kIHNldCBjbGFzc2VzLlxuICAgICAgICAgICAgLy8gQWRkIGhhbmRsZXMgYW5kIGNvbm5lY3QgZWxlbWVudHMuXG4gICAgICAgICAgICBzY29wZV9CYXNlID0gYWRkU2xpZGVyKHNjb3BlX1RhcmdldCk7XG5cbiAgICAgICAgICAgIGFkZEVsZW1lbnRzKG9wdGlvbnMuY29ubmVjdCwgc2NvcGVfQmFzZSk7XG5cbiAgICAgICAgICAgIC8vIEF0dGFjaCB1c2VyIGV2ZW50cy5cbiAgICAgICAgICAgIGJpbmRTbGlkZXJFdmVudHMob3B0aW9ucy5ldmVudHMpO1xuXG4gICAgICAgICAgICAvLyBVc2UgdGhlIHB1YmxpYyB2YWx1ZSBtZXRob2QgdG8gc2V0IHRoZSBzdGFydCB2YWx1ZXMuXG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zLnN0YXJ0KTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGlwcykge1xuICAgICAgICAgICAgICAgIHBpcHMob3B0aW9ucy5waXBzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhcmlhKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXR1cFNsaWRlcigpO1xuXG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU1VudXNlZEdsb2JhbFN5bWJvbHNcbiAgICAgICAgc2NvcGVfU2VsZiA9IHtcbiAgICAgICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgICAgICAgICBzdGVwczogZ2V0TmV4dFN0ZXBzLFxuICAgICAgICAgICAgb246IGJpbmRFdmVudCxcbiAgICAgICAgICAgIG9mZjogcmVtb3ZlRXZlbnQsXG4gICAgICAgICAgICBnZXQ6IHZhbHVlR2V0LFxuICAgICAgICAgICAgc2V0OiB2YWx1ZVNldCxcbiAgICAgICAgICAgIHNldEhhbmRsZTogdmFsdWVTZXRIYW5kbGUsXG4gICAgICAgICAgICByZXNldDogdmFsdWVSZXNldCxcbiAgICAgICAgICAgIC8vIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZywgZG9uJ3QgdXNlIHRoaXMgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICAgICAgICAgIF9fbW92ZUhhbmRsZXM6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlcyhhLCBiLCBzY29wZV9Mb2NhdGlvbnMsIGMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9yaWdpbmFsT3B0aW9ucywgLy8gSXNzdWUgIzYwMCwgIzY3OFxuICAgICAgICAgICAgdXBkYXRlT3B0aW9uczogdXBkYXRlT3B0aW9ucyxcbiAgICAgICAgICAgIHRhcmdldDogc2NvcGVfVGFyZ2V0LCAvLyBJc3N1ZSAjNTk3XG4gICAgICAgICAgICByZW1vdmVQaXBzOiByZW1vdmVQaXBzLFxuICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHM6IHJlbW92ZVRvb2x0aXBzLFxuICAgICAgICAgICAgcGlwczogcGlwcyAvLyBJc3N1ZSAjNTk0XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNjb3BlX1NlbGY7XG4gICAgfVxuXG4gICAgLy8gUnVuIHRoZSBzdGFuZGFyZCBpbml0aWFsaXplclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUodGFyZ2V0LCBvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgIXRhcmdldC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBjcmVhdGUgcmVxdWlyZXMgYSBzaW5nbGUgZWxlbWVudCwgZ290OiBcIiArIHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiB0aGUgc2xpZGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLlxuICAgICAgICBpZiAodGFyZ2V0Lm5vVWlTbGlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogU2xpZGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3QgdGhlIG9wdGlvbnMgYW5kIGNyZWF0ZSB0aGUgc2xpZGVyIGVudmlyb25tZW50O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGFwaSA9IHNjb3BlKHRhcmdldCwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICB0YXJnZXQubm9VaVNsaWRlciA9IGFwaTtcblxuICAgICAgICByZXR1cm4gYXBpO1xuICAgIH1cblxuICAgIC8vIFVzZSBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIGZ1bmN0aW9uIGZvciBmdXR1cmUgZXhwYW5kYWJpbGl0eTtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcsIGRvbid0IHVzZSB0aGlzIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAgICAgIF9fc3BlY3RydW06IFNwZWN0cnVtLFxuICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICBjcmVhdGU6IGluaXRpYWxpemVcbiAgICB9O1xufSk7XG4iLCIoZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxyXG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAvLyBOb2RlL0NvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXHJcbiAgICB3aW5kb3cud051bWIgPSBmYWN0b3J5KCk7XHJcbiAgfVxyXG59KShmdW5jdGlvbigpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgdmFyIEZvcm1hdE9wdGlvbnMgPSBbXHJcbiAgICBcImRlY2ltYWxzXCIsXHJcbiAgICBcInRob3VzYW5kXCIsXHJcbiAgICBcIm1hcmtcIixcclxuICAgIFwicHJlZml4XCIsXHJcbiAgICBcInN1ZmZpeFwiLFxyXG4gICAgXCJlbmNvZGVyXCIsXHJcbiAgICBcImRlY29kZXJcIixcclxuICAgIFwibmVnYXRpdmVCZWZvcmVcIixcclxuICAgIFwibmVnYXRpdmVcIixcclxuICAgIFwiZWRpdFwiLFxyXG4gICAgXCJ1bmRvXCJcclxuICBdO1xyXG5cclxuICAvLyBHZW5lcmFsXHJcblxyXG4gIC8vIFJldmVyc2UgYSBzdHJpbmdcclxuICBmdW5jdGlvbiBzdHJSZXZlcnNlKGEpIHtcclxuICAgIHJldHVybiBhXHJcbiAgICAgIC5zcGxpdChcIlwiKVxyXG4gICAgICAucmV2ZXJzZSgpXHJcbiAgICAgIC5qb2luKFwiXCIpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggYSBzcGVjaWZpZWQgcHJlZml4LlxyXG4gIGZ1bmN0aW9uIHN0clN0YXJ0c1dpdGgoaW5wdXQsIG1hdGNoKSB7XHJcbiAgICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKDAsIG1hdGNoLmxlbmd0aCkgPT09IG1hdGNoO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaXMgYSBzdHJpbmcgZW5kcyBpbiBhIHNwZWNpZmllZCBzdWZmaXguXHJcbiAgZnVuY3Rpb24gc3RyRW5kc1dpdGgoaW5wdXQsIG1hdGNoKSB7XHJcbiAgICByZXR1cm4gaW5wdXQuc2xpY2UoLTEgKiBtYXRjaC5sZW5ndGgpID09PSBtYXRjaDtcclxuICB9XHJcblxyXG4gIC8vIFRocm93IGFuIGVycm9yIGlmIGZvcm1hdHRpbmcgb3B0aW9ucyBhcmUgaW5jb21wYXRpYmxlLlxyXG4gIGZ1bmN0aW9uIHRocm93RXF1YWxFcnJvcihGLCBhLCBiKSB7XHJcbiAgICBpZiAoKEZbYV0gfHwgRltiXSkgJiYgRlthXSA9PT0gRltiXSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiBhIG51bWJlciBpcyBmaW5pdGUgYW5kIG5vdCBOYU5cclxuICBmdW5jdGlvbiBpc1ZhbGlkTnVtYmVyKGlucHV0KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKGlucHV0KTtcclxuICB9XHJcblxyXG4gIC8vIFByb3ZpZGUgcm91bmRpbmctYWNjdXJhdGUgdG9GaXhlZCBtZXRob2QuXHJcbiAgLy8gQm9ycm93ZWQ6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMzIzMzMwLzc3NTI2NVxyXG4gIGZ1bmN0aW9uIHRvRml4ZWQodmFsdWUsIGV4cCkge1xyXG4gICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KFwiZVwiKTtcclxuICAgIHZhbHVlID0gTWF0aC5yb3VuZCgrKHZhbHVlWzBdICsgXCJlXCIgKyAodmFsdWVbMV0gPyArdmFsdWVbMV0gKyBleHAgOiBleHApKSk7XHJcbiAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJlXCIpO1xyXG4gICAgcmV0dXJuICgrKHZhbHVlWzBdICsgXCJlXCIgKyAodmFsdWVbMV0gPyArdmFsdWVbMV0gLSBleHAgOiAtZXhwKSkpLnRvRml4ZWQoZXhwKTtcclxuICB9XHJcblxyXG4gIC8vIEZvcm1hdHRpbmdcclxuXHJcbiAgLy8gQWNjZXB0IGEgbnVtYmVyIGFzIGlucHV0LCBvdXRwdXQgZm9ybWF0dGVkIHN0cmluZy5cclxuICBmdW5jdGlvbiBmb3JtYXRUbyhcclxuICAgIGRlY2ltYWxzLFxyXG4gICAgdGhvdXNhbmQsXHJcbiAgICBtYXJrLFxyXG4gICAgcHJlZml4LFxyXG4gICAgc3VmZml4LFxyXG4gICAgZW5jb2RlcixcclxuICAgIGRlY29kZXIsXHJcbiAgICBuZWdhdGl2ZUJlZm9yZSxcclxuICAgIG5lZ2F0aXZlLFxyXG4gICAgZWRpdCxcclxuICAgIHVuZG8sXHJcbiAgICBpbnB1dFxyXG4gICkge1xyXG4gICAgdmFyIG9yaWdpbmFsSW5wdXQgPSBpbnB1dCxcclxuICAgICAgaW5wdXRJc05lZ2F0aXZlLFxyXG4gICAgICBpbnB1dFBpZWNlcyxcclxuICAgICAgaW5wdXRCYXNlLFxyXG4gICAgICBpbnB1dERlY2ltYWxzID0gXCJcIixcclxuICAgICAgb3V0cHV0ID0gXCJcIjtcclxuXHJcbiAgICAvLyBBcHBseSB1c2VyIGVuY29kZXIgdG8gdGhlIGlucHV0LlxyXG4gICAgLy8gRXhwZWN0ZWQgb3V0Y29tZTogbnVtYmVyLlxyXG4gICAgaWYgKGVuY29kZXIpIHtcclxuICAgICAgaW5wdXQgPSBlbmNvZGVyKGlucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdG9wIGlmIG5vIHZhbGlkIG51bWJlciB3YXMgcHJvdmlkZWQsIHRoZSBudW1iZXIgaXMgaW5maW5pdGUgb3IgTmFOLlxyXG4gICAgaWYgKCFpc1ZhbGlkTnVtYmVyKGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUm91bmRpbmcgYXdheSBkZWNpbWFscyBtaWdodCBjYXVzZSBhIHZhbHVlIG9mIC0wXHJcbiAgICAvLyB3aGVuIHVzaW5nIHZlcnkgc21hbGwgcmFuZ2VzLiBSZW1vdmUgdGhvc2UgY2FzZXMuXHJcbiAgICBpZiAoZGVjaW1hbHMgIT09IGZhbHNlICYmIHBhcnNlRmxvYXQoaW5wdXQudG9GaXhlZChkZWNpbWFscykpID09PSAwKSB7XHJcbiAgICAgIGlucHV0ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGb3JtYXR0aW5nIGlzIGRvbmUgb24gYWJzb2x1dGUgbnVtYmVycyxcclxuICAgIC8vIGRlY29yYXRlZCBieSBhbiBvcHRpb25hbCBuZWdhdGl2ZSBzeW1ib2wuXHJcbiAgICBpZiAoaW5wdXQgPCAwKSB7XHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSA9IHRydWU7XHJcbiAgICAgIGlucHV0ID0gTWF0aC5hYnMoaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlZHVjZSB0aGUgbnVtYmVyIG9mIGRlY2ltYWxzIHRvIHRoZSBzcGVjaWZpZWQgb3B0aW9uLlxyXG4gICAgaWYgKGRlY2ltYWxzICE9PSBmYWxzZSkge1xyXG4gICAgICBpbnB1dCA9IHRvRml4ZWQoaW5wdXQsIGRlY2ltYWxzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcmFuc2Zvcm0gdGhlIG51bWJlciBpbnRvIGEgc3RyaW5nLCBzbyBpdCBjYW4gYmUgc3BsaXQuXHJcbiAgICBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XHJcblxyXG4gICAgLy8gQnJlYWsgdGhlIG51bWJlciBvbiB0aGUgZGVjaW1hbCBzZXBhcmF0b3IuXHJcbiAgICBpZiAoaW5wdXQuaW5kZXhPZihcIi5cIikgIT09IC0xKSB7XHJcbiAgICAgIGlucHV0UGllY2VzID0gaW5wdXQuc3BsaXQoXCIuXCIpO1xyXG5cclxuICAgICAgaW5wdXRCYXNlID0gaW5wdXRQaWVjZXNbMF07XHJcblxyXG4gICAgICBpZiAobWFyaykge1xyXG4gICAgICAgIGlucHV0RGVjaW1hbHMgPSBtYXJrICsgaW5wdXRQaWVjZXNbMV07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIElmIGl0IGlzbid0IHNwbGl0LCB0aGUgZW50aXJlIG51bWJlciB3aWxsIGRvLlxyXG4gICAgICBpbnB1dEJhc2UgPSBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHcm91cCBudW1iZXJzIGluIHNldHMgb2YgdGhyZWUuXHJcbiAgICBpZiAodGhvdXNhbmQpIHtcclxuICAgICAgaW5wdXRCYXNlID0gc3RyUmV2ZXJzZShpbnB1dEJhc2UpLm1hdGNoKC8uezEsM30vZyk7XHJcbiAgICAgIGlucHV0QmFzZSA9IHN0clJldmVyc2UoaW5wdXRCYXNlLmpvaW4oc3RyUmV2ZXJzZSh0aG91c2FuZCkpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBwcmVmaXggd2l0aCBuZWdhdGlvbiBzeW1ib2wuXHJcbiAgICBpZiAoaW5wdXRJc05lZ2F0aXZlICYmIG5lZ2F0aXZlQmVmb3JlKSB7XHJcbiAgICAgIG91dHB1dCArPSBuZWdhdGl2ZUJlZm9yZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcmVmaXggdGhlIG51bWJlclxyXG4gICAgaWYgKHByZWZpeCkge1xyXG4gICAgICBvdXRwdXQgKz0gcHJlZml4O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vcm1hbCBuZWdhdGl2ZSBvcHRpb24gY29tZXMgYWZ0ZXIgdGhlIHByZWZpeC4gRGVmYXVsdHMgdG8gJy0nLlxyXG4gICAgaWYgKGlucHV0SXNOZWdhdGl2ZSAmJiBuZWdhdGl2ZSkge1xyXG4gICAgICBvdXRwdXQgKz0gbmVnYXRpdmU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXBwZW5kIHRoZSBhY3R1YWwgbnVtYmVyLlxyXG4gICAgb3V0cHV0ICs9IGlucHV0QmFzZTtcclxuICAgIG91dHB1dCArPSBpbnB1dERlY2ltYWxzO1xyXG5cclxuICAgIC8vIEFwcGx5IHRoZSBzdWZmaXguXHJcbiAgICBpZiAoc3VmZml4KSB7XHJcbiAgICAgIG91dHB1dCArPSBzdWZmaXg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUnVuIHRoZSBvdXRwdXQgdGhyb3VnaCBhIHVzZXItc3BlY2lmaWVkIHBvc3QtZm9ybWF0dGVyLlxyXG4gICAgaWYgKGVkaXQpIHtcclxuICAgICAgb3V0cHV0ID0gZWRpdChvdXRwdXQsIG9yaWdpbmFsSW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsbCBkb25lLlxyXG4gICAgcmV0dXJuIG91dHB1dDtcclxuICB9XHJcblxyXG4gIC8vIEFjY2VwdCBhIHN0aW5nIGFzIGlucHV0LCBvdXRwdXQgZGVjb2RlZCBudW1iZXIuXHJcbiAgZnVuY3Rpb24gZm9ybWF0RnJvbShcclxuICAgIGRlY2ltYWxzLFxyXG4gICAgdGhvdXNhbmQsXHJcbiAgICBtYXJrLFxyXG4gICAgcHJlZml4LFxyXG4gICAgc3VmZml4LFxyXG4gICAgZW5jb2RlcixcclxuICAgIGRlY29kZXIsXHJcbiAgICBuZWdhdGl2ZUJlZm9yZSxcclxuICAgIG5lZ2F0aXZlLFxyXG4gICAgZWRpdCxcclxuICAgIHVuZG8sXHJcbiAgICBpbnB1dFxyXG4gICkge1xyXG4gICAgdmFyIG9yaWdpbmFsSW5wdXQgPSBpbnB1dCxcclxuICAgICAgaW5wdXRJc05lZ2F0aXZlLFxyXG4gICAgICBvdXRwdXQgPSBcIlwiO1xyXG5cclxuICAgIC8vIFVzZXIgZGVmaW5lZCBwcmUtZGVjb2Rlci4gUmVzdWx0IG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nLlxyXG4gICAgaWYgKHVuZG8pIHtcclxuICAgICAgaW5wdXQgPSB1bmRvKGlucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUZXN0IHRoZSBpbnB1dC4gQ2FuJ3QgYmUgZW1wdHkuXHJcbiAgICBpZiAoIWlucHV0IHx8IHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhlIHN0cmluZyBzdGFydHMgd2l0aCB0aGUgbmVnYXRpdmVCZWZvcmUgdmFsdWU6IHJlbW92ZSBpdC5cclxuICAgIC8vIFJlbWVtYmVyIGlzIHdhcyB0aGVyZSwgdGhlIG51bWJlciBpcyBuZWdhdGl2ZS5cclxuICAgIGlmIChuZWdhdGl2ZUJlZm9yZSAmJiBzdHJTdGFydHNXaXRoKGlucHV0LCBuZWdhdGl2ZUJlZm9yZSkpIHtcclxuICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5lZ2F0aXZlQmVmb3JlLCBcIlwiKTtcclxuICAgICAgaW5wdXRJc05lZ2F0aXZlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXBlYXQgdGhlIHNhbWUgcHJvY2VkdXJlIGZvciB0aGUgcHJlZml4LlxyXG4gICAgaWYgKHByZWZpeCAmJiBzdHJTdGFydHNXaXRoKGlucHV0LCBwcmVmaXgpKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShwcmVmaXgsIFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFuZCBhZ2FpbiBmb3IgbmVnYXRpdmUuXHJcbiAgICBpZiAobmVnYXRpdmUgJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgbmVnYXRpdmUpKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShuZWdhdGl2ZSwgXCJcIik7XHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRoZSBzdWZmaXguXHJcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc2xpY2VcclxuICAgIGlmIChzdWZmaXggJiYgc3RyRW5kc1dpdGgoaW5wdXQsIHN1ZmZpeCkpIHtcclxuICAgICAgaW5wdXQgPSBpbnB1dC5zbGljZSgwLCAtMSAqIHN1ZmZpeC5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0aGUgdGhvdXNhbmQgZ3JvdXBpbmcuXHJcbiAgICBpZiAodGhvdXNhbmQpIHtcclxuICAgICAgaW5wdXQgPSBpbnB1dC5zcGxpdCh0aG91c2FuZCkuam9pbihcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgdGhlIGRlY2ltYWwgc2VwYXJhdG9yIGJhY2sgdG8gcGVyaW9kLlxyXG4gICAgaWYgKG1hcmspIHtcclxuICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKG1hcmssIFwiLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcmVwZW5kIHRoZSBuZWdhdGl2ZSBzeW1ib2wuXHJcbiAgICBpZiAoaW5wdXRJc05lZ2F0aXZlKSB7XHJcbiAgICAgIG91dHB1dCArPSBcIi1cIjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgdGhlIG51bWJlclxyXG4gICAgb3V0cHV0ICs9IGlucHV0O1xyXG5cclxuICAgIC8vIFRyaW0gYWxsIG5vbi1udW1lcmljIGNoYXJhY3RlcnMgKGFsbG93ICcuJyBhbmQgJy0nKTtcclxuICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9bXjAtOVxcLlxcLS5dL2csIFwiXCIpO1xyXG5cclxuICAgIC8vIFRoZSB2YWx1ZSBjb250YWlucyBubyBwYXJzZS1hYmxlIG51bWJlci5cclxuICAgIGlmIChvdXRwdXQgPT09IFwiXCIpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvdmVydCB0byBudW1iZXIuXHJcbiAgICBvdXRwdXQgPSBOdW1iZXIob3V0cHV0KTtcclxuXHJcbiAgICAvLyBSdW4gdGhlIHVzZXItc3BlY2lmaWVkIHBvc3QtZGVjb2Rlci5cclxuICAgIGlmIChkZWNvZGVyKSB7XHJcbiAgICAgIG91dHB1dCA9IGRlY29kZXIob3V0cHV0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBpcyB0aGUgb3V0cHV0IGlzIHZhbGlkLCBvdGhlcndpc2U6IHJldHVybiBmYWxzZS5cclxuICAgIGlmICghaXNWYWxpZE51bWJlcihvdXRwdXQpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3V0cHV0O1xyXG4gIH1cclxuXHJcbiAgLy8gRnJhbWV3b3JrXHJcblxyXG4gIC8vIFZhbGlkYXRlIGZvcm1hdHRpbmcgb3B0aW9uc1xyXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKGlucHV0T3B0aW9ucykge1xyXG4gICAgdmFyIGksXHJcbiAgICAgIG9wdGlvbk5hbWUsXHJcbiAgICAgIG9wdGlvblZhbHVlLFxyXG4gICAgICBmaWx0ZXJlZE9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICBpZiAoaW5wdXRPcHRpb25zW1wic3VmZml4XCJdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgaW5wdXRPcHRpb25zW1wic3VmZml4XCJdID0gaW5wdXRPcHRpb25zW1wicG9zdGZpeFwiXTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgRm9ybWF0T3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICBvcHRpb25OYW1lID0gRm9ybWF0T3B0aW9uc1tpXTtcclxuICAgICAgb3B0aW9uVmFsdWUgPSBpbnB1dE9wdGlvbnNbb3B0aW9uTmFtZV07XHJcblxyXG4gICAgICBpZiAob3B0aW9uVmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vIE9ubHkgZGVmYXVsdCBpZiBuZWdhdGl2ZUJlZm9yZSBpc24ndCBzZXQuXHJcbiAgICAgICAgaWYgKG9wdGlvbk5hbWUgPT09IFwibmVnYXRpdmVcIiAmJiAhZmlsdGVyZWRPcHRpb25zLm5lZ2F0aXZlQmVmb3JlKSB7XHJcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBcIi1cIjtcclxuICAgICAgICAgIC8vIERvbid0IHNldCBhIGRlZmF1bHQgZm9yIG1hcmsgd2hlbiAndGhvdXNhbmQnIGlzIHNldC5cclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbk5hbWUgPT09IFwibWFya1wiICYmIGZpbHRlcmVkT3B0aW9ucy50aG91c2FuZCAhPT0gXCIuXCIpIHtcclxuICAgICAgICAgIGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IFwiLlwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZsb2F0aW5nIHBvaW50cyBpbiBKUyBhcmUgc3RhYmxlIHVwIHRvIDcgZGVjaW1hbHMuXHJcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uTmFtZSA9PT0gXCJkZWNpbWFsc1wiKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvblZhbHVlID49IDAgJiYgb3B0aW9uVmFsdWUgPCA4KSB7XHJcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBvcHRpb25WYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG9wdGlvbk5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGhlc2Ugb3B0aW9ucywgd2hlbiBwcm92aWRlZCwgbXVzdCBiZSBmdW5jdGlvbnMuXHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgb3B0aW9uTmFtZSA9PT0gXCJlbmNvZGVyXCIgfHxcclxuICAgICAgICBvcHRpb25OYW1lID09PSBcImRlY29kZXJcIiB8fFxyXG4gICAgICAgIG9wdGlvbk5hbWUgPT09IFwiZWRpdFwiIHx8XHJcbiAgICAgICAgb3B0aW9uTmFtZSA9PT0gXCJ1bmRvXCJcclxuICAgICAgKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBvcHRpb25WYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG9wdGlvbk5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gT3RoZXIgb3B0aW9ucyBhcmUgc3RyaW5ncy5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvblZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBvcHRpb25WYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG9wdGlvbk5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNvbWUgdmFsdWVzIGNhbid0IGJlIGV4dHJhY3RlZCBmcm9tIGFcclxuICAgIC8vIHN0cmluZyBpZiBjZXJ0YWluIGNvbWJpbmF0aW9ucyBhcmUgcHJlc2VudC5cclxuICAgIHRocm93RXF1YWxFcnJvcihmaWx0ZXJlZE9wdGlvbnMsIFwibWFya1wiLCBcInRob3VzYW5kXCIpO1xyXG4gICAgdGhyb3dFcXVhbEVycm9yKGZpbHRlcmVkT3B0aW9ucywgXCJwcmVmaXhcIiwgXCJuZWdhdGl2ZVwiKTtcclxuICAgIHRocm93RXF1YWxFcnJvcihmaWx0ZXJlZE9wdGlvbnMsIFwicHJlZml4XCIsIFwibmVnYXRpdmVCZWZvcmVcIik7XHJcblxyXG4gICAgcmV0dXJuIGZpbHRlcmVkT3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8vIFBhc3MgYWxsIG9wdGlvbnMgYXMgZnVuY3Rpb24gYXJndW1lbnRzXHJcbiAgZnVuY3Rpb24gcGFzc0FsbChvcHRpb25zLCBtZXRob2QsIGlucHV0KSB7XHJcbiAgICB2YXIgaSxcclxuICAgICAgYXJncyA9IFtdO1xyXG5cclxuICAgIC8vIEFkZCBhbGwgb3B0aW9ucyBpbiBvcmRlciBvZiBGb3JtYXRPcHRpb25zXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgRm9ybWF0T3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICBhcmdzLnB1c2gob3B0aW9uc1tGb3JtYXRPcHRpb25zW2ldXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXBwZW5kIHRoZSBpbnB1dCwgdGhlbiBjYWxsIHRoZSBtZXRob2QsIHByZXNlbnRpbmcgYWxsXHJcbiAgICAvLyBvcHRpb25zIGFzIGFyZ3VtZW50cy5cclxuICAgIGFyZ3MucHVzaChpbnB1dCk7XHJcbiAgICByZXR1cm4gbWV0aG9kLmFwcGx5KFwiXCIsIGFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gd051bWIob3B0aW9ucykge1xyXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIHdOdW1iKSkge1xyXG4gICAgICByZXR1cm4gbmV3IHdOdW1iKG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgb3B0aW9ucyA9IHZhbGlkYXRlKG9wdGlvbnMpO1xyXG5cclxuICAgIC8vIENhbGwgJ2Zvcm1hdFRvJyB3aXRoIHByb3BlciBhcmd1bWVudHMuXHJcbiAgICB0aGlzLnRvID0gZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgcmV0dXJuIHBhc3NBbGwob3B0aW9ucywgZm9ybWF0VG8sIGlucHV0KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gQ2FsbCAnZm9ybWF0RnJvbScgd2l0aCBwcm9wZXIgYXJndW1lbnRzLlxyXG4gICAgdGhpcy5mcm9tID0gZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgcmV0dXJuIHBhc3NBbGwob3B0aW9ucywgZm9ybWF0RnJvbSwgaW5wdXQpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB3TnVtYjtcclxufSk7XHJcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3Vpc2xpZGVyIC0gMTQuMS4xIC0gMTIvMTUvMjAxOSAqL1xcbi5ub1VpLXRhcmdldCwubm9VaS10YXJnZXQgKnstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZTstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tcy10b3VjaC1hY3Rpb246bm9uZTt0b3VjaC1hY3Rpb246bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Lm5vVWktdGFyZ2V0e3Bvc2l0aW9uOnJlbGF0aXZlfS5ub1VpLWJhc2UsLm5vVWktY29ubmVjdHN7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjF9Lm5vVWktY29ubmVjdHN7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6MH0ubm9VaS1jb25uZWN0LC5ub1VpLW9yaWdpbnt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxO3RvcDowO3JpZ2h0OjA7LW1zLXRyYW5zZm9ybS1vcmlnaW46MCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjowIDA7LXdlYmtpdC10cmFuc2Zvcm0tc3R5bGU6cHJlc2VydmUtM2Q7dHJhbnNmb3JtLW9yaWdpbjowIDA7dHJhbnNmb3JtLXN0eWxlOmZsYXR9Lm5vVWktY29ubmVjdHtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlfS5ub1VpLW9yaWdpbntoZWlnaHQ6MTAlO3dpZHRoOjEwJX0ubm9VaS10eHQtZGlyLXJ0bC5ub1VpLWhvcml6b250YWwgLm5vVWktb3JpZ2lue2xlZnQ6MDtyaWdodDphdXRvfS5ub1VpLXZlcnRpY2FsIC5ub1VpLW9yaWdpbnt3aWR0aDowfS5ub1VpLWhvcml6b250YWwgLm5vVWktb3JpZ2lue2hlaWdodDowfS5ub1VpLWhhbmRsZXstd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6aGlkZGVuO2JhY2tmYWNlLXZpc2liaWxpdHk6aGlkZGVuO3Bvc2l0aW9uOmFic29sdXRlfS5ub1VpLXRvdWNoLWFyZWF7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX0ubm9VaS1zdGF0ZS10YXAgLm5vVWktY29ubmVjdCwubm9VaS1zdGF0ZS10YXAgLm5vVWktb3JpZ2luey13ZWJraXQtdHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zc30ubm9VaS1zdGF0ZS1kcmFnICp7Y3Vyc29yOmluaGVyaXQhaW1wb3J0YW50fS5ub1VpLWhvcml6b250YWx7aGVpZ2h0OjE4cHh9Lm5vVWktaG9yaXpvbnRhbCAubm9VaS1oYW5kbGV7d2lkdGg6MzRweDtoZWlnaHQ6MjhweDtyaWdodDotMTdweDt0b3A6LTZweH0ubm9VaS12ZXJ0aWNhbHt3aWR0aDoxOHB4fS5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZXt3aWR0aDoyOHB4O2hlaWdodDozNHB4O3JpZ2h0Oi02cHg7dG9wOi0xN3B4fS5ub1VpLXR4dC1kaXItcnRsLm5vVWktaG9yaXpvbnRhbCAubm9VaS1oYW5kbGV7bGVmdDotMTdweDtyaWdodDphdXRvfS5ub1VpLXRhcmdldHtiYWNrZ3JvdW5kOiNGQUZBRkE7Ym9yZGVyLXJhZGl1czo0cHg7Ym9yZGVyOjFweCBzb2xpZCAjRDNEM0QzO2JveC1zaGFkb3c6aW5zZXQgMCAxcHggMXB4ICNGMEYwRjAsMCAzcHggNnB4IC01cHggI0JCQn0ubm9VaS1jb25uZWN0c3tib3JkZXItcmFkaXVzOjNweH0ubm9VaS1jb25uZWN0e2JhY2tncm91bmQ6IzNGQjhBRn0ubm9VaS1kcmFnZ2FibGV7Y3Vyc29yOmV3LXJlc2l6ZX0ubm9VaS12ZXJ0aWNhbCAubm9VaS1kcmFnZ2FibGV7Y3Vyc29yOm5zLXJlc2l6ZX0ubm9VaS1oYW5kbGV7Ym9yZGVyOjFweCBzb2xpZCAjRDlEOUQ5O2JvcmRlci1yYWRpdXM6M3B4O2JhY2tncm91bmQ6I0ZGRjtjdXJzb3I6ZGVmYXVsdDtib3gtc2hhZG93Omluc2V0IDAgMCAxcHggI0ZGRixpbnNldCAwIDFweCA3cHggI0VCRUJFQiwwIDNweCA2cHggLTNweCAjQkJCfS5ub1VpLWFjdGl2ZXtib3gtc2hhZG93Omluc2V0IDAgMCAxcHggI0ZGRixpbnNldCAwIDFweCA3cHggI0RERCwwIDNweCA2cHggLTNweCAjQkJCfS5ub1VpLWhhbmRsZTphZnRlciwubm9VaS1oYW5kbGU6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6MTRweDt3aWR0aDoxcHg7YmFja2dyb3VuZDojRThFN0U2O2xlZnQ6MTRweDt0b3A6NnB4fS5ub1VpLWhhbmRsZTphZnRlcntsZWZ0OjE3cHh9Lm5vVWktdmVydGljYWwgLm5vVWktaGFuZGxlOmFmdGVyLC5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZTpiZWZvcmV7d2lkdGg6MTRweDtoZWlnaHQ6MXB4O2xlZnQ6NnB4O3RvcDoxNHB4fS5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZTphZnRlcnt0b3A6MTdweH1bZGlzYWJsZWRdIC5ub1VpLWNvbm5lY3R7YmFja2dyb3VuZDojQjhCOEI4fVtkaXNhYmxlZF0gLm5vVWktaGFuZGxlLFtkaXNhYmxlZF0ubm9VaS1oYW5kbGUsW2Rpc2FibGVkXS5ub1VpLXRhcmdldHtjdXJzb3I6bm90LWFsbG93ZWR9Lm5vVWktcGlwcywubm9VaS1waXBzICp7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS5ub1VpLXBpcHN7cG9zaXRpb246YWJzb2x1dGU7Y29sb3I6Izk5OX0ubm9VaS12YWx1ZXtwb3NpdGlvbjphYnNvbHV0ZTt3aGl0ZS1zcGFjZTpub3dyYXA7dGV4dC1hbGlnbjpjZW50ZXJ9Lm5vVWktdmFsdWUtc3Vie2NvbG9yOiNjY2M7Zm9udC1zaXplOjEwcHh9Lm5vVWktbWFya2Vye3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQ6I0NDQ30ubm9VaS1tYXJrZXItc3Vie2JhY2tncm91bmQ6I0FBQX0ubm9VaS1tYXJrZXItbGFyZ2V7YmFja2dyb3VuZDojQUFBfS5ub1VpLXBpcHMtaG9yaXpvbnRhbHtwYWRkaW5nOjEwcHggMDtoZWlnaHQ6ODBweDt0b3A6MTAwJTtsZWZ0OjA7d2lkdGg6MTAwJX0ubm9VaS12YWx1ZS1ob3Jpem9udGFsey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDUwJSl9Lm5vVWktcnRsIC5ub1VpLXZhbHVlLWhvcml6b250YWx7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKDUwJSw1MCUpO3RyYW5zZm9ybTp0cmFuc2xhdGUoNTAlLDUwJSl9Lm5vVWktbWFya2VyLWhvcml6b250YWwubm9VaS1tYXJrZXJ7bWFyZ2luLWxlZnQ6LTFweDt3aWR0aDoycHg7aGVpZ2h0OjVweH0ubm9VaS1tYXJrZXItaG9yaXpvbnRhbC5ub1VpLW1hcmtlci1zdWJ7aGVpZ2h0OjEwcHh9Lm5vVWktbWFya2VyLWhvcml6b250YWwubm9VaS1tYXJrZXItbGFyZ2V7aGVpZ2h0OjE1cHh9Lm5vVWktcGlwcy12ZXJ0aWNhbHtwYWRkaW5nOjAgMTBweDtoZWlnaHQ6MTAwJTt0b3A6MDtsZWZ0OjEwMCV9Lm5vVWktdmFsdWUtdmVydGljYWx7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC01MCUpO3BhZGRpbmctbGVmdDoyNXB4fS5ub1VpLXJ0bCAubm9VaS12YWx1ZS12ZXJ0aWNhbHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoMCw1MCUpO3RyYW5zZm9ybTp0cmFuc2xhdGUoMCw1MCUpfS5ub1VpLW1hcmtlci12ZXJ0aWNhbC5ub1VpLW1hcmtlcnt3aWR0aDo1cHg7aGVpZ2h0OjJweDttYXJnaW4tdG9wOi0xcHh9Lm5vVWktbWFya2VyLXZlcnRpY2FsLm5vVWktbWFya2VyLXN1Ynt3aWR0aDoxMHB4fS5ub1VpLW1hcmtlci12ZXJ0aWNhbC5ub1VpLW1hcmtlci1sYXJnZXt3aWR0aDoxNXB4fS5ub1VpLXRvb2x0aXB7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MXB4IHNvbGlkICNEOUQ5RDk7Ym9yZGVyLXJhZGl1czozcHg7YmFja2dyb3VuZDojZmZmO2NvbG9yOiMwMDA7cGFkZGluZzo1cHg7dGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6bm93cmFwfS5ub1VpLWhvcml6b250YWwgLm5vVWktdG9vbHRpcHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsMCk7bGVmdDo1MCU7Ym90dG9tOjEyMCV9Lm5vVWktdmVydGljYWwgLm5vVWktdG9vbHRpcHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoMCwtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTUwJSk7dG9wOjUwJTtyaWdodDoxMjAlfVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvKiFcbiogaW5wdXRtYXNrLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuL2RlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliXCIsIFwiLi9nbG9iYWwvd2luZG93XCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vZGVwZW5kZW5jeUxpYnMvaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWJcIiksIHJlcXVpcmUoXCIuL2dsb2JhbC93aW5kb3dcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5JbnB1dG1hc2sgPSBmYWN0b3J5KHdpbmRvdy5kZXBlbmRlbmN5TGliIHx8IGpRdWVyeSwgd2luZG93KTtcbiAgICB9XG59KShmdW5jdGlvbigkLCB3aW5kb3csIHVuZGVmaW5lZCkge1xuICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCwgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LCBpZSA9IHVhLmluZGV4T2YoXCJNU0lFIFwiKSA+IDAgfHwgdWEuaW5kZXhPZihcIlRyaWRlbnQvXCIpID4gMCwgbW9iaWxlID0gaXNJbnB1dEV2ZW50U3VwcG9ydGVkKFwidG91Y2hzdGFydFwiKSwgaWVtb2JpbGUgPSAvaWVtb2JpbGUvaS50ZXN0KHVhKSwgaXBob25lID0gL2lwaG9uZS9pLnRlc3QodWEpICYmICFpZW1vYmlsZTtcbiAgICBmdW5jdGlvbiBJbnB1dG1hc2soYWxpYXMsIG9wdGlvbnMsIGludGVybmFsKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJbnB1dG1hc2spKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XG4gICAgICAgIHRoaXMubWFza3NldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWZyZXNoVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGludGVybmFsICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KGFsaWFzKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBhbGlhcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICAgICAgaWYgKGFsaWFzKSBvcHRpb25zLmFsaWFzID0gYWxpYXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLm5vTWFza3NDYWNoZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWZpbml0aW9ucyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy51c2VyT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICB0aGlzLmlzUlRMID0gdGhpcy5vcHRzLm51bWVyaWNJbnB1dDtcbiAgICAgICAgICAgIHJlc29sdmVBbGlhcyh0aGlzLm9wdHMuYWxpYXMsIG9wdGlvbnMsIHRoaXMub3B0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSW5wdXRtYXNrLnByb3RvdHlwZSA9IHtcbiAgICAgICAgZGF0YUF0dHJpYnV0ZTogXCJkYXRhLWlucHV0bWFza1wiLFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiX1wiLFxuICAgICAgICAgICAgb3B0aW9uYWxtYXJrZXI6IFsgXCJbXCIsIFwiXVwiIF0sXG4gICAgICAgICAgICBxdWFudGlmaWVybWFya2VyOiBbIFwie1wiLCBcIn1cIiBdLFxuICAgICAgICAgICAgZ3JvdXBtYXJrZXI6IFsgXCIoXCIsIFwiKVwiIF0sXG4gICAgICAgICAgICBhbHRlcm5hdG9ybWFya2VyOiBcInxcIixcbiAgICAgICAgICAgIGVzY2FwZUNoYXI6IFwiXFxcXFwiLFxuICAgICAgICAgICAgbWFzazogbnVsbCxcbiAgICAgICAgICAgIHJlZ2V4OiBudWxsLFxuICAgICAgICAgICAgb25jb21wbGV0ZTogJC5ub29wLFxuICAgICAgICAgICAgb25pbmNvbXBsZXRlOiAkLm5vb3AsXG4gICAgICAgICAgICBvbmNsZWFyZWQ6ICQubm9vcCxcbiAgICAgICAgICAgIHJlcGVhdDogMCxcbiAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiBmYWxzZSxcbiAgICAgICAgICAgIHJlbW92ZU1hc2tPblN1Ym1pdDogZmFsc2UsXG4gICAgICAgICAgICBjbGVhck1hc2tPbkxvc3RGb2N1czogdHJ1ZSxcbiAgICAgICAgICAgIGluc2VydE1vZGU6IHRydWUsXG4gICAgICAgICAgICBjbGVhckluY29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgICAgYWxpYXM6IG51bGwsXG4gICAgICAgICAgICBvbktleURvd246ICQubm9vcCxcbiAgICAgICAgICAgIG9uQmVmb3JlTWFzazogbnVsbCxcbiAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsIHBhc3RlZFZhbHVlLCBvcHRzKSA6IHBhc3RlZFZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IG51bGwsXG4gICAgICAgICAgICBvblVuTWFzazogbnVsbCxcbiAgICAgICAgICAgIHNob3dNYXNrT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dNYXNrT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgIG9uS2V5VmFsaWRhdGlvbjogJC5ub29wLFxuICAgICAgICAgICAgc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjogXCIgXCIsXG4gICAgICAgICAgICBudW1lcmljSW5wdXQ6IGZhbHNlLFxuICAgICAgICAgICAgcmlnaHRBbGlnbjogZmFsc2UsXG4gICAgICAgICAgICB1bmRvT25Fc2NhcGU6IHRydWUsXG4gICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiLFxuICAgICAgICAgICAgX3JhZGl4RGFuY2U6IGZhbHNlLFxuICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiXCIsXG4gICAgICAgICAgICBrZWVwU3RhdGljOiBudWxsLFxuICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uVGFiOiB0cnVlLFxuICAgICAgICAgICAgdGFiVGhyb3VnaDogZmFsc2UsXG4gICAgICAgICAgICBzdXBwb3J0c0lucHV0VHlwZTogWyBcInRleHRcIiwgXCJ0ZWxcIiwgXCJ1cmxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiIF0sXG4gICAgICAgICAgICBpZ25vcmFibGVzOiBbIDgsIDksIDEzLCAxOSwgMjcsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDUsIDQ2LCA5MywgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LCAxMTksIDEyMCwgMTIxLCAxMjIsIDEyMywgMCwgMjI5IF0sXG4gICAgICAgICAgICBpc0NvbXBsZXRlOiBudWxsLFxuICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogbnVsbCxcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgc3RhdGljRGVmaW5pdGlvblN5bWJvbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaml0TWFza2luZzogZmFsc2UsXG4gICAgICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGlucHV0RXZlbnRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIG5vVmFsdWVQYXRjaGluZzogZmFsc2UsXG4gICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25DbGljazogXCJsdnBcIixcbiAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgIGlucHV0bW9kZTogXCJ2ZXJiYXRpbVwiLFxuICAgICAgICAgICAgY29sb3JNYXNrOiBmYWxzZSxcbiAgICAgICAgICAgIGRpc2FibGVQcmVkaWN0aXZlVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBpbXBvcnREYXRhQXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgIHNoaWZ0UG9zaXRpb25zOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICA5OiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlcXHVmZjExLVxcdWZmMTldXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFsaWFzZXM6IHt9LFxuICAgICAgICBtYXNrc0NhY2hlOiB7fSxcbiAgICAgICAgbWFzazogZnVuY3Rpb24oZWxlbXMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGZ1bmN0aW9uIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMobnB0LCBvcHRzLCB1c2VyT3B0aW9ucywgZGF0YUF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmltcG9ydERhdGFBdHRyaWJ1dGVzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyT3B0aW9ucyA9IG5wdC5nZXRBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZSksIG9wdGlvbiwgZGF0YW9wdGlvbnMsIG9wdGlvbkRhdGEsIHA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbXBvcnRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBvcHRpb25EYXRhICE9PSB1bmRlZmluZWQgPyBvcHRpb25EYXRhIDogbnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlICsgXCItXCIgKyBvcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbkRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbkRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pbmRleE9mKFwib25cIikgPT09IDApIG9wdGlvbkRhdGEgPSB3aW5kb3dbb3B0aW9uRGF0YV07IGVsc2UgaWYgKG9wdGlvbkRhdGEgPT09IFwiZmFsc2VcIikgb3B0aW9uRGF0YSA9IGZhbHNlOyBlbHNlIGlmIChvcHRpb25EYXRhID09PSBcInRydWVcIikgb3B0aW9uRGF0YSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPcHRpb25zW29wdGlvbl0gPSBvcHRpb25EYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ck9wdGlvbnMgJiYgYXR0ck9wdGlvbnMgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJPcHRpb25zID0gYXR0ck9wdGlvbnMucmVwbGFjZSgvJy9nLCAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFvcHRpb25zID0gSlNPTi5wYXJzZShcIntcIiArIGF0dHJPcHRpb25zICsgXCJ9XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiBkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLnRvTG93ZXJDYXNlKCkgPT09IFwiYWxpYXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gZGF0YW9wdGlvbnNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRPcHRpb24oXCJhbGlhc1wiLCBvcHRpb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJPcHRpb25zLmFsaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQWxpYXModXNlck9wdGlvbnMuYWxpYXMsIHVzZXJPcHRpb25zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKG9wdGlvbiBpbiBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YW9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiBkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC50b0xvd2VyQ2FzZSgpID09PSBvcHRpb24udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IGRhdGFvcHRpb25zW3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnRPcHRpb24ob3B0aW9uLCBvcHRpb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBvcHRzLCB1c2VyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5kaXIgPT09IFwicnRsXCIgfHwgb3B0cy5yaWdodEFsaWduKSB7XG4gICAgICAgICAgICAgICAgICAgIG5wdC5zdHlsZS50ZXh0QWxpZ24gPSBcInJpZ2h0XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChucHQuZGlyID09PSBcInJ0bFwiIHx8IG9wdHMubnVtZXJpY0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5wdC5kaXIgPSBcImx0clwiO1xuICAgICAgICAgICAgICAgICAgICBucHQucmVtb3ZlQXR0cmlidXRlKFwiZGlyXCIpO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzUlRMID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHVzZXJPcHRpb25zKS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgZWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtcykgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gWyBlbGVtcyBdIDogZWxlbXM7XG4gICAgICAgICAgICAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uKG5keCwgZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGVkT3B0cyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGF0Lm9wdHMpO1xuICAgICAgICAgICAgICAgIGlmIChpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKGVsLCBzY29wZWRPcHRzLCAkLmV4dGVuZCh0cnVlLCB7fSwgdGhhdC51c2VyT3B0aW9ucyksIHRoYXQuZGF0YUF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZW5lcmF0ZU1hc2tTZXQoc2NvcGVkT3B0cywgdGhhdC5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza3NldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sgPSBuZXcgSW5wdXRtYXNrKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5vcHRzID0gc2NvcGVkT3B0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5ub01hc2tzQ2FjaGUgPSB0aGF0Lm5vTWFza3NDYWNoZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay51c2VyT3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGF0LnVzZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5pc1JUTCA9IHNjb3BlZE9wdHMuaXNSVEwgfHwgc2NvcGVkT3B0cy5udW1lcmljSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suZWwgPSBlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5tYXNrc2V0ID0gbWFza3NldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0YShlbCwgXCJfaW5wdXRtYXNrX29wdHNcIiwgc2NvcGVkT3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrU2NvcGUuY2FsbChlbC5pbnB1dG1hc2ssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwibWFza1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1zICYmIGVsZW1zWzBdID8gZWxlbXNbMF0uaW5wdXRtYXNrIHx8IHRoaXMgOiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBvcHRpb246IGZ1bmN0aW9uKG9wdGlvbnMsIG5vcmVtYXNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRzW29wdGlvbnNdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMudXNlck9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsICYmIG5vcmVtYXNrICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFzayh0aGlzLmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVubWFza2VkdmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwidW5tYXNrZWR2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZW1vdmVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldGVtcHR5bWFzazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0ZW1wdHltYXNrXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBoYXNNYXNrZWRWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMub3B0cy5hdXRvVW5tYXNrO1xuICAgICAgICB9LFxuICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc0NvbXBsZXRlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXRtZXRhZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiaXNWYWxpZFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24odmFsdWUsIG1ldGFkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWwpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuZWwpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbmFseXNlTWFzazogZnVuY3Rpb24obWFzaywgcmVnZXhNYXNrLCBvcHRzKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5pemVyID0gLyg/Ols/KitdfFxce1swLTlcXCtcXCpdKyg/OixbMC05XFwrXFwqXSopPyg/OlxcfFswLTlcXCtcXCpdKik/XFx9KXxbXi4/KiteJHtbXSgpfFxcXFxdK3wuL2csIHJlZ2V4VG9rZW5pemVyID0gL1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZywgZXNjYXBlZCA9IGZhbHNlLCBjdXJyZW50VG9rZW4gPSBuZXcgTWFza1Rva2VuKCksIG1hdGNoLCBtLCBvcGVuZW5pbmdzID0gW10sIG1hc2tUb2tlbnMgPSBbXSwgb3BlbmluZ1Rva2VuLCBjdXJyZW50T3BlbmluZ1Rva2VuLCBhbHRlcm5hdG9yLCBsYXN0TWF0Y2gsIGdyb3VwVG9rZW47XG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrVG9rZW4oaXNHcm91cCwgaXNPcHRpb25hbCwgaXNRdWFudGlmaWVyLCBpc0FsdGVybmF0b3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5Hcm91cCA9IGlzR3JvdXAgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5hbHRlcm5hdG9yR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNPcHRpb25hbCA9IGlzT3B0aW9uYWwgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1F1YW50aWZpZXIgPSBpc1F1YW50aWZpZXIgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0FsdGVybmF0b3IgPSBpc0FsdGVybmF0b3IgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICAgICAgICAgIG1heDogMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpbnNlcnRUZXN0RGVmaW5pdGlvbihtdG9rZW4sIGVsZW1lbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkID8gcG9zaXRpb24gOiBtdG9rZW4ubWF0Y2hlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbmRleE9mKFwiW1wiKSA9PT0gMCB8fCBlc2NhcGVkICYmIC9cXFxcZHxcXFxcc3xcXFxcd10vaS50ZXN0KGVsZW1lbnQpIHx8IGVsZW1lbnQgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBuZXcgUmVnRXhwKGVsZW1lbnQsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXNjYXBlZCkgZWxlbWVudCA9IGVsZW1lbnRbZWxlbWVudC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChlbGVtZW50LnNwbGl0KFwiXCIpLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2TWF0Y2ggPSBtdG9rZW4ubWF0Y2hlc1twb3NpdGlvbiAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSBsbW50ICYmIHByZXZNYXRjaC5mbiAhPT0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBsbW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBsbW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IChlc2NhcGVkID8gXCInXCIgOiBcIlwiKSArIGxtbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2RlZiA9IChvcHRzLmRlZmluaXRpb25zID8gb3B0cy5kZWZpbml0aW9uc1tlbGVtZW50XSA6IHVuZGVmaW5lZCkgfHwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9uc1tlbGVtZW50XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tkZWYgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG1hc2tkZWYudmFsaWRhdG9yID8gdHlwZW9mIG1hc2tkZWYudmFsaWRhdG9yID09IFwic3RyaW5nXCIgPyBuZXcgUmVnRXhwKG1hc2tkZWYudmFsaWRhdG9yLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikgOiBuZXcgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IG1hc2tkZWYudmFsaWRhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoXCIuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgPyBcIm1hc3RlclwiIDogcHJldk1hdGNoLmRlZiAhPT0gKG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG1hc2tkZWYuY2FzaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogbWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSBlbGVtZW50ICYmIHByZXZNYXRjaC5mbiAhPT0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBlbGVtZW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogKGVzY2FwZWQgPyBcIidcIiA6IFwiXCIpICsgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB2ZXJpZnlHcm91cE1hcmtlcihtYXNrVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuICYmIG1hc2tUb2tlbi5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXNrVG9rZW4ubWF0Y2hlcywgZnVuY3Rpb24obmR4LCB0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRUb2tlbiA9IG1hc2tUb2tlbi5tYXRjaGVzW25keCArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChuZXh0VG9rZW4gPT09IHVuZGVmaW5lZCB8fCAobmV4dFRva2VuLm1hdGNoZXMgPT09IHVuZGVmaW5lZCB8fCBuZXh0VG9rZW4uaXNRdWFudGlmaWVyID09PSBmYWxzZSkpICYmIHRva2VuICYmIHRva2VuLmlzR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5pc0dyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleE1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24odG9rZW4sIG9wdHMuZ3JvdXBtYXJrZXJbMF0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4ub3Blbkdyb3VwICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbih0b2tlbiwgb3B0cy5ncm91cG1hcmtlclsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmF1bHRDYXNlKCkge1xuICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudE9wZW5pbmdUb2tlbiwgbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCkgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudFRva2VuLCBtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbikge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VTdGF0aWMoc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ID09PSBvcHRzLm9wdGlvbmFsbWFya2VyWzBdKSBzdCA9IG9wdHMub3B0aW9uYWxtYXJrZXJbMV07IGVsc2UgaWYgKHN0ID09PSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdKSBzdCA9IG9wdHMub3B0aW9uYWxtYXJrZXJbMF07IGVsc2UgaWYgKHN0ID09PSBvcHRzLmdyb3VwbWFya2VyWzBdKSBzdCA9IG9wdHMuZ3JvdXBtYXJrZXJbMV07IGVsc2UgaWYgKHN0ID09PSBvcHRzLmdyb3VwbWFya2VyWzFdKSBzdCA9IG9wdHMuZ3JvdXBtYXJrZXJbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMgPSBtYXNrVG9rZW4ubWF0Y2hlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbWF0Y2ggaW4gbWFza1Rva2VuLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzLmhhc093blByb3BlcnR5KG1hdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludE1hdGNoID0gcGFyc2VJbnQobWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXS5pc1F1YW50aWZpZXIgJiYgbWFza1Rva2VuLm1hdGNoZXNbaW50TWF0Y2ggKyAxXSAmJiBtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCArIDFdLmlzR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXQgPSBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMuc3BsaWNlKG1hdGNoLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UoaW50TWF0Y2ggKyAxLCAwLCBxdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdLm1hdGNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSA9IHJldmVyc2VUb2tlbnMobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdID0gcmV2ZXJzZVN0YXRpYyhtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBncm91cGlmeShtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgTWFza1Rva2VuKHRydWUpO1xuICAgICAgICAgICAgICAgIGdyb3VwVG9rZW4ub3Blbkdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXBUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZWdleE1hc2spIHtcbiAgICAgICAgICAgICAgICBvcHRzLm9wdGlvbmFsbWFya2VyWzBdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG9wdHMub3B0aW9uYWxtYXJrZXJbMV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSByZWdleE1hc2sgPyByZWdleFRva2VuaXplci5leGVjKG1hc2spIDogdG9rZW5pemVyLmV4ZWMobWFzaykpIHtcbiAgICAgICAgICAgICAgICBtID0gbWF0Y2hbMF07XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBcInswLDF9XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIipcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBcIntcIiArIG0gKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD89XCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD8hXCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD88PVwiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcIig/PCFcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5lc2NhcGVDaGFyOlxuICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdOlxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyWzFdOlxuICAgICAgICAgICAgICAgICAgICBvcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBvcGVuaW5nVG9rZW4ub3Blbkdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmFsdGVybmF0b3JHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKGZhbHNlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5xdWFudGlmaWVybWFya2VyWzBdOlxuICAgICAgICAgICAgICAgICAgICB2YXIgcXVhbnRpZmllciA9IG5ldyBNYXNrVG9rZW4oZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgvW3t9XS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1xaiA9IG0uc3BsaXQoXCJ8XCIpLCBtcSA9IG1xalswXS5zcGxpdChcIixcIiksIG1xMCA9IGlzTmFOKG1xWzBdKSA/IG1xWzBdIDogcGFyc2VJbnQobXFbMF0pLCBtcTEgPSBtcS5sZW5ndGggPT09IDEgPyBtcTAgOiBpc05hTihtcVsxXSkgPyBtcVsxXSA6IHBhcnNlSW50KG1xWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1xMCA9PT0gXCIqXCIgfHwgbXEwID09PSBcIitcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXEwID0gbXExID09PSBcIipcIiA/IDAgOiAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHF1YW50aWZpZXIucXVhbnRpZmllciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogbXEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBtcTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBqaXQ6IG1xalsxXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG9wZW5lbmluZ3MubGVuZ3RoID4gMCA/IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXS5tYXRjaGVzIDogY3VycmVudFRva2VuLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaC5tYXRjaGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgTWFza1Rva2VuKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcE1hdGNoID0gbWF0Y2hlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChncm91cFRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBncm91cFRva2VuLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRtcE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2guaXNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBncm91cGlmeShbIG1hdGNoIF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChxdWFudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5hbHRlcm5hdG9ybWFya2VyOlxuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBRdWFudGlmaWVyID0gZnVuY3Rpb24obWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RNYXRjaCA9IG1hdGNoZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmlzUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGdyb3VwaWZ5KFsgbWF0Y2hlcy5wb3AoKSwgbGFzdE1hdGNoIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJUb2tlbiA9IGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlc1tjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbi5vcGVuR3JvdXAgJiYgKHN1YlRva2VuLm1hdGNoZXMgPT09IHVuZGVmaW5lZCB8fCBzdWJUb2tlbi5pc0dyb3VwID09PSBmYWxzZSAmJiBzdWJUb2tlbi5pc0FsdGVybmF0b3IgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGdyb3VwUXVhbnRpZmllcihjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gZ3JvdXBRdWFudGlmaWVyKGN1cnJlbnRUb2tlbi5tYXRjaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGxhc3RNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmFsdGVybmF0b3JHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5hbHRlcm5hdG9yR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG5ldyBNYXNrVG9rZW4oZmFsc2UsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yLm1hdGNoZXMucHVzaChsYXN0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RNYXRjaC5vcGVuR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2gub3Blbkdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0b3JHcm91cCA9IG5ldyBNYXNrVG9rZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvckdyb3VwLmFsdGVybmF0b3JHcm91cCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3JHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcihjdXJyZW50VG9rZW4pO1xuICAgICAgICAgICAgICAgIG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0IHx8IG9wdHMuaXNSVEwpIHtcbiAgICAgICAgICAgICAgICByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbnNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hc2tUb2tlbnM7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uQ29sb3JNYXNrOiBmdW5jdGlvbihpbnB1dCwgdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIGlucHV0LnN0eWxlLmxlZnQgPSB0ZW1wbGF0ZS5vZmZzZXRMZWZ0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZXh0ZW5kRGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICQuZXh0ZW5kKHRydWUsIElucHV0bWFzay5wcm90b3R5cGUuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zID0gZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgICAgICAkLmV4dGVuZCh0cnVlLCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zLCBkZWZpbml0aW9uKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5leHRlbmRBbGlhc2VzID0gZnVuY3Rpb24oYWxpYXMpIHtcbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgSW5wdXRtYXNrLnByb3RvdHlwZS5hbGlhc2VzLCBhbGlhcyk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZm9ybWF0ID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykuZm9ybWF0KHZhbHVlLCBtZXRhZGF0YSk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2sudW5tYXNrID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS51bm1hc2tlZHZhbHVlKHZhbHVlKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5pc1ZhbGlkID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5pc1ZhbGlkKHZhbHVlKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5yZW1vdmUgPSBmdW5jdGlvbihlbGVtcykge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gWyBlbGVtcyBdIDogZWxlbXM7XG4gICAgICAgICQuZWFjaChlbGVtcywgZnVuY3Rpb24obmR4LCBlbCkge1xuICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzaykgZWwuaW5wdXRtYXNrLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIElucHV0bWFzay5zZXRWYWx1ZSA9IGZ1bmN0aW9uKGVsZW1zLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gWyBlbGVtcyBdIDogZWxlbXM7XG4gICAgICAgICQuZWFjaChlbGVtcywgZnVuY3Rpb24obmR4LCBlbCkge1xuICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzaykgZWwuaW5wdXRtYXNrLnNldFZhbHVlKHZhbHVlKTsgZWxzZSAkKGVsKS50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyB2YWx1ZSBdKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZXNjYXBlUmVnZXggPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgdmFyIHNwZWNpYWxzID0gWyBcIi9cIiwgXCIuXCIsIFwiKlwiLCBcIitcIiwgXCI/XCIsIFwifFwiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBcIlxcXFxcIiwgXCIkXCIsIFwiXlwiIF07XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiKFxcXFxcIiArIHNwZWNpYWxzLmpvaW4oXCJ8XFxcXFwiKSArIFwiKVwiLCBcImdpbVwiKSwgXCJcXFxcJDFcIik7XG4gICAgfTtcbiAgICBJbnB1dG1hc2sua2V5Q29kZSA9IHtcbiAgICAgICAgQkFDS1NQQUNFOiA4LFxuICAgICAgICBCQUNLU1BBQ0VfU0FGQVJJOiAxMjcsXG4gICAgICAgIERFTEVURTogNDYsXG4gICAgICAgIERPV046IDQwLFxuICAgICAgICBFTkQ6IDM1LFxuICAgICAgICBFTlRFUjogMTMsXG4gICAgICAgIEVTQ0FQRTogMjcsXG4gICAgICAgIEhPTUU6IDM2LFxuICAgICAgICBJTlNFUlQ6IDQ1LFxuICAgICAgICBMRUZUOiAzNyxcbiAgICAgICAgUEFHRV9ET1dOOiAzNCxcbiAgICAgICAgUEFHRV9VUDogMzMsXG4gICAgICAgIFJJR0hUOiAzOSxcbiAgICAgICAgU1BBQ0U6IDMyLFxuICAgICAgICBUQUI6IDksXG4gICAgICAgIFVQOiAzOCxcbiAgICAgICAgWDogODgsXG4gICAgICAgIENPTlRST0w6IDE3XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZGVwZW5kZW5jeUxpYiA9ICQ7XG4gICAgZnVuY3Rpb24gcmVzb2x2ZUFsaWFzKGFsaWFzU3RyLCBvcHRpb25zLCBvcHRzKSB7XG4gICAgICAgIHZhciBhbGlhc0RlZmluaXRpb24gPSBJbnB1dG1hc2sucHJvdG90eXBlLmFsaWFzZXNbYWxpYXNTdHJdO1xuICAgICAgICBpZiAoYWxpYXNEZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBpZiAoYWxpYXNEZWZpbml0aW9uLmFsaWFzKSByZXNvbHZlQWxpYXMoYWxpYXNEZWZpbml0aW9uLmFsaWFzLCB1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0cywgYWxpYXNEZWZpbml0aW9uKTtcbiAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIG9wdHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0cy5tYXNrID09PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRzLm1hc2sgPSBhbGlhc1N0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFza1NldChvcHRzLCBub2NhY2hlKSB7XG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFzayhtYXNrLCBtZXRhZGF0YSwgb3B0cykge1xuICAgICAgICAgICAgdmFyIHJlZ2V4TWFzayA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG1hc2sgPT09IG51bGwgfHwgbWFzayA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHJlZ2V4TWFzayA9IG9wdHMucmVnZXggIT09IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gb3B0cy5yZWdleDtcbiAgICAgICAgICAgICAgICAgICAgbWFzayA9IG1hc2sucmVwbGFjZSgvXihcXF4pKC4qKShcXCQpJC8sIFwiJDJcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnZXhNYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFzayA9IFwiLipcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFzay5sZW5ndGggPT09IDEgJiYgb3B0cy5ncmVlZHkgPT09IGZhbHNlICYmIG9wdHMucmVwZWF0ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5wbGFjZWhvbGRlciA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgPiAwIHx8IG9wdHMucmVwZWF0ID09PSBcIipcIiB8fCBvcHRzLnJlcGVhdCA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVwZWF0U3RhcnQgPSBvcHRzLnJlcGVhdCA9PT0gXCIqXCIgPyAwIDogb3B0cy5yZXBlYXQgPT09IFwiK1wiID8gMSA6IG9wdHMucmVwZWF0O1xuICAgICAgICAgICAgICAgIG1hc2sgPSBvcHRzLmdyb3VwbWFya2VyWzBdICsgbWFzayArIG9wdHMuZ3JvdXBtYXJrZXJbMV0gKyBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMF0gKyByZXBlYXRTdGFydCArIFwiLFwiICsgb3B0cy5yZXBlYXQgKyBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWFza3NldERlZmluaXRpb24sIG1hc2tkZWZLZXkgPSByZWdleE1hc2sgPyBcInJlZ2V4X1wiICsgb3B0cy5yZWdleCA6IG9wdHMubnVtZXJpY0lucHV0ID8gbWFzay5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IG1hc2s7XG4gICAgICAgICAgICBpZiAoSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldID09PSB1bmRlZmluZWQgfHwgbm9jYWNoZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG1hc2tzZXREZWZpbml0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBtYXNrOiBtYXNrLFxuICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW46IElucHV0bWFzay5wcm90b3R5cGUuYW5hbHlzZU1hc2sobWFzaywgcmVnZXhNYXNrLCBvcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRQb3NpdGlvbnM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBfYnVmZmVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB0ZXN0czoge30sXG4gICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhLFxuICAgICAgICAgICAgICAgICAgICBtYXNrTGVuZ3RoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGppdE9mZnNldDoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChub2NhY2hlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSA9IG1hc2tzZXREZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgICAgICBtYXNrc2V0RGVmaW5pdGlvbiA9ICQuZXh0ZW5kKHRydWUsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBtYXNrc2V0RGVmaW5pdGlvbiA9ICQuZXh0ZW5kKHRydWUsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXREZWZpbml0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtcztcbiAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm1hc2spKSB7XG4gICAgICAgICAgICBvcHRzLm1hc2sgPSBvcHRzLm1hc2sob3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCQuaXNBcnJheShvcHRzLm1hc2spKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5tYXNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMua2VlcFN0YXRpYyA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdHMubWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWFza1tpXS5jaGFyQXQoMCkgIT09IG9wdHMubWFza1swXS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmtlZXBTdGF0aWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhbHRNYXNrID0gb3B0cy5ncm91cG1hcmtlclswXTtcbiAgICAgICAgICAgICAgICAkLmVhY2gob3B0cy5pc1JUTCA/IG9wdHMubWFzay5yZXZlcnNlKCkgOiBvcHRzLm1hc2ssIGZ1bmN0aW9uKG5keCwgbXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gb3B0cy5ncm91cG1hcmtlclsxXSArIG9wdHMuYWx0ZXJuYXRvcm1hcmtlciArIG9wdHMuZ3JvdXBtYXJrZXJbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zay5tYXNrICE9PSB1bmRlZmluZWQgJiYgISQuaXNGdW5jdGlvbihtc2subWFzaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gbXNrLm1hc2s7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXNrICs9IG1zaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gb3B0cy5ncm91cG1hcmtlclsxXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVNYXNrKGFsdE1hc2ssIG9wdHMubWFzaywgb3B0cyk7XG4gICAgICAgICAgICB9IGVsc2Ugb3B0cy5tYXNrID0gb3B0cy5tYXNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLm1hc2sgJiYgb3B0cy5tYXNrLm1hc2sgIT09IHVuZGVmaW5lZCAmJiAhJC5pc0Z1bmN0aW9uKG9wdHMubWFzay5tYXNrKSkge1xuICAgICAgICAgICAgbXMgPSBnZW5lcmF0ZU1hc2sob3B0cy5tYXNrLm1hc2ssIG9wdHMubWFzaywgb3B0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtcyA9IGdlbmVyYXRlTWFzayhvcHRzLm1hc2ssIG9wdHMubWFzaywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgZXZOYW1lID0gXCJvblwiICsgZXZlbnROYW1lLCBpc1N1cHBvcnRlZCA9IGV2TmFtZSBpbiBlbDtcbiAgICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGV2TmFtZSwgXCJyZXR1cm47XCIpO1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxbZXZOYW1lXSA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIGVsID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYXNrU2NvcGUoYWN0aW9uT2JqLCBtYXNrc2V0LCBvcHRzKSB7XG4gICAgICAgIG1hc2tzZXQgPSBtYXNrc2V0IHx8IHRoaXMubWFza3NldDtcbiAgICAgICAgb3B0cyA9IG9wdHMgfHwgdGhpcy5vcHRzO1xuICAgICAgICB2YXIgaW5wdXRtYXNrID0gdGhpcywgZWwgPSB0aGlzLmVsLCBpc1JUTCA9IHRoaXMuaXNSVEwsIHVuZG9WYWx1ZSwgJGVsLCBza2lwS2V5UHJlc3NFdmVudCA9IGZhbHNlLCBza2lwSW5wdXRFdmVudCA9IGZhbHNlLCBpZ25vcmFibGUgPSBmYWxzZSwgbWF4TGVuZ3RoLCBtb3VzZUVudGVyID0gZmFsc2UsIGNvbG9yTWFzaywgb3JpZ2luYWxQbGFjZWhvbGRlcjtcbiAgICAgICAgdmFyIGdldE1hc2tUZW1wbGF0ZSA9IGZ1bmN0aW9uKGJhc2VPbklucHV0LCBtaW5pbWFsUG9zLCBpbmNsdWRlTW9kZSwgbm9KaXQsIGNsZWFyT3B0aW9uYWxUYWlsKSB7XG4gICAgICAgICAgICB2YXIgZ3JlZWR5ID0gb3B0cy5ncmVlZHk7XG4gICAgICAgICAgICBpZiAoY2xlYXJPcHRpb25hbFRhaWwpIG9wdHMuZ3JlZWR5ID0gZmFsc2U7XG4gICAgICAgICAgICBtaW5pbWFsUG9zID0gbWluaW1hbFBvcyB8fCAwO1xuICAgICAgICAgICAgdmFyIG1hc2tUZW1wbGF0ZSA9IFtdLCBuZHhJbnRsenIsIHBvcyA9IDAsIHRlc3QsIHRlc3RQb3MsIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGJhc2VPbklucHV0ID09PSB0cnVlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBjbGVhck9wdGlvbmFsVGFpbCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaC5vcHRpb25hbGl0eSA9PT0gdHJ1ZSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zICsgMV0gPT09IHVuZGVmaW5lZCAmJiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10uZ2VuZXJhdGVkSW5wdXQgPT09IHRydWUgfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQgPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmIHBvcyA+IDApID8gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcywgZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpKSA6IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdFBvcy5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5wdXNoKGluY2x1ZGVNb2RlID09PSB0cnVlID8gdGVzdFBvcy5pbnB1dCA6IGluY2x1ZGVNb2RlID09PSBmYWxzZSA/IHRlc3QubmF0aXZlRGVmIDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGppdE1hc2tpbmcgPSBub0ppdCA9PT0gdHJ1ZSA/IGZhbHNlIDogb3B0cy5qaXRNYXNraW5nICE9PSBmYWxzZSA/IG9wdHMuaml0TWFza2luZyA6IHRlc3Quaml0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaml0TWFza2luZyA9PT0gZmFsc2UgfHwgaml0TWFza2luZyA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBqaXRNYXNraW5nID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKGppdE1hc2tpbmcpICYmIGppdE1hc2tpbmcgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5wdXNoKGluY2x1ZGVNb2RlID09PSBmYWxzZSA/IHRlc3QubmF0aXZlRGVmIDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYyA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3QubmV3QmxvY2tNYXJrZXIgJiYgdGVzdC5mbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gcG9zIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIH0gd2hpbGUgKChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBwb3MgPCBtYXhMZW5ndGgpICYmICh0ZXN0LmZuICE9PSBudWxsIHx8IHRlc3QuZGVmICE9PSBcIlwiKSB8fCBtaW5pbWFsUG9zID4gcG9zKTtcbiAgICAgICAgICAgIGlmIChtYXNrVGVtcGxhdGVbbWFza1RlbXBsYXRlLmxlbmd0aCAtIDFdID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVNb2RlICE9PSBmYWxzZSB8fCBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA9PT0gdW5kZWZpbmVkKSBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA9IHBvcyAtIDE7XG4gICAgICAgICAgICBvcHRzLmdyZWVkeSA9IGdyZWVkeTtcbiAgICAgICAgICAgIHJldHVybiBtYXNrVGVtcGxhdGU7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGdldE1hc2tTZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFza3NldDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXNldE1hc2tTZXQoc29mdCkge1xuICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZXRNYXNrU2V0KCk7XG4gICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChzb2Z0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbWFza3NldC52YWxpZFBvc2l0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIG1hc2tzZXQucCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xvc2VzdFRvLCBzdHJpY3QsIHZhbGlkUG9zaXRpb25zKSB7XG4gICAgICAgICAgICB2YXIgYmVmb3JlID0gLTEsIGFmdGVyID0gLTEsIHZhbGlkcyA9IHZhbGlkUG9zaXRpb25zIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgIGlmIChjbG9zZXN0VG8gPT09IHVuZGVmaW5lZCkgY2xvc2VzdFRvID0gLTE7XG4gICAgICAgICAgICBmb3IgKHZhciBwb3NOZHggaW4gdmFsaWRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBzTmR4ID0gcGFyc2VJbnQocG9zTmR4KTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRzW3BzTmR4XSAmJiAoc3RyaWN0IHx8IHZhbGlkc1twc05keF0uZ2VuZXJhdGVkSW5wdXQgIT09IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwc05keCA8PSBjbG9zZXN0VG8pIGJlZm9yZSA9IHBzTmR4O1xuICAgICAgICAgICAgICAgICAgICBpZiAocHNOZHggPj0gY2xvc2VzdFRvKSBhZnRlciA9IHBzTmR4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiZWZvcmUgPT09IC0xIHx8IGJlZm9yZSA9PSBjbG9zZXN0VG8gPyBhZnRlciA6IGFmdGVyID09IC0xID8gYmVmb3JlIDogY2xvc2VzdFRvIC0gYmVmb3JlIDwgYWZ0ZXIgLSBjbG9zZXN0VG8gPyBiZWZvcmUgOiBhZnRlcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXREZWNpc2lvblRha2VyKHRzdCkge1xuICAgICAgICAgICAgdmFyIGRlY2lzaW9uVGFrZXIgPSB0c3QubG9jYXRvclt0c3QuYWx0ZXJuYXRpb25dO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWNpc2lvblRha2VyID09IFwic3RyaW5nXCIgJiYgZGVjaXNpb25UYWtlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZGVjaXNpb25UYWtlciA9IGRlY2lzaW9uVGFrZXIuc3BsaXQoXCIsXCIpWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY2lzaW9uVGFrZXIgIT09IHVuZGVmaW5lZCA/IGRlY2lzaW9uVGFrZXIudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TG9jYXRvcih0c3QsIGFsaWduKSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRvciA9ICh0c3QuYWx0ZXJuYXRpb24gIT0gdW5kZWZpbmVkID8gdHN0Lm1sb2NbZ2V0RGVjaXNpb25UYWtlcih0c3QpXSA6IHRzdC5sb2NhdG9yKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgaWYgKGxvY2F0b3IgIT09IFwiXCIpIHdoaWxlIChsb2NhdG9yLmxlbmd0aCA8IGFsaWduKSBsb2NhdG9yICs9IFwiMFwiO1xuICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcywgdGVzdHMpIHtcbiAgICAgICAgICAgIHBvcyA9IHBvcyA+IDAgPyBwb3MgLSAxIDogMDtcbiAgICAgICAgICAgIHZhciBhbHRUZXN0ID0gZ2V0VGVzdChwb3MpLCB0YXJnZXRMb2NhdG9yID0gZ2V0TG9jYXRvcihhbHRUZXN0KSwgdHN0TG9jYXRvciwgY2xvc2VzdCwgYmVzdE1hdGNoO1xuICAgICAgICAgICAgZm9yICh2YXIgbmR4ID0gMDsgbmR4IDwgdGVzdHMubGVuZ3RoOyBuZHgrKykge1xuICAgICAgICAgICAgICAgIHZhciB0c3QgPSB0ZXN0c1tuZHhdO1xuICAgICAgICAgICAgICAgIHRzdExvY2F0b3IgPSBnZXRMb2NhdG9yKHRzdCwgdGFyZ2V0TG9jYXRvci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKHRzdExvY2F0b3IgLSB0YXJnZXRMb2NhdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdCA9PT0gdW5kZWZpbmVkIHx8IHRzdExvY2F0b3IgIT09IFwiXCIgJiYgZGlzdGFuY2UgPCBjbG9zZXN0IHx8IGJlc3RNYXRjaCAmJiAhb3B0cy5ncmVlZHkgJiYgYmVzdE1hdGNoLm1hdGNoLm9wdGlvbmFsaXR5ICYmIGJlc3RNYXRjaC5tYXRjaC5uZXdCbG9ja01hcmtlciA9PT0gXCJtYXN0ZXJcIiAmJiAoIXRzdC5tYXRjaC5vcHRpb25hbGl0eSB8fCAhdHN0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyKSB8fCBiZXN0TWF0Y2ggJiYgYmVzdE1hdGNoLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiAhdHN0Lm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaCA9IHRzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmVzdE1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgdHN0UHMpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSB8fCBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCBnZXRUZXN0cyhwb3MsIG5keEludGx6ciA/IG5keEludGx6ci5zbGljZSgpIDogbmR4SW50bHpyLCB0c3RQcykpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFRlc3QocG9zLCB0ZXN0cykge1xuICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICh0ZXN0cyB8fCBnZXRUZXN0cyhwb3MpKVswXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihwb3MsIGRlZikge1xuICAgICAgICAgICAgdmFyIHZhbGlkID0gZmFsc2UsIHRlc3RzID0gZ2V0VGVzdHMocG9zKTtcbiAgICAgICAgICAgIGZvciAodmFyIHRuZHggPSAwOyB0bmR4IDwgdGVzdHMubGVuZ3RoOyB0bmR4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdHNbdG5keF0ubWF0Y2ggJiYgdGVzdHNbdG5keF0ubWF0Y2guZGVmID09PSBkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7XG4gICAgICAgICAgICB2YXIgbWFza1Rva2VucyA9IGdldE1hc2tTZXQoKS5tYXNrVG9rZW4sIHRlc3RQb3MgPSBuZHhJbnRsenIgPyB0c3RQcyA6IDAsIG5keEluaXRpYWxpemVyID0gbmR4SW50bHpyID8gbmR4SW50bHpyLnNsaWNlKCkgOiBbIDAgXSwgbWF0Y2hlcyA9IFtdLCBpbnNlcnRTdG9wID0gZmFsc2UsIGxhdGVzdE1hdGNoLCBjYWNoZURlcGVuZGVuY3kgPSBuZHhJbnRsenIgPyBuZHhJbnRsenIuam9pbihcIlwiKSA6IFwiXCI7XG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXNrVG9rZW4sIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hdGNoKG1hdGNoLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdE1hdGNoID0gJC5pbkFycmF5KGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXMpID09PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRva2VuR3JvdXAubWF0Y2hlcywgZnVuY3Rpb24obmR4LCBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNRdWFudGlmaWVyID09PSB0cnVlKSBmaXJzdE1hdGNoID0gaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXNbbmR4IC0gMV0pOyBlbHNlIGlmIChtYXRjaC5oYXNPd25Qcm9wZXJ0eShcIm1hdGNoZXNcIikpIGZpcnN0TWF0Y2ggPSBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0TWF0Y2gpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVOZHhJbml0aWFsaXplcihwb3MsIGFsdGVybmF0ZU5keCwgdGFyZ2V0QWx0ZXJuYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2gsIGluZGV4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdIHx8IFsgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gXSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsbW50Lm1sb2NbYWx0ZXJuYXRlTmR4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gbG1udDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRpb24gPSB0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0QWx0ZXJuYXRpb24gOiBsbW50LmFsdGVybmF0aW9uLCBuZHhQb3MgPSBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dICE9PSB1bmRlZmluZWQgPyBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuaW5kZXhPZihhbHRlcm5hdGVOZHgpIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5kZXhQb3MgPT09IHVuZGVmaW5lZCB8fCBuZHhQb3MgPCBpbmRleFBvcykgJiYgbmR4UG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gbG1udDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4UG9zID0gbmR4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVzdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaEFsdEluZGV4ID0gYmVzdE1hdGNoLmxvY2F0b3JbYmVzdE1hdGNoLmFsdGVybmF0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRvciA9IGJlc3RNYXRjaC5tbG9jW2FsdGVybmF0ZU5keF0gfHwgYmVzdE1hdGNoLm1sb2NbYmVzdE1hdGNoQWx0SW5kZXhdIHx8IGJlc3RNYXRjaC5sb2NhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdG9yLnNsaWNlKCh0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0QWx0ZXJuYXRpb24gOiBiZXN0TWF0Y2guYWx0ZXJuYXRpb24pICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gcmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcywgYWx0ZXJuYXRlTmR4KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc1N1YnNldE9mKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBleHBhbmQocGF0dGVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBhbmRlZCA9IFtdLCBzdGFydCwgZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGF0dGVybi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4uY2hhckF0KGkpID09PSBcIi1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gcGF0dGVybi5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgrK3N0YXJ0IDwgZW5kKSBleHBhbmRlZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoc3RhcnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcGF0dGVybi5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQucHVzaChwYXR0ZXJuLmNoYXJBdChpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZGVkLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yZWdleCAmJiBzb3VyY2UubWF0Y2guZm4gIT09IG51bGwgJiYgdGFyZ2V0Lm1hdGNoLmZuICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZCh0YXJnZXQubWF0Y2guZGVmLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpKS5pbmRleE9mKGV4cGFuZChzb3VyY2UubWF0Y2guZGVmLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpKSkgIT09IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5tYXRjaC5kZWYgPT09IHRhcmdldC5tYXRjaC5uYXRpdmVEZWY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3RhdGljQ2FuTWF0Y2hEZWZpbml0aW9uKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xvYyA9IHNvdXJjZS5sb2NhdG9yLnNsaWNlKHNvdXJjZS5hbHRlcm5hdGlvbikuam9pbihcIlwiKSwgdGxvYyA9IHRhcmdldC5sb2NhdG9yLnNsaWNlKHRhcmdldC5hbHRlcm5hdGlvbikuam9pbihcIlwiKSwgY2FuTWF0Y2ggPSBzbG9jID09IHRsb2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5NYXRjaCA9IGNhbk1hdGNoICYmIHNvdXJjZS5tYXRjaC5mbiA9PT0gbnVsbCAmJiB0YXJnZXQubWF0Y2guZm4gIT09IG51bGwgPyB0YXJnZXQubWF0Y2guZm4udGVzdChzb3VyY2UubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgZmFsc2UsIG9wdHMsIGZhbHNlKSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbk1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1lcmdlTG9jYXRvcnModGFyZ2V0TWF0Y2gsIGFsdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiA9PT0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gJiYgdGFyZ2V0TWF0Y2gubG9jYXRvclt0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaC5tbG9jID0gdGFyZ2V0TWF0Y2gubWxvYyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jTmR4ID0gdGFyZ2V0TWF0Y2gubG9jYXRvclt0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY05keCA9PT0gdW5kZWZpbmVkKSB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiA9IHVuZGVmaW5lZDsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jTmR4ID09PSBcInN0cmluZ1wiKSBsb2NOZHggPSBsb2NOZHguc3BsaXQoXCIsXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWF0Y2gubWxvY1tsb2NOZHhdID09PSB1bmRlZmluZWQpIHRhcmdldE1hdGNoLm1sb2NbbG9jTmR4XSA9IHRhcmdldE1hdGNoLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCBpbiBhbHRNYXRjaC5tbG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZHggPT09IFwic3RyaW5nXCIpIG5keCA9IG5keC5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1hdGNoLm1sb2NbbmR4XSA9PT0gdW5kZWZpbmVkKSB0YXJnZXRNYXRjaC5tbG9jW25keF0gPSBhbHRNYXRjaC5tbG9jW25keF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaC5sb2NhdG9yW3RhcmdldE1hdGNoLmFsdGVybmF0aW9uXSA9IE9iamVjdC5rZXlzKHRhcmdldE1hdGNoLm1sb2MpLmpvaW4oXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IDUwMCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIklucHV0bWFzazogVGhlcmUgaXMgcHJvYmFibHkgYW4gZXJyb3IgaW4geW91ciBtYXNrIGRlZmluaXRpb24gb3IgaW4gdGhlIGNvZGUuIENyZWF0ZSBhbiBpc3N1ZSBvbiBnaXRodWIgd2l0aCBhbiBleGFtcGxlIG9mIHRoZSBtYXNrIHlvdSBhcmUgdXNpbmcuIFwiICsgZ2V0TWFza1NldCgpLm1hc2s7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPT09IHBvcyAmJiBtYXRjaC5tYXRjaGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IGxvb3BOZHgucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWxvYzoge31cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gubWF0Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNHcm91cCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpICsgMV0sIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWF0Y2hlcywgZnVuY3Rpb24obmR4LCBtdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGNoLm1hdGNoLm9wdGlvbmFsaXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpZmllclJlY3Vyc2UgPT09IHVuZGVmaW5lZCAmJiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIG9wdGlvbmFsVG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGVUb2tlbiA9IG1hdGNoLCBtYWx0ZXJuYXRlTWF0Y2hlcyA9IFtdLCBtYWx0TWF0Y2hlcywgY3VycmVudE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIGxvb3BOZHhDbnQgPSBsb29wTmR4Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0SW5kZXggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRJbmRleCA9PT0gLTEgfHwgdHlwZW9mIGFsdEluZGV4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zID0gdGVzdFBvcywgbmR4SW5pdGlhbGl6ZXJDbG9uZSA9IG5keEluaXRpYWxpemVyLnNsaWNlKCksIGFsdEluZGV4QXJyID0gW10sIGFtbmR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFsdEluZGV4ID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyID0gYWx0SW5kZXguc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhbW5keCA9IDA7IGFtbmR4IDwgYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IGFtbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRJbmRleEFyci5wdXNoKGFtbmR4LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdEluZGV4QXJyQ2xvbmUgPSBhbHRJbmRleEFyci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsID0gZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW3Bvc10ubGVuZ3RoOyBpIDwgZWw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyLnNwbGljZShhbHRJbmRleEFyci5pbmRleE9mKGdldE1hc2tTZXQoKS5leGNsdWRlc1twb3NdW2ldLnRvU3RyaW5nKCkpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRJbmRleEFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRJbmRleEFyciA9IGFsdEluZGV4QXJyQ2xvbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYyA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZShwYXJzZUludChvcHRzLmtlZXBTdGF0aWMpKSAmJiBjdXJyZW50UG9zID49IG9wdHMua2VlcFN0YXRpYykgYWx0SW5kZXhBcnIgPSBhbHRJbmRleEFyci5zbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuTWF0Y2hlZEFsdGVybmF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCA9IDA7IG5keCA8IGFsdEluZGV4QXJyLmxlbmd0aDsgbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtbmR4ID0gcGFyc2VJbnQoYWx0SW5kZXhBcnJbbmR4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZHhJbml0aWFsaXplciA9IHR5cGVvZiBhbHRJbmRleCA9PT0gXCJzdHJpbmdcIiA/IHJlc29sdmVOZHhJbml0aWFsaXplcih0ZXN0UG9zLCBhbW5keCwgbG9vcE5keENudCkgfHwgbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpIDogbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdICYmIGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdLCBbIGFtbmR4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSkpIG1hdGNoID0gdHJ1ZTsgZWxzZSBpZiAobmR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5NYXRjaGVkQWx0ZXJuYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDEgPSAwOyBuZHgxIDwgbWFsdE1hdGNoZXMubGVuZ3RoOyBuZHgxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2ggPSBtYWx0TWF0Y2hlc1tuZHgxXSwgZHJvcE1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWF0Y2gubWF0Y2guaml0ID0gYWx0TWF0Y2gubWF0Y2guaml0IHx8IHVuTWF0Y2hlZEFsdGVybmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoLmFsdGVybmF0aW9uID0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gfHwgbG9vcE5keENudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHgyID0gMDsgbmR4MiA8IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aDsgbmR4MisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXRjaDIgPSBtYWx0ZXJuYXRlTWF0Y2hlc1tuZHgyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbHRJbmRleCAhPT0gXCJzdHJpbmdcIiB8fCBhbHRNYXRjaC5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkICYmICQuaW5BcnJheShhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpLCBhbHRJbmRleEFycikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2gubWF0Y2gubmF0aXZlRGVmID09PSBhbHRNYXRjaDIubWF0Y2gubmF0aXZlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoMiwgYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N1YnNldE9mKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMCwgYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdWJzZXRPZihhbHRNYXRjaDIsIGFsdE1hdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRpY0Nhbk1hdGNoRGVmaW5pdGlvbihhbHRNYXRjaCwgYWx0TWF0Y2gyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlcm5hdGVNYXRjaGVzLnNwbGljZShtYWx0ZXJuYXRlTWF0Y2hlcy5pbmRleE9mKGFsdE1hdGNoMiksIDAsIGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkcm9wTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMucHVzaChhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBjdXJyZW50TWF0Y2hlcy5jb25jYXQobWFsdGVybmF0ZU1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gbWF0Y2hlcy5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEluaXRpYWxpemVyID0gbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXRjaCA9IGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYWx0SW5kZXhdIHx8IG1hc2tUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSwgWyBhbHRJbmRleCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzUXVhbnRpZmllciAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdCA9IG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHFuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHFuZHggPCAoaXNOYU4ocXQucXVhbnRpZmllci5tYXgpID8gcW5keCArIDEgOiBxdC5xdWFudGlmaWVyLm1heCkgJiYgdGVzdFBvcyA8PSBwb3M7IHFuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5Hcm91cCA9IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShxdCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gaGFuZGxlTWF0Y2godG9rZW5Hcm91cCwgWyBxbmR4IF0uY29uY2F0KGxvb3BOZHgpLCB0b2tlbkdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciA9IHFuZHggPj0gcXQucXVhbnRpZmllci5taW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RNYXRjaC5qaXQgPSAocW5keCB8fCAxKSAqIHRva2VuR3JvdXAubWF0Y2hlcy5pbmRleE9mKGxhdGVzdE1hdGNoKSA+PSBxdC5xdWFudGlmaWVyLmppdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0TWF0Y2guaml0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmppdE9mZnNldFtwb3NdID0gdG9rZW5Hcm91cC5tYXRjaGVzLmluZGV4T2YobGF0ZXN0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0bmR4ID0gbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID4gMCA/IG5keEluaXRpYWxpemVyLnNoaWZ0KCkgOiAwOyB0bmR4IDwgbWFza1Rva2VuLm1hdGNoZXMubGVuZ3RoOyB0bmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLmlzUXVhbnRpZmllciAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbdG5keF0sIFsgdG5keCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIHRlc3RQb3MgPT09IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVzdFBvcyA+IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWVyZ2VMb2NhdG9ycyhwb3MsIHRlc3RzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0b3IgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheSh0ZXN0cykpIHRlc3RzID0gWyB0ZXN0cyBdO1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1swXS5hbHRlcm5hdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yID0gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcywgdGVzdHMuc2xpY2UoKSkubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0b3IubGVuZ3RoID09PSAwKSBsb2NhdG9yID0gdGVzdHNbMF0ubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRlc3RzLCBmdW5jdGlvbihuZHgsIHRzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0c3QuZGVmICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhdG9yLmxlbmd0aCA9PT0gMCkgbG9jYXRvciA9IHRzdC5sb2NhdG9yLnNsaWNlKCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhdG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRzdC5sb2NhdG9yW2ldICYmIGxvY2F0b3JbaV0udG9TdHJpbmcoKS5pbmRleE9mKHRzdC5sb2NhdG9yW2ldKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRvcltpXSArPSBcIixcIiArIHRzdC5sb2NhdG9yW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5keEludGx6ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1BvcyA9IHBvcyAtIDEsIHRlc3Q7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgodGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twcmV2aW91c1Bvc10gfHwgZ2V0TWFza1NldCgpLnRlc3RzW3ByZXZpb3VzUG9zXSkgPT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c1BvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1Bvcy0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0ICE9PSB1bmRlZmluZWQgJiYgcHJldmlvdXNQb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW5pdGlhbGl6ZXIgPSBtZXJnZUxvY2F0b3JzKHByZXZpb3VzUG9zLCB0ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlRGVwZW5kZW5jeSA9IG5keEluaXRpYWxpemVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcHJldmlvdXNQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdWzBdLmNkID09PSBjYWNoZURlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtdG5keCA9IG5keEluaXRpYWxpemVyLnNoaWZ0KCk7IG10bmR4IDwgbWFza1Rva2Vucy5sZW5ndGg7IG10bmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWFza1Rva2Vuc1ttdG5keF0sIG5keEluaXRpYWxpemVyLCBbIG10bmR4IF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgdGVzdFBvcyA9PT0gcG9zIHx8IHRlc3RQb3MgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAwIHx8IGluc2VydFN0b3ApIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtYXRjaDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWY6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsb2NhdG9yOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgbWxvYzoge30sXG4gICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3lcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZHhJbnRsenIgIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCBbXSwgbWF0Y2hlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSA9ICQuZXh0ZW5kKHRydWUsIFtdLCBtYXRjaGVzKTtcbiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJUZW1wbGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuX2J1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLl9idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUoZmFsc2UsIDEpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuYnVmZmVyID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5idWZmZXIgPSBnZXRNYXNrU2V0KCkuX2J1ZmZlci5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS5fYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlcihub0NhY2hlKSB7XG4gICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmJ1ZmZlciA9PT0gdW5kZWZpbmVkIHx8IG5vQ2FjaGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuX2J1ZmZlciA9PT0gdW5kZWZpbmVkKSBnZXRNYXNrU2V0KCkuX2J1ZmZlciA9IGdldE1hc2tTZXQoKS5idWZmZXIuc2xpY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkuYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hGcm9tQnVmZmVyKHN0YXJ0LCBlbmQsIGJ1ZmZlcikge1xuICAgICAgICAgICAgdmFyIGksIHA7XG4gICAgICAgICAgICBpZiAoc3RhcnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgZW5kID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAgPSBzdGFydDtcbiAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcltpXSAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxSZXN1bHQgPSBpc1ZhbGlkKHAsIGJ1ZmZlcltpXSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gdmFsUmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyB2YWxSZXN1bHQuY2FyZXQgOiB2YWxSZXN1bHQucG9zICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjYXNpbmcoZWxlbSwgdGVzdCwgcG9zKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdHMuY2FzaW5nIHx8IHRlc3QuY2FzaW5nKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJ1cHBlclwiOlxuICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImxvd2VyXCI6XG4gICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgICAgICAgICB2YXIgcG9zQmVmb3JlID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChwb3MgPT09IDAgfHwgcG9zQmVmb3JlICYmIHBvc0JlZm9yZS5pbnB1dCA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZShJbnB1dG1hc2sua2V5Q29kZS5TUEFDRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5jYXNpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBvcHRzLmNhc2luZy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjaGVja0FsdGVybmF0aW9uTWF0Y2goYWx0QXJyMSwgYWx0QXJyMiwgbmEpIHtcbiAgICAgICAgICAgIHZhciBhbHRBcnJDID0gb3B0cy5ncmVlZHkgPyBhbHRBcnIyIDogYWx0QXJyMi5zbGljZSgwLCAxKSwgaXNNYXRjaCA9IGZhbHNlLCBuYUFyciA9IG5hICE9PSB1bmRlZmluZWQgPyBuYS5zcGxpdChcIixcIikgOiBbXSwgbmFOZHg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKChuYU5keCA9IGFsdEFycjEuaW5kZXhPZihuYUFycltpXSkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBhbHRBcnIxLnNwbGljZShuYU5keCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgYWxuZHggPSAwOyBhbG5keCA8IGFsdEFycjEubGVuZ3RoOyBhbG5keCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShhbHRBcnIxW2FsbmR4XSwgYWx0QXJyQykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNNYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgckFsdFBvcykge1xuICAgICAgICAgICAgdmFyIHZhbGlkUHNDbG9uZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpLCBsYXN0QWx0LCBhbHRlcm5hdGlvbiwgaXNWYWxpZFJzbHQgPSBmYWxzZSwgYWx0UG9zLCBwcmV2QWx0UG9zLCBpLCB2YWxpZFBvcywgZGVjaXNpb25Qb3MsIGxBbHRQb3MgPSByQWx0UG9zICE9PSB1bmRlZmluZWQgPyByQWx0UG9zIDogZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgIGlmIChsQWx0UG9zID09PSAtMSAmJiByQWx0UG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsYXN0QWx0ID0gMDtcbiAgICAgICAgICAgICAgICBwcmV2QWx0UG9zID0gZ2V0VGVzdChsYXN0QWx0KTtcbiAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbiA9IHByZXZBbHRQb3MuYWx0ZXJuYXRpb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoO2xBbHRQb3MgPj0gMDsgbEFsdFBvcy0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsQWx0UG9zXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdFBvcyAmJiBhbHRQb3MuYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZBbHRQb3MgJiYgcHJldkFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0gIT09IGFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBbHQgPSBsQWx0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpb24gPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0uYWx0ZXJuYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2QWx0UG9zID0gYWx0UG9zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkZWNpc2lvblBvcyA9IHBhcnNlSW50KGxhc3RBbHQpO1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10gPSBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdIHx8IFtdO1xuICAgICAgICAgICAgICAgIGlmIChwb3MgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGdldERlY2lzaW9uVGFrZXIocHJldkFsdFBvcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsaWRJbnB1dHNDbG9uZSA9IFtdLCBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKSArIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkUG9zICYmIHZhbGlkUG9zLmdlbmVyYXRlZElucHV0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZElucHV0c0Nsb25lLnB1c2godmFsaWRQb3MuaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCBwb3MpIHN0YXRpY0lucHV0c0JlZm9yZVBvcysrO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSAmJiBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdLmxlbmd0aCA8IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NPZmZzZXQgPSBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgKiAtMSwgdmFsaWRJbnB1dHMgPSB2YWxpZElucHV0c0Nsb25lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS50ZXN0c1tkZWNpc2lvblBvc10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodmFsaWRJbnB1dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdmFsaWRJbnB1dHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlzVmFsaWRSc2x0ID0gaXNWYWxpZChnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHRydWUpICsgMSwgaW5wdXQsIGZhbHNlLCBmcm9tU2V0VmFsaWQsIHRydWUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkUnNsdCAmJiBjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihwb3MpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSArIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsaWRQb3MgPT09IHVuZGVmaW5lZCB8fCB2YWxpZFBvcy5tYXRjaC5mbiA9PSBudWxsKSAmJiBpIDwgcG9zICsgcG9zT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc09mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHBvcyArIHBvc09mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0ID0gaXNWYWxpZChwb3MgPiB0YXJnZXRMdnAgPyB0YXJnZXRMdnAgOiBwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRSc2x0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBnZXRUZXN0KGRlY2lzaW9uUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB2YWxpZFBzQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjaXNpb25UYWtlciA9IGdldERlY2lzaW9uVGFrZXIocHJldkFsdFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10uaW5kZXhPZihkZWNpc2lvblRha2VyKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZGVjaXNpb25Qb3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10ucHVzaChkZWNpc2lvblRha2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBkZWNpc2lvblBvczsgaSA8IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSkgKyAxOyBpKyspIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0ID0gYWx0ZXJuYXRlKHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQsIGRlY2lzaW9uUG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWRSc2x0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZnJvbUFsdGVybmF0ZSwgdmFsaWRhdGVPbmx5KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBpc1NlbGVjdGlvbihwb3NPYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgPyBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID4gMSB8fCBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID09PSAxIDogcG9zT2JqLmVuZCAtIHBvc09iai5iZWdpbiA+IDEgfHwgcG9zT2JqLmVuZCAtIHBvc09iai5iZWdpbiA9PT0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmljdCA9IHN0cmljdCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBtYXNrUG9zID0gcG9zO1xuICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWFza1BvcyA9IGlzUlRMID8gcG9zLmVuZCA6IHBvcy5iZWdpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9pc1ZhbGlkKHBvc2l0aW9uLCBjLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICQuZWFjaChnZXRUZXN0cyhwb3NpdGlvbiksIGZ1bmN0aW9uKG5keCwgdHN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gdHN0Lm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBnZXRCdWZmZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJzbHQgPSB0ZXN0LmZuICE9IG51bGwgPyB0ZXN0LmZuLnRlc3QoYywgZ2V0TWFza1NldCgpLCBwb3NpdGlvbiwgc3RyaWN0LCBvcHRzLCBpc1NlbGVjdGlvbihwb3MpKSA6IChjID09PSB0ZXN0LmRlZiB8fCBjID09PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIpICYmIHRlc3QuZGVmICE9PSBcIlwiID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYzogZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsIHRydWUpIHx8IHRlc3QuZGVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICB9IDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSByc2x0LmMgIT09IHVuZGVmaW5lZCA/IHJzbHQuYyA6IGMsIHZhbGlkYXRlZFBvcyA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0gPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciAmJiB0ZXN0LmZuID09PSBudWxsID8gZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsIHRydWUpIHx8IHRlc3QuZGVmIDogZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0LnJlbW92ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocnNsdC5yZW1vdmUpKSByc2x0LnJlbW92ZSA9IFsgcnNsdC5yZW1vdmUgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5yZW1vdmUuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmFsaWRhdGVNYXNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBsbW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsbW50ICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0Lmluc2VydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocnNsdC5pbnNlcnQpKSByc2x0Lmluc2VydCA9IFsgcnNsdC5pbnNlcnQgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5pbnNlcnQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQobG1udC5wb3MsIGxtbnQuYywgdHJ1ZSwgZnJvbVNldFZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSB0cnVlICYmIHJzbHQucG9zICE9PSB1bmRlZmluZWQgJiYgcnNsdC5wb3MgIT09IHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkUG9zID0gcnNsdC5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnNsdCAhPT0gdHJ1ZSAmJiByc2x0LnBvcyA9PT0gdW5kZWZpbmVkICYmIHJzbHQuYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXZhbGlkYXRlTWFzayhwb3MsICQuZXh0ZW5kKHt9LCB0c3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogY2FzaW5nKGVsZW0sIHRlc3QsIHZhbGlkYXRlZFBvcylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmcm9tU2V0VmFsaWQsIHZhbGlkYXRlZFBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByc2x0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnNsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpO1xuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLnByZVZhbGlkYXRpb24pICYmICFzdHJpY3QgJiYgZnJvbVNldFZhbGlkICE9PSB0cnVlICYmIHZhbGlkYXRlT25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9wdHMucHJlVmFsaWRhdGlvbihnZXRCdWZmZXIoKSwgbWFza1BvcywgYywgaXNTZWxlY3Rpb24ocG9zKSwgb3B0cywgZ2V0TWFza1NldCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0cmFja2JhY2tQb3NpdGlvbnModW5kZWZpbmVkLCBtYXNrUG9zLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAobWF4TGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbWFza1BvcyA8IG1heExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfaXNWYWxpZChtYXNrUG9zLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKCFzdHJpY3QgfHwgZnJvbVNldFZhbGlkID09PSB0cnVlKSAmJiByZXN1bHQgPT09IGZhbHNlICYmIHZhbGlkYXRlT25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3NWYWxpZCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9zVmFsaWQgJiYgY3VycmVudFBvc1ZhbGlkLm1hdGNoLmZuID09PSBudWxsICYmIChjdXJyZW50UG9zVmFsaWQubWF0Y2guZGVmID09PSBjIHx8IGMgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBzZWVrTmV4dChtYXNrUG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3B0cy5pbnNlcnRNb2RlIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzZWVrTmV4dChtYXNrUG9zKV0gPT09IHVuZGVmaW5lZCkgJiYgKCFpc01hc2sobWFza1BvcywgdHJ1ZSkgfHwgZ2V0TWFza1NldCgpLmppdE9mZnNldFttYXNrUG9zXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5qaXRPZmZzZXRbbWFza1Bvc10gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3NlZWtOZXh0KG1hc2tQb3MpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpc1ZhbGlkKG1hc2tQb3MgKyBnZXRNYXNrU2V0KCkuaml0T2Zmc2V0W21hc2tQb3NdLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHJlc3VsdC5jYXJldCA9IG1hc2tQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBmb3IgKHZhciBuUG9zID0gbWFza1BvcyArIDEsIHNuUG9zID0gc2Vla05leHQobWFza1Bvcyk7IG5Qb3MgPD0gc25Qb3M7IG5Qb3MrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2lzVmFsaWQoblBvcywgYywgc3RyaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tiYWNrUG9zaXRpb25zKG1hc2tQb3MsIHJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5wb3MgOiBuUG9zKSB8fCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1BvcyA9IG5Qb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UgJiYgb3B0cy5rZWVwU3RhdGljICE9PSBmYWxzZSAmJiAob3B0cy5yZWdleCA9PSBudWxsIHx8IGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpKSAmJiAhc3RyaWN0ICYmIGZyb21BbHRlcm5hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYWx0ZXJuYXRlKG1hc2tQb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hc2tQb3NcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucG9zdFZhbGlkYXRpb24pICYmIHJlc3VsdCAhPT0gZmFsc2UgJiYgIXN0cmljdCAmJiBmcm9tU2V0VmFsaWQgIT09IHRydWUgJiYgdmFsaWRhdGVPbmx5ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3RSZXN1bHQgPSBvcHRzLnBvc3RWYWxpZGF0aW9uKGdldEJ1ZmZlcih0cnVlKSwgcG9zLmJlZ2luICE9PSB1bmRlZmluZWQgPyBpc1JUTCA/IHBvcy5lbmQgOiBwb3MuYmVnaW4gOiBwb3MsIHJlc3VsdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKHBvc3RSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zdFJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlciAmJiBwb3N0UmVzdWx0LmJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSBwb3N0UmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gdHJ1ZSA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcG9zdFJlc3VsdC5idWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBvc3RSZXN1bHQgPT09IHRydWUgPyByZXN1bHQgOiBwb3N0UmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnBvcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnBvcyA9IG1hc2tQb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSB8fCB2YWxpZGF0ZU9ubHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHBvc2l0aW9uc0Nsb25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdHJhY2tiYWNrUG9zaXRpb25zKG9yaWdpbmFsUG9zLCBuZXdQb3MsIGZpbGxPbmx5KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsUG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKG9yaWdpbmFsUG9zID0gbmV3UG9zIC0gMTsgb3JpZ2luYWxQb3MgPiAwOyBvcmlnaW5hbFBvcy0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbb3JpZ2luYWxQb3NdKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBwcyA9IG9yaWdpbmFsUG9zOyBwcyA8IG5ld1BvczsgcHMrKykge1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcHNdID09PSB1bmRlZmluZWQgJiYgIWlzTWFzayhwcywgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZwID0gcHMgPT0gMCA/IGdldFRlc3QocHMpIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BzIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh2cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocHMpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbdGVzdHMubGVuZ3RoIC0gMV0ubWF0Y2guZGVmID09PSBcIlwiKSB0ZXN0cy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2ggPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocHMsIHRlc3RzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaCA9ICQuZXh0ZW5kKHt9LCBiZXN0TWF0Y2gsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZ2V0UGxhY2Vob2xkZXIocHMsIGJlc3RNYXRjaC5tYXRjaCwgdHJ1ZSkgfHwgYmVzdE1hdGNoLm1hdGNoLmRlZlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2guZ2VuZXJhdGVkSW5wdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZU1hc2socHMsIGJlc3RNYXRjaCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbE9ubHkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3ZwSW5wdXQgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXS5pbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpc1ZhbGlkKG5ld1BvcywgY3ZwSW5wdXQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXZhbGlkYXRlTWFzayhwb3MsIHZhbGlkVGVzdCwgZnJvbVNldFZhbGlkLCB2YWxpZGF0ZWRQb3MpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIElzRW5jbG9zZWRTdGF0aWMocG9zLCB2YWxpZHMsIHNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBwb3NNYXRjaCA9IHZhbGlkc1twb3NdO1xuICAgICAgICAgICAgICAgIGlmIChwb3NNYXRjaCAhPT0gdW5kZWZpbmVkICYmIChwb3NNYXRjaC5tYXRjaC5mbiA9PT0gbnVsbCAmJiBwb3NNYXRjaC5tYXRjaC5vcHRpb25hbGl0eSAhPT0gdHJ1ZSB8fCBwb3NNYXRjaC5pbnB1dCA9PT0gb3B0cy5yYWRpeFBvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldk1hdGNoID0gc2VsZWN0aW9uLmJlZ2luIDw9IHBvcyAtIDEgPyB2YWxpZHNbcG9zIC0gMV0gJiYgdmFsaWRzW3BvcyAtIDFdLm1hdGNoLmZuID09PSBudWxsICYmIHZhbGlkc1twb3MgLSAxXSA6IHZhbGlkc1twb3MgLSAxXSwgbmV4dE1hdGNoID0gc2VsZWN0aW9uLmVuZCA+IHBvcyArIDEgPyB2YWxpZHNbcG9zICsgMV0gJiYgdmFsaWRzW3BvcyArIDFdLm1hdGNoLmZuID09PSBudWxsICYmIHZhbGlkc1twb3MgKyAxXSA6IHZhbGlkc1twb3MgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZNYXRjaCAmJiBuZXh0TWF0Y2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiZWdpbiA9IHBvcy5iZWdpbiAhPT0gdW5kZWZpbmVkID8gcG9zLmJlZ2luIDogcG9zLCBlbmQgPSBwb3MuZW5kICE9PSB1bmRlZmluZWQgPyBwb3MuZW5kIDogcG9zO1xuICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiA+IHBvcy5lbmQpIHtcbiAgICAgICAgICAgICAgICBiZWdpbiA9IHBvcy5lbmQ7XG4gICAgICAgICAgICAgICAgZW5kID0gcG9zLmJlZ2luO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsaWRhdGVkUG9zID0gdmFsaWRhdGVkUG9zICE9PSB1bmRlZmluZWQgPyB2YWxpZGF0ZWRQb3MgOiBiZWdpbjtcbiAgICAgICAgICAgIGlmIChiZWdpbiAhPT0gZW5kIHx8IG9wdHMuaW5zZXJ0TW9kZSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSAhPT0gdW5kZWZpbmVkICYmIGZyb21TZXRWYWxpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQodHJ1ZSwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSksIGk7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBiZWdpbjtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBsdnA7IGkgPj0gYmVnaW47IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlLCBqID0gdmFsaWRhdGVkUG9zLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMsIG5lZWRzVmFsaWRhdGlvbiA9IGZhbHNlLCBwb3NNYXRjaCA9IGosIGkgPSBqO1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZFRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ZhbGlkYXRlZFBvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdmFsaWRUZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2grKztcbiAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmVnaW4gPCBlbmQpIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICg7aSA8PSBsdnA7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHBvc2l0aW9uc0Nsb25lW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodCAhPT0gdW5kZWZpbmVkICYmIChpID49IGVuZCB8fCBpID49IGJlZ2luICYmIHQuZ2VuZXJhdGVkSW5wdXQgIT09IHRydWUgJiYgSXNFbmNsb3NlZFN0YXRpYyhpLCBwb3NpdGlvbnNDbG9uZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgfSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0VGVzdChwb3NNYXRjaCkubWF0Y2guZGVmICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRzVmFsaWRhdGlvbiA9PT0gZmFsc2UgJiYgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdICYmIHBvc2l0aW9uc0Nsb25lW3Bvc01hdGNoXS5tYXRjaC5uYXRpdmVEZWYgPT09IHQubWF0Y2gubmF0aXZlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NNYXRjaF0gPSAkLmV4dGVuZCh0cnVlLCB7fSwgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc01hdGNoXS5pbnB1dCA9IHQuaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrYmFja1Bvc2l0aW9ucyh1bmRlZmluZWQsIHBvc01hdGNoLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IHBvc01hdGNoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5zaGlmdFBvc2l0aW9ucyAmJiBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihwb3NNYXRjaCwgdC5tYXRjaC5kZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpc1ZhbGlkKHBvc01hdGNoLCB0LmlucHV0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSByZXN1bHQgIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gcmVzdWx0LmNhcmV0IHx8IHJlc3VsdC5pbnNlcnQgPyBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIDogcG9zTWF0Y2ggKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1ZhbGlkYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdC5nZW5lcmF0ZWRJbnB1dCA9PT0gdHJ1ZSB8fCB0LmlucHV0ID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5udW1lcmljSW5wdXQgPT09IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCAmJiBwb3NNYXRjaCA+IGVuZCAmJiBpc01hc2socG9zTWF0Y2gsIHRydWUpICYmICh0Lm1hdGNoLmZuICE9PSBudWxsIHx8IHBvc01hdGNoID4gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NNYXRjaCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFRlc3QocG9zTWF0Y2gpLm1hdGNoLmRlZiA9PSBcIlwiKSB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2ggPSBqO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBwb3NpdGlvbnNDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsaWRUZXN0KSB7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ZhbGlkYXRlZFBvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdmFsaWRUZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTWFzayhwb3MsIHN0cmljdCkge1xuICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUocG9zKS5tYXRjaDtcbiAgICAgICAgICAgIGlmICh0ZXN0LmRlZiA9PT0gXCJcIikgdGVzdCA9IGdldFRlc3QocG9zKS5tYXRjaDtcbiAgICAgICAgICAgIGlmICh0ZXN0LmZuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5mbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJpY3QgIT09IHRydWUgJiYgcG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwb3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0cy5sZW5ndGggPiAxICsgKHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiA9PT0gXCJcIiA/IDEgOiAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZWVrTmV4dChwb3MsIG5ld0Jsb2NrKSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3MgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKGdldFRlc3QocG9zaXRpb24pLm1hdGNoLmRlZiAhPT0gXCJcIiAmJiAobmV3QmxvY2sgPT09IHRydWUgJiYgKGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8ICFpc01hc2socG9zaXRpb24pKSB8fCBuZXdCbG9jayAhPT0gdHJ1ZSAmJiAhaXNNYXNrKHBvc2l0aW9uKSkpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNlZWtQcmV2aW91cyhwb3MsIG5ld0Jsb2NrKSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3MsIHRlc3RzO1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uIDw9IDApIHJldHVybiAwO1xuICAgICAgICAgICAgd2hpbGUgKC0tcG9zaXRpb24gPiAwICYmIChuZXdCbG9jayA9PT0gdHJ1ZSAmJiBnZXRUZXN0KHBvc2l0aW9uKS5tYXRjaC5uZXdCbG9ja01hcmtlciAhPT0gdHJ1ZSB8fCBuZXdCbG9jayAhPT0gdHJ1ZSAmJiAhaXNNYXNrKHBvc2l0aW9uKSAmJiAodGVzdHMgPSBnZXRUZXN0cyhwb3NpdGlvbiksIFxuICAgICAgICAgICAgdGVzdHMubGVuZ3RoIDwgMiB8fCB0ZXN0cy5sZW5ndGggPT09IDIgJiYgdGVzdHNbMV0ubWF0Y2guZGVmID09PSBcIlwiKSkpIHt9XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2FyZXRQb3MsIGV2ZW50LCB0cmlnZ2VyRXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCBldmVudCwgYnVmZmVyLCBjYXJldFBvcywgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09IHRydWUgPyByZWZyZXNoIDogcmVmcmVzaC5zdGFydCwgcmVmcmVzaC5lbmQsIHJlc3VsdC5idWZmZXIgfHwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGdldEJ1ZmZlcih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgIT09IHVuZGVmaW5lZCkgY2FyZXRQb3MgPSByZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5jYXJldCA6IGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZVNldChidWZmZXIuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zICE9PSB1bmRlZmluZWQgJiYgKGV2ZW50ID09PSB1bmRlZmluZWQgfHwgZXZlbnQudHlwZSAhPT0gXCJibHVyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHJlbmRlckNvbG9yTWFzayhpbnB1dCwgY2FyZXRQb3MsIGJ1ZmZlci5sZW5ndGggPT09IDApO1xuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyRXZlbnRzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKGlucHV0KSwgbnB0VmFsID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnB0VmFsID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNsZWFyZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QsIHJldHVyblBMKSB7XG4gICAgICAgICAgICB0ZXN0ID0gdGVzdCB8fCBnZXRUZXN0KHBvcykubWF0Y2g7XG4gICAgICAgICAgICBpZiAodGVzdC5wbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkIHx8IHJldHVyblBMID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbih0ZXN0LnBsYWNlaG9sZGVyKSA/IHRlc3QucGxhY2Vob2xkZXIob3B0cykgOiB0ZXN0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0ZXN0LmZuID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+IC0xICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocG9zKSwgc3RhdGljQWx0ZXJuYXRpb25zID0gW10sIHByZXZUZXN0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHMubGVuZ3RoID4gMSArICh0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPT09IFwiXCIgPyAxIDogMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxpdHkgIT09IHRydWUgJiYgdGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlICYmICh0ZXN0c1tpXS5tYXRjaC5mbiA9PT0gbnVsbCB8fCAocHJldlRlc3QgPT09IHVuZGVmaW5lZCB8fCB0ZXN0c1tpXS5tYXRjaC5mbi50ZXN0KHByZXZUZXN0Lm1hdGNoLmRlZiwgZ2V0TWFza1NldCgpLCBwb3MsIHRydWUsIG9wdHMpICE9PSBmYWxzZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0FsdGVybmF0aW9ucy5wdXNoKHRlc3RzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzW2ldLm1hdGNoLmZuID09PSBudWxsKSBwcmV2VGVzdCA9IHRlc3RzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGljQWx0ZXJuYXRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvWzAtOWEtYkEtWl0vLnRlc3Qoc3RhdGljQWx0ZXJuYXRpb25zWzBdLm1hdGNoLmRlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQocG9zICUgb3B0cy5wbGFjZWhvbGRlci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0LmRlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIobnB0LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGllKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IHZhbHVlICYmIChucHQucGxhY2Vob2xkZXIgIT09IHZhbHVlIHx8IG5wdC5wbGFjZWhvbGRlciA9PT0gXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCksIG5wdFZhbHVlID0gbnB0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5wdFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobHZwID09PSAtMSAmJiBucHRWYWx1ZSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGx2cCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIobnB0LCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChucHQucGxhY2Vob2xkZXIgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbnB0LnBsYWNlaG9sZGVyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5wbGFjZWhvbGRlciA9PT0gXCJcIikgbnB0LnJlbW92ZUF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBFdmVudFJ1bGVyID0ge1xuICAgICAgICAgICAgb246IGZ1bmN0aW9uKGlucHV0LCBldmVudE5hbWUsIGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHZhciBldiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5pbnB1dG1hc2sgPT09IHVuZGVmaW5lZCAmJiB0aGlzLm5vZGVOYW1lICE9PSBcIkZPUk1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltT3B0cyA9ICQuZGF0YSh0aGF0LCBcIl9pbnB1dG1hc2tfb3B0c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbU9wdHMpIG5ldyBJbnB1dG1hc2soaW1PcHRzKS5tYXNrKHRoYXQpOyBlbHNlIEV2ZW50UnVsZXIub2ZmKHRoYXQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUudHlwZSAhPT0gXCJzZXR2YWx1ZVwiICYmIHRoaXMubm9kZU5hbWUgIT09IFwiRk9STVwiICYmICh0aGF0LmRpc2FibGVkIHx8IHRoYXQucmVhZE9ubHkgJiYgIShlLnR5cGUgPT09IFwia2V5ZG93blwiICYmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSA2NykgfHwgb3B0cy50YWJUaHJvdWdoID09PSBmYWxzZSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcElucHV0RXZlbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KHRoYXQsIHRoYXQuaW5wdXRtYXNrLmNhcmV0UG9zLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcEtleVByZXNzRXZlbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZW1vYmlsZSB8fCBpcGhvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHVyblZhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXSA9IGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50TmFtZV0ucHVzaChldik7XG4gICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShldmVudE5hbWUsIFsgXCJzdWJtaXRcIiwgXCJyZXNldFwiIF0pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZm9ybSAhPT0gbnVsbCkgJChpbnB1dC5mb3JtKS5vbihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS5vbihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2ZmOiBmdW5jdGlvbihpbnB1dCwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrICYmIGlucHV0LmlucHV0bWFzay5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50c1tldmVudF0gPSBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IGlucHV0LmlucHV0bWFzay5ldmVudHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnROYW1lLCBldkFycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGV2QXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXYgPSBldkFyci5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5mb3JtICE9PSBudWxsKSAkKGlucHV0LmZvcm0pLm9mZihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS5vZmYoZXZlbnROYW1lLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGtleWRvd25FdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBrID0gZS5rZXlDb2RlLCBwb3MgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgfHwgaXBob25lICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRV9TQUZBUkkgfHwgZS5jdHJsS2V5ICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLlggJiYgIWlzSW5wdXRFdmVudFN1cHBvcnRlZChcImN1dFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcih0cnVlKSwgZ2V0TWFza1NldCgpLnAsIGUsIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTkQgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUEFHRV9ET1dOKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogY2FyZXRQb3MsIGNhcmV0UG9zLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkhPTUUgJiYgIWUuc2hpZnRLZXkgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUEFHRV9VUCkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCAwLCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogMCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgob3B0cy51bmRvT25Fc2NhcGUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuRVNDQVBFIHx8IGsgPT09IDkwICYmIGUuY3RybEtleSkgJiYgZS5hbHRLZXkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsIHRydWUsIGZhbHNlLCB1bmRvVmFsdWUuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNsaWNrXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuSU5TRVJUICYmICEoZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaW5zZXJ0TW9kZSA9ICFvcHRzLmluc2VydE1vZGU7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImltLWluc2VydFwiLCBvcHRzLmluc2VydE1vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy50YWJUaHJvdWdoID09PSB0cnVlICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zaGlmdEtleSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFRlc3QocG9zLmJlZ2luKS5tYXRjaC5mbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gc2Vla1ByZXZpb3VzKHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmVuZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrTmV4dChwb3MuYmVnaW4sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtOZXh0KHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmVuZCA8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoKSBwb3MuZW5kLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiA8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgcG9zLmJlZ2luLCBwb3MuZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRzLm9uS2V5RG93bi5jYWxsKHRoaXMsIGUsIGdldEJ1ZmZlcigpLCBjYXJldChpbnB1dCkuYmVnaW4sIG9wdHMpO1xuICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9ICQuaW5BcnJheShrLCBvcHRzLmlnbm9yYWJsZXMpICE9PSAtMTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBrZXlwcmVzc0V2ZW50OiBmdW5jdGlvbihlLCBjaGVja3ZhbCwgd3JpdGVPdXQsIHN0cmljdCwgbmR4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLndoaWNoIHx8IGUuY2hhckNvZGUgfHwgZS5rZXlDb2RlO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja3ZhbCAhPT0gdHJ1ZSAmJiAoIShlLmN0cmxLZXkgJiYgZS5hbHRLZXkpICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGlnbm9yYWJsZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTlRFUiAmJiB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrID09PSA0NiAmJiBlLnNoaWZ0S2V5ID09PSBmYWxzZSAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIpIGsgPSBvcHRzLnJhZGl4UG9pbnQuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBjaGVja3ZhbCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbmR4XG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogY2FyZXQoaW5wdXQpLCBmb3J3YXJkUG9zaXRpb24sIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGspLCBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuX3JhZGl4RGFuY2UgJiYgb3B0cy5udW1lcmljSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBnZXRCdWZmZXIoKS5pbmRleE9mKG9wdHMucmFkaXhQb2ludC5jaGFyQXQoMCkpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmJlZ2luIDw9IGNhcmV0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrID09PSBvcHRzLnJhZGl4UG9pbnQuY2hhckNvZGVBdCgwKSkgb2Zmc2V0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbFJlc3VsdCA9IGlzVmFsaWQocG9zLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZFBvc2l0aW9uID0gdmFsUmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyB2YWxSZXN1bHQuY2FyZXQgOiBzZWVrTmV4dCh2YWxSZXN1bHQucG9zLmJlZ2luID8gdmFsUmVzdWx0LnBvcy5iZWdpbiA6IHZhbFJlc3VsdC5wb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gZm9yd2FyZFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZFBvc2l0aW9uID0gKG9wdHMubnVtZXJpY0lucHV0ICYmIHZhbFJlc3VsdC5jYXJldCA9PT0gdW5kZWZpbmVkID8gc2Vla1ByZXZpb3VzKGZvcndhcmRQb3NpdGlvbikgOiBmb3J3YXJkUG9zaXRpb24pICsgb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyaXRlT3V0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMub25LZXlWYWxpZGF0aW9uLmNhbGwoaW5wdXQsIGssIHZhbFJlc3VsdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS53cml0ZU91dEJ1ZmZlciAmJiB2YWxSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgZm9yd2FyZFBvc2l0aW9uLCBlLCBjaGVja3ZhbCAhPT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gZmFsc2UpIHZhbFJlc3VsdC5mb3J3YXJkUG9zaXRpb24gPSBmb3J3YXJkUG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0ZUV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSwgJGlucHV0ID0gJChpbnB1dCksIGlucHV0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpLCBjYXJldFBvcyA9IGNhcmV0KGlucHV0KSwgdGVtcFZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChpc1JUTCkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wVmFsdWUgPSBjYXJldFBvcy5lbmQ7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zLmVuZCA9IGNhcmV0UG9zLmJlZ2luO1xuICAgICAgICAgICAgICAgICAgICBjYXJldFBvcy5iZWdpbiA9IHRlbXBWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlQmVmb3JlQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiksIHZhbHVlQWZ0ZXJDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKGNhcmV0UG9zLmVuZCwgaW5wdXRWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUJlZm9yZUNhcmV0ID09PSAoaXNSVEwgPyBnZXRCdWZmZXJUZW1wbGF0ZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKDAsIGNhcmV0UG9zLmJlZ2luKS5qb2luKFwiXCIpKSB2YWx1ZUJlZm9yZUNhcmV0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVBZnRlckNhcmV0ID09PSAoaXNSVEwgPyBnZXRCdWZmZXJUZW1wbGF0ZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKGNhcmV0UG9zLmVuZCkuam9pbihcIlwiKSkgdmFsdWVBZnRlckNhcmV0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpICsgdmFsdWVBZnRlckNhcmV0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuY2xpcGJvYXJkRGF0YSAmJiBldi5jbGlwYm9hcmREYXRhLmdldERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQgKyBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpICsgdmFsdWVBZnRlckNhcmV0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgcGFzdGVWYWx1ZSA9IGlucHV0VmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlUGFzdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhc3RlVmFsdWUgPSBvcHRzLm9uQmVmb3JlUGFzdGUuY2FsbChpbnB1dG1hc2ssIGlucHV0VmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFzdGVWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXN0ZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGVja1ZhbChpbnB1dCwgZmFsc2UsIGZhbHNlLCBwYXN0ZVZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSksIGUsIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dEZhbGxCYWNrRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByYWRpeFBvaW50SGFuZGxlcihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0VmFsdWUuY2hhckF0KGNhcmV0UG9zLmJlZ2luIC0gMSkgPT09IFwiLlwiICYmIG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlW2NhcmV0UG9zLmJlZ2luIC0gMV0gPSBvcHRzLnJhZGl4UG9pbnQuY2hhckF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaWVNb2JpbGVIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWVtb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dENoYXIgPSBpbnB1dFZhbHVlLnJlcGxhY2UoZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRDaGFyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdiA9IGlucHV0VmFsdWUuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXYuc3BsaWNlKGNhcmV0UG9zLmJlZ2luLCAwLCBpbnB1dENoYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSBpdi5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBpbnB1dFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRCdWZmZXIoKS5qb2luKFwiXCIpICE9PSBpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHJhZGl4UG9pbnRIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSBpZU1vYmlsZUhhbmRsZXIoaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgIT09IGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBvZmZzZXQgPSAhb3B0cy5udW1lcmljSW5wdXQgJiYgaW5wdXRWYWx1ZS5sZW5ndGggPiBidWZmZXIubGVuZ3RoID8gLTEgOiAwLCBmcm9udFBhcnQgPSBpbnB1dFZhbHVlLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiksIGJhY2tQYXJ0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoY2FyZXRQb3MuYmVnaW4pLCBmcm9udEJ1ZmZlclBhcnQgPSBidWZmZXIuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luICsgb2Zmc2V0KSwgYmFja0J1ZmZlclBhcnQgPSBidWZmZXIuc3Vic3RyKGNhcmV0UG9zLmJlZ2luICsgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBjYXJldFBvcywgZW50cmllcyA9IFwiXCIsIGlzRW50cnkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9udFBhcnQgIT09IGZyb250QnVmZmVyUGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcGwgPSAoaXNFbnRyeSA9IGZyb250UGFydC5sZW5ndGggPj0gZnJvbnRCdWZmZXJQYXJ0Lmxlbmd0aCkgPyBmcm9udFBhcnQubGVuZ3RoIDogZnJvbnRCdWZmZXJQYXJ0Lmxlbmd0aCwgaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBmcm9udFBhcnQuY2hhckF0KGkpID09PSBmcm9udEJ1ZmZlclBhcnQuY2hhckF0KGkpICYmIGkgPCBmcGw7IGkrKykgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5iZWdpbiA9IGkgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgKz0gZnJvbnRQYXJ0LnNsaWNlKGksIHNlbGVjdGlvbi5lbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWNrUGFydCAhPT0gYmFja0J1ZmZlclBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja1BhcnQubGVuZ3RoID4gYmFja0J1ZmZlclBhcnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgKz0gYmFja1BhcnQuc2xpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tQYXJ0Lmxlbmd0aCA8IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmVuZCArPSBiYWNrQnVmZmVyUGFydC5sZW5ndGggLSBiYWNrUGFydC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRW50cnkgJiYgb3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiICYmIGJhY2tQYXJ0ID09PSBcIlwiICYmIGZyb250UGFydC5jaGFyQXQoc2VsZWN0aW9uLmJlZ2luICsgb2Zmc2V0IC0gMSkgPT09IG9wdHMucmFkaXhQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5iZWdpbi0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgPSBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogc2VsZWN0aW9uLmJlZ2luICsgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogc2VsZWN0aW9uLmVuZCArIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGVudHJpZXMuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSBlbnRyeS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5iZWdpbiA9PT0gc2VsZWN0aW9uLmVuZCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luID0gc2Vla1ByZXZpb3VzKHNlbGVjdGlvbi5iZWdpbiArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uLmJlZ2luID09PSBzZWxlY3Rpb24uZW5kIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHNlbGVjdGlvbi5iZWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgc2VsZWN0aW9uLmJlZ2luLCBzZWxlY3Rpb24uZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZG93biA9IG5ldyAkLkV2ZW50KFwia2V5ZG93blwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBvcHRzLm51bWVyaWNJbnB1dCA/IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSA6IElucHV0bWFzay5rZXlDb2RlLkRFTEVURTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiZWZvcmVJbnB1dEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuY2FuY2VsYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuaW5wdXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluc2VydFRleHRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChlLmRhdGEuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gZW50cnkuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZUNvbnRlbnRCYWNrd2FyZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleWRvd24gPSBuZXcgJC5FdmVudChcImtleWRvd25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0U7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlQ29udGVudEZvcndhcmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlkb3duID0gbmV3ICQuRXZlbnQoXCJrZXlkb3duXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ZG93bi5rZXlDb2RlID0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5rZXlkb3duRXZlbnQuY2FsbChpbnB1dCwga2V5ZG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFZhbHVlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0bWFzay5yZWZyZXNoVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCB2YWx1ZSA9IGUgJiYgZS5kZXRhaWwgPyBlLmRldGFpbFswXSA6IGFyZ3VtZW50c1sxXSwgdmFsdWUgPSB2YWx1ZSB8fCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spKSB2YWx1ZSA9IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCB2YWx1ZSwgb3B0cykgfHwgdmFsdWU7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCB0cnVlLCBmYWxzZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzIHx8IG9wdHMuY2xlYXJJbmNvbXBsZXRlKSAmJiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb2N1c0V2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc2hvd01hc2tPbkZvY3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChucHRWYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW91c2VFbnRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucG9zaXRpb25DYXJldE9uVGFiID09PSB0cnVlICYmIG1vdXNlRW50ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5hcHBseShpbnB1dCwgWyBlLCB0cnVlIF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdXNlbGVhdmVFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgbW91c2VFbnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKGlucHV0LCBvcmlnaW5hbFBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpY2tFdmVudDogZnVuY3Rpb24oZSwgdGFiYmVkKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9SYWRpeEZvY3VzKGNsaWNrUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodnBzW2NsaWNrUG9zXSA9PT0gdW5kZWZpbmVkIHx8IHZwc1tjbGlja1Bvc10uaW5wdXQgPT09IGdldFBsYWNlaG9sZGVyKGNsaWNrUG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1BvcyA8IHNlZWtOZXh0KC0xKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdnAgaW4gdnBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3MgPCB2cCAmJiB2cHNbdnBdLmlucHV0ICE9PSBnZXRQbGFjZWhvbGRlcih2cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZENhcmV0ID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JUTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENhcmV0LmVuZCA9IHNlbGVjdGVkQ2FyZXQuYmVnaW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldC5iZWdpbiA9IHNlbGVjdGVkQ2FyZXQuZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZENhcmV0LmJlZ2luID09PSBzZWxlY3RlZENhcmV0LmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3B0cy5wb3NpdGlvbkNhcmV0T25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIGdldEJ1ZmZlcigpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaWdub3JlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmFkaXhGb2N1c1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9SYWRpeEZvY3VzKHNlbGVjdGVkQ2FyZXQuYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBvcHRzLm51bWVyaWNJbnB1dCA/IHNlZWtOZXh0KHJhZGl4UG9zKSA6IHJhZGl4UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGlja1Bvc2l0aW9uID0gc2VsZWN0ZWRDYXJldC5iZWdpbiwgbHZjbGlja1Bvc2l0aW9uID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xpY2tQb3NpdGlvbiwgdHJ1ZSksIGxhc3RQb3NpdGlvbiA9IHNlZWtOZXh0KGx2Y2xpY2tQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1Bvc2l0aW9uIDwgbGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgIWlzTWFzayhjbGlja1Bvc2l0aW9uLCB0cnVlKSAmJiAhaXNNYXNrKGNsaWNrUG9zaXRpb24gLSAxLCB0cnVlKSA/IHNlZWtOZXh0KGNsaWNrUG9zaXRpb24pIDogY2xpY2tQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2Y2xpY2tQb3NpdGlvbl0sIHR0ID0gZ2V0VGVzdFRlbXBsYXRlKGxhc3RQb3NpdGlvbiwgbHZwID8gbHZwLm1hdGNoLmxvY2F0b3IgOiB1bmRlZmluZWQsIGx2cCksIHBsYWNlaG9sZGVyID0gZ2V0UGxhY2Vob2xkZXIobGFzdFBvc2l0aW9uLCB0dC5tYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIgIT09IFwiXCIgJiYgZ2V0QnVmZmVyKClbbGFzdFBvc2l0aW9uXSAhPT0gcGxhY2Vob2xkZXIgJiYgdHQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlICYmIHR0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8ICFpc01hc2sobGFzdFBvc2l0aW9uLCBvcHRzLmtlZXBTdGF0aWMpICYmIHR0Lm1hdGNoLmRlZiA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gc2Vla05leHQobGFzdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tQb3NpdGlvbiA+PSBuZXdQb3MgfHwgY2xpY2tQb3NpdGlvbiA9PT0gbGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQb3NpdGlvbiA9IG5ld1BvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgbGFzdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXRFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBwb3MgPSBjYXJldChpbnB1dCksIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsaXBib2FyZERhdGEgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YSB8fCBldi5jbGlwYm9hcmREYXRhLCBjbGlwRGF0YSA9IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmVuZCwgcG9zLmJlZ2luKSA6IGdldEJ1ZmZlcigpLnNsaWNlKHBvcy5iZWdpbiwgcG9zLmVuZCk7XG4gICAgICAgICAgICAgICAgY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dFwiLCBpc1JUTCA/IGNsaXBEYXRhLnJldmVyc2UoKS5qb2luKFwiXCIpIDogY2xpcERhdGEuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4ZWNDb21tYW5kKSBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgICAgICAgICAgICAgaGFuZGxlUmVtb3ZlKGlucHV0LCBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUsIHBvcyk7XG4gICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVyRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIG9yaWdpbmFsUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCksIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChucHRWYWx1ZSAhPT0gXCJcIiB8fCBjb2xvck1hc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSA9PT0gLTEgJiYgbnB0VmFsdWUgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlKGJ1ZmZlcikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJpbmNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFySW5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgdW5kZWZpbmVkLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdXNlZW50ZXJFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgbW91c2VFbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0ICYmIG9wdHMuc2hvd01hc2tPbkhvdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKGlucHV0LCAoaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlcigpKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VibWl0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiBnZXRMYXN0VmFsaWRQb3NpdGlvbigpID09PSAtMSAmJiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0ICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFySW5jb21wbGV0ZSAmJiBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucmVtb3ZlTWFza09uU3VibWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5fdmFsdWVTZXQoZWwuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXRFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5yZWZyZXNoVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsKGlucHV0LCB3cml0ZU91dCwgc3RyaWN0LCBucHR2bCwgaW5pdGlhdGluZ0V2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRtYXNrID0gdGhpcyB8fCBpbnB1dC5pbnB1dG1hc2ssIGlucHV0VmFsdWUgPSBucHR2bC5zbGljZSgpLCBjaGFyQ29kZXMgPSBcIlwiLCBpbml0aWFsTmR4ID0gLTEsIHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVGVtcGxhdGVNYXRjaChuZHgsIGNoYXJDb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZU5keCA9IGdldE1hc2tUZW1wbGF0ZSh0cnVlLCAwLCBmYWxzZSkuc2xpY2UobmR4LCBzZWVrTmV4dChuZHgpKS5qb2luKFwiXCIpLnJlcGxhY2UoLycvZywgXCJcIikuaW5kZXhPZihjaGFyQ29kZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFyQ29kZU5keCAhPT0gLTEgJiYgIWlzTWFzayhuZHgpICYmIChnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBjaGFyQ29kZXMuY2hhckF0KDApIHx8IGdldFRlc3QobmR4KS5tYXRjaC5mbiA9PT0gbnVsbCAmJiBnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBcIidcIiArIGNoYXJDb2Rlcy5jaGFyQXQoMCkgfHwgZ2V0VGVzdChuZHgpLm1hdGNoLm5hdGl2ZURlZiA9PT0gXCIgXCIgJiYgKGdldFRlc3QobmR4ICsgMSkubWF0Y2gubmF0aXZlRGVmID09PSBjaGFyQ29kZXMuY2hhckF0KDApIHx8IGdldFRlc3QobmR4ICsgMSkubWF0Y2guZm4gPT09IG51bGwgJiYgZ2V0VGVzdChuZHggKyAxKS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiJ1wiICsgY2hhckNvZGVzLmNoYXJBdCgwKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCk7XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiBvcHRzLmF1dG9Vbm1hc2sgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGljSW5wdXQgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKDAsIHNlZWtOZXh0KC0xKSkuam9pbihcIlwiKSwgbWF0Y2hlcyA9IGlucHV0VmFsdWUuam9pbihcIlwiKS5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHN0YXRpY0lucHV0KSwgXCJnXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZS5zcGxpY2UoMCwgbWF0Y2hlcy5sZW5ndGggKiBzdGF0aWNJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gc2Vla05leHQoaW5pdGlhbE5keCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gc2Vla05leHQoaW5pdGlhbE5keCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5pdGlhbE5keCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpO1xuICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGdldE1hc2tTZXQoKS5wID0gaW5pdGlhbE5keDtcbiAgICAgICAgICAgIGlucHV0bWFzay5jYXJldFBvcyA9IHtcbiAgICAgICAgICAgICAgICBiZWdpbjogaW5pdGlhbE5keFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICQuZWFjaChpbnB1dFZhbHVlLCBmdW5jdGlvbihuZHgsIGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZHhdID09PSB1bmRlZmluZWQgJiYgaW5wdXRWYWx1ZVtuZHhdID09PSBnZXRQbGFjZWhvbGRlcihuZHgpICYmIGlzTWFzayhuZHgsIHRydWUpICYmIGlzVmFsaWQobmR4LCBpbnB1dFZhbHVlW25keF0sIHRydWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcIl9jaGVja3ZhbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gY2hhckNvZGUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlcyArPSBjaGFyQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RlbXBsYXRlTWF0Y2goaW5pdGlhbE5keCwgY2hhckNvZGVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgdHJ1ZSwgZmFsc2UsIHN0cmljdCwgaW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSBpbnB1dG1hc2suY2FyZXRQb3MuYmVnaW4gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZXMgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCB0cnVlLCBmYWxzZSwgc3RyaWN0LCBsdnAgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcih1bmRlZmluZWQsIGdldEJ1ZmZlcigpLCByZXN1bHQuZm9yd2FyZFBvc2l0aW9uLCBrZXlwcmVzcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFzay5jYXJldFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IHJlc3VsdC5mb3J3YXJkUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcmVzdWx0LmZvcndhcmRQb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh3cml0ZU91dCkgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCByZXN1bHQgPyByZXN1bHQuZm9yd2FyZFBvc2l0aW9uIDogdW5kZWZpbmVkLCBpbml0aWF0aW5nRXZlbnQgfHwgbmV3ICQuRXZlbnQoXCJjaGVja3ZhbFwiKSwgaW5pdGlhdGluZ0V2ZW50ICYmIGluaXRpYXRpbmdFdmVudC50eXBlID09PSBcImlucHV0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVubWFza2VkdmFsdWUoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgJiYgaW5wdXQuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLnNldFZhbHVlRXZlbnQuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVtVmFsdWUgPSBbXSwgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xuICAgICAgICAgICAgZm9yICh2YXIgcG5keCBpbiB2cHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodnBzW3BuZHhdLm1hdGNoICYmIHZwc1twbmR4XS5tYXRjaC5mbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHVtVmFsdWUucHVzaCh2cHNbcG5keF0uaW5wdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1bm1hc2tlZFZhbHVlID0gdW1WYWx1ZS5sZW5ndGggPT09IDAgPyBcIlwiIDogKGlzUlRMID8gdW1WYWx1ZS5yZXZlcnNlKCkgOiB1bVZhbHVlKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uVW5NYXNrKSkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXJWYWx1ZSA9IChpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgdW5tYXNrZWRWYWx1ZSA9IG9wdHMub25Vbk1hc2suY2FsbChpbnB1dG1hc2ssIGJ1ZmZlclZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhcmV0KGlucHV0LCBiZWdpbiwgZW5kLCBub3RyYW5zbGF0ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gdHJhbnNsYXRlUG9zaXRpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUlRMICYmIHR5cGVvZiBwb3MgPT09IFwibnVtYmVyXCIgJiYgKCFvcHRzLmdyZWVkeSB8fCBvcHRzLnBsYWNlaG9sZGVyICE9PSBcIlwiKSAmJiBlbCkge1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoIC0gcG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgaWYgKGJlZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KGJlZ2luKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpc1JUTCA/IGJlZ2luWzBdIDogYmVnaW5bMV07XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gaXNSVEwgPyBiZWdpblsxXSA6IGJlZ2luWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4uYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpc1JUTCA/IGJlZ2luLmJlZ2luIDogYmVnaW4uZW5kO1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IGlzUlRMID8gYmVnaW4uZW5kIDogYmVnaW4uYmVnaW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBub3RyYW5zbGF0ZSA/IGJlZ2luIDogdHJhbnNsYXRlUG9zaXRpb24oYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBub3RyYW5zbGF0ZSA/IGVuZCA6IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHR5cGVvZiBlbmQgPT0gXCJudW1iZXJcIiA/IGVuZCA6IGJlZ2luO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FsYyA9IHBhcnNlSW50KCgoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUgPyAoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoaW5wdXQsIG51bGwpIDogaW5wdXQuY3VycmVudFN0eWxlKS5mb250U2l6ZSkgKiBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNjcm9sbExlZnQgPSBzY3JvbGxDYWxjID4gaW5wdXQuc2Nyb2xsV2lkdGggPyBzY3JvbGxDYWxjIDogMDtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZWxlY3Rpb25TdGFydFwiIGluIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBiZWdpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmZpcnN0Q2hpbGQgPT09IHVuZGVmaW5lZCB8fCBpbnB1dC5maXJzdENoaWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGlucHV0LmZpcnN0Q2hpbGQsIGJlZ2luIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGJlZ2luIDogaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGlucHV0LmZpcnN0Q2hpbGQsIGVuZCA8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggPyBlbmQgOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5jcmVhdGVUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIiwgZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ29sb3JNYXNrKGlucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKFwic2VsZWN0aW9uU3RhcnRcIiBpbiBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IGlucHV0LnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpbnB1dC5zZWxlY3Rpb25FbmQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gd2luZG93LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5wYXJlbnROb2RlID09PSBpbnB1dCB8fCByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9PT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSByYW5nZS5lbmRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSAwIC0gcmFuZ2UuZHVwbGljYXRlKCkubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIC1pbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gYmVnaW4gKyByYW5nZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IG5vdHJhbnNsYXRlID8gYmVnaW4gOiB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbiksXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbm90cmFuc2xhdGUgPyBlbmQgOiB0cmFuc2xhdGVQb3NpdGlvbihlbmQpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbihyZXR1cm5EZWZpbml0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHRydWUsIHRydWUpLCBibCA9IGJ1ZmZlci5sZW5ndGgsIHBvcywgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgcG9zaXRpb25zID0ge30sIGx2VGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLCBuZHhJbnRsenIgPSBsdlRlc3QgIT09IHVuZGVmaW5lZCA/IGx2VGVzdC5sb2NhdG9yLnNsaWNlKCkgOiB1bmRlZmluZWQsIHRlc3RQb3M7XG4gICAgICAgICAgICBmb3IgKHBvcyA9IGx2cCArIDE7IHBvcyA8IGJ1ZmZlci5sZW5ndGg7IHBvcysrKSB7XG4gICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGVzdFBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbHZUZXN0QWx0ID0gbHZUZXN0ICYmIGx2VGVzdC5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gbHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGZvciAocG9zID0gYmwgLSAxOyBwb3MgPiBsdnA7IHBvcy0tKSB7XG4gICAgICAgICAgICAgICAgdGVzdFBvcyA9IHBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgICAgIGlmICgodGVzdFBvcy5tYXRjaC5vcHRpb25hbGl0eSB8fCB0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiB0ZXN0UG9zLm1hdGNoLm5ld0Jsb2NrTWFya2VyIHx8IGx2VGVzdEFsdCAmJiAobHZUZXN0QWx0ICE9PSBwb3NpdGlvbnNbcG9zXS5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgdGVzdFBvcy5tYXRjaC5mbiAhPSBudWxsIHx8IHRlc3RQb3MubWF0Y2guZm4gPT09IG51bGwgJiYgdGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgY2hlY2tBbHRlcm5hdGlvbk1hdGNoKHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLCBsdlRlc3RBbHQudG9TdHJpbmcoKS5zcGxpdChcIixcIikpICYmIGdldFRlc3RzKHBvcylbMF0uZGVmICE9PSBcIlwiKSkgJiYgYnVmZmVyW3Bvc10gPT09IGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdFBvcy5tYXRjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYmwtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuRGVmaW5pdGlvbiA/IHtcbiAgICAgICAgICAgICAgICBsOiBibCxcbiAgICAgICAgICAgICAgICBkZWY6IHBvc2l0aW9uc1tibF0gPyBwb3NpdGlvbnNbYmxdLm1hdGNoIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9IDogYmw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSB7XG4gICAgICAgICAgICBidWZmZXIubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IGdldE1hc2tUZW1wbGF0ZSh0cnVlLCAwLCB0cnVlLCB1bmRlZmluZWQsIHRydWUpLCBsbW50LCB2YWxpZFBvcztcbiAgICAgICAgICAgIHdoaWxlIChsbW50ID0gdGVtcGxhdGUuc2hpZnQoKSwgbG1udCAhPT0gdW5kZWZpbmVkKSBidWZmZXIucHVzaChsbW50KTtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNDb21wbGV0ZShidWZmZXIpIHtcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5pc0NvbXBsZXRlKSkgcmV0dXJuIG9wdHMuaXNDb21wbGV0ZShidWZmZXIsIG9wdHMpO1xuICAgICAgICAgICAgaWYgKG9wdHMucmVwZWF0ID09PSBcIipcIikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9IGZhbHNlLCBscnAgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbih0cnVlKSwgYW1sID0gc2Vla1ByZXZpb3VzKGxycC5sKTtcbiAgICAgICAgICAgIGlmIChscnAuZGVmID09PSB1bmRlZmluZWQgfHwgbHJwLmRlZi5uZXdCbG9ja01hcmtlciB8fCBscnAuZGVmLm9wdGlvbmFsaXR5IHx8IGxycC5kZWYub3B0aW9uYWxRdWFudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGFtbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKGkpLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdC5mbiAhPT0gbnVsbCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gPT09IHVuZGVmaW5lZCAmJiB0ZXN0Lm9wdGlvbmFsaXR5ICE9PSB0cnVlICYmIHRlc3Qub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlIHx8IHRlc3QuZm4gPT09IG51bGwgJiYgYnVmZmVyW2ldICE9PSBnZXRQbGFjZWhvbGRlcihpLCB0ZXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zLCBzdHJpY3QsIGZyb21Jc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgfHwgaXNSVEwpIHtcbiAgICAgICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFKSB7XG4gICAgICAgICAgICAgICAgICAgIGsgPSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgayA9IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwZW5kID0gcG9zLmVuZDtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHBvcy5iZWdpbjtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gcGVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFICYmIHBvcy5lbmQgLSBwb3MuYmVnaW4gPCAxKSB7XG4gICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dICE9PSB1bmRlZmluZWQgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0uaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgJiYgcG9zLmJlZ2luID09PSBwb3MuZW5kKSB7XG4gICAgICAgICAgICAgICAgcG9zLmVuZCA9IGlzTWFzayhwb3MuZW5kLCB0cnVlKSAmJiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5lbmRdICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuZW5kXS5pbnB1dCAhPT0gb3B0cy5yYWRpeFBvaW50KSA/IHBvcy5lbmQgKyAxIDogc2Vla05leHQocG9zLmVuZCkgKyAxO1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXSAhPT0gdW5kZWZpbmVkICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dLmlucHV0ID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcy5lbmQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXZhbGlkYXRlTWFzayhwb3MpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAhPT0gdHJ1ZSAmJiBvcHRzLmtlZXBTdGF0aWMgIT09IGZhbHNlIHx8IG9wdHMucmVnZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYWx0ZXJuYXRlKHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1BvcyA9IHJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LmNhcmV0IDogcmVzdWx0LnBvcyA/IHNlZWtOZXh0KHJlc3VsdC5wb3MuYmVnaW4gPyByZXN1bHQucG9zLmJlZ2luIDogcmVzdWx0LnBvcykgOiBnZXRMYXN0VmFsaWRQb3NpdGlvbigtMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrICE9PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgfHwgcG9zLmJlZ2luID4gbmV3UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPT0gbmV3UG9zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobHZwIDwgcG9zLmJlZ2luIHx8IHBvcy5iZWdpbiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGx2cCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gcG9zLmJlZ2luO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tSXNWYWxpZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0TWFza1NldCgpLnAgPCBsdnAgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2dldE1hc2tTZXQoKS5wXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpemVDb2xvck1hc2soaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gKGlucHV0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93KS5nZXRDb21wdXRlZFN0eWxlKGlucHV0LCBudWxsKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZpbmRDYXJldFBvcyhjbGllbnR4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSwgY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc3R5bGUgaW4gY29tcHV0ZWRTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oc3R5bGUpICYmIHN0eWxlLmluZGV4T2YoXCJmb250XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdHlsZVtzdHlsZV0gPSBjb21wdXRlZFN0eWxlW3N0eWxlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSBjb21wdXRlZFN0eWxlLnRleHRUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gY29tcHV0ZWRTdHlsZS5sZXR0ZXJTcGFjaW5nO1xuICAgICAgICAgICAgICAgIGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICAgICAgZS5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLndpZHRoID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSk7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0VGV4dCA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSwgcHJldmlvdXNXaWR0aCA9IDAsIGl0bDtcbiAgICAgICAgICAgICAgICBmb3IgKGNhcmV0UG9zID0gMCwgaXRsID0gaW5wdXRUZXh0Lmxlbmd0aDsgY2FyZXRQb3MgPD0gaXRsOyBjYXJldFBvcysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MICs9IGlucHV0VGV4dC5jaGFyQXQoY2FyZXRQb3MpIHx8IFwiX1wiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5vZmZzZXRXaWR0aCA+PSBjbGllbnR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0MSA9IGNsaWVudHggLSBwcmV2aW91c1dpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldDIgPSBlLm9mZnNldFdpZHRoIC0gY2xpZW50eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MID0gaW5wdXRUZXh0LmNoYXJBdChjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQxIC09IGUub2Zmc2V0V2lkdGggLyAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBvZmZzZXQxIDwgb2Zmc2V0MiA/IGNhcmV0UG9zIC0gMSA6IGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNXaWR0aCA9IGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhcmV0UG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHRlbXBsYXRlLnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICAgICAgICAgIHRlbXBsYXRlLnN0eWxlLnRleHRBbGlnbiA9IGNvbXB1dGVkU3R5bGUudGV4dEFsaWduO1xuICAgICAgICAgICAgY29sb3JNYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5jb2xvck1hc2sgPSBjb2xvck1hc2s7XG4gICAgICAgICAgICBjb2xvck1hc2suY2xhc3NOYW1lID0gXCJpbS1jb2xvcm1hc2tcIjtcbiAgICAgICAgICAgIGlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbG9yTWFzaywgaW5wdXQpO1xuICAgICAgICAgICAgaW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICBjb2xvck1hc2suYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICAgICAgY29sb3JNYXNrLmFwcGVuZENoaWxkKHRlbXBsYXRlKTtcbiAgICAgICAgICAgIGlucHV0LnN0eWxlLmxlZnQgPSB0ZW1wbGF0ZS5vZmZzZXRMZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMubW91c2VsZWF2ZUV2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwibW91c2VlbnRlclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMubW91c2VlbnRlckV2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBmaW5kQ2FyZXRQb3MoZS5jbGllbnRYKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5jYWxsKGlucHV0LCBbIGUgXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZW5kZXJDb2xvck1hc2soaW5wdXQsIGNhcmV0UG9zLCBjbGVhcikge1xuICAgICAgICAgICAgdmFyIG1hc2tUZW1wbGF0ZSA9IFtdLCBpc1N0YXRpYyA9IGZhbHNlLCB0ZXN0LCB0ZXN0UG9zLCBuZHhJbnRsenIsIHBvcyA9IDA7XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRFbnRyeShlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeSA9PT0gdW5kZWZpbmVkKSBlbnRyeSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1N0YXRpYyAmJiAodGVzdC5mbiA9PT0gbnVsbCB8fCB0ZXN0UG9zLmlucHV0ID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzU3RhdGljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goXCI8c3BhbiBjbGFzcz0naW0tc3RhdGljJz5cIiArIGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3RhdGljICYmICh0ZXN0LmZuICE9PSBudWxsICYmIHRlc3RQb3MuaW5wdXQgIT09IHVuZGVmaW5lZCB8fCB0ZXN0LmRlZiA9PT0gXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG10bCA9IG1hc2tUZW1wbGF0ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZVttdGwgLSAxXSA9IG1hc2tUZW1wbGF0ZVttdGwgLSAxXSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUucHVzaChlbnRyeSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2tUZW1wbGF0ZS5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldENhcmV0KCkge1xuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUuc3BsaWNlKGNhcmV0UG9zLmJlZ2luLCAwLCBjYXJldFBvcy5iZWdpbiA9PT0gY2FyZXRQb3MuZW5kIHx8IGNhcmV0UG9zLmVuZCA+IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID8gJzxtYXJrIGNsYXNzPVwiaW0tY2FyZXRcIiBzdHlsZT1cImJvcmRlci1yaWdodC13aWR0aDogMXB4O2JvcmRlci1yaWdodC1zdHlsZTogc29saWQ7XCI+JyA6ICc8bWFyayBjbGFzcz1cImltLWNhcmV0LXNlbGVjdFwiPicpO1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUuc3BsaWNlKGNhcmV0UG9zLmVuZCArIDEsIDAsIFwiPC9tYXJrPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29sb3JNYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjYXJldFBvcy5iZWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBjYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2xlYXIgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdFBvcy5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFbnRyeShidWZmZXJbcG9zXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmppdE1hc2tpbmcgPT09IGZhbHNlIHx8IHBvcyA8IGx2cCB8fCB0eXBlb2Ygb3B0cy5qaXRNYXNraW5nID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKG9wdHMuaml0TWFza2luZykgJiYgb3B0cy5qaXRNYXNraW5nID4gcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVudHJ5KGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBwb3MgPCBtYXhMZW5ndGgpICYmICh0ZXN0LmZuICE9PSBudWxsIHx8IHRlc3QuZGVmICE9PSBcIlwiKSB8fCBsdnAgPiBwb3MgfHwgaXNTdGF0aWMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdGF0aWMpIHNldEVudHJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIHNldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IGNvbG9yTWFzay5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXTtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBtYXNrVGVtcGxhdGUuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2sucG9zaXRpb25Db2xvck1hc2soaW5wdXQsIHRlbXBsYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYXNrKGVsZW0pIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRWxlbWVudFR5cGVTdXBwb3J0ZWQoaW5wdXQsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXRjaFZhbHVlUHJvcGVydHkobnB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUdldDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlU2V0O1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXRjaFZhbGhvb2sodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQudmFsSG9va3MgJiYgKCQudmFsSG9va3NbdHlwZV0gPT09IHVuZGVmaW5lZCB8fCAkLnZhbEhvb2tzW3R5cGVdLmlucHV0bWFza3BhdGNoICE9PSB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rR2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLmdldCA/ICQudmFsSG9va3NbdHlwZV0uZ2V0IDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rU2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLnNldCA/ICQudmFsSG9va3NbdHlwZV0uc2V0IDogZnVuY3Rpb24oZWxlbSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQudmFsSG9va3NbdHlwZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWxob29rR2V0KGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB1bmRlZmluZWQsIGVsZW0uaW5wdXRtYXNrLm1hc2tzZXQudmFsaWRQb3NpdGlvbnMpICE9PSAtMSB8fCBvcHRzLm51bGxhYmxlICE9PSB0cnVlID8gcmVzdWx0IDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmV0dXJuIHZhbGhvb2tHZXQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oZWxlbSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoZWxlbSksIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbGhvb2tTZXQoZWxlbSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW0udHJpZ2dlcihcInNldHZhbHVlXCIsIFsgdmFsdWUgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1hc2twYXRjaDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzayA/IHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSA6IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgIT09IC0xIHx8IG9wdHMubnVsbGFibGUgIT09IHRydWUgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzICYmIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPyAoaXNSVEwgPyBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKS5yZXZlcnNlKCkgOiBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKSkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcykgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB2YWx1ZUdldC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldHRlcih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihucHQsIFwibW91c2VlbnRlclwiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXMsIHZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5ub1ZhbHVlUGF0Y2hpbmcgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSB0eXBlb2YgXCJ0ZXN0XCIuX19wcm90b19fID09PSBcIm9iamVjdFwiID8gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZVByb3BlcnR5ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YobnB0KSwgXCJ2YWx1ZVwiKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlUHJvcGVydHkgJiYgdmFsdWVQcm9wZXJ0eS5nZXQgJiYgdmFsdWVQcm9wZXJ0eS5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gdmFsdWVQcm9wZXJ0eS5nZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IHZhbHVlUHJvcGVydHkuc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBzZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChucHQudGFnTmFtZSAhPT0gXCJJTlBVVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBzZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gbnB0Ll9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBucHQuX19sb29rdXBTZXR0ZXJfXyhcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGdldHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgc2V0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0ID0gdmFsdWVHZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fX3ZhbHVlU2V0ID0gdmFsdWVTZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl92YWx1ZUdldCA9IGZ1bmN0aW9uKG92ZXJydWxlUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzUlRMICYmIG92ZXJydWxlUlRMICE9PSB0cnVlID8gdmFsdWVHZXQuY2FsbCh0aGlzLmVsKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcy5lbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSwgb3ZlcnJ1bGVSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMuZWwsIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBcIlwiIDogb3ZlcnJ1bGVSVEwgIT09IHRydWUgJiYgaXNSVEwgPyB2YWx1ZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVHZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRjaFZhbGhvb2sobnB0LnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRUeXBlID0gaW5wdXQuZ2V0QXR0cmlidXRlKFwidHlwZVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdXBwb3J0ZWQgPSBpbnB1dC50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgJC5pbkFycmF5KGVsZW1lbnRUeXBlLCBvcHRzLnN1cHBvcnRzSW5wdXRUeXBlKSAhPT0gLTEgfHwgaW5wdXQuaXNDb250ZW50RWRpdGFibGUgfHwgaW5wdXQudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiO1xuICAgICAgICAgICAgICAgIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBlbGVtZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N1cHBvcnRlZCA9IGVsLnR5cGUgPT09IFwidGV4dFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaXNTdXBwb3J0ZWQgPSBcInBhcnRpYWxcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzU3VwcG9ydGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXRjaFZhbHVlUHJvcGVydHkoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpbnB1dC5pbnB1dG1hc2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRXZlbnRSdWxlci5vZmYoZWxlbSk7XG4gICAgICAgICAgICB2YXIgaXNTdXBwb3J0ZWQgPSBpc0VsZW1lbnRUeXBlU3VwcG9ydGVkKGVsZW0sIG9wdHMpO1xuICAgICAgICAgICAgaWYgKGlzU3VwcG9ydGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGVsID0gZWxlbTtcbiAgICAgICAgICAgICAgICAkZWwgPSAkKGVsKTtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFBsYWNlaG9sZGVyID0gZWwucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoID0gZWwgIT09IHVuZGVmaW5lZCA/IGVsLm1heExlbmd0aCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAobWF4TGVuZ3RoID09PSAtMSkgbWF4TGVuZ3RoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNvbG9yTWFzayA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplQ29sb3JNYXNrKGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbnB1dE1vZGVcIiBpbiBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtb2RlID0gb3B0cy5pbnB1dG1vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpbnB1dG1vZGVcIiwgb3B0cy5pbnB1dG1vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpc2FibGVQcmVkaWN0aXZlVGV4dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiYXV0b2NvcnJlY3RcIiBpbiBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmF1dG9jb3JyZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNvbG9yTWFzayAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplQ29sb3JNYXNrKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwudHlwZSA9IFwicGFzc3dvcmRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiaW0taW5zZXJ0XCIsIG9wdHMuaW5zZXJ0TW9kZSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwic3VibWl0XCIsIEV2ZW50SGFuZGxlcnMuc3VibWl0RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInJlc2V0XCIsIEV2ZW50SGFuZGxlcnMucmVzZXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiYmx1clwiLCBFdmVudEhhbmRsZXJzLmJsdXJFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiZm9jdXNcIiwgRXZlbnRIYW5kbGVycy5mb2N1c0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImNsaWNrXCIsIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcIm1vdXNlbGVhdmVcIiwgRXZlbnRIYW5kbGVycy5tb3VzZWxlYXZlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJtb3VzZWVudGVyXCIsIEV2ZW50SGFuZGxlcnMubW91c2VlbnRlckV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInBhc3RlXCIsIEV2ZW50SGFuZGxlcnMucGFzdGVFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY3V0XCIsIEV2ZW50SGFuZGxlcnMuY3V0RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImNvbXBsZXRlXCIsIG9wdHMub25jb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiaW5jb21wbGV0ZVwiLCBvcHRzLm9uaW5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY2xlYXJlZFwiLCBvcHRzLm9uY2xlYXJlZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbW9iaWxlICYmIG9wdHMuaW5wdXRFdmVudE9ubHkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwia2V5ZG93blwiLCBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImtleXByZXNzXCIsIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJtYXhMZW5ndGhcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJpbnB1dFwiLCBFdmVudEhhbmRsZXJzLmlucHV0RmFsbEJhY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiYmVmb3JlaW5wdXRcIiwgRXZlbnRIYW5kbGVycy5iZWZvcmVJbnB1dEV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJzZXR2YWx1ZVwiLCBFdmVudEhhbmRsZXJzLnNldFZhbHVlRXZlbnQpO1xuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSAhPT0gXCJcIiB8fCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID09PSBmYWxzZSB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbFZhbHVlID0gJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpLCBvcHRzKSB8fCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpIDogZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gXCJcIikgY2hlY2tWYWwoZWwsIHRydWUsIGZhbHNlLCBpbml0aWFsVmFsdWUuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlKGJ1ZmZlcikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhckluY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldExhc3RWYWxpZFBvc2l0aW9uKCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPT09IGZhbHNlIHx8IG9wdHMuc2hvd01hc2tPbkZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsIHx8IGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSkgIT09IFwiXCIpIHdyaXRlQnVmZmVyKGVsLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGVsLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlQnVmZmVyO1xuICAgICAgICBpZiAoYWN0aW9uT2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uT2JqLmFjdGlvbikge1xuICAgICAgICAgICAgICBjYXNlIFwiaXNDb21wbGV0ZVwiOlxuICAgICAgICAgICAgICAgIGVsID0gYWN0aW9uT2JqLmVsO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKTtcblxuICAgICAgICAgICAgICBjYXNlIFwidW5tYXNrZWR2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIGlmIChlbCA9PT0gdW5kZWZpbmVkIHx8IGFjdGlvbk9iai52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9ICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIHZhbHVlQnVmZmVyLCBvcHRzKSB8fCB2YWx1ZUJ1ZmZlciA6IHZhbHVlQnVmZmVyKS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwuY2FsbCh0aGlzLCB1bmRlZmluZWQsIGZhbHNlLCBmYWxzZSwgdmFsdWVCdWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIG9wdHMub25CZWZvcmVXcml0ZS5jYWxsKGlucHV0bWFzaywgdW5kZWZpbmVkLCBnZXRCdWZmZXIoKSwgMCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZHZhbHVlKGVsKTtcblxuICAgICAgICAgICAgICBjYXNlIFwibWFza1wiOlxuICAgICAgICAgICAgICAgIG1hc2soZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJmb3JtYXRcIjpcbiAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9ICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIGFjdGlvbk9iai52YWx1ZSwgb3B0cykgfHwgYWN0aW9uT2JqLnZhbHVlIDogYWN0aW9uT2JqLnZhbHVlKS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgdHJ1ZSwgZmFsc2UsIHZhbHVlQnVmZmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uT2JqLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogZ2V0QnVmZmVyKCkuam9pbihcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldG1ldGFkYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG1hc2tzZXQsIG9wdHMpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJpc1ZhbGlkXCI6XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbk9iai52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9IGFjdGlvbk9iai52YWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwuY2FsbCh0aGlzLCB1bmRlZmluZWQsIHRydWUsIHRydWUsIHZhbHVlQnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25PYmoudmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHJsID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oKSwgbG1pYiA9IGJ1ZmZlci5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGZvciAoO2xtaWIgPiBybDsgbG1pYi0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hc2sobG1pYikpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidWZmZXIuc3BsaWNlKHJsLCBsbWliICsgMSAtIHJsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNDb21wbGV0ZShidWZmZXIpICYmIGFjdGlvbk9iai52YWx1ZSA9PT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcblxuICAgICAgICAgICAgICBjYXNlIFwiZ2V0ZW1wdHltYXNrXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKTtcblxuICAgICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICAkLmRhdGEoZWwsIFwiX2lucHV0bWFza19vcHRzXCIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAkZWwgPSAkKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChvcHRzLmF1dG9Vbm1hc2sgPyB1bm1hc2tlZHZhbHVlKGVsKSA6IGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2suY29sb3JNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1hc2sgPSBlbC5pbnB1dG1hc2suY29sb3JNYXNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFzay5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgY29sb3JNYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFzay5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbG9yTWFzayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVQcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKGVsKSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBlbC5pbnB1dG1hc2suX192YWx1ZVNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBlbC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2suX192YWx1ZUdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLCBlbC5pbnB1dG1hc2suX192YWx1ZUdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX19kZWZpbmVTZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlU2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiZ2V0bWV0YWRhdGFcIjpcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KG1hc2tzZXQubWV0YWRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrVGFyZ2V0ID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIDAsIGZhbHNlKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWFza3NldC5tZXRhZGF0YSwgZnVuY3Rpb24obmR4LCBtdGR0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXRkdC5tYXNrID09PSBtYXNrVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RhcmdldCA9IG10ZHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tUYXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrc2V0Lm1ldGFkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJbnB1dG1hc2s7XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvZXhwYW5kLW1vcmUtMGExMWExMi5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvYXJyb3ctNDIxMDNkYi5wbmdcIjsiLCJpbXBvcnQgbm9VaVNsaWRlciBmcm9tIFwibm91aXNsaWRlclwiO1xyXG5pbXBvcnQgd051bWIgZnJvbSBcIndudW1iXCI7XHJcblxyXG52YXIgc3RlcHNTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJhbmdlLXNsaWRlclwiKTtcclxuY29uc3QgbG93ZXJWaWV3UHJpY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvd2VyLXZhbHVlXCIpO1xyXG5jb25zdCB1cHBlclZpZXdQcmljZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdXBwZXItdmFsdWVcIik7XHJcbmNvbnN0IHZpZXdOb2RlcyA9IFtsb3dlclZpZXdQcmljZSwgdXBwZXJWaWV3UHJpY2VdXHJcblxyXG5ub1VpU2xpZGVyLmNyZWF0ZShzdGVwc1NsaWRlciwge1xyXG4gIHN0YXJ0OiBbNTAwMCwgMTAwMDBdLFxyXG4gIGNvbm5lY3Q6IHRydWUsXHJcbiAgZm9ybWF0OiB3TnVtYih7IGRlY2ltYWxzOiAwIH0pLFxyXG4gIHN0ZXA6IDEwMCxcclxuICByYW5nZToge1xyXG4gICAgbWluOiBbMzAwXSxcclxuICAgIG1heDogMTU3MDBcclxuICB9XHJcbn0pO1xyXG5cclxuc3RlcHNTbGlkZXIubm9VaVNsaWRlci5vbihcInVwZGF0ZVwiLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZSkge1xyXG4gIGxldCB2aWV3UHJpY2UgPSB2YWx1ZXNbaGFuZGxlXS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pKyhcXER8JCkpL2csIFwiJDEgXCIpO1xyXG4gIHZpZXdQcmljZSArPSBcIuKCvVwiO1xyXG4gIHZpZXdOb2Rlc1toYW5kbGVdLnRleHRDb250ZW50ID0gdmlld1ByaWNlO1xyXG59KTtcclxuXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9saWtlLTViODMyMmUucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2xpa2UtYWN0aXZlLTIyNGQ1NzMucG5nXCI7IiwicmVxdWlyZShcIi4vZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmV4dGVuc2lvbnNcIik7XHJcbnJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5kYXRlLmV4dGVuc2lvbnNcIik7XHJcbnJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5udW1lcmljLmV4dGVuc2lvbnNcIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5qc1wiKTtcclxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTctMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIudHRmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gcmVxdWlyZShcIi4uL2ZvbnRzL01vbnRzZXJyYXQtUmVndWxhci5mb250LnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LUJvbGQud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LUJvbGQudHRmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fID0gcmVxdWlyZShcIi4uL2ZvbnRzL01vbnRzZXJyYXQtQm9sZC5mb250LnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtUmVndWxhci53b2ZmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fID0gcmVxdWlyZShcIi4uL2ZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLnR0ZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtUmVndWxhci5mb250LnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtQm9sZC53b2ZmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMF9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtQm9sZC50dGZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzExX19fID0gcmVxdWlyZShcIi4uL2ZvbnRzL1F1aWNrc2FuZC1Cb2xkLmZvbnQuc3ZnXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXywgeyBoYXNoOiBcIiN3ZWJmb250XCIgfSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXywgeyBoYXNoOiBcIiN3ZWJmb250XCIgfSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXywgeyBoYXNoOiBcIiN3ZWJmb250XCIgfSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18sIHsgaGFzaDogXCIjd2ViZm9udFwiIH0pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiEgbm9ybWFsaXplLmNzcyB2OC4wLjEgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovaHRtbHtsaW5lLWhlaWdodDoxLjE1Oy13ZWJraXQtdGV4dC1zaXplLWFkanVzdDoxMDAlfWJvZHl7bWFyZ2luOjB9bWFpbntkaXNwbGF5OmJsb2NrfWgxe21hcmdpbjowLjY3ZW0gMDtmb250LXNpemU6MmVtfWhyey13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2hlaWdodDowO292ZXJmbG93OnZpc2libGV9cHJle2ZvbnQtZmFtaWx5Om1vbm9zcGFjZSwgbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19YXtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fWFiYnJbdGl0bGVde2JvcmRlci1ib3R0b206bm9uZTt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lOy13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSBkb3R0ZWQ7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSBkb3R0ZWR9YixzdHJvbmd7Zm9udC13ZWlnaHQ6Ym9sZGVyfWNvZGUsa2JkLHNhbXB7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLCBtb25vc3BhY2U7Zm9udC1zaXplOjFlbX1zbWFsbHtmb250LXNpemU6ODAlfXN1YixzdXB7Zm9udC1zaXplOjc1JTtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXN1Yntib3R0b206LTAuMjVlbX1zdXB7dG9wOi0wLjVlbX1pbWd7Ym9yZGVyLXN0eWxlOm5vbmV9YnV0dG9uLGlucHV0LG9wdGdyb3VwLHNlbGVjdCx0ZXh0YXJlYXtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZToxMDAlO2xpbmUtaGVpZ2h0OjEuMTU7bWFyZ2luOjB9YnV0dG9uLGlucHV0e292ZXJmbG93OnZpc2libGV9YnV0dG9uLHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfWJ1dHRvbixbdHlwZT1cXFwiYnV0dG9uXFxcIl0sW3R5cGU9XFxcInJlc2V0XFxcIl0sW3R5cGU9XFxcInN1Ym1pdFxcXCJdey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b259YnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJidXR0b25cXFwiXTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1cXFwicmVzZXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1cXFwic3VibWl0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyLXN0eWxlOm5vbmU7cGFkZGluZzowfWJ1dHRvbjotbW96LWZvY3VzcmluZyxbdHlwZT1cXFwiYnV0dG9uXFxcIl06LW1vei1mb2N1c3JpbmcsW3R5cGU9XFxcInJlc2V0XFxcIl06LW1vei1mb2N1c3JpbmcsW3R5cGU9XFxcInN1Ym1pdFxcXCJdOi1tb3otZm9jdXNyaW5ne291dGxpbmU6MXB4IGRvdHRlZCBCdXR0b25UZXh0fWZpZWxkc2V0e3BhZGRpbmc6MC4zNWVtIDAuNzVlbSAwLjYyNWVtfWxlZ2VuZHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29sb3I6aW5oZXJpdDtkaXNwbGF5OnRhYmxlO21heC13aWR0aDoxMDAlO3BhZGRpbmc6MDt3aGl0ZS1zcGFjZTpub3JtYWx9cHJvZ3Jlc3N7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9dGV4dGFyZWF7b3ZlcmZsb3c6YXV0b31bdHlwZT1cXFwiY2hlY2tib3hcXFwiXSxbdHlwZT1cXFwicmFkaW9cXFwiXXstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowfVt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixbdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b257aGVpZ2h0OmF1dG99W3R5cGU9XFxcInNlYXJjaFxcXCJdey13ZWJraXQtYXBwZWFyYW5jZTp0ZXh0ZmllbGQ7b3V0bGluZS1vZmZzZXQ6LTJweH1bdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9Ojotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbnstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2ZvbnQ6aW5oZXJpdH1kZXRhaWxze2Rpc3BsYXk6YmxvY2t9c3VtbWFyeXtkaXNwbGF5Omxpc3QtaXRlbX10ZW1wbGF0ZXtkaXNwbGF5Om5vbmV9W2hpZGRlbl17ZGlzcGxheTpub25lfUBmb250LWZhY2V7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSx1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpIGZvcm1hdChcXFwic3ZnXFxcIil9QGZvbnQtZmFjZXtmb250LXdlaWdodDpib2xkO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyArIFwiKTtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSx1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fICsgXCIpIGZvcm1hdChcXFwic3ZnXFxcIil9QGZvbnQtZmFjZXtmb250LXdlaWdodDpub3JtYWw7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfN19fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyArIFwiKSBmb3JtYXQoXFxcInN2Z1xcXCIpfUBmb250LWZhY2V7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LWZhbWlseTpcXFwiUXVpY2tzYW5kXFxcIjtmb250LXN0eWxlOm5vcm1hbDtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyArIFwiKTtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSx1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX18gKyBcIikgZm9ybWF0KFxcXCJzdmdcXFwiKX1ib2R5e2NvbG9yOiMxZjIwNDE7Zm9udC1zaXplOjE0cHg7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCIsXFxcIk1vbnRzZXJyYXRcXFwiLHNhbnMtc2VyaWZ9LmNvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo4MC41NTU2JTttaW4td2lkdGg6MzIwcHg7bWF4LXdpZHRoOjE5MjBweDttYXJnaW46MCBhdXRvO3BhZGRpbmc6MCAxMHB4fUBtZWRpYSAobWF4LXdpZHRoOiAxMzAwcHgpey5jb250YWluZXJ7d2lkdGg6OTAuNTU1NiV9fUBtZWRpYSAobWF4LXdpZHRoOiA0MjVweCl7LmNvbnRhaW5lcnt3aWR0aDphdXRvO21hcmdpbjowO3BhZGRpbmc6MH19XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtUmVndWxhci1lYzkyZDMxLndvZmZcIjsiXSwic291cmNlUm9vdCI6IiJ9