!function(e){var t={};function a(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)a.d(n,i,function(t){return e[t]}.bind(null,i));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=219)}([function(e,t,a){(function(e){e.exports=function(){"use strict";var t,n;function i(){return t.apply(null,arguments)}function r(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(s(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function m(e,t){var a,n=[];for(a=0;a<e.length;++a)n.push(t(e[a],a));return n}function _(e,t){for(var a in t)s(t,a)&&(e[a]=t[a]);return s(t,"toString")&&(e.toString=t.toString),s(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,a,n){return wt(e,t,a,n,!0).utc()}function p(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function f(e){if(null==e._isValid){var t=p(e),a=n.call(t.parsedDateParts,(function(e){return null!=e})),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&a);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function g(e){var t=h(NaN);return null!=e?_(p(t),e):p(t).userInvalidated=!0,t}n=Array.prototype.some?Array.prototype.some:function(e){var t,a=Object(this),n=a.length>>>0;for(t=0;t<n;t++)if(t in a&&e.call(this,a[t],t,a))return!0;return!1};var y=i.momentProperties=[],M=!1;function b(e,t){var a,n,i;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=p(t)),l(t._locale)||(e._locale=t._locale),y.length>0)for(a=0;a<y.length;a++)l(i=t[n=y[a]])||(e[n]=i);return e}function v(e){b(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,i.updateOffset(this),M=!1)}function k(e){return e instanceof v||null!=e&&null!=e._isAMomentObject}function L(e){!1===i.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function x(e,t){var a=!0;return _((function(){if(null!=i.deprecationHandler&&i.deprecationHandler(null,e),a){var n,r,o,d=[];for(r=0;r<arguments.length;r++){if(n="","object"==typeof arguments[r]){for(o in n+="\n["+r+"] ",arguments[0])s(arguments[0],o)&&(n+=o+": "+arguments[0][o]+", ");n=n.slice(0,-2)}else n=arguments[r];d.push(n)}L(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),a=!1}return t.apply(this,arguments)}),t)}var w,Y={};function D(e,t){null!=i.deprecationHandler&&i.deprecationHandler(e,t),Y[e]||(L(t),Y[e]=!0)}function T(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function S(e,t){var a,n=_({},e);for(a in t)s(t,a)&&(o(e[a])&&o(t[a])?(n[a]={},_(n[a],e[a]),_(n[a],t[a])):null!=t[a]?n[a]=t[a]:delete n[a]);for(a in e)s(e,a)&&!s(t,a)&&o(e[a])&&(n[a]=_({},n[a]));return n}function H(e){null!=e&&this.set(e)}function j(e,t,a){var n=""+Math.abs(e),i=t-n.length;return(e>=0?a?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+n}i.suppressDeprecationWarnings=!1,i.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,a=[];for(t in e)s(e,t)&&a.push(t);return a};var P=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,A=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,C={},O={};function E(e,t,a,n){var i=n;"string"==typeof n&&(i=function(){return this[n]()}),e&&(O[e]=i),t&&(O[t[0]]=function(){return j(i.apply(this,arguments),t[1],t[2])}),a&&(O[a]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function F(e,t){return e.isValid()?(t=W(t,e.localeData()),C[t]=C[t]||function(e){var t,a,n,i=e.match(P);for(t=0,a=i.length;t<a;t++)O[i[t]]?i[t]=O[i[t]]:i[t]=(n=i[t]).match(/\[[\s\S]/)?n.replace(/^\[|\]$/g,""):n.replace(/\\/g,"");return function(t){var n,r="";for(n=0;n<a;n++)r+=T(i[n])?i[n].call(t,e):i[n];return r}}(t),C[t](e)):e.localeData().invalidDate()}function W(e,t){var a=5;function n(e){return t.longDateFormat(e)||e}for(A.lastIndex=0;a>=0&&A.test(e);)e=e.replace(A,n),A.lastIndex=0,a-=1;return e}var z={};function I(e,t){var a=e.toLowerCase();z[a]=z[a+"s"]=z[t]=e}function N(e){return"string"==typeof e?z[e]||z[e.toLowerCase()]:void 0}function R(e){var t,a,n={};for(a in e)s(e,a)&&(t=N(a))&&(n[t]=e[a]);return n}var B={};function V(e,t){B[e]=t}function G(e){return e%4==0&&e%100!=0||e%400==0}function J(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function U(e){var t=+e,a=0;return 0!==t&&isFinite(t)&&(a=J(t)),a}function q(e,t){return function(a){return null!=a?($(this,e,a),i.updateOffset(this,t),this):K(this,e)}}function K(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function $(e,t,a){e.isValid()&&!isNaN(a)&&("FullYear"===t&&G(e.year())&&1===e.month()&&29===e.date()?(a=U(a),e._d["set"+(e._isUTC?"UTC":"")+t](a,e.month(),ke(a,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](a))}var Q,Z=/\d/,X=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ae=/[+-]?\d{6}/,ne=/\d\d?/,ie=/\d\d\d\d?/,re=/\d\d\d\d\d\d?/,oe=/\d{1,3}/,se=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,me=/Z|[+-]\d\d(?::?\d\d)?/gi,_e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function he(e,t,a){Q[e]=T(t)?t:function(e,n){return e&&a?a:t}}function pe(e,t){return s(Q,e)?Q[e](t._strict,t._locale):new RegExp(fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,a,n,i){return t||a||n||i}))))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Q={};var ge,ye={};function Me(e,t){var a,n=t;for("string"==typeof e&&(e=[e]),u(t)&&(n=function(e,a){a[t]=U(e)}),a=0;a<e.length;a++)ye[e[a]]=n}function be(e,t){Me(e,(function(e,a,n,i){n._w=n._w||{},t(e,n._w,n,i)}))}function ve(e,t,a){null!=t&&s(ye,e)&&ye[e](t,a._a,a,e)}function ke(e,t){if(isNaN(e)||isNaN(t))return NaN;var a,n=(t%(a=12)+a)%a;return e+=(t-n)/12,1===n?G(e)?29:28:31-n%7%2}ge=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},E("M",["MM",2],"Mo",(function(){return this.month()+1})),E("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),E("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),I("month","M"),V("month",8),he("M",ne),he("MM",ne,X),he("MMM",(function(e,t){return t.monthsShortRegex(e)})),he("MMMM",(function(e,t){return t.monthsRegex(e)})),Me(["M","MM"],(function(e,t){t[1]=U(e)-1})),Me(["MMM","MMMM"],(function(e,t,a,n){var i=a._locale.monthsParse(e,n,a._strict);null!=i?t[1]=i:p(a).invalidMonth=e}));var Le="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),xe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),we=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ye=_e,De=_e;function Te(e,t,a){var n,i,r,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],n=0;n<12;++n)r=h([2e3,n]),this._shortMonthsParse[n]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[n]=this.months(r,"").toLocaleLowerCase();return a?"MMM"===t?-1!==(i=ge.call(this._shortMonthsParse,o))?i:null:-1!==(i=ge.call(this._longMonthsParse,o))?i:null:"MMM"===t?-1!==(i=ge.call(this._shortMonthsParse,o))||-1!==(i=ge.call(this._longMonthsParse,o))?i:null:-1!==(i=ge.call(this._longMonthsParse,o))||-1!==(i=ge.call(this._shortMonthsParse,o))?i:null}function Se(e,t){var a;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=U(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return a=Math.min(e.date(),ke(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,a),e}function He(e){return null!=e?(Se(this,e),i.updateOffset(this,!0),this):K(this,"Month")}function je(){function e(e,t){return t.length-e.length}var t,a,n=[],i=[],r=[];for(t=0;t<12;t++)a=h([2e3,t]),n.push(this.monthsShort(a,"")),i.push(this.months(a,"")),r.push(this.months(a,"")),r.push(this.monthsShort(a,""));for(n.sort(e),i.sort(e),r.sort(e),t=0;t<12;t++)n[t]=fe(n[t]),i[t]=fe(i[t]);for(t=0;t<24;t++)r[t]=fe(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Pe(e){return G(e)?366:365}E("Y",0,0,(function(){var e=this.year();return e<=9999?j(e,4):"+"+e})),E(0,["YY",2],0,(function(){return this.year()%100})),E(0,["YYYY",4],0,"year"),E(0,["YYYYY",5],0,"year"),E(0,["YYYYYY",6,!0],0,"year"),I("year","y"),V("year",1),he("Y",ue),he("YY",ne,X),he("YYYY",se,te),he("YYYYY",de,ae),he("YYYYYY",de,ae),Me(["YYYYY","YYYYYY"],0),Me("YYYY",(function(e,t){t[0]=2===e.length?i.parseTwoDigitYear(e):U(e)})),Me("YY",(function(e,t){t[0]=i.parseTwoDigitYear(e)})),Me("Y",(function(e,t){t[0]=parseInt(e,10)})),i.parseTwoDigitYear=function(e){return U(e)+(U(e)>68?1900:2e3)};var Ae=q("FullYear",!0);function Ce(e,t,a,n,i,r,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,a,n,i,r,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,a,n,i,r,o),s}function Oe(e){var t,a;return e<100&&e>=0?((a=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,a)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ee(e,t,a){var n=7+t-a;return-(7+Oe(e,0,n).getUTCDay()-t)%7+n-1}function Fe(e,t,a,n,i){var r,o,s=1+7*(t-1)+(7+a-n)%7+Ee(e,n,i);return s<=0?o=Pe(r=e-1)+s:s>Pe(e)?(r=e+1,o=s-Pe(e)):(r=e,o=s),{year:r,dayOfYear:o}}function We(e,t,a){var n,i,r=Ee(e.year(),t,a),o=Math.floor((e.dayOfYear()-r-1)/7)+1;return o<1?n=o+ze(i=e.year()-1,t,a):o>ze(e.year(),t,a)?(n=o-ze(e.year(),t,a),i=e.year()+1):(i=e.year(),n=o),{week:n,year:i}}function ze(e,t,a){var n=Ee(e,t,a),i=Ee(e+1,t,a);return(Pe(e)-n+i)/7}function Ie(e,t){return e.slice(t,7).concat(e.slice(0,t))}E("w",["ww",2],"wo","week"),E("W",["WW",2],"Wo","isoWeek"),I("week","w"),I("isoWeek","W"),V("week",5),V("isoWeek",5),he("w",ne),he("ww",ne,X),he("W",ne),he("WW",ne,X),be(["w","ww","W","WW"],(function(e,t,a,n){t[n.substr(0,1)]=U(e)})),E("d",0,"do","day"),E("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),E("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),E("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),E("e",0,0,"weekday"),E("E",0,0,"isoWeekday"),I("day","d"),I("weekday","e"),I("isoWeekday","E"),V("day",11),V("weekday",11),V("isoWeekday",11),he("d",ne),he("e",ne),he("E",ne),he("dd",(function(e,t){return t.weekdaysMinRegex(e)})),he("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),he("dddd",(function(e,t){return t.weekdaysRegex(e)})),be(["dd","ddd","dddd"],(function(e,t,a,n){var i=a._locale.weekdaysParse(e,n,a._strict);null!=i?t.d=i:p(a).invalidWeekday=e})),be(["d","e","E"],(function(e,t,a,n){t[n]=U(e)}));var Ne="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Re="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Be="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ve=_e,Ge=_e,Je=_e;function Ue(e,t,a){var n,i,r,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],n=0;n<7;++n)r=h([2e3,1]).day(n),this._minWeekdaysParse[n]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[n]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[n]=this.weekdays(r,"").toLocaleLowerCase();return a?"dddd"===t?-1!==(i=ge.call(this._weekdaysParse,o))?i:null:"ddd"===t?-1!==(i=ge.call(this._shortWeekdaysParse,o))?i:null:-1!==(i=ge.call(this._minWeekdaysParse,o))?i:null:"dddd"===t?-1!==(i=ge.call(this._weekdaysParse,o))||-1!==(i=ge.call(this._shortWeekdaysParse,o))||-1!==(i=ge.call(this._minWeekdaysParse,o))?i:null:"ddd"===t?-1!==(i=ge.call(this._shortWeekdaysParse,o))||-1!==(i=ge.call(this._weekdaysParse,o))||-1!==(i=ge.call(this._minWeekdaysParse,o))?i:null:-1!==(i=ge.call(this._minWeekdaysParse,o))||-1!==(i=ge.call(this._weekdaysParse,o))||-1!==(i=ge.call(this._shortWeekdaysParse,o))?i:null}function qe(){function e(e,t){return t.length-e.length}var t,a,n,i,r,o=[],s=[],d=[],l=[];for(t=0;t<7;t++)a=h([2e3,1]).day(t),n=fe(this.weekdaysMin(a,"")),i=fe(this.weekdaysShort(a,"")),r=fe(this.weekdays(a,"")),o.push(n),s.push(i),d.push(r),l.push(n),l.push(i),l.push(r);o.sort(e),s.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function Ke(){return this.hours()%12||12}function $e(e,t){E(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}E("H",["HH",2],0,"hour"),E("h",["hh",2],0,Ke),E("k",["kk",2],0,(function(){return this.hours()||24})),E("hmm",0,0,(function(){return""+Ke.apply(this)+j(this.minutes(),2)})),E("hmmss",0,0,(function(){return""+Ke.apply(this)+j(this.minutes(),2)+j(this.seconds(),2)})),E("Hmm",0,0,(function(){return""+this.hours()+j(this.minutes(),2)})),E("Hmmss",0,0,(function(){return""+this.hours()+j(this.minutes(),2)+j(this.seconds(),2)})),$e("a",!0),$e("A",!1),I("hour","h"),V("hour",13),he("a",Qe),he("A",Qe),he("H",ne),he("h",ne),he("k",ne),he("HH",ne,X),he("hh",ne,X),he("kk",ne,X),he("hmm",ie),he("hmmss",re),he("Hmm",ie),he("Hmmss",re),Me(["H","HH"],3),Me(["k","kk"],(function(e,t,a){var n=U(e);t[3]=24===n?0:n})),Me(["a","A"],(function(e,t,a){a._isPm=a._locale.isPM(e),a._meridiem=e})),Me(["h","hh"],(function(e,t,a){t[3]=U(e),p(a).bigHour=!0})),Me("hmm",(function(e,t,a){var n=e.length-2;t[3]=U(e.substr(0,n)),t[4]=U(e.substr(n)),p(a).bigHour=!0})),Me("hmmss",(function(e,t,a){var n=e.length-4,i=e.length-2;t[3]=U(e.substr(0,n)),t[4]=U(e.substr(n,2)),t[5]=U(e.substr(i)),p(a).bigHour=!0})),Me("Hmm",(function(e,t,a){var n=e.length-2;t[3]=U(e.substr(0,n)),t[4]=U(e.substr(n))})),Me("Hmmss",(function(e,t,a){var n=e.length-4,i=e.length-2;t[3]=U(e.substr(0,n)),t[4]=U(e.substr(n,2)),t[5]=U(e.substr(i))}));var Ze,Xe=q("Hours",!0),et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Le,monthsShort:xe,week:{dow:0,doy:6},weekdays:Ne,weekdaysMin:Be,weekdaysShort:Re,meridiemParse:/[ap]\.?m?\.?/i},tt={},at={};function nt(e,t){var a,n=Math.min(e.length,t.length);for(a=0;a<n;a+=1)if(e[a]!==t[a])return a;return n}function it(e){return e?e.toLowerCase().replace("_","-"):e}function rt(t){var n=null;if(void 0===tt[t]&&void 0!==e&&e&&e.exports)try{n=Ze._abbr,a(223)("./"+t),ot(n)}catch(e){tt[t]=null}return tt[t]}function ot(e,t){var a;return e&&((a=l(t)?dt(e):st(e,t))?Ze=a:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function st(e,t){if(null!==t){var a,n=et;if(t.abbr=e,null!=tt[e])D("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])n=tt[t.parentLocale]._config;else{if(null==(a=rt(t.parentLocale)))return at[t.parentLocale]||(at[t.parentLocale]=[]),at[t.parentLocale].push({name:e,config:t}),null;n=a._config}return tt[e]=new H(S(n,t)),at[e]&&at[e].forEach((function(e){st(e.name,e.config)})),ot(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!r(e)){if(t=rt(e))return t;e=[e]}return function(e){for(var t,a,n,i,r=0;r<e.length;){for(t=(i=it(e[r]).split("-")).length,a=(a=it(e[r+1]))?a.split("-"):null;t>0;){if(n=rt(i.slice(0,t).join("-")))return n;if(a&&a.length>=t&&nt(i,a)>=t-1)break;t--}r++}return Ze}(e)}function lt(e){var t,a=e._a;return a&&-2===p(e).overflow&&(t=a[1]<0||a[1]>11?1:a[2]<1||a[2]>ke(a[0],a[1])?2:a[3]<0||a[3]>24||24===a[3]&&(0!==a[4]||0!==a[5]||0!==a[6])?3:a[4]<0||a[4]>59?4:a[5]<0||a[5]>59?5:a[6]<0||a[6]>999?6:-1,p(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),p(e)._overflowWeeks&&-1===t&&(t=7),p(e)._overflowWeekday&&-1===t&&(t=8),p(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,mt=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],ht=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((-?\d+)/i,ft=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,gt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,a,n,i,r,o,s=e._i,d=ut.exec(s)||ct.exec(s);if(d){for(p(e).iso=!0,t=0,a=_t.length;t<a;t++)if(_t[t][1].exec(d[1])){i=_t[t][0],n=!1!==_t[t][2];break}if(null==i)return void(e._isValid=!1);if(d[3]){for(t=0,a=ht.length;t<a;t++)if(ht[t][1].exec(d[3])){r=(d[2]||" ")+ht[t][0];break}if(null==r)return void(e._isValid=!1)}if(!n&&null!=r)return void(e._isValid=!1);if(d[4]){if(!mt.exec(d[4]))return void(e._isValid=!1);o="Z"}e._f=i+(r||"")+(o||""),Lt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function bt(e){var t,a,n,i,r,o,s,d,l=ft.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(a=l[4],n=l[3],i=l[2],r=l[5],o=l[6],s=l[7],d=[Mt(a),xe.indexOf(n),parseInt(i,10),parseInt(r,10),parseInt(o,10)],s&&d.push(parseInt(s,10)),t=d,!function(e,t,a){return!e||Re.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(p(a).weekdayMismatch=!0,a._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,a){if(e)return gt[e];if(t)return 0;var n=parseInt(a,10),i=n%100;return(n-i)/100*60+i}(l[8],l[9],l[10]),e._d=Oe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),p(e).rfc2822=!0}else e._isValid=!1}function vt(e,t,a){return null!=e?e:null!=t?t:a}function kt(e){var t,a,n,r,o,s=[];if(!e._d){for(n=function(e){var t=new Date(i.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,a,n,i,r,o,s,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(r=1,o=4,a=vt(t.GG,e._a[0],We(Yt(),1,4).year),n=vt(t.W,1),((i=vt(t.E,1))<1||i>7)&&(d=!0)):(r=e._locale._week.dow,o=e._locale._week.doy,l=We(Yt(),r,o),a=vt(t.gg,e._a[0],l.year),n=vt(t.w,l.week),null!=t.d?((i=t.d)<0||i>6)&&(d=!0):null!=t.e?(i=t.e+r,(t.e<0||t.e>6)&&(d=!0)):i=r),n<1||n>ze(a,r,o)?p(e)._overflowWeeks=!0:null!=d?p(e)._overflowWeekday=!0:(s=Fe(a,n,i,r,o),e._a[0]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=vt(e._a[0],n[0]),(e._dayOfYear>Pe(o)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),a=Oe(o,0,e._dayOfYear),e._a[1]=a.getUTCMonth(),e._a[2]=a.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=n[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Oe:Ce).apply(null,s),r=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==r&&(p(e).weekdayMismatch=!0)}}function Lt(e){if(e._f!==i.ISO_8601)if(e._f!==i.RFC_2822){e._a=[],p(e).empty=!0;var t,a,n,r,o,s,d=""+e._i,l=d.length,u=0;for(n=W(e._f,e._locale).match(P)||[],t=0;t<n.length;t++)r=n[t],(a=(d.match(pe(r,e))||[])[0])&&((o=d.substr(0,d.indexOf(a))).length>0&&p(e).unusedInput.push(o),d=d.slice(d.indexOf(a)+a.length),u+=a.length),O[r]?(a?p(e).empty=!1:p(e).unusedTokens.push(r),ve(r,a,e)):e._strict&&!a&&p(e).unusedTokens.push(r);p(e).charsLeftOver=l-u,d.length>0&&p(e).unusedInput.push(d),e._a[3]<=12&&!0===p(e).bigHour&&e._a[3]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[3]=function(e,t,a){var n;return null==a?t:null!=e.meridiemHour?e.meridiemHour(t,a):null!=e.isPM?((n=e.isPM(a))&&t<12&&(t+=12),n||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(s=p(e).era)&&(e._a[0]=e._locale.erasConvertYear(s,e._a[0])),kt(e),lt(e)}else bt(e);else yt(e)}function xt(e){var t=e._i,a=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===a&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),k(t)?new v(lt(t)):(c(t)?e._d=t:r(a)?function(e){var t,a,n,i,r,o,s=!1;if(0===e._f.length)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)r=0,o=!1,t=b({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],Lt(t),f(t)&&(o=!0),r+=p(t).charsLeftOver,r+=10*p(t).unusedTokens.length,p(t).score=r,s?r<n&&(n=r,a=t):(null==n||r<n||o)&&(n=r,a=t,o&&(s=!0));_(e,a||t)}(e):a?Lt(e):function(e){var t=e._i;l(t)?e._d=new Date(i.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=pt.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,bt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:i.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):r(t)?(e._a=m(t.slice(0),(function(e){return parseInt(e,10)})),kt(e)):o(t)?function(e){if(!e._d){var t=R(e._i),a=void 0===t.day?t.date:t.day;e._a=m([t.year,t.month,a,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),kt(e)}}(e):u(t)?e._d=new Date(t):i.createFromInputFallback(e)}(e),f(e)||(e._d=null),e))}function wt(e,t,a,n,i){var s,l={};return!0!==t&&!1!==t||(n=t,t=void 0),!0!==a&&!1!==a||(n=a,a=void 0),(o(e)&&d(e)||r(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=i,l._l=a,l._i=e,l._f=t,l._strict=n,(s=new v(lt(xt(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Yt(e,t,a,n){return wt(e,t,a,n,!1)}i.createFromInputFallback=x("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),i.ISO_8601=function(){},i.RFC_2822=function(){};var Dt=x("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Yt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),Tt=x("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Yt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function St(e,t){var a,n;if(1===t.length&&r(t[0])&&(t=t[0]),!t.length)return Yt();for(a=t[0],n=1;n<t.length;++n)t[n].isValid()&&!t[n][e](a)||(a=t[n]);return a}var Ht=["year","quarter","month","week","day","hour","minute","second","millisecond"];function jt(e){var t=R(e),a=t.year||0,n=t.quarter||0,i=t.month||0,r=t.week||t.isoWeek||0,o=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,a,n=!1;for(t in e)if(s(e,t)&&(-1===ge.call(Ht,t)||null!=e[t]&&isNaN(e[t])))return!1;for(a=0;a<Ht.length;++a)if(e[Ht[a]]){if(n)return!1;parseFloat(e[Ht[a]])!==U(e[Ht[a]])&&(n=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*d*60*60,this._days=+o+7*r,this._months=+i+3*n+12*a,this._data={},this._locale=dt(),this._bubble()}function Pt(e){return e instanceof jt}function At(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ct(e,t){E(e,0,0,(function(){var e=this.utcOffset(),a="+";return e<0&&(e=-e,a="-"),a+j(~~(e/60),2)+t+j(~~e%60,2)}))}Ct("Z",":"),Ct("ZZ",""),he("Z",me),he("ZZ",me),Me(["Z","ZZ"],(function(e,t,a){a._useUTC=!0,a._tzm=Et(me,e)}));var Ot=/([\+\-]|\d\d)/gi;function Et(e,t){var a,n,i=(t||"").match(e);return null===i?null:0===(n=60*(a=((i[i.length-1]||[])+"").match(Ot)||["-",0,0])[1]+U(a[2]))?0:"+"===a[0]?n:-n}function Ft(e,t){var a,n;return t._isUTC?(a=t.clone(),n=(k(e)||c(e)?e.valueOf():Yt(e).valueOf())-a.valueOf(),a._d.setTime(a._d.valueOf()+n),i.updateOffset(a,!1),a):Yt(e).local()}function Wt(e){return-Math.round(e._d.getTimezoneOffset())}function zt(){return!!this.isValid()&&this._isUTC&&0===this._offset}i.updateOffset=function(){};var It=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Nt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Rt(e,t){var a,n,i,r,o,d,l=e,c=null;return Pt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=It.exec(e))?(a="-"===c[1]?-1:1,l={y:0,d:U(c[2])*a,h:U(c[3])*a,m:U(c[4])*a,s:U(c[5])*a,ms:U(At(1e3*c[6]))*a}):(c=Nt.exec(e))?(a="-"===c[1]?-1:1,l={y:Bt(c[2],a),M:Bt(c[3],a),w:Bt(c[4],a),d:Bt(c[5],a),h:Bt(c[6],a),m:Bt(c[7],a),s:Bt(c[8],a)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(r=Yt(l.from),o=Yt(l.to),i=r.isValid()&&o.isValid()?(o=Ft(o,r),r.isBefore(o)?d=Vt(r,o):((d=Vt(o,r)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=i.milliseconds,l.M=i.months),n=new jt(l),Pt(e)&&s(e,"_locale")&&(n._locale=e._locale),Pt(e)&&s(e,"_isValid")&&(n._isValid=e._isValid),n}function Bt(e,t){var a=e&&parseFloat(e.replace(",","."));return(isNaN(a)?0:a)*t}function Vt(e,t){var a={};return a.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(a.months,"M").isAfter(t)&&--a.months,a.milliseconds=+t-+e.clone().add(a.months,"M"),a}function Gt(e,t){return function(a,n){var i;return null===n||isNaN(+n)||(D(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=a,a=n,n=i),Jt(this,Rt(a,n),e),this}}function Jt(e,t,a,n){var r=t._milliseconds,o=At(t._days),s=At(t._months);e.isValid()&&(n=null==n||n,s&&Se(e,K(e,"Month")+s*a),o&&$(e,"Date",K(e,"Date")+o*a),r&&e._d.setTime(e._d.valueOf()+r*a),n&&i.updateOffset(e,o||s))}Rt.fn=jt.prototype,Rt.invalid=function(){return Rt(NaN)};var Ut=Gt(1,"add"),qt=Gt(-1,"subtract");function Kt(e){return"string"==typeof e||e instanceof String}function $t(e){return k(e)||c(e)||Kt(e)||u(e)||function(e){var t=r(e),a=!1;return t&&(a=0===e.filter((function(t){return!u(t)&&Kt(e)})).length),t&&a}(e)||function(e){var t,a,n=o(e)&&!d(e),i=!1,r=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<r.length;t+=1)a=r[t],i=i||s(e,a);return n&&i}(e)||null==e}function Qt(e){var t,a=o(e)&&!d(e),n=!1,i=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<i.length;t+=1)n=n||s(e,i[t]);return a&&n}function Zt(e,t){if(e.date()<t.date())return-Zt(t,e);var a=12*(t.year()-e.year())+(t.month()-e.month()),n=e.clone().add(a,"months");return-(a+(t-n<0?(t-n)/(n-e.clone().add(a-1,"months")):(t-n)/(e.clone().add(a+1,"months")-n)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}i.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",i.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var ea=x("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function ta(){return this._locale}function aa(e,t){return(e%t+t)%t}function na(e,t,a){return e<100&&e>=0?new Date(e+400,t,a)-126227808e5:new Date(e,t,a).valueOf()}function ia(e,t,a){return e<100&&e>=0?Date.UTC(e+400,t,a)-126227808e5:Date.UTC(e,t,a)}function ra(e,t){return t.erasAbbrRegex(e)}function oa(){var e,t,a=[],n=[],i=[],r=[],o=this.eras();for(e=0,t=o.length;e<t;++e)n.push(fe(o[e].name)),a.push(fe(o[e].abbr)),i.push(fe(o[e].narrow)),r.push(fe(o[e].name)),r.push(fe(o[e].abbr)),r.push(fe(o[e].narrow));this._erasRegex=new RegExp("^("+r.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+n.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+a.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+i.join("|")+")","i")}function sa(e,t){E(0,[e,e.length],0,t)}function da(e,t,a,n,i){var r;return null==e?We(this,n,i).year:(t>(r=ze(e,n,i))&&(t=r),la.call(this,e,t,a,n,i))}function la(e,t,a,n,i){var r=Fe(e,t,a,n,i),o=Oe(r.year,0,r.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}E("N",0,0,"eraAbbr"),E("NN",0,0,"eraAbbr"),E("NNN",0,0,"eraAbbr"),E("NNNN",0,0,"eraName"),E("NNNNN",0,0,"eraNarrow"),E("y",["y",1],"yo","eraYear"),E("y",["yy",2],0,"eraYear"),E("y",["yyy",3],0,"eraYear"),E("y",["yyyy",4],0,"eraYear"),he("N",ra),he("NN",ra),he("NNN",ra),he("NNNN",(function(e,t){return t.erasNameRegex(e)})),he("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),Me(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,a,n){var i=a._locale.erasParse(e,n,a._strict);i?p(a).era=i:p(a).invalidEra=e})),he("y",le),he("yy",le),he("yyy",le),he("yyyy",le),he("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),Me(["y","yy","yyy","yyyy"],0),Me(["yo"],(function(e,t,a,n){var i;a._locale._eraYearOrdinalRegex&&(i=e.match(a._locale._eraYearOrdinalRegex)),a._locale.eraYearOrdinalParse?t[0]=a._locale.eraYearOrdinalParse(e,i):t[0]=parseInt(e,10)})),E(0,["gg",2],0,(function(){return this.weekYear()%100})),E(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),sa("gggg","weekYear"),sa("ggggg","weekYear"),sa("GGGG","isoWeekYear"),sa("GGGGG","isoWeekYear"),I("weekYear","gg"),I("isoWeekYear","GG"),V("weekYear",1),V("isoWeekYear",1),he("G",ue),he("g",ue),he("GG",ne,X),he("gg",ne,X),he("GGGG",se,te),he("gggg",se,te),he("GGGGG",de,ae),he("ggggg",de,ae),be(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,a,n){t[n.substr(0,2)]=U(e)})),be(["gg","GG"],(function(e,t,a,n){t[n]=i.parseTwoDigitYear(e)})),E("Q",0,"Qo","quarter"),I("quarter","Q"),V("quarter",7),he("Q",Z),Me("Q",(function(e,t){t[1]=3*(U(e)-1)})),E("D",["DD",2],"Do","date"),I("date","D"),V("date",9),he("D",ne),he("DD",ne,X),he("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),Me(["D","DD"],2),Me("Do",(function(e,t){t[2]=U(e.match(ne)[0])}));var ua=q("Date",!0);E("DDD",["DDDD",3],"DDDo","dayOfYear"),I("dayOfYear","DDD"),V("dayOfYear",4),he("DDD",oe),he("DDDD",ee),Me(["DDD","DDDD"],(function(e,t,a){a._dayOfYear=U(e)})),E("m",["mm",2],0,"minute"),I("minute","m"),V("minute",14),he("m",ne),he("mm",ne,X),Me(["m","mm"],4);var ca=q("Minutes",!1);E("s",["ss",2],0,"second"),I("second","s"),V("second",15),he("s",ne),he("ss",ne,X),Me(["s","ss"],5);var ma,_a,ha=q("Seconds",!1);for(E("S",0,0,(function(){return~~(this.millisecond()/100)})),E(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),E(0,["SSS",3],0,"millisecond"),E(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),E(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),E(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),E(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),E(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),E(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),I("millisecond","ms"),V("millisecond",16),he("S",oe,Z),he("SS",oe,X),he("SSS",oe,ee),ma="SSSS";ma.length<=9;ma+="S")he(ma,le);function pa(e,t){t[6]=U(1e3*("0."+e))}for(ma="S";ma.length<=9;ma+="S")Me(ma,pa);_a=q("Milliseconds",!1),E("z",0,0,"zoneAbbr"),E("zz",0,0,"zoneName");var fa=v.prototype;function ga(e){return e}fa.add=Ut,fa.calendar=function(e,t){1===arguments.length&&(arguments[0]?$t(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var a=e||Yt(),n=Ft(a,this).startOf("day"),r=i.calendarFormat(this,n)||"sameElse",o=t&&(T(t[r])?t[r].call(this,a):t[r]);return this.format(o||this.localeData().calendar(r,this,Yt(a)))},fa.clone=function(){return new v(this)},fa.diff=function(e,t,a){var n,i,r;if(!this.isValid())return NaN;if(!(n=Ft(e,this)).isValid())return NaN;switch(i=6e4*(n.utcOffset()-this.utcOffset()),t=N(t)){case"year":r=Zt(this,n)/12;break;case"month":r=Zt(this,n);break;case"quarter":r=Zt(this,n)/3;break;case"second":r=(this-n)/1e3;break;case"minute":r=(this-n)/6e4;break;case"hour":r=(this-n)/36e5;break;case"day":r=(this-n-i)/864e5;break;case"week":r=(this-n-i)/6048e5;break;default:r=this-n}return a?r:J(r)},fa.endOf=function(e){var t,a;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(a=this._isUTC?ia:na,e){case"year":t=a(this.year()+1,0,1)-1;break;case"quarter":t=a(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=a(this.year(),this.month()+1,1)-1;break;case"week":t=a(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=a(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=a(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-aa(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-aa(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-aa(t,1e3)-1}return this._d.setTime(t),i.updateOffset(this,!0),this},fa.format=function(e){e||(e=this.isUtc()?i.defaultFormatUtc:i.defaultFormat);var t=F(this,e);return this.localeData().postformat(t)},fa.from=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Yt(e).isValid())?Rt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},fa.fromNow=function(e){return this.from(Yt(),e)},fa.to=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Yt(e).isValid())?Rt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},fa.toNow=function(e){return this.to(Yt(),e)},fa.get=function(e){return T(this[e=N(e)])?this[e]():this},fa.invalidAt=function(){return p(this).overflow},fa.isAfter=function(e,t){var a=k(e)?e:Yt(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()>a.valueOf():a.valueOf()<this.clone().startOf(t).valueOf())},fa.isBefore=function(e,t){var a=k(e)?e:Yt(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()<a.valueOf():this.clone().endOf(t).valueOf()<a.valueOf())},fa.isBetween=function(e,t,a,n){var i=k(e)?e:Yt(e),r=k(t)?t:Yt(t);return!!(this.isValid()&&i.isValid()&&r.isValid())&&(("("===(n=n||"()")[0]?this.isAfter(i,a):!this.isBefore(i,a))&&(")"===n[1]?this.isBefore(r,a):!this.isAfter(r,a)))},fa.isSame=function(e,t){var a,n=k(e)?e:Yt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()===n.valueOf():(a=n.valueOf(),this.clone().startOf(t).valueOf()<=a&&a<=this.clone().endOf(t).valueOf()))},fa.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},fa.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},fa.isValid=function(){return f(this)},fa.lang=ea,fa.locale=Xt,fa.localeData=ta,fa.max=Tt,fa.min=Dt,fa.parsingFlags=function(){return _({},p(this))},fa.set=function(e,t){if("object"==typeof e){var a,n=function(e){var t,a=[];for(t in e)s(e,t)&&a.push({unit:t,priority:B[t]});return a.sort((function(e,t){return e.priority-t.priority})),a}(e=R(e));for(a=0;a<n.length;a++)this[n[a].unit](e[n[a].unit])}else if(T(this[e=N(e)]))return this[e](t);return this},fa.startOf=function(e){var t,a;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(a=this._isUTC?ia:na,e){case"year":t=a(this.year(),0,1);break;case"quarter":t=a(this.year(),this.month()-this.month()%3,1);break;case"month":t=a(this.year(),this.month(),1);break;case"week":t=a(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=a(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=a(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=aa(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=aa(t,6e4);break;case"second":t=this._d.valueOf(),t-=aa(t,1e3)}return this._d.setTime(t),i.updateOffset(this,!0),this},fa.subtract=qt,fa.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},fa.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},fa.toDate=function(){return new Date(this.valueOf())},fa.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,a=t?this.clone().utc():this;return a.year()<0||a.year()>9999?F(a,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",F(a,"Z")):F(a,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},fa.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,a,n="moment",i="";return this.isLocal()||(n=0===this.utcOffset()?"moment.utc":"moment.parseZone",i="Z"),e="["+n+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=i+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+a)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(fa[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),fa.toJSON=function(){return this.isValid()?this.toISOString():null},fa.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},fa.unix=function(){return Math.floor(this.valueOf()/1e3)},fa.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},fa.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},fa.eraName=function(){var e,t,a,n=this.localeData().eras();for(e=0,t=n.length;e<t;++e){if(a=this.clone().startOf("day").valueOf(),n[e].since<=a&&a<=n[e].until)return n[e].name;if(n[e].until<=a&&a<=n[e].since)return n[e].name}return""},fa.eraNarrow=function(){var e,t,a,n=this.localeData().eras();for(e=0,t=n.length;e<t;++e){if(a=this.clone().startOf("day").valueOf(),n[e].since<=a&&a<=n[e].until)return n[e].narrow;if(n[e].until<=a&&a<=n[e].since)return n[e].narrow}return""},fa.eraAbbr=function(){var e,t,a,n=this.localeData().eras();for(e=0,t=n.length;e<t;++e){if(a=this.clone().startOf("day").valueOf(),n[e].since<=a&&a<=n[e].until)return n[e].abbr;if(n[e].until<=a&&a<=n[e].since)return n[e].abbr}return""},fa.eraYear=function(){var e,t,a,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(a=r[e].since<=r[e].until?1:-1,n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until||r[e].until<=n&&n<=r[e].since)return(this.year()-i(r[e].since).year())*a+r[e].offset;return this.year()},fa.year=Ae,fa.isLeapYear=function(){return G(this.year())},fa.weekYear=function(e){return da.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},fa.isoWeekYear=function(e){return da.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},fa.quarter=fa.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},fa.month=He,fa.daysInMonth=function(){return ke(this.year(),this.month())},fa.week=fa.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},fa.isoWeek=fa.isoWeeks=function(e){var t=We(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},fa.weeksInYear=function(){var e=this.localeData()._week;return ze(this.year(),e.dow,e.doy)},fa.weeksInWeekYear=function(){var e=this.localeData()._week;return ze(this.weekYear(),e.dow,e.doy)},fa.isoWeeksInYear=function(){return ze(this.year(),1,4)},fa.isoWeeksInISOWeekYear=function(){return ze(this.isoWeekYear(),1,4)},fa.date=ua,fa.day=fa.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},fa.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},fa.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},fa.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},fa.hour=fa.hours=Xe,fa.minute=fa.minutes=ca,fa.second=fa.seconds=ha,fa.millisecond=fa.milliseconds=_a,fa.utcOffset=function(e,t,a){var n,r=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Et(me,e)))return this}else Math.abs(e)<16&&!a&&(e*=60);return!this._isUTC&&t&&(n=Wt(this)),this._offset=e,this._isUTC=!0,null!=n&&this.add(n,"m"),r!==e&&(!t||this._changeInProgress?Jt(this,Rt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,i.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:Wt(this)},fa.utc=function(e){return this.utcOffset(0,e)},fa.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Wt(this),"m")),this},fa.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Et(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},fa.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Yt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},fa.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},fa.isLocal=function(){return!!this.isValid()&&!this._isUTC},fa.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},fa.isUtc=zt,fa.isUTC=zt,fa.zoneAbbr=function(){return this._isUTC?"UTC":""},fa.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},fa.dates=x("dates accessor is deprecated. Use date instead.",ua),fa.months=x("months accessor is deprecated. Use month instead",He),fa.years=x("years accessor is deprecated. Use year instead",Ae),fa.zone=x("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),fa.isDSTShifted=x("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return b(t,this),(t=xt(t))._a?(e=t._isUTC?h(t._a):Yt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,a){var n,i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),o=0;for(n=0;n<i;n++)(a&&e[n]!==t[n]||!a&&U(e[n])!==U(t[n]))&&o++;return o+r}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var ya=H.prototype;function Ma(e,t,a,n){var i=dt(),r=h().set(n,t);return i[a](r,e)}function ba(e,t,a){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Ma(e,t,a,"month");var n,i=[];for(n=0;n<12;n++)i[n]=Ma(e,n,a,"month");return i}function va(e,t,a,n){"boolean"==typeof e?(u(t)&&(a=t,t=void 0),t=t||""):(a=t=e,e=!1,u(t)&&(a=t,t=void 0),t=t||"");var i,r=dt(),o=e?r._week.dow:0,s=[];if(null!=a)return Ma(t,(a+o)%7,n,"day");for(i=0;i<7;i++)s[i]=Ma(t,(i+o)%7,n,"day");return s}ya.calendar=function(e,t,a){var n=this._calendar[e]||this._calendar.sameElse;return T(n)?n.call(t,a):n},ya.longDateFormat=function(e){var t=this._longDateFormat[e],a=this._longDateFormat[e.toUpperCase()];return t||!a?t:(this._longDateFormat[e]=a.match(P).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},ya.invalidDate=function(){return this._invalidDate},ya.ordinal=function(e){return this._ordinal.replace("%d",e)},ya.preparse=ga,ya.postformat=ga,ya.relativeTime=function(e,t,a,n){var i=this._relativeTime[a];return T(i)?i(e,t,a,n):i.replace(/%d/i,e)},ya.pastFuture=function(e,t){var a=this._relativeTime[e>0?"future":"past"];return T(a)?a(t):a.replace(/%s/i,t)},ya.set=function(e){var t,a;for(a in e)s(e,a)&&(T(t=e[a])?this[a]=t:this["_"+a]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},ya.eras=function(e,t){var a,n,r,o=this._eras||dt("en")._eras;for(a=0,n=o.length;a<n;++a){switch(typeof o[a].since){case"string":r=i(o[a].since).startOf("day"),o[a].since=r.valueOf()}switch(typeof o[a].until){case"undefined":o[a].until=1/0;break;case"string":r=i(o[a].until).startOf("day").valueOf(),o[a].until=r.valueOf()}}return o},ya.erasParse=function(e,t,a){var n,i,r,o,s,d=this.eras();for(e=e.toUpperCase(),n=0,i=d.length;n<i;++n)if(r=d[n].name.toUpperCase(),o=d[n].abbr.toUpperCase(),s=d[n].narrow.toUpperCase(),a)switch(t){case"N":case"NN":case"NNN":if(o===e)return d[n];break;case"NNNN":if(r===e)return d[n];break;case"NNNNN":if(s===e)return d[n]}else if([r,o,s].indexOf(e)>=0)return d[n]},ya.erasConvertYear=function(e,t){var a=e.since<=e.until?1:-1;return void 0===t?i(e.since).year():i(e.since).year()+(t-e.offset)*a},ya.erasAbbrRegex=function(e){return s(this,"_erasAbbrRegex")||oa.call(this),e?this._erasAbbrRegex:this._erasRegex},ya.erasNameRegex=function(e){return s(this,"_erasNameRegex")||oa.call(this),e?this._erasNameRegex:this._erasRegex},ya.erasNarrowRegex=function(e){return s(this,"_erasNarrowRegex")||oa.call(this),e?this._erasNarrowRegex:this._erasRegex},ya.months=function(e,t){return e?r(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||we).test(t)?"format":"standalone"][e.month()]:r(this._months)?this._months:this._months.standalone},ya.monthsShort=function(e,t){return e?r(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[we.test(t)?"format":"standalone"][e.month()]:r(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},ya.monthsParse=function(e,t,a){var n,i,r;if(this._monthsParseExact)return Te.call(this,e,t,a);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;n<12;n++){if(i=h([2e3,n]),a&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),a||this._monthsParse[n]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[n]=new RegExp(r.replace(".",""),"i")),a&&"MMMM"===t&&this._longMonthsParse[n].test(e))return n;if(a&&"MMM"===t&&this._shortMonthsParse[n].test(e))return n;if(!a&&this._monthsParse[n].test(e))return n}},ya.monthsRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||je.call(this),e?this._monthsStrictRegex:this._monthsRegex):(s(this,"_monthsRegex")||(this._monthsRegex=De),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},ya.monthsShortRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||je.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(s(this,"_monthsShortRegex")||(this._monthsShortRegex=Ye),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},ya.week=function(e){return We(e,this._week.dow,this._week.doy).week},ya.firstDayOfYear=function(){return this._week.doy},ya.firstDayOfWeek=function(){return this._week.dow},ya.weekdays=function(e,t){var a=r(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ie(a,this._week.dow):e?a[e.day()]:a},ya.weekdaysMin=function(e){return!0===e?Ie(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},ya.weekdaysShort=function(e){return!0===e?Ie(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},ya.weekdaysParse=function(e,t,a){var n,i,r;if(this._weekdaysParseExact)return Ue.call(this,e,t,a);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),n=0;n<7;n++){if(i=h([2e3,1]).day(n),a&&!this._fullWeekdaysParse[n]&&(this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[n]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[n]=new RegExp(r.replace(".",""),"i")),a&&"dddd"===t&&this._fullWeekdaysParse[n].test(e))return n;if(a&&"ddd"===t&&this._shortWeekdaysParse[n].test(e))return n;if(a&&"dd"===t&&this._minWeekdaysParse[n].test(e))return n;if(!a&&this._weekdaysParse[n].test(e))return n}},ya.weekdaysRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(s(this,"_weekdaysRegex")||(this._weekdaysRegex=Ve),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},ya.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(s(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ge),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},ya.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(s(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Je),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},ya.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},ya.meridiem=function(e,t,a){return e>11?a?"pm":"PM":a?"am":"AM"},ot("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===U(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),i.lang=x("moment.lang is deprecated. Use moment.locale instead.",ot),i.langData=x("moment.langData is deprecated. Use moment.localeData instead.",dt);var ka=Math.abs;function La(e,t,a,n){var i=Rt(t,a);return e._milliseconds+=n*i._milliseconds,e._days+=n*i._days,e._months+=n*i._months,e._bubble()}function xa(e){return e<0?Math.floor(e):Math.ceil(e)}function wa(e){return 4800*e/146097}function Ya(e){return 146097*e/4800}function Da(e){return function(){return this.as(e)}}var Ta=Da("ms"),Sa=Da("s"),Ha=Da("m"),ja=Da("h"),Pa=Da("d"),Aa=Da("w"),Ca=Da("M"),Oa=Da("Q"),Ea=Da("y");function Fa(e){return function(){return this.isValid()?this._data[e]:NaN}}var Wa=Fa("milliseconds"),za=Fa("seconds"),Ia=Fa("minutes"),Na=Fa("hours"),Ra=Fa("days"),Ba=Fa("months"),Va=Fa("years"),Ga=Math.round,Ja={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Ua(e,t,a,n,i){return i.relativeTime(t||1,!!a,e,n)}var qa=Math.abs;function Ka(e){return(e>0)-(e<0)||+e}function $a(){if(!this.isValid())return this.localeData().invalidDate();var e,t,a,n,i,r,o,s,d=qa(this._milliseconds)/1e3,l=qa(this._days),u=qa(this._months),c=this.asSeconds();return c?(e=J(d/60),t=J(e/60),d%=60,e%=60,a=J(u/12),u%=12,n=d?d.toFixed(3).replace(/\.?0+$/,""):"",i=c<0?"-":"",r=Ka(this._months)!==Ka(c)?"-":"",o=Ka(this._days)!==Ka(c)?"-":"",s=Ka(this._milliseconds)!==Ka(c)?"-":"",i+"P"+(a?r+a+"Y":"")+(u?r+u+"M":"")+(l?o+l+"D":"")+(t||e||d?"T":"")+(t?s+t+"H":"")+(e?s+e+"M":"")+(d?s+n+"S":"")):"P0D"}var Qa=jt.prototype;return Qa.isValid=function(){return this._isValid},Qa.abs=function(){var e=this._data;return this._milliseconds=ka(this._milliseconds),this._days=ka(this._days),this._months=ka(this._months),e.milliseconds=ka(e.milliseconds),e.seconds=ka(e.seconds),e.minutes=ka(e.minutes),e.hours=ka(e.hours),e.months=ka(e.months),e.years=ka(e.years),this},Qa.add=function(e,t){return La(this,e,t,1)},Qa.subtract=function(e,t){return La(this,e,t,-1)},Qa.as=function(e){if(!this.isValid())return NaN;var t,a,n=this._milliseconds;if("month"===(e=N(e))||"quarter"===e||"year"===e)switch(t=this._days+n/864e5,a=this._months+wa(t),e){case"month":return a;case"quarter":return a/3;case"year":return a/12}else switch(t=this._days+Math.round(Ya(this._months)),e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return 24*t+n/36e5;case"minute":return 1440*t+n/6e4;case"second":return 86400*t+n/1e3;case"millisecond":return Math.floor(864e5*t)+n;default:throw new Error("Unknown unit "+e)}},Qa.asMilliseconds=Ta,Qa.asSeconds=Sa,Qa.asMinutes=Ha,Qa.asHours=ja,Qa.asDays=Pa,Qa.asWeeks=Aa,Qa.asMonths=Ca,Qa.asQuarters=Oa,Qa.asYears=Ea,Qa.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*U(this._months/12):NaN},Qa._bubble=function(){var e,t,a,n,i,r=this._milliseconds,o=this._days,s=this._months,d=this._data;return r>=0&&o>=0&&s>=0||r<=0&&o<=0&&s<=0||(r+=864e5*xa(Ya(s)+o),o=0,s=0),d.milliseconds=r%1e3,e=J(r/1e3),d.seconds=e%60,t=J(e/60),d.minutes=t%60,a=J(t/60),d.hours=a%24,o+=J(a/24),i=J(wa(o)),s+=i,o-=xa(Ya(i)),n=J(s/12),s%=12,d.days=o,d.months=s,d.years=n,this},Qa.clone=function(){return Rt(this)},Qa.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},Qa.milliseconds=Wa,Qa.seconds=za,Qa.minutes=Ia,Qa.hours=Na,Qa.days=Ra,Qa.weeks=function(){return J(this.days()/7)},Qa.months=Ba,Qa.years=Va,Qa.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var a,n,i=!1,r=Ja;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(i=e),"object"==typeof t&&(r=Object.assign({},Ja,t),null!=t.s&&null==t.ss&&(r.ss=t.s-1)),a=this.localeData(),n=function(e,t,a,n){var i=Rt(e).abs(),r=Ga(i.as("s")),o=Ga(i.as("m")),s=Ga(i.as("h")),d=Ga(i.as("d")),l=Ga(i.as("M")),u=Ga(i.as("w")),c=Ga(i.as("y")),m=r<=a.ss&&["s",r]||r<a.s&&["ss",r]||o<=1&&["m"]||o<a.m&&["mm",o]||s<=1&&["h"]||s<a.h&&["hh",s]||d<=1&&["d"]||d<a.d&&["dd",d];return null!=a.w&&(m=m||u<=1&&["w"]||u<a.w&&["ww",u]),(m=m||l<=1&&["M"]||l<a.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,m[3]=+e>0,m[4]=n,Ua.apply(null,m)}(this,!i,r,a),i&&(n=a.pastFuture(+this,n)),a.postformat(n)},Qa.toISOString=$a,Qa.toString=$a,Qa.toJSON=$a,Qa.locale=Xt,Qa.localeData=ta,Qa.toIsoString=x("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",$a),Qa.lang=ea,E("X",0,0,"unix"),E("x",0,0,"valueOf"),he("x",ue),he("X",/[+-]?\d+(\.\d{1,3})?/),Me("X",(function(e,t,a){a._d=new Date(1e3*parseFloat(e))})),Me("x",(function(e,t,a){a._d=new Date(U(e))})),
//! moment.js
i.version="2.29.1",t=Yt,i.fn=fa,i.min=function(){var e=[].slice.call(arguments,0);return St("isBefore",e)},i.max=function(){var e=[].slice.call(arguments,0);return St("isAfter",e)},i.now=function(){return Date.now?Date.now():+new Date},i.utc=h,i.unix=function(e){return Yt(1e3*e)},i.months=function(e,t){return ba(e,t,"months")},i.isDate=c,i.locale=ot,i.invalid=g,i.duration=Rt,i.isMoment=k,i.weekdays=function(e,t,a){return va(e,t,a,"weekdays")},i.parseZone=function(){return Yt.apply(null,arguments).parseZone()},i.localeData=dt,i.isDuration=Pt,i.monthsShort=function(e,t){return ba(e,t,"monthsShort")},i.weekdaysMin=function(e,t,a){return va(e,t,a,"weekdaysMin")},i.defineLocale=st,i.updateLocale=function(e,t){if(null!=t){var a,n,i=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(S(tt[e]._config,t)):(null!=(n=rt(e))&&(i=n._config),t=S(i,t),null==n&&(t.abbr=e),(a=new H(t)).parentLocale=tt[e],tt[e]=a),ot(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===ot()&&ot(e)):null!=tt[e]&&delete tt[e]);return tt[e]},i.locales=function(){return w(tt)},i.weekdaysShort=function(e,t,a){return va(e,t,a,"weekdaysShort")},i.normalizeUnits=N,i.relativeTimeRounding=function(e){return void 0===e?Ga:"function"==typeof e&&(Ga=e,!0)},i.relativeTimeThreshold=function(e,t){return void 0!==Ja[e]&&(void 0===t?Ja[e]:(Ja[e]=t,"s"===e&&(Ja.ss=t-1),!0))},i.calendarFormat=function(e,t){var a=e.diff(t,"days",!0);return a<-6?"sameElse":a<-1?"lastWeek":a<0?"lastDay":a<1?"sameDay":a<2?"nextDay":a<7?"nextWeek":"sameElse"},i.prototype=fa,i.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},i}()}).call(this,a(222)(e))},function(e,t,a){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var a=function(e,t){var a=e[1]||"",n=e[3];if(!n)return a;if(t&&"function"==typeof btoa){var i=(o=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(d," */")),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[a].concat(r).concat([i]).join("\n")}var o,s,d;return[a].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(a,"}"):a})).join("")},t.i=function(e,a,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);n&&i[d[0]]||(a&&(d[2]?d[2]="".concat(a," and ").concat(d[2]):d[2]=a),t.push(d))}},t}},function(e,t,a){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},r=function(){var e={};return function(t){if(void 0===e[t]){var a=document.querySelector(t);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(e){a=null}e[t]=a}return e[t]}}(),o=[];function s(e){for(var t=-1,a=0;a<o.length;a++)if(o[a].identifier===e){t=a;break}return t}function d(e,t){for(var a={},n=[],i=0;i<e.length;i++){var r=e[i],d=t.base?r[0]+t.base:r[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var c=s(u),m={css:r[1],media:r[2],sourceMap:r[3]};-1!==c?(o[c].references++,o[c].updater(m)):o.push({identifier:u,updater:f(m,t),references:1}),n.push(u)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=a.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function m(e,t,a,n){var i=a?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=c(t,i);else{var r=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function _(e,t,a){var n=a.css,i=a.media,r=a.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var h=null,p=0;function f(e,t){var a,n,i;if(t.singleton){var r=p++;a=h||(h=l(t)),n=m.bind(null,a,r,!1),i=m.bind(null,a,r,!0)}else a=l(t),n=_.bind(null,a,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(a)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var a=d(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<a.length;n++){var i=s(a[n]);o[i].references--}for(var r=d(e,t),l=0;l<a.length;l++){var u=s(a[l]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}a=r}}}},function(e,t,a){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,a){var n,i,r;
/*!
* inputmask.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/i=[a(28),a(24)],void 0===(r="function"==typeof(n=function(e,t,a){var n=t.document,i=navigator.userAgent,r=i.indexOf("MSIE ")>0||i.indexOf("Trident/")>0,o=m("touchstart"),s=/iemobile/i.test(i),d=/iphone/i.test(i)&&!s;function l(t,n,i){if(!(this instanceof l))return new l(t,n,i);this.el=a,this.events={},this.maskset=a,this.refreshValue=!1,!0!==i&&(e.isPlainObject(t)?n=t:(n=n||{},t&&(n.alias=t)),this.opts=e.extend(!0,{},this.defaults,n),this.noMasksCache=n&&n.definitions!==a,this.userOptions=n||{},this.isRTL=this.opts.numericInput,u(this.opts.alias,n,this.opts))}function u(t,n,i){var r=l.prototype.aliases[t];return r?(r.alias&&u(r.alias,a,i),e.extend(!0,i,r),e.extend(!0,i,n),!0):(null===i.mask&&(i.mask=t),!1)}function c(t,n){function i(t,i,r){var o=!1;if(null!==t&&""!==t||((o=null!==r.regex)?t=(t=r.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(o=!0,t=".*")),1===t.length&&!1===r.greedy&&0!==r.repeat&&(r.placeholder=""),r.repeat>0||"*"===r.repeat||"+"===r.repeat){var s="*"===r.repeat?0:"+"===r.repeat?1:r.repeat;t=r.groupmarker[0]+t+r.groupmarker[1]+r.quantifiermarker[0]+s+","+r.repeat+r.quantifiermarker[1]}var d,u=o?"regex_"+r.regex:r.numericInput?t.split("").reverse().join(""):t;return l.prototype.masksCache[u]===a||!0===n?(d={mask:t,maskToken:l.prototype.analyseMask(t,o,r),validPositions:{},_buffer:a,buffer:a,tests:{},excludes:{},metadata:i,maskLength:a,jitOffset:{}},!0!==n&&(l.prototype.masksCache[u]=d,d=e.extend(!0,{},l.prototype.masksCache[u]))):d=e.extend(!0,{},l.prototype.masksCache[u]),d}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){if(null===t.keepStatic){t.keepStatic="auto";for(var r=0;r<t.mask.length;r++)if(t.mask[r].charAt(0)!==t.mask[0].charAt(0)){t.keepStatic=!0;break}}var o=t.groupmarker[0];return e.each(t.isRTL?t.mask.reverse():t.mask,(function(n,i){o.length>1&&(o+=t.groupmarker[1]+t.alternatormarker+t.groupmarker[0]),i.mask===a||e.isFunction(i.mask)?o+=i:o+=i.mask})),i(o+=t.groupmarker[1],t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==a&&!e.isFunction(t.mask.mask)?i(t.mask.mask,t.mask,t):i(t.mask,t.mask,t)}function m(e){var t=n.createElement("input"),a="on"+e,i=a in t;return i||(t.setAttribute(a,"return;"),i="function"==typeof t[a]),t=null,i}function _(i,u,c){u=u||this.maskset,c=c||this.opts;var h,p,f,g,y,M=this,b=this.el,v=this.isRTL,k=!1,L=!1,x=!1,w=!1,Y=function(e,t,n,i,r){var o=c.greedy;r&&(c.greedy=!1),t=t||0;var s,d,l,u=[],m=0;S();do{if(!0===e&&D().validPositions[m])d=(l=r&&!0===D().validPositions[m].match.optionality&&D().validPositions[m+1]===a&&(!0===D().validPositions[m].generatedInput||D().validPositions[m].input==c.skipOptionalPartCharacter&&m>0)?P(m,E(m,s,m-1)):D().validPositions[m]).match,s=l.locator.slice(),u.push(!0===n?l.input:!1===n?d.nativeDef:$(m,d));else{d=(l=A(m,s,m-1)).match,s=l.locator.slice();var _=!0!==i&&(!1!==c.jitMasking?c.jitMasking:d.jit);(!1===_||_===a||"number"==typeof _&&isFinite(_)&&_>m)&&u.push(!1===n?d.nativeDef:$(m,d))}"auto"===c.keepStatic&&d.newBlockMarker&&null!==d.fn&&(c.keepStatic=m-1),m++}while((f===a||m<f)&&(null!==d.fn||""!==d.def)||t>m);return""===u[u.length-1]&&u.pop(),!1===n&&D().maskLength!==a||(D().maskLength=m-1),c.greedy=o,u};function D(){return u}function T(e){var t=D();t.buffer=a,!0!==e&&(t.validPositions={},t.p=0)}function S(e,t,n){var i=-1,r=-1,o=n||D().validPositions;for(var s in e===a&&(e=-1),o){var d=parseInt(s);o[d]&&(t||!0!==o[d].generatedInput)&&(d<=e&&(i=d),d>=e&&(r=d))}return-1===i||i==e?r:-1==r||e-i<r-e?i:r}function H(e){var t=e.locator[e.alternation];return"string"==typeof t&&t.length>0&&(t=t.split(",")[0]),t!==a?t.toString():""}function j(e,t){var n=(e.alternation!=a?e.mloc[H(e)]:e.locator).join("");if(""!==n)for(;n.length<t;)n+="0";return n}function P(e,t){for(var n,i,r,o=j(C(e=e>0?e-1:0)),s=0;s<t.length;s++){var d=t[s];n=j(d,o.length);var l=Math.abs(n-o);(i===a||""!==n&&l<i||r&&!c.greedy&&r.match.optionality&&"master"===r.match.newBlockMarker&&(!d.match.optionality||!d.match.newBlockMarker)||r&&r.match.optionalQuantifier&&!d.match.optionalQuantifier)&&(i=l,r=d)}return r}function A(e,t,a){return D().validPositions[e]||P(e,E(e,t?t.slice():t,a))}function C(e,t){return D().validPositions[e]?D().validPositions[e]:(t||E(e))[0]}function O(e,t){for(var a=!1,n=E(e),i=0;i<n.length;i++)if(n[i].match&&n[i].match.def===t){a=!0;break}return a}function E(t,n,i){var r,o=D().maskToken,s=n?i:0,d=n?n.slice():[0],l=[],u=!1,m=n?n.join(""):"";function _(n,i,o,d){function h(o,d,p){function f(t,a){var n=0===e.inArray(t,a.matches);return n||e.each(a.matches,(function(e,i){if(!0===i.isQuantifier?n=f(t,a.matches[e-1]):i.hasOwnProperty("matches")&&(n=f(t,i)),n)return!1})),n}function g(t,n,i){var r,o;if((D().tests[t]||D().validPositions[t])&&e.each(D().tests[t]||[D().validPositions[t]],(function(e,t){if(t.mloc[n])return r=t,!1;var s=i!==a?i:t.alternation,d=t.locator[s]!==a?t.locator[s].toString().indexOf(n):-1;(o===a||d<o)&&-1!==d&&(r=t,o=d)})),r){var s=r.locator[r.alternation];return(r.mloc[n]||r.mloc[s]||r.locator).slice((i!==a?i:r.alternation)+1)}return i!==a?g(t,n):a}function y(e,t){function a(e){for(var t,a,n=[],i=0,r=e.length;i<r;i++)if("-"===e.charAt(i))for(a=e.charCodeAt(i+1);++t<a;)n.push(String.fromCharCode(t));else t=e.charCodeAt(i),n.push(e.charAt(i));return n.join("")}return c.regex&&null!==e.match.fn&&null!==t.match.fn?-1!==a(t.match.def.replace(/[\[\]]/g,"")).indexOf(a(e.match.def.replace(/[\[\]]/g,""))):e.match.def===t.match.nativeDef}function M(e,t){if(t===a||e.alternation===t.alternation&&-1===e.locator[e.alternation].toString().indexOf(t.locator[t.alternation])){e.mloc=e.mloc||{};var n=e.locator[e.alternation];if(n!==a){if("string"==typeof n&&(n=n.split(",")[0]),e.mloc[n]===a&&(e.mloc[n]=e.locator.slice()),t!==a){for(var i in t.mloc)"string"==typeof i&&(i=i.split(",")[0]),e.mloc[i]===a&&(e.mloc[i]=t.mloc[i]);e.locator[e.alternation]=Object.keys(e.mloc).join(",")}return!0}e.alternation=a}return!1}if(s>500&&p!==a)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+D().mask;if(s===t&&o.matches===a)return l.push({match:o,locator:d.reverse(),cd:m,mloc:{}}),!0;if(o.matches!==a){if(o.isGroup&&p!==o){if(o=h(n.matches[e.inArray(o,n.matches)+1],d,p))return!0}else if(o.isOptional){var b=o;if(o=_(o,i,d,p)){if(e.each(l,(function(e,t){t.match.optionality=!0})),r=l[l.length-1].match,p!==a||!f(r,b))return!0;u=!0,s=t}}else if(o.isAlternator){var v,k=o,L=[],x=l.slice(),w=d.length,Y=i.length>0?i.shift():-1;if(-1===Y||"string"==typeof Y){var T,S=s,H=i.slice(),j=[];if("string"==typeof Y)j=Y.split(",");else for(T=0;T<k.matches.length;T++)j.push(T.toString());if(D().excludes[t]){for(var P=j.slice(),A=0,C=D().excludes[t].length;A<C;A++)j.splice(j.indexOf(D().excludes[t][A].toString()),1);0===j.length&&(D().excludes[t]=a,j=P)}(!0===c.keepStatic||isFinite(parseInt(c.keepStatic))&&S>=c.keepStatic)&&(j=j.slice(0,1));for(var O=!1,E=0;E<j.length;E++){T=parseInt(j[E]),l=[],i="string"==typeof Y&&g(s,T,w)||H.slice(),k.matches[T]&&h(k.matches[T],[T].concat(d),p)?o=!0:0===E&&(O=!0),v=l.slice(),s=S,l=[];for(var F=0;F<v.length;F++){var W=v[F],z=!1;W.match.jit=W.match.jit||O,W.alternation=W.alternation||w,M(W);for(var I=0;I<L.length;I++){var N=L[I];if("string"!=typeof Y||W.alternation!==a&&-1!==e.inArray(W.locator[W.alternation].toString(),j)){if(W.match.nativeDef===N.match.nativeDef){z=!0,M(N,W);break}if(y(W,N)){M(W,N)&&(z=!0,L.splice(L.indexOf(N),0,W));break}if(y(N,W)){M(N,W);break}if(J=N,(G=W).locator.slice(G.alternation).join("")==J.locator.slice(J.alternation).join("")&&null===G.match.fn&&null!==J.match.fn&&J.match.fn.test(G.match.def,D(),t,!1,c,!1)){M(W,N)&&(z=!0,L.splice(L.indexOf(N),0,W));break}}}z||L.push(W)}}l=x.concat(L),s=t,u=l.length>0,o=L.length>0,i=H.slice()}else o=h(k.matches[Y]||n.matches[Y],[Y].concat(d),p);if(o)return!0}else if(o.isQuantifier&&p!==n.matches[e.inArray(o,n.matches)-1])for(var R=o,B=i.length>0?i.shift():0;B<(isNaN(R.quantifier.max)?B+1:R.quantifier.max)&&s<=t;B++){var V=n.matches[e.inArray(R,n.matches)-1];if(o=h(V,[B].concat(d),V)){if((r=l[l.length-1].match).optionalQuantifier=B>=R.quantifier.min,r.jit=(B||1)*V.matches.indexOf(r)>=R.quantifier.jit,r.optionalQuantifier&&f(r,V)){u=!0,s=t;break}return r.jit&&(D().jitOffset[t]=V.matches.indexOf(r)),!0}}else if(o=_(o,i,d,p))return!0}else s++;var G,J}for(var p=i.length>0?i.shift():0;p<n.matches.length;p++)if(!0!==n.matches[p].isQuantifier){var f=h(n.matches[p],[p].concat(o),d);if(f&&s===t)return f;if(s>t)break}}if(t>-1){if(n===a){for(var h,p=t-1;(h=D().validPositions[p]||D().tests[p])===a&&p>-1;)p--;h!==a&&p>-1&&(d=function(t,n){var i=[];return e.isArray(n)||(n=[n]),n.length>0&&(n[0].alternation===a?0===(i=P(t,n.slice()).locator.slice()).length&&(i=n[0].locator.slice()):e.each(n,(function(e,t){if(""!==t.def)if(0===i.length)i=t.locator.slice();else for(var a=0;a<i.length;a++)t.locator[a]&&-1===i[a].toString().indexOf(t.locator[a])&&(i[a]+=","+t.locator[a])}))),i}(p,h),m=d.join(""),s=p)}if(D().tests[t]&&D().tests[t][0].cd===m)return D().tests[t];for(var f=d.shift();f<o.length&&!(_(o[f],d,[f])&&s===t||s>t);f++);}return(0===l.length||u)&&l.push({match:{fn:null,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:m}),n!==a&&D().tests[t]?e.extend(!0,[],l):(D().tests[t]=e.extend(!0,[],l),D().tests[t])}function F(){return D()._buffer===a&&(D()._buffer=Y(!1,1),D().buffer===a&&(D().buffer=D()._buffer.slice())),D()._buffer}function W(e){return D().buffer!==a&&!0!==e||(D().buffer=Y(!0,S(),!0),D()._buffer===a&&(D()._buffer=D().buffer.slice())),D().buffer}function z(e,t,n){var i,r;if(!0===e)T(),e=0,t=n.length;else for(i=e;i<t;i++)delete D().validPositions[i];for(r=e,i=e;i<t;i++)if(T(!0),n[i]!==c.skipOptionalPartCharacter){var o=B(r,n[i],!0,!0);!1!==o&&(T(!0),r=o.caret!==a?o.caret:o.pos+1)}}function I(t,a,n){switch(c.casing||a.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var i=D().validPositions[n-1];t=0===n||i&&i.input===String.fromCharCode(l.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(c.casing)){var r=Array.prototype.slice.call(arguments);r.push(D().validPositions),t=c.casing.apply(this,r)}}return t}function N(t,n,i){for(var r,o=c.greedy?n:n.slice(0,1),s=!1,d=i!==a?i.split(","):[],l=0;l<d.length;l++)-1!==(r=t.indexOf(d[l]))&&t.splice(r,1);for(var u=0;u<t.length;u++)if(-1!==e.inArray(t[u],o)){s=!0;break}return s}function R(t,n,i,r,o){var s,d,l,u,c,m,_,h=e.extend(!0,{},D().validPositions),p=!1,f=o!==a?o:S();if(-1===f&&o===a)d=(u=C(s=0)).alternation;else for(;f>=0;f--)if((l=D().validPositions[f])&&l.alternation!==a){if(u&&u.locator[l.alternation]!==l.locator[l.alternation])break;s=f,d=D().validPositions[s].alternation,u=l}if(d!==a){_=parseInt(s),D().excludes[_]=D().excludes[_]||[],!0!==t&&D().excludes[_].push(H(u));var g=[],y=0;for(c=_;c<S(a,!0)+1;c++)(m=D().validPositions[c])&&!0!==m.generatedInput?g.push(m.input):c<t&&y++,delete D().validPositions[c];for(;D().excludes[_]&&D().excludes[_].length<10;){var M=-1*y,b=g.slice();for(D().tests[_]=a,T(!0),p=!0;b.length>0;){var v=b.shift();if(!(p=B(S(a,!0)+1,v,!1,r,!0)))break}if(p&&n!==a){var k=S(t)+1;for(c=_;c<S()+1;c++)((m=D().validPositions[c])===a||null==m.match.fn)&&c<t+M&&M++;p=B((t+=M)>k?k:t,n,i,r,!0)}if(p)break;if(T(),u=C(_),D().validPositions=e.extend(!0,{},h),!D().excludes[_]){p=R(t,n,i,r,_-1);break}var L=H(u);if(-1!==D().excludes[_].indexOf(L)){p=R(t,n,i,r,_-1);break}for(D().excludes[_].push(L),c=_;c<S(a,!0)+1;c++)delete D().validPositions[c]}}return D().excludes[_]=a,p}function B(t,n,i,r,o,s){function d(e){return v?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1}i=!0===i;var l=t;function u(n,i,o){var s=!1;return e.each(E(n),(function(l,u){var m=u.match;if(W(!0),!1!==(s=null!=m.fn?m.fn.test(i,D(),n,o,c,d(t)):(i===m.def||i===c.skipOptionalPartCharacter)&&""!==m.def&&{c:$(n,m,!0)||m.def,pos:n})){var _=s.c!==a?s.c:i,h=n;return _=_===c.skipOptionalPartCharacter&&null===m.fn?$(n,m,!0)||m.def:_,s.remove!==a&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort((function(e,t){return t-e})),(function(e,t){G({begin:t,end:t+1})}))),s.insert!==a&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort((function(e,t){return e-t})),(function(e,t){B(t.pos,t.c,!0,r)}))),!0!==s&&s.pos!==a&&s.pos!==n&&(h=s.pos),!0!==s&&s.pos===a&&s.c===a||G(t,e.extend({},u,{input:I(_,m,h)}),r,h)||(s=!1),!1}})),s}t.begin!==a&&(l=v?t.end:t.begin);var m=!0,_=e.extend(!0,{},D().validPositions);if(e.isFunction(c.preValidation)&&!i&&!0!==r&&!0!==s&&(m=c.preValidation(W(),l,n,d(t),c,D())),!0===m){if(V(a,l,!0),(f===a||l<f)&&(m=u(l,n,i),(!i||!0===r)&&!1===m&&!0!==s)){var h=D().validPositions[l];if(!h||null!==h.match.fn||h.match.def!==n&&n!==c.skipOptionalPartCharacter){if((c.insertMode||D().validPositions[U(l)]===a)&&(!J(l,!0)||D().jitOffset[l]))if(D().jitOffset[l]&&D().validPositions[U(l)]===a)!1!==(m=B(l+D().jitOffset[l],n,i))&&(m.caret=l);else for(var p=l+1,g=U(l);p<=g;p++)if(!1!==(m=u(p,n,i))){m=V(l,m.pos!==a?m.pos:p)||m,l=p;break}}else m={caret:U(l)}}!1!==m||!1===c.keepStatic||null!=c.regex&&!oe(W())||i||!0===o||(m=R(l,n,i,r)),!0===m&&(m={pos:l})}if(e.isFunction(c.postValidation)&&!1!==m&&!i&&!0!==r&&!0!==s){var y=c.postValidation(W(!0),t.begin!==a?v?t.end:t.begin:t,m,c);if(y!==a){if(y.refreshFromBuffer&&y.buffer){var M=y.refreshFromBuffer;z(!0===M?M:M.start,M.end,y.buffer)}m=!0===y?m:y}}return m&&m.pos===a&&(m.pos=l),!1!==m&&!0!==s||(T(!0),D().validPositions=e.extend(!0,{},_)),m}function V(t,n,i){var r;if(t===a)for(t=n-1;t>0&&!D().validPositions[t];t--);for(var o=t;o<n;o++)if(D().validPositions[o]===a&&!J(o,!0)&&(0==o?C(o):D().validPositions[o-1])){var s=E(o).slice();""===s[s.length-1].match.def&&s.pop();var d=P(o,s);if((d=e.extend({},d,{input:$(o,d.match,!0)||d.match.def})).generatedInput=!0,G(o,d,!0),!0!==i){var l=D().validPositions[n].input;D().validPositions[n]=a,r=B(n,l,!0,!0)}}return r}function G(t,n,i,r){function o(e,t,n){var i=t[e];if(i!==a&&(null===i.match.fn&&!0!==i.match.optionality||i.input===c.radixPoint)){var r=n.begin<=e-1?t[e-1]&&null===t[e-1].match.fn&&t[e-1]:t[e-1],o=n.end>e+1?t[e+1]&&null===t[e+1].match.fn&&t[e+1]:t[e+1];return r&&o}return!1}var s=t.begin!==a?t.begin:t,d=t.end!==a?t.end:t;if(t.begin>t.end&&(s=t.end,d=t.begin),r=r!==a?r:s,s!==d||c.insertMode&&D().validPositions[r]!==a&&i===a){var l=e.extend(!0,{},D().validPositions),u=S(a,!0);for(D().p=s,f=u;f>=s;f--)D().validPositions[f]&&"+"===D().validPositions[f].match.nativeDef&&(c.isNegative=!1),delete D().validPositions[f];var m=!0,_=r,h=(D().validPositions,!1),p=_,f=_;for(n&&(D().validPositions[r]=e.extend(!0,{},n),p++,_++,s<d&&f++);f<=u;f++){var g=l[f];if(g!==a&&(f>=d||f>=s&&!0!==g.generatedInput&&o(f,l,{begin:s,end:d}))){for(;""!==C(p).match.def;){if(!1===h&&l[p]&&l[p].match.nativeDef===g.match.nativeDef)D().validPositions[p]=e.extend(!0,{},l[p]),D().validPositions[p].input=g.input,V(a,p,!0),_=p+1,m=!0;else if(c.shiftPositions&&O(p,g.match.def)){var y=B(p,g.input,!0,!0);m=!1!==y,_=y.caret||y.insert?S():p+1,h=!0}else m=!0===g.generatedInput||g.input===c.radixPoint&&!0===c.numericInput;if(m)break;if(!m&&p>d&&J(p,!0)&&(null!==g.match.fn||p>D().maskLength))break;p++}""==C(p).match.def&&(m=!1),p=_}if(!m)break}if(!m)return D().validPositions=e.extend(!0,{},l),T(!0),!1}else n&&(D().validPositions[r]=e.extend(!0,{},n));return T(!0),!0}function J(e,t){var a=A(e).match;if(""===a.def&&(a=C(e).match),null!=a.fn)return a.fn;if(!0!==t&&e>-1){var n=E(e);return n.length>1+(""===n[n.length-1].match.def?1:0)}return!1}function U(e,t){for(var a=e+1;""!==C(a).match.def&&(!0===t&&(!0!==C(a).match.newBlockMarker||!J(a))||!0!==t&&!J(a));)a++;return a}function q(e,t){var a,n=e;if(n<=0)return 0;for(;--n>0&&(!0===t&&!0!==C(n).match.newBlockMarker||!0!==t&&!J(n)&&((a=E(n)).length<2||2===a.length&&""===a[1].match.def)););return n}function K(t,n,i,r,o){if(r&&e.isFunction(c.onBeforeWrite)){var s=c.onBeforeWrite.call(M,r,n,i,c);if(s){if(s.refreshFromBuffer){var d=s.refreshFromBuffer;z(!0===d?d:d.start,d.end,s.buffer||n),n=W(!0)}i!==a&&(i=s.caret!==a?s.caret:i)}}if(t!==a&&(t.inputmask._valueSet(n.join("")),i===a||r!==a&&"blur"===r.type?le(t,i,0===n.length):ne(t,i),!0===o)){var l=e(t),u=t.inputmask._valueGet();L=!0,l.trigger("input"),setTimeout((function(){u===F().join("")?l.trigger("cleared"):!0===oe(n)&&l.trigger("complete")}),0)}}function $(t,n,i){if((n=n||C(t).match).placeholder!==a||!0===i)return e.isFunction(n.placeholder)?n.placeholder(c):n.placeholder;if(null===n.fn){if(t>-1&&D().validPositions[t]===a){var r,o=E(t),s=[];if(o.length>1+(""===o[o.length-1].match.def?1:0))for(var d=0;d<o.length;d++)if(!0!==o[d].match.optionality&&!0!==o[d].match.optionalQuantifier&&(null===o[d].match.fn||r===a||!1!==o[d].match.fn.test(r.match.def,D(),t,!0,c))&&(s.push(o[d]),null===o[d].match.fn&&(r=o[d]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return c.placeholder.charAt(t%c.placeholder.length)}return n.def}return c.placeholder.charAt(t%c.placeholder.length)}function Q(e,t){if(r){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var a=W().slice(),n=e.inputmask._valueGet();if(n!==t){var i=S();-1===i&&n===F().join("")?a=[]:-1!==i&&re(a),K(e,a)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}var Z,X={on:function(t,n,i){var r=function(t){var n=this;if(n.inputmask===a&&"FORM"!==this.nodeName){var r=e.data(n,"_inputmask_opts");r?new l(r).mask(n):X.off(n)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(n.disabled||n.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===c.tabThrough&&t.keyCode===l.keyCode.TAB))){switch(t.type){case"input":if(!0===L)return L=!1,t.preventDefault();if(o){var u=arguments;return setTimeout((function(){i.apply(n,u),ne(n,n.inputmask.caretPos,a,!0)}),0),!1}break;case"keydown":k=!1,L=!1;break;case"keypress":if(!0===k)return t.preventDefault();k=!0;break;case"click":if(s||d)return u=arguments,setTimeout((function(){i.apply(n,u)}),0),!1}var m=i.apply(n,arguments);return!1===m&&(t.preventDefault(),t.stopPropagation()),m}t.preventDefault()}};t.inputmask.events[n]=t.inputmask.events[n]||[],t.inputmask.events[n].push(r),-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).on(n,r):e(t).on(n,r)},off:function(t,a){var n;t.inputmask&&t.inputmask.events&&(a?(n=[])[a]=t.inputmask.events[a]:n=t.inputmask.events,e.each(n,(function(a,n){for(;n.length>0;){var i=n.pop();-1!==e.inArray(a,["submit","reset"])?null!==t.form&&e(t.form).off(a,i):e(t).off(a,i)}delete t.inputmask.events[a]})))}},ee={keydownEvent:function(t){var a=e(this),n=t.keyCode,i=ne(this);if(n===l.keyCode.BACKSPACE||n===l.keyCode.DELETE||d&&n===l.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&n===l.keyCode.X&&!m("cut"))t.preventDefault(),se(0,n,i),K(this,W(!0),D().p,t,this.inputmask._valueGet()!==W().join(""));else if(n===l.keyCode.END||n===l.keyCode.PAGE_DOWN){t.preventDefault();var r=U(S());ne(this,t.shiftKey?i.begin:r,r,!0)}else n===l.keyCode.HOME&&!t.shiftKey||n===l.keyCode.PAGE_UP?(t.preventDefault(),ne(this,0,t.shiftKey?i.begin:0,!0)):(c.undoOnEscape&&n===l.keyCode.ESCAPE||90===n&&t.ctrlKey)&&!0!==t.altKey?(te(this,!0,!1,h.split("")),a.trigger("click")):n!==l.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===c.tabThrough&&n===l.keyCode.TAB&&(!0===t.shiftKey?(null===C(i.begin).match.fn&&(i.begin=U(i.begin)),i.end=q(i.begin,!0),i.begin=q(i.end,!0)):(i.begin=U(i.begin,!0),i.end=U(i.begin,!0),i.end<D().maskLength&&i.end--),i.begin<D().maskLength&&(t.preventDefault(),ne(this,i.begin,i.end))):(c.insertMode=!c.insertMode,this.setAttribute("im-insert",c.insertMode));c.onKeyDown.call(this,t,W(),ne(this).begin,c),x=-1!==e.inArray(n,c.ignorables)},keypressEvent:function(t,n,i,r,o){var s=this,d=e(s),u=t.which||t.charCode||t.keyCode;if(!(!0===n||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||x))return u===l.keyCode.ENTER&&h!==W().join("")&&(h=W().join(""),setTimeout((function(){d.trigger("change")}),0)),!0;if(u){46===u&&!1===t.shiftKey&&""!==c.radixPoint&&(u=c.radixPoint.charCodeAt(0));var m,_=n?{begin:o,end:o}:ne(s),p=String.fromCharCode(u),f=0;if(c._radixDance&&c.numericInput){var g=W().indexOf(c.radixPoint.charAt(0))+1;_.begin<=g&&(u===c.radixPoint.charCodeAt(0)&&(f=1),_.begin-=1,_.end-=1)}D().writeOutBuffer=!0;var y=B(_,p,r);if(!1!==y&&(T(!0),m=y.caret!==a?y.caret:U(y.pos.begin?y.pos.begin:y.pos),D().p=m),m=(c.numericInput&&y.caret===a?q(m):m)+f,!1!==i&&(setTimeout((function(){c.onKeyValidation.call(s,u,y,c)}),0),D().writeOutBuffer&&!1!==y)){var M=W();K(s,M,m,t,!0!==n)}if(t.preventDefault(),n)return!1!==y&&(y.forwardPosition=m),y}},pasteEvent:function(a){var n,i=a.originalEvent||a,r=(e(this),this.inputmask._valueGet(!0)),o=ne(this);v&&(n=o.end,o.end=o.begin,o.begin=n);var s=r.substr(0,o.begin),d=r.substr(o.end,r.length);if(s===(v?F().reverse():F()).slice(0,o.begin).join("")&&(s=""),d===(v?F().reverse():F()).slice(o.end).join("")&&(d=""),t.clipboardData&&t.clipboardData.getData)r=s+t.clipboardData.getData("Text")+d;else{if(!i.clipboardData||!i.clipboardData.getData)return!0;r=s+i.clipboardData.getData("text/plain")+d}var l=r;if(e.isFunction(c.onBeforePaste)){if(!1===(l=c.onBeforePaste.call(M,r,c)))return a.preventDefault();l||(l=r)}return te(this,!1,!1,l.toString().split("")),K(this,W(),U(S()),a,h!==W().join("")),a.preventDefault()},inputFallBackEvent:function(t){var a=this,n=a.inputmask._valueGet();if(W().join("")!==n){var i=ne(a);if(n=function(e,t,a){if(s){var n=t.replace(W().join(""),"");if(1===n.length){var i=t.split("");i.splice(a.begin,0,n),t=i.join("")}}return t}(0,n=function(e,t,a){return"."===t.charAt(a.begin-1)&&""!==c.radixPoint&&((t=t.split(""))[a.begin-1]=c.radixPoint.charAt(0),t=t.join("")),t}(0,n,i),i),W().join("")!==n){var r=W().join(""),o=!c.numericInput&&n.length>r.length?-1:0,d=n.substr(0,i.begin),u=n.substr(i.begin),m=r.substr(0,i.begin+o),_=r.substr(i.begin+o),h=i,p="",f=!1;if(d!==m){var g,y=(f=d.length>=m.length)?d.length:m.length;for(g=0;d.charAt(g)===m.charAt(g)&&g<y;g++);f&&(h.begin=g-o,p+=d.slice(g,h.end))}if(u!==_&&(u.length>_.length?p+=u.slice(0,1):u.length<_.length&&(h.end+=_.length-u.length,f||""===c.radixPoint||""!==u||d.charAt(h.begin+o-1)!==c.radixPoint||(h.begin--,p=c.radixPoint))),K(a,W(),{begin:h.begin+o,end:h.end+o}),p.length>0)e.each(p.split(""),(function(t,n){var i=new e.Event("keypress");i.which=n.charCodeAt(0),x=!1,ee.keypressEvent.call(a,i)}));else{h.begin===h.end-1&&(h.begin=q(h.begin+1),h.begin===h.end-1?ne(a,h.begin):ne(a,h.begin,h.end));var M=new e.Event("keydown");M.keyCode=c.numericInput?l.keyCode.BACKSPACE:l.keyCode.DELETE,ee.keydownEvent.call(a,M)}t.preventDefault()}}},beforeInputEvent:function(t){if(t.cancelable){var a=this;switch(t.inputType){case"insertText":return e.each(t.data.split(""),(function(t,n){var i=new e.Event("keypress");i.which=n.charCodeAt(0),x=!1,ee.keypressEvent.call(a,i)})),t.preventDefault();case"deleteContentBackward":return(n=new e.Event("keydown")).keyCode=l.keyCode.BACKSPACE,ee.keydownEvent.call(a,n),t.preventDefault();case"deleteContentForward":var n;return(n=new e.Event("keydown")).keyCode=l.keyCode.DELETE,ee.keydownEvent.call(a,n),t.preventDefault()}}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var a=this,n=(n=t&&t.detail?t.detail[0]:arguments[1])||a.inputmask._valueGet(!0);e.isFunction(c.onBeforeMask)&&(n=c.onBeforeMask.call(M,n,c)||n),te(a,!0,!1,n=n.toString().split("")),h=W().join(""),(c.clearMaskOnLostFocus||c.clearIncomplete)&&a.inputmask._valueGet()===F().join("")&&a.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();c.showMaskOnFocus&&(t!==W().join("")?K(this,W(),U(S())):!1===w&&ne(this,U(S()))),!0===c.positionCaretOnTab&&!1===w&&ee.clickEvent.apply(this,[e,!0]),h=W().join("")},mouseleaveEvent:function(e){w=!1,c.clearMaskOnLostFocus&&n.activeElement!==this&&Q(this,y)},clickEvent:function(t,i){var r=this;setTimeout((function(){if(n.activeElement===r){var t=ne(r);if(i&&(v?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(c.positionCaretOnClick){case"none":break;case"select":ne(r,0,W().length);break;case"ignore":ne(r,U(S()));break;case"radixFocus":if(function(t){if(""!==c.radixPoint){var n=D().validPositions;if(n[t]===a||n[t].input===$(t)){if(t<U(-1))return!0;var i=e.inArray(c.radixPoint,W());if(-1!==i){for(var r in n)if(i<r&&n[r].input!==$(r))return!1;return!0}}}return!1}(t.begin)){var o=W().join("").indexOf(c.radixPoint);ne(r,c.numericInput?U(o):o);break}default:var s=t.begin,d=S(s,!0),l=U(d);if(s<l)ne(r,J(s,!0)||J(s-1,!0)?s:U(s));else{var u=D().validPositions[d],m=A(l,u?u.match.locator:a,u),_=$(l,m.match);if(""!==_&&W()[l]!==_&&!0!==m.match.optionalQuantifier&&!0!==m.match.newBlockMarker||!J(l,c.keepStatic)&&m.match.def===_){var h=U(l);(s>=h||s===l)&&(l=h)}ne(r,l)}}}}),0)},cutEvent:function(a){e(this);var i=ne(this),r=a.originalEvent||a,o=t.clipboardData||r.clipboardData,s=v?W().slice(i.end,i.begin):W().slice(i.begin,i.end);o.setData("text",v?s.reverse().join(""):s.join("")),n.execCommand&&n.execCommand("copy"),se(0,l.keyCode.DELETE,i),K(this,W(),D().p,a,h!==W().join(""))},blurEvent:function(t){var n=e(this);if(this.inputmask){Q(this,y);var i=this.inputmask._valueGet(),r=W().slice();""===i&&g===a||(c.clearMaskOnLostFocus&&(-1===S()&&i===F().join("")?r=[]:re(r)),!1===oe(r)&&(setTimeout((function(){n.trigger("incomplete")}),0),c.clearIncomplete&&(T(),r=c.clearMaskOnLostFocus?[]:F().slice())),K(this,r,a,t)),h!==W().join("")&&(h=r.join(""),n.trigger("change"))}},mouseenterEvent:function(e){w=!0,n.activeElement!==this&&c.showMaskOnHover&&Q(this,(v?W().slice().reverse():W()).join(""))},submitEvent:function(e){h!==W().join("")&&p.trigger("change"),c.clearMaskOnLostFocus&&-1===S()&&b.inputmask._valueGet&&b.inputmask._valueGet()===F().join("")&&b.inputmask._valueSet(""),c.clearIncomplete&&!1===oe(W())&&b.inputmask._valueSet(""),c.removeMaskOnSubmit&&(b.inputmask._valueSet(b.inputmask.unmaskedvalue(),!0),setTimeout((function(){K(b,W())}),0))},resetEvent:function(e){b.inputmask.refreshValue=!0,setTimeout((function(){p.trigger("setvalue")}),0)}};function te(t,n,i,r,o){var s=this||t.inputmask,d=r.slice(),u="",m=-1,_=a;if(T(),i||!0===c.autoUnmask)m=U(m);else{var h=F().slice(0,U(-1)).join(""),p=d.join("").match(new RegExp("^"+l.escapeRegex(h),"g"));p&&p.length>0&&(d.splice(0,p.length*h.length),m=U(m))}-1===m?(D().p=U(m),m=0):D().p=m,s.caretPos={begin:m},e.each(d,(function(n,r){if(r!==a)if(D().validPositions[n]===a&&d[n]===$(n)&&J(n,!0)&&!1===B(n,d[n],!0,a,a,!0))D().p++;else{var o=new e.Event("_checkval");o.which=r.charCodeAt(0),u+=r;var l=S(a,!0);!function(e,t){return-1!==Y(!0,0,!1).slice(e,U(e)).join("").replace(/'/g,"").indexOf(t)&&!J(e)&&(C(e).match.nativeDef===t.charAt(0)||null===C(e).match.fn&&C(e).match.nativeDef==="'"+t.charAt(0)||" "===C(e).match.nativeDef&&(C(e+1).match.nativeDef===t.charAt(0)||null===C(e+1).match.fn&&C(e+1).match.nativeDef==="'"+t.charAt(0)))}(m,u)?(_=ee.keypressEvent.call(t,o,!0,!1,i,s.caretPos.begin))&&(m=s.caretPos.begin+1,u=""):_=ee.keypressEvent.call(t,o,!0,!1,i,l+1),_&&(K(a,W(),_.forwardPosition,o,!1),s.caretPos={begin:_.forwardPosition,end:_.forwardPosition})}})),n&&K(t,W(),_?_.forwardPosition:a,o||new e.Event("checkval"),o&&"input"===o.type)}function ae(t){if(t){if(t.inputmask===a)return t.value;t.inputmask&&t.inputmask.refreshValue&&ee.setValueEvent.call(t)}var n=[],i=D().validPositions;for(var r in i)i[r].match&&null!=i[r].match.fn&&n.push(i[r].input);var o=0===n.length?"":(v?n.reverse():n).join("");if(e.isFunction(c.onUnMask)){var s=(v?W().slice().reverse():W()).join("");o=c.onUnMask.call(M,s,o,c)}return o}function ne(i,r,o,s){function d(e){return!v||"number"!=typeof e||c.greedy&&""===c.placeholder||!b||(e=b.inputmask._valueGet().length-e),e}var l;if(r===a)return"selectionStart"in i?(r=i.selectionStart,o=i.selectionEnd):t.getSelection?(l=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==i&&l.commonAncestorContainer!==i||(r=l.startOffset,o=l.endOffset):n.selection&&n.selection.createRange&&(o=(r=0-(l=n.selection.createRange()).duplicate().moveStart("character",-i.inputmask._valueGet().length))+l.text.length),{begin:s?r:d(r),end:s?o:d(o)};if(e.isArray(r)&&(o=v?r[0]:r[1],r=v?r[1]:r[0]),r.begin!==a&&(o=v?r.begin:r.end,r=v?r.end:r.begin),"number"==typeof r){r=s?r:d(r),o="number"==typeof(o=s?o:d(o))?o:r;var u=parseInt(((i.ownerDocument.defaultView||t).getComputedStyle?(i.ownerDocument.defaultView||t).getComputedStyle(i,null):i.currentStyle).fontSize)*o;if(i.scrollLeft=u>i.scrollWidth?u:0,i.inputmask.caretPos={begin:r,end:o},i===n.activeElement){if("selectionStart"in i)i.selectionStart=r,i.selectionEnd=o;else if(t.getSelection){if(l=n.createRange(),i.firstChild===a||null===i.firstChild){var m=n.createTextNode("");i.appendChild(m)}l.setStart(i.firstChild,r<i.inputmask._valueGet().length?r:i.inputmask._valueGet().length),l.setEnd(i.firstChild,o<i.inputmask._valueGet().length?o:i.inputmask._valueGet().length),l.collapse(!0);var _=t.getSelection();_.removeAllRanges(),_.addRange(l)}else i.createTextRange&&((l=i.createTextRange()).collapse(!0),l.moveEnd("character",o),l.moveStart("character",r),l.select());le(i,{begin:r,end:o})}}}function ie(t){var n,i,r=Y(!0,S(),!0,!0),o=r.length,s=S(),d={},l=D().validPositions[s],u=l!==a?l.locator.slice():a;for(n=s+1;n<r.length;n++)u=(i=A(n,u,n-1)).locator.slice(),d[n]=e.extend(!0,{},i);var c=l&&l.alternation!==a?l.locator[l.alternation]:a;for(n=o-1;n>s&&((i=d[n]).match.optionality||i.match.optionalQuantifier&&i.match.newBlockMarker||c&&(c!==d[n].locator[l.alternation]&&null!=i.match.fn||null===i.match.fn&&i.locator[l.alternation]&&N(i.locator[l.alternation].toString().split(","),c.toString().split(","))&&""!==E(n)[0].def))&&r[n]===$(n,i.match);n--)o--;return t?{l:o,def:d[o]?d[o].match:a}:o}function re(e){e.length=0;for(var t,n=Y(!0,0,!0,a,!0);(t=n.shift())!==a;)e.push(t);return e}function oe(t){if(e.isFunction(c.isComplete))return c.isComplete(t,c);if("*"===c.repeat)return a;var n=!1,i=ie(!0),r=q(i.l);if(i.def===a||i.def.newBlockMarker||i.def.optionality||i.def.optionalQuantifier){n=!0;for(var o=0;o<=r;o++){var s=A(o).match;if(null!==s.fn&&D().validPositions[o]===a&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[o]!==$(o,s)){n=!1;break}}}return n}function se(e,t,n,i,r){if((c.numericInput||v)&&(t===l.keyCode.BACKSPACE?t=l.keyCode.DELETE:t===l.keyCode.DELETE&&(t=l.keyCode.BACKSPACE),v)){var o=n.end;n.end=n.begin,n.begin=o}if(t===l.keyCode.BACKSPACE&&n.end-n.begin<1?(n.begin=q(n.begin),D().validPositions[n.begin]!==a&&D().validPositions[n.begin].input===c.groupSeparator&&n.begin--):t===l.keyCode.DELETE&&n.begin===n.end&&(n.end=J(n.end,!0)&&D().validPositions[n.end]&&D().validPositions[n.end].input!==c.radixPoint?n.end+1:U(n.end)+1,D().validPositions[n.begin]!==a&&D().validPositions[n.begin].input===c.groupSeparator&&n.end++),G(n),!0!==i&&!1!==c.keepStatic||null!==c.regex){var s=R(!0);if(s){var d=s.caret!==a?s.caret:s.pos?U(s.pos.begin?s.pos.begin:s.pos):S(-1,!0);(t!==l.keyCode.DELETE||n.begin>d)&&n.begin}}var u=S(n.begin,!0);if(u<n.begin||-1===n.begin)D().p=U(u);else if(!0!==i&&(D().p=n.begin,!0!==r))for(;D().p<u&&D().validPositions[D().p]===a;)D().p++}function de(a){var i=(a.ownerDocument.defaultView||t).getComputedStyle(a,null),r=n.createElement("div");r.style.width=i.width,r.style.textAlign=i.textAlign,g=n.createElement("div"),a.inputmask.colorMask=g,g.className="im-colormask",a.parentNode.insertBefore(g,a),a.parentNode.removeChild(a),g.appendChild(a),g.appendChild(r),a.style.left=r.offsetLeft+"px",e(g).on("mouseleave",(function(e){return ee.mouseleaveEvent.call(a,[e])})),e(g).on("mouseenter",(function(e){return ee.mouseenterEvent.call(a,[e])})),e(g).on("click",(function(e){return ne(a,function(e){var t,r=n.createElement("span");for(var o in i)isNaN(o)&&-1!==o.indexOf("font")&&(r.style[o]=i[o]);r.style.textTransform=i.textTransform,r.style.letterSpacing=i.letterSpacing,r.style.position="absolute",r.style.height="auto",r.style.width="auto",r.style.visibility="hidden",r.style.whiteSpace="nowrap",n.body.appendChild(r);var s,d=a.inputmask._valueGet(),l=0;for(t=0,s=d.length;t<=s;t++){if(r.innerHTML+=d.charAt(t)||"_",r.offsetWidth>=e){var u=e-l,c=r.offsetWidth-e;r.innerHTML=d.charAt(t),t=(u-=r.offsetWidth/3)<c?t-1:t;break}l=r.offsetWidth}return n.body.removeChild(r),t}(e.clientX)),ee.clickEvent.call(a,[e])}))}function le(e,t,i){var r,o,s,d=[],l=!1,u=0;function m(e){if(e===a&&(e=""),l||null!==r.fn&&o.input!==a)if(l&&(null!==r.fn&&o.input!==a||""===r.def)){l=!1;var t=d.length;d[t-1]=d[t-1]+"</span>",d.push(e)}else d.push(e);else l=!0,d.push("<span class='im-static'>"+e)}if(g!==a){var _=W();if(t===a?t=ne(e):t.begin===a&&(t={begin:t,end:t}),!0!==i){var h=S();do{D().validPositions[u]?(o=D().validPositions[u],r=o.match,s=o.locator.slice(),m(_[u])):(o=A(u,s,u-1),r=o.match,s=o.locator.slice(),!1===c.jitMasking||u<h||"number"==typeof c.jitMasking&&isFinite(c.jitMasking)&&c.jitMasking>u?m($(u,r)):l=!1),u++}while((f===a||u<f)&&(null!==r.fn||""!==r.def)||h>u||l);l&&m(),n.activeElement===e&&(d.splice(t.begin,0,t.begin===t.end||t.end>D().maskLength?'<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">':'<mark class="im-caret-select">'),d.splice(t.end+1,0,"</mark>"))}var p=g.getElementsByTagName("div")[0];p.innerHTML=d.join(""),e.inputmask.positionColorMask(e,p)}}if(i!==a)switch(i.action){case"isComplete":return b=i.el,oe(W());case"unmaskedvalue":return b!==a&&i.value===a||(Z=i.value,Z=(e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(M,Z,c)||Z).split(""),te.call(this,a,!1,!1,Z),e.isFunction(c.onBeforeWrite)&&c.onBeforeWrite.call(M,a,W(),0,c)),ae(b);case"mask":!function(t){X.off(t);var i=function(t,i){var r=t.getAttribute("type"),o="INPUT"===t.tagName&&-1!==e.inArray(r,i.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!o)if("INPUT"===t.tagName){var s=n.createElement("input");s.setAttribute("type",r),o="text"===s.type,s=null}else o="partial";return!1!==o?function(t){var r,o;function s(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==S()||!0!==i.nullable?n.activeElement===this&&i.clearMaskOnLostFocus?(v?re(W().slice()).reverse():re(W().slice())).join(""):r.call(this):"":r.call(this)}function d(t){o.call(this,t),this.inputmask&&e(this).trigger("setvalue",[t])}if(!t.inputmask.__valueGet){if(!0!==i.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"==typeof"test".__proto__?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var l=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):a;l&&l.get&&l.set?(r=l.get,o=l.set,Object.defineProperty(t,"value",{get:s,set:d,configurable:!0})):"INPUT"!==t.tagName&&(r=function(){return this.textContent},o=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:s,set:d,configurable:!0}))}else n.__lookupGetter__&&t.__lookupGetter__("value")&&(r=t.__lookupGetter__("value"),o=t.__lookupSetter__("value"),t.__defineGetter__("value",s),t.__defineSetter__("value",d));t.inputmask.__valueGet=r,t.inputmask.__valueSet=o}t.inputmask._valueGet=function(e){return v&&!0!==e?r.call(this.el).split("").reverse().join(""):r.call(this.el)},t.inputmask._valueSet=function(e,t){o.call(this.el,null===e||e===a?"":!0!==t&&v?e.split("").reverse().join(""):e)},r===a&&(r=function(){return this.value},o=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===a||!0!==e.valHooks[t].inputmaskpatch)){var n=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},r=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e);return-1!==S(a,a,e.inputmask.maskset.validPositions)||!0!==i.nullable?t:""}return n(e)},set:function(t,a){var n,i=e(t);return n=r(t,a),t.inputmask&&i.trigger("setvalue",[a]),n},inputmaskpatch:!0}}}(t.type),function(t){X.on(t,"mouseenter",(function(t){var a=e(this);this.inputmask._valueGet()!==W().join("")&&a.trigger("setvalue")}))}(t))}}(t):t.inputmask=a,o}(t,c);if(!1!==i&&(p=e(b=t),y=b.placeholder,-1===(f=b!==a?b.maxLength:a)&&(f=a),!0===c.colorMask&&de(b),o&&("inputMode"in b&&(b.inputmode=c.inputmode,b.setAttribute("inputmode",c.inputmode)),!0===c.disablePredictiveText&&("autocorrect"in b?b.autocorrect=!1:(!0!==c.colorMask&&de(b),b.type="password"))),!0===i&&(b.setAttribute("im-insert",c.insertMode),X.on(b,"submit",ee.submitEvent),X.on(b,"reset",ee.resetEvent),X.on(b,"blur",ee.blurEvent),X.on(b,"focus",ee.focusEvent),!0!==c.colorMask&&(X.on(b,"click",ee.clickEvent),X.on(b,"mouseleave",ee.mouseleaveEvent),X.on(b,"mouseenter",ee.mouseenterEvent)),X.on(b,"paste",ee.pasteEvent),X.on(b,"cut",ee.cutEvent),X.on(b,"complete",c.oncomplete),X.on(b,"incomplete",c.onincomplete),X.on(b,"cleared",c.oncleared),o||!0===c.inputEventOnly?b.removeAttribute("maxLength"):(X.on(b,"keydown",ee.keydownEvent),X.on(b,"keypress",ee.keypressEvent)),X.on(b,"input",ee.inputFallBackEvent),X.on(b,"beforeinput",ee.beforeInputEvent)),X.on(b,"setvalue",ee.setValueEvent),h=F().join(""),""!==b.inputmask._valueGet(!0)||!1===c.clearMaskOnLostFocus||n.activeElement===b)){var r=e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(M,b.inputmask._valueGet(!0),c)||b.inputmask._valueGet(!0);""!==r&&te(b,!0,!1,r.split(""));var s=W().slice();h=s.join(""),!1===oe(s)&&c.clearIncomplete&&T(),c.clearMaskOnLostFocus&&n.activeElement!==b&&(-1===S()?s=[]:re(s)),(!1===c.clearMaskOnLostFocus||c.showMaskOnFocus&&n.activeElement===b||""!==b.inputmask._valueGet(!0))&&K(b,s),n.activeElement===b&&ne(b,U(S()))}}(b);break;case"format":return Z=(e.isFunction(c.onBeforeMask)&&c.onBeforeMask.call(M,i.value,c)||i.value).split(""),te.call(this,a,!0,!1,Z),i.metadata?{value:v?W().slice().reverse().join(""):W().join(""),metadata:_.call(this,{action:"getmetadata"},u,c)}:v?W().slice().reverse().join(""):W().join("");case"isValid":i.value?(Z=i.value.split(""),te.call(this,a,!0,!0,Z)):i.value=W().join("");for(var ue=W(),ce=ie(),me=ue.length-1;me>ce&&!J(me);me--);return ue.splice(ce,me+1-ce),oe(ue)&&i.value===W().join("");case"getemptymask":return F().join("");case"remove":return b&&b.inputmask&&(e.data(b,"_inputmask_opts",null),p=e(b),b.inputmask._valueSet(c.autoUnmask?ae(b):b.inputmask._valueGet(!0)),X.off(b),b.inputmask.colorMask&&((g=b.inputmask.colorMask).removeChild(b),g.parentNode.insertBefore(b,g),g.parentNode.removeChild(g)),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(b),"value")&&b.inputmask.__valueGet&&Object.defineProperty(b,"value",{get:b.inputmask.__valueGet,set:b.inputmask.__valueSet,configurable:!0}):n.__lookupGetter__&&b.__lookupGetter__("value")&&b.inputmask.__valueGet&&(b.__defineGetter__("value",b.inputmask.__valueGet),b.__defineSetter__("value",b.inputmask.__valueSet)),b.inputmask=a),b;case"getmetadata":if(e.isArray(u.metadata)){var _e=Y(!0,0,!1).join("");return e.each(u.metadata,(function(e,t){if(t.mask===_e)return _e=t,!1})),_e}return u.metadata}}return l.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,a){return e.isFunction(a.onBeforeMask)?a.onBeforeMask.call(this,t,a):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:a,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,disablePredictiveText:!1,importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(i){var r=this;return"string"==typeof i&&(i=n.getElementById(i)||n.querySelectorAll(i)),i=i.nodeName?[i]:i,e.each(i,(function(n,i){var o=e.extend(!0,{},r.opts);if(function(n,i,r,o){if(!0===i.importDataAttributes){var s,d,l,c,m=n.getAttribute(o),_=function(e,i){null!==(i=i!==a?i:n.getAttribute(o+"-"+e))&&("string"==typeof i&&(0===e.indexOf("on")?i=t[i]:"false"===i?i=!1:"true"===i&&(i=!0)),r[e]=i)};if(m&&""!==m&&(m=m.replace(/'/g,'"'),d=JSON.parse("{"+m+"}")),d)for(c in l=a,d)if("alias"===c.toLowerCase()){l=d[c];break}for(s in _("alias",l),r.alias&&u(r.alias,r,i),i){if(d)for(c in l=a,d)if(c.toLowerCase()===s.toLowerCase()){l=d[c];break}_(s,l)}}return e.extend(!0,i,r),("rtl"===n.dir||i.rightAlign)&&(n.style.textAlign="right"),("rtl"===n.dir||i.numericInput)&&(n.dir="ltr",n.removeAttribute("dir"),i.isRTL=!0),Object.keys(r).length}(i,o,e.extend(!0,{},r.userOptions),r.dataAttribute)){var s=c(o,r.noMasksCache);s!==a&&(i.inputmask!==a&&(i.inputmask.opts.autoUnmask=!0,i.inputmask.remove()),i.inputmask=new l(a,a,!0),i.inputmask.opts=o,i.inputmask.noMasksCache=r.noMasksCache,i.inputmask.userOptions=e.extend(!0,{},r.userOptions),i.inputmask.isRTL=o.isRTL||o.numericInput,i.inputmask.el=i,i.inputmask.maskset=s,e.data(i,"_inputmask_opts",o),_.call(i.inputmask,{action:"mask"}))}})),i&&i[0]&&i[0].inputmask||this},option:function(t,a){return"string"==typeof t?this.opts[t]:"object"==typeof t?(e.extend(this.userOptions,t),this.el&&!0!==a&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),_.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return _.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),_.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),_.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),_.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),_.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||c(this.opts,this.noMasksCache),_.call(this,{action:"format",value:e,metadata:t})},setValue:function(t){this.el&&e(this.el).trigger("setvalue",[t])},analyseMask:function(t,n,i){var r,o,s,d,u,c,m=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,_=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,h=!1,p=new y,f=[],g=[];function y(e,t,a,n){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=a||!1,this.isAlternator=n||!1,this.quantifier={min:1,max:1}}function M(t,r,o){o=o!==a?o:t.matches.length;var s=t.matches[o-1];if(n)0===r.indexOf("[")||h&&/\\d|\\s|\\w]/i.test(r)||"."===r?t.matches.splice(o++,0,{fn:new RegExp(r,i.casing?"i":""),optionality:!1,newBlockMarker:s===a?"master":s.def!==r,casing:null,def:r,placeholder:a,nativeDef:r}):(h&&(r=r[r.length-1]),e.each(r.split(""),(function(e,n){s=t.matches[o-1],t.matches.splice(o++,0,{fn:null,optionality:!1,newBlockMarker:s===a?"master":s.def!==n&&null!==s.fn,casing:null,def:i.staticDefinitionSymbol||n,placeholder:i.staticDefinitionSymbol!==a?n:a,nativeDef:(h?"'":"")+n})}))),h=!1;else{var d=(i.definitions?i.definitions[r]:a)||l.prototype.definitions[r];d&&!h?t.matches.splice(o++,0,{fn:d.validator?"string"==typeof d.validator?new RegExp(d.validator,i.casing?"i":""):new function(){this.test=d.validator}:new RegExp("."),optionality:!1,newBlockMarker:s===a?"master":s.def!==(d.definitionSymbol||r),casing:d.casing,def:d.definitionSymbol||r,placeholder:d.placeholder,nativeDef:r}):(t.matches.splice(o++,0,{fn:null,optionality:!1,newBlockMarker:s===a?"master":s.def!==r&&null!==s.fn,casing:null,def:i.staticDefinitionSymbol||r,placeholder:i.staticDefinitionSymbol!==a?r:a,nativeDef:(h?"'":"")+r}),h=!1)}}function b(){if(f.length>0){if(M(d=f[f.length-1],o),d.isAlternator){u=f.pop();for(var e=0;e<u.matches.length;e++)u.matches[e].isGroup&&(u.matches[e].isGroup=!1);f.length>0?(d=f[f.length-1]).matches.push(u):p.matches.push(u)}}else M(p,o)}function v(e){var t=new y(!0);return t.openGroup=!1,t.matches=e,t}for(n&&(i.optionalmarker[0]=a,i.optionalmarker[1]=a);r=n?_.exec(t):m.exec(t);){if(o=r[0],n)switch(o.charAt(0)){case"?":o="{0,1}";break;case"+":case"*":o="{"+o+"}"}if(h)b();else switch(o.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case i.escapeChar:h=!0,n&&b();break;case i.optionalmarker[1]:case i.groupmarker[1]:if((s=f.pop()).openGroup=!1,s!==a)if(f.length>0){if((d=f[f.length-1]).matches.push(s),d.isAlternator){u=f.pop();for(var k=0;k<u.matches.length;k++)u.matches[k].isGroup=!1,u.matches[k].alternatorGroup=!1;f.length>0?(d=f[f.length-1]).matches.push(u):p.matches.push(u)}}else p.matches.push(s);else b();break;case i.optionalmarker[0]:f.push(new y(!1,!0));break;case i.groupmarker[0]:f.push(new y(!0));break;case i.quantifiermarker[0]:var L=new y(!1,!1,!0),x=(o=o.replace(/[{}]/g,"")).split("|"),w=x[0].split(","),Y=isNaN(w[0])?w[0]:parseInt(w[0]),D=1===w.length?Y:isNaN(w[1])?w[1]:parseInt(w[1]);"*"!==Y&&"+"!==Y||(Y="*"===D?0:1),L.quantifier={min:Y,max:D,jit:x[1]};var T=f.length>0?f[f.length-1].matches:p.matches;if((r=T.pop()).isAlternator){T.push(r),T=r.matches;var S=new y(!0),H=T.pop();T.push(S),T=S.matches,r=H}r.isGroup||(r=v([r])),T.push(r),T.push(L);break;case i.alternatormarker:var j=function(e){var t=e.pop();return t.isQuantifier&&(t=v([e.pop(),t])),t};if(f.length>0){var P=(d=f[f.length-1]).matches[d.matches.length-1];c=d.openGroup&&(P.matches===a||!1===P.isGroup&&!1===P.isAlternator)?f.pop():j(d.matches)}else c=j(p.matches);if(c.isAlternator)f.push(c);else if(c.alternatorGroup?(u=f.pop(),c.alternatorGroup=!1):u=new y(!1,!1,!1,!0),u.matches.push(c),f.push(u),c.openGroup){c.openGroup=!1;var A=new y(!0);A.alternatorGroup=!0,f.push(A)}break;default:b()}}for(;f.length>0;)s=f.pop(),p.matches.push(s);return p.matches.length>0&&(function t(r){r&&r.matches&&e.each(r.matches,(function(e,o){var s=r.matches[e+1];(s===a||s.matches===a||!1===s.isQuantifier)&&o&&o.isGroup&&(o.isGroup=!1,n||(M(o,i.groupmarker[0],0),!0!==o.openGroup&&M(o,i.groupmarker[1]))),t(o)}))}(p),g.push(p)),(i.numericInput||i.isRTL)&&function e(t){for(var n in t.matches=t.matches.reverse(),t.matches)if(t.matches.hasOwnProperty(n)){var r=parseInt(n);if(t.matches[n].isQuantifier&&t.matches[r+1]&&t.matches[r+1].isGroup){var o=t.matches[n];t.matches.splice(n,1),t.matches.splice(r+1,0,o)}t.matches[n].matches!==a?t.matches[n]=e(t.matches[n]):t.matches[n]=((s=t.matches[n])===i.optionalmarker[0]?s=i.optionalmarker[1]:s===i.optionalmarker[1]?s=i.optionalmarker[0]:s===i.groupmarker[0]?s=i.groupmarker[1]:s===i.groupmarker[1]&&(s=i.groupmarker[0]),s)}var s;return t}(g[0]),g},positionColorMask:function(e,t){e.style.left=t.offsetLeft+"px"}},l.extendDefaults=function(t){e.extend(!0,l.prototype.defaults,t)},l.extendDefinitions=function(t){e.extend(!0,l.prototype.definitions,t)},l.extendAliases=function(t){e.extend(!0,l.prototype.aliases,t)},l.format=function(e,t,a){return l(t).format(e,a)},l.unmask=function(e,t){return l(t).unmaskedvalue(e)},l.isValid=function(e,t){return l(t).isValid(e)},l.remove=function(t){"string"==typeof t&&(t=n.getElementById(t)||n.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(e,t){t.inputmask&&t.inputmask.remove()}))},l.setValue=function(t,a){"string"==typeof t&&(t=n.getElementById(t)||n.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(t,n){n.inputmask?n.inputmask.setValue(a):e(n).trigger("setvalue",[a])}))},l.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},l.keyCode={BACKSPACE:8,BACKSPACE_SAFARI:127,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,RIGHT:39,SPACE:32,TAB:9,UP:38,X:88,CONTROL:17},l.dependencyLib=e,l})?n.apply(t,i):n)||(e.exports=r)},function(e,t,a){"use strict";function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}t.a=function e(t){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,"onBurgerButtonClick",(function(e){e.preventDefault(),a.isProfileActive?(a.authList.classList.remove("page-header__auth-list_active"),a.isProfileActive=!1):a.mainMenu.classList.toggle("main-menu_active"),a.burgerButton.classList.toggle("main-menu__burger-icon_active"),a.profileButton&&a.profileButton.classList.toggle("page-header__auth-profile_hiden")})),n(this,"onProfileButtonClick",(function(e){e.preventDefault(),a.isProfileActive||(a.authList.classList.add("page-header__auth-list_active"),a.burgerButton.classList.add("main-menu__burger-icon_active"),a.isProfileActive=!0,a.profileButton.classList.add("page-header__auth-profile_hiden"))})),n(this,"onToggleSubMenu",(function(e){e.preventDefault()})),t.mainMenu?(this.mainMenu=t.mainMenu,this.mainMenuList=this.mainMenu.querySelectorAll(".main-menu__item"),this.mainMenuList.forEach((function(e){e.classList.contains("main-menu__item_sub-menu")&&(e.addEventListener("mouseover",(function(){e.querySelector(".main-menu__sub-menu").classList.add("main-menu__sub-menu_opened")})),e.addEventListener("mouseleave",(function(){e.querySelector(".main-menu__sub-menu").classList.remove("main-menu__sub-menu_opened")})))}))):console.error("Expected burgerButton(node) inside constructor object but not received"),t.burgerButton?(this.burgerButton=t.burgerButton,this.burgerButton.addEventListener("click",this.onBurgerButtonClick)):console.error("Expected burgerButton(node) inside constructor object but not received"),t.profileButton?(this.profileButton=t.profileButton,this.profileButton.addEventListener("click",this.onProfileButtonClick)):this.profileButton=void 0,this.isProfileActive=!1,this.authList=t.authList}},function(e,t,a){var n=a(2),i=a(7);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};n(i,r);e.exports=i.locals||{}},function(e,t,a){var n=a(1),i=a(3),r=a(8),o=a(9),s=a(10),d=a(11),l=a(12),u=a(13),c=a(14),m=a(15),_=a(16),h=a(17),p=a(18),f=a(19);t=n(!1);var g=i(r),y=i(o),M=i(s,{hash:"#webfont"}),b=i(d),v=i(l),k=i(u,{hash:"#webfont"}),L=i(c),x=i(m),w=i(_,{hash:"#webfont"}),Y=i(h),D=i(p),T=i(f,{hash:"#webfont"});t.push([e.i,"/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{margin:.67em 0;font-size:2em}hr{overflow:visible;-webkit-box-sizing:content-box;box-sizing:content-box;height:0}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;border-bottom:none}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:100%;line-height:1.15}button,input{overflow:visible}button,select{text-transform:none}button,[type='button'],[type='reset'],[type='submit']{-webkit-appearance:button}button::-moz-focus-inner,[type='button']::-moz-focus-inner,[type='reset']::-moz-focus-inner,[type='submit']::-moz-focus-inner{padding:0;border-style:none}button:-moz-focusring,[type='button']:-moz-focusring,[type='reset']:-moz-focusring,[type='submit']:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{padding:0;display:table;-webkit-box-sizing:border-box;box-sizing:border-box;max-width:100%;white-space:normal;color:inherit}progress{vertical-align:baseline}textarea{overflow:auto}[type='checkbox'],[type='radio']{padding:0;-webkit-box-sizing:border-box;box-sizing:border-box}[type='number']::-webkit-inner-spin-button,[type='number']::-webkit-outer-spin-button{height:auto}[type='search']{-webkit-appearance:textfield;outline-offset:-2px}[type='search']::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}@font-face{font-family:'Montserrat';font-weight:normal;font-style:normal;src:url("+g+");src:url("+g+') format("woff"),url('+y+') format("truetype"),url('+M+") format(\"svg\")}@font-face{font-family:'Montserrat';font-weight:bold;font-style:normal;src:url("+b+");src:url("+b+') format("woff"),url('+v+') format("truetype"),url('+k+") format(\"svg\")}@font-face{font-family:'Quicksand';font-weight:normal;font-style:normal;src:url("+L+");src:url("+L+') format("woff"),url('+x+') format("truetype"),url('+w+") format(\"svg\")}@font-face{font-family:'Quicksand';font-weight:bold;font-style:normal;src:url("+Y+");src:url("+Y+') format("woff"),url('+D+') format("truetype"),url('+T+') format("svg")}html,body{height:100%}body{font-family:Quicksand, Montserrat, Arial, sans-serif;font-size:14px;color:#1f2041}.container{position:relative;margin:0 auto;padding:0 10px;width:80.5556%;min-width:320px;max-width:1920px}@media (max-width: 1300px){.container{width:90.5556%}}@media (max-width: 425px){.container{margin:0;padding:0;width:auto}}.wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;min-height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.content{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}\n',""]),e.exports=t},function(e,t,a){e.exports=a.p+"fonts/Montserrat-Regular-ec92d31.woff"},function(e,t,a){e.exports=a.p+"fonts/Montserrat-Regular-a700954.ttf"},function(e,t,a){e.exports=a.p+"fonts/Montserrat-Regular.font-cb83309.svg"},function(e,t,a){e.exports=a.p+"fonts/Montserrat-Bold-3ac1a53.woff"},function(e,t,a){e.exports=a.p+"fonts/Montserrat-Bold-9e3117a.ttf"},function(e,t,a){e.exports=a.p+"fonts/Montserrat-Bold.font-597b76b.svg"},function(e,t,a){e.exports=a.p+"fonts/Quicksand-Regular-b6db223.woff"},function(e,t,a){e.exports=a.p+"fonts/Quicksand-Regular-7730093.ttf"},function(e,t,a){e.exports=a.p+"fonts/Quicksand-Regular.font-0e54430.svg"},function(e,t,a){e.exports=a.p+"fonts/Quicksand-Bold-d98e672.woff"},function(e,t,a){e.exports=a.p+"fonts/Quicksand-Bold-70baeca.ttf"},function(e,t,a){e.exports=a.p+"fonts/Quicksand-Bold.font-3c9e7be.svg"},function(e,t,a){e.exports=a.p+"img/logo-9dfeaae.png"},function(e,t,a){a(27),a(29),a(30),e.exports=a(4)},function(e,t,a){e.exports=a.p+"img/arrow-032b0d5.svg"},function(e,t,a){e.exports=a.p+"img/expand-more-d04c9af.svg"},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;
/*!
* global/window.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},function(e,t,a){"use strict";function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t,a){var n=document.createElement(e);return t&&n.classList.add(t),a&&(n.textContent=a),n}function r(e,t){return t[e%100>4&&e%100<20?2:[2,0,1,1,1,2][e%10<5?e%10:5]]}t.a=function e(t){var a=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,"hasHaveStartValue",(function(e){return e.some((function(e){if(e.startValue)return e.startValue>0}))})),n(this,"getModifiedCountElements",(function(){return a.countElements.map((function(e,t){var a,n,i=e.minValue?e.minValue:0,r=e.startValue?e.startValue:i;return e.id="".concat(t).concat((a=1,n=1e4,Math.floor(Math.random()*(+n-+a))+ +a)),e.counter=r,e.minValue=i,e}))})),n(this,"show",(function(){a.dropDownParent.classList.contains("drop-down_opened")||(a.dropDownParent.classList.add("drop-down_opened"),a.input.classList.add("input-group__input_active"),window.addEventListener("mouseup",a.onClickHide),window.addEventListener("keyup",a.onPressHide))})),n(this,"hide",(function(){a.isPinShow||a.dropDownParent.classList.contains("drop-down_opened")&&(a.dropDownParent.classList.remove("drop-down_opened"),a.input.classList.remove("input-group__input_active"),window.removeEventListener("mouseup",a.onClickHide),window.removeEventListener("keyup",a.onPressHide))})),n(this,"hideClearBtn",(function(){a.clearBtn.classList.add("drop-down__button_hiden")})),n(this,"onClickHide",(function(e){var t=e.target===a.input,n=a.dropDownParent.contains(e.target);!t&&!n&&a.hide()})),n(this,"onPressHide",(function(e){27===e.keyCode&&a.hide()})),n(this,"onClickClear",(function(e){e.preventDefault(),a.discardCounter(),a.discardViewCounter(),a.hideClearBtn(),a.input.textContent=a.placeholder})),n(this,"discardCounter",(function(){a.countElements.forEach((function(e){a.dropDownParent.querySelector("#view-".concat(e.id)).textContent=e.minValue,e.counter=e.minValue})),a.dropDownParent.querySelectorAll(".drop-down__counter-btn_minus").forEach((function(e){e.classList.add("drop-down__counter-btn_disabled"),e.setAttribute("disabled","true")}))})),n(this,"discardViewCounter",(function(){Object.keys(a.countGroupView).forEach((function(e){a.countGroupView[e].counter=0}))})),n(this,"renderViewCount",(function(){var e="";Object.keys(a.countGroupView).forEach((function(t,n){if(a.countGroupView[t].counter>0){var i=a.countGroupView[t],o=i.counter,s=r(o,i.views);n>0&&e.length>1&&(e+=", "),e+="".concat(o," ").concat(s)}})),e.length>=20&&Object.keys(a.countGroupView).length>2&&(e=e.slice(0,20)+"..."),a.input.textContent=e})),n(this,"renderStartCount",(function(e){var t=e.countElements,n="";t.forEach((function(t,a){if(t.startValue>0){var i=e.countGroupView[t.countGroupName],o=i.counter,s=r(o,i.views);a>0&&n.length>1&&(n+=", "),n+="".concat(o," ").concat(s)}})),n.length>=20&&t.length>2&&(n=n.slice(0,20)+"...");var i=n.split(",");i.length>1&&i[0].trim()===i[1].trim()&&(n=i[0]),a.input.textContent=n})),n(this,"getCountItem",(function(e){var t=i("li","drop-down__count-item"),n=i("p","drop-down__count-item-name",e.name),r=i("div","drop-down__counter-menu"),o=i("button","drop-down__counter-btn");o.classList.add("drop-down__counter-btn_minus"),e.startValue?e.startValue===e.minValue&&(o.classList.add("drop-down__counter-btn_disabled"),o.setAttribute("disabled","true")):(o.classList.add("drop-down__counter-btn_disabled"),o.setAttribute("disabled","true")),o.type="button";var s=i("p","drop-down__select-view");s.textContent=e.counter,s.id="view-".concat(e.id);var d=i("button","drop-down__counter-btn");return d.classList.add("drop-down__counter-btn_plus"),d.type="button",d.addEventListener("click",(function(){var t=a.countGroupView[e.countGroupName];e.counter++,t.counter++,s.textContent=e.counter,a.renderViewCount(),o.classList.contains("drop-down__counter-btn_disabled")&&(o.classList.remove("drop-down__counter-btn_disabled"),o.removeAttribute("disabled")),a.clearBtn.classList.contains("drop-down__button_hiden")&&a.clearBtn.classList.remove("drop-down__button_hiden")})),o.addEventListener("click",(function(){var t=a.countGroupView[e.countGroupName];(e.counter--,t.counter--,s.textContent=e.counter,e.counter-1<e.minValue&&(o.classList.add("drop-down__counter-btn_disabled"),o.setAttribute("disabled","true")),a.renderViewCount(),0===t.counter)&&(Object.keys(a.countGroupView).every((function(e){return 0===a.countGroupView[e].counter}))&&(a.input.textContent=a.placeholder,a.hideClearBtn()))})),r.appendChild(o),r.appendChild(s),r.appendChild(d),t.appendChild(n),t.appendChild(r),t})),n(this,"init",(function(){var e=a.getModifiedCountElements();a.countElements=e;var t=i("div","drop-down__wrap"),n=i("ul","drop-down__count-list"),r=i("div","drop-down__control"),o=i("button","drop-down__button","Очистить");a.clearBtn=o,o.type="button",o.addEventListener("click",a.onClickClear);var s=i("button","drop-down__button","Применить");s.type="button",s.classList.add("drop-down__button_accentuating"),s.addEventListener("click",a.hide);var d=document.createDocumentFragment();a.countElements.forEach((function(e){var t=a.getCountItem(e);d.appendChild(t)})),n.appendChild(d),a.isHideControl||(r.appendChild(o),r.appendChild(s)),t.appendChild(n),a.isHideControl||t.appendChild(r),a.dropDownParent.appendChild(t),a.container.appendChild(a.dropDownParent),a.countElements.every((function(e){return 0===e.counter}))&&a.hideClearBtn()})),t.container){this.container=t.container;var o=i("section","drop-down");this.dropDownParent=o}else console.error("Expected container(node) inside constructor object but not received");if(t.input){var s=t.placeholder?t.placeholder:"Выберите элимент";this.placeholder=s,this.input=t.input,this.hasHaveStartValue(t.countElements)?this.renderStartCount(t):this.input.textContent=s,t.isPinShow?this.show():this.input.addEventListener("click",this.show)}else console.error("Expected input(node) inside constructor object but not received");t.countElements?(this.countElements=t.countElements,this.inputViews=[]):console.error("Expected countElements(Array) inside constructor object but not received"),t.countGroupView?this.countGroupView=t.countGroupView:console.error("Expected countGroupView(Array) inside constructor object but not received"),t.isHideControl&&(this.isHideControl=t.isHideControl),t.isPinShow&&(this.isPinShow=t.isPinShow)}},function(e,t,a){e.exports=a.p+"img/user-e53525e.svg"},function(e,t,a){var n,i,r;
/*!
* inputmask.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/i=[a(4)],void 0===(r="function"==typeof(n=function(e){return e.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}}),e.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,a,n,i){return a-1>-1&&"."!==t.buffer[a-1]?(e=t.buffer[a-1]+e,e=a-2>-1&&"."!==t.buffer[a-2]?t.buffer[a-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)}}},onUnMask:function(e,t,a){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,a){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),e})?n.apply(t,i):n)||(e.exports=r)},function(e,t,a){var n,i,r;
/*!
* dependencyLibs/inputmask.dependencyLib.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/i=[a(24)],void 0===(r="function"==typeof(n=function(e){var t=e.document;function a(e){return null!=e&&e===e.window}function n(e){return e instanceof Element}function i(a){return a instanceof i?a:this instanceof i?void(null!=a&&a!==e&&(this[0]=a.nodeName?a:void 0!==a[0]&&a[0].nodeName?a[0]:t.querySelector(a),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new i(a)}return i.prototype={on:function(e,t){if(n(this[0]))for(var a=this[0].eventRegistry,i=this[0],r=function(e,n){i.addEventListener?i.addEventListener(e,t,!1):i.attachEvent&&i.attachEvent("on"+e,t),a[e]=a[e]||{},a[e][n]=a[e][n]||[],a[e][n].push(t)},o=e.split(" "),s=0;s<o.length;s++){var d=o[s].split(".");r(d[0],d[1]||"global")}return this},off:function(e,t){if(n(this[0]))for(var a=this[0].eventRegistry,i=this[0],r=function(e,t,n){if(e in a==1)if(i.removeEventListener?i.removeEventListener(e,n,!1):i.detachEvent&&i.detachEvent("on"+e,n),"global"===t)for(var r in a[e])a[e][r].splice(a[e][r].indexOf(n),1);else a[e][t].splice(a[e][t].indexOf(n),1)},o=function(e,n){var i,r,o=[];if(e.length>0)if(void 0===t)for(i=0,r=a[e][n].length;i<r;i++)o.push({ev:e,namespace:n&&n.length>0?n:"global",handler:a[e][n][i]});else o.push({ev:e,namespace:n&&n.length>0?n:"global",handler:t});else if(n.length>0)for(var s in a)for(var d in a[s])if(d===n)if(void 0===t)for(i=0,r=a[s][d].length;i<r;i++)o.push({ev:s,namespace:d,handler:a[s][d][i]});else o.push({ev:s,namespace:d,handler:t});return o},s=e.split(" "),d=0;d<s.length;d++)for(var l=s[d].split("."),u=o(l[0],l[1]),c=0,m=u.length;c<m;c++)r(u[c].ev,u[c].namespace,u[c].handler);return this},trigger:function(e){if(n(this[0]))for(var a=this[0].eventRegistry,r=this[0],o="string"==typeof e?e.split(" "):[e.type],s=0;s<o.length;s++){var d=o[s].split("."),l=d[0],u=d[1]||"global";if(void 0!==t&&"global"===u){var c,m,_={bubbles:!0,cancelable:!0,detail:arguments[1]};if(t.createEvent){try{c=new CustomEvent(l,_)}catch(e){(c=t.createEvent("CustomEvent")).initCustomEvent(l,_.bubbles,_.cancelable,_.detail)}e.type&&i.extend(c,e),r.dispatchEvent(c)}else(c=t.createEventObject()).eventType=l,c.detail=arguments[1],e.type&&i.extend(c,e),r.fireEvent("on"+c.eventType,c)}else if(void 0!==a[l])if(arguments[0]=arguments[0].type?arguments[0]:i.Event(arguments[0]),"global"===u)for(var h in a[l])for(m=0;m<a[l][h].length;m++)a[l][h][m].apply(r,arguments);else for(m=0;m<a[l][u].length;m++)a[l][u][m].apply(r,arguments)}return this}},i.isFunction=function(e){return"function"==typeof e},i.noop=function(){},i.isArray=Array.isArray,i.inArray=function(e,t,a){return null==t?-1:function(e,t){for(var a=0,n=e.length;a<n;a++)if(e[a]===t)return a;return-1}(t,e)},i.valHooks=void 0,i.isPlainObject=function(e){return!("object"!=typeof e||e.nodeType||a(e)||e.constructor&&!Object.hasOwnProperty.call(e.constructor.prototype,"isPrototypeOf"))},i.extend=function(){var e,t,a,n,r,o,s=arguments[0]||{},d=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[d]||{},d++),"object"==typeof s||i.isFunction(s)||(s={}),d===l&&(s=this,d--);d<l;d++)if(null!=(e=arguments[d]))for(t in e)a=s[t],s!==(n=e[t])&&(u&&n&&(i.isPlainObject(n)||(r=i.isArray(n)))?(r?(r=!1,o=a&&i.isArray(a)?a:[]):o=a&&i.isPlainObject(a)?a:{},s[t]=i.extend(u,o,n)):void 0!==n&&(s[t]=n));return s},i.each=function(e,t){var n=0;if(function(e){var t="length"in e&&e.length,n=typeof e;return"function"!==n&&!a(e)&&(!(1!==e.nodeType||!t)||("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e))}(e))for(var i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},i.data=function(e,t,a){if(void 0===a)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=a},"function"==typeof e.CustomEvent?i.Event=e.CustomEvent:(i.Event=function(e,a){a=a||{bubbles:!1,cancelable:!1,detail:void 0};var n=t.createEvent("CustomEvent");return n.initCustomEvent(e,a.bubbles,a.cancelable,a.detail),n},i.Event.prototype=e.Event.prototype),i})?n.apply(t,i):n)||(e.exports=r)},function(e,t,a){var n,i,r;
/*!
* inputmask.date.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/i=[a(4)],void 0===(r="function"==typeof(n=function(e){var t=e.dependencyLib,a={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return o(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return o(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return o(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return o(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return o(Date.prototype.getHours.call(this),2)}],hhh:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return o(Date.prototype.getHours.call(this),2)}],HHH:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return o(Date.prototype.getMinutes.call(this),2)}],ss:["[0-5][0-9]",Date.prototype.setSeconds,"seconds",function(){return o(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return o(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return o(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},n={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function i(e){if(!e.tokenizer){var t=[];for(var n in a)-1===t.indexOf(n[0])&&t.push(n[0]);e.tokenizer="("+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function r(t,n,r,o){for(var s,d="";s=i(r).exec(t);)if(void 0===n)if(a[s[0]])d+="("+a[s[0]][0]+")";else switch(s[0]){case"[":d+="(";break;case"]":d+=")?";break;default:d+=e.escapeRegex(s[0])}else a[s[0]]?!0!==o&&a[s[0]][3]?d+=a[s[0]][3].call(n.date):a[s[0]][2]?d+=n["raw"+a[s[0]][2]]:d+=s[0]:d+=s[0];return d}function o(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function s(e,t,n){var r,o,s,d={date:new Date(1,0,1)},l=e;function u(e){var t=e.replace(/[^0-9]/g,"0");if(t!=e){var a=e.replace(/[^0-9]/g,""),i=(n.min&&n.min[r]||e).toString(),o=(n.max&&n.max[r]||e).toString();t=a+(a<i.slice(0,a.length)?i.slice(a.length):a>o.slice(0,a.length)?o.slice(a.length):t.toString().slice(a.length))}return t}function c(e,t,a){e[r]=u(t),e["raw"+r]=t,void 0!==s&&s.call(e.date,"month"==r?parseInt(e[r])-1:e[r])}if("string"==typeof l){for(;o=i(n).exec(t);){var m=l.slice(0,o[0].length);a.hasOwnProperty(o[0])&&(a[o[0]][0],r=a[o[0]][2],s=a[o[0]][1],c(d,m)),l=l.slice(m.length)}return d}if(l&&"object"==typeof l&&l.hasOwnProperty("date"))return l}return e.extendAliases({datetime:{mask:function(e){return a.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=n[e.inputFormat]||e.inputFormat,e.displayFormat=n[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=n[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[\[\]]/,""),e.regex=r(e.inputFormat,void 0,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},postValidation:function(e,t,a,n){n.min=s(n.min,n.inputFormat,n),n.max=s(n.max,n.inputFormat,n);var i=a,o=s(e.join(""),n.inputFormat,n);return i&&o.date.getTime()==o.date.getTime()&&(i=(i=function(e,t){return(!isFinite(e.rawday)||"29"==e.day&&!isFinite(e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)&&t}(o,i))&&function(e,t){var a=!0;if(t.min){if(e.rawyear){var n=e.rawyear.replace(/[^0-9]/g,""),i=t.min.year.substr(0,n.length);a=i<=n}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(a=t.min.date.getTime()<=e.date.getTime())}return a&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(a=t.max.date.getTime()>=e.date.getTime()),a}(o,n)),t&&i&&a.pos!==t?{buffer:r(n.inputFormat,o,n),refreshFromBuffer:{start:t,end:a.pos}}:i},onKeyDown:function(a,n,r,s){if(a.ctrlKey&&a.keyCode===e.keyCode.RIGHT){for(var d,l=new Date,u="";d=i(s).exec(s.inputFormat);)"d"===d[0].charAt(0)?u+=o(l.getDate(),d[0].length):"m"===d[0].charAt(0)?u+=o(l.getMonth()+1,d[0].length):"yyyy"===d[0]?u+=l.getFullYear().toString():"y"===d[0].charAt(0)&&(u+=o(l.getYear(),d[0].length));this.inputmask._valueSet(u),t(this).trigger("setvalue")}},onUnMask:function(e,t,a){return r(a.outputFormat,s(e,a.inputFormat,a),a,!0)},casing:function(e,t,a,n){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},insertMode:!1,shiftPositions:!1}}),e})?n.apply(t,i):n)||(e.exports=r)},function(e,t,a){var n,i,r;
/*!
* inputmask.numeric.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/i=[a(4)],void 0===(r="function"==typeof(n=function(e){var t=e.dependencyLib;function a(t,a){for(var n="",i=0;i<t.length;i++)e.prototype.definitions[t.charAt(i)]||a.definitions[t.charAt(i)]||a.optionalmarker.start===t.charAt(i)||a.optionalmarker.end===t.charAt(i)||a.quantifiermarker.start===t.charAt(i)||a.quantifiermarker.end===t.charAt(i)||a.groupmarker.start===t.charAt(i)||a.groupmarker.end===t.charAt(i)||a.alternatormarker===t.charAt(i)?n+="\\"+t.charAt(i):n+=t.charAt(i);return n}return e.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),n=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===n?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var i="[+]";if(i+=a(e.prefix,e),!0===e.integerOptional?i+="~{1,"+e.integerDigits+"}":i+="~{"+e.integerDigits+"}",void 0!==e.digits){var r=e.decimalProtect?":":e.radixPoint,o=e.digits.toString().split(",");isFinite(o[0])&&o[1]&&isFinite(o[1])?i+=r+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?i+="["+r+";{1,"+e.digits+"}]":i+=r+";{"+e.digits+"}")}return i+=a(e.suffix,e),i+="[-]",e.greedy=!1,i},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputType:"text",inputmode:"numeric",preValidation:function(e,a,n,i,r,o){if("-"===n||n===r.negationSymbol.front)return!0===r.allowMinus&&(r.isNegative=void 0===r.isNegative||!r.isNegative,""===e.join("")||{caret:o.validPositions[a]?a:void 0,dopost:!0});if(!1===i&&n===r.radixPoint&&void 0!==r.digits&&(isNaN(r.digits)||parseInt(r.digits)>0)){var s=t.inArray(r.radixPoint,e);if(-1!==s&&void 0!==o.validPositions[s])return!0===r.numericInput?a===s:{caret:s+1}}return!0},postValidation:function(a,n,i,r){var o=r.suffix.split(""),s=r.prefix.split("");if(void 0===i.pos&&void 0!==i.caret&&!0!==i.dopost)return i;var d=void 0!==i.caret?i.caret:i.pos,l=a.slice();r.numericInput&&(d=l.length-d-1,l=l.reverse());var u=l[d];if(u===r.groupSeparator&&(u=l[d+=1]),d===l.length-r.suffix.length-1&&u===r.radixPoint)return i;void 0!==u&&u!==r.radixPoint&&u!==r.negationSymbol.front&&u!==r.negationSymbol.back&&(l[d]="?",r.prefix.length>0&&d>=(!1===r.isNegative?1:0)&&d<r.prefix.length-1+(!1===r.isNegative?1:0)?s[d-(!1===r.isNegative?1:0)]="?":r.suffix.length>0&&d>=l.length-r.suffix.length-(!1===r.isNegative?1:0)&&(o[d-(l.length-r.suffix.length-(!1===r.isNegative?1:0))]="?")),s=s.join(""),o=o.join("");var c=l.join("").replace(s,"");if(c=(c=(c=(c=c.replace(o,"")).replace(new RegExp(e.escapeRegex(r.groupSeparator),"g"),"")).replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),""),isNaN(r.placeholder)&&(c=c.replace(new RegExp(e.escapeRegex(r.placeholder),"g"),"")),c.length>1&&1!==c.indexOf(r.radixPoint)&&("0"===u&&(c=c.replace(/^\?/g,"")),c=c.replace(/^0/g,"")),c.charAt(0)===r.radixPoint&&""!==r.radixPoint&&!0!==r.numericInput&&(c="0"+c),""!==c){if(c=c.split(""),(!r.digitsOptional||r.enforceDigitsOnBlur&&"blur"===i.event)&&isFinite(r.digits)){var m=t.inArray(r.radixPoint,c),_=t.inArray(r.radixPoint,l);-1===m&&(c.push(r.radixPoint),m=c.length-1);for(var h=1;h<=r.digits;h++)r.digitsOptional&&(!r.enforceDigitsOnBlur||"blur"!==i.event)||void 0!==c[m+h]&&c[m+h]!==r.placeholder.charAt(0)?-1!==_&&void 0!==l[_+h]&&(c[m+h]=c[m+h]||l[_+h]):c[m+h]=i.placeholder||r.placeholder.charAt(0)}if(!0!==r.autoGroup||""===r.groupSeparator||u===r.radixPoint&&void 0===i.pos&&!i.dopost)c=c.join("");else{var p=c[c.length-1]===r.radixPoint&&i.c===r.radixPoint;c=e(function(e,t){var a="";if(a+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var n=e.join("").split(t.radixPoint);n[1]&&(a+=t.radixPoint+"*{"+n[1].match(/^\d*\??\d*/)[0].length+"}")}return a}(c,r),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(c.join("")),p&&(c+=r.radixPoint),c.charAt(0)===r.groupSeparator&&c.substr(1)}}if(r.isNegative&&"blur"===i.event&&(r.isNegative="0"!==c),c=s+c,c+=o,r.isNegative&&(c=r.negationSymbol.front+c,c+=r.negationSymbol.back),c=c.split(""),void 0!==u)if(u!==r.radixPoint&&u!==r.negationSymbol.front&&u!==r.negationSymbol.back)(d=t.inArray("?",c))>-1?c[d]=u:d=i.caret||0;else if(u===r.radixPoint||u===r.negationSymbol.front||u===r.negationSymbol.back){var f=t.inArray(u,c);-1!==f&&(d=f)}r.numericInput&&(d=c.length-d-1,c=c.reverse());var g={caret:void 0!==u&&void 0===i.pos||void 0===d?d:d+(r.numericInput?-1:1),buffer:c,refreshFromBuffer:i.dopost||a.join("")!==c.join("")};return g.refreshFromBuffer?g:i},onBeforeWrite:function(a,n,i,r){if(a)switch(a.type){case"keydown":return r.postValidation(n,i,{caret:i,dopost:!0},r);case"blur":case"checkval":var o;if(function(t){void 0===t.parseMinMaxOptions&&(null!==t.min&&(t.min=t.min.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.min=t.min.replace(t.radixPoint,".")),t.min=isFinite(t.min)?parseFloat(t.min):NaN,isNaN(t.min)&&(t.min=Number.MIN_VALUE)),null!==t.max&&(t.max=t.max.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.max=t.max.replace(t.radixPoint,".")),t.max=isFinite(t.max)?parseFloat(t.max):NaN,isNaN(t.max)&&(t.max=Number.MAX_VALUE)),t.parseMinMaxOptions="done")}(r),null!==r.min||null!==r.max){if(o=r.onUnMask(n.join(""),void 0,t.extend({},r,{unmaskAsNumber:!0})),null!==r.min&&o<r.min)return r.isNegative=r.min<0,r.postValidation(r.min.toString().replace(".",r.radixPoint).split(""),i,{caret:i,dopost:!0,placeholder:"0"},r);if(null!==r.max&&o>r.max)return r.isNegative=r.max<0,r.postValidation(r.max.toString().replace(".",r.radixPoint).split(""),i,{caret:i,dopost:!0,placeholder:"0"},r)}return r.postValidation(n,i,{caret:i,placeholder:"0",event:"blur"},r);case"_checkval":return{caret:i}}},regex:{integerPart:function(t,a){return a?new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?"):new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?\\d+")},integerNPart:function(t){return new RegExp("[\\d"+e.escapeRegex(t.groupSeparator)+e.escapeRegex(t.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(t,a,n,i,r,o){var s;if("k"===t||"m"===t){s={insert:[],c:0};for(var d=0,l="k"===t?2:5;d<l;d++)s.insert.push({pos:n+d,c:0});return s.pos=n+l,s}if(!0===(s=i?new RegExp("[0-9"+e.escapeRegex(r.groupSeparator)+"]").test(t):new RegExp("[0-9]").test(t))){if(!0!==r.numericInput&&void 0!==a.validPositions[n]&&"~"===a.validPositions[n].match.def&&!o){var u=a.buffer.join(""),c=(u=(u=u.replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),"")).split(r.radixPoint);c.length>1&&(c[1]=c[1].replace(/0/g,r.placeholder.charAt(0))),"0"===c[0]&&(c[0]=c[0].replace(/0/g,r.placeholder.charAt(0))),u=c[0]+r.radixPoint+c[1]||"";var m=a._buffer.join("");for(u===r.radixPoint&&(u=m);null===u.match(e.escapeRegex(m)+"$");)m=m.slice(1);s=void 0===(u=(u=u.replace(m,"")).split(""))[n]?{pos:n,remove:n}:{pos:n}}}else i||t!==r.radixPoint||void 0!==a.validPositions[n-1]||(s={insert:{pos:n,c:0},pos:n+1});return s},cardinality:1},"+":{validator:function(e,t,a,n,i){return i.allowMinus&&("-"===e||e===i.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,a,n,i){return i.allowMinus&&e===i.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(t,a,n,i,r){var o="["+e.escapeRegex(r.radixPoint)+"]",s=new RegExp(o).test(t);return s&&a.validPositions[n]&&a.validPositions[n].match.placeholder===r.radixPoint&&(s={caret:n+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(t,a,n){if(""===a&&!0===n.nullable)return a;var i=t.replace(n.prefix,"");return i=(i=i.replace(n.suffix,"")).replace(new RegExp(e.escapeRegex(n.groupSeparator),"g"),""),""!==n.placeholder.charAt(0)&&(i=i.replace(new RegExp(n.placeholder.charAt(0),"g"),"0")),n.unmaskAsNumber?(""!==n.radixPoint&&-1!==i.indexOf(n.radixPoint)&&(i=i.replace(e.escapeRegex.call(this,n.radixPoint),".")),i=(i=i.replace(new RegExp("^"+e.escapeRegex(n.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(n.negationSymbol.back)+"$"),""),Number(i)):i},isComplete:function(t,a){var n=(a.numericInput?t.slice().reverse():t).join("");return n=(n=(n=(n=(n=n.replace(new RegExp("^"+e.escapeRegex(a.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(a.negationSymbol.back)+"$"),"")).replace(a.prefix,"")).replace(a.suffix,"")).replace(new RegExp(e.escapeRegex(a.groupSeparator)+"([0-9]{3})","g"),"$1"),","===a.radixPoint&&(n=n.replace(e.escapeRegex(a.radixPoint),".")),isFinite(n)},onBeforeMask:function(a,n){n.isNegative=void 0;var i=n.radixPoint||",";"number"!=typeof a&&"number"!==n.inputType||""===i||(a=a.toString().replace(".",i));var r=a.split(i),o=r[0].replace(/[^\-0-9]/g,""),s=r.length>1?r[1].replace(/[^0-9]/g,""):"";a=o+(""!==s?i+s:s);var d=0;if(""!==i&&(d=s.length,""!==s)){var l=Math.pow(10,d||1);isFinite(n.digits)&&(d=parseInt(n.digits),l=Math.pow(10,d)),a=a.replace(e.escapeRegex(i),"."),isFinite(a)&&(a=Math.round(parseFloat(a)*l)/l),a=a.toString().replace(".",i)}return 0===n.digits&&-1!==a.indexOf(e.escapeRegex(i))&&(a=a.substring(0,a.indexOf(e.escapeRegex(i)))),function(e,a,n){if(a>0){var i=t.inArray(n.radixPoint,e);-1===i&&(e.push(n.radixPoint),i=e.length-1);for(var r=1;r<=a;r++)e[i+r]=e[i+r]||"0"}return e}(a.toString().split(""),d,n).join("")},onKeyDown:function(a,n,i,r){var o=t(this);if(a.ctrlKey)switch(a.keyCode){case e.keyCode.UP:o.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(r.step)),o.trigger("setvalue");break;case e.keyCode.DOWN:o.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(r.step)),o.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),e})?n.apply(t,i):n)||(e.exports=r)},function(e,t,a){"use strict";var n=a(21),i=a.n(n),r=a(32),o=a.n(r);function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var l={0:"Январь",1:"Февраль",2:"Март",3:"Апрель",4:"Май",5:"Июнь",6:"Июль",7:"Август",8:"Сентябрь",9:"Октябрь",10:"Ноябрь",11:"Декабрь"},u={0:"янв",1:"фев",2:"мар",3:"апр",4:"мая",5:"июн",6:"июл",7:"авг",8:"сен",9:"окт",10:"ноя",11:"дек"};function c(e,t,a){var n=document.createElement(e);return t&&n.classList.add(t),a&&(n.textContent=a),n}function m(e){return e<10?"0".concat(e):e}t.a=function e(){var t=this,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s(this,e),d(this,"hasCurrentMonth",(function(e){return e.getMonth()===t.currentDate.getMonth()})),d(this,"compaireDate",(function(e,t){var a=e.getDate(),n=e.getMonth(),i=e.getFullYear(),r=t.getDate(),o=t.getMonth(),s=t.getFullYear();return i>s?1:i<s?-1:n>o?1:n<o?-1:a>r?1:a<r?-1:0})),d(this,"hasDataFull",(function(e){return e.split(".").every((function(e){return o()(e)}))})),d(this,"showCalendar",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.contains("date-picker_opened")||e.classList.add("date-picker_opened"),document.body.addEventListener("mouseup",t.onClickShowCalendar),document.addEventListener("keyup",t.onEscUnshowCalendar)})),d(this,"unshowCalendar",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.contains("date-picker_opened")&&e.classList.remove("date-picker_opened"),document.body.removeEventListener("mouseup",t.onClickShowCalendar),document.removeEventListener("keyup",t.onEscUnshowCalendar)})),d(this,"showArrivalMonthCalendar",(function(){var e=t.arrivalInput.value,a=t.getConverteDateByUserInput(e),n=t.compaireDate(a,new Date)>=0;t.showCalendar(),t.onInputDateArrival(),t.arrivalDate&&n&&t.updateCurrentDate(t.arrivalDate)})),d(this,"showDepartureMonthCalendar",(function(){t.showCalendar(),t.onInputDateDeparture(),t.departureDate&&t.updateCurrentDate(t.departureDate)})),d(this,"showErrorAnimation",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.add("date-picker_erroneous"),setTimeout((function(){e.classList.remove("date-picker_erroneous")}),700)})),d(this,"paintingSelectCell",(function(){var e=t.parentNode.querySelectorAll("td");if(t.arrivalDate&&t.departureDate){var a=t.getAriaDateByDate(t.arrivalDate),n=t.getAriaDateByDate(t.departureDate),i=a===n;e.forEach((function(e){var r=a===e.getAttribute("aria-date"),o=n===e.getAttribute("aria-date"),s=new Date(e.getAttribute("aria-date"));o&&!i&&(e.classList.add("date-picker__day_selected-end"),e.classList.add("date-picker__day_selected"));var d=t.compaireDate(s,t.arrivalDate)>0,l=t.compaireDate(s,t.departureDate)<0;d&&l&&e.classList.add("date-picker__day_selected-space"),r&&n&&!i?(e.classList.add("date-picker__day_selected-start"),e.classList.add("date-picker__day_selected")):r&&e.classList.add("date-picker__day_selected")}))}else if(t.arrivalDate){var r=t.getAriaDateByDate(t.arrivalDate);e.forEach((function(e){r===e.getAttribute("aria-date")&&e.classList.add("date-picker__day_selected")}))}})),d(this,"clearSelectCell",(function(){t.parentNode.querySelectorAll("td").forEach((function(e){var t=e.classList.contains("date-picker__day_selected"),a=e.classList.contains("date-picker__day_selected-space"),n=e.classList.contains("date-picker__day_selected-start"),i=e.classList.contains("date-picker__day_selected-end");a&&e.classList.remove("date-picker__day_selected-space"),t&&e.classList.remove("date-picker__day_selected"),n&&e.classList.remove("date-picker__day_selected-start"),i&&e.classList.remove("date-picker__day_selected-end")}))})),d(this,"printReductionDate",(function(e){var a=m(e.getDate()),n=u[e.getMonth()],i="".concat(a," ").concat(n);t.datePickerInput&&(t.isEndSelect?t.datePickerInput.textContent+=" - ".concat(i):t.datePickerInput.textContent=i)})),d(this,"onClickShowCalendar",(function(e){var a=t.parentNode.querySelector(".date-picker"),n=e.target===t.arrivalInput||e.target===t.departureInput,i=a.contains(e.target);!n&&!i&&t.unshowCalendar()})),d(this,"onEscUnshowCalendar",(function(e){27===e.keyCode&&(t.unshowCalendar(),t.arrivalInput&&t.arrivalInput.blur(),t.departureInput&&t.departureInput.blur())})),d(this,"onFocusArrivalInput",(function(){var e=t.arrivalInput.value;if(t.hasDataFull(e)){var a=t.getConverteDateByUserInput(e);t.compaireDate(a,new Date)>=0&&t.showArrivalMonthCalendar()}else t.showCalendar()})),d(this,"onFocusDepartureInput",(function(){var e=t.departureInput.value;t.hasDataFull(e)?t.showDepartureMonthCalendar():t.showCalendar()})),d(this,"onInputDateArrival",(function(){var e=t.arrivalInput.value;if(t.hasDataFull(e)){var a=t.getConverteDateByUserInput(e),n=t.getAriaDateByDate(a),i=t.getCellByAriaDate(n),r=!1;if(t.departureDate&&(r=t.compaireDate(a,t.departureDate)>0),t.compaireDate(a,new Date)<0)t.showErrorAnimation(),i&&(i.classList.add("date-picker__day_with-error"),setTimeout((function(){i.classList.remove("date-picker__day_with-error")}),700)),t.arrivalInput.value="",t.clearSelectCell();else{if(i){var o=!1;if(t.arrivalDate&&(o=a.toDateString()===t.arrivalDate.toDateString()),!o){var s=!1;t.departureDate&&(s=t.compaireDate(a,t.departureDate)<0),s?(t.clearSelectCell(),t.onStartSelectRangeDate(i,a),t.paintingSelectCell()):r?(t.clearSelectCell(),t.onClearSelectRangeDate(),t.departureInput.value=""):(t.isEndSelect||t.isStartSelect)&&(t.clearSelectCell(),t.onClearSelectRangeDate())}}else r&&(t.clearSelectCell(),t.onClearSelectRangeDate(),t.departureInput.value="");t.onStartSelectRangeDate(i,a)}}})),d(this,"onInputDateDeparture",(function(){var e=t.arrivalInput.value,a=t.hasDataFull(e),n=t.departureInput.value,i=t.hasDataFull(n);if(!a&&i)t.showErrorAnimation(),t.arrivalInput.focus();else if(a&&t.onInputDateArrival(),i){var r=t.getConverteDateByUserInput(n),o=t.getAriaDateByDate(r),s=t.getCellByAriaDate(o);if(s)if(t.compaireDate(r,t.arrivalDate)<0)t.showErrorAnimation(),s.classList.add("date-picker__day_with-error"),setTimeout((function(){s.classList.remove("date-picker__day_with-error")}),700),t.departureInput.value="";else t.departureCell===s||(t.isEndSelect&&t.clearSelectCell(),t.onEndSelectRangeDate(s,r),t.paintingSelectCell());else t.compaireDate(r,t.arrivalDate)<0?(t.showErrorAnimation(),t.departureInput.value=""):(t.clearSelectCell(),t.onEndSelectRangeDate(s,r),t.paintingSelectCell())}})),d(this,"onStartSelectRangeDate",(function(e,a){e&&(t.arrivalCell=e,e.classList.add("date-picker__day_selected")),t.isStartSelect=!0,t.isEndSelect=!1,t.arrivalDate=a})),d(this,"onEndSelectRangeDate",(function(e,a){e&&(t.departureCell=e,e.classList.add("date-picker__day_selected")),t.isStartSelect=!1,t.isEndSelect=!0,t.departureDate=a})),d(this,"onClearSelectRangeDate",(function(){t.arrivalDate=null,t.departureDate=null,t.arrivalCell=null,t.departureCell=null,t.isStartSelect=!1,t.isEndSelect=!1})),d(this,"onFullClearCalendar",(function(){t.onClearSelectRangeDate(),t.clearSelectCell(),t.arrivalInput&&(t.arrivalInput.value=""),t.departureInput&&(t.departureInput.value=""),t.datePickerInput&&(t.datePickerInput.textContent=t.inputPlaceholder?t.inputPlaceholder:""),t.updateCurrentDate(new Date)})),d(this,"onSelectDate",(function(e){if(e.preventDefault(),"td"===e.target.tagName.toLowerCase()){t.isEndSelect&&(t.clearSelectCell(),t.onClearSelectRangeDate());var a=e.target,n=new Date(a.getAttribute("aria-date")),i=m(n.getDate()),r=m(n.getMonth()+1),o=n.getFullYear(),s="".concat(i,".").concat(r,".").concat(o),d=a===t.arrivalCell||a===t.departureCell;if(t.compaireDate(n,new Date)<0)t.showErrorAnimation(),a.classList.add("date-picker__day_with-error"),setTimeout((function(){a.classList.remove("date-picker__day_with-error")}),700);else if(t.isStartSelect&&!d){t.compaireDate(n,t.arrivalDate)<0?(t.showErrorAnimation(),a.classList.add("date-picker__day_with-error"),setTimeout((function(){a.classList.remove("date-picker__day_with-error")}),700)):(t.onEndSelectRangeDate(a,n),t.departureInput?t.departureInput.value=s:t.printReductionDate(n),t.paintingSelectCell(),t.updateCurrentDate(n))}else d&&!t.isEndSelect?(t.onEndSelectRangeDate(a,n),t.departureInput?t.departureInput.value=s:t.printReductionDate(n),t.updateCurrentDate(n)):(t.onStartSelectRangeDate(a,n),t.arrivalInput?t.arrivalInput.value=s:t.printReductionDate(n),t.updateCurrentDate(n))}})),d(this,"getAriaDateByDate",(function(e){var t=e.getDate();t>=1&&t<=9&&(t="0".concat(t));var a=e.getMonth()+1;a>=1&&a<=9&&(a="0".concat(a));var n=e.getFullYear();return"".concat(n,"-").concat(a,"-").concat(t)})),d(this,"getConverteDateByUserInput",(function(e){var t=e.split("."),a=t[0],n=t[1],i=t[2];return new Date(i,n-1,a)})),d(this,"getNumberRow",(function(){var e=t.currentDate.getFullYear(),a=t.currentDate.getMonth(),n=new Date(e+1,a+1,0).getDate(),i=new Date(e,a,0).getDay(),r=5;return 6===i&&n>=30&&(r=6),5===i&&31===n&&(r=6),0===i&&28===n&&(r=4),r})),d(this,"getCalendarTableDate",(function(){var e,a,n=document.createDocumentFragment(),i=new Date,r=t.currentDate.getFullYear(),o=t.currentDate.getMonth(),s=new Date(r,o,0).getDay(),d=new Date(r,o,0).getDate(),l=t.getNumberRow();0===s?(a=0,e=o):(a=d-s,e=o-1);for(var u=0;u<l;u++){for(var m=c("tr"),_=0;_<7;_++){var h=new Date(r,e,++a),p=c("td","date-picker__day",h.getDate()),f=0===t.compaireDate(h,i);t.hasCurrentMonth(h)||f||p.classList.add("date-picker__day_not-current"),f&&p.classList.add("date-picker__day_current");var g=t.getAriaDateByDate(h);p.setAttribute("aria-date",g),m.appendChild(p)}n.appendChild(m)}return n})),d(this,"getCellByAriaDate",(function(e){var a;return t.parentNode.querySelectorAll("td").forEach((function(t){t.getAttribute("aria-date")===e&&(a=t)})),a})),d(this,"getCalendar",(function(){var e=c("section","date-picker"),a=c("div","date-picker__wrap"),n=t.getCalendarTopControl(),i=t.getCalendarTable(),r=t.getCalendarBotControl();return a.appendChild(n),a.appendChild(i),a.appendChild(r),e.appendChild(a),e})),d(this,"getCalendarTopControl",(function(){var e=c("div","date-picker__control"),a=c("button","date-picker__slider-btn","Назад");a.classList.add("date-picker__slider-btn_prev"),a.type="button",a.addEventListener("click",(function(e){e.preventDefault();var a=t.currentDate.getFullYear(),n=t.currentDate.getMonth(),i=new Date(a,n-1,1);t.updateCurrentDate(i)}));var n=c("button","date-picker__slider-btn","Вперед");n.classList.add("date-picker__slider-btn_next"),n.type="button",n.addEventListener("click",(function(e){e.preventDefault();var a=t.currentDate.getFullYear(),n=t.currentDate.getMonth(),i=new Date(a,n+1,1);t.updateCurrentDate(i)}));var i=l[t.currentDate.getMonth()],r=t.currentDate.getFullYear(),o=c("h2","date-picker__title","".concat(i," ").concat(r));return o.id="date-picker-main-title",e.appendChild(a),e.appendChild(o),e.appendChild(n),e})),d(this,"getCalendarTable",(function(){var e=c("table","date-picker__calendar"),a=c("thead"),n=c("tbody"),i=c("tr");["Пн","Вт","Ср","Чт","Пт","Сб","Вс"].forEach((function(e){var t=c("th","date-picker__th",e);i.appendChild(t)})),a.appendChild(i);var r=t.getCalendarTableDate();return n.appendChild(r),n.addEventListener("click",t.onSelectDate),e.appendChild(a),e.appendChild(n),e})),d(this,"getCalendarBotControl",(function(){var e=c("div","date-picker__control");return[{text:"Очистить",isAccent:!1,clickHandler:t.onFullClearCalendar},{text:"Применить",isAccent:!0,clickHandler:t.unshowCalendar}].forEach((function(t){var a=c("button","date-picker__button",t.text);a.type="button",t.isAccent&&a.classList.add("date-picker__button_accentuating"),t.clickHandler&&a.addEventListener("click",(function(e){e.preventDefault(),t.clickHandler()})),e.appendChild(a)})),e})),d(this,"updateCurrentDate",(function(e){t.currentDate=e,t.updateCalendar(),t.paintingSelectCell()})),d(this,"updateCalendar",(function(){t.updateCalendarTitle(),t.updateCalendarTable()})),d(this,"updateCalendarTitle",(function(){var e=document.querySelector("#date-picker-main-title"),a=l[t.currentDate.getMonth()],n=t.currentDate.getFullYear();e.textContent="".concat(a," ").concat(n)})),d(this,"updateCalendarTable",(function(){var e=t.parentNode.querySelector("table"),a=e.querySelector("tbody");e.removeChild(a);var n=c("tbody"),i=t.getCalendarTableDate();n.addEventListener("click",t.onSelectDate),n.appendChild(i),e.appendChild(n)})),d(this,"renderCalendar",(function(){var e=t.getCalendar();t.parentNode.appendChild(e)})),a.parentNodeId?this.parentNode=document.querySelector("#".concat(a.parentNodeId)):console.error("Expected parentNodeId inside constructor object but not received"),a.arrivalInputId&&(this.arrivalInput=document.querySelector("#".concat(a.arrivalInputId)),i()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#".concat(a.arrivalInputId)),this.arrivalInput.addEventListener("focus",this.onFocusArrivalInput),this.arrivalInput.addEventListener("keydown",(function(e){if(13===e.keyCode){e.preventDefault(),t.showArrivalMonthCalendar();var a=t.arrivalInput.value;t.hasDataFull(a)&&t.departureInput.focus()}}))),a.departureInputId&&(this.departureInput=document.querySelector("#".concat(a.departureInputId)),i()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#".concat(a.departureInputId)),this.departureInput.addEventListener("focus",this.onFocusDepartureInput),this.departureInput.addEventListener("keydown",(function(e){13===e.keyCode&&(e.preventDefault(),t.showDepartureMonthCalendar())}))),a.datePickerInputId&&(this.datePickerInput=document.querySelector("#".concat(a.datePickerInputId)),this.datePickerInput.addEventListener("click",this.showCalendar)),a.arrivalSplitBtnId&&(this.arrivalSplitBtn=document.querySelector("#".concat(a.arrivalSplitBtnId)),this.arrivalSplitBtn.addEventListener("click",this.showArrivalMonthCalendar)),a.departureSplitBtnId&&(this.departureSplitBtn=document.querySelector("#".concat(a.departureSplitBtnId)),this.departureSplitBtn.addEventListener("click",this.showDepartureMonthCalendar)),a.inputPlaceholder&&(this.inputPlaceholder=a.inputPlaceholder),this.currentDate=new Date,this.arrivalDate=null,this.departureDate=null,this.arrivalCell=null,this.departureCell=null,this.isStartSelect=!1,this.isEndSelect=!1}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,i.default)(e),t&&t.no_symbols)return o.test(e);return r.test(e)};var n,i=(n=a(34))&&n.__esModule?n:{default:n};var r=/^[+-]?([0-9]*[.])?[0-9]+$/,o=/^[0-9]+$/;e.exports=t.default,e.exports.default=t.default},function(e,t,a){e.exports=a.p+"img/arrow-back-8967bb0.svg"},function(e,t,a){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!("string"==typeof e||e instanceof String)){var t;throw t=null===e?"null":"object"===(t=n(e))&&e.constructor&&e.constructor.hasOwnProperty("name")?e.constructor.name:"a ".concat(t),new TypeError("Expected string but received ".concat(t,"."))}},e.exports=t.default,e.exports.default=t.default},,,,,,,,,,function(e,t,a){e.exports=a.p+"img/like-24cba17.png"},function(e,t,a){e.exports=a.p+"img/like-active-98a6e1e.png"},,function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,a){return e<12?a?"vm":"VM":a?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},a={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},i={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,a,r,o){var s=n(t),d=i[e][n(t)];return 2===s&&(d=d[a?0:1]),d.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,a){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},n=function(e){return function(n,i,r,o){var s=t(n),d=a[e][t(n)];return 2===s&&(d=d[i?0:1]),d.replace(/%d/i,n)}},i=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,a){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:n("s"),ss:n("s"),m:n("m"),mm:n("m"),h:n("h"),hh:n("h"),d:n("d"),dd:n("d"),M:n("M"),MM:n("M"),y:n("y"),yy:n("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},a=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,i,r,o){var s=a(t),d=n[e][a(t)];return 2===s&&(d=d[i?0:1]),d.replace(/%d/i,t)}},r=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,a){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},a={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,a){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,a){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a){var n,i;return"m"===a?t?"хвіліна":"хвіліну":"h"===a?t?"гадзіна":"гадзіну":e+" "+(n=+e,i={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[a].split("_"),n%10==1&&n%100!=11?i[0]:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?i[1]:i[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,a){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,a=e%100;return 0===e?e+"-ев":0===a?e+"-ен":a>10&&a<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},a={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,a){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},a={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},a={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,a){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[a],e)}var a=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],n=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,i=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:i,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:i,monthsRegex:n,monthsShortRegex:n,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,a){return e<12?"a.m.":"g.m."}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a){var n=e+" ";switch(a){case"ss":return n+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return n+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return n+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return n+=1===e?"dan":"dana";case"MM":return n+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return n+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var a=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(a="a"),e+a},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),a="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),n=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],i=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function r(e){return e>1&&e<5&&1!=~~(e/10)}function o(e,t,a,n){var i=e+" ";switch(a){case"s":return t||n?"pár sekund":"pár sekundami";case"ss":return t||n?i+(r(e)?"sekundy":"sekund"):i+"sekundami";case"m":return t?"minuta":n?"minutu":"minutou";case"mm":return t||n?i+(r(e)?"minuty":"minut"):i+"minutami";case"h":return t?"hodina":n?"hodinu":"hodinou";case"hh":return t||n?i+(r(e)?"hodiny":"hodin"):i+"hodinami";case"d":return t||n?"den":"dnem";case"dd":return t||n?i+(r(e)?"dny":"dní"):i+"dny";case"M":return t||n?"měsíc":"měsícem";case"MM":return t||n?i+(r(e)?"měsíce":"měsíců"):i+"měsíci";case"y":return t||n?"rok":"rokem";case"yy":return t||n?i+(r(e)?"roky":"let"):i+"lety"}}e.defineLocale("cs",{months:t,monthsShort:a,monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[a][0]:i[a][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[a][0]:i[a][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[a][0]:i[a][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],a=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:a,weekdaysShort:a,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,a){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,a){return e>11?a?"μμ":"ΜΜ":a?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var a,n=this._calendarEl[e],i=t&&t.hours();return a=n,("undefined"!=typeof Function&&a instanceof Function||"[object Function]"===Object.prototype.toString.call(a))&&(n=n.apply(t)),n.replace("{}",i%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,a){return e>11?a?"p.t.m.":"P.T.M.":a?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),a="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),a="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),a="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),a="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?i[a][2]?i[a][2]:i[a][1]:n?i[a][0]:i[a][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},a={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,a){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),a=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function n(e,n,i,r){var o="";switch(i){case"s":return r?"muutaman sekunnin":"muutama sekunti";case"ss":o=r?"sekunnin":"sekuntia";break;case"m":return r?"minuutin":"minuutti";case"mm":o=r?"minuutin":"minuuttia";break;case"h":return r?"tunnin":"tunti";case"hh":o=r?"tunnin":"tuntia";break;case"d":return r?"päivän":"päivä";case"dd":o=r?"päivän":"päivää";break;case"M":return r?"kuukauden":"kuukausi";case"MM":o=r?"kuukauden":"kuukautta";break;case"y":return r?"vuoden":"vuosi";case"yy":o=r?"vuoden":"vuotta"}return o=function(e,n){return e<10?n?a[e]:t[e]:e}(e,r)+" "+o}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,a=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:a,longMonthsParse:a,shortMonthsParse:a,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),a="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return n?i[a][0]:i[a][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return n?i[a][0]:i[a][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},a={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,a){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?a?'לפנה"צ':"לפני הצהריים":e<18?a?'אחה"צ':"אחרי הצהריים":"בערב"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},a={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},n=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:n,longMonthsParse:n,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a){var n=e+" ";switch(a){case"ss":return n+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return n+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return n+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return n+=1===e?"dan":"dana";case"MM":return n+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return n+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function a(e,t,a,n){var i=e;switch(a){case"s":return n||t?"néhány másodperc":"néhány másodperce";case"ss":return i+(n||t)?" másodperc":" másodperce";case"m":return"egy"+(n||t?" perc":" perce");case"mm":return i+(n||t?" perc":" perce");case"h":return"egy"+(n||t?" óra":" órája");case"hh":return i+(n||t?" óra":" órája");case"d":return"egy"+(n||t?" nap":" napja");case"dd":return i+(n||t?" nap":" napja");case"M":return"egy"+(n||t?" hónap":" hónapja");case"MM":return i+(n||t?" hónap":" hónapja");case"y":return"egy"+(n||t?" év":" éve");case"yy":return i+(n||t?" év":" éve")}return""}function n(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,a){return e<12?!0===a?"de":"DE":!0===a?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return n.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return n.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e){return e%100==11||e%10!=1}function a(e,a,n,i){var r=e+" ";switch(n){case"s":return a||i?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?r+(a||i?"sekúndur":"sekúndum"):r+"sekúnda";case"m":return a?"mínúta":"mínútu";case"mm":return t(e)?r+(a||i?"mínútur":"mínútum"):a?r+"mínúta":r+"mínútu";case"hh":return t(e)?r+(a||i?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return a?"dagur":i?"dag":"degi";case"dd":return t(e)?a?r+"dagar":r+(i?"daga":"dögum"):a?r+"dagur":r+(i?"dag":"degi");case"M":return a?"mánuður":i?"mánuð":"mánuði";case"MM":return t(e)?a?r+"mánuðir":r+(i?"mánuði":"mánuðum"):a?r+"mánuður":r+(i?"mánuð":"mánuði");case"y":return a||i?"ár":"ári";case"yy":return t(e)?r+(a||i?"ár":"árum"):r+(a||i?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:a,ss:a,m:a,mm:a,h:"klukkustund",hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,a){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,a){return"ი"===a?t+"ში":t+a+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},a={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,a){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},a={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,a){return e<12?"오전":"오후"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},a={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},n=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:n,monthsShort:n,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,a){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?i[a][0]:i[a][1]}function a(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return a(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return a(e)}return a(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return a(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return a(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,a){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function a(e,t,a,n){return t?i(a)[0]:n?i(a)[1]:i(a)[2]}function n(e){return e%10==0||e>10&&e<20}function i(e){return t[e].split("_")}function r(e,t,r,o){var s=e+" ";return 1===e?s+a(0,t,r[0],o):t?s+(n(e)?i(r)[1]:i(r)[0]):o?s+i(r)[1]:s+(n(e)?i(r)[1]:i(r)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,a,n){return t?"kelios sekundės":n?"kelių sekundžių":"kelias sekundes"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function a(e,t,a){return a?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function n(e,n,i){return e+" "+a(t[i],e,n)}function i(e,n,i){return a(t[i],e,n)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:n,m:i,mm:n,h:i,hh:n,d:i,dd:n,M:i,MM:n,y:i,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,a,n){var i=t.words[n];return 1===n.length?a?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,a=e%100;return 0===e?e+"-ев":0===a?e+"-ен":a>10&&a<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,a){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){switch(a){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,a){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},a={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function n(e,t,a,n){var i="";if(t)switch(a){case"s":i="काही सेकंद";break;case"ss":i="%d सेकंद";break;case"m":i="एक मिनिट";break;case"mm":i="%d मिनिटे";break;case"h":i="एक तास";break;case"hh":i="%d तास";break;case"d":i="एक दिवस";break;case"dd":i="%d दिवस";break;case"M":i="एक महिना";break;case"MM":i="%d महिने";break;case"y":i="एक वर्ष";break;case"yy":i="%d वर्षे"}else switch(a){case"s":i="काही सेकंदां";break;case"ss":i="%d सेकंदां";break;case"m":i="एका मिनिटा";break;case"mm":i="%d मिनिटां";break;case"h":i="एका तासा";break;case"hh":i="%d तासां";break;case"d":i="एका दिवसा";break;case"dd":i="%d दिवसां";break;case"M":i="एका महिन्या";break;case"MM":i="%d महिन्यां";break;case"y":i="एका वर्षा";break;case"yy":i="%d वर्षां"}return i.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,a){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},a={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},a={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,a){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),a="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),n=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],i=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),a="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),n=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],i=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var a=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(a="a"),e+a},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},a={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),a="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),n=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function i(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function r(e,t,a){var n=e+" ";switch(a){case"ss":return n+(i(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return n+(i(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return n+(i(e)?"godziny":"godzin");case"ww":return n+(i(e)?"tygodnie":"tygodni");case"MM":return n+(i(e)?"miesiące":"miesięcy");case"yy":return n+(i(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,n){return e?/D MMMM/.test(n)?a[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:r,m:r,mm:r,h:r,hh:r,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:r,M:"miesiąc",MM:r,y:"rok",yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a){var n=" ";return(e%100>=20||e>=100&&e%100==0)&&(n=" de "),e+n+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[a]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a){var n,i;return"m"===a?t?"минута":"минуту":e+" "+(n=+e,i={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[a].split("_"),n%10==1&&n%100!=11?i[0]:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?i[1]:i[2])}var a=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:a,longMonthsParse:a,shortMonthsParse:a,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,a){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],a=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:a,weekdaysShort:a,weekdaysMin:a,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,a){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,a){return e>11?a?"ප.ව.":"පස් වරු":a?"පෙ.ව.":"පෙර වරු"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),a="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function n(e){return e>1&&e<5}function i(e,t,a,i){var r=e+" ";switch(a){case"s":return t||i?"pár sekúnd":"pár sekundami";case"ss":return t||i?r+(n(e)?"sekundy":"sekúnd"):r+"sekundami";case"m":return t?"minúta":i?"minútu":"minútou";case"mm":return t||i?r+(n(e)?"minúty":"minút"):r+"minútami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(n(e)?"hodiny":"hodín"):r+"hodinami";case"d":return t||i?"deň":"dňom";case"dd":return t||i?r+(n(e)?"dni":"dní"):r+"dňami";case"M":return t||i?"mesiac":"mesiacom";case"MM":return t||i?r+(n(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||i?"rok":"rokom";case"yy":return t||i?r+(n(e)?"roky":"rokov"):r+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:a,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i=e+" ";switch(a){case"s":return t||n?"nekaj sekund":"nekaj sekundami";case"ss":return i+=1===e?t?"sekundo":"sekundi":2===e?t||n?"sekundi":"sekundah":e<5?t||n?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return i+=1===e?t?"minuta":"minuto":2===e?t||n?"minuti":"minutama":e<5?t||n?"minute":"minutami":t||n?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return i+=1===e?t?"ura":"uro":2===e?t||n?"uri":"urama":e<5?t||n?"ure":"urami":t||n?"ur":"urami";case"d":return t||n?"en dan":"enim dnem";case"dd":return i+=1===e?t||n?"dan":"dnem":2===e?t||n?"dni":"dnevoma":t||n?"dni":"dnevi";case"M":return t||n?"en mesec":"enim mesecem";case"MM":return i+=1===e?t||n?"mesec":"mesecem":2===e?t||n?"meseca":"mesecema":e<5?t||n?"mesece":"meseci":t||n?"mesecev":"meseci";case"y":return t||n?"eno leto":"enim letom";case"yy":return i+=1===e?t||n?"leto":"letom":2===e?t||n?"leti":"letoma":e<5?t||n?"leta":"leti":t||n?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,a){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,a,n){var i=t.words[n];return 1===n.length?a?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,a,n){var i=t.words[n];return 1===n.length?a?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,a){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},a={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,a){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,a){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,a){switch(a){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function a(e,a,n,i){var r=function(e){var a=Math.floor(e%1e3/100),n=Math.floor(e%100/10),i=e%10,r="";return a>0&&(r+=t[a]+"vatlh"),n>0&&(r+=(""!==r?" ":"")+t[n]+"maH"),i>0&&(r+=(""!==r?" ":"")+t[i]),""===r?"pagh":r}(e);switch(n){case"ss":return r+" lup";case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:a,m:"wa’ tup",mm:a,h:"wa’ rep",hh:a,d:"wa’ jaj",dd:a,M:"wa’ jar",MM:a,y:"wa’ DIS",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,a){return e<12?a?"öö":"ÖÖ":a?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,a){switch(a){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a,n){var i={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return n||t?i[a][0]:i[a][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,a){return e>11?a?"d'o":"D'O":a?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,a){var n=100*e+t;return n<600?"يېرىم كېچە":n<900?"سەھەر":n<1130?"چۈشتىن بۇرۇن":n<1230?"چۈش":n<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,a){var n,i;return"m"===a?t?"хвилина":"хвилину":"h"===a?t?"година":"годину":e+" "+(n=+e,i={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[a].split("_"),n%10==1&&n%100!=11?i[0]:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?i[1]:i[2])}function a(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var a={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?a.nominative.slice(1,7).concat(a.nominative.slice(0,1)):e?a[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:a.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:a("[Сьогодні "),nextDay:a("[Завтра "),lastDay:a("[Вчора "),nextWeek:a("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return a("[Минулої] dddd [").call(this);case 1:case 2:case 4:return a("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,a){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],a=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:a,weekdaysShort:a,weekdaysMin:a,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,a){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,a){return e<12?a?"sa":"SA":a?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,a){var n=100*e+t;return n<600?"凌晨":n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,a){var n=100*e+t;return n<600?"凌晨":n<900?"早上":n<1200?"上午":1200===n?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,a){var n=100*e+t;return n<600?"凌晨":n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(a(0))},function(e,t,a){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,a){var n=100*e+t;return n<600?"凌晨":n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(a(0))},function(e,t,a){
/*!
 * Chart.js v2.9.3
 * https://www.chartjs.org
 * (c) 2019 Chart.js Contributors
 * Released under the MIT License
 */
e.exports=function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},a=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e){var a={};for(var n in t)t.hasOwnProperty(n)&&(a[t[n]]=n);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var r in i)if(i.hasOwnProperty(r)){if(!("channels"in i[r]))throw new Error("missing channels property: "+r);if(!("labels"in i[r]))throw new Error("missing channel labels property: "+r);if(i[r].labels.length!==i[r].channels)throw new Error("channel and label counts mismatch: "+r);var o=i[r].channels,s=i[r].labels;delete i[r].channels,delete i[r].labels,Object.defineProperty(i[r],"channels",{value:o}),Object.defineProperty(i[r],"labels",{value:s})}i.rgb.hsl=function(e){var t,a,n=e[0]/255,i=e[1]/255,r=e[2]/255,o=Math.min(n,i,r),s=Math.max(n,i,r),d=s-o;return s===o?t=0:n===s?t=(i-r)/d:i===s?t=2+(r-n)/d:r===s&&(t=4+(n-i)/d),(t=Math.min(60*t,360))<0&&(t+=360),a=(o+s)/2,[t,100*(s===o?0:a<=.5?d/(s+o):d/(2-s-o)),100*a]},i.rgb.hsv=function(e){var t,a,n,i,r,o=e[0]/255,s=e[1]/255,d=e[2]/255,l=Math.max(o,s,d),u=l-Math.min(o,s,d),c=function(e){return(l-e)/6/u+.5};return 0===u?i=r=0:(r=u/l,t=c(o),a=c(s),n=c(d),o===l?i=n-a:s===l?i=1/3+t-n:d===l&&(i=2/3+a-t),i<0?i+=1:i>1&&(i-=1)),[360*i,100*r,100*l]},i.rgb.hwb=function(e){var t=e[0],a=e[1],n=e[2];return[i.rgb.hsl(e)[0],1/255*Math.min(t,Math.min(a,n))*100,100*(n=1-1/255*Math.max(t,Math.max(a,n)))]},i.rgb.cmyk=function(e){var t,a=e[0]/255,n=e[1]/255,i=e[2]/255;return[100*((1-a-(t=Math.min(1-a,1-n,1-i)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-i-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var n=a[e];if(n)return n;var i,r,o,s=1/0;for(var d in t)if(t.hasOwnProperty(d)){var l=t[d],u=(r=e,o=l,Math.pow(r[0]-o[0],2)+Math.pow(r[1]-o[1],2)+Math.pow(r[2]-o[2],2));u<s&&(s=u,i=d)}return i},i.keyword.rgb=function(e){return t[e]},i.rgb.xyz=function(e){var t=e[0]/255,a=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(a=a>.04045?Math.pow((a+.055)/1.055,2.4):a/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*a+.0722*n),100*(.0193*t+.1192*a+.9505*n)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),a=t[0],n=t[1],r=t[2];return n/=100,r/=108.883,a=(a/=95.047)>.008856?Math.pow(a,1/3):7.787*a+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(a-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},i.hsl.rgb=function(e){var t,a,n,i,r,o=e[0]/360,s=e[1]/100,d=e[2]/100;if(0===s)return[r=255*d,r,r];t=2*d-(a=d<.5?d*(1+s):d+s-d*s),i=[0,0,0];for(var l=0;l<3;l++)(n=o+1/3*-(l-1))<0&&n++,n>1&&n--,r=6*n<1?t+6*(a-t)*n:2*n<1?a:3*n<2?t+(a-t)*(2/3-n)*6:t,i[l]=255*r;return i},i.hsl.hsv=function(e){var t=e[0],a=e[1]/100,n=e[2]/100,i=a,r=Math.max(n,.01);return a*=(n*=2)<=1?n:2-n,i*=r<=1?r:2-r,[t,100*(0===n?2*i/(r+i):2*a/(n+a)),(n+a)/2*100]},i.hsv.rgb=function(e){var t=e[0]/60,a=e[1]/100,n=e[2]/100,i=Math.floor(t)%6,r=t-Math.floor(t),o=255*n*(1-a),s=255*n*(1-a*r),d=255*n*(1-a*(1-r));switch(n*=255,i){case 0:return[n,d,o];case 1:return[s,n,o];case 2:return[o,n,d];case 3:return[o,s,n];case 4:return[d,o,n];case 5:return[n,o,s]}},i.hsv.hsl=function(e){var t,a,n,i=e[0],r=e[1]/100,o=e[2]/100,s=Math.max(o,.01);return n=(2-r)*o,a=r*s,[i,100*(a=(a/=(t=(2-r)*s)<=1?t:2-t)||0),100*(n/=2)]},i.hwb.rgb=function(e){var t,a,n,i,r,o,s,d=e[0]/360,l=e[1]/100,u=e[2]/100,c=l+u;switch(c>1&&(l/=c,u/=c),n=6*d-(t=Math.floor(6*d)),0!=(1&t)&&(n=1-n),i=l+n*((a=1-u)-l),t){default:case 6:case 0:r=a,o=i,s=l;break;case 1:r=i,o=a,s=l;break;case 2:r=l,o=a,s=i;break;case 3:r=l,o=i,s=a;break;case 4:r=i,o=l,s=a;break;case 5:r=a,o=l,s=i}return[255*r,255*o,255*s]},i.cmyk.rgb=function(e){var t=e[0]/100,a=e[1]/100,n=e[2]/100,i=e[3]/100;return[255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,a*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i))]},i.xyz.rgb=function(e){var t,a,n,i=e[0]/100,r=e[1]/100,o=e[2]/100;return a=-.9689*i+1.8758*r+.0415*o,n=.0557*i+-.204*r+1.057*o,t=(t=3.2406*i+-1.5372*r+-.4986*o)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,a=a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(t=Math.min(Math.max(0,t),1)),255*(a=Math.min(Math.max(0,a),1)),255*(n=Math.min(Math.max(0,n),1))]},i.xyz.lab=function(e){var t=e[0],a=e[1],n=e[2];return a/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116)-16,500*(t-a),200*(a-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},i.lab.xyz=function(e){var t,a,n,i=e[0];t=e[1]/500+(a=(i+16)/116),n=a-e[2]/200;var r=Math.pow(a,3),o=Math.pow(t,3),s=Math.pow(n,3);return a=r>.008856?r:(a-16/116)/7.787,t=o>.008856?o:(t-16/116)/7.787,n=s>.008856?s:(n-16/116)/7.787,[t*=95.047,a*=100,n*=108.883]},i.lab.lch=function(e){var t,a=e[0],n=e[1],i=e[2];return(t=360*Math.atan2(i,n)/2/Math.PI)<0&&(t+=360),[a,Math.sqrt(n*n+i*i),t]},i.lch.lab=function(e){var t,a=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[a,n*Math.cos(t),n*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],a=e[1],n=e[2],r=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(r=Math.round(r/50)))return 30;var o=30+(Math.round(n/255)<<2|Math.round(a/255)<<1|Math.round(t/255));return 2===r&&(o+=60),o},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],a=e[1],n=e[2];return t===a&&a===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(a/255*5)+Math.round(n/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var a=.5*(1+~~(e>50));return[(1&t)*a*255,(t>>1&1)*a*255,(t>>2&1)*a*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var a;return e-=16,[Math.floor(e/36)/5*255,Math.floor((a=e%36)/6)/5*255,a%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var a=t[0];3===t[0].length&&(a=a.split("").map((function(e){return e+e})).join(""));var n=parseInt(a,16);return[n>>16&255,n>>8&255,255&n]},i.rgb.hcg=function(e){var t,a=e[0]/255,n=e[1]/255,i=e[2]/255,r=Math.max(Math.max(a,n),i),o=Math.min(Math.min(a,n),i),s=r-o;return t=s<=0?0:r===a?(n-i)/s%6:r===n?2+(i-a)/s:4+(a-n)/s+4,t/=6,[360*(t%=1),100*s,100*(s<1?o/(1-s):0)]},i.hsl.hcg=function(e){var t=e[1]/100,a=e[2]/100,n=1,i=0;return(n=a<.5?2*t*a:2*t*(1-a))<1&&(i=(a-.5*n)/(1-n)),[e[0],100*n,100*i]},i.hsv.hcg=function(e){var t=e[1]/100,a=e[2]/100,n=t*a,i=0;return n<1&&(i=(a-n)/(1-n)),[e[0],100*n,100*i]},i.hcg.rgb=function(e){var t=e[0]/360,a=e[1]/100,n=e[2]/100;if(0===a)return[255*n,255*n,255*n];var i,r=[0,0,0],o=t%1*6,s=o%1,d=1-s;switch(Math.floor(o)){case 0:r[0]=1,r[1]=s,r[2]=0;break;case 1:r[0]=d,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=s;break;case 3:r[0]=0,r[1]=d,r[2]=1;break;case 4:r[0]=s,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=d}return i=(1-a)*n,[255*(a*r[0]+i),255*(a*r[1]+i),255*(a*r[2]+i)]},i.hcg.hsv=function(e){var t=e[1]/100,a=t+e[2]/100*(1-t),n=0;return a>0&&(n=t/a),[e[0],100*n,100*a]},i.hcg.hsl=function(e){var t=e[1]/100,a=e[2]/100*(1-t)+.5*t,n=0;return a>0&&a<.5?n=t/(2*a):a>=.5&&a<1&&(n=t/(2*(1-a))),[e[0],100*n,100*a]},i.hcg.hwb=function(e){var t=e[1]/100,a=t+e[2]/100*(1-t);return[e[0],100*(a-t),100*(1-a)]},i.hwb.hcg=function(e){var t=e[1]/100,a=1-e[2]/100,n=a-t,i=0;return n<1&&(i=(a-n)/(1-n)),[e[0],100*n,100*i]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),a=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(a.length)+a},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}}));function n(e){var t=function(){for(var e={},t=Object.keys(a),n=t.length,i=0;i<n;i++)e[t[i]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;)for(var i=n.pop(),r=Object.keys(a[i]),o=r.length,s=0;s<o;s++){var d=r[s],l=t[d];-1===l.distance&&(l.distance=t[i].distance+1,l.parent=i,n.unshift(d))}return t}function i(e,t){return function(a){return t(e(a))}}function r(e,t){for(var n=[t[e].parent,e],r=a[t[e].parent][e],o=t[e].parent;t[o].parent;)n.unshift(t[o].parent),r=i(a[t[o].parent][o],r),o=t[o].parent;return r.conversion=n,r}a.rgb,a.hsl,a.hsv,a.hwb,a.cmyk,a.xyz,a.lab,a.lch,a.hex,a.keyword,a.ansi16,a.ansi256,a.hcg,a.apple,a.gray;var o={};Object.keys(a).forEach((function(e){o[e]={},Object.defineProperty(o[e],"channels",{value:a[e].channels}),Object.defineProperty(o[e],"labels",{value:a[e].labels});var t=function(e){for(var t=n(e),a={},i=Object.keys(t),o=i.length,s=0;s<o;s++){var d=i[s];null!==t[d].parent&&(a[d]=r(d,t))}return a}(e);Object.keys(t).forEach((function(a){var n=t[a];o[e][a]=function(e){var t=function(t){if(null==t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var a=e(t);if("object"==typeof a)for(var n=a.length,i=0;i<n;i++)a[i]=Math.round(a[i]);return a};return"conversion"in e&&(t.conversion=e.conversion),t}(n),o[e][a].raw=function(e){var t=function(t){return null==t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(n)}))}));var s=o,d={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},l={getRgba:u,getHsla:c,getRgb:function(e){var t=u(e);return t&&t.slice(0,3)},getHsl:function(e){var t=c(e);return t&&t.slice(0,3)},getHwb:m,getAlpha:function(e){var t=u(e);return t||(t=c(e))||(t=m(e))?t[3]:void 0},hexString:function(e,t){return t=void 0!==t&&3===e.length?t:e[3],"#"+g(e[0])+g(e[1])+g(e[2])+(t>=0&&t<1?g(Math.round(255*t)):"")},rgbString:function(e,t){return t<1||e[3]&&e[3]<1?_(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"},rgbaString:_,percentString:function(e,t){if(t<1||e[3]&&e[3]<1)return h(e,t);var a=Math.round(e[0]/255*100),n=Math.round(e[1]/255*100),i=Math.round(e[2]/255*100);return"rgb("+a+"%, "+n+"%, "+i+"%)"},percentaString:h,hslString:function(e,t){return t<1||e[3]&&e[3]<1?p(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"},hslaString:p,hwbString:function(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"},keyword:function(e){return y[e.slice(0,3)]}};function u(e){if(e){var t=[0,0,0],a=1,n=e.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(n){i=(n=n[1])[3];for(var r=0;r<t.length;r++)t[r]=parseInt(n[r]+n[r],16);i&&(a=Math.round(parseInt(i+i,16)/255*100)/100)}else if(n=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){for(i=n[2],n=n[1],r=0;r<t.length;r++)t[r]=parseInt(n.slice(2*r,2*r+2),16);i&&(a=Math.round(parseInt(i,16)/255*100)/100)}else if(n=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<t.length;r++)t[r]=parseInt(n[r+1]);a=parseFloat(n[4])}else if(n=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<t.length;r++)t[r]=Math.round(2.55*parseFloat(n[r+1]));a=parseFloat(n[4])}else if(n=e.match(/(\w+)/)){if("transparent"==n[1])return[0,0,0,0];if(!(t=d[n[1]]))return}for(r=0;r<t.length;r++)t[r]=f(t[r],0,255);return a=a||0==a?f(a,0,1):1,t[3]=a,t}}function c(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var a=parseFloat(t[4]);return[f(parseInt(t[1]),0,360),f(parseFloat(t[2]),0,100),f(parseFloat(t[3]),0,100),f(isNaN(a)?1:a,0,1)]}}}function m(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var a=parseFloat(t[4]);return[f(parseInt(t[1]),0,360),f(parseFloat(t[2]),0,100),f(parseFloat(t[3]),0,100),f(isNaN(a)?1:a,0,1)]}}}function _(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function h(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function p(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function f(e,t,a){return Math.min(Math.max(t,e),a)}function g(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var y={};for(var M in d)y[d[M]]=M;var b=function(e){return e instanceof b?e:this instanceof b?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof e?(t=l.getRgba(e))?this.setValues("rgb",t):(t=l.getHsla(e))?this.setValues("hsl",t):(t=l.getHwb(e))&&this.setValues("hwb",t):"object"==typeof e&&(void 0!==(t=e).r||void 0!==t.red?this.setValues("rgb",t):void 0!==t.l||void 0!==t.lightness?this.setValues("hsl",t):void 0!==t.v||void 0!==t.value?this.setValues("hsv",t):void 0!==t.w||void 0!==t.whiteness?this.setValues("hwb",t):void 0===t.c&&void 0===t.cyan||this.setValues("cmyk",t)))):new b(e);var t};b.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return l.hexString(this.values.rgb)},rgbString:function(){return l.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return l.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return l.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return l.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return l.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return l.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return l.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],a=0;a<e.length;a++){var n=e[a]/255;t[a]=n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),a=e.luminosity();return t>a?(t+.05)/(a+.05):(a+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,a=(t[0]+e)%360;return t[0]=a<0?360+a:a,this.setValues("hsl",t),this},mix:function(e,t){var a=e,n=void 0===t?.5:t,i=2*n-1,r=this.alpha()-a.alpha(),o=((i*r==-1?i:(i+r)/(1+i*r))+1)/2,s=1-o;return this.rgb(o*this.red()+s*a.red(),o*this.green()+s*a.green(),o*this.blue()+s*a.blue()).alpha(this.alpha()*n+a.alpha()*(1-n))},toJSON:function(){return this.rgb()},clone:function(){var e,t,a=new b,n=this.values,i=a.values;for(var r in n)n.hasOwnProperty(r)&&(e=n[r],"[object Array]"===(t={}.toString.call(e))?i[r]=e.slice(0):"[object Number]"===t?i[r]=e:console.error("unexpected color value:",e));return a}},b.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},b.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},b.prototype.getValues=function(e){for(var t=this.values,a={},n=0;n<e.length;n++)a[e.charAt(n)]=t[e][n];return 1!==t.alpha&&(a.a=t.alpha),a},b.prototype.setValues=function(e,t){var a,n,i=this.values,r=this.spaces,o=this.maxes,d=1;if(this.valid=!0,"alpha"===e)d=t;else if(t.length)i[e]=t.slice(0,e.length),d=t[e.length];else if(void 0!==t[e.charAt(0)]){for(a=0;a<e.length;a++)i[e][a]=t[e.charAt(a)];d=t.a}else if(void 0!==t[r[e][0]]){var l=r[e];for(a=0;a<e.length;a++)i[e][a]=t[l[a]];d=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===d?i.alpha:d)),"alpha"===e)return!1;for(a=0;a<e.length;a++)n=Math.max(0,Math.min(o[e][a],i[e][a])),i[e][a]=Math.round(n);for(var u in r)u!==e&&(i[u]=s[e][u](i[e]));return!0},b.prototype.setSpace=function(e,t){var a=t[0];return void 0===a?this.getValues(e):("number"==typeof a&&(a=Array.prototype.slice.call(t)),this.setValues(e,a),this)},b.prototype.setChannel=function(e,t,a){var n=this.values[e];return void 0===a?n[t]:(a===n[t]||(n[t]=a,this.setValues(e,n)),this)},"undefined"!=typeof window&&(window.Color=b);var v,k=b,L={noop:function(){},uid:(v=0,function(){return v++}),isNullOrUndef:function(e){return null==e},isArray:function(e){if(Array.isArray&&Array.isArray(e))return!0;var t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},isFinite:function(e){return("number"==typeof e||e instanceof Number)&&isFinite(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,a){return L.valueOrDefault(L.isArray(e)?e[t]:e,a)},callback:function(e,t,a){if(e&&"function"==typeof e.call)return e.apply(a,t)},each:function(e,t,a,n){var i,r,o;if(L.isArray(e))if(r=e.length,n)for(i=r-1;i>=0;i--)t.call(a,e[i],i);else for(i=0;i<r;i++)t.call(a,e[i],i);else if(L.isObject(e))for(r=(o=Object.keys(e)).length,i=0;i<r;i++)t.call(a,e[o[i]],o[i])},arrayEquals:function(e,t){var a,n,i,r;if(!e||!t||e.length!==t.length)return!1;for(a=0,n=e.length;a<n;++a)if(i=e[a],r=t[a],i instanceof Array&&r instanceof Array){if(!L.arrayEquals(i,r))return!1}else if(i!==r)return!1;return!0},clone:function(e){if(L.isArray(e))return e.map(L.clone);if(L.isObject(e)){for(var t={},a=Object.keys(e),n=a.length,i=0;i<n;++i)t[a[i]]=L.clone(e[a[i]]);return t}return e},_merger:function(e,t,a,n){var i=t[e],r=a[e];L.isObject(i)&&L.isObject(r)?L.merge(i,r,n):t[e]=L.clone(r)},_mergerIf:function(e,t,a){var n=t[e],i=a[e];L.isObject(n)&&L.isObject(i)?L.mergeIf(n,i):t.hasOwnProperty(e)||(t[e]=L.clone(i))},merge:function(e,t,a){var n,i,r,o,s,d=L.isArray(t)?t:[t],l=d.length;if(!L.isObject(e))return e;for(n=(a=a||{}).merger||L._merger,i=0;i<l;++i)if(t=d[i],L.isObject(t))for(s=0,o=(r=Object.keys(t)).length;s<o;++s)n(r[s],e,t,a);return e},mergeIf:function(e,t){return L.merge(e,t,{merger:L._mergerIf})},extend:Object.assign||function(e){return L.merge(e,[].slice.call(arguments,1),{merger:function(e,t,a){t[e]=a[e]}})},inherits:function(e){var t=this,a=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},n=function(){this.constructor=a};return n.prototype=t.prototype,a.prototype=new n,a.extend=L.inherits,e&&L.extend(a.prototype,e),a.__super__=t.prototype,a},_deprecated:function(e,t,a,n){void 0!==t&&console.warn(e+': "'+a+'" is deprecated. Please use "'+n+'" instead')}},x=L;L.callCallback=L.callback,L.indexOf=function(e,t,a){return Array.prototype.indexOf.call(e,t,a)},L.getValueOrDefault=L.valueOrDefault,L.getValueAtIndexOrDefault=L.valueAtIndexOrDefault;var w={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,a=0,n=1;return 0===e?0:1===e?1:(a||(a=.3),n<1?(n=1,t=a/4):t=a/(2*Math.PI)*Math.asin(1/n),-n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/a))},easeOutElastic:function(e){var t=1.70158,a=0,n=1;return 0===e?0:1===e?1:(a||(a=.3),n<1?(n=1,t=a/4):t=a/(2*Math.PI)*Math.asin(1/n),n*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/a)+1)},easeInOutElastic:function(e){var t=1.70158,a=0,n=1;return 0===e?0:2==(e/=.5)?1:(a||(a=.45),n<1?(n=1,t=a/4):t=a/(2*Math.PI)*Math.asin(1/n),e<1?n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/a)*-.5:n*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/a)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-w.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*w.easeInBounce(2*e):.5*w.easeOutBounce(2*e-1)+.5}},Y={effects:w};x.easingEffects=w;var D=Math.PI,T=D/180,S=2*D,H=D/2,j=D/4,P=2*D/3,A={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,a,n,i,r){if(r){var o=Math.min(r,i/2,n/2),s=t+o,d=a+o,l=t+n-o,u=a+i-o;e.moveTo(t,d),s<l&&d<u?(e.arc(s,d,o,-D,-H),e.arc(l,d,o,-H,0),e.arc(l,u,o,0,H),e.arc(s,u,o,H,D)):s<l?(e.moveTo(s,a),e.arc(l,d,o,-H,H),e.arc(s,d,o,H,D+H)):d<u?(e.arc(s,d,o,-D,0),e.arc(s,u,o,0,D)):e.arc(s,d,o,-D,D),e.closePath(),e.moveTo(t,a)}else e.rect(t,a,n,i)},drawPoint:function(e,t,a,n,i,r){var o,s,d,l,u,c=(r||0)*T;if(t&&"object"==typeof t&&("[object HTMLImageElement]"===(o=t.toString())||"[object HTMLCanvasElement]"===o))return e.save(),e.translate(n,i),e.rotate(c),e.drawImage(t,-t.width/2,-t.height/2,t.width,t.height),void e.restore();if(!(isNaN(a)||a<=0)){switch(e.beginPath(),t){default:e.arc(n,i,a,0,S),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(c)*a,i-Math.cos(c)*a),c+=P,e.lineTo(n+Math.sin(c)*a,i-Math.cos(c)*a),c+=P,e.lineTo(n+Math.sin(c)*a,i-Math.cos(c)*a),e.closePath();break;case"rectRounded":l=a-(u=.516*a),s=Math.cos(c+j)*l,d=Math.sin(c+j)*l,e.arc(n-s,i-d,u,c-D,c-H),e.arc(n+d,i-s,u,c-H,c),e.arc(n+s,i+d,u,c,c+H),e.arc(n-d,i+s,u,c+H,c+D),e.closePath();break;case"rect":if(!r){l=Math.SQRT1_2*a,e.rect(n-l,i-l,2*l,2*l);break}c+=j;case"rectRot":s=Math.cos(c)*a,d=Math.sin(c)*a,e.moveTo(n-s,i-d),e.lineTo(n+d,i-s),e.lineTo(n+s,i+d),e.lineTo(n-d,i+s),e.closePath();break;case"crossRot":c+=j;case"cross":s=Math.cos(c)*a,d=Math.sin(c)*a,e.moveTo(n-s,i-d),e.lineTo(n+s,i+d),e.moveTo(n+d,i-s),e.lineTo(n-d,i+s);break;case"star":s=Math.cos(c)*a,d=Math.sin(c)*a,e.moveTo(n-s,i-d),e.lineTo(n+s,i+d),e.moveTo(n+d,i-s),e.lineTo(n-d,i+s),c+=j,s=Math.cos(c)*a,d=Math.sin(c)*a,e.moveTo(n-s,i-d),e.lineTo(n+s,i+d),e.moveTo(n+d,i-s),e.lineTo(n-d,i+s);break;case"line":s=Math.cos(c)*a,d=Math.sin(c)*a,e.moveTo(n-s,i-d),e.lineTo(n+s,i+d);break;case"dash":e.moveTo(n,i),e.lineTo(n+Math.cos(c)*a,i+Math.sin(c)*a)}e.fill(),e.stroke()}},_isPointInArea:function(e,t){return e.x>t.left-1e-6&&e.x<t.right+1e-6&&e.y>t.top-1e-6&&e.y<t.bottom+1e-6},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,a,n){var i=a.steppedLine;if(i){if("middle"===i){var r=(t.x+a.x)/2;e.lineTo(r,n?a.y:t.y),e.lineTo(r,n?t.y:a.y)}else"after"===i&&!n||"after"!==i&&n?e.lineTo(t.x,a.y):e.lineTo(a.x,t.y);e.lineTo(a.x,a.y)}else a.tension?e.bezierCurveTo(n?t.controlPointPreviousX:t.controlPointNextX,n?t.controlPointPreviousY:t.controlPointNextY,n?a.controlPointNextX:a.controlPointPreviousX,n?a.controlPointNextY:a.controlPointPreviousY,a.x,a.y):e.lineTo(a.x,a.y)}},C=A;x.clear=A.clear,x.drawRoundedRectangle=function(e){e.beginPath(),A.roundedRect.apply(A,arguments)};var O={_set:function(e,t){return x.merge(this[e]||(this[e]={}),t)}};O._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var E=O,F=x.valueOrDefault,W={toLineHeight:function(e,t){var a=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!a||"normal"===a[1])return 1.2*t;switch(e=+a[2],a[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,a,n,i;return x.isObject(e)?(t=+e.top||0,a=+e.right||0,n=+e.bottom||0,i=+e.left||0):t=a=n=i=+e||0,{top:t,right:a,bottom:n,left:i,height:t+n,width:i+a}},_parseFont:function(e){var t=E.global,a=F(e.fontSize,t.defaultFontSize),n={family:F(e.fontFamily,t.defaultFontFamily),lineHeight:x.options.toLineHeight(F(e.lineHeight,t.defaultLineHeight),a),size:a,style:F(e.fontStyle,t.defaultFontStyle),weight:null,string:""};return n.string=function(e){return!e||x.isNullOrUndef(e.size)||x.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(n),n},resolve:function(e,t,a,n){var i,r,o,s=!0;for(i=0,r=e.length;i<r;++i)if(void 0!==(o=e[i])&&(void 0!==t&&"function"==typeof o&&(o=o(t),s=!1),void 0!==a&&x.isArray(o)&&(o=o[a],s=!1),void 0!==o))return n&&!s&&(n.cacheable=!1),o}},z={_factorize:function(e){var t,a=[],n=Math.sqrt(e);for(t=1;t<n;t++)e%t==0&&(a.push(t),a.push(e/t));return n===(0|n)&&a.push(n),a.sort((function(e,t){return e-t})).pop(),a},log10:Math.log10||function(e){var t=Math.log(e)*Math.LOG10E,a=Math.round(t);return e===Math.pow(10,a)?a:t}},I=z;x.log10=z.log10;var N=x,R=Y,B=C,V=W,G=I,J={getRtlAdapter:function(e,t,a){return e?function(e,t){return{x:function(a){return e+e+t-a},setWidth:function(e){t=e},textAlign:function(e){return"center"===e?e:"right"===e?"left":"right"},xPlus:function(e,t){return e-t},leftForLtr:function(e,t){return e-t}}}(t,a):{x:function(e){return e},setWidth:function(e){},textAlign:function(e){return e},xPlus:function(e,t){return e+t},leftForLtr:function(e,t){return e}}},overrideTextDirection:function(e,t){var a,n;"ltr"!==t&&"rtl"!==t||(n=[(a=e.canvas.style).getPropertyValue("direction"),a.getPropertyPriority("direction")],a.setProperty("direction",t,"important"),e.prevTextDirection=n)},restoreTextDirection:function(e){var t=e.prevTextDirection;void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}};N.easing=R,N.canvas=B,N.options=V,N.math=G,N.rtl=J;var U=function(e){N.extend(this,e),this.initialize.apply(this,arguments)};N.extend(U.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=N.extend({},e._model)),e._start={},e},transition:function(e){var t=this,a=t._model,n=t._start,i=t._view;return a&&1!==e?(i||(i=t._view={}),n||(n=t._start={}),function(e,t,a,n){var i,r,o,s,d,l,u,c,m,_=Object.keys(a);for(i=0,r=_.length;i<r;++i)if(l=a[o=_[i]],t.hasOwnProperty(o)||(t[o]=l),(s=t[o])!==l&&"_"!==o[0]){if(e.hasOwnProperty(o)||(e[o]=s),(u=typeof l)==typeof(d=e[o]))if("string"===u){if((c=k(d)).valid&&(m=k(l)).valid){t[o]=m.mix(c,n).rgbString();continue}}else if(N.isFinite(d)&&N.isFinite(l)){t[o]=d+(l-d)*n;continue}t[o]=l}}(n,i,a,e),t):(t._view=N.extend({},a),t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return N.isNumber(this._model.x)&&N.isNumber(this._model.y)}}),U.extend=N.inherits;var q=U,K=q.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),$=K;Object.defineProperty(K.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(K.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}}),E._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:N.noop,onComplete:N.noop}});var Q={animations:[],request:null,addAnimation:function(e,t,a,n){var i,r,o=this.animations;for(t.chart=e,t.startTime=Date.now(),t.duration=a,n||(e.animating=!0),i=0,r=o.length;i<r;++i)if(o[i].chart===e)return void(o[i]=t);o.push(t),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=N.findIndex(this.animations,(function(t){return t.chart===e}));-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=N.requestAnimFrame.call(window,(function(){e.request=null,e.startDigest()})))},startDigest:function(){this.advance(),this.animations.length>0&&this.requestAnimationFrame()},advance:function(){for(var e,t,a,n,i=this.animations,r=0;r<i.length;)t=(e=i[r]).chart,a=e.numSteps,n=Math.floor((Date.now()-e.startTime)/e.duration*a)+1,e.currentStep=Math.min(n,a),N.callback(e.render,[t,e],t),N.callback(e.onAnimationProgress,[e],t),e.currentStep>=a?(N.callback(e.onAnimationComplete,[e],t),t.animating=!1,i.splice(r,1)):++r}},Z=N.options.resolve,X=["push","pop","shift","splice","unshift"];function ee(e,t){var a=e._chartjs;if(a){var n=a.listeners,i=n.indexOf(t);-1!==i&&n.splice(i,1),n.length>0||(X.forEach((function(t){delete e[t]})),delete e._chartjs)}}var te=function(e,t){this.initialize(e,t)};N.extend(te.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(e,t){var a=this;a.chart=e,a.index=t,a.linkScales(),a.addElements(),a._type=a.getMeta().type},updateIndex:function(e){this.index=e},linkScales:function(){var e=this.getMeta(),t=this.chart,a=t.scales,n=this.getDataset(),i=t.options.scales;null!==e.xAxisID&&e.xAxisID in a&&!n.xAxisID||(e.xAxisID=n.xAxisID||i.xAxes[0].id),null!==e.yAxisID&&e.yAxisID in a&&!n.yAxisID||(e.yAxisID=n.yAxisID||i.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&ee(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,a=this.getMeta(),n=this.getDataset().data||[],i=a.data;for(e=0,t=n.length;e<t;++e)i[e]=i[e]||this.createMetaData(e);a.dataset=a.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,t,a=this,n=a.getDataset(),i=n.data||(n.data=[]);a._data!==i&&(a._data&&ee(a._data,a),i&&Object.isExtensible(i)&&(t=a,(e=i)._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),X.forEach((function(t){var a="onData"+t.charAt(0).toUpperCase()+t.slice(1),n=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),i=n.apply(this,t);return N.each(e._chartjs.listeners,(function(e){"function"==typeof e[a]&&e[a].apply(e,t)})),i}})})))),a._data=i),a.resyncElements()},_configure:function(){this._config=N.merge({},[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(e,t,a){"_meta"!==e&&"data"!==e&&N._merger(e,t,a)}})},_update:function(e){this._configure(),this._cachedDataOpts=null,this.update(e)},update:N.noop,transition:function(e){for(var t=this.getMeta(),a=t.data||[],n=a.length,i=0;i<n;++i)a[i].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],a=t.length,n=0;for(e.dataset&&e.dataset.draw();n<a;++n)t[n].draw()},getStyle:function(e){var t,a=this.getMeta(),n=a.dataset;return this._configure(),n&&void 0===e?t=this._resolveDatasetElementOptions(n||{}):(e=e||0,t=this._resolveDataElementOptions(a.data[e]||{},e)),!1!==t.fill&&null!==t.fill||(t.backgroundColor=t.borderColor),t},_resolveDatasetElementOptions:function(e,t){var a,n,i,r,o=this,s=o.chart,d=o._config,l=e.custom||{},u=s.options.elements[o.datasetElementType.prototype._type]||{},c=o._datasetElementOptions,m={},_={chart:s,dataset:o.getDataset(),datasetIndex:o.index,hover:t};for(a=0,n=c.length;a<n;++a)i=c[a],r=t?"hover"+i.charAt(0).toUpperCase()+i.slice(1):i,m[i]=Z([l[r],d[r],u[r]],_);return m},_resolveDataElementOptions:function(e,t){var a=this,n=e&&e.custom,i=a._cachedDataOpts;if(i&&!n)return i;var r,o,s,d,l=a.chart,u=a._config,c=l.options.elements[a.dataElementType.prototype._type]||{},m=a._dataElementOptions,_={},h={chart:l,dataIndex:t,dataset:a.getDataset(),datasetIndex:a.index},p={cacheable:!n};if(n=n||{},N.isArray(m))for(o=0,s=m.length;o<s;++o)_[d=m[o]]=Z([n[d],u[d],c[d]],h,t,p);else for(o=0,s=(r=Object.keys(m)).length;o<s;++o)_[d=r[o]]=Z([n[d],u[m[d]],u[d],c[d]],h,t,p);return p.cacheable&&(a._cachedDataOpts=Object.freeze(_)),_},removeHoverStyle:function(e){N.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],a=e._index,n=e.custom||{},i=e._model,r=N.getHoverColor;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth},i.backgroundColor=Z([n.hoverBackgroundColor,t.hoverBackgroundColor,r(i.backgroundColor)],void 0,a),i.borderColor=Z([n.hoverBorderColor,t.hoverBorderColor,r(i.borderColor)],void 0,a),i.borderWidth=Z([n.hoverBorderWidth,t.hoverBorderWidth,i.borderWidth],void 0,a)},_removeDatasetHoverStyle:function(){var e=this.getMeta().dataset;e&&this.removeHoverStyle(e)},_setDatasetHoverStyle:function(){var e,t,a,n,i,r,o=this.getMeta().dataset,s={};if(o){for(r=o._model,i=this._resolveDatasetElementOptions(o,!0),e=0,t=(n=Object.keys(i)).length;e<t;++e)s[a=n[e]]=r[a],r[a]=i[a];o.$previousStyle=s}},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,a=e.data.length,n=t.length;n<a?e.data.splice(n,a-n):n>a&&this.insertElements(a,n-a)},insertElements:function(e,t){for(var a=0;a<t;++a)this.addElementAndReset(e+a)},onDataPush:function(){var e=arguments.length;this.insertElements(this.getDataset().data.length-e,e)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),te.extend=N.inherits;var ae=te,ne=2*Math.PI;function ie(e,t){var a=t.startAngle,n=t.endAngle,i=t.pixelMargin,r=i/t.outerRadius,o=t.x,s=t.y;e.beginPath(),e.arc(o,s,t.outerRadius,a-r,n+r),t.innerRadius>i?(r=i/t.innerRadius,e.arc(o,s,t.innerRadius-i,n+r,a-r,!0)):e.arc(o,s,i,n+Math.PI/2,a-Math.PI/2),e.closePath(),e.clip()}function re(e,t,a){var n="inner"===t.borderAlign;n?(e.lineWidth=2*t.borderWidth,e.lineJoin="round"):(e.lineWidth=t.borderWidth,e.lineJoin="bevel"),a.fullCircles&&function(e,t,a,n){var i,r=a.endAngle;for(n&&(a.endAngle=a.startAngle+ne,ie(e,a),a.endAngle=r,a.endAngle===a.startAngle&&a.fullCircles&&(a.endAngle+=ne,a.fullCircles--)),e.beginPath(),e.arc(a.x,a.y,a.innerRadius,a.startAngle+ne,a.startAngle,!0),i=0;i<a.fullCircles;++i)e.stroke();for(e.beginPath(),e.arc(a.x,a.y,t.outerRadius,a.startAngle,a.startAngle+ne),i=0;i<a.fullCircles;++i)e.stroke()}(e,t,a,n),n&&ie(e,a),e.beginPath(),e.arc(a.x,a.y,t.outerRadius,a.startAngle,a.endAngle),e.arc(a.x,a.y,a.innerRadius,a.endAngle,a.startAngle,!0),e.closePath(),e.stroke()}E._set("global",{elements:{arc:{backgroundColor:E.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var oe=q.extend({_type:"arc",inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var a=this._view;if(a){for(var n=N.getAngleFromPoint(a,{x:e,y:t}),i=n.angle,r=n.distance,o=a.startAngle,s=a.endAngle;s<o;)s+=ne;for(;i>s;)i-=ne;for(;i<o;)i+=ne;var d=i>=o&&i<=s,l=r>=a.innerRadius&&r<=a.outerRadius;return d&&l}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,a=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*a,y:e.y+Math.sin(t)*a}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,a=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*a,y:e.y+Math.sin(t)*a}},draw:function(){var e,t=this._chart.ctx,a=this._view,n="inner"===a.borderAlign?.33:0,i={x:a.x,y:a.y,innerRadius:a.innerRadius,outerRadius:Math.max(a.outerRadius-n,0),pixelMargin:n,startAngle:a.startAngle,endAngle:a.endAngle,fullCircles:Math.floor(a.circumference/ne)};if(t.save(),t.fillStyle=a.backgroundColor,t.strokeStyle=a.borderColor,i.fullCircles){for(i.endAngle=i.startAngle+ne,t.beginPath(),t.arc(i.x,i.y,i.outerRadius,i.startAngle,i.endAngle),t.arc(i.x,i.y,i.innerRadius,i.endAngle,i.startAngle,!0),t.closePath(),e=0;e<i.fullCircles;++e)t.fill();i.endAngle=i.startAngle+a.circumference%ne}t.beginPath(),t.arc(i.x,i.y,i.outerRadius,i.startAngle,i.endAngle),t.arc(i.x,i.y,i.innerRadius,i.endAngle,i.startAngle,!0),t.closePath(),t.fill(),a.borderWidth&&re(t,a,i),t.restore()}}),se=N.valueOrDefault,de=E.global.defaultColor;E._set("global",{elements:{line:{tension:.4,backgroundColor:de,borderWidth:3,borderColor:de,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var le=q.extend({_type:"line",draw:function(){var e,t,a,n=this,i=n._view,r=n._chart.ctx,o=i.spanGaps,s=n._children.slice(),d=E.global,l=d.elements.line,u=-1,c=n._loop;if(s.length){if(n._loop){for(e=0;e<s.length;++e)if(t=N.previousItem(s,e),!s[e]._view.skip&&t._view.skip){s=s.slice(e).concat(s.slice(0,e)),c=o;break}c&&s.push(s[0])}for(r.save(),r.lineCap=i.borderCapStyle||l.borderCapStyle,r.setLineDash&&r.setLineDash(i.borderDash||l.borderDash),r.lineDashOffset=se(i.borderDashOffset,l.borderDashOffset),r.lineJoin=i.borderJoinStyle||l.borderJoinStyle,r.lineWidth=se(i.borderWidth,l.borderWidth),r.strokeStyle=i.borderColor||d.defaultColor,r.beginPath(),(a=s[0]._view).skip||(r.moveTo(a.x,a.y),u=0),e=1;e<s.length;++e)a=s[e]._view,t=-1===u?N.previousItem(s,e):s[u],a.skip||(u!==e-1&&!o||-1===u?r.moveTo(a.x,a.y):N.canvas.lineTo(r,t._view,a),u=e);c&&r.closePath(),r.stroke(),r.restore()}}}),ue=N.valueOrDefault,ce=E.global.defaultColor;function me(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}E._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:ce,borderColor:ce,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var _e=q.extend({_type:"point",inRange:function(e,t){var a=this._view;return!!a&&Math.pow(e-a.x,2)+Math.pow(t-a.y,2)<Math.pow(a.hitRadius+a.radius,2)},inLabelRange:me,inXRange:me,inYRange:function(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius},getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,a=this._chart.ctx,n=t.pointStyle,i=t.rotation,r=t.radius,o=t.x,s=t.y,d=E.global,l=d.defaultColor;t.skip||(void 0===e||N.canvas._isPointInArea(t,e))&&(a.strokeStyle=t.borderColor||l,a.lineWidth=ue(t.borderWidth,d.elements.point.borderWidth),a.fillStyle=t.backgroundColor||l,N.canvas.drawPoint(a,n,r,o,s,i))}}),he=E.global.defaultColor;function pe(e){return e&&void 0!==e.width}function fe(e){var t,a,n,i,r;return pe(e)?(r=e.width/2,t=e.x-r,a=e.x+r,n=Math.min(e.y,e.base),i=Math.max(e.y,e.base)):(r=e.height/2,t=Math.min(e.x,e.base),a=Math.max(e.x,e.base),n=e.y-r,i=e.y+r),{left:t,top:n,right:a,bottom:i}}function ge(e,t,a){return e===t?a:e===a?t:e}function ye(e,t,a){var n,i,r,o,s=e.borderWidth,d=function(e){var t=e.borderSkipped,a={};return t?(e.horizontal?e.base>e.x&&(t=ge(t,"left","right")):e.base<e.y&&(t=ge(t,"bottom","top")),a[t]=!0,a):a}(e);return N.isObject(s)?(n=+s.top||0,i=+s.right||0,r=+s.bottom||0,o=+s.left||0):n=i=r=o=+s||0,{t:d.top||n<0?0:n>a?a:n,r:d.right||i<0?0:i>t?t:i,b:d.bottom||r<0?0:r>a?a:r,l:d.left||o<0?0:o>t?t:o}}function Me(e,t,a){var n=null===t,i=null===a,r=!(!e||n&&i)&&fe(e);return r&&(n||t>=r.left&&t<=r.right)&&(i||a>=r.top&&a<=r.bottom)}E._set("global",{elements:{rectangle:{backgroundColor:he,borderColor:he,borderSkipped:"bottom",borderWidth:0}}});var be=q.extend({_type:"rectangle",draw:function(){var e=this._chart.ctx,t=this._view,a=function(e){var t=fe(e),a=t.right-t.left,n=t.bottom-t.top,i=ye(e,a/2,n/2);return{outer:{x:t.left,y:t.top,w:a,h:n},inner:{x:t.left+i.l,y:t.top+i.t,w:a-i.l-i.r,h:n-i.t-i.b}}}(t),n=a.outer,i=a.inner;e.fillStyle=t.backgroundColor,e.fillRect(n.x,n.y,n.w,n.h),n.w===i.w&&n.h===i.h||(e.save(),e.beginPath(),e.rect(n.x,n.y,n.w,n.h),e.clip(),e.fillStyle=t.borderColor,e.rect(i.x,i.y,i.w,i.h),e.fill("evenodd"),e.restore())},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){return Me(this._view,e,t)},inLabelRange:function(e,t){var a=this._view;return pe(a)?Me(a,e,null):Me(a,null,t)},inXRange:function(e){return Me(this._view,e,null)},inYRange:function(e){return Me(this._view,null,e)},getCenterPoint:function(){var e,t,a=this._view;return pe(a)?(e=a.x,t=(a.y+a.base)/2):(e=(a.x+a.base)/2,t=a.y),{x:e,y:t}},getArea:function(){var e=this._view;return pe(e)?e.width*Math.abs(e.y-e.base):e.height*Math.abs(e.x-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),ve={},ke=oe,Le=le,xe=_e,we=be;ve.Arc=ke,ve.Line=Le,ve.Point=xe,ve.Rectangle=we;var Ye=N._deprecated,De=N.valueOrDefault;function Te(e,t,a){var n,i,r=a.barThickness,o=t.stackCount,s=t.pixels[e],d=N.isNullOrUndef(r)?function(e,t){var a,n,i,r,o=e._length;for(i=1,r=t.length;i<r;++i)o=Math.min(o,Math.abs(t[i]-t[i-1]));for(i=0,r=e.getTicks().length;i<r;++i)n=e.getPixelForTick(i),o=i>0?Math.min(o,Math.abs(n-a)):o,a=n;return o}(t.scale,t.pixels):-1;return N.isNullOrUndef(r)?(n=d*a.categoryPercentage,i=a.barPercentage):(n=r*o,i=1),{chunk:n/o,ratio:i,start:s-n/2}}E._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),E._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var Se=ae.extend({dataElementType:ve.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var e,t,a=this;ae.prototype.initialize.apply(a,arguments),(e=a.getMeta()).stack=a.getDataset().stack,e.bar=!0,t=a._getIndexScale().options,Ye("bar chart",t.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),Ye("bar chart",t.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),Ye("bar chart",t.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),Ye("bar chart",a._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),Ye("bar chart",t.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(e){var t,a,n=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,a=n.length;t<a;++t)this.updateElement(n[t],t,e)},updateElement:function(e,t,a){var n=this,i=n.getMeta(),r=n.getDataset(),o=n._resolveDataElementOptions(e,t);e._xScale=n.getScaleForId(i.xAxisID),e._yScale=n.getScaleForId(i.yAxisID),e._datasetIndex=n.index,e._index=t,e._model={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderSkipped:o.borderSkipped,borderWidth:o.borderWidth,datasetLabel:r.label,label:n.chart.data.labels[t]},N.isArray(r.data[t])&&(e._model.borderSkipped=null),n._updateElementGeometry(e,t,a,o),e.pivot()},_updateElementGeometry:function(e,t,a,n){var i=this,r=e._model,o=i._getValueScale(),s=o.getBasePixel(),d=o.isHorizontal(),l=i._ruler||i.getRuler(),u=i.calculateBarValuePixels(i.index,t,n),c=i.calculateBarIndexPixels(i.index,t,l,n);r.horizontal=d,r.base=a?s:u.base,r.x=d?a?s:u.head:c.center,r.y=d?c.center:a?s:u.head,r.height=d?c.size:void 0,r.width=d?void 0:c.size},_getStacks:function(e){var t,a,n=this._getIndexScale(),i=n._getMatchingVisibleMetas(this._type),r=n.options.stacked,o=i.length,s=[];for(t=0;t<o&&(a=i[t],(!1===r||-1===s.indexOf(a.stack)||void 0===r&&void 0===a.stack)&&s.push(a.stack),a.index!==e);++t);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var a=this._getStacks(e),n=void 0!==t?a.indexOf(t):-1;return-1===n?a.length-1:n},getRuler:function(){var e,t,a=this._getIndexScale(),n=[];for(e=0,t=this.getMeta().data.length;e<t;++e)n.push(a.getPixelForValue(null,e,this.index));return{pixels:n,start:a._startPixel,end:a._endPixel,stackCount:this.getStackCount(),scale:a}},calculateBarValuePixels:function(e,t,a){var n,i,r,o,s,d,l,u=this.chart,c=this._getValueScale(),m=c.isHorizontal(),_=u.data.datasets,h=c._getMatchingVisibleMetas(this._type),p=c._parseValue(_[e].data[t]),f=a.minBarLength,g=c.options.stacked,y=this.getMeta().stack,M=void 0===p.start?0:p.max>=0&&p.min>=0?p.min:p.max,b=void 0===p.start?p.end:p.max>=0&&p.min>=0?p.max-p.min:p.min-p.max,v=h.length;if(g||void 0===g&&void 0!==y)for(n=0;n<v&&(i=h[n]).index!==e;++n)i.stack===y&&(r=void 0===(l=c._parseValue(_[i.index].data[t])).start?l.end:l.min>=0&&l.max>=0?l.max:l.min,(p.min<0&&r<0||p.max>=0&&r>0)&&(M+=r));return o=c.getPixelForValue(M),d=(s=c.getPixelForValue(M+b))-o,void 0!==f&&Math.abs(d)<f&&(d=f,s=b>=0&&!m||b<0&&m?o-f:o+f),{size:d,base:o,head:s,center:s+d/2}},calculateBarIndexPixels:function(e,t,a,n){var i="flex"===n.barThickness?function(e,t,a){var n,i=t.pixels,r=i[e],o=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null,d=a.categoryPercentage;return null===o&&(o=r-(null===s?t.end-t.start:s-r)),null===s&&(s=r+r-o),n=r-(r-Math.min(o,s))/2*d,{chunk:Math.abs(s-o)/2*d/t.stackCount,ratio:a.barPercentage,start:n}}(t,a,n):Te(t,a,n),r=this.getStackIndex(e,this.getMeta().stack),o=i.start+i.chunk*r+i.chunk/2,s=Math.min(De(n.maxBarThickness,1/0),i.chunk*i.ratio);return{base:o-s/2,head:o+s/2,center:o,size:s}},draw:function(){var e=this.chart,t=this._getValueScale(),a=this.getMeta().data,n=this.getDataset(),i=a.length,r=0;for(N.canvas.clipArea(e.ctx,e.chartArea);r<i;++r){var o=t._parseValue(n.data[r]);isNaN(o.min)||isNaN(o.max)||a[r].draw()}N.canvas.unclipArea(e.ctx)},_resolveDataElementOptions:function(){var e=this,t=N.extend({},ae.prototype._resolveDataElementOptions.apply(e,arguments)),a=e._getIndexScale().options,n=e._getValueScale().options;return t.barPercentage=De(a.barPercentage,t.barPercentage),t.barThickness=De(a.barThickness,t.barThickness),t.categoryPercentage=De(a.categoryPercentage,t.categoryPercentage),t.maxBarThickness=De(a.maxBarThickness,t.maxBarThickness),t.minBarLength=De(n.minBarLength,t.minBarLength),t}}),He=N.valueOrDefault,je=N.options.resolve;E._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var a=t.datasets[e.datasetIndex].label||"",n=t.datasets[e.datasetIndex].data[e.index];return a+": ("+e.xLabel+", "+e.yLabel+", "+n.r+")"}}}});var Pe=ae.extend({dataElementType:ve.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(e){var t=this,a=t.getMeta().data;N.each(a,(function(a,n){t.updateElement(a,n,e)}))},updateElement:function(e,t,a){var n=this,i=n.getMeta(),r=e.custom||{},o=n.getScaleForId(i.xAxisID),s=n.getScaleForId(i.yAxisID),d=n._resolveDataElementOptions(e,t),l=n.getDataset().data[t],u=n.index,c=a?o.getPixelForDecimal(.5):o.getPixelForValue("object"==typeof l?l:NaN,t,u),m=a?s.getBasePixel():s.getPixelForValue(l,t,u);e._xScale=o,e._yScale=s,e._options=d,e._datasetIndex=u,e._index=t,e._model={backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,hitRadius:d.hitRadius,pointStyle:d.pointStyle,rotation:d.rotation,radius:a?0:d.radius,skip:r.skip||isNaN(c)||isNaN(m),x:c,y:m},e.pivot()},setHoverStyle:function(e){var t=e._model,a=e._options,n=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=He(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=He(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=He(a.hoverBorderWidth,a.borderWidth),t.radius=a.radius+a.hoverRadius},_resolveDataElementOptions:function(e,t){var a=this,n=a.chart,i=a.getDataset(),r=e.custom||{},o=i.data[t]||{},s=ae.prototype._resolveDataElementOptions.apply(a,arguments),d={chart:n,dataIndex:t,dataset:i,datasetIndex:a.index};return a._cachedDataOpts===s&&(s=N.extend({},s)),s.radius=je([r.radius,o.r,a._config.radius,n.options.elements.point.radius],d,t),s}}),Ae=N.valueOrDefault,Ce=Math.PI,Oe=2*Ce,Ee=Ce/2;E._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t,a,n,i=document.createElement("ul"),r=e.data,o=r.datasets,s=r.labels;if(i.setAttribute("class",e.id+"-legend"),o.length)for(t=0,a=o[0].data.length;t<a;++t)(n=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[t],s[t]&&n.appendChild(document.createTextNode(s[t]));return i.outerHTML},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(a,n){var i=e.getDatasetMeta(0),r=i.controller.getStyle(n);return{text:a,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(t.datasets[0].data[n])||i.data[n].hidden,index:n}})):[]}},onClick:function(e,t){var a,n,i,r=t.index,o=this.chart;for(a=0,n=(o.data.datasets||[]).length;a<n;++a)(i=o.getDatasetMeta(a)).data[r]&&(i.data[r].hidden=!i.data[r].hidden);o.update()}},cutoutPercentage:50,rotation:-Ee,circumference:Oe,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var a=t.labels[e.index],n=": "+t.datasets[e.datasetIndex].data[e.index];return N.isArray(a)?(a=a.slice())[0]+=n:a+=n,a}}}});var Fe=ae.extend({dataElementType:ve.Arc,linkScales:N.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(e){for(var t=0,a=0;a<e;++a)this.chart.isDatasetVisible(a)&&++t;return t},update:function(e){var t,a,n,i,r=this,o=r.chart,s=o.chartArea,d=o.options,l=1,u=1,c=0,m=0,_=r.getMeta(),h=_.data,p=d.cutoutPercentage/100||0,f=d.circumference,g=r._getRingWeight(r.index);if(f<Oe){var y=d.rotation%Oe,M=(y+=y>=Ce?-Oe:y<-Ce?Oe:0)+f,b=Math.cos(y),v=Math.sin(y),k=Math.cos(M),L=Math.sin(M),x=y<=0&&M>=0||M>=Oe,w=y<=Ee&&M>=Ee||M>=Oe+Ee,Y=y<=-Ee&&M>=-Ee||M>=Ce+Ee,D=y===-Ce||M>=Ce?-1:Math.min(b,b*p,k,k*p),T=Y?-1:Math.min(v,v*p,L,L*p),S=x?1:Math.max(b,b*p,k,k*p),H=w?1:Math.max(v,v*p,L,L*p);l=(S-D)/2,u=(H-T)/2,c=-(S+D)/2,m=-(H+T)/2}for(n=0,i=h.length;n<i;++n)h[n]._options=r._resolveDataElementOptions(h[n],n);for(o.borderWidth=r.getMaxBorderWidth(),t=(s.right-s.left-o.borderWidth)/l,a=(s.bottom-s.top-o.borderWidth)/u,o.outerRadius=Math.max(Math.min(t,a)/2,0),o.innerRadius=Math.max(o.outerRadius*p,0),o.radiusLength=(o.outerRadius-o.innerRadius)/(r._getVisibleDatasetWeightTotal()||1),o.offsetX=c*o.outerRadius,o.offsetY=m*o.outerRadius,_.total=r.calculateTotal(),r.outerRadius=o.outerRadius-o.radiusLength*r._getRingWeightOffset(r.index),r.innerRadius=Math.max(r.outerRadius-o.radiusLength*g,0),n=0,i=h.length;n<i;++n)r.updateElement(h[n],n,e)},updateElement:function(e,t,a){var n=this,i=n.chart,r=i.chartArea,o=i.options,s=o.animation,d=(r.left+r.right)/2,l=(r.top+r.bottom)/2,u=o.rotation,c=o.rotation,m=n.getDataset(),_=a&&s.animateRotate||e.hidden?0:n.calculateCircumference(m.data[t])*(o.circumference/Oe),h=a&&s.animateScale?0:n.innerRadius,p=a&&s.animateScale?0:n.outerRadius,f=e._options||{};N.extend(e,{_datasetIndex:n.index,_index:t,_model:{backgroundColor:f.backgroundColor,borderColor:f.borderColor,borderWidth:f.borderWidth,borderAlign:f.borderAlign,x:d+i.offsetX,y:l+i.offsetY,startAngle:u,endAngle:c,circumference:_,outerRadius:p,innerRadius:h,label:N.valueAtIndexOrDefault(m.label,t,i.data.labels[t])}});var g=e._model;a&&s.animateRotate||(g.startAngle=0===t?o.rotation:n.getMeta().data[t-1]._model.endAngle,g.endAngle=g.startAngle+g.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),a=this.getMeta(),n=0;return N.each(a.data,(function(a,i){e=t.data[i],isNaN(e)||a.hidden||(n+=Math.abs(e))})),n},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?Oe*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){var t,a,n,i,r,o,s,d,l=0,u=this.chart;if(!e)for(t=0,a=u.data.datasets.length;t<a;++t)if(u.isDatasetVisible(t)){e=(n=u.getDatasetMeta(t)).data,t!==this.index&&(r=n.controller);break}if(!e)return 0;for(t=0,a=e.length;t<a;++t)i=e[t],r?(r._configure(),o=r._resolveDataElementOptions(i,t)):o=i._options,"inner"!==o.borderAlign&&(s=o.borderWidth,l=(d=o.hoverBorderWidth)>(l=s>l?s:l)?d:l);return l},setHoverStyle:function(e){var t=e._model,a=e._options,n=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=Ae(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=Ae(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=Ae(a.hoverBorderWidth,a.borderWidth)},_getRingWeightOffset:function(e){for(var t=0,a=0;a<e;++a)this.chart.isDatasetVisible(a)&&(t+=this._getRingWeight(a));return t},_getRingWeight:function(e){return Math.max(Ae(this.chart.data.datasets[e].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});E._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),E._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var We=Se.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),ze=N.valueOrDefault,Ie=N.options.resolve,Ne=N.canvas._isPointInArea;function Re(e,t){var a=e&&e.options.ticks||{},n=a.reverse,i=void 0===a.min?t:0,r=void 0===a.max?t:0;return{start:n?r:i,end:n?i:r}}function Be(e,t,a){var n=a/2,i=Re(e,n),r=Re(t,n);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}function Ve(e){var t,a,n,i;return N.isObject(e)?(t=e.top,a=e.right,n=e.bottom,i=e.left):t=a=n=i=e,{top:t,right:a,bottom:n,left:i}}E._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Ge=ae.extend({datasetElementType:ve.Line,dataElementType:ve.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(e){var t,a,n=this,i=n.getMeta(),r=i.dataset,o=i.data||[],s=n.chart.options,d=n._config,l=n._showLine=ze(d.showLine,s.showLines);for(n._xScale=n.getScaleForId(i.xAxisID),n._yScale=n.getScaleForId(i.yAxisID),l&&(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),r._scale=n._yScale,r._datasetIndex=n.index,r._children=o,r._model=n._resolveDatasetElementOptions(r),r.pivot()),t=0,a=o.length;t<a;++t)n.updateElement(o[t],t,e);for(l&&0!==r._model.tension&&n.updateBezierControlPoints(),t=0,a=o.length;t<a;++t)o[t].pivot()},updateElement:function(e,t,a){var n,i,r=this,o=r.getMeta(),s=e.custom||{},d=r.getDataset(),l=r.index,u=d.data[t],c=r._xScale,m=r._yScale,_=o.dataset._model,h=r._resolveDataElementOptions(e,t);n=c.getPixelForValue("object"==typeof u?u:NaN,t,l),i=a?m.getBasePixel():r.calculatePointY(u,t,l),e._xScale=c,e._yScale=m,e._options=h,e._datasetIndex=l,e._index=t,e._model={x:n,y:i,skip:s.skip||isNaN(n)||isNaN(i),radius:h.radius,pointStyle:h.pointStyle,rotation:h.rotation,backgroundColor:h.backgroundColor,borderColor:h.borderColor,borderWidth:h.borderWidth,tension:ze(s.tension,_?_.tension:0),steppedLine:!!_&&_.steppedLine,hitRadius:h.hitRadius}},_resolveDatasetElementOptions:function(e){var t=this,a=t._config,n=e.custom||{},i=t.chart.options,r=i.elements.line,o=ae.prototype._resolveDatasetElementOptions.apply(t,arguments);return o.spanGaps=ze(a.spanGaps,i.spanGaps),o.tension=ze(a.lineTension,r.tension),o.steppedLine=Ie([n.steppedLine,a.steppedLine,r.stepped]),o.clip=Ve(ze(a.clip,Be(t._xScale,t._yScale,o.borderWidth))),o},calculatePointY:function(e,t,a){var n,i,r,o,s,d,l,u=this.chart,c=this._yScale,m=0,_=0;if(c.options.stacked){for(s=+c.getRightValue(e),l=(d=u._getSortedVisibleDatasetMetas()).length,n=0;n<l&&(r=d[n]).index!==a;++n)i=u.data.datasets[r.index],"line"===r.type&&r.yAxisID===c.id&&((o=+c.getRightValue(i.data[t]))<0?_+=o||0:m+=o||0);return s<0?c.getPixelForValue(_+s):c.getPixelForValue(m+s)}return c.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,a,n,i=this.chart,r=this.getMeta(),o=r.dataset._model,s=i.chartArea,d=r.data||[];function l(e,t,a){return Math.max(Math.min(e,a),t)}if(o.spanGaps&&(d=d.filter((function(e){return!e._model.skip}))),"monotone"===o.cubicInterpolationMode)N.splineCurveMonotone(d);else for(e=0,t=d.length;e<t;++e)a=d[e]._model,n=N.splineCurve(N.previousItem(d,e)._model,a,N.nextItem(d,e)._model,o.tension),a.controlPointPreviousX=n.previous.x,a.controlPointPreviousY=n.previous.y,a.controlPointNextX=n.next.x,a.controlPointNextY=n.next.y;if(i.options.elements.line.capBezierPoints)for(e=0,t=d.length;e<t;++e)a=d[e]._model,Ne(a,s)&&(e>0&&Ne(d[e-1]._model,s)&&(a.controlPointPreviousX=l(a.controlPointPreviousX,s.left,s.right),a.controlPointPreviousY=l(a.controlPointPreviousY,s.top,s.bottom)),e<d.length-1&&Ne(d[e+1]._model,s)&&(a.controlPointNextX=l(a.controlPointNextX,s.left,s.right),a.controlPointNextY=l(a.controlPointNextY,s.top,s.bottom)))},draw:function(){var e,t=this.chart,a=this.getMeta(),n=a.data||[],i=t.chartArea,r=t.canvas,o=0,s=n.length;for(this._showLine&&(e=a.dataset._model.clip,N.canvas.clipArea(t.ctx,{left:!1===e.left?0:i.left-e.left,right:!1===e.right?r.width:i.right+e.right,top:!1===e.top?0:i.top-e.top,bottom:!1===e.bottom?r.height:i.bottom+e.bottom}),a.dataset.draw(),N.canvas.unclipArea(t.ctx));o<s;++o)n[o].draw(i)},setHoverStyle:function(e){var t=e._model,a=e._options,n=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=ze(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=ze(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=ze(a.hoverBorderWidth,a.borderWidth),t.radius=ze(a.hoverRadius,a.radius)}}),Je=N.options.resolve;E._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t,a,n,i=document.createElement("ul"),r=e.data,o=r.datasets,s=r.labels;if(i.setAttribute("class",e.id+"-legend"),o.length)for(t=0,a=o[0].data.length;t<a;++t)(n=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[t],s[t]&&n.appendChild(document.createTextNode(s[t]));return i.outerHTML},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(a,n){var i=e.getDatasetMeta(0),r=i.controller.getStyle(n);return{text:a,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(t.datasets[0].data[n])||i.data[n].hidden,index:n}})):[]}},onClick:function(e,t){var a,n,i,r=t.index,o=this.chart;for(a=0,n=(o.data.datasets||[]).length;a<n;++a)(i=o.getDatasetMeta(a)).data[r].hidden=!i.data[r].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var Ue=ae.extend({dataElementType:ve.Arc,linkScales:N.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(e){var t,a,n,i=this,r=i.getDataset(),o=i.getMeta(),s=i.chart.options.startAngle||0,d=i._starts=[],l=i._angles=[],u=o.data;for(i._updateRadius(),o.count=i.countVisibleElements(),t=0,a=r.data.length;t<a;t++)d[t]=s,n=i._computeAngle(t),l[t]=n,s+=n;for(t=0,a=u.length;t<a;++t)u[t]._options=i._resolveDataElementOptions(u[t],t),i.updateElement(u[t],t,e)},_updateRadius:function(){var e=this,t=e.chart,a=t.chartArea,n=t.options,i=Math.min(a.right-a.left,a.bottom-a.top);t.outerRadius=Math.max(i/2,0),t.innerRadius=Math.max(n.cutoutPercentage?t.outerRadius/100*n.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,a){var n=this,i=n.chart,r=n.getDataset(),o=i.options,s=o.animation,d=i.scale,l=i.data.labels,u=d.xCenter,c=d.yCenter,m=o.startAngle,_=e.hidden?0:d.getDistanceFromCenterForValue(r.data[t]),h=n._starts[t],p=h+(e.hidden?0:n._angles[t]),f=s.animateScale?0:d.getDistanceFromCenterForValue(r.data[t]),g=e._options||{};N.extend(e,{_datasetIndex:n.index,_index:t,_scale:d,_model:{backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,borderAlign:g.borderAlign,x:u,y:c,innerRadius:0,outerRadius:a?f:_,startAngle:a&&s.animateRotate?m:h,endAngle:a&&s.animateRotate?m:p,label:N.valueAtIndexOrDefault(l,t,l[t])}}),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),a=0;return N.each(t.data,(function(t,n){isNaN(e.data[n])||t.hidden||a++})),a},setHoverStyle:function(e){var t=e._model,a=e._options,n=N.getHoverColor,i=N.valueOrDefault;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=i(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=i(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=i(a.hoverBorderWidth,a.borderWidth)},_computeAngle:function(e){var t=this,a=this.getMeta().count,n=t.getDataset(),i=t.getMeta();if(isNaN(n.data[e])||i.data[e].hidden)return 0;var r={chart:t.chart,dataIndex:e,dataset:n,datasetIndex:t.index};return Je([t.chart.options.elements.arc.angle,2*Math.PI/a],r,e)}});E._set("pie",N.clone(E.doughnut)),E._set("pie",{cutoutPercentage:0});var qe=Fe,Ke=N.valueOrDefault;E._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var $e=ae.extend({datasetElementType:ve.Line,dataElementType:ve.Point,linkScales:N.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(e){var t,a,n=this,i=n.getMeta(),r=i.dataset,o=i.data||[],s=n.chart.scale,d=n._config;for(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),r._scale=s,r._datasetIndex=n.index,r._children=o,r._loop=!0,r._model=n._resolveDatasetElementOptions(r),r.pivot(),t=0,a=o.length;t<a;++t)n.updateElement(o[t],t,e);for(n.updateBezierControlPoints(),t=0,a=o.length;t<a;++t)o[t].pivot()},updateElement:function(e,t,a){var n=this,i=e.custom||{},r=n.getDataset(),o=n.chart.scale,s=o.getPointPositionForValue(t,r.data[t]),d=n._resolveDataElementOptions(e,t),l=n.getMeta().dataset._model,u=a?o.xCenter:s.x,c=a?o.yCenter:s.y;e._scale=o,e._options=d,e._datasetIndex=n.index,e._index=t,e._model={x:u,y:c,skip:i.skip||isNaN(u)||isNaN(c),radius:d.radius,pointStyle:d.pointStyle,rotation:d.rotation,backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,tension:Ke(i.tension,l?l.tension:0),hitRadius:d.hitRadius}},_resolveDatasetElementOptions:function(){var e=this,t=e._config,a=e.chart.options,n=ae.prototype._resolveDatasetElementOptions.apply(e,arguments);return n.spanGaps=Ke(t.spanGaps,a.spanGaps),n.tension=Ke(t.lineTension,a.elements.line.tension),n},updateBezierControlPoints:function(){var e,t,a,n,i=this.getMeta(),r=this.chart.chartArea,o=i.data||[];function s(e,t,a){return Math.max(Math.min(e,a),t)}for(i.dataset._model.spanGaps&&(o=o.filter((function(e){return!e._model.skip}))),e=0,t=o.length;e<t;++e)a=o[e]._model,n=N.splineCurve(N.previousItem(o,e,!0)._model,a,N.nextItem(o,e,!0)._model,a.tension),a.controlPointPreviousX=s(n.previous.x,r.left,r.right),a.controlPointPreviousY=s(n.previous.y,r.top,r.bottom),a.controlPointNextX=s(n.next.x,r.left,r.right),a.controlPointNextY=s(n.next.y,r.top,r.bottom)},setHoverStyle:function(e){var t=e._model,a=e._options,n=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Ke(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=Ke(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=Ke(a.hoverBorderWidth,a.borderWidth),t.radius=Ke(a.hoverRadius,a.radius)}});E._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}}),E._set("global",{datasets:{scatter:{showLine:!1}}});var Qe={bar:Se,bubble:Pe,doughnut:Fe,horizontalBar:We,line:Ge,polarArea:Ue,pie:qe,radar:$e,scatter:Ge};function Ze(e,t){return e.native?{x:e.x,y:e.y}:N.getRelativePosition(e,t)}function Xe(e,t){var a,n,i,r,o,s,d=e._getSortedVisibleDatasetMetas();for(n=0,r=d.length;n<r;++n)for(i=0,o=(a=d[n].data).length;i<o;++i)(s=a[i])._view.skip||t(s)}function et(e,t){var a=[];return Xe(e,(function(e){e.inRange(t.x,t.y)&&a.push(e)})),a}function tt(e,t,a,n){var i=Number.POSITIVE_INFINITY,r=[];return Xe(e,(function(e){if(!a||e.inRange(t.x,t.y)){var o=e.getCenterPoint(),s=n(t,o);s<i?(r=[e],i=s):s===i&&r.push(e)}})),r}function at(e){var t=-1!==e.indexOf("x"),a=-1!==e.indexOf("y");return function(e,n){var i=t?Math.abs(e.x-n.x):0,r=a?Math.abs(e.y-n.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(r,2))}}function nt(e,t,a){var n=Ze(t,e);a.axis=a.axis||"x";var i=at(a.axis),r=a.intersect?et(e,n):tt(e,n,!1,i),o=[];return r.length?(e._getSortedVisibleDatasetMetas().forEach((function(e){var t=e.data[r[0]._index];t&&!t._view.skip&&o.push(t)})),o):[]}var it={modes:{single:function(e,t){var a=Ze(t,e),n=[];return Xe(e,(function(e){if(e.inRange(a.x,a.y))return n.push(e),n})),n.slice(0,1)},label:nt,index:nt,dataset:function(e,t,a){var n=Ze(t,e);a.axis=a.axis||"xy";var i=at(a.axis),r=a.intersect?et(e,n):tt(e,n,!1,i);return r.length>0&&(r=e.getDatasetMeta(r[0]._datasetIndex).data),r},"x-axis":function(e,t){return nt(e,t,{intersect:!1})},point:function(e,t){return et(e,Ze(t,e))},nearest:function(e,t,a){var n=Ze(t,e);a.axis=a.axis||"xy";var i=at(a.axis);return tt(e,n,a.intersect,i)},x:function(e,t,a){var n=Ze(t,e),i=[],r=!1;return Xe(e,(function(e){e.inXRange(n.x)&&i.push(e),e.inRange(n.x,n.y)&&(r=!0)})),a.intersect&&!r&&(i=[]),i},y:function(e,t,a){var n=Ze(t,e),i=[],r=!1;return Xe(e,(function(e){e.inYRange(n.y)&&i.push(e),e.inRange(n.x,n.y)&&(r=!0)})),a.intersect&&!r&&(i=[]),i}}},rt=N.extend;function ot(e,t){return N.where(e,(function(e){return e.pos===t}))}function st(e,t){return e.sort((function(e,a){var n=t?a:e,i=t?e:a;return n.weight===i.weight?n.index-i.index:n.weight-i.weight}))}function dt(e,t,a,n){return Math.max(e[a],t[a])+Math.max(e[n],t[n])}function lt(e,t,a){var n,i,r=a.box,o=e.maxPadding;if(a.size&&(e[a.pos]-=a.size),a.size=a.horizontal?r.height:r.width,e[a.pos]+=a.size,r.getPadding){var s=r.getPadding();o.top=Math.max(o.top,s.top),o.left=Math.max(o.left,s.left),o.bottom=Math.max(o.bottom,s.bottom),o.right=Math.max(o.right,s.right)}if(n=t.outerWidth-dt(o,e,"left","right"),i=t.outerHeight-dt(o,e,"top","bottom"),n!==e.w||i!==e.h)return e.w=n,e.h=i,a.horizontal?n!==e.w:i!==e.h}function ut(e,t){var a=t.maxPadding;function n(e){var n={left:0,top:0,right:0,bottom:0};return e.forEach((function(e){n[e]=Math.max(t[e],a[e])})),n}return n(e?["left","right"]:["top","bottom"])}function ct(e,t,a){var n,i,r,o,s,d,l=[];for(n=0,i=e.length;n<i;++n)(o=(r=e[n]).box).update(r.width||t.w,r.height||t.h,ut(r.horizontal,t)),lt(t,a,r)&&(d=!0,l.length&&(s=!0)),o.fullWidth||l.push(r);return s&&ct(l,t,a)||d}function mt(e,t,a){var n,i,r,o,s=a.padding,d=t.x,l=t.y;for(n=0,i=e.length;n<i;++n)o=(r=e[n]).box,r.horizontal?(o.left=o.fullWidth?s.left:t.left,o.right=o.fullWidth?a.outerWidth-s.right:t.left+t.w,o.top=l,o.bottom=l+o.height,o.width=o.right-o.left,l=o.bottom):(o.left=d,o.right=d+o.width,o.top=t.top,o.bottom=t.top+t.h,o.height=o.bottom-o.top,d=o.right);t.x=d,t.y=l}E._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var _t,ht={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw:function(){t.draw.apply(t,arguments)}}]},e.boxes.push(t)},removeBox:function(e,t){var a=e.boxes?e.boxes.indexOf(t):-1;-1!==a&&e.boxes.splice(a,1)},configure:function(e,t,a){for(var n,i=["fullWidth","position","weight"],r=i.length,o=0;o<r;++o)n=i[o],a.hasOwnProperty(n)&&(t[n]=a[n])},update:function(e,t,a){if(e){var n=e.options.layout||{},i=N.options.toPadding(n.padding),r=t-i.width,o=a-i.height,s=function(e){var t=function(e){var t,a,n,i=[];for(t=0,a=(e||[]).length;t<a;++t)n=e[t],i.push({index:t,box:n,pos:n.position,horizontal:n.isHorizontal(),weight:n.weight});return i}(e),a=st(ot(t,"left"),!0),n=st(ot(t,"right")),i=st(ot(t,"top"),!0),r=st(ot(t,"bottom"));return{leftAndTop:a.concat(i),rightAndBottom:n.concat(r),chartArea:ot(t,"chartArea"),vertical:a.concat(n),horizontal:i.concat(r)}}(e.boxes),d=s.vertical,l=s.horizontal,u=Object.freeze({outerWidth:t,outerHeight:a,padding:i,availableWidth:r,vBoxMaxWidth:r/2/d.length,hBoxMaxHeight:o/2}),c=rt({maxPadding:rt({},i),w:r,h:o,x:i.left,y:i.top},i);!function(e,t){var a,n,i;for(a=0,n=e.length;a<n;++a)(i=e[a]).width=i.horizontal?i.box.fullWidth&&t.availableWidth:t.vBoxMaxWidth,i.height=i.horizontal&&t.hBoxMaxHeight}(d.concat(l),u),ct(d,c,u),ct(l,c,u)&&ct(d,c,u),function(e){var t=e.maxPadding;function a(a){var n=Math.max(t[a]-e[a],0);return e[a]+=n,n}e.y+=a("top"),e.x+=a("left"),a("right"),a("bottom")}(c),mt(s.leftAndTop,c,u),c.x+=c.w,c.y+=c.h,mt(s.rightAndBottom,c,u),e.chartArea={left:c.left,top:c.top,right:c.left+c.w,bottom:c.top+c.h},N.each(s.chartArea,(function(t){var a=t.box;rt(a,e.chartArea),a.update(c.w,c.h)}))}}},pt=(_t=Object.freeze({__proto__:null,default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&_t.default||_t,ft=["animationstart","webkitAnimationStart"],gt={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function yt(e,t){var a=N.getStyle(e,t),n=a&&a.match(/^(\d+)(\.\d+)?px$/);return n?Number(n[1]):void 0}var Mt=!!function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}()&&{passive:!0};function bt(e,t,a){e.addEventListener(t,a,Mt)}function vt(e,t,a){e.removeEventListener(t,a,Mt)}function kt(e,t,a,n,i){return{type:e,chart:t,native:i||null,x:void 0!==a?a:null,y:void 0!==n?n:null}}function Lt(e){var t=document.createElement("div");return t.className=e||"",t}function xt(e,t,a){var n,i,r,o,s=e.$chartjs||(e.$chartjs={}),d=s.resizer=function(e){var t=Lt("chartjs-size-monitor"),a=Lt("chartjs-size-monitor-expand"),n=Lt("chartjs-size-monitor-shrink");a.appendChild(Lt()),n.appendChild(Lt()),t.appendChild(a),t.appendChild(n),t._reset=function(){a.scrollLeft=1e6,a.scrollTop=1e6,n.scrollLeft=1e6,n.scrollTop=1e6};var i=function(){t._reset(),e()};return bt(a,"scroll",i.bind(a,"expand")),bt(n,"scroll",i.bind(n,"shrink")),t}((n=function(){if(s.resizer){var n=a.options.maintainAspectRatio&&e.parentNode,i=n?n.clientWidth:0;t(kt("resize",a)),n&&n.clientWidth<i&&a.canvas&&t(kt("resize",a))}},r=!1,o=[],function(){o=Array.prototype.slice.call(arguments),i=i||this,r||(r=!0,N.requestAnimFrame.call(window,(function(){r=!1,n.apply(i,o)})))}));!function(e,t){var a=e.$chartjs||(e.$chartjs={}),n=a.renderProxy=function(e){"chartjs-render-animation"===e.animationName&&t()};N.each(ft,(function(t){bt(e,t,n)})),a.reflow=!!e.offsetParent,e.classList.add("chartjs-render-monitor")}(e,(function(){if(s.resizer){var t=e.parentNode;t&&t!==d.parentNode&&t.insertBefore(d,t.firstChild),d._reset()}}))}function wt(e){var t=e.$chartjs||{},a=t.resizer;delete t.resizer,function(e){var t=e.$chartjs||{},a=t.renderProxy;a&&(N.each(ft,(function(t){vt(e,t,a)})),delete t.renderProxy),e.classList.remove("chartjs-render-monitor")}(e),a&&a.parentNode&&a.parentNode.removeChild(a)}var Yt={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(e){if(!this.disableCSSInjection){var t=e.getRootNode?e.getRootNode():document;!function(e,t){var a=e.$chartjs||(e.$chartjs={});if(!a.containsStyles){a.containsStyles=!0,t="/* Chart.js */\n"+t;var n=document.createElement("style");n.setAttribute("type","text/css"),n.appendChild(document.createTextNode(t)),e.appendChild(n)}}(t.host?t:document.head,pt)}},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var a=e&&e.getContext&&e.getContext("2d");return a&&a.canvas===e?(this._ensureLoaded(e),function(e,t){var a=e.style,n=e.getAttribute("height"),i=e.getAttribute("width");if(e.$chartjs={initial:{height:n,width:i,style:{display:a.display,height:a.height,width:a.width}}},a.display=a.display||"block",null===i||""===i){var r=yt(e,"width");void 0!==r&&(e.width=r)}if(null===n||""===n)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var o=yt(e,"height");void 0!==r&&(e.height=o)}}(e,t),a):null},releaseContext:function(e){var t=e.canvas;if(t.$chartjs){var a=t.$chartjs.initial;["height","width"].forEach((function(e){var n=a[e];N.isNullOrUndef(n)?t.removeAttribute(e):t.setAttribute(e,n)})),N.each(a.style||{},(function(e,a){t.style[a]=e})),t.width=t.width,delete t.$chartjs}},addEventListener:function(e,t,a){var n=e.canvas;if("resize"!==t){var i=a.$chartjs||(a.$chartjs={});bt(n,t,(i.proxies||(i.proxies={}))[e.id+"_"+t]=function(t){a(function(e,t){var a=gt[e.type]||e.type,n=N.getRelativePosition(e,t);return kt(a,t,n.x,n.y,e)}(t,e))})}else xt(n,a,e)},removeEventListener:function(e,t,a){var n=e.canvas;if("resize"!==t){var i=((a.$chartjs||{}).proxies||{})[e.id+"_"+t];i&&vt(n,t,i)}else wt(n)}};N.addEvent=bt,N.removeEvent=vt;var Dt=Yt._enabled?Yt:{acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},Tt=N.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Dt);E._set("global",{plugins:{}});var St={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach((function(e){-1===t.indexOf(e)&&t.push(e)})),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach((function(e){var a=t.indexOf(e);-1!==a&&t.splice(a,1)})),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,a){var n,i,r,o,s,d=this.descriptors(e),l=d.length;for(n=0;n<l;++n)if("function"==typeof(s=(r=(i=d[n]).plugin)[t])&&((o=[e].concat(a||[])).push(i.options),!1===s.apply(r,o)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var a=[],n=[],i=e&&e.config||{},r=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach((function(e){if(-1===a.indexOf(e)){var t=e.id,i=r[t];!1!==i&&(!0===i&&(i=N.clone(E.global.plugins[t])),a.push(e),n.push({plugin:e,options:i||{}}))}})),t.descriptors=n,t.id=this._cacheId,n},_invalidate:function(e){delete e.$plugins}},Ht={constructors:{},defaults:{},registerScaleType:function(e,t,a){this.constructors[e]=t,this.defaults[e]=N.clone(a)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?N.merge({},[E.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=N.extend(this.defaults[e],t))},addScalesToLayout:function(e){N.each(e.scales,(function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,ht.addBox(e,t)}))}},jt=N.valueOrDefault,Pt=N.rtl.getRtlAdapter;E._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:N.noop,title:function(e,t){var a="",n=t.labels,i=n?n.length:0;if(e.length>0){var r=e[0];r.label?a=r.label:r.xLabel?a=r.xLabel:i>0&&r.index<i&&(a=n[r.index])}return a},afterTitle:N.noop,beforeBody:N.noop,beforeLabel:N.noop,label:function(e,t){var a=t.datasets[e.datasetIndex].label||"";return a&&(a+=": "),N.isNullOrUndef(e.value)?a+=e.yLabel:a+=e.value,a},labelColor:function(e,t){var a=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:a.borderColor,backgroundColor:a.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:N.noop,afterBody:N.noop,beforeFooter:N.noop,footer:N.noop,afterFooter:N.noop}}});var At={average:function(e){if(!e.length)return!1;var t,a,n=0,i=0,r=0;for(t=0,a=e.length;t<a;++t){var o=e[t];if(o&&o.hasValue()){var s=o.tooltipPosition();n+=s.x,i+=s.y,++r}}return{x:n/r,y:i/r}},nearest:function(e,t){var a,n,i,r=t.x,o=t.y,s=Number.POSITIVE_INFINITY;for(a=0,n=e.length;a<n;++a){var d=e[a];if(d&&d.hasValue()){var l=d.getCenterPoint(),u=N.distanceBetweenPoints(t,l);u<s&&(s=u,i=d)}}if(i){var c=i.tooltipPosition();r=c.x,o=c.y}return{x:r,y:o}}};function Ct(e,t){return t&&(N.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Ot(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Et(e){var t=E.global;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,rtl:e.rtl,textDirection:e.textDirection,bodyFontColor:e.bodyFontColor,_bodyFontFamily:jt(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:jt(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:jt(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:jt(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:jt(e.titleFontStyle,t.defaultFontStyle),titleFontSize:jt(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:jt(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:jt(e.footerFontStyle,t.defaultFontStyle),footerFontSize:jt(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function Ft(e,t){return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-e.xPadding:e.x+e.xPadding}function Wt(e){return Ct([],Ot(e))}var zt=q.extend({initialize:function(){this._model=Et(this._options),this._lastActive=[]},getTitle:function(){var e=this,t=e._options,a=t.callbacks,n=a.beforeTitle.apply(e,arguments),i=a.title.apply(e,arguments),r=a.afterTitle.apply(e,arguments),o=[];return o=Ct(o,Ot(n)),o=Ct(o,Ot(i)),o=Ct(o,Ot(r))},getBeforeBody:function(){return Wt(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var a=this,n=a._options.callbacks,i=[];return N.each(e,(function(e){var r={before:[],lines:[],after:[]};Ct(r.before,Ot(n.beforeLabel.call(a,e,t))),Ct(r.lines,n.label.call(a,e,t)),Ct(r.after,Ot(n.afterLabel.call(a,e,t))),i.push(r)})),i},getAfterBody:function(){return Wt(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this,t=e._options.callbacks,a=t.beforeFooter.apply(e,arguments),n=t.footer.apply(e,arguments),i=t.afterFooter.apply(e,arguments),r=[];return r=Ct(r,Ot(a)),r=Ct(r,Ot(n)),r=Ct(r,Ot(i))},update:function(e){var t,a,n,i,r,o,s,d,l,u,c=this,m=c._options,_=c._model,h=c._model=Et(m),p=c._active,f=c._data,g={xAlign:_.xAlign,yAlign:_.yAlign},y={x:_.x,y:_.y},M={width:_.width,height:_.height},b={x:_.caretX,y:_.caretY};if(p.length){h.opacity=1;var v=[],k=[];b=At[m.position].call(c,p,c._eventPosition);var L=[];for(t=0,a=p.length;t<a;++t)L.push((n=p[t],i=void 0,r=void 0,o=void 0,s=void 0,d=void 0,l=void 0,u=void 0,i=n._xScale,r=n._yScale||n._scale,o=n._index,s=n._datasetIndex,d=n._chart.getDatasetMeta(s).controller,l=d._getIndexScale(),u=d._getValueScale(),{xLabel:i?i.getLabelForIndex(o,s):"",yLabel:r?r.getLabelForIndex(o,s):"",label:l?""+l.getLabelForIndex(o,s):"",value:u?""+u.getLabelForIndex(o,s):"",index:o,datasetIndex:s,x:n._model.x,y:n._model.y}));m.filter&&(L=L.filter((function(e){return m.filter(e,f)}))),m.itemSort&&(L=L.sort((function(e,t){return m.itemSort(e,t,f)}))),N.each(L,(function(e){v.push(m.callbacks.labelColor.call(c,e,c._chart)),k.push(m.callbacks.labelTextColor.call(c,e,c._chart))})),h.title=c.getTitle(L,f),h.beforeBody=c.getBeforeBody(L,f),h.body=c.getBody(L,f),h.afterBody=c.getAfterBody(L,f),h.footer=c.getFooter(L,f),h.x=b.x,h.y=b.y,h.caretPadding=m.caretPadding,h.labelColors=v,h.labelTextColors=k,h.dataPoints=L,M=function(e,t){var a=e._chart.ctx,n=2*t.yPadding,i=0,r=t.body,o=r.reduce((function(e,t){return e+t.before.length+t.lines.length+t.after.length}),0);o+=t.beforeBody.length+t.afterBody.length;var s=t.title.length,d=t.footer.length,l=t.titleFontSize,u=t.bodyFontSize,c=t.footerFontSize;n+=s*l,n+=s?(s-1)*t.titleSpacing:0,n+=s?t.titleMarginBottom:0,n+=o*u,n+=o?(o-1)*t.bodySpacing:0,n+=d?t.footerMarginTop:0,n+=d*c,n+=d?(d-1)*t.footerSpacing:0;var m=0,_=function(e){i=Math.max(i,a.measureText(e).width+m)};return a.font=N.fontString(l,t._titleFontStyle,t._titleFontFamily),N.each(t.title,_),a.font=N.fontString(u,t._bodyFontStyle,t._bodyFontFamily),N.each(t.beforeBody.concat(t.afterBody),_),m=t.displayColors?u+2:0,N.each(r,(function(e){N.each(e.before,_),N.each(e.lines,_),N.each(e.after,_)})),m=0,a.font=N.fontString(c,t._footerFontStyle,t._footerFontFamily),N.each(t.footer,_),{width:i+=2*t.xPadding,height:n}}(this,h),y=function(e,t,a,n){var i=e.x,r=e.y,o=e.caretSize,s=e.caretPadding,d=e.cornerRadius,l=a.xAlign,u=a.yAlign,c=o+s,m=d+s;return"right"===l?i-=t.width:"center"===l&&((i-=t.width/2)+t.width>n.width&&(i=n.width-t.width),i<0&&(i=0)),"top"===u?r+=c:r-="bottom"===u?t.height+c:t.height/2,"center"===u?"left"===l?i+=c:"right"===l&&(i-=c):"left"===l?i-=m:"right"===l&&(i+=m),{x:i,y:r}}(h,M,g=function(e,t){var a,n,i,r,o,s=e._model,d=e._chart,l=e._chart.chartArea,u="center",c="center";s.y<t.height?c="top":s.y>d.height-t.height&&(c="bottom");var m=(l.left+l.right)/2,_=(l.top+l.bottom)/2;"center"===c?(a=function(e){return e<=m},n=function(e){return e>m}):(a=function(e){return e<=t.width/2},n=function(e){return e>=d.width-t.width/2}),i=function(e){return e+t.width+s.caretSize+s.caretPadding>d.width},r=function(e){return e-t.width-s.caretSize-s.caretPadding<0},o=function(e){return e<=_?"top":"bottom"},a(s.x)?(u="left",i(s.x)&&(u="center",c=o(s.y))):n(s.x)&&(u="right",r(s.x)&&(u="center",c=o(s.y)));var h=e._options;return{xAlign:h.xAlign?h.xAlign:u,yAlign:h.yAlign?h.yAlign:c}}(this,M),c._chart)}else h.opacity=0;return h.xAlign=g.xAlign,h.yAlign=g.yAlign,h.x=y.x,h.y=y.y,h.width=M.width,h.height=M.height,h.caretX=b.x,h.caretY=b.y,c._model=h,e&&m.custom&&m.custom.call(c,h),c},drawCaret:function(e,t){var a=this._chart.ctx,n=this._view,i=this.getCaretPosition(e,t,n);a.lineTo(i.x1,i.y1),a.lineTo(i.x2,i.y2),a.lineTo(i.x3,i.y3)},getCaretPosition:function(e,t,a){var n,i,r,o,s,d,l=a.caretSize,u=a.cornerRadius,c=a.xAlign,m=a.yAlign,_=e.x,h=e.y,p=t.width,f=t.height;if("center"===m)s=h+f/2,"left"===c?(i=(n=_)-l,r=n,o=s+l,d=s-l):(i=(n=_+p)+l,r=n,o=s-l,d=s+l);else if("left"===c?(n=(i=_+u+l)-l,r=i+l):"right"===c?(n=(i=_+p-u-l)-l,r=i+l):(n=(i=a.caretX)-l,r=i+l),"top"===m)s=(o=h)-l,d=o;else{s=(o=h+f)+l,d=o;var g=r;r=n,n=g}return{x1:n,x2:i,x3:r,y1:o,y2:s,y3:d}},drawTitle:function(e,t,a){var n,i,r,o=t.title,s=o.length;if(s){var d=Pt(t.rtl,t.x,t.width);for(e.x=Ft(t,t._titleAlign),a.textAlign=d.textAlign(t._titleAlign),a.textBaseline="middle",n=t.titleFontSize,i=t.titleSpacing,a.fillStyle=t.titleFontColor,a.font=N.fontString(n,t._titleFontStyle,t._titleFontFamily),r=0;r<s;++r)a.fillText(o[r],d.x(e.x),e.y+n/2),e.y+=n+i,r+1===s&&(e.y+=t.titleMarginBottom-i)}},drawBody:function(e,t,a){var n,i,r,o,s,d,l,u,c=t.bodyFontSize,m=t.bodySpacing,_=t._bodyAlign,h=t.body,p=t.displayColors,f=0,g=p?Ft(t,"left"):0,y=Pt(t.rtl,t.x,t.width),M=function(t){a.fillText(t,y.x(e.x+f),e.y+c/2),e.y+=c+m},b=y.textAlign(_);for(a.textAlign=_,a.textBaseline="middle",a.font=N.fontString(c,t._bodyFontStyle,t._bodyFontFamily),e.x=Ft(t,b),a.fillStyle=t.bodyFontColor,N.each(t.beforeBody,M),f=p&&"right"!==b?"center"===_?c/2+1:c+2:0,s=0,l=h.length;s<l;++s){for(n=h[s],i=t.labelTextColors[s],r=t.labelColors[s],a.fillStyle=i,N.each(n.before,M),d=0,u=(o=n.lines).length;d<u;++d){if(p){var v=y.x(g);a.fillStyle=t.legendColorBackground,a.fillRect(y.leftForLtr(v,c),e.y,c,c),a.lineWidth=1,a.strokeStyle=r.borderColor,a.strokeRect(y.leftForLtr(v,c),e.y,c,c),a.fillStyle=r.backgroundColor,a.fillRect(y.leftForLtr(y.xPlus(v,1),c-2),e.y+1,c-2,c-2),a.fillStyle=i}M(o[d])}N.each(n.after,M)}f=0,N.each(t.afterBody,M),e.y-=m},drawFooter:function(e,t,a){var n,i,r=t.footer,o=r.length;if(o){var s=Pt(t.rtl,t.x,t.width);for(e.x=Ft(t,t._footerAlign),e.y+=t.footerMarginTop,a.textAlign=s.textAlign(t._footerAlign),a.textBaseline="middle",n=t.footerFontSize,a.fillStyle=t.footerFontColor,a.font=N.fontString(n,t._footerFontStyle,t._footerFontFamily),i=0;i<o;++i)a.fillText(r[i],s.x(e.x),e.y+n/2),e.y+=n+t.footerSpacing}},drawBackground:function(e,t,a,n){a.fillStyle=t.backgroundColor,a.strokeStyle=t.borderColor,a.lineWidth=t.borderWidth;var i=t.xAlign,r=t.yAlign,o=e.x,s=e.y,d=n.width,l=n.height,u=t.cornerRadius;a.beginPath(),a.moveTo(o+u,s),"top"===r&&this.drawCaret(e,n),a.lineTo(o+d-u,s),a.quadraticCurveTo(o+d,s,o+d,s+u),"center"===r&&"right"===i&&this.drawCaret(e,n),a.lineTo(o+d,s+l-u),a.quadraticCurveTo(o+d,s+l,o+d-u,s+l),"bottom"===r&&this.drawCaret(e,n),a.lineTo(o+u,s+l),a.quadraticCurveTo(o,s+l,o,s+l-u),"center"===r&&"left"===i&&this.drawCaret(e,n),a.lineTo(o,s+u),a.quadraticCurveTo(o,s,o+u,s),a.closePath(),a.fill(),t.borderWidth>0&&a.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var a={width:t.width,height:t.height},n={x:t.x,y:t.y},i=Math.abs(t.opacity<.001)?0:t.opacity,r=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&r&&(e.save(),e.globalAlpha=i,this.drawBackground(n,t,e,a),n.y+=t.yPadding,N.rtl.overrideTextDirection(e,t.textDirection),this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),N.rtl.restoreTextDirection(e,t.textDirection),e.restore())}},handleEvent:function(e){var t,a=this,n=a._options;return a._lastActive=a._lastActive||[],"mouseout"===e.type?a._active=[]:(a._active=a._chart.getElementsAtEventForMode(e,n.mode,n),n.reverse&&a._active.reverse()),(t=!N.arrayEquals(a._active,a._lastActive))&&(a._lastActive=a._active,(n.enabled||n.custom)&&(a._eventPosition={x:e.x,y:e.y},a.update(!0),a.pivot())),t}}),It=At,Nt=zt;Nt.positioners=It;var Rt=N.valueOrDefault;function Bt(){return N.merge({},[].slice.call(arguments),{merger:function(e,t,a,n){if("xAxes"===e||"yAxes"===e){var i,r,o,s=a[e].length;for(t[e]||(t[e]=[]),i=0;i<s;++i)o=a[e][i],r=Rt(o.type,"xAxes"===e?"category":"linear"),i>=t[e].length&&t[e].push({}),!t[e][i].type||o.type&&o.type!==t[e][i].type?N.merge(t[e][i],[Ht.getScaleDefaults(r),o]):N.merge(t[e][i],o)}else N._merger(e,t,a,n)}})}function Vt(){return N.merge({},[].slice.call(arguments),{merger:function(e,t,a,n){var i=t[e]||{},r=a[e];"scales"===e?t[e]=Bt(i,r):"scale"===e?t[e]=N.merge(i,[Ht.getScaleDefaults(r.type),r]):N._merger(e,t,a,n)}})}function Gt(e){var t=e.options;N.each(e.scales,(function(t){ht.removeBox(e,t)})),t=Vt(E.global,E[e.config.type],t),e.options=e.config.options=t,e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.tooltip._options=t.tooltips,e.tooltip.initialize()}function Jt(e,t,a){var n,i=function(e){return e.id===n};do{n=t+a++}while(N.findIndex(e,i)>=0);return n}function Ut(e){return"top"===e||"bottom"===e}function qt(e,t){return function(a,n){return a[e]===n[e]?a[t]-n[t]:a[e]-n[e]}}E._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var Kt=function(e,t){return this.construct(e,t),this};N.extend(Kt.prototype,{construct:function(e,t){var a=this;t=function(e){var t=(e=e||{}).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=Vt(E.global,E[e.type],e.options||{}),e}(t);var n=Tt.acquireContext(e,t),i=n&&n.canvas,r=i&&i.height,o=i&&i.width;a.id=N.uid(),a.ctx=n,a.canvas=i,a.config=t,a.width=o,a.height=r,a.aspectRatio=r?o/r:null,a.options=t.options,a._bufferedRender=!1,a._layers=[],a.chart=a,a.controller=a,Kt.instances[a.id]=a,Object.defineProperty(a,"data",{get:function(){return a.config.data},set:function(e){a.config.data=e}}),n&&i?(a.initialize(),a.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return St.notify(e,"beforeInit"),N.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.initToolTip(),St.notify(e,"afterInit"),e},clear:function(){return N.canvas.clear(this),this},stop:function(){return Q.cancelAnimation(this),this},resize:function(e){var t=this,a=t.options,n=t.canvas,i=a.maintainAspectRatio&&t.aspectRatio||null,r=Math.max(0,Math.floor(N.getMaximumWidth(n))),o=Math.max(0,Math.floor(i?r/i:N.getMaximumHeight(n)));if((t.width!==r||t.height!==o)&&(n.width=t.width=r,n.height=t.height=o,n.style.width=r+"px",n.style.height=o+"px",N.retinaScale(t,a.devicePixelRatio),!e)){var s={width:r,height:o};St.notify(t,"resize",[s]),a.onResize&&a.onResize(t,s),t.stop(),t.update({duration:a.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},a=e.scale;N.each(t.xAxes,(function(e,a){e.id||(e.id=Jt(t.xAxes,"x-axis-",a))})),N.each(t.yAxes,(function(e,a){e.id||(e.id=Jt(t.yAxes,"y-axis-",a))})),a&&(a.id=a.id||"scale")},buildOrUpdateScales:function(){var e=this,t=e.options,a=e.scales||{},n=[],i=Object.keys(a).reduce((function(e,t){return e[t]=!1,e}),{});t.scales&&(n=n.concat((t.scales.xAxes||[]).map((function(e){return{options:e,dtype:"category",dposition:"bottom"}})),(t.scales.yAxes||[]).map((function(e){return{options:e,dtype:"linear",dposition:"left"}})))),t.scale&&n.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),N.each(n,(function(t){var n=t.options,r=n.id,o=Rt(n.type,t.dtype);Ut(n.position)!==Ut(t.dposition)&&(n.position=t.dposition),i[r]=!0;var s=null;if(r in a&&a[r].type===o)(s=a[r]).options=n,s.ctx=e.ctx,s.chart=e;else{var d=Ht.getScaleConstructor(o);if(!d)return;s=new d({id:r,type:o,options:n,ctx:e.ctx,chart:e}),a[s.id]=s}s.mergeTicksOptions(),t.isDefault&&(e.scale=s)})),N.each(i,(function(e,t){e||delete a[t]})),e.scales=a,Ht.addScalesToLayout(this)},buildOrUpdateControllers:function(){var e,t,a=this,n=[],i=a.data.datasets;for(e=0,t=i.length;e<t;e++){var r=i[e],o=a.getDatasetMeta(e),s=r.type||a.config.type;if(o.type&&o.type!==s&&(a.destroyDatasetMeta(e),o=a.getDatasetMeta(e)),o.type=s,o.order=r.order||0,o.index=e,o.controller)o.controller.updateIndex(e),o.controller.linkScales();else{var d=Qe[o.type];if(void 0===d)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new d(a,e),n.push(o.controller)}}return n},resetElements:function(){var e=this;N.each(e.data.datasets,(function(t,a){e.getDatasetMeta(a).controller.reset()}),e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var t,a,n=this;if(e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]}),Gt(n),St._invalidate(n),!1!==St.notify(n,"beforeUpdate")){n.tooltip._data=n.data;var i=n.buildOrUpdateControllers();for(t=0,a=n.data.datasets.length;t<a;t++)n.getDatasetMeta(t).controller.buildOrUpdateElements();n.updateLayout(),n.options.animation&&n.options.animation.duration&&N.each(i,(function(e){e.reset()})),n.updateDatasets(),n.tooltip.initialize(),n.lastActive=[],St.notify(n,"afterUpdate"),n._layers.sort(qt("z","_idx")),n._bufferedRender?n._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:n.render(e)}},updateLayout:function(){var e=this;!1!==St.notify(e,"beforeLayout")&&(ht.update(this,this.width,this.height),e._layers=[],N.each(e.boxes,(function(t){t._configure&&t._configure(),e._layers.push.apply(e._layers,t._layers())}),e),e._layers.forEach((function(e,t){e._idx=t})),St.notify(e,"afterScaleUpdate"),St.notify(e,"afterLayout"))},updateDatasets:function(){if(!1!==St.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);St.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),a={meta:t,index:e};!1!==St.notify(this,"beforeDatasetUpdate",[a])&&(t.controller._update(),St.notify(this,"afterDatasetUpdate",[a]))},render:function(e){var t=this;e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]});var a=t.options.animation,n=Rt(e.duration,a&&a.duration),i=e.lazy;if(!1!==St.notify(t,"beforeRender")){var r=function(e){St.notify(t,"afterRender"),N.callback(a&&a.onComplete,[e],t)};if(a&&n){var o=new $({numSteps:n/16.66,easing:e.easing||a.easing,render:function(e,t){var a=N.easing.effects[t.easing],n=t.currentStep,i=n/t.numSteps;e.draw(a(i),i,n)},onAnimationProgress:a.onProgress,onAnimationComplete:r});Q.addAnimation(t,o,n,i)}else t.draw(),r(new $({numSteps:0,chart:t}));return t}},draw:function(e){var t,a,n=this;if(n.clear(),N.isNullOrUndef(e)&&(e=1),n.transition(e),!(n.width<=0||n.height<=0)&&!1!==St.notify(n,"beforeDraw",[e])){for(a=n._layers,t=0;t<a.length&&a[t].z<=0;++t)a[t].draw(n.chartArea);for(n.drawDatasets(e);t<a.length;++t)a[t].draw(n.chartArea);n._drawTooltip(e),St.notify(n,"afterDraw",[e])}},transition:function(e){for(var t=0,a=(this.data.datasets||[]).length;t<a;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},_getSortedDatasetMetas:function(e){var t,a,n=[];for(t=0,a=(this.data.datasets||[]).length;t<a;++t)e&&!this.isDatasetVisible(t)||n.push(this.getDatasetMeta(t));return n.sort(qt("order","index")),n},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(e){var t,a;if(!1!==St.notify(this,"beforeDatasetsDraw",[e])){for(a=(t=this._getSortedVisibleDatasetMetas()).length-1;a>=0;--a)this.drawDataset(t[a],e);St.notify(this,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var a={meta:e,index:e.index,easingValue:t};!1!==St.notify(this,"beforeDatasetDraw",[a])&&(e.controller.draw(t),St.notify(this,"afterDatasetDraw",[a]))},_drawTooltip:function(e){var t=this.tooltip,a={tooltip:t,easingValue:e};!1!==St.notify(this,"beforeTooltipDraw",[a])&&(t.draw(),St.notify(this,"afterTooltipDraw",[a]))},getElementAtEvent:function(e){return it.modes.single(this,e)},getElementsAtEvent:function(e){return it.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return it.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,a){var n=it.modes[t];return"function"==typeof n?n(this,e,a):[]},getDatasetAtEvent:function(e){return it.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var a=t._meta[this.id];return a||(a=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t.order||0,index:e}),a},getVisibleDatasetCount:function(){for(var e=0,t=0,a=this.data.datasets.length;t<a;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,a=this.data.datasets[e],n=a._meta&&a._meta[t];n&&(n.controller.destroy(),delete a._meta[t])},destroy:function(){var e,t,a=this,n=a.canvas;for(a.stop(),e=0,t=a.data.datasets.length;e<t;++e)a.destroyDatasetMeta(e);n&&(a.unbindEvents(),N.canvas.clear(a),Tt.releaseContext(a.ctx),a.canvas=null,a.ctx=null),St.notify(a,"destroy"),delete Kt.instances[a.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new Nt({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},a=function(){e.eventHandler.apply(e,arguments)};N.each(e.options.events,(function(n){Tt.addEventListener(e,n,a),t[n]=a})),e.options.responsive&&(a=function(){e.resize()},Tt.addEventListener(e,"resize",a),t.resize=a)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,N.each(t,(function(t,a){Tt.removeEventListener(e,a,t)})))},updateHoverStyle:function(e,t,a){var n,i,r,o=a?"set":"remove";for(i=0,r=e.length;i<r;++i)(n=e[i])&&this.getDatasetMeta(n._datasetIndex).controller[o+"HoverStyle"](n);"dataset"===t&&this.getDatasetMeta(e[0]._datasetIndex).controller["_"+o+"DatasetHoverStyle"]()},eventHandler:function(e){var t=this,a=t.tooltip;if(!1!==St.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var n=t.handleEvent(e);a&&(n=a._start?a.handleEvent(e):n|a.handleEvent(e)),St.notify(t,"afterEvent",[e]);var i=t._bufferedRequest;return i?t.render(i):n&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,a=this,n=a.options||{},i=n.hover;return a.lastActive=a.lastActive||[],"mouseout"===e.type?a.active=[]:a.active=a.getElementsAtEventForMode(e,i.mode,i),N.callback(n.onHover||n.hover.onHover,[e.native,a.active],a),"mouseup"!==e.type&&"click"!==e.type||n.onClick&&n.onClick.call(a,e.native,a.active),a.lastActive.length&&a.updateHoverStyle(a.lastActive,i.mode,!1),a.active.length&&i.mode&&a.updateHoverStyle(a.active,i.mode,!0),t=!N.arrayEquals(a.active,a.lastActive),a.lastActive=a.active,t}}),Kt.instances={};var $t=Kt;function Qt(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function Zt(e){this.options=e||{}}Kt.Controller=Kt,Kt.types={},N.configMerge=Vt,N.scaleMerge=Bt,N.extend(Zt.prototype,{formats:Qt,parse:Qt,format:Qt,add:Qt,diff:Qt,startOf:Qt,endOf:Qt,_create:function(e){return e}}),Zt.override=function(e){N.extend(Zt.prototype,e)};var Xt={_date:Zt},ea={formatters:{values:function(e){return N.isArray(e)?e:""+e},linear:function(e,t,a){var n=a.length>3?a[2]-a[1]:a[1]-a[0];Math.abs(n)>1&&e!==Math.floor(e)&&(n=e-Math.floor(e));var i=N.log10(Math.abs(n)),r="";if(0!==e)if(Math.max(Math.abs(a[0]),Math.abs(a[a.length-1]))<1e-4){var o=N.log10(Math.abs(e)),s=Math.floor(o)-Math.floor(i);s=Math.max(Math.min(s,20),0),r=e.toExponential(s)}else{var d=-1*Math.floor(i);d=Math.max(Math.min(d,20),0),r=e.toFixed(d)}else r="0";return r},logarithmic:function(e,t,a){var n=e/Math.pow(10,Math.floor(N.log10(e)));return 0===e?"0":1===n||2===n||5===n||0===t||t===a.length-1?e.toExponential():""}}},ta=N.isArray,aa=N.isNullOrUndef,na=N.valueOrDefault,ia=N.valueAtIndexOrDefault;function ra(e,t,a){var n,i=e.getTicks().length,r=Math.min(t,i-1),o=e.getPixelForTick(r),s=e._startPixel,d=e._endPixel;if(!(a&&(n=1===i?Math.max(o-s,d-o):0===t?(e.getPixelForTick(1)-o)/2:(o-e.getPixelForTick(r-1))/2,(o+=r<t?n:-n)<s-1e-6||o>d+1e-6)))return o}function oa(e,t,a,n){var i,r,o,s,d,l,u,c,m,_,h,p,f,g=a.length,y=[],M=[],b=[];for(i=0;i<g;++i){if(s=a[i].label,d=a[i].major?t.major:t.minor,e.font=l=d.string,u=n[l]=n[l]||{data:{},gc:[]},c=d.lineHeight,m=_=0,aa(s)||ta(s)){if(ta(s))for(r=0,o=s.length;r<o;++r)h=s[r],aa(h)||ta(h)||(m=N.measureText(e,u.data,u.gc,m,h),_+=c)}else m=N.measureText(e,u.data,u.gc,m,s),_=c;y.push(m),M.push(_),b.push(c/2)}function v(e){return{width:y[e]||0,height:M[e]||0,offset:b[e]||0}}return function(e,t){N.each(e,(function(e){var a,n=e.gc,i=n.length/2;if(i>t){for(a=0;a<i;++a)delete e.data[n[a]];n.splice(0,i)}}))}(n,g),p=y.indexOf(Math.max.apply(null,y)),f=M.indexOf(Math.max.apply(null,M)),{first:v(0),last:v(g-1),widest:v(p),highest:v(f)}}function sa(e){return e.drawTicks?e.tickMarkLength:0}function da(e){var t,a;return e.display?(t=N.options._parseFont(e),a=N.options.toPadding(e.padding),t.lineHeight+a.height):0}function la(e,t){return N.extend(N.options._parseFont({fontFamily:na(t.fontFamily,e.fontFamily),fontSize:na(t.fontSize,e.fontSize),fontStyle:na(t.fontStyle,e.fontStyle),lineHeight:na(t.lineHeight,e.lineHeight)}),{color:N.options.resolve([t.fontColor,e.fontColor,E.global.defaultFontColor])})}function ua(e){var t=la(e,e.minor);return{minor:t,major:e.major.enabled?la(e,e.major):t}}function ca(e){var t,a,n,i=[];for(a=0,n=e.length;a<n;++a)void 0!==(t=e[a])._index&&i.push(t);return i}function ma(e,t,a,n){var i,r,o,s,d=na(a,0),l=Math.min(na(n,e.length),e.length),u=0;for(t=Math.ceil(t),n&&(t=(i=n-a)/Math.floor(i/t)),s=d;s<0;)u++,s=Math.round(d+u*t);for(r=Math.max(d,0);r<l;r++)o=e[r],r===s?(o._index=r,u++,s=Math.round(d+u*t)):delete o.label}E._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:ea.formatters.values,minor:{},major:{}}});var _a=q.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){N.callback(this.options.beforeUpdate,[this])},update:function(e,t,a){var n,i,r,o,s,d=this,l=d.options.ticks,u=l.sampleSize;if(d.beforeUpdate(),d.maxWidth=e,d.maxHeight=t,d.margins=N.extend({left:0,right:0,top:0,bottom:0},a),d._ticks=null,d.ticks=null,d._labelSizes=null,d._maxLabelLines=0,d.longestLabelWidth=0,d.longestTextCache=d.longestTextCache||{},d._gridLineItems=null,d._labelItems=null,d.beforeSetDimensions(),d.setDimensions(),d.afterSetDimensions(),d.beforeDataLimits(),d.determineDataLimits(),d.afterDataLimits(),d.beforeBuildTicks(),o=d.buildTicks()||[],(!(o=d.afterBuildTicks(o)||o)||!o.length)&&d.ticks)for(o=[],n=0,i=d.ticks.length;n<i;++n)o.push({value:d.ticks[n],major:!1});return d._ticks=o,s=u<o.length,r=d._convertTicksToLabels(s?function(e,t){for(var a=[],n=e.length/t,i=0,r=e.length;i<r;i+=n)a.push(e[Math.floor(i)]);return a}(o,u):o),d._configure(),d.beforeCalculateTickRotation(),d.calculateTickRotation(),d.afterCalculateTickRotation(),d.beforeFit(),d.fit(),d.afterFit(),d._ticksToDraw=l.display&&(l.autoSkip||"auto"===l.source)?d._autoSkip(o):o,s&&(r=d._convertTicksToLabels(d._ticksToDraw)),d.ticks=r,d.afterUpdate(),d.minSize},_configure:function(){var e,t,a=this,n=a.options.ticks.reverse;a.isHorizontal()?(e=a.left,t=a.right):(e=a.top,t=a.bottom,n=!n),a._startPixel=e,a._endPixel=t,a._reversePixels=n,a._length=t-e},afterUpdate:function(){N.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){N.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){N.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){N.callback(this.options.beforeDataLimits,[this])},determineDataLimits:N.noop,afterDataLimits:function(){N.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){N.callback(this.options.beforeBuildTicks,[this])},buildTicks:N.noop,afterBuildTicks:function(e){var t=this;return ta(e)&&e.length?N.callback(t.options.afterBuildTicks,[t,e]):(t.ticks=N.callback(t.options.afterBuildTicks,[t,t.ticks])||t.ticks,e)},beforeTickToLabelConversion:function(){N.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){N.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){N.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e,t,a,n,i,r,o,s=this,d=s.options,l=d.ticks,u=s.getTicks().length,c=l.minRotation||0,m=l.maxRotation,_=c;!s._isVisible()||!l.display||c>=m||u<=1||!s.isHorizontal()?s.labelRotation=c:(t=(e=s._getLabelSizes()).widest.width,a=e.highest.height-e.highest.offset,n=Math.min(s.maxWidth,s.chart.width-t),t+6>(i=d.offset?s.maxWidth/u:n/(u-1))&&(i=n/(u-(d.offset?.5:1)),r=s.maxHeight-sa(d.gridLines)-l.padding-da(d.scaleLabel),o=Math.sqrt(t*t+a*a),_=N.toDegrees(Math.min(Math.asin(Math.min((e.highest.height+6)/i,1)),Math.asin(Math.min(r/o,1))-Math.asin(a/o))),_=Math.max(c,Math.min(m,_))),s.labelRotation=_)},afterCalculateTickRotation:function(){N.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){N.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},a=e.chart,n=e.options,i=n.ticks,r=n.scaleLabel,o=n.gridLines,s=e._isVisible(),d="bottom"===n.position,l=e.isHorizontal();if(l?t.width=e.maxWidth:s&&(t.width=sa(o)+da(r)),l?s&&(t.height=sa(o)+da(r)):t.height=e.maxHeight,i.display&&s){var u=ua(i),c=e._getLabelSizes(),m=c.first,_=c.last,h=c.widest,p=c.highest,f=.4*u.minor.lineHeight,g=i.padding;if(l){var y=0!==e.labelRotation,M=N.toRadians(e.labelRotation),b=Math.cos(M),v=Math.sin(M),k=v*h.width+b*(p.height-(y?p.offset:0))+(y?0:f);t.height=Math.min(e.maxHeight,t.height+k+g);var L,x,w=e.getPixelForTick(0)-e.left,Y=e.right-e.getPixelForTick(e.getTicks().length-1);y?(L=d?b*m.width+v*m.offset:v*(m.height-m.offset),x=d?v*(_.height-_.offset):b*_.width+v*_.offset):(L=m.width/2,x=_.width/2),e.paddingLeft=Math.max((L-w)*e.width/(e.width-w),0)+3,e.paddingRight=Math.max((x-Y)*e.width/(e.width-Y),0)+3}else{var D=i.mirror?0:h.width+g+f;t.width=Math.min(e.maxWidth,t.width+D),e.paddingTop=m.height/2,e.paddingBottom=_.height/2}}e.handleMargins(),l?(e.width=e._length=a.width-e.margins.left-e.margins.right,e.height=t.height):(e.width=t.width,e.height=e._length=a.height-e.margins.top-e.margins.bottom)},handleMargins:function(){var e=this;e.margins&&(e.margins.left=Math.max(e.paddingLeft,e.margins.left),e.margins.top=Math.max(e.paddingTop,e.margins.top),e.margins.right=Math.max(e.paddingRight,e.margins.right),e.margins.bottom=Math.max(e.paddingBottom,e.margins.bottom))},afterFit:function(){N.callback(this.options.afterFit,[this])},isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(aa(e))return NaN;if(("number"==typeof e||e instanceof Number)&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},_convertTicksToLabels:function(e){var t,a,n,i=this;for(i.ticks=e.map((function(e){return e.value})),i.beforeTickToLabelConversion(),t=i.convertTicksToLabels(e)||i.ticks,i.afterTickToLabelConversion(),a=0,n=e.length;a<n;++a)e[a].label=t[a];return t},_getLabelSizes:function(){var e=this,t=e._labelSizes;return t||(e._labelSizes=t=oa(e.ctx,ua(e.options.ticks),e.getTicks(),e.longestTextCache),e.longestLabelWidth=t.widest.width),t},_parseValue:function(e){var t,a,n,i;return ta(e)?(t=+this.getRightValue(e[0]),a=+this.getRightValue(e[1]),n=Math.min(t,a),i=Math.max(t,a)):(t=void 0,a=e=+this.getRightValue(e),n=e,i=e),{min:n,max:i,start:t,end:a}},_getScaleLabel:function(e){var t=this._parseValue(e);return void 0!==t.start?"["+t.start+", "+t.end+"]":+this.getRightValue(e)},getLabelForIndex:N.noop,getPixelForValue:N.noop,getValueForPixel:N.noop,getPixelForTick:function(e){var t=this.options.offset,a=this._ticks.length,n=1/Math.max(a-(t?0:1),1);return e<0||e>a-1?null:this.getPixelForDecimal(e*n+(t?n/2:0))},getPixelForDecimal:function(e){return this._reversePixels&&(e=1-e),this._startPixel+e*this._length},getDecimalForPixel:function(e){var t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,a,n,i,r=this.options.ticks,o=this._length,s=r.maxTicksLimit||o/this._tickSize()+1,d=r.major.enabled?function(e){var t,a,n=[];for(t=0,a=e.length;t<a;t++)e[t].major&&n.push(t);return n}(e):[],l=d.length,u=d[0],c=d[l-1];if(l>s)return function(e,t,a){var n,i,r=0,o=t[0];for(a=Math.ceil(a),n=0;n<e.length;n++)i=e[n],n===o?(i._index=n,o=t[++r*a]):delete i.label}(e,d,l/s),ca(e);if(n=function(e,t,a,n){var i,r,o,s,d=function(e){var t,a,n=e.length;if(n<2)return!1;for(a=e[0],t=1;t<n;++t)if(e[t]-e[t-1]!==a)return!1;return a}(e),l=(t.length-1)/n;if(!d)return Math.max(l,1);for(o=0,s=(i=N.math._factorize(d)).length-1;o<s;o++)if((r=i[o])>l)return r;return Math.max(l,1)}(d,e,0,s),l>0){for(t=0,a=l-1;t<a;t++)ma(e,n,d[t],d[t+1]);return i=l>1?(c-u)/(l-1):null,ma(e,n,N.isNullOrUndef(i)?0:u-i,u),ma(e,n,c,N.isNullOrUndef(i)?e.length:c+i),ca(e)}return ma(e,n),ca(e)},_tickSize:function(){var e=this.options.ticks,t=N.toRadians(this.labelRotation),a=Math.abs(Math.cos(t)),n=Math.abs(Math.sin(t)),i=this._getLabelSizes(),r=e.autoSkipPadding||0,o=i?i.widest.width+r:0,s=i?i.highest.height+r:0;return this.isHorizontal()?s*a>o*n?o/a:s/n:s*n<o*a?s/a:o/n},_isVisible:function(){var e,t,a,n=this.chart,i=this.options.display;if("auto"!==i)return!!i;for(e=0,t=n.data.datasets.length;e<t;++e)if(n.isDatasetVisible(e)&&((a=n.getDatasetMeta(e)).xAxisID===this.id||a.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(e){var t,a,n,i,r,o,s,d,l,u,c,m,_,h,p,f,g,y=this,M=y.chart,b=y.options,v=b.gridLines,k=b.position,L=v.offsetGridLines,x=y.isHorizontal(),w=y._ticksToDraw,Y=w.length+(L?1:0),D=sa(v),T=[],S=v.drawBorder?ia(v.lineWidth,0,0):0,H=S/2,j=N._alignPixel,P=function(e){return j(M,e,S)};for("top"===k?(t=P(y.bottom),s=y.bottom-D,l=t-H,c=P(e.top)+H,_=e.bottom):"bottom"===k?(t=P(y.top),c=e.top,_=P(e.bottom)-H,s=t+H,l=y.top+D):"left"===k?(t=P(y.right),o=y.right-D,d=t-H,u=P(e.left)+H,m=e.right):(t=P(y.left),u=e.left,m=P(e.right)-H,o=t+H,d=y.left+D),a=0;a<Y;++a)n=w[a]||{},aa(n.label)&&a<w.length||(a===y.zeroLineIndex&&b.offset===L?(h=v.zeroLineWidth,p=v.zeroLineColor,f=v.zeroLineBorderDash||[],g=v.zeroLineBorderDashOffset||0):(h=ia(v.lineWidth,a,1),p=ia(v.color,a,"rgba(0,0,0,0.1)"),f=v.borderDash||[],g=v.borderDashOffset||0),void 0!==(i=ra(y,n._index||a,L))&&(r=j(M,i,h),x?o=d=u=m=r:s=l=c=_=r,T.push({tx1:o,ty1:s,tx2:d,ty2:l,x1:u,y1:c,x2:m,y2:_,width:h,color:p,borderDash:f,borderDashOffset:g})));return T.ticksLength=Y,T.borderValue=t,T},_computeLabelItems:function(){var e,t,a,n,i,r,o,s,d,l,u,c,m=this,_=m.options,h=_.ticks,p=_.position,f=h.mirror,g=m.isHorizontal(),y=m._ticksToDraw,M=ua(h),b=h.padding,v=sa(_.gridLines),k=-N.toRadians(m.labelRotation),L=[];for("top"===p?(r=m.bottom-v-b,o=k?"left":"center"):"bottom"===p?(r=m.top+v+b,o=k?"right":"center"):"left"===p?(i=m.right-(f?0:v)-b,o=f?"left":"right"):(i=m.left+(f?0:v)+b,o=f?"right":"left"),e=0,t=y.length;e<t;++e)n=(a=y[e]).label,aa(n)||(s=m.getPixelForTick(a._index||e)+h.labelOffset,l=(d=a.major?M.major:M.minor).lineHeight,u=ta(n)?n.length:1,g?(i=s,c="top"===p?((k?1:.5)-u)*l:(k?0:.5)*l):(r=s,c=(1-u)*l/2),L.push({x:i,y:r,rotation:k,label:n,font:d,textOffset:c,textAlign:o}));return L},_drawGrid:function(e){var t=this,a=t.options.gridLines;if(a.display){var n,i,r,o,s,d=t.ctx,l=t.chart,u=N._alignPixel,c=a.drawBorder?ia(a.lineWidth,0,0):0,m=t._gridLineItems||(t._gridLineItems=t._computeGridLineItems(e));for(r=0,o=m.length;r<o;++r)n=(s=m[r]).width,i=s.color,n&&i&&(d.save(),d.lineWidth=n,d.strokeStyle=i,d.setLineDash&&(d.setLineDash(s.borderDash),d.lineDashOffset=s.borderDashOffset),d.beginPath(),a.drawTicks&&(d.moveTo(s.tx1,s.ty1),d.lineTo(s.tx2,s.ty2)),a.drawOnChartArea&&(d.moveTo(s.x1,s.y1),d.lineTo(s.x2,s.y2)),d.stroke(),d.restore());if(c){var _,h,p,f,g=c,y=ia(a.lineWidth,m.ticksLength-1,1),M=m.borderValue;t.isHorizontal()?(_=u(l,t.left,g)-g/2,h=u(l,t.right,y)+y/2,p=f=M):(p=u(l,t.top,g)-g/2,f=u(l,t.bottom,y)+y/2,_=h=M),d.lineWidth=c,d.strokeStyle=ia(a.color,0),d.beginPath(),d.moveTo(_,p),d.lineTo(h,f),d.stroke()}}},_drawLabels:function(){var e=this;if(e.options.ticks.display){var t,a,n,i,r,o,s,d,l=e.ctx,u=e._labelItems||(e._labelItems=e._computeLabelItems());for(t=0,n=u.length;t<n;++t){if(o=(r=u[t]).font,l.save(),l.translate(r.x,r.y),l.rotate(r.rotation),l.font=o.string,l.fillStyle=o.color,l.textBaseline="middle",l.textAlign=r.textAlign,s=r.label,d=r.textOffset,ta(s))for(a=0,i=s.length;a<i;++a)l.fillText(""+s[a],0,d),d+=o.lineHeight;else l.fillText(s,0,d);l.restore()}}},_drawTitle:function(){var e=this,t=e.ctx,a=e.options,n=a.scaleLabel;if(n.display){var i,r,o=na(n.fontColor,E.global.defaultFontColor),s=N.options._parseFont(n),d=N.options.toPadding(n.padding),l=s.lineHeight/2,u=a.position,c=0;if(e.isHorizontal())i=e.left+e.width/2,r="bottom"===u?e.bottom-l-d.bottom:e.top+l+d.top;else{var m="left"===u;i=m?e.left+l+d.top:e.right-l-d.top,r=e.top+e.height/2,c=m?-.5*Math.PI:.5*Math.PI}t.save(),t.translate(i,r),t.rotate(c),t.textAlign="center",t.textBaseline="middle",t.fillStyle=o,t.font=s.string,t.fillText(n.labelString,0,0),t.restore()}},draw:function(e){this._isVisible()&&(this._drawGrid(e),this._drawTitle(),this._drawLabels())},_layers:function(){var e=this,t=e.options,a=t.ticks&&t.ticks.z||0,n=t.gridLines&&t.gridLines.z||0;return e._isVisible()&&a!==n&&e.draw===e._draw?[{z:n,draw:function(){e._drawGrid.apply(e,arguments),e._drawTitle.apply(e,arguments)}},{z:a,draw:function(){e._drawLabels.apply(e,arguments)}}]:[{z:a,draw:function(){e.draw.apply(e,arguments)}}]},_getMatchingVisibleMetas:function(e){var t=this,a=t.isHorizontal();return t.chart._getSortedVisibleDatasetMetas().filter((function(n){return(!e||n.type===e)&&(a?n.xAxisID===t.id:n.yAxisID===t.id)}))}});_a.prototype._draw=_a.prototype.draw;var ha=_a,pa=N.isNullOrUndef,fa=ha.extend({determineDataLimits:function(){var e,t=this,a=t._getLabels(),n=t.options.ticks,i=n.min,r=n.max,o=0,s=a.length-1;void 0!==i&&(e=a.indexOf(i))>=0&&(o=e),void 0!==r&&(e=a.indexOf(r))>=0&&(s=e),t.minIndex=o,t.maxIndex=s,t.min=a[o],t.max=a[s]},buildTicks:function(){var e=this._getLabels(),t=this.minIndex,a=this.maxIndex;this.ticks=0===t&&a===e.length-1?e:e.slice(t,a+1)},getLabelForIndex:function(e,t){var a=this.chart;return a.getDatasetMeta(t).controller._getValueScaleId()===this.id?this.getRightValue(a.data.datasets[t].data[e]):this._getLabels()[e]},_configure:function(){var e=this,t=e.options.offset,a=e.ticks;ha.prototype._configure.call(e),e.isHorizontal()||(e._reversePixels=!e._reversePixels),a&&(e._startValue=e.minIndex-(t?.5:0),e._valueRange=Math.max(a.length-(t?0:1),1))},getPixelForValue:function(e,t,a){var n,i,r,o=this;return pa(t)||pa(a)||(e=o.chart.data.datasets[a].data[t]),pa(e)||(n=o.isHorizontal()?e.x:e.y),(void 0!==n||void 0!==e&&isNaN(t))&&(i=o._getLabels(),e=N.valueOrDefault(n,e),t=-1!==(r=i.indexOf(e))?r:t,isNaN(t)&&(t=e)),o.getPixelForDecimal((t-o._startValue)/o._valueRange)},getPixelForTick:function(e){var t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e],e+this.minIndex)},getValueForPixel:function(e){var t=Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange);return Math.min(Math.max(t,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),ga={position:"bottom"};fa._defaults=ga;var ya=N.noop,Ma=N.isNullOrUndef,ba=ha.extend({getRightValue:function(e){return"string"==typeof e?+e:ha.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var a=N.sign(e.min),n=N.sign(e.max);a<0&&n<0?e.max=0:a>0&&n>0&&(e.min=0)}var i=void 0!==t.min||void 0!==t.suggestedMin,r=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),i!==r&&e.min>=e.max&&(i?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:function(){var e,t=this.options.ticks,a=t.stepSize,n=t.maxTicksLimit;return a?e=Math.ceil(this.max/a)-Math.floor(this.min/a)+1:(e=this._computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:ya,buildTicks:function(){var e=this,t=e.options.ticks,a=e.getTickLimit(),n={maxTicks:a=Math.max(2,a),min:t.min,max:t.max,precision:t.precision,stepSize:N.valueOrDefault(t.fixedStepSize,t.stepSize)},i=e.ticks=function(e,t){var a,n,i,r,o=[],s=e.stepSize,d=s||1,l=e.maxTicks-1,u=e.min,c=e.max,m=e.precision,_=t.min,h=t.max,p=N.niceNum((h-_)/l/d)*d;if(p<1e-14&&Ma(u)&&Ma(c))return[_,h];(r=Math.ceil(h/p)-Math.floor(_/p))>l&&(p=N.niceNum(r*p/l/d)*d),s||Ma(m)?a=Math.pow(10,N._decimalPlaces(p)):(a=Math.pow(10,m),p=Math.ceil(p*a)/a),n=Math.floor(_/p)*p,i=Math.ceil(h/p)*p,s&&(!Ma(u)&&N.almostWhole(u/p,p/1e3)&&(n=u),!Ma(c)&&N.almostWhole(c/p,p/1e3)&&(i=c)),r=(i-n)/p,r=N.almostEquals(r,Math.round(r),p/1e3)?Math.round(r):Math.ceil(r),n=Math.round(n*a)/a,i=Math.round(i*a)/a,o.push(Ma(u)?n:u);for(var f=1;f<r;++f)o.push(Math.round((n+f*p)*a)/a);return o.push(Ma(c)?i:c),o}(n,e);e.handleDirectionalChanges(),e.max=N.max(i),e.min=N.min(i),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),ha.prototype.convertTicksToLabels.call(e)},_configure:function(){var e,t=this,a=t.getTicks(),n=t.min,i=t.max;ha.prototype._configure.call(t),t.options.offset&&a.length&&(n-=e=(i-n)/Math.max(a.length-1,1)/2,i+=e),t._startValue=n,t._endValue=i,t._valueRange=i-n}}),va={position:"left",ticks:{callback:ea.formatters.linear}};function ka(e,t,a,n){var i,r,o=e.options,s=function(e,t,a){var n=[a.type,void 0===t&&void 0===a.stack?a.index:"",a.stack].join(".");return void 0===e[n]&&(e[n]={pos:[],neg:[]}),e[n]}(t,o.stacked,a),d=s.pos,l=s.neg,u=n.length;for(i=0;i<u;++i)r=e._parseValue(n[i]),isNaN(r.min)||isNaN(r.max)||a.data[i].hidden||(d[i]=d[i]||0,l[i]=l[i]||0,o.relativePoints?d[i]=100:r.min<0||r.max<0?l[i]+=r.min:d[i]+=r.max)}function La(e,t,a){var n,i,r=a.length;for(n=0;n<r;++n)i=e._parseValue(a[n]),isNaN(i.min)||isNaN(i.max)||t.data[n].hidden||(e.min=Math.min(e.min,i.min),e.max=Math.max(e.max,i.max))}var xa=ba.extend({determineDataLimits:function(){var e,t,a,n,i=this,r=i.options,o=i.chart.data.datasets,s=i._getMatchingVisibleMetas(),d=r.stacked,l={},u=s.length;if(i.min=Number.POSITIVE_INFINITY,i.max=Number.NEGATIVE_INFINITY,void 0===d)for(e=0;!d&&e<u;++e)d=void 0!==(t=s[e]).stack;for(e=0;e<u;++e)a=o[(t=s[e]).index].data,d?ka(i,l,t,a):La(i,t,a);N.each(l,(function(e){n=e.pos.concat(e.neg),i.min=Math.min(i.min,N.min(n)),i.max=Math.max(i.max,N.max(n))})),i.min=N.isFinite(i.min)&&!isNaN(i.min)?i.min:0,i.max=N.isFinite(i.max)&&!isNaN(i.max)?i.max:1,i.handleTickRangeOptions()},_computeTickLimit:function(){var e;return this.isHorizontal()?Math.ceil(this.width/40):(e=N.options._parseFont(this.options.ticks),Math.ceil(this.height/e.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return this._getScaleLabel(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){return this.getPixelForDecimal((+this.getRightValue(e)-this._startValue)/this._valueRange)},getValueForPixel:function(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange},getPixelForTick:function(e){var t=this.ticksAsNumbers;return e<0||e>t.length-1?null:this.getPixelForValue(t[e])}}),wa=va;xa._defaults=wa;var Ya=N.valueOrDefault,Da=N.math.log10,Ta={position:"left",ticks:{callback:ea.formatters.logarithmic}};function Sa(e,t){return N.isFinite(e)&&e>=0?e:t}var Ha=ha.extend({determineDataLimits:function(){var e,t,a,n,i,r,o=this,s=o.options,d=o.chart,l=d.data.datasets,u=o.isHorizontal();function c(e){return u?e.xAxisID===o.id:e.yAxisID===o.id}o.min=Number.POSITIVE_INFINITY,o.max=Number.NEGATIVE_INFINITY,o.minNotZero=Number.POSITIVE_INFINITY;var m=s.stacked;if(void 0===m)for(e=0;e<l.length;e++)if(t=d.getDatasetMeta(e),d.isDatasetVisible(e)&&c(t)&&void 0!==t.stack){m=!0;break}if(s.stacked||m){var _={};for(e=0;e<l.length;e++){var h=[(t=d.getDatasetMeta(e)).type,void 0===s.stacked&&void 0===t.stack?e:"",t.stack].join(".");if(d.isDatasetVisible(e)&&c(t))for(void 0===_[h]&&(_[h]=[]),i=0,r=(n=l[e].data).length;i<r;i++){var p=_[h];a=o._parseValue(n[i]),isNaN(a.min)||isNaN(a.max)||t.data[i].hidden||a.min<0||a.max<0||(p[i]=p[i]||0,p[i]+=a.max)}}N.each(_,(function(e){if(e.length>0){var t=N.min(e),a=N.max(e);o.min=Math.min(o.min,t),o.max=Math.max(o.max,a)}}))}else for(e=0;e<l.length;e++)if(t=d.getDatasetMeta(e),d.isDatasetVisible(e)&&c(t))for(i=0,r=(n=l[e].data).length;i<r;i++)a=o._parseValue(n[i]),isNaN(a.min)||isNaN(a.max)||t.data[i].hidden||a.min<0||a.max<0||(o.min=Math.min(a.min,o.min),o.max=Math.max(a.max,o.max),0!==a.min&&(o.minNotZero=Math.min(a.min,o.minNotZero)));o.min=N.isFinite(o.min)?o.min:null,o.max=N.isFinite(o.max)?o.max:null,o.minNotZero=N.isFinite(o.minNotZero)?o.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;e.min=Sa(t.min,e.min),e.max=Sa(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(Da(e.min))-1),e.max=Math.pow(10,Math.floor(Da(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(Da(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(Da(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(Da(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,a=!e.isHorizontal(),n={min:Sa(t.min),max:Sa(t.max)},i=e.ticks=function(e,t){var a,n,i=[],r=Ya(e.min,Math.pow(10,Math.floor(Da(t.min)))),o=Math.floor(Da(t.max)),s=Math.ceil(t.max/Math.pow(10,o));0===r?(a=Math.floor(Da(t.minNotZero)),n=Math.floor(t.minNotZero/Math.pow(10,a)),i.push(r),r=n*Math.pow(10,a)):(a=Math.floor(Da(r)),n=Math.floor(r/Math.pow(10,a)));var d=a<0?Math.pow(10,Math.abs(a)):1;do{i.push(r),10==++n&&(n=1,d=++a>=0?1:d),r=Math.round(n*Math.pow(10,a)*d)/d}while(a<o||a===o&&n<s);var l=Ya(e.max,r);return i.push(l),i}(n,e);e.max=N.max(i),e.min=N.min(i),t.reverse?(a=!a,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),a&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),ha.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return this._getScaleLabel(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){var t=this.tickValues;return e<0||e>t.length-1?null:this.getPixelForValue(t[e])},_getFirstTickValue:function(e){var t=Math.floor(Da(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},_configure:function(){var e=this,t=e.min,a=0;ha.prototype._configure.call(e),0===t&&(t=e._getFirstTickValue(e.minNotZero),a=Ya(e.options.ticks.fontSize,E.global.defaultFontSize)/e._length),e._startValue=Da(t),e._valueOffset=a,e._valueRange=(Da(e.max)-Da(t))/(1-a)},getPixelForValue:function(e){var t=this,a=0;return(e=+t.getRightValue(e))>t.min&&e>0&&(a=(Da(e)-t._startValue)/t._valueRange+t._valueOffset),t.getPixelForDecimal(a)},getValueForPixel:function(e){var t=this,a=t.getDecimalForPixel(e);return 0===a&&0===t.min?0:Math.pow(10,t._startValue+(a-t._valueOffset)*t._valueRange)}}),ja=Ta;Ha._defaults=ja;var Pa=N.valueOrDefault,Aa=N.valueAtIndexOrDefault,Ca=N.options.resolve,Oa={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:ea.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function Ea(e){var t=e.ticks;return t.display&&e.display?Pa(t.fontSize,E.global.defaultFontSize)+2*t.backdropPaddingY:0}function Fa(e,t,a,n,i){return e===n||e===i?{start:t-a/2,end:t+a/2}:e<n||e>i?{start:t-a,end:t}:{start:t,end:t+a}}function Wa(e){return 0===e||180===e?"center":e<180?"left":"right"}function za(e,t,a,n){var i,r,o=a.y+n/2;if(N.isArray(t))for(i=0,r=t.length;i<r;++i)e.fillText(t[i],a.x,o),o+=n;else e.fillText(t,a.x,o)}function Ia(e,t,a){90===e||270===e?a.y-=t.h/2:(e>270||e<90)&&(a.y-=t.h)}function Na(e){return N.isNumber(e)?e:0}var Ra=ba.extend({setDimensions:function(){var e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=Ea(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2},determineDataLimits:function(){var e=this,t=e.chart,a=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;N.each(t.data.datasets,(function(i,r){if(t.isDatasetVisible(r)){var o=t.getDatasetMeta(r);N.each(i.data,(function(t,i){var r=+e.getRightValue(t);isNaN(r)||o.data[i].hidden||(a=Math.min(r,a),n=Math.max(r,n))}))}})),e.min=a===Number.POSITIVE_INFINITY?0:a,e.max=n===Number.NEGATIVE_INFINITY?0:n,e.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Ea(this.options))},convertTicksToLabels:function(){var e=this;ba.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map((function(){var t=N.callback(e.options.pointLabels.callback,arguments,e);return t||0===t?t:""}))},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e=this.options;e.display&&e.pointLabels.display?function(e){var t,a,n,i=N.options._parseFont(e.options.pointLabels),r={l:0,r:e.width,t:0,b:e.height-e.paddingTop},o={};e.ctx.font=i.string,e._pointLabelSizes=[];var s,d,l,u=e.chart.data.labels.length;for(t=0;t<u;t++){n=e.getPointPosition(t,e.drawingArea+5),s=e.ctx,d=i.lineHeight,l=e.pointLabels[t],a=N.isArray(l)?{w:N.longestText(s,s.font,l),h:l.length*d}:{w:s.measureText(l).width,h:d},e._pointLabelSizes[t]=a;var c=e.getIndexAngle(t),m=N.toDegrees(c)%360,_=Fa(m,n.x,a.w,0,180),h=Fa(m,n.y,a.h,90,270);_.start<r.l&&(r.l=_.start,o.l=c),_.end>r.r&&(r.r=_.end,o.r=c),h.start<r.t&&(r.t=h.start,o.t=c),h.end>r.b&&(r.b=h.end,o.b=c)}e.setReductions(e.drawingArea,r,o)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(e,t,a){var n=this,i=t.l/Math.sin(a.l),r=Math.max(t.r-n.width,0)/Math.sin(a.r),o=-t.t/Math.cos(a.t),s=-Math.max(t.b-(n.height-n.paddingTop),0)/Math.cos(a.b);i=Na(i),r=Na(r),o=Na(o),s=Na(s),n.drawingArea=Math.min(Math.floor(e-(i+r)/2),Math.floor(e-(o+s)/2)),n.setCenterPoint(i,r,o,s)},setCenterPoint:function(e,t,a,n){var i=this,r=i.width-t-i.drawingArea,o=e+i.drawingArea,s=a+i.drawingArea,d=i.height-i.paddingTop-n-i.drawingArea;i.xCenter=Math.floor((o+r)/2+i.left),i.yCenter=Math.floor((s+d)/2+i.top+i.paddingTop)},getIndexAngle:function(e){var t=this.chart,a=(e*(360/t.data.labels.length)+((t.options||{}).startAngle||0))%360;return(a<0?a+360:a)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(N.isNullOrUndef(e))return NaN;var a=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*a:(e-t.min)*a},getPointPosition:function(e,t){var a=this.getIndexAngle(e)-Math.PI/2;return{x:Math.cos(a)*t+this.xCenter,y:Math.sin(a)*t+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(e){var t=this.min,a=this.max;return this.getPointPositionForValue(e||0,this.beginAtZero?0:t<0&&a<0?a:t>0&&a>0?t:0)},_drawGrid:function(){var e,t,a,n=this,i=n.ctx,r=n.options,o=r.gridLines,s=r.angleLines,d=Pa(s.lineWidth,o.lineWidth),l=Pa(s.color,o.color);if(r.pointLabels.display&&function(e){var t=e.ctx,a=e.options,n=a.pointLabels,i=Ea(a),r=e.getDistanceFromCenterForValue(a.ticks.reverse?e.min:e.max),o=N.options._parseFont(n);t.save(),t.font=o.string,t.textBaseline="middle";for(var s=e.chart.data.labels.length-1;s>=0;s--){var d=0===s?i/2:0,l=e.getPointPosition(s,r+d+5),u=Aa(n.fontColor,s,E.global.defaultFontColor);t.fillStyle=u;var c=e.getIndexAngle(s),m=N.toDegrees(c);t.textAlign=Wa(m),Ia(m,e._pointLabelSizes[s],l),za(t,e.pointLabels[s],l,o.lineHeight)}t.restore()}(n),o.display&&N.each(n.ticks,(function(e,a){0!==a&&(t=n.getDistanceFromCenterForValue(n.ticksAsNumbers[a]),function(e,t,a,n){var i,r=e.ctx,o=t.circular,s=e.chart.data.labels.length,d=Aa(t.color,n-1),l=Aa(t.lineWidth,n-1);if((o||s)&&d&&l){if(r.save(),r.strokeStyle=d,r.lineWidth=l,r.setLineDash&&(r.setLineDash(t.borderDash||[]),r.lineDashOffset=t.borderDashOffset||0),r.beginPath(),o)r.arc(e.xCenter,e.yCenter,a,0,2*Math.PI);else{i=e.getPointPosition(0,a),r.moveTo(i.x,i.y);for(var u=1;u<s;u++)i=e.getPointPosition(u,a),r.lineTo(i.x,i.y)}r.closePath(),r.stroke(),r.restore()}}(n,o,t,a))})),s.display&&d&&l){for(i.save(),i.lineWidth=d,i.strokeStyle=l,i.setLineDash&&(i.setLineDash(Ca([s.borderDash,o.borderDash,[]])),i.lineDashOffset=Ca([s.borderDashOffset,o.borderDashOffset,0])),e=n.chart.data.labels.length-1;e>=0;e--)t=n.getDistanceFromCenterForValue(r.ticks.reverse?n.min:n.max),a=n.getPointPosition(e,t),i.beginPath(),i.moveTo(n.xCenter,n.yCenter),i.lineTo(a.x,a.y),i.stroke();i.restore()}},_drawLabels:function(){var e=this,t=e.ctx,a=e.options.ticks;if(a.display){var n,i,r=e.getIndexAngle(0),o=N.options._parseFont(a),s=Pa(a.fontColor,E.global.defaultFontColor);t.save(),t.font=o.string,t.translate(e.xCenter,e.yCenter),t.rotate(r),t.textAlign="center",t.textBaseline="middle",N.each(e.ticks,(function(r,d){(0!==d||a.reverse)&&(n=e.getDistanceFromCenterForValue(e.ticksAsNumbers[d]),a.showLabelBackdrop&&(i=t.measureText(r).width,t.fillStyle=a.backdropColor,t.fillRect(-i/2-a.backdropPaddingX,-n-o.size/2-a.backdropPaddingY,i+2*a.backdropPaddingX,o.size+2*a.backdropPaddingY)),t.fillStyle=s,t.fillText(r,0,-n))})),t.restore()}},_drawTitle:N.noop}),Ba=Oa;Ra._defaults=Ba;var Va=N._deprecated,Ga=N.options.resolve,Ja=N.valueOrDefault,Ua=Number.MIN_SAFE_INTEGER||-9007199254740991,qa=Number.MAX_SAFE_INTEGER||9007199254740991,Ka={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},$a=Object.keys(Ka);function Qa(e,t){return e-t}function Za(e){return N.valueOrDefault(e.time.min,e.ticks.min)}function Xa(e){return N.valueOrDefault(e.time.max,e.ticks.max)}function en(e,t,a,n){var i=function(e,t,a){for(var n,i,r,o=0,s=e.length-1;o>=0&&o<=s;){if(i=e[(n=o+s>>1)-1]||null,r=e[n],!i)return{lo:null,hi:r};if(r[t]<a)o=n+1;else{if(!(i[t]>a))return{lo:i,hi:r};s=n-1}}return{lo:r,hi:null}}(e,t,a),r=i.lo?i.hi?i.lo:e[e.length-2]:e[0],o=i.lo?i.hi?i.hi:e[e.length-1]:e[1],s=o[t]-r[t],d=s?(a-r[t])/s:0,l=(o[n]-r[n])*d;return r[n]+l}function tn(e,t){var a=e._adapter,n=e.options.time,i=n.parser,r=i||n.format,o=t;return"function"==typeof i&&(o=i(o)),N.isFinite(o)||(o="string"==typeof r?a.parse(o,r):a.parse(o)),null!==o?+o:(i||"function"!=typeof r||(o=r(t),N.isFinite(o)||(o=a.parse(o))),o)}function an(e,t){if(N.isNullOrUndef(t))return null;var a=e.options.time,n=tn(e,e.getRightValue(t));return null===n||a.round&&(n=+e._adapter.startOf(n,a.round)),n}function nn(e,t,a,n){var i,r,o,s=$a.length;for(i=$a.indexOf(e);i<s-1;++i)if(o=(r=Ka[$a[i]]).steps?r.steps:qa,r.common&&Math.ceil((a-t)/(o*r.size))<=n)return $a[i];return $a[s-1]}function rn(e,t,a){var n,i,r=[],o={},s=t.length;for(n=0;n<s;++n)o[i=t[n]]=n,r.push({value:i,major:!1});return 0!==s&&a?function(e,t,a,n){var i,r,o=e._adapter,s=+o.startOf(t[0].value,n),d=t[t.length-1].value;for(i=s;i<=d;i=+o.add(i,1,n))(r=a[i])>=0&&(t[r].major=!0);return t}(e,r,o,a):r}var on=ha.extend({initialize:function(){this.mergeTicksOptions(),ha.prototype.initialize.call(this)},update:function(){var e=this,t=e.options,a=t.time||(t.time={}),n=e._adapter=new Xt._date(t.adapters.date);return Va("time scale",a.format,"time.format","time.parser"),Va("time scale",a.min,"time.min","ticks.min"),Va("time scale",a.max,"time.max","ticks.max"),N.mergeIf(a.displayFormats,n.formats()),ha.prototype.update.apply(e,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),ha.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,a,n,i,r,o,s=this,d=s.chart,l=s._adapter,u=s.options,c=u.time.unit||"day",m=qa,_=Ua,h=[],p=[],f=[],g=s._getLabels();for(e=0,a=g.length;e<a;++e)f.push(an(s,g[e]));for(e=0,a=(d.data.datasets||[]).length;e<a;++e)if(d.isDatasetVisible(e))if(i=d.data.datasets[e].data,N.isObject(i[0]))for(p[e]=[],t=0,n=i.length;t<n;++t)r=an(s,i[t]),h.push(r),p[e][t]=r;else p[e]=f.slice(0),o||(h=h.concat(f),o=!0);else p[e]=[];f.length&&(m=Math.min(m,f[0]),_=Math.max(_,f[f.length-1])),h.length&&(h=a>1?function(e){var t,a,n,i={},r=[];for(t=0,a=e.length;t<a;++t)i[n=e[t]]||(i[n]=!0,r.push(n));return r}(h).sort(Qa):h.sort(Qa),m=Math.min(m,h[0]),_=Math.max(_,h[h.length-1])),m=an(s,Za(u))||m,_=an(s,Xa(u))||_,m=m===qa?+l.startOf(Date.now(),c):m,_=_===Ua?+l.endOf(Date.now(),c)+1:_,s.min=Math.min(m,_),s.max=Math.max(m+1,_),s._table=[],s._timestamps={data:h,datasets:p,labels:f}},buildTicks:function(){var e,t,a,n=this,i=n.min,r=n.max,o=n.options,s=o.ticks,d=o.time,l=n._timestamps,u=[],c=n.getLabelCapacity(i),m=s.source,_=o.distribution;for(l="data"===m||"auto"===m&&"series"===_?l.data:"labels"===m?l.labels:function(e,t,a,n){var i,r=e._adapter,o=e.options,s=o.time,d=s.unit||nn(s.minUnit,t,a,n),l=Ga([s.stepSize,s.unitStepSize,1]),u="week"===d&&s.isoWeekday,c=t,m=[];if(u&&(c=+r.startOf(c,"isoWeek",u)),c=+r.startOf(c,u?"day":d),r.diff(a,t,d)>1e5*l)throw t+" and "+a+" are too far apart with stepSize of "+l+" "+d;for(i=c;i<a;i=+r.add(i,l,d))m.push(i);return i!==a&&"ticks"!==o.bounds||m.push(i),m}(n,i,r,c),"ticks"===o.bounds&&l.length&&(i=l[0],r=l[l.length-1]),i=an(n,Za(o))||i,r=an(n,Xa(o))||r,e=0,t=l.length;e<t;++e)(a=l[e])>=i&&a<=r&&u.push(a);return n.min=i,n.max=r,n._unit=d.unit||(s.autoSkip?nn(d.minUnit,n.min,n.max,c):function(e,t,a,n,i){var r,o;for(r=$a.length-1;r>=$a.indexOf(a);r--)if(o=$a[r],Ka[o].common&&e._adapter.diff(i,n,o)>=t-1)return o;return $a[a?$a.indexOf(a):0]}(n,u.length,d.minUnit,n.min,n.max)),n._majorUnit=s.major.enabled&&"year"!==n._unit?function(e){for(var t=$a.indexOf(e)+1,a=$a.length;t<a;++t)if(Ka[$a[t]].common)return $a[t]}(n._unit):void 0,n._table=function(e,t,a,n){if("linear"===n||!e.length)return[{time:t,pos:0},{time:a,pos:1}];var i,r,o,s,d,l=[],u=[t];for(i=0,r=e.length;i<r;++i)(s=e[i])>t&&s<a&&u.push(s);for(u.push(a),i=0,r=u.length;i<r;++i)d=u[i+1],o=u[i-1],s=u[i],void 0!==o&&void 0!==d&&Math.round((d+o)/2)===s||l.push({time:s,pos:i/(r-1)});return l}(n._timestamps.data,i,r,_),n._offsets=function(e,t,a,n,i){var r,o,s=0,d=0;return i.offset&&t.length&&(r=en(e,"time",t[0],"pos"),s=1===t.length?1-r:(en(e,"time",t[1],"pos")-r)/2,o=en(e,"time",t[t.length-1],"pos"),d=1===t.length?o:(o-en(e,"time",t[t.length-2],"pos"))/2),{start:s,end:d,factor:1/(s+1+d)}}(n._table,u,0,0,o),s.reverse&&u.reverse(),rn(n,u,n._majorUnit)},getLabelForIndex:function(e,t){var a=this,n=a._adapter,i=a.chart.data,r=a.options.time,o=i.labels&&e<i.labels.length?i.labels[e]:"",s=i.datasets[t].data[e];return N.isObject(s)&&(o=a.getRightValue(s)),r.tooltipFormat?n.format(tn(a,o),r.tooltipFormat):"string"==typeof o?o:n.format(tn(a,o),r.displayFormats.datetime)},tickFormatFunction:function(e,t,a,n){var i=this._adapter,r=this.options,o=r.time.displayFormats,s=o[this._unit],d=this._majorUnit,l=o[d],u=a[t],c=r.ticks,m=d&&l&&u&&u.major,_=i.format(e,n||(m?l:s)),h=m?c.major:c.minor,p=Ga([h.callback,h.userCallback,c.callback,c.userCallback]);return p?p(_,t,a):_},convertTicksToLabels:function(e){var t,a,n=[];for(t=0,a=e.length;t<a;++t)n.push(this.tickFormatFunction(e[t].value,t,e));return n},getPixelForOffset:function(e){var t=this._offsets,a=en(this._table,"time",e,"pos");return this.getPixelForDecimal((t.start+a)*t.factor)},getPixelForValue:function(e,t,a){var n=null;if(void 0!==t&&void 0!==a&&(n=this._timestamps.datasets[a][t]),null===n&&(n=an(this,e)),null!==n)return this.getPixelForOffset(n)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this._offsets,a=this.getDecimalForPixel(e)/t.factor-t.end,n=en(this._table,"pos",a,"time");return this._adapter._create(n)},_getLabelSize:function(e){var t=this.options.ticks,a=this.ctx.measureText(e).width,n=N.toRadians(this.isHorizontal()?t.maxRotation:t.minRotation),i=Math.cos(n),r=Math.sin(n),o=Ja(t.fontSize,E.global.defaultFontSize);return{w:a*i+o*r,h:a*r+o*i}},getLabelWidth:function(e){return this._getLabelSize(e).w},getLabelCapacity:function(e){var t=this,a=t.options.time,n=a.displayFormats,i=n[a.unit]||n.millisecond,r=t.tickFormatFunction(e,0,rn(t,[e],t._majorUnit),i),o=t._getLabelSize(r),s=Math.floor(t.isHorizontal()?t.width/o.w:t.height/o.h);return t.options.offset&&s--,s>0?s:1}}),sn={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};on._defaults=sn;var dn={category:fa,linear:xa,logarithmic:Ha,radialLinear:Ra,time:on},ln={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};Xt._date.override("function"==typeof e?{_id:"moment",formats:function(){return ln},parse:function(t,a){return"string"==typeof t&&"string"==typeof a?t=e(t,a):t instanceof e||(t=e(t)),t.isValid()?t.valueOf():null},format:function(t,a){return e(t).format(a)},add:function(t,a,n){return e(t).add(a,n).valueOf()},diff:function(t,a,n){return e(t).diff(e(a),n)},startOf:function(t,a,n){return t=e(t),"isoWeek"===a?t.isoWeekday(n).valueOf():t.startOf(a).valueOf()},endOf:function(t,a){return e(t).endOf(a).valueOf()},_create:function(t){return e(t)}}:{}),E._set("global",{plugins:{filler:{propagate:!0}}});var un={dataset:function(e){var t=e.fill,a=e.chart,n=a.getDatasetMeta(t),i=n&&a.isDatasetVisible(t)&&n.dataset._children||[],r=i.length||0;return r?function(e,t){return t<r&&i[t]._view||null}:null},boundary:function(e){var t=e.boundary,a=t?t.x:null,n=t?t.y:null;return N.isArray(t)?function(e,a){return t[a]}:function(e){return{x:null===a?e.x:a,y:null===n?e.y:n}}}};function cn(e,t,a){var n,i=e._model||{},r=i.fill;if(void 0===r&&(r=!!i.backgroundColor),!1===r||null===r)return!1;if(!0===r)return"origin";if(n=parseFloat(r,10),isFinite(n)&&Math.floor(n)===n)return"-"!==r[0]&&"+"!==r[0]||(n=t+n),!(n===t||n<0||n>=a)&&n;switch(r){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return r;default:return!1}}function mn(e){return(e.el._scale||{}).getPointPositionForValue?function(e){var t,a,n,i,r,o=e.el._scale,s=o.options,d=o.chart.data.labels.length,l=e.fill,u=[];if(!d)return null;for(t=s.ticks.reverse?o.max:o.min,a=s.ticks.reverse?o.min:o.max,n=o.getPointPositionForValue(0,t),i=0;i<d;++i)r="start"===l||"end"===l?o.getPointPositionForValue(i,"start"===l?t:a):o.getBasePosition(i),s.gridLines.circular&&(r.cx=n.x,r.cy=n.y,r.angle=o.getIndexAngle(i)-Math.PI/2),u.push(r);return u}(e):function(e){var t,a=e.el._model||{},n=e.el._scale||{},i=e.fill,r=null;if(isFinite(i))return null;if("start"===i?r=void 0===a.scaleBottom?n.bottom:a.scaleBottom:"end"===i?r=void 0===a.scaleTop?n.top:a.scaleTop:void 0!==a.scaleZero?r=a.scaleZero:n.getBasePixel&&(r=n.getBasePixel()),null!=r){if(void 0!==r.x&&void 0!==r.y)return r;if(N.isFinite(r))return{x:(t=n.isHorizontal())?r:null,y:t?null:r}}return null}(e)}function _n(e,t,a){var n,i=e[t].fill,r=[t];if(!a)return i;for(;!1!==i&&-1===r.indexOf(i);){if(!isFinite(i))return i;if(!(n=e[i]))return!1;if(n.visible)return i;r.push(i),i=n.fill}return!1}function hn(e){var t=e.fill,a="dataset";return!1===t?null:(isFinite(t)||(a="boundary"),un[a](e))}function pn(e){return e&&!e.skip}function fn(e,t,a,n,i){var r,o,s,d;if(n&&i){for(e.moveTo(t[0].x,t[0].y),r=1;r<n;++r)N.canvas.lineTo(e,t[r-1],t[r]);if(void 0===a[0].angle)for(e.lineTo(a[i-1].x,a[i-1].y),r=i-1;r>0;--r)N.canvas.lineTo(e,a[r],a[r-1],!0);else for(o=a[0].cx,s=a[0].cy,d=Math.sqrt(Math.pow(a[0].x-o,2)+Math.pow(a[0].y-s,2)),r=i-1;r>0;--r)e.arc(o,s,d,a[r].angle,a[r-1].angle,!0)}}function gn(e,t,a,n,i,r){var o,s,d,l,u,c,m,_,h=t.length,p=n.spanGaps,f=[],g=[],y=0,M=0;for(e.beginPath(),o=0,s=h;o<s;++o)u=a(l=t[d=o%h]._view,d,n),c=pn(l),m=pn(u),r&&void 0===_&&c&&(s=h+(_=o+1)),c&&m?(y=f.push(l),M=g.push(u)):y&&M&&(p?(c&&f.push(l),m&&g.push(u)):(fn(e,f,g,y,M),y=M=0,f=[],g=[]));fn(e,f,g,y,M),e.closePath(),e.fillStyle=i,e.fill()}var yn={id:"filler",afterDatasetsUpdate:function(e,t){var a,n,i,r,o=(e.data.datasets||[]).length,s=t.propagate,d=[];for(n=0;n<o;++n)r=null,(i=(a=e.getDatasetMeta(n)).dataset)&&i._model&&i instanceof ve.Line&&(r={visible:e.isDatasetVisible(n),fill:cn(i,n,o),chart:e,el:i}),a.$filler=r,d.push(r);for(n=0;n<o;++n)(r=d[n])&&(r.fill=_n(d,n,s),r.boundary=mn(r),r.mapper=hn(r))},beforeDatasetsDraw:function(e){var t,a,n,i,r,o,s,d=e._getSortedVisibleDatasetMetas(),l=e.ctx;for(a=d.length-1;a>=0;--a)(t=d[a].$filler)&&t.visible&&(i=(n=t.el)._view,r=n._children||[],o=t.mapper,s=i.backgroundColor||E.global.defaultColor,o&&s&&r.length&&(N.canvas.clipArea(l,e.chartArea),gn(l,r,o,i,s,n._loop),N.canvas.unclipArea(l)))}},Mn=N.rtl.getRtlAdapter,bn=N.noop,vn=N.valueOrDefault;function kn(e,t){return e.usePointStyle&&e.boxWidth>t?t:e.boxWidth}E._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var a=t.datasetIndex,n=this.chart,i=n.getDatasetMeta(a);i.hidden=null===i.hidden?!n.data.datasets[a].hidden:null,n.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data.datasets,a=e.options.legend||{},n=a.labels&&a.labels.usePointStyle;return e._getSortedDatasetMetas().map((function(a){var i=a.controller.getStyle(n?0:void 0);return{text:t[a.index].label,fillStyle:i.backgroundColor,hidden:!e.isDatasetVisible(a.index),lineCap:i.borderCapStyle,lineDash:i.borderDash,lineDashOffset:i.borderDashOffset,lineJoin:i.borderJoinStyle,lineWidth:i.borderWidth,strokeStyle:i.borderColor,pointStyle:i.pointStyle,rotation:i.rotation,datasetIndex:a.index}}),this)}}},legendCallback:function(e){var t,a,n,i=document.createElement("ul"),r=e.data.datasets;for(i.setAttribute("class",e.id+"-legend"),t=0,a=r.length;t<a;t++)(n=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=r[t].backgroundColor,r[t].label&&n.appendChild(document.createTextNode(r[t].label));return i.outerHTML}});var Ln=q.extend({initialize:function(e){N.extend(this,e),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:bn,update:function(e,t,a){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=a,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:bn,beforeSetDimensions:bn,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:bn,beforeBuildLabels:bn,buildLabels:function(){var e=this,t=e.options.labels||{},a=N.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(a=a.filter((function(a){return t.filter(a,e.chart.data)}))),e.options.reverse&&a.reverse(),e.legendItems=a},afterBuildLabels:bn,beforeFit:bn,fit:function(){var e=this,t=e.options,a=t.labels,n=t.display,i=e.ctx,r=N.options._parseFont(a),o=r.size,s=e.legendHitBoxes=[],d=e.minSize,l=e.isHorizontal();if(l?(d.width=e.maxWidth,d.height=n?10:0):(d.width=n?10:0,d.height=e.maxHeight),n){if(i.font=r.string,l){var u=e.lineWidths=[0],c=0;i.textAlign="left",i.textBaseline="middle",N.each(e.legendItems,(function(e,t){var n=kn(a,o)+o/2+i.measureText(e.text).width;(0===t||u[u.length-1]+n+2*a.padding>d.width)&&(c+=o+a.padding,u[u.length-(t>0?0:1)]=0),s[t]={left:0,top:0,width:n,height:o},u[u.length-1]+=n+a.padding})),d.height+=c}else{var m=a.padding,_=e.columnWidths=[],h=e.columnHeights=[],p=a.padding,f=0,g=0;N.each(e.legendItems,(function(e,t){var n=kn(a,o)+o/2+i.measureText(e.text).width;t>0&&g+o+2*m>d.height&&(p+=f+a.padding,_.push(f),h.push(g),f=0,g=0),f=Math.max(f,n),g+=o+m,s[t]={left:0,top:0,width:n,height:o}})),p+=f,_.push(f),h.push(g),d.width+=p}e.width=d.width,e.height=d.height}else e.width=d.width=e.height=d.height=0},afterFit:bn,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,a=t.labels,n=E.global,i=n.defaultColor,r=n.elements.line,o=e.height,s=e.columnHeights,d=e.width,l=e.lineWidths;if(t.display){var u,c=Mn(t.rtl,e.left,e.minSize.width),m=e.ctx,_=vn(a.fontColor,n.defaultFontColor),h=N.options._parseFont(a),p=h.size;m.textAlign=c.textAlign("left"),m.textBaseline="middle",m.lineWidth=.5,m.strokeStyle=_,m.fillStyle=_,m.font=h.string;var f=kn(a,p),g=e.legendHitBoxes,y=function(e,n){switch(t.align){case"start":return a.padding;case"end":return e-n;default:return(e-n+a.padding)/2}},M=e.isHorizontal();u=M?{x:e.left+y(d,l[0]),y:e.top+a.padding,line:0}:{x:e.left+a.padding,y:e.top+y(o,s[0]),line:0},N.rtl.overrideTextDirection(e.ctx,t.textDirection);var b=p+a.padding;N.each(e.legendItems,(function(t,n){var _=m.measureText(t.text).width,h=f+p/2+_,v=u.x,k=u.y;c.setWidth(e.minSize.width),M?n>0&&v+h+a.padding>e.left+e.minSize.width&&(k=u.y+=b,u.line++,v=u.x=e.left+y(d,l[u.line])):n>0&&k+b>e.top+e.minSize.height&&(v=u.x=v+e.columnWidths[u.line]+a.padding,u.line++,k=u.y=e.top+y(o,s[u.line]));var L=c.x(v);!function(e,t,n){if(!(isNaN(f)||f<=0)){m.save();var o=vn(n.lineWidth,r.borderWidth);if(m.fillStyle=vn(n.fillStyle,i),m.lineCap=vn(n.lineCap,r.borderCapStyle),m.lineDashOffset=vn(n.lineDashOffset,r.borderDashOffset),m.lineJoin=vn(n.lineJoin,r.borderJoinStyle),m.lineWidth=o,m.strokeStyle=vn(n.strokeStyle,i),m.setLineDash&&m.setLineDash(vn(n.lineDash,r.borderDash)),a&&a.usePointStyle){var s=f*Math.SQRT2/2,d=c.xPlus(e,f/2),l=t+p/2;N.canvas.drawPoint(m,n.pointStyle,s,d,l,n.rotation)}else m.fillRect(c.leftForLtr(e,f),t,f,p),0!==o&&m.strokeRect(c.leftForLtr(e,f),t,f,p);m.restore()}}(L,k,t),g[n].left=c.leftForLtr(L,g[n].width),g[n].top=k,function(e,t,a,n){var i=p/2,r=c.xPlus(e,f+i),o=t+i;m.fillText(a.text,r,o),a.hidden&&(m.beginPath(),m.lineWidth=2,m.moveTo(r,o),m.lineTo(c.xPlus(r,n),o),m.stroke())}(L,k,t,_),M?u.x+=h+a.padding:u.y+=b})),N.rtl.restoreTextDirection(e.ctx,t.textDirection)}},_getLegendItemAt:function(e,t){var a,n,i,r=this;if(e>=r.left&&e<=r.right&&t>=r.top&&t<=r.bottom)for(i=r.legendHitBoxes,a=0;a<i.length;++a)if(e>=(n=i[a]).left&&e<=n.left+n.width&&t>=n.top&&t<=n.top+n.height)return r.legendItems[a];return null},handleEvent:function(e){var t,a=this,n=a.options,i="mouseup"===e.type?"click":e.type;if("mousemove"===i){if(!n.onHover&&!n.onLeave)return}else{if("click"!==i)return;if(!n.onClick)return}t=a._getLegendItemAt(e.x,e.y),"click"===i?t&&n.onClick&&n.onClick.call(a,e.native,t):(n.onLeave&&t!==a._hoveredItem&&(a._hoveredItem&&n.onLeave.call(a,e.native,a._hoveredItem),a._hoveredItem=t),n.onHover&&t&&n.onHover.call(a,e.native,t))}});function xn(e,t){var a=new Ln({ctx:e.ctx,options:t,chart:e});ht.configure(e,a,t),ht.addBox(e,a),e.legend=a}var wn={id:"legend",_element:Ln,beforeInit:function(e){var t=e.options.legend;t&&xn(e,t)},beforeUpdate:function(e){var t=e.options.legend,a=e.legend;t?(N.mergeIf(t,E.global.legend),a?(ht.configure(e,a,t),a.options=t):xn(e,t)):a&&(ht.removeBox(e,a),delete e.legend)},afterEvent:function(e,t){var a=e.legend;a&&a.handleEvent(t)}},Yn=N.noop;E._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Dn=q.extend({initialize:function(e){N.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:Yn,update:function(e,t,a){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=a,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:Yn,beforeSetDimensions:Yn,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:Yn,beforeBuildLabels:Yn,buildLabels:Yn,afterBuildLabels:Yn,beforeFit:Yn,fit:function(){var e,t=this,a=t.options,n=t.minSize={},i=t.isHorizontal();a.display?(e=(N.isArray(a.text)?a.text.length:1)*N.options._parseFont(a).lineHeight+2*a.padding,t.width=n.width=i?t.maxWidth:e,t.height=n.height=i?e:t.maxHeight):t.width=n.width=t.height=n.height=0},afterFit:Yn,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,a=e.options;if(a.display){var n,i,r,o=N.options._parseFont(a),s=o.lineHeight,d=s/2+a.padding,l=0,u=e.top,c=e.left,m=e.bottom,_=e.right;t.fillStyle=N.valueOrDefault(a.fontColor,E.global.defaultFontColor),t.font=o.string,e.isHorizontal()?(i=c+(_-c)/2,r=u+d,n=_-c):(i="left"===a.position?c+d:_-d,r=u+(m-u)/2,n=m-u,l=Math.PI*("left"===a.position?-.5:.5)),t.save(),t.translate(i,r),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var h=a.text;if(N.isArray(h))for(var p=0,f=0;f<h.length;++f)t.fillText(h[f],0,p,n),p+=s;else t.fillText(h,0,0,n);t.restore()}}});function Tn(e,t){var a=new Dn({ctx:e.ctx,options:t,chart:e});ht.configure(e,a,t),ht.addBox(e,a),e.titleBlock=a}var Sn={},Hn=yn,jn=wn,Pn={id:"title",_element:Dn,beforeInit:function(e){var t=e.options.title;t&&Tn(e,t)},beforeUpdate:function(e){var t=e.options.title,a=e.titleBlock;t?(N.mergeIf(t,E.global.title),a?(ht.configure(e,a,t),a.options=t):Tn(e,t)):a&&(ht.removeBox(e,a),delete e.titleBlock)}};for(var An in Sn.filler=Hn,Sn.legend=jn,Sn.title=Pn,$t.helpers=N,function(){function e(e,t,a){var n;return"string"==typeof e?(n=parseInt(e,10),-1!==e.indexOf("%")&&(n=n/100*t.parentNode[a])):n=e,n}function t(e){return null!=e&&"none"!==e}function a(a,n,i){var r=document.defaultView,o=N._getParentNode(a),s=r.getComputedStyle(a)[n],d=r.getComputedStyle(o)[n],l=t(s),u=t(d),c=Number.POSITIVE_INFINITY;return l||u?Math.min(l?e(s,a,i):c,u?e(d,o,i):c):"none"}N.where=function(e,t){if(N.isArray(e)&&Array.prototype.filter)return e.filter(t);var a=[];return N.each(e,(function(e){t(e)&&a.push(e)})),a},N.findIndex=Array.prototype.findIndex?function(e,t,a){return e.findIndex(t,a)}:function(e,t,a){a=void 0===a?e:a;for(var n=0,i=e.length;n<i;++n)if(t.call(a,e[n],n,e))return n;return-1},N.findNextWhere=function(e,t,a){N.isNullOrUndef(a)&&(a=-1);for(var n=a+1;n<e.length;n++){var i=e[n];if(t(i))return i}},N.findPreviousWhere=function(e,t,a){N.isNullOrUndef(a)&&(a=e.length);for(var n=a-1;n>=0;n--){var i=e[n];if(t(i))return i}},N.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},N.almostEquals=function(e,t,a){return Math.abs(e-t)<a},N.almostWhole=function(e,t){var a=Math.round(e);return a-t<=e&&a+t>=e},N.max=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.max(e,t)}),Number.NEGATIVE_INFINITY)},N.min=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.min(e,t)}),Number.POSITIVE_INFINITY)},N.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0==(e=+e)||isNaN(e)?e:e>0?1:-1},N.toRadians=function(e){return e*(Math.PI/180)},N.toDegrees=function(e){return e*(180/Math.PI)},N._decimalPlaces=function(e){if(N.isFinite(e)){for(var t=1,a=0;Math.round(e*t)/t!==e;)t*=10,a++;return a}},N.getAngleFromPoint=function(e,t){var a=t.x-e.x,n=t.y-e.y,i=Math.sqrt(a*a+n*n),r=Math.atan2(n,a);return r<-.5*Math.PI&&(r+=2*Math.PI),{angle:r,distance:i}},N.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},N.aliasPixel=function(e){return e%2==0?0:.5},N._alignPixel=function(e,t,a){var n=e.currentDevicePixelRatio,i=a/2;return Math.round((t-i)*n)/n+i},N.splineCurve=function(e,t,a,n){var i=e.skip?t:e,r=t,o=a.skip?t:a,s=Math.sqrt(Math.pow(r.x-i.x,2)+Math.pow(r.y-i.y,2)),d=Math.sqrt(Math.pow(o.x-r.x,2)+Math.pow(o.y-r.y,2)),l=s/(s+d),u=d/(s+d),c=n*(l=isNaN(l)?0:l),m=n*(u=isNaN(u)?0:u);return{previous:{x:r.x-c*(o.x-i.x),y:r.y-c*(o.y-i.y)},next:{x:r.x+m*(o.x-i.x),y:r.y+m*(o.y-i.y)}}},N.EPSILON=Number.EPSILON||1e-14,N.splineCurveMonotone=function(e){var t,a,n,i,r,o,s,d,l,u=(e||[]).map((function(e){return{model:e._model,deltaK:0,mK:0}})),c=u.length;for(t=0;t<c;++t)if(!(n=u[t]).model.skip){if(a=t>0?u[t-1]:null,(i=t<c-1?u[t+1]:null)&&!i.model.skip){var m=i.model.x-n.model.x;n.deltaK=0!==m?(i.model.y-n.model.y)/m:0}!a||a.model.skip?n.mK=n.deltaK:!i||i.model.skip?n.mK=a.deltaK:this.sign(a.deltaK)!==this.sign(n.deltaK)?n.mK=0:n.mK=(a.deltaK+n.deltaK)/2}for(t=0;t<c-1;++t)n=u[t],i=u[t+1],n.model.skip||i.model.skip||(N.almostEquals(n.deltaK,0,this.EPSILON)?n.mK=i.mK=0:(r=n.mK/n.deltaK,o=i.mK/n.deltaK,(d=Math.pow(r,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(d),n.mK=r*s*n.deltaK,i.mK=o*s*n.deltaK)));for(t=0;t<c;++t)(n=u[t]).model.skip||(a=t>0?u[t-1]:null,i=t<c-1?u[t+1]:null,a&&!a.model.skip&&(l=(n.model.x-a.model.x)/3,n.model.controlPointPreviousX=n.model.x-l,n.model.controlPointPreviousY=n.model.y-l*n.mK),i&&!i.model.skip&&(l=(i.model.x-n.model.x)/3,n.model.controlPointNextX=n.model.x+l,n.model.controlPointNextY=n.model.y+l*n.mK))},N.nextItem=function(e,t,a){return a?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},N.previousItem=function(e,t,a){return a?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},N.niceNum=function(e,t){var a=Math.floor(N.log10(e)),n=e/Math.pow(10,a);return(t?n<1.5?1:n<3?2:n<7?5:10:n<=1?1:n<=2?2:n<=5?5:10)*Math.pow(10,a)},N.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},N.getRelativePosition=function(e,t){var a,n,i=e.originalEvent||e,r=e.target||e.srcElement,o=r.getBoundingClientRect(),s=i.touches;s&&s.length>0?(a=s[0].clientX,n=s[0].clientY):(a=i.clientX,n=i.clientY);var d=parseFloat(N.getStyle(r,"padding-left")),l=parseFloat(N.getStyle(r,"padding-top")),u=parseFloat(N.getStyle(r,"padding-right")),c=parseFloat(N.getStyle(r,"padding-bottom")),m=o.right-o.left-d-u,_=o.bottom-o.top-l-c;return{x:a=Math.round((a-o.left-d)/m*r.width/t.currentDevicePixelRatio),y:n=Math.round((n-o.top-l)/_*r.height/t.currentDevicePixelRatio)}},N.getConstraintWidth=function(e){return a(e,"max-width","clientWidth")},N.getConstraintHeight=function(e){return a(e,"max-height","clientHeight")},N._calculatePadding=function(e,t,a){return(t=N.getStyle(e,t)).indexOf("%")>-1?a*parseInt(t,10)/100:parseInt(t,10)},N._getParentNode=function(e){var t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t},N.getMaximumWidth=function(e){var t=N._getParentNode(e);if(!t)return e.clientWidth;var a=t.clientWidth,n=a-N._calculatePadding(t,"padding-left",a)-N._calculatePadding(t,"padding-right",a),i=N.getConstraintWidth(e);return isNaN(i)?n:Math.min(n,i)},N.getMaximumHeight=function(e){var t=N._getParentNode(e);if(!t)return e.clientHeight;var a=t.clientHeight,n=a-N._calculatePadding(t,"padding-top",a)-N._calculatePadding(t,"padding-bottom",a),i=N.getConstraintHeight(e);return isNaN(i)?n:Math.min(n,i)},N.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},N.retinaScale=function(e,t){var a=e.currentDevicePixelRatio=t||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==a){var n=e.canvas,i=e.height,r=e.width;n.height=i*a,n.width=r*a,e.ctx.scale(a,a),n.style.height||n.style.width||(n.style.height=i+"px",n.style.width=r+"px")}},N.fontString=function(e,t,a){return t+" "+e+"px "+a},N.longestText=function(e,t,a,n){var i=(n=n||{}).data=n.data||{},r=n.garbageCollect=n.garbageCollect||[];n.font!==t&&(i=n.data={},r=n.garbageCollect=[],n.font=t),e.font=t;var o,s,d,l,u,c=0,m=a.length;for(o=0;o<m;o++)if(null!=(l=a[o])&&!0!==N.isArray(l))c=N.measureText(e,i,r,c,l);else if(N.isArray(l))for(s=0,d=l.length;s<d;s++)null==(u=l[s])||N.isArray(u)||(c=N.measureText(e,i,r,c,u));var _=r.length/2;if(_>a.length){for(o=0;o<_;o++)delete i[r[o]];r.splice(0,_)}return c},N.measureText=function(e,t,a,n,i){var r=t[i];return r||(r=t[i]=e.measureText(i).width,a.push(i)),r>n&&(n=r),n},N.numberOfLabelLines=function(e){var t=1;return N.each(e,(function(e){N.isArray(e)&&e.length>t&&(t=e.length)})),t},N.color=k?function(e){return e instanceof CanvasGradient&&(e=E.global.defaultColor),k(e)}:function(e){return console.error("Color.js not found!"),e},N.getHoverColor=function(e){return e instanceof CanvasPattern||e instanceof CanvasGradient?e:N.color(e).saturate(.5).darken(.1).rgbString()}}(),$t._adapters=Xt,$t.Animation=$,$t.animationService=Q,$t.controllers=Qe,$t.DatasetController=ae,$t.defaults=E,$t.Element=q,$t.elements=ve,$t.Interaction=it,$t.layouts=ht,$t.platform=Tt,$t.plugins=St,$t.Scale=ha,$t.scaleService=Ht,$t.Ticks=ea,$t.Tooltip=Nt,$t.helpers.each(dn,(function(e,t){$t.scaleService.registerScaleType(t,e,e._defaults)})),Sn)Sn.hasOwnProperty(An)&&$t.plugins.register(Sn[An]);$t.platform.initialize();var Cn=$t;return"undefined"!=typeof window&&(window.Chart=$t),$t.Chart=$t,$t.Legend=Sn.legend._element,$t.Title=Sn.title._element,$t.pluginService=$t.plugins,$t.PluginBase=$t.Element.extend({}),$t.canvasHelpers=$t.helpers.canvas,$t.layoutService=$t.layouts,$t.LinearScaleBase=ba,$t.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],(function(e){$t[e]=function(t,a){return new $t(t,$t.helpers.merge(a||{},{type:e.charAt(0).toLowerCase()+e.slice(1)}))}})),Cn}(function(){try{return a(0)}catch(e){}}())},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,a){"use strict";a.r(t);a(6),a(220);var n=a(182),i=a.n(n),r=a(5),o=a(31),s=a(25),d=document.getElementById("doughnut-chart").getContext("2d"),l=d.createLinearGradient(0,0,0,120);l.addColorStop(0,"#FFE39C"),l.addColorStop(1,"#FFBA9C");var u=d.createLinearGradient(0,0,0,60);u.addColorStop(0,"#BC9CFF"),u.addColorStop(1,"#8BA4F9");var c=d.createLinearGradient(0,60,0,120);c.addColorStop(0,"#6FCF97"),c.addColorStop(1,"#66D2EA"),new i.a(document.getElementById("doughnut-chart"),{type:"doughnut",data:{datasets:[{data:[25,25,50],borderWidth:3,hoverBorderWidth:0,backgroundColor:[u,c,l]}]},options:{animation:{animateScale:!1,animateRotate:!1},cutoutPercentage:85,legend:!1,tooltips:{enabled:!1}}});var m={mainMenu:document.querySelector("#mainMenu"),burgerButton:document.querySelector("#mainMenuBurgerIcon"),authList:document.querySelector("#authListId"),profileButton:document.querySelector("#authButton")};new r.a(m);new o.a({parentNodeId:"date-picker-total-container",arrivalInputId:"arrival-total-input",arrivalSplitBtnId:"arrival-total-split-btn",departureInputId:"departure-total-input",departureSplitBtnId:"departure-total-split-btn"}).renderCalendar();var _={container:document.querySelector("#drop-down-total-container"),input:document.querySelector("#number-total-guests-input"),countElements:[{name:"Взрослые",countGroupName:"guest",startValue:3},{name:"Дети",countGroupName:"guest",startValue:0},{name:"Младенцы",countGroupName:"child",startValue:0}],countGroupView:{guest:{counter:3,views:["гость","гостя","гостей"]},child:{counter:0,views:["младенец","младенца","младенцев"]}},placeholder:"Cколько гостей"};new s.a(_).init()},function(e,t,a){var n=a(2),i=a(221);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};n(i,r);e.exports=i.locals||{}},function(e,t,a){var n=a(1),i=a(3),r=a(26),o=a(20),s=a(22),d=a(44),l=a(45),u=a(33),c=a(23);t=n(!1);var m=i(r),_=i(o),h=i(s),p=i(d),f=i(l),g=i(u),y=i(c);t.push([e.i,".page-header{position:relative;background-color:white;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05)}.page-header__wrap{position:relative;padding:17px 0 15px;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}@media (max-width: 425px){.page-header__wrap{padding-right:20px;padding-left:20px}}.page-header__auth{margin-left:22px;padding-bottom:1px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.page-header__auth_authenticated{position:relative;padding-left:20px}@media (max-width: 380px){.page-header__auth_authenticated{margin-right:10px;padding-right:0}}.page-header__auth_authenticated::before{position:absolute;left:0;width:1px;height:30px;opacity:.1;content:'';background:#1f2041}@media (max-width: 1024px){.page-header__auth_authenticated::before{right:0;left:auto}}@media (max-width: 380px){.page-header__auth_authenticated::before{display:none}}@media (max-width: 1024px){.page-header__auth_authenticated{margin-right:20px;padding-right:20px;padding-left:0}}@media (max-width: 1024px){.page-header__auth{margin-left:auto;-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}}.page-header__auth-list{position:absolute;display:none;visibility:hidden;opacity:0}@media (max-width: 1024px){.page-header__auth-list{position:absolute;z-index:100;top:55px;left:50%;padding:0;display:block;visibility:hidden;width:100vw;list-style:none;background:#fff;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out;-webkit-transform:translate(-50%, -10px);transform:translate(-50%, -10px)}}@media (max-width: 1024px){.page-header__auth-list_active{visibility:visible;opacity:1;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}}@media (max-width: 1024px){.page-header__auth-list .page-header__auth-item{width:100%}}@media (max-width: 1024px){.page-header__auth-list .page-header__auth-item:last-child{-webkit-box-shadow:0 4px 2px -2px rgba(0,0,0,0.2);box-shadow:0 4px 2px -2px rgba(0,0,0,0.2)}}@media (max-width: 1024px){.page-header__auth-list .page-header__auth-item-link{padding:20px 0;display:inline-block;width:100%;text-align:center;vertical-align:top;text-decoration:none;color:rgba(31,32,65,0.5);border-top:1px solid rgba(31,32,65,0.25)}}@media (max-width: 1024px){.page-header__auth-list .page-header__auth-item-link:hover{color:#9969ff}}.page-header__auth .button{margin-right:20px}.page-header__auth .button:nth-child(2){margin-right:0;padding-left:18px;letter-spacing:.3px}@media (max-width: 1024px){.page-header__auth>.button{display:none}}.page-header__user-name{margin:0;opacity:.5;font-family:Montserrat, Quicksand, Arial, sans-serif;color:#1f2041}.page-header__auth-profile{display:none}@media (max-width: 1024px){.page-header__auth-profile{position:absolute;right:40px;display:block;-webkit-box-sizing:border-box;box-sizing:border-box;width:24px;height:24px;content:'';background:url("+m+") no-repeat;border:none;cursor:pointer}}@media (max-width: 425px){.page-header__auth-profile{right:60px}}@media (max-width: 1024px){.page-header__auth-profile_hiden{display:none}}.logo{position:relative;min-width:120px;min-height:38px}.logo_big{margin-top:30px;margin-left:30px}.logo__big-pict{width:48px;height:48px;background:url("+_+") no-repeat;background-size:cover}.logo__link{position:absolute;top:-2px}.logo__link:hover .logo__letter{fill:#9969ff}.logo__link:hover .logo__label-left{fill:#6fcf97}.logo__letter,.logo__label-left{-webkit-transition:fill .4s ease;transition:fill .4s ease}.button{position:relative;z-index:100;padding:10px 20px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:15px;font-weight:normal;text-decoration:none;text-transform:uppercase;color:#fff;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border:none;border-radius:22px;cursor:pointer}.button::before{position:absolute;z-index:-100;top:0;left:0;display:block;width:100%;height:100%;opacity:0;content:'';background:-webkit-gradient(linear, left top, left bottom, from(#9969ff), to(#5b7ef6));background:linear-gradient(#9969ff, #5b7ef6);border-radius:inherit;-webkit-transition:opacity .4s ease;transition:opacity .4s ease}.button:hover::before{opacity:1}.button_disabled{opacity:.5;pointer-events:none;cursor:default}.button_disabled:hover::before{display:none}.button_empty{padding:8px 18px;color:#bc9cff;background:#fff;border:2px solid #bc9cff}.button_empty::before{display:none}.button_empty:hover{color:#9969ff;background:#fff;border-color:#9969ff}.button_empty-disabled{opacity:.5;pointer-events:none;cursor:default}.button_only-text{padding:0;color:#bc9cff;background:none}.button_only-text::before{display:none}.button_only-text:hover{color:#9969ff}.button_only-text-disabled{color:rgba(31,32,65,0.5);cursor:default}.button_only-text-disabled:hover{color:rgba(31,32,65,0.5)}.button_with-icon{position:relative}.button_with-icon::after{position:absolute;top:0%;right:0;width:44px;height:44px;content:'';background:url("+h+") no-repeat;background-position:center center;-webkit-transition:background .2s ease;transition:background .2s ease}.button_with-icon:active::after{background-position:20px center}.main-menu{margin-left:auto;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}@media (max-width: 1024px){.main-menu_active nav.main-menu__nav{visibility:visible;opacity:1;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}}@media (max-width: 1024px){.main-menu .main-menu__nav{position:absolute;z-index:100;top:69px;left:50%;visibility:hidden;width:100vw;opacity:0;background:#fff;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out;-webkit-transform:translate(-50%, -10px);transform:translate(-50%, -10px)}}@media (max-width: 1024px){.main-menu{margin-left:0;-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}}.main-menu__list,.main-menu__sub-menu{margin:0;padding:0;list-style:none}.main-menu__burger-icon{position:relative;display:none;width:25px;height:16px;cursor:pointer}@media (max-width: 1024px){.main-menu__burger-icon{display:block}}.main-menu__burger-icon span{position:absolute;display:inline-block;width:100%;height:2px;background-color:#1f2041;-webkit-transition:opacity .2s ease-in-out, -webkit-transform .3s ease-in-out;transition:opacity .2s ease-in-out, -webkit-transform .3s ease-in-out;transition:transform .3s ease-in-out, opacity .2s ease-in-out;transition:transform .3s ease-in-out, opacity .2s ease-in-out, -webkit-transform .3s ease-in-out}.main-menu__burger-icon span:nth-child(2){top:7px}.main-menu__burger-icon span:last-child{top:14px}.main-menu__burger-icon_active span:first-child{-webkit-transform:rotate(45deg) translate(7px, 3px);transform:rotate(45deg) translate(7px, 3px)}.main-menu__burger-icon_active span:nth-child(2){opacity:0}.main-menu__burger-icon_active span:last-child{-webkit-transform:rotate(-45deg) translate(7px, -3px);transform:rotate(-45deg) translate(7px, -3px)}.main-menu__list{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}@media (max-width: 1024px){.main-menu__list{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}}.main-menu__sub-menu{position:absolute;top:30px;left:50%;padding:5px 20px;visibility:hidden;opacity:0;text-align:center;background-color:#fff;border-radius:5px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transition:all .4s ease;transition:all .4s ease;-webkit-transform:translate(-50%, 10px);transform:translate(-50%, 10px)}.main-menu__sub-menu_opened{z-index:100;visibility:visible;opacity:1;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}@media (max-width: 1024px){.main-menu__sub-menu{top:45px}}.main-menu__item{margin-right:20px}@media (max-width: 1024px){.main-menu__item{width:100%}}.main-menu__item:last-child{margin-right:0}@media (max-width: 1024px){.main-menu__item:last-child{margin-right:auto;-webkit-box-shadow:0 4px 2px -2px rgba(0,0,0,0.2);box-shadow:0 4px 2px -2px rgba(0,0,0,0.2)}}.main-menu__item_active .main-menu__item-link{font-weight:bold;color:rgba(31,32,65,0.75)}.main-menu__item_sub-menu{position:relative}.main-menu__item_sub-menu::after{position:absolute;bottom:-18px;left:0;width:100%;height:20px;content:'';background:transparent}@media (max-width: 1024px){.main-menu__item_sub-menu::after{display:none}}.main-menu__item_sub-menu:hover>.main-menu__item-link[href]{opacity:1;color:#9969ff}.main-menu__item_sub-menu:hover>.main-menu__item-link[href]::after{opacity:1;border-right-color:#ab83ff;border-bottom-color:#ab83ff}.main-menu__item_sub-menu>.main-menu__item-link{position:relative;padding-right:24px}.main-menu__item_sub-menu>.main-menu__item-link::after{position:absolute;top:15%;right:6px;width:7px;height:7px;opacity:.5;content:'';background-color:transparent;border-right:2px solid #1f2041;border-bottom:2px solid #1f2041;-webkit-transform:rotate(45deg);transform:rotate(45deg)}@media (max-width: 1024px){.main-menu__item_sub-menu>.main-menu__item-link::after{top:38%;right:auto;margin-left:10px}}.main-menu__item_sub-menu>.main-menu__item-link:hover::after{opacity:1;border-right-color:#ab83ff;border-bottom-color:#ab83ff}@media (max-width: 1024px){.main-menu__item>.main-menu__item-link{padding:20px 0;display:inline-block;width:100%;text-align:center;vertical-align:top;border-top:1px solid rgba(31,32,65,0.25)}}.main-menu__sub-item{margin-bottom:10px}.main-menu__item .main-menu__item-link,.main-menu__sub-item .main-menu__item-link{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;line-height:17px;text-decoration:none;color:rgba(31,32,65,0.5);-webkit-transition:color .4s ease;transition:color .4s ease}.main-menu__item .main-menu__item-link[href]:hover,.main-menu__sub-item .main-menu__item-link[href]:hover{color:#9969ff}.pie-chart{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;width:350px;-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}@media (max-width: 425px){.pie-chart{width:100%;-ms-flex-wrap:wrap;flex-wrap:wrap}}@media (max-width: 350px){.pie-chart{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}}.pie-chart__diagram{width:120px;height:120px}@media (max-width: 350px){.pie-chart__diagram{margin-bottom:20px}}.pie-chart__vote{position:absolute;top:25px;left:29px;width:64px;font-size:12px;text-align:center;text-transform:uppercase;color:#bc9cff}.pie-chart__vote b{font-size:24px;line-height:30px}.pie-chart__label-list{margin:0;margin-left:30px;padding:0;list-style:none}@media (max-width: 350px){.pie-chart__label-list{margin-left:0}}.pie-chart__label-item{position:relative;margin-bottom:8px;padding-left:15px;font-size:14px}.pie-chart__label-item::before{position:absolute;top:3px;left:0;width:10px;height:10px;content:'';background:-webkit-gradient(linear, left top, left bottom, from(#919191), to(#3d4975));background:linear-gradient(180deg, #919191 0%, #3d4975 100%);border-radius:50%}.pie-chart__label-item:last-child{margin-bottom:0}.pie-chart__label-item_yellow::before{background:-webkit-gradient(linear, left top, left bottom, from(#ffe39c), to(#ffba9c));background:linear-gradient(180deg, #ffe39c 0%, #ffba9c 100%)}.pie-chart__label-item_green::before{background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%)}.pie-chart__label-item_purple::before{background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%)}.features{margin:0;padding:0;padding-top:1px;list-style:none}.features__item{margin-bottom:20px;padding-bottom:20px;display:-webkit-box;display:-ms-flexbox;display:flex;border-bottom:1px solid rgba(31,32,65,0.1)}.features__item:last-child{margin-bottom:0}.features__item:nth-child(3){padding-bottom:0;border-bottom:none}.features__pict{margin-right:9px;display:-webkit-box;display:-ms-flexbox;display:flex;width:48px;height:48px;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.features__content{font-size:14px;line-height:24px}.features__title{margin:0;font-size:14px;line-height:24px;font-weight:bold}.features__descr{margin:0}.comment{display:-webkit-box;display:-ms-flexbox;display:flex}.comment__wrap{margin-right:10px}.comment__wrap:nth-child(2){padding-top:15px}.comment__wrap:last-child{margin-right:0}.comment__pict{position:relative;margin-bottom:27px;width:44px;height:44px}.comment__pict img{position:absolute;top:1px;left:-23px}.comment__title{margin:0;margin-bottom:8px;font-size:14px;font-weight:bold;color:rgba(31,32,65,0.75)}.comment__date{margin:0;margin-bottom:14px;font-size:14px;color:rgba(31,32,65,0.75)}.comment__text{margin:0;width:99%;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.likebtn__title{margin:0;margin-bottom:16px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:15px;font-weight:bold;font-style:normal;text-transform:uppercase}.likebtn__item{margin:0;margin-right:6px;display:inline-block;vertical-align:top}.likebtn__item:last-child{margin-right:0}.likebtn__item .likebtn__btn{position:relative;margin:0;padding:3px 0;padding-right:12px;padding-left:20px;-webkit-box-sizing:border-box;box-sizing:border-box;min-width:40px;min-height:20px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:10px;line-height:12px;font-weight:normal;content:'';color:rgba(31,32,65,0.45);background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:10px}.likebtn__item .likebtn__btn::after{position:absolute;top:5px;left:5px;width:10px;height:8px;content:'';background:url("+p+") no-repeat}.likebtn__item_active .likebtn__btn{color:#bc9cff;border-color:#bc9cff}.likebtn__item_active .likebtn__btn::after{background:url("+f+") no-repeat}.bullet__title{margin:0;margin-bottom:14px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:15px;font-weight:bold;font-style:normal;text-transform:uppercase}.bullet__title_lp{padding-left:20px}.bullet__list{padding:0;list-style:none}.bullet__item{position:relative;margin-bottom:10px;padding-left:21px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.bullet__item::before{position:absolute;top:7px;left:0;width:10px;height:10px;content:'';background:rgba(31,32,65,0.25);border-radius:50%}.total-card{width:380px;background:#fff;border-radius:4px;-webkit-box-shadow:0 0 25px rgba(0,0,0,0.2);box-shadow:0 0 25px rgba(0,0,0,0.2)}@media (max-width: 380px){.total-card{margin:0 auto;width:100%;min-width:320px}}.total-card .button{padding:15px 20px;width:100%}.total-card__wrap{position:relative;padding:30px;padding-top:40px}@media (max-width: 380px){.total-card__wrap .total-card__date-inputs{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}}@media (max-width: 380px){.total-card__wrap .total-card__date-inputs .input-group{margin-bottom:15px}}@media (max-width: 380px){.total-card__wrap .total-card__date-inputs .input-group__input_double-button{width:100%}}.total-card__head{margin-bottom:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.total-card__title{margin:0;overflow:hidden;font-size:13px;white-space:nowrap;text-overflow:ellipsis}.total-card__title b{font-size:12px;text-transform:uppercase;color:#bc9cff}.total-card__title span{font-size:25px;font-weight:bold}.total-card__per-day{margin:0;padding-top:5px;font-size:12px;color:rgba(31,32,65,0.5)}.total-card__per-day b{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px}.total-card__date-inputs{margin-bottom:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.total-card__date-inputs .input-group__label{margin-bottom:6px}.total-card__date-inputs .input-group__input_double-button{width:106px}.total-card__calc{margin-top:20px;margin-bottom:28px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.total-card__calc-row{width:75%}.total-card__calc-row_low{width:25%}.total-card__calc-row_tar{text-align:right}.total-card__calc-text{margin:0;margin-bottom:15px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;line-height:19px}.total-card__calc-text:last-child{margin-bottom:0}.total-card__calc-text__informational{position:relative;padding-right:20px}.total-card__calc-text__informational::after{position:absolute;top:-1px;right:1px;width:18px;height:18px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:19px;font-weight:bold;text-align:center;content:'i';color:rgba(31,32,65,0.25);border:1px solid rgba(31,32,65,0.25);border-radius:50%;cursor:pointer}.total-card__total{margin-bottom:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.total-card__total-separator{position:relative;-webkit-box-flex:.95;-ms-flex-positive:.95;flex-grow:.95}.total-card__total-separator::after{position:absolute;top:-6px;width:100%;content:'';border:1px dashed rgba(31,32,65,0.25)}.total-card__total-text,.total-card__total-price{margin:0;font-size:19px;line-height:24px;font-weight:bold}.total-card__total-price{text-align:right}@-webkit-keyframes shake{10%,90%{-webkit-transform:translate3d(-1px, 0, 0);transform:translate3d(-1px, 0, 0)}20%,80%{-webkit-transform:translate3d(2px, 0, 0);transform:translate3d(2px, 0, 0)}30%,50%,70%{-webkit-transform:translate3d(-4px, 0, 0);transform:translate3d(-4px, 0, 0)}40%,60%{-webkit-transform:translate3d(4px, 0, 0);transform:translate3d(4px, 0, 0)}}@keyframes shake{10%,90%{-webkit-transform:translate3d(-1px, 0, 0);transform:translate3d(-1px, 0, 0)}20%,80%{-webkit-transform:translate3d(2px, 0, 0);transform:translate3d(2px, 0, 0)}30%,50%,70%{-webkit-transform:translate3d(-4px, 0, 0);transform:translate3d(-4px, 0, 0)}40%,60%{-webkit-transform:translate3d(4px, 0, 0);transform:translate3d(4px, 0, 0)}}.date-picker{position:absolute;z-index:100;top:-200px;left:0;visibility:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;opacity:0;background-color:#fff;border:1px solid rgba(31,32,65,0.25);border-radius:4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transition:all .2s ease-in;transition:all .2s ease-in;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.date-picker_opened{visibility:visible;opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}.date-picker_erroneous{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);-webkit-animation:shake 0.7s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;animation:shake 0.7s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.date-picker__wrap{padding:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.date-picker__control{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.date-picker__title{margin:0;font-size:19px;line-height:24px;font-weight:bold}.date-picker__slider-btn{width:24px;height:24px;font-size:0;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:none;outline:none;-webkit-transition:-webkit-transform .2s ease;transition:-webkit-transform .2s ease;transition:transform .2s ease;transition:transform .2s ease, -webkit-transform .2s ease;cursor:pointer}.date-picker__slider-btn:focus{border:1px solid #1f2041}.date-picker__slider-btn_prev{background-image:url("+g+")}.date-picker__slider-btn_prev:active{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.date-picker__slider-btn_next{background-image:url("+g+");-webkit-transform:rotate(180deg);transform:rotate(180deg)}.date-picker__slider-btn_next:active{-webkit-transform:rotate(180deg) translateX(-5px);transform:rotate(180deg) translateX(-5px)}.date-picker__calendar{margin-top:30px;margin-bottom:20px;border-collapse:collapse}.date-picker__th,.date-picker__day{-webkit-box-sizing:border-box;box-sizing:border-box;width:40px;height:40px;font-size:12px;line-height:15px;font-weight:bold;text-align:center}.date-picker__th{color:#bc9cff}.date-picker__day{font-weight:normal;color:rgba(31,32,65,0.5);border-radius:22px;cursor:pointer}.date-picker__day:hover{font-weight:bold;color:#fff;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff, #8ba4f9)}.date-picker__day_selected-space{background:rgba(188,156,255,0.25);border-radius:0}.date-picker__day_not-current{color:rgba(31,32,65,0.25)}@media (max-width: 320px){.date-picker__day{height:30px}}.date-picker__calendar .date-picker__day_current{font-weight:bold;color:#fff;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97, #66d2ea)}.date-picker__calendar .date-picker__day_selected{font-weight:bold;color:#fff;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff, #8ba4f9)}.date-picker__calendar .date-picker__day_with-error{font-weight:bold;background:tomato}.date-picker__day_selected-start,.date-picker__day_selected-end{position:relative}.date-picker__day_selected-start::after,.date-picker__day_selected-end::after{position:absolute;top:0;width:36%;height:100%;content:'';background:-webkit-gradient(linear, left top, left bottom, from(rgba(188,156,255,0.25)), to(rgba(139,164,249,0.25)));background:linear-gradient(180deg, rgba(188,156,255,0.25), rgba(139,164,249,0.25))}.date-picker__day_selected-start::after{right:0}.date-picker__day_selected-end::after{left:0}.date-picker__button{padding:0;font-size:12px;line-height:15px;font-weight:bold;text-transform:uppercase;color:rgba(31,32,65,0.5);background:transparent;border:none;-webkit-transition:color .2s ease-in-out, -webkit-transform .1s ease-in-out;transition:color .2s ease-in-out, -webkit-transform .1s ease-in-out;transition:color .2s ease-in-out, transform .1s ease-in-out;transition:color .2s ease-in-out, transform .1s ease-in-out, -webkit-transform .1s ease-in-out;cursor:pointer}.date-picker__button:hover{color:#bc9cff}.date-picker__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.date-picker__button_accentuating{color:#bc9cff}.date-picker__button_accentuating:hover{color:rgba(31,32,65,0.5)}.date-picker-container{position:absolute;top:0;left:0;width:100%}.drop-down{position:absolute;z-index:100;top:-3px;left:0;visibility:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;opacity:0;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:0 0 4px 4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transition:all .2s ease-in;transition:all .2s ease-in;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.drop-down_opened{visibility:visible;opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}.drop-down__wrap{padding-top:7px;padding-right:7px;padding-left:14px;padding-bottom:8px}.drop-down__count-list{margin:0;padding:0;list-style:none}.drop-down__count-item{margin-bottom:7px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.drop-down__count-item:last-child{margin-bottom:0}.drop-down__counter-menu{display:-webkit-box;display:-ms-flexbox;display:flex;width:92px;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.drop-down__count-item-name{margin:0;padding:0;font-size:12px;line-height:15px;font-weight:bold;text-transform:uppercase}.drop-down__select-view{margin:0;width:20px;font-size:12px;line-height:15px;font-weight:bold;text-align:center}.drop-down__counter-btn{position:relative;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box;width:30px;height:30px;font-size:18px;text-align:center;vertical-align:middle;color:rgba(31,32,65,0.5);background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:50%;cursor:pointer}.drop-down__counter-btn_plus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:'+'}.drop-down__counter-btn_minus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:'-'}.drop-down__counter-btn_disabled{color:rgba(31,32,65,0.25);border:1px solid rgba(31,32,65,0.25);cursor:default}.drop-down__control{margin-top:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.drop-down__button{padding:0;font-size:12px;line-height:15px;font-weight:bold;text-transform:uppercase;color:rgba(31,32,65,0.5);background:transparent;border:none;-webkit-transition:color .2s ease-in-out, -webkit-transform .1s ease-in-out;transition:color .2s ease-in-out, -webkit-transform .1s ease-in-out;transition:color .2s ease-in-out, transform .1s ease-in-out;transition:color .2s ease-in-out, transform .1s ease-in-out, -webkit-transform .1s ease-in-out;cursor:pointer}.drop-down__button:hover{color:#bc9cff}.drop-down__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.drop-down__button_accentuating{color:#bc9cff}.drop-down__button_accentuating:hover{color:rgba(31,32,65,0.5)}.drop-down__button_hiden{visibility:hidden;opacity:0}.drop-down-container{position:relative}.input-group{margin:0;display:-webkit-box;display:-ms-flexbox;display:flex}.input-group:hover .input-group__input,.input-group:focus .input-group__input{border-color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-webkit-input-placeholder, .input-group:focus .input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-moz-placeholder, .input-group:focus .input-group__input::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input:-ms-input-placeholder, .input-group:focus .input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-ms-input-placeholder, .input-group:focus .input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::placeholder,.input-group:focus .input-group__input::placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__button-split,.input-group:focus .input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group_with-label{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.input-group__label{margin:0;margin-bottom:5px}.input-group__descr{margin:0;padding-bottom:4px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:15px;text-transform:uppercase;color:rgba(31,32,65,0.45)}.input-group__label_big{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:15px;font-weight:bold;font-style:normal;text-transform:uppercase}.input-group__split{margin:0;display:-webkit-box;display:-ms-flexbox;display:flex;width:100%}.input-group__input{padding:9px 14px;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.25);border-radius:4px;outline:none;-webkit-transition:border .4s ease;transition:border .4s ease;-webkit-appearance:none;-moz-appearance:none;appearance:none}.input-group__input:hover,.input-group__input:focus{border-color:rgba(31,32,65,0.75)}.input-group__input:hover+.input-group__button-split,.input-group__input:focus+.input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__input_with-icon{background:url("+y+") no-repeat;background-position:95% center}.input-group__input_double-button{position:relative;padding-right:0;border-right:none;border-radius:4px 0 0 4px}.input-group__input_fake{cursor:pointer}.input-group__input_active{border-color:rgba(31,32,65,0.5)}.input-group__input_hovered{border-color:rgba(31,32,65,0.75)}.input-group__input_hovered::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_hovered::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_hovered:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_hovered::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_hovered::placeholder{color:rgba(31,32,65,0.75)}.input-group__input::-webkit-input-placeholder{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;color:rgba(31,32,65,0.24);-webkit-transition:color .4s ease;transition:color .4s ease}.input-group__input::-moz-placeholder{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;color:rgba(31,32,65,0.24);-moz-transition:color .4s ease;transition:color .4s ease}.input-group__input:-ms-input-placeholder{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;color:rgba(31,32,65,0.24);-ms-transition:color .4s ease;transition:color .4s ease}.input-group__input::-ms-input-placeholder{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;color:rgba(31,32,65,0.24);-ms-transition:color .4s ease;transition:color .4s ease}.input-group__input::placeholder{font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;color:rgba(31,32,65,0.24);-webkit-transition:color .4s ease;transition:color .4s ease}.input-group__input_dark-placeholder::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_dark-placeholder::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_dark-placeholder:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_dark-placeholder::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input_dark-placeholder::placeholder{color:rgba(31,32,65,0.75)}.input-group__button-split{padding:0;-webkit-box-sizing:border-box;box-sizing:border-box;width:44px;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:1px solid rgba(31,32,65,0.25);border-left:none;border-radius:0 4px 4px 0;outline:none;-webkit-transition:border .4s ease;transition:border .4s ease;cursor:pointer}.input-group__button-split:focus{border:1px solid #1f2041}.input-group__button-split_down-animation:active img{-webkit-transform:translateY(2px);transform:translateY(2px)}.input-group__button-split_right-animation:active img{-webkit-transform:translateX(5px);transform:translateX(5px)}.input-group__button-split img{-webkit-transition:-webkit-transform .1s ease;transition:-webkit-transform .1s ease;transition:transform .1s ease;transition:transform .1s ease, -webkit-transform .1s ease}.page-footer{position:relative;background-color:white;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05)}.page-footer::after{position:absolute;bottom:78px;width:100%;height:1px;content:'';background:rgba(31,32,65,0.1)}@media (max-width: 555px){.page-footer::after{bottom:120px}}@media (max-width: 394px){.page-footer::after{bottom:135px}}.page-footer_short section.text-content{width:49%;text-align:center}.page-footer_short::after{display:none}.page-footer_with-border-top{border-top:1px solid rgba(31,32,65,0.25)}.page-footer .text-content{width:260px}.page-footer .text-content__title{margin-bottom:19px}@media (max-width: 768px){.page-footer .text-content__title{margin-bottom:10px;padding-bottom:10px;font-size:14px;border-bottom:2px solid #1f2041}}.page-footer .nav-menu__title{margin-bottom:22px}@media (max-width: 768px){.page-footer .nav-menu__title{margin-bottom:10px;font-size:14px}}.page-footer .nav-menu__item{margin-bottom:21px}@media (max-width: 768px){.page-footer .nav-menu__item{margin-bottom:10px}}.page-footer .logo{margin-bottom:18px}.page-footer .input-group{margin-top:23px}.page-footer .input-group__input_double-button{width:216px}@media (max-width: 425px){.page-footer__wrap{padding-right:20px;padding-left:20px}}.page-footer__wrap_short{padding:120px 0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.page-footer__wrap_short div.logo{margin-bottom:21px;margin-left:12px}.page-footer__wrap_short .copyright{margin-bottom:26px}.page-footer__content{padding:101px 0 96px;display:-webkit-box;display:-ms-flexbox;display:flex}@media (max-width: 1100px){.page-footer__content{padding-top:50px;padding-bottom:50px}}@media (max-width: 768px){.page-footer__content{padding-top:30px;padding-bottom:40px;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}}.page-footer__col-group{padding-top:2px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}@media (max-width: 1100px){.page-footer__col-group{-ms-flex-wrap:wrap;flex-wrap:wrap}}@media (max-width: 1100px){.page-footer__col-group .page-footer__col{margin-bottom:40px;-webkit-box-sizing:border-box;box-sizing:border-box;width:50%}}@media (max-width: 768px){.page-footer__col-group .page-footer__col{margin-bottom:40px;width:100%}}@media (width: 1440px){.page-footer__col-group .page-footer__col:first-child{margin-right:57px}}@media (max-width: 1100px){.page-footer__col-group .page-footer__col:nth-child(3){margin-bottom:0}}@media (max-width: 768px){.page-footer__col-group .page-footer__col:nth-child(3){margin-bottom:30px}}@media (max-width: 1100px){.page-footer__col-group .page-footer__col:last-child{margin-bottom:0}}@media (width: 1440px){.page-footer__col:nth-child(2){margin-right:93px}}@media (width: 1440px){.page-footer__col:last-child{margin-left:auto}}.page-footer__col_large:first-child{margin-right:3.5%}@media (max-width: 1100px){.page-footer__col .text-content{width:85%}}@media (max-width: 768px){.page-footer__col .text-content{width:100%}}@media (max-width: 1100px){.page-footer__col .input-group__input{width:83.07%}}@media (max-width: 768px){.page-footer__col .input-group__input{width:100%}}@media (max-width: 1100px){.page-footer__content>.page-footer__col{margin-right:14%;-webkit-box-sizing:border-box;box-sizing:border-box;width:240px}}@media (max-width: 768px){.page-footer__content>.page-footer__col{margin-bottom:40px;width:100%}}@media (max-width: 1100px){.page-footer__content>.page-footer__col .text-content{width:100%}}.page-footer__side-info{padding:29px 0;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}@media (max-width: 555px){.page-footer__side-info{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}}@media (max-width: 555px){.page-footer__side-info .copyright{margin-bottom:20px;text-align:center}}.nav-menu__list{margin:0;padding:0;list-style:none;font-family:Montserrat, Quicksand, Arial, sans-serif}.nav-menu__title{margin:0;margin-bottom:20px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:15px;font-weight:bold;text-transform:uppercase}@media (max-width: 768px){.nav-menu__title{padding-bottom:10px;border-bottom:2px solid #1f2041}}.nav-menu__item{margin-bottom:20px}.nav-menu__item:last-child{margin-bottom:0}.nav-menu__item .nav-menu__link{font-size:14px;line-height:17px;text-decoration:none;color:rgba(31,32,65,0.5);-webkit-transition:color .4s ease;transition:color .4s ease}@media (max-width: 768px){.nav-menu__item .nav-menu__link{display:inline-block;width:100%;vertical-align:top}}.nav-menu__item .nav-menu__link:hover{color:#9969ff}.text-content__title{margin:0;margin-bottom:20px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:12px;line-height:15px;font-weight:bold;text-transform:uppercase}.text-content__paragraph{margin:0;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.social-buttons__list{margin:0;padding:0;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;list-style:none}.social-buttons__item{margin-right:24px}.social-buttons__item:last-child{margin-right:0}.social-buttons__link .icon-content{-webkit-transition:fill .4s ease;transition:fill .4s ease}.social-buttons__link:hover .icon-content{fill:#9969ff}.copyright{margin:0;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;line-height:17px;color:rgba(31,32,65,0.75)}.room-details .date-picker-container{top:270px}.room-details .total-card__date-inputs{position:relative}.room-details__picture{margin:0 auto;display:grid;max-width:1440px;grid-template-columns:981fr 461fr;justify-items:end}.room-details__picture img{margin:0;padding:0;width:100%;max-width:981px;height:100%}.room-details__picture-miniature{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-line-pack:start;align-content:flex-start;-ms-flex-wrap:wrap;flex-wrap:wrap;font-size:0}.room-details__picture-miniature img{max-width:461px;height:50%}.room-details__picture-miniature img:last-child{max-height:240px}.room-details__title{margin:0;margin-bottom:23px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;font-size:18px;font-weight:bold}.room-details__title_low-mb{margin-bottom:10px}.room-details__title-alt{padding-top:2px;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;font-weight:normal;color:rgba(31,32,65,0.5)}.room-details__wrap{padding:70px 0 57px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}@media (max-width: 1160px){.room-details__wrap{padding-top:40px;-webkit-box-orient:vertical;-webkit-box-direction:reverse;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-webkit-box-align:center;-ms-flex-align:center;align-items:center}}@media (max-width: 1160px){.room-details__wrap .total-card{margin-bottom:40px}}.room-details__content{margin-right:70px;width:61.3%}@media (max-width: 1160px){.room-details__content{margin-right:0;width:100%}}@media (max-width: 425px){.room-details__content-wrap{padding-right:20px;padding-left:20px}}.room-details__column{margin-bottom:35px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.room-details__column:last-child{margin-bottom:0}@media (max-width: 800px){.room-details__column{width:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}}.room-details__column .bullet{width:37%}@media (max-width: 800px){.room-details__column .bullet{margin-bottom:20px;width:100%}}@media (max-width: 800px){.room-details__column .bullet__title_lp{padding-left:0}}@media (max-width: 800px){.room-details__intellig{margin-bottom:40px}}.room-details__reviews{margin-bottom:39px}.room-details__reviews .comment{margin-bottom:12px}.room-details__reviews .comment:last-child{margin-bottom:0}.room-details__column .bullet__title{margin-bottom:20px;font-size:18px;text-transform:capitalize}.room-details__info{margin-right:9px;width:48%}@media (max-width: 800px){.room-details__info{width:100%}}.room-details__info .room-details__title{margin-bottom:20px}.room-details__info p{margin:0;width:100%;font-family:Montserrat, Quicksand, Arial, sans-serif;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.room-details .date-picker{z-index:1000}@media (max-width: 380px){.room-details .date-picker{top:-120px}}\n",""]),e.exports=t},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,a){var n={"./af":47,"./af.js":47,"./ar":48,"./ar-dz":49,"./ar-dz.js":49,"./ar-kw":50,"./ar-kw.js":50,"./ar-ly":51,"./ar-ly.js":51,"./ar-ma":52,"./ar-ma.js":52,"./ar-sa":53,"./ar-sa.js":53,"./ar-tn":54,"./ar-tn.js":54,"./ar.js":48,"./az":55,"./az.js":55,"./be":56,"./be.js":56,"./bg":57,"./bg.js":57,"./bm":58,"./bm.js":58,"./bn":59,"./bn-bd":60,"./bn-bd.js":60,"./bn.js":59,"./bo":61,"./bo.js":61,"./br":62,"./br.js":62,"./bs":63,"./bs.js":63,"./ca":64,"./ca.js":64,"./cs":65,"./cs.js":65,"./cv":66,"./cv.js":66,"./cy":67,"./cy.js":67,"./da":68,"./da.js":68,"./de":69,"./de-at":70,"./de-at.js":70,"./de-ch":71,"./de-ch.js":71,"./de.js":69,"./dv":72,"./dv.js":72,"./el":73,"./el.js":73,"./en-au":74,"./en-au.js":74,"./en-ca":75,"./en-ca.js":75,"./en-gb":76,"./en-gb.js":76,"./en-ie":77,"./en-ie.js":77,"./en-il":78,"./en-il.js":78,"./en-in":79,"./en-in.js":79,"./en-nz":80,"./en-nz.js":80,"./en-sg":81,"./en-sg.js":81,"./eo":82,"./eo.js":82,"./es":83,"./es-do":84,"./es-do.js":84,"./es-mx":85,"./es-mx.js":85,"./es-us":86,"./es-us.js":86,"./es.js":83,"./et":87,"./et.js":87,"./eu":88,"./eu.js":88,"./fa":89,"./fa.js":89,"./fi":90,"./fi.js":90,"./fil":91,"./fil.js":91,"./fo":92,"./fo.js":92,"./fr":93,"./fr-ca":94,"./fr-ca.js":94,"./fr-ch":95,"./fr-ch.js":95,"./fr.js":93,"./fy":96,"./fy.js":96,"./ga":97,"./ga.js":97,"./gd":98,"./gd.js":98,"./gl":99,"./gl.js":99,"./gom-deva":100,"./gom-deva.js":100,"./gom-latn":101,"./gom-latn.js":101,"./gu":102,"./gu.js":102,"./he":103,"./he.js":103,"./hi":104,"./hi.js":104,"./hr":105,"./hr.js":105,"./hu":106,"./hu.js":106,"./hy-am":107,"./hy-am.js":107,"./id":108,"./id.js":108,"./is":109,"./is.js":109,"./it":110,"./it-ch":111,"./it-ch.js":111,"./it.js":110,"./ja":112,"./ja.js":112,"./jv":113,"./jv.js":113,"./ka":114,"./ka.js":114,"./kk":115,"./kk.js":115,"./km":116,"./km.js":116,"./kn":117,"./kn.js":117,"./ko":118,"./ko.js":118,"./ku":119,"./ku.js":119,"./ky":120,"./ky.js":120,"./lb":121,"./lb.js":121,"./lo":122,"./lo.js":122,"./lt":123,"./lt.js":123,"./lv":124,"./lv.js":124,"./me":125,"./me.js":125,"./mi":126,"./mi.js":126,"./mk":127,"./mk.js":127,"./ml":128,"./ml.js":128,"./mn":129,"./mn.js":129,"./mr":130,"./mr.js":130,"./ms":131,"./ms-my":132,"./ms-my.js":132,"./ms.js":131,"./mt":133,"./mt.js":133,"./my":134,"./my.js":134,"./nb":135,"./nb.js":135,"./ne":136,"./ne.js":136,"./nl":137,"./nl-be":138,"./nl-be.js":138,"./nl.js":137,"./nn":139,"./nn.js":139,"./oc-lnc":140,"./oc-lnc.js":140,"./pa-in":141,"./pa-in.js":141,"./pl":142,"./pl.js":142,"./pt":143,"./pt-br":144,"./pt-br.js":144,"./pt.js":143,"./ro":145,"./ro.js":145,"./ru":146,"./ru.js":146,"./sd":147,"./sd.js":147,"./se":148,"./se.js":148,"./si":149,"./si.js":149,"./sk":150,"./sk.js":150,"./sl":151,"./sl.js":151,"./sq":152,"./sq.js":152,"./sr":153,"./sr-cyrl":154,"./sr-cyrl.js":154,"./sr.js":153,"./ss":155,"./ss.js":155,"./sv":156,"./sv.js":156,"./sw":157,"./sw.js":157,"./ta":158,"./ta.js":158,"./te":159,"./te.js":159,"./tet":160,"./tet.js":160,"./tg":161,"./tg.js":161,"./th":162,"./th.js":162,"./tk":163,"./tk.js":163,"./tl-ph":164,"./tl-ph.js":164,"./tlh":165,"./tlh.js":165,"./tr":166,"./tr.js":166,"./tzl":167,"./tzl.js":167,"./tzm":168,"./tzm-latn":169,"./tzm-latn.js":169,"./tzm.js":168,"./ug-cn":170,"./ug-cn.js":170,"./uk":171,"./uk.js":171,"./ur":172,"./ur.js":172,"./uz":173,"./uz-latn":174,"./uz-latn.js":174,"./uz.js":173,"./vi":175,"./vi.js":175,"./x-pseudo":176,"./x-pseudo.js":176,"./yo":177,"./yo.js":177,"./zh-cn":178,"./zh-cn.js":178,"./zh-hk":179,"./zh-hk.js":179,"./zh-mo":180,"./zh-mo.js":180,"./zh-tw":181,"./zh-tw.js":181};function i(e){var t=r(e);return a(t)}function r(e){if(!a.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=r,e.exports=i,i.id=223}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,