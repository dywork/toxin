!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=205)}({1:function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(a=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),o=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}var a,s,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);i&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},10:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Regular-a700954.ttf"},11:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Regular.font-cb83309.svg"},12:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Bold-3ac1a53.woff"},13:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Bold-9e3117a.ttf"},14:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Bold.font-597b76b.svg"},15:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Regular-b6db223.woff"},16:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Regular-7730093.ttf"},17:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Regular.font-0e54430.svg"},178:function(e,t,n){var i=n(2),r=n(179);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1},a=(i(e.i,r,o),r.locals?r.locals:{});e.exports=a},179:function(e,t,n){var i=n(1),r=n(38),o=n(3),a=n(25),s=n(21),l=n(32),c=n(22),u=n(39),p=n(40),d=n(34),f=n(35),h=n(41);(t=i(!1)).i(r);var m=o(a),g=o(s),b=o(l),v=o(c),x=o(u),k=o(p),y=o(d),w=o(f),_=o(h);t.push([e.i,'.page-header{position:relative;background-color:#fff;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05)}.page-header__wrap{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:17px 0 15px}.page-header__auth{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-left:22px;padding-bottom:1px}.page-header__auth--is-auth{position:relative;padding-left:20px}.page-header__auth--is-auth::before{position:absolute;left:0;width:1px;height:30px;background:#1f2041;opacity:0.1;content:""}.page-header__auth-list{position:absolute;display:none;visibility:hidden;opacity:0}.page-header__auth .button{margin-right:20px}.page-header__auth .button:nth-child(2){margin-right:0;padding-left:18px;letter-spacing:0.3px}.page-header__user-name{margin:0;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;color:#1f2041;opacity:0.5}.page-header__auth-profile{display:none}@media (max-width: 1024px){.page-header__auth{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2;margin-left:auto}.page-header__auth--is-auth{margin-right:20px;padding-left:0;padding-right:20px}.page-header__auth--is-auth::before{left:auto;right:0}.page-header__auth>.button{display:none}.page-header__auth-profile{position:absolute;right:40px;display:block;-webkit-box-sizing:border-box;box-sizing:border-box;width:24px;height:24px;background:url('+m+') no-repeat;border:none;cursor:pointer;content:""}.page-header__auth-profile--hide{display:none}.page-header__auth-list{position:absolute;z-index:100;top:55px;left:50%;display:block;width:100vw;padding:0;list-style:none;background:#fff;-webkit-transform:translate(-50%, -10px);transform:translate(-50%, -10px);visibility:hidden;-webkit-transition:all 0.3s ease-in-out;transition:all 0.3s ease-in-out}.page-header__auth-list--active{-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0);visibility:visible;opacity:1}.page-header__auth-list .page-header__auth-item{width:100%}.page-header__auth-list .page-header__auth-item:last-child{-webkit-box-shadow:0 4px 2px -2px rgba(0,0,0,0.2);box-shadow:0 4px 2px -2px rgba(0,0,0,0.2)}.page-header__auth-list a{display:inline-block;width:100%;padding:20px 0;color:rgba(31,32,65,0.5);text-align:center;text-decoration:none;vertical-align:top;border-top:1px solid rgba(31,32,65,0.25)}.page-header__auth-list a:hover{color:#9969ff}}@media (max-width: 425px){.page-header__wrap{padding-right:20px;padding-left:20px}.page-header__auth-profile{right:60px}}@media (max-width: 380px){.page-header__auth--is-auth{margin-right:10px;padding-right:0}.page-header__auth--is-auth::before{display:none}}.logo{position:relative;min-width:120px;min-height:38px}.logo--big{margin-top:30px;margin-left:30px}.logo__link{position:absolute;top:-2px}.logo__link:hover .logo__letter{fill:#9969ff}.logo__link:hover .logo__label-left{fill:#6fcf97}.logo__letter,.logo__label-left{-webkit-transition:fill 0.4s ease;transition:fill 0.4s ease}.button{position:relative;z-index:100;padding:10px 20px;color:#fff;font-weight:normal;font-size:12px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;line-height:15px;text-transform:uppercase;text-decoration:none;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border:none;border-radius:22px;cursor:pointer}.button--disable{opacity:0.5;cursor:default}.button--disable:hover::before{display:none}.button::before{position:absolute;top:0;left:0;z-index:-100;display:block;width:100%;height:100%;background:-webkit-gradient(linear, left top, left bottom, from(#9969ff), to(#5b7ef6));background:linear-gradient(#9969ff, #5b7ef6);border-radius:inherit;opacity:0;-webkit-transition:opacity 0.4s ease;transition:opacity 0.4s ease;content:""}.button:hover::before{opacity:1}.button--empty-style{padding:8px 18px;color:#bc9cff;background:#fff;border:2px solid #bc9cff}.button--empty-style::before{display:none}.button--empty-style:hover{color:#9969ff;border-color:#9969ff;background:#fff}.button--empty-disable{opacity:0.5;cursor:default}.button--empty-disable:hover{color:#bc9cff !important;background:#fff !important;border-color:#bc9cff !important}.button--only-text{padding:0;color:#bc9cff;background:none}.button--only-text::before{display:none}.button--only-text:hover{color:#9969ff}.button--only-text-disable{color:rgba(31,32,65,0.5);cursor:default}.button--only-text-disable:hover{color:rgba(31,32,65,0.5)}.button--icon{position:relative}.button--icon::after{position:absolute;top:50%;right:0;width:44px;height:44px;margin-top:-22px;background:url('+g+') no-repeat;background-position:center center;-webkit-transition:background 0.2s ease;transition:background 0.2s ease;content:""}.button--icon:active::after{background-position:20px center}.main-menu{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-left:auto}.main-menu__list,.main-menu__sub-menu{margin:0;padding:0;list-style:none}.main-menu__burger-icon{position:relative;display:none;width:25px;height:16px;cursor:pointer}.main-menu__burger-icon span{position:absolute;display:inline-block;width:100%;height:2px;vertical-align:top;background-color:#1f2041;-webkit-transition:opacity 0.2s ease-in-out, -webkit-transform 0.3s ease-in-out;transition:opacity 0.2s ease-in-out, -webkit-transform 0.3s ease-in-out;transition:transform 0.3s ease-in-out, opacity 0.2s ease-in-out;transition:transform 0.3s ease-in-out, opacity 0.2s ease-in-out, -webkit-transform 0.3s ease-in-out}.main-menu__burger-icon span:nth-child(2){top:7px}.main-menu__burger-icon span:last-child{top:14px}.main-menu__burger-icon--active span:first-child{-webkit-transform:rotate(45deg) translate(7px, 3px);transform:rotate(45deg) translate(7px, 3px)}.main-menu__burger-icon--active span:nth-child(2){opacity:0}.main-menu__burger-icon--active span:last-child{-webkit-transform:rotate(-45deg) translate(7px, -3px);transform:rotate(-45deg) translate(7px, -3px)}.main-menu__list{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.main-menu__sub-menu{position:absolute;top:30px;left:50%;padding:5px 20px;text-align:center;background-color:#fff;border-radius:5px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translate(-50%, 10px);transform:translate(-50%, 10px);visibility:hidden;opacity:0;-webkit-transition:all 0.4s ease;transition:all 0.4s ease}.main-menu__item{margin-right:20px}.main-menu__item:last-child{margin-right:0}.main-menu__item--active a{font-weight:bold;color:rgba(31,32,65,0.75)}.main-menu__item--sub-menu{position:relative}.main-menu__item--sub-menu:hover>a[href]{color:#9969ff;opacity:1}.main-menu__item--sub-menu:hover>a[href]::after{border-right-color:#ab83ff;border-bottom-color:#ab83ff;opacity:1}.main-menu__item--sub-menu::after{position:absolute;bottom:-18px;left:0;width:100%;height:20px;background:transparent;content:""}.main-menu__item--sub-menu>a{position:relative;padding-right:24px}.main-menu__item--sub-menu>a::after{position:absolute;top:50%;right:6px;width:7px;height:7px;margin-top:-6px;background-color:transparent;border-right:2px solid #1f2041;border-bottom:2px solid #1f2041;-webkit-transform:rotate(45deg);transform:rotate(45deg);opacity:0.5;content:""}.main-menu__item--sub-menu>a:hover::after{border-right-color:#ab83ff;border-bottom-color:#ab83ff;opacity:1}.main-menu__item:hover>.main-menu__sub-menu{z-index:100;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0);visibility:visible;opacity:1}.main-menu__sub-item{margin-bottom:10px}.main-menu__item a,.main-menu__sub-item a{font-family:"Montserrat", "Quicksand", "Arial", sans-serif;color:rgba(31,32,65,0.5);font-size:14px;line-height:17px;text-decoration:none;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.main-menu__item a[href]:hover,.main-menu__sub-item a[href]:hover{color:#9969ff}@media (max-width: 1024px){.main-menu{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3;margin-left:0}.main-menu nav{position:absolute;z-index:100;top:69px;left:50%;width:100vw;background:#fff;-webkit-transform:translate(-50%, -10px);transform:translate(-50%, -10px);visibility:hidden;opacity:0;-webkit-transition:all 0.3s ease-in-out;transition:all 0.3s ease-in-out}.main-menu--active nav{-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0);visibility:visible;opacity:1}.main-menu__sub-menu{top:45px}.main-menu__item{width:100%}.main-menu__item:last-child{margin-right:auto;-webkit-box-shadow:0 4px 2px -2px rgba(0,0,0,0.2);box-shadow:0 4px 2px -2px rgba(0,0,0,0.2)}.main-menu__item>a{display:inline-block;width:100%;padding:20px 0;text-align:center;vertical-align:top;border-top:1px solid rgba(31,32,65,0.25)}.main-menu__list{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.main-menu__burger-icon{display:block}.main-menu__item--sub-menu::after{display:none}.main-menu__item--sub-menu>a::after{top:48.5%;right:auto;margin-left:10px}}.date-wishes{width:380px;background:#fff;border-radius:4px;-webkit-box-shadow:0 0 25px rgba(0,0,0,0.2);box-shadow:0 0 25px rgba(0,0,0,0.2)}.date-wishes fieldset{margin:0;padding:0;border:0}.date-wishes .input-group__label{color:#1f2041;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.date-wishes .button{-webkit-box-sizing:border-box;box-sizing:border-box;display:block;width:100%;margin-top:31px;padding:15px 20px;padding-top:14px;font-weight:normal;text-align:center}.date-wishes .button--icon{z-index:0}.date-wishes__wrap{padding:40px 30px 30px}.date-wishes__group{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:20px}.date-wishes__group .input-group__input--button-split{width:106px}.date-wishes__group .date-picker-container{position:absolute;top:269px;left:50%}.date-wishes__title{margin:0;margin-bottom:20px;color:#1f2041;font-weight:bold;font-size:24px;line-height:30px}@media (max-width: 380px){.date-wishes{width:100%;min-width:320px;margin:0 auto}.date-wishes__group{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.date-wishes__group .date-picker-container{top:348px}.date-wishes__group .input-group{margin-bottom:15px}.date-wishes__group .input-group__input--button-split{width:100%}}@media (max-width: 768px){.date-wishes{margin:0 auto}}@-webkit-keyframes shake{10%,90%{-webkit-transform:translate3d(-1px, 0, 0);transform:translate3d(-1px, 0, 0)}20%,80%{-webkit-transform:translate3d(2px, 0, 0);transform:translate3d(2px, 0, 0)}30%,50%,70%{-webkit-transform:translate3d(-4px, 0, 0);transform:translate3d(-4px, 0, 0)}40%,60%{-webkit-transform:translate3d(4px, 0, 0);transform:translate3d(4px, 0, 0)}}@keyframes shake{10%,90%{-webkit-transform:translate3d(-1px, 0, 0);transform:translate3d(-1px, 0, 0)}20%,80%{-webkit-transform:translate3d(2px, 0, 0);transform:translate3d(2px, 0, 0)}30%,50%,70%{-webkit-transform:translate3d(-4px, 0, 0);transform:translate3d(-4px, 0, 0)}40%,60%{-webkit-transform:translate3d(4px, 0, 0);transform:translate3d(4px, 0, 0)}}.date-picker{position:absolute;top:50%;left:50%;z-index:100;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;margin-top:-200px;margin-left:-50%;background-color:#fff;border:1px solid rgba(31,32,65,0.25);border-radius:4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translateY(-10px);transform:translateY(-10px);visibility:hidden;opacity:0;-webkit-transition:all 0.2s ease-in;transition:all 0.2s ease-in}.date-picker--show{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible;opacity:1}.date-picker--error-animation{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px;-webkit-animation:shake 0.7s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;animation:shake 0.7s cubic-bezier(0.36, 0.07, 0.19, 0.97) both}.date-picker__wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:20px}.date-picker__control{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:100%}.date-picker__title{margin:0;font-weight:bold;font-size:19px;line-height:24px}.date-picker__slider-btn{width:24px;height:24px;font-size:0;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:none;outline:none;cursor:pointer;-webkit-transition:-webkit-transform 0.2s ease;transition:-webkit-transform 0.2s ease;transition:transform 0.2s ease;transition:transform 0.2s ease, -webkit-transform 0.2s ease}.date-picker__slider-btn--prev{background-image:url('+b+")}.date-picker__slider-btn--prev:active{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.date-picker__slider-btn--next{background-image:url("+b+');-webkit-transform:rotate(180deg);transform:rotate(180deg)}.date-picker__slider-btn--next:active{-webkit-transform:rotate(180deg) translateX(-5px);transform:rotate(180deg) translateX(-5px)}.date-picker__calendar{margin-top:30px;margin-bottom:20px;border-collapse:collapse}.date-picker__th,.date-picker__day{-webkit-box-sizing:border-box;box-sizing:border-box;width:40px;height:40px;font-weight:bold;font-size:12px;line-height:15px;text-align:center}.date-picker__th{color:#bc9cff}.date-picker__day{color:rgba(31,32,65,0.5);font-weight:normal;border-radius:22px;cursor:pointer}.date-picker__day--error{font-weight:bold;background:tomato !important}.date-picker__day--current{color:#fff !important;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97, #66d2ea)}.date-picker__day--select{color:#fff !important;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff, #8ba4f9)}.date-picker__day--select-space{border-radius:0;background:rgba(188,156,255,0.25)}.date-picker__day--not-current{color:rgba(31,32,65,0.25)}.date-picker__day--select-start,.date-picker__day--select-end{position:relative}.date-picker__day--select-start::after,.date-picker__day--select-end::after{position:absolute;top:0;width:36%;height:100%;background:-webkit-gradient(linear, left top, left bottom, from(rgba(188,156,255,0.25)), to(rgba(139,164,249,0.25)));background:linear-gradient(180deg, rgba(188,156,255,0.25), rgba(139,164,249,0.25));content:""}.date-picker__day--select-start::after{right:0}.date-picker__day--select-end::after{left:0}.date-picker__button{padding:0;color:rgba(31,32,65,0.5);font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase;background:transparent;border:none;cursor:pointer;-webkit-transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out, -webkit-transform 0.1s ease-in-out}.date-picker__button:hover{color:#bc9cff}.date-picker__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.date-picker__button--accent{color:#bc9cff}.date-picker__button--accent:hover{color:rgba(31,32,65,0.5)}.date-picker-container{position:absolute;width:100%;left:50%;margin-left:-50%}@media (max-width: 320px){.date-picker__day{height:30px}}@media (hover: hover){.date-picker__day:hover{color:#fff !important;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff, #8ba4f9)}}.drop-down{position:absolute;top:198px;left:50%;z-index:100;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;margin-top:-200px;margin-left:-50%;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:0 0 4px 4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translateY(-10px);transform:translateY(-10px);visibility:hidden;opacity:0;-webkit-transition:all 0.2s ease-in;transition:all 0.2s ease-in}.drop-down--show{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible;opacity:1}.drop-down__wrap{padding-top:7px;padding-left:14px;padding-right:7px;padding-bottom:8px}.drop-down__count-list{margin:0;padding:0;list-style:none}.drop-down__count-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:7px}.drop-down__count-item:last-child{margin-bottom:0}.drop-down__counter-menu{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:92px}.drop-down__count-item-name{margin:0;padding:0;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.drop-down__select-view{width:20px;margin:0;font-weight:bold;font-size:12px;line-height:15px;text-align:center}.drop-down__counter-btn{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;width:30px;height:30px;padding:0;color:rgba(31,32,65,0.5);font-size:18px;text-align:center;vertical-align:middle;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:50%;cursor:pointer}.drop-down__counter-btn--plus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"+"}.drop-down__counter-btn--minus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"-"}.drop-down__counter-btn--disabled{color:rgba(31,32,65,0.25);border:1px solid rgba(31,32,65,0.25);cursor:default}.drop-down__control{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-top:20px}.drop-down__button{padding:0;color:rgba(31,32,65,0.5);font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase;background:transparent;border:none;cursor:pointer;-webkit-transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out, -webkit-transform 0.1s ease-in-out}.drop-down__button:hover{color:#bc9cff}.drop-down__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.drop-down__button--accent{color:#bc9cff}.drop-down__button--accent:hover{color:rgba(31,32,65,0.5)}.drop-down__button--hide{opacity:0;visibility:hidden}.drop-down-container{position:relative}.input-group{display:-webkit-box;display:-ms-flexbox;display:flex;margin:0}.input-group--column{-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.input-group:hover .input-group__input,.input-group:focus .input-group__input{border-color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-webkit-input-placeholder, .input-group:focus .input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-moz-placeholder, .input-group:focus .input-group__input::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input:-ms-input-placeholder, .input-group:focus .input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-ms-input-placeholder, .input-group:focus .input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::placeholder,.input-group:focus .input-group__input::placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__button-split,.input-group:focus .input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__label{margin:0;margin-bottom:5px}.input-group__descr{margin:0;padding-bottom:4px;color:rgba(31,32,65,0.45);font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-size:12px;line-height:15px;text-transform:uppercase}.input-group__label--big{font-size:12px;line-height:15px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.input-group__split{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;margin:0}.input-group__input{-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;padding:9px 14px;color:rgba(31,32,65,0.75);font-size:14px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;line-height:24px;border:1px solid rgba(31,32,65,0.25);border-radius:4px;outline:none;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__input--icon{background:url('+v+') no-repeat;background-position:95% center}.input-group__input--button-split{position:relative;padding-right:0;border-right:none;border-radius:4px 0 0 4px}.input-group__input--fake{cursor:pointer}.input-group__input--active{border-color:rgba(31,32,65,0.5)}.input-group__input--hover{border-color:rgba(31,32,65,0.75)}.input-group__input--hover::-webkit-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-moz-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover:-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.24);font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-moz-placeholder{color:rgba(31,32,65,0.24);font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-size:14px;-moz-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::placeholder{color:rgba(31,32,65,0.24);font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:hover,.input-group__input:focus{border-color:rgba(31,32,65,0.75)}.input-group__input:hover+.input-group__button-split,.input-group__input:focus+.input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::placeholder{color:rgba(31,32,65,0.75)}.input-group__button-split{-webkit-box-sizing:border-box;box-sizing:border-box;width:44px;padding:0;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:1px solid rgba(31,32,65,0.25);border-left:none;border-radius:0 4px 4px 0;outline:none;cursor:pointer;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__button-split img{-webkit-transition:-webkit-transform 0.1s ease;transition:-webkit-transform 0.1s ease;transition:transform 0.1s ease;transition:transform 0.1s ease, -webkit-transform 0.1s ease}.input-group__button-split--down-animation:active img{-webkit-transform:translateY(2px);transform:translateY(2px)}.input-group__button-split--right-animation:active img{-webkit-transform:translateX(5px);transform:translateX(5px)}.glide{position:relative;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.glide *{-webkit-box-sizing:inherit;box-sizing:inherit}.glide__track{overflow:hidden}.glide__slides{position:relative;width:100%;list-style:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-ms-touch-action:pan-Y;touch-action:pan-Y;overflow:hidden;padding:0;white-space:nowrap;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap;will-change:transform}.glide__slides--dragging{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.glide__slide{width:100%;height:100%;-ms-flex-negative:0;flex-shrink:0;white-space:normal;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-touch-callout:none;-webkit-tap-highlight-color:transparent}.glide__slide a{-webkit-user-select:none;user-select:none;-webkit-user-drag:none;-moz-user-select:none;-ms-user-select:none}.glide__arrows{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.glide__bullets{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.glide--rtl{direction:rtl}.hotel-card{width:270px;background:#fff;border-radius:4px;-webkit-box-shadow:0px 10px 20px rgba(31,32,65,0.05);box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.hotel-card:hover .glide__arrows{visibility:visible;opacity:1}.hotel-card .glide__slides{margin:0}.hotel-card .glide__slide img{border-radius:4px 4px 0 0}.hotel-card .glide__arrows{visibility:hidden;opacity:0;-webkit-transition:all 0.2s ease-in;transition:all 0.2s ease-in}.hotel-card__slider{position:relative;height:152px}.hotel-card__bullets{position:absolute;right:15px;bottom:16px;font-size:0}.hotel-card__bullets button{display:inline-block;width:7px;height:7px;margin-right:3.75px;padding:0;font-size:0;vertical-align:middle;border:1px solid #fff;border-radius:50%;background:transparent;cursor:pointer}.hotel-card__bullets button:last-child{margin-right:0}.hotel-card__bullets .glide__bullet--active{background-color:#fff}.hotel-card__slider-btn{position:absolute;top:0;left:0;width:42px;height:152px;font-size:0;background:-webkit-gradient(linear, left top, right top, from(rgba(0,0,0,0.5)), color-stop(99.99%, rgba(0,0,0,0)), to(rgba(255,255,255,0)));background:linear-gradient(90deg, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 99.99%, rgba(255,255,255,0) 100%);border:none;border-radius:5px 0 0 0;cursor:pointer}.hotel-card__slider-btn::after{position:absolute;top:69px;left:18px;width:8px;height:13px;content:"";border:none;background:url('+x+') no-repeat}.hotel-card__slider-btn--next{left:auto;right:-1px;border-radius:0 0 0 5px;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.hotel-card__info{padding:20px 20px}.hotel-card__info-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.hotel-card__info-item:first-child{padding-bottom:10px;margin-bottom:10px;border-bottom:1px solid rgba(31,32,65,0.1)}.hotel-card__title{margin:0;font-size:13px}.hotel-card__title a{color:transparent;text-decoration:none;color:#1f2041;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.hotel-card__title a:hover{color:rgba(31,32,65,0.5)}.hotel-card__title b{font-size:12px;color:#bc9cff;text-transform:uppercase}.hotel-card__title span{font-size:20px;font-weight:bold}.hotel-card__text{font-family:"Montserrat", "Quicksand", "Arial", sans-serif;margin:0;font-size:12px;color:rgba(31,32,65,0.5)}.hotel-card__text b{font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-size:14px}.hotel-card__text--fzlarge{font-size:14px}.range__view{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:22px}.range__price input{-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:inline-block;width:50px;margin:0;margin-right:2px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:normal;color:rgba(31,32,65,0.45);font-size:12px;line-height:15px;text-transform:uppercase;vertical-align:top;border:none;background:transparent}.range__price input:last-child{margin-right:0;margin-left:2px}.range__slider{height:6px;border-radius:3px;border:1px solid rgba(31,32,65,0.25);background-color:#fff}.range__slider .noUi-connect{height:6px;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%)}.range__slider .noUi-handle{width:14px;height:14px;border:2px solid #ffffff;border-radius:50%;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);-webkit-box-shadow:none;box-shadow:none;cursor:pointer;-webkit-transition:background 0.4s ease 0s, border 0.4s ease 0s;transition:background 0.4s ease 0s, border 0.4s ease 0s}.range__slider .noUi-handle::after,.range__slider .noUi-handle::before{display:none}.range__slider .noUi-handle-upper,.range__slider .noUi-handle-lower{right:-8px}.range__cost{display:inline-block;margin:0;margin-right:8px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:normal;color:rgba(31,32,65,0.45);font-size:12px;line-height:15px;text-transform:uppercase;vertical-align:middle}.range__cost:first-child{position:relative}.range__cost:first-child::after{position:absolute;top:0;right:-7.5px;content:"-";font-size:10px}.range__cost:last-child{margin-right:0}.range__title{margin:0;font-size:12px;line-height:15px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.checkbox__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.checkbox__title--expandable{position:relative}.checkbox__title--expandable button{width:100%;color:#1f2041;text-align:left}.checkbox__title--expandable button::after{position:absolute;top:5px;right:16px;width:12px;height:8px;content:"";background:url('+k+') no-repeat;cursor:pointer}.checkbox__title--expandable-open button::after{-webkit-transform:rotate(180deg);transform:rotate(180deg);right:17px}.checkbox__expandable{margin:0;padding-left:0;padding-right:0;font-size:12px;line-height:15px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase;border:none;background:transparent;cursor:pointer}.checkbox__item{width:240px;margin:0;margin-bottom:12px}.checkbox__item:last-child{margin-bottom:0}.checkbox--rich .checkbox__item{width:264px}.checkbox__item input[type="checkbox"]{display:none}.checkbox__item label{position:relative;display:block;padding-left:30px;color:rgba(31,32,65,0.45);font-size:14px;font-weight:normal;line-height:18px;cursor:pointer}.checkbox__item label::before{-webkit-box-sizing:border-box;box-sizing:border-box;position:absolute;top:-2px;left:0;width:20px;height:20px;content:"";background-color:transparent;border:1px solid rgba(31,32,65,0.25);border-radius:4px;-webkit-transition:border 0.3s ease 0s;transition:border 0.3s ease 0s}.checkbox__item label::after{content:"";visibility:hidden;opacity:0;position:absolute;top:3px;left:7px;width:4px;height:6px;border-bottom:2px solid #bc9cff;border-right:2px solid #bc9cff;background-color:transparent;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s;transition:opacity 0.3s ease 0s, visibility 0.3s ease 0s}.checkbox__item input[type="checkbox"]:checked+label::after{visibility:visible;opacity:1}.checkbox__item input[type="checkbox"]:checked+label::before{border-color:#bc9cff}.checkbox__descr{display:block;margin:0;margin-top:5px;font-weight:normal;color:rgba(31,32,65,0.5);font-size:12px;line-height:14px}.checkbox__item .checbox__lbl--rich{font-size:14px;font-weight:bold;line-height:18px;color:rgba(31,32,65,0.75)}.checkbox__item-list--hide{display:none}.ratebtn__title{margin:0;margin-bottom:18px;font-size:12px;line-height:15px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.ratebtn__item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;margin-right:25px;font-size:0}.ratebtn__item:last-child{margin-right:0}.ratebtn__item input[type="radio"]{display:none}.ratebtn__item label{position:relative;display:block;width:20px;height:20px;margin-left:4px;background:url('+y+") no-repeat;cursor:pointer}.ratebtn__item label:last-child{margin-left:0}.ratebtn__item label:hover,.ratebtn__item label:hover ~ label{background:url("+w+") no-repeat}.ratebtn__item input:checked ~ label{background:url("+w+') no-repeat}.ratebtn__item-wrap{display:-webkit-box;display:-ms-flexbox;display:flex}.pagination__title{margin:0;margin-bottom:16px;font-size:12px;line-height:15px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.pagination__pages{margin:0;padding:0;list-style:none}.pagination__page-item{display:inline-block;vertical-align:top}.pagination__page-item a{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;width:36px;padding:12px 0px;text-align:center;vertical-align:middle;color:rgba(31,32,65,0.5);font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-weight:normal;font-size:12px;line-height:15px;text-decoration:none}.pagination__page-item--active a{width:40px;height:40px;color:#fff;font-weight:bold;font-size:12px;line-height:15px;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border-radius:50%}.pagination__page-next{position:relative;margin-left:-2px}.pagination__page-next a{width:40px;height:40px;color:#fff;font-size:0;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);border-radius:50%}.pagination__page-next::after{position:absolute;top:0;bottom:0;right:0;left:0;width:18px;height:17px;margin:auto;content:"";background:url('+_+') no-repeat}.pagination__overview{padding-left:6px}.pagination__overview p{font-family:"Montserrat", "Quicksand", "Arial", sans-serif;margin:0;margin-top:7px;font-size:14px;line-height:24px;color:rgba(31,32,65,0.75)}.page-footer{position:relative;background-color:#fff;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05)}.page-footer::after{position:absolute;bottom:78px;width:100%;height:1px;background:rgba(31,32,65,0.1);content:""}.page-footer--short section.text-content{width:49%;text-align:center}.page-footer--short::after{display:none}.page-footer--border-top{border-top:1px solid rgba(31,32,65,0.25)}.page-footer__wrap--short{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding:100px 0 108px}.page-footer__wrap--short div.logo{margin-left:12px;margin-bottom:17px}.page-footer__wrap--short .text-content{margin-bottom:29px}.page-footer__content{display:-webkit-box;display:-ms-flexbox;display:flex;padding:101px 0 96px}.page-footer__col-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding-top:2px}.page-footer__side-info{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:29px 0}.page-footer .text-content{width:260px}.page-footer .text-content__title{margin-bottom:19px}.page-footer .nav-menu__title{margin-bottom:22px}.page-footer .nav-menu__item{margin-bottom:21px}.page-footer .logo{margin-bottom:18px}.page-footer .input-group{margin-top:23px}.page-footer .input-group__input--button-split{width:216px}.page-footer__col--large:first-child{margin-right:3.5%}@media (width: 1440px){.page-footer__col:nth-child(2){margin-right:93px}.page-footer__col:last-child{margin-left:auto}.page-footer__col-group .page-footer__col:first-child{margin-right:57px}}@media (max-width: 1100px){.page-footer__col-group{-ms-flex-wrap:wrap;flex-wrap:wrap}.page-footer__col-group .page-footer__col{-webkit-box-sizing:border-box;box-sizing:border-box;width:50%;margin-bottom:40px}.page-footer__col-group .page-footer__col:nth-child(3){margin-bottom:0}.page-footer__col-group .page-footer__col:last-child{margin-bottom:0}.page-footer__col-group .page-footer__col:last-child .text-content{width:85%}.page-footer__col-group .page-footer__col:last-child .input-group__input{width:83.07%}.page-footer__content>.page-footer__col{-webkit-box-sizing:border-box;box-sizing:border-box;width:240px;margin-right:14%}.page-footer__content>.page-footer__col .text-content{width:100%}.page-footer__content{padding-top:50px;padding-bottom:50px}}@media (max-width: 768px){.page-footer .nav-menu__title{margin-bottom:10px;font-size:14px}.page-footer .nav-menu__item{margin-bottom:10px}.page-footer .text-content__title{margin-bottom:10px;padding-bottom:10px;font-size:14px;border-bottom:2px solid #1f2041}.page-footer__content{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-top:30px;padding-bottom:40px}.page-footer__content>.page-footer__col{width:100%;margin-bottom:40px}.page-footer__col-group .page-footer__col{width:100%;margin-bottom:40px}.page-footer__col-group .page-footer__col:nth-child(3){margin-bottom:30px}.page-footer__col-group .page-footer__col:last-child .text-content{width:100%}.page-footer__col-group .page-footer__col:last-child .input-group{margin-top:20px}.page-footer__col .input-group__split{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}}@media (max-width: 555px){.page-footer::after{bottom:120px}.page-footer__side-info{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.page-footer__side-info .copyright{margin-bottom:20px;text-align:center}}@media (max-width: 394px){.page-footer::after{bottom:135px}}@media (max-width: 425px){.page-footer__wrap{padding-right:20px;padding-left:20px}}.nav-menu__list{margin:0;padding:0;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;list-style:none}.nav-menu__title{margin:0;margin-bottom:20px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.nav-menu__item{margin-bottom:20px}.nav-menu__item:last-child{margin-bottom:0}.nav-menu__item a{color:rgba(31,32,65,0.5);font-size:14px;line-height:17px;text-decoration:none;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.nav-menu__item a:hover{color:#9969ff}@media (max-width: 768px){.nav-menu__title{padding-bottom:10px;border-bottom:2px solid #1f2041}.nav-menu__item a{display:inline-block;width:100%;vertical-align:top}}.text-content__title{margin:0;margin-bottom:20px;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.text-content__paragraph{margin:0;font-family:"Montserrat", "Quicksand", "Arial", sans-serif;color:rgba(31,32,65,0.75);font-size:14px;line-height:24px}.social-buttons__list{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin:0;padding:0;list-style:none}.social-buttons__item{margin-right:24px}.social-buttons__item:last-child{margin-right:0}.social-buttons__link .icon-content{-webkit-transition:fill 0.4s ease;transition:fill 0.4s ease}.social-buttons__link:hover .icon-content{fill:#9969ff}.copyright{font-family:"Montserrat", "Quicksand", "Arial", sans-serif;margin:0;color:rgba(31,32,65,0.75);font-size:14px;line-height:17px}.rooms-page .pagination{text-align:center}.rooms-page .date-picker-container{position:relative}.rooms-page .date-picker{top:203px}.rooms-page .date-picker .date-picker__day{height:32px}.rooms-page__wrap{display:-webkit-box;display:-ms-flexbox;display:flex;padding:30px 0px 71px}.filter{margin-right:60px}.filter__wrap{width:266px}.filter__item{margin-bottom:30px}.filter__item--mbs{margin-bottom:20px}.filter__explan{margin:0;margin-top:14px;color:rgba(31,32,65,0.5);font-size:12px;line-height:14px}.hotels__title{margin:0;margin-bottom:21px;font-size:23px;font-weight:bold;line-height:30px}.hotels__list{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:100%;margin:0;margin-bottom:25px;padding:0;list-style:none}.hotels__item{margin-bottom:21px}@media (max-width: 425px){.rooms-page__wrap{padding-left:20px;padding-right:20px}}@media (max-width: 595px){.hotels__list{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}}@media (max-width: 768px){.rooms-page__wrap{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.filter{width:266px;margin-right:0}.filter__wrap{width:100%}}\n',""]),e.exports=t},18:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Bold-d98e672.woff"},19:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Bold-70baeca.ttf"},2:function(e,t,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a={};function s(e,t,n){for(var i=0;i<t.length;i++){var r={css:t[i][1],media:t[i][2],sourceMap:t[i][3]};a[e][i]?a[e][i](r):a[e].push(m(r,n))}}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function d(e,t,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,h=0;function m(e,t){var n,i,r;if(t.singleton){var o=h++;n=f||(f=l(t)),i=p.bind(null,n,o,!1),r=p.bind(null,n,o,!0)}else n=l(t),i=d.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r()),e=n.base?e+n.base:e,t=t||[],a[e]||(a[e]=[]),s(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){a[e]||(a[e]=[]),s(e,t,n);for(var i=t.length;i<a[e].length;i++)a[e][i]();a[e].length=t.length,0===a[e].length&&delete a[e]}}}},20:function(e,t,n){e.exports=n.p+"fonts/Quicksand-Bold.font-3c9e7be.svg"},205:function(e,t,n){"use strict";n.r(t);n(7),n(178);var i=n(30),r=n(24);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o(this,e),a(this,"onToggleHide",(function(){t.expandableBtn.parentNode.classList.toggle("checkbox__title--expandable-open"),t.expandableList.classList.toggle("checkbox__item-list--hide")})),a(this,"init",(function(){t.expandableBtn.addEventListener("click",t.onToggleHide)})),n.expandableBtn?this.expandableBtn=n.expandableBtn:console.error("Expected expandableBtn inside constructor object but not received"),n.expandableList?(this.expandableList=n.expandableList,this.isHide=this.expandableList.classList.contains("checkbox__item-list--hide")):console.error("Expected expandableList inside constructor object but not received")},l=n(6);n(42),n(45);new i.a({parentNodeId:"date-picker-container",datePickerInputId:"date-picker-input",inputPlaceholder:"Выберите дату"}).renderCalendar();var c={container:document.querySelector("#drop-down-container"),input:document.querySelector("#number-bed"),countElements:[{name:"Спальни",countGroupName:"bedrooms",startValue:2},{name:"Кровати",countGroupName:"bed",startValue:2},{name:"Ванные комнаты",countGroupName:"bath",startValue:0}],countGroupView:{bedrooms:{counter:2,views:["спальня","спальни","спален"]},bed:{counter:2,views:["кровать","кровати","кроватей"]},bath:{counter:0,views:["ванная комната","ванные комнаты","ванных комнат"]}},placeholder:"Удобства номера"};new r.a(c).init();var u={container:document.querySelector("#drop-down-guest-container"),input:document.querySelector("#number-guest"),countElements:[{name:"Взрослые",countGroupName:"guest",startValue:3},{name:"Дети",countGroupName:"guest",startValue:0},{name:"Младенцы",countGroupName:"child",startValue:1}],countGroupView:{guest:{counter:3,views:["гость","гостя","гостей"]},child:{counter:1,views:["младенец","младенца","младенцев"]}},placeholder:"Cколько гостей"};new r.a(u).init(),new s({expandableBtn:document.querySelector("#checkbox-expandable-btn"),expandableList:document.querySelector("#checkbox-expandable-list")}).init();var p={mainMenu:document.querySelector("#mainMenu"),burgerButton:document.querySelector("#mainMenuBurgerIcon"),authList:document.querySelector("#authListId"),profileButton:document.querySelector("#authButton")};new l.a(p)},21:function(e,t,n){e.exports=n.p+"img/arrow-032b0d5.svg"},22:function(e,t,n){e.exports=n.p+"img/expand-more-d04c9af.svg"},23:function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;
/*!
* global/window.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},24:function(e,t,n){"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t,n){var i=document.createElement(e);return t&&i.classList.add(t),n&&(i.textContent=n),i}function o(e,t){return t[e%100>4&&e%100<20?2:[2,0,1,1,1,2][e%10<5?e%10:5]]}t.a=function e(t){var n=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"hasHaveStartValue",(function(e){return e.some((function(e){if(e.startValue)return e.startValue>0}))})),i(this,"getModifiedCountElements",(function(){return n.countElements.map((function(e,t){var n,i,r=e.minValue?e.minValue:0,o=e.startValue?e.startValue:r;return e.id="".concat(t).concat((n=1,i=1e4,Math.floor(Math.random()*(+i-+n))+ +n)),e.counter=o,e.minValue=r,e}))})),i(this,"show",(function(){n.dropDownParent.classList.contains("drop-down--show")||(n.dropDownParent.classList.add("drop-down--show"),n.input.classList.add("input-group__input--active"),window.addEventListener("mouseup",n.onClickHide),window.addEventListener("keyup",n.onPressHide))})),i(this,"hide",(function(){n.isPinShow||n.dropDownParent.classList.contains("drop-down--show")&&(n.dropDownParent.classList.remove("drop-down--show"),n.input.classList.remove("input-group__input--active"),window.removeEventListener("mouseup",n.onClickHide),window.removeEventListener("keyup",n.onPressHide))})),i(this,"hideClearBtn",(function(){n.clearBtn.classList.add("drop-down__button--hide")})),i(this,"onClickHide",(function(e){var t=e.target===n.input,i=n.dropDownParent.contains(e.target);!t&&!i&&n.hide()})),i(this,"onPressHide",(function(e){27===e.keyCode&&n.hide()})),i(this,"onClickClear",(function(e){e.preventDefault(),n.discardCounter(),n.discardViewCounter(),n.hideClearBtn(),n.input.textContent=n.placeholder})),i(this,"discardCounter",(function(){n.countElements.forEach((function(e){n.dropDownParent.querySelector("#view-".concat(e.id)).textContent=e.minValue,e.counter=e.minValue})),n.dropDownParent.querySelectorAll(".drop-down__counter-btn--minus").forEach((function(e){e.classList.add("drop-down__counter-btn--disabled"),e.setAttribute("disabled","true")}))})),i(this,"discardViewCounter",(function(){Object.keys(n.countGroupView).forEach((function(e){n.countGroupView[e].counter=0}))})),i(this,"renderViewCount",(function(){var e="";Object.keys(n.countGroupView).forEach((function(t,i){if(n.countGroupView[t].counter>0){var r=n.countGroupView[t],a=r.counter,s=o(a,r.views);i>0&&e.length>1&&(e+=", "),e+="".concat(a," ").concat(s)}})),e.length>=20&&Object.keys(n.countGroupView).length>2&&(e=e.slice(0,20)+"..."),n.input.textContent=e})),i(this,"renderStartCount",(function(e){var t=e.countElements,i="";t.forEach((function(t,n){if(t.startValue>0){var r=e.countGroupView[t.countGroupName],a=r.counter,s=o(a,r.views);n>0&&i.length>1&&(i+=", "),i+="".concat(a," ").concat(s)}})),i.length>=20&&t.length>2&&(i=i.slice(0,20)+"...");var r=i.split(",");r.length>1&&r[0].trim()===r[1].trim()&&(i=r[0]),n.input.textContent=i})),i(this,"getCountItem",(function(e){var t=r("li","drop-down__count-item"),i=r("p","drop-down__count-item-name",e.name),o=r("div","drop-down__counter-menu"),a=r("button","drop-down__counter-btn");a.classList.add("drop-down__counter-btn--minus"),e.startValue?e.startValue===e.minValue&&(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")):(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")),a.type="button";var s=r("p","drop-down__select-view");s.textContent=e.counter,s.id="view-".concat(e.id);var l=r("button","drop-down__counter-btn");return l.classList.add("drop-down__counter-btn--plus"),l.type="button",l.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];e.counter++,t.counter++,s.textContent=e.counter,n.renderViewCount(),a.classList.contains("drop-down__counter-btn--disabled")&&(a.classList.remove("drop-down__counter-btn--disabled"),a.removeAttribute("disabled")),n.clearBtn.classList.contains("drop-down__button--hide")&&n.clearBtn.classList.remove("drop-down__button--hide")})),a.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];(e.counter--,t.counter--,s.textContent=e.counter,e.counter-1<e.minValue&&(a.classList.add("drop-down__counter-btn--disabled"),a.setAttribute("disabled","true")),n.renderViewCount(),0===t.counter)&&(Object.keys(n.countGroupView).every((function(e){return 0===n.countGroupView[e].counter}))&&(n.input.textContent=n.placeholder,n.hideClearBtn()))})),o.appendChild(a),o.appendChild(s),o.appendChild(l),t.appendChild(i),t.appendChild(o),t})),i(this,"init",(function(){var e=n.getModifiedCountElements();n.countElements=e;var t=r("div","drop-down__wrap"),i=r("ul","drop-down__count-list"),o=r("div","drop-down__control"),a=r("button","drop-down__button","Очистить");n.clearBtn=a,a.type="button",a.addEventListener("click",n.onClickClear);var s=r("button","drop-down__button","Применить");s.type="button",s.classList.add("drop-down__button--accent"),s.addEventListener("click",n.hide);var l=document.createDocumentFragment();n.countElements.forEach((function(e){var t=n.getCountItem(e);l.appendChild(t)})),i.appendChild(l),n.isHideControl||(o.appendChild(a),o.appendChild(s)),t.appendChild(i),n.isHideControl||t.appendChild(o),n.dropDownParent.appendChild(t),n.container.appendChild(n.dropDownParent),n.countElements.every((function(e){return 0===e.counter}))&&n.hideClearBtn()})),t.container){this.container=t.container;var a=r("section","drop-down");this.dropDownParent=a}else console.error("Expected container(node) inside constructor object but not received");if(t.input){var s=t.placeholder?t.placeholder:"Выберите элимент";this.placeholder=s,this.input=t.input,this.hasHaveStartValue(t.countElements)?this.renderStartCount(t):this.input.textContent=s,t.isPinShow?this.show():this.input.addEventListener("click",this.show)}else console.error("Expected input(node) inside constructor object but not received");t.countElements?(this.countElements=t.countElements,this.inputViews=[]):console.error("Expected countElements(Array) inside constructor object but not received"),t.countGroupView?this.countGroupView=t.countGroupView:console.error("Expected countGroupView(Array) inside constructor object but not received"),t.isHideControl&&(this.isHideControl=t.isHideControl),t.isPinShow&&(this.isPinShow=t.isPinShow)}},25:function(e,t,n){e.exports=n.p+"img/user-e53525e.svg"},26:function(e,t,n){var i,r,o;
/*!
* inputmask.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/r=[n(4)],void 0===(o="function"==typeof(i=function(e){return e.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}}),e.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,r){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)}}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),e})?i.apply(t,r):i)||(e.exports=o)},27:function(e,t,n){var i,r,o;
/*!
* dependencyLibs/inputmask.dependencyLib.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/r=[n(23)],void 0===(o="function"==typeof(i=function(e){var t=e.document;function n(e){return null!=e&&e===e.window}function i(e){return e instanceof Element}function r(n){return n instanceof r?n:this instanceof r?void(null!=n&&n!==e&&(this[0]=n.nodeName?n:void 0!==n[0]&&n[0].nodeName?n[0]:t.querySelector(n),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new r(n)}return r.prototype={on:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,r=this[0],o=function(e,i){r.addEventListener?r.addEventListener(e,t,!1):r.attachEvent&&r.attachEvent("on"+e,t),n[e]=n[e]||{},n[e][i]=n[e][i]||[],n[e][i].push(t)},a=e.split(" "),s=0;s<a.length;s++){var l=a[s].split(".");o(l[0],l[1]||"global")}return this},off:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,r=this[0],o=function(e,t,i){if(e in n==1)if(r.removeEventListener?r.removeEventListener(e,i,!1):r.detachEvent&&r.detachEvent("on"+e,i),"global"===t)for(var o in n[e])n[e][o].splice(n[e][o].indexOf(i),1);else n[e][t].splice(n[e][t].indexOf(i),1)},a=function(e,i){var r,o,a=[];if(e.length>0)if(void 0===t)for(r=0,o=n[e][i].length;r<o;r++)a.push({ev:e,namespace:i&&i.length>0?i:"global",handler:n[e][i][r]});else a.push({ev:e,namespace:i&&i.length>0?i:"global",handler:t});else if(i.length>0)for(var s in n)for(var l in n[s])if(l===i)if(void 0===t)for(r=0,o=n[s][l].length;r<o;r++)a.push({ev:s,namespace:l,handler:n[s][l][r]});else a.push({ev:s,namespace:l,handler:t});return a},s=e.split(" "),l=0;l<s.length;l++)for(var c=s[l].split("."),u=a(c[0],c[1]),p=0,d=u.length;p<d;p++)o(u[p].ev,u[p].namespace,u[p].handler);return this},trigger:function(e){if(i(this[0]))for(var n=this[0].eventRegistry,o=this[0],a="string"==typeof e?e.split(" "):[e.type],s=0;s<a.length;s++){var l=a[s].split("."),c=l[0],u=l[1]||"global";if(void 0!==t&&"global"===u){var p,d,f={bubbles:!0,cancelable:!0,detail:arguments[1]};if(t.createEvent){try{p=new CustomEvent(c,f)}catch(e){(p=t.createEvent("CustomEvent")).initCustomEvent(c,f.bubbles,f.cancelable,f.detail)}e.type&&r.extend(p,e),o.dispatchEvent(p)}else(p=t.createEventObject()).eventType=c,p.detail=arguments[1],e.type&&r.extend(p,e),o.fireEvent("on"+p.eventType,p)}else if(void 0!==n[c])if(arguments[0]=arguments[0].type?arguments[0]:r.Event(arguments[0]),"global"===u)for(var h in n[c])for(d=0;d<n[c][h].length;d++)n[c][h][d].apply(o,arguments);else for(d=0;d<n[c][u].length;d++)n[c][u][d].apply(o,arguments)}return this}},r.isFunction=function(e){return"function"==typeof e},r.noop=function(){},r.isArray=Array.isArray,r.inArray=function(e,t,n){return null==t?-1:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}(t,e)},r.valHooks=void 0,r.isPlainObject=function(e){return!("object"!=typeof e||e.nodeType||n(e)||e.constructor&&!Object.hasOwnProperty.call(e.constructor.prototype,"isPrototypeOf"))},r.extend=function(){var e,t,n,i,o,a,s=arguments[0]||{},l=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[l]||{},l++),"object"==typeof s||r.isFunction(s)||(s={}),l===c&&(s=this,l--);l<c;l++)if(null!=(e=arguments[l]))for(t in e)n=s[t],s!==(i=e[t])&&(u&&i&&(r.isPlainObject(i)||(o=r.isArray(i)))?(o?(o=!1,a=n&&r.isArray(n)?n:[]):a=n&&r.isPlainObject(n)?n:{},s[t]=r.extend(u,a,i)):void 0!==i&&(s[t]=i));return s},r.each=function(e,t){var i=0;if(function(e){var t="length"in e&&e.length,i=typeof e;return"function"!==i&&!n(e)&&(!(1!==e.nodeType||!t)||("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e))}(e))for(var r=e.length;i<r&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},r.data=function(e,t,n){if(void 0===n)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=n},"function"==typeof e.CustomEvent?r.Event=e.CustomEvent:(r.Event=function(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var i=t.createEvent("CustomEvent");return i.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),i},r.Event.prototype=e.Event.prototype),r})?i.apply(t,r):i)||(e.exports=o)},28:function(e,t,n){var i,r,o;
/*!
* inputmask.date.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/r=[n(4)],void 0===(o="function"==typeof(i=function(e){var t=e.dependencyLib,n={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return a(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return a(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return a(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return a(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return a(Date.prototype.getHours.call(this),2)}],hhh:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return a(Date.prototype.getHours.call(this),2)}],HHH:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return a(Date.prototype.getMinutes.call(this),2)}],ss:["[0-5][0-9]",Date.prototype.setSeconds,"seconds",function(){return a(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return a(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return a(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},i={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function r(e){if(!e.tokenizer){var t=[];for(var i in n)-1===t.indexOf(i[0])&&t.push(i[0]);e.tokenizer="("+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function o(t,i,o,a){for(var s,l="";s=r(o).exec(t);)if(void 0===i)if(n[s[0]])l+="("+n[s[0]][0]+")";else switch(s[0]){case"[":l+="(";break;case"]":l+=")?";break;default:l+=e.escapeRegex(s[0])}else n[s[0]]?!0!==a&&n[s[0]][3]?l+=n[s[0]][3].call(i.date):n[s[0]][2]?l+=i["raw"+n[s[0]][2]]:l+=s[0]:l+=s[0];return l}function a(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function s(e,t,i){var o,a,s,l={date:new Date(1,0,1)},c=e;function u(e){var t=e.replace(/[^0-9]/g,"0");if(t!=e){var n=e.replace(/[^0-9]/g,""),r=(i.min&&i.min[o]||e).toString(),a=(i.max&&i.max[o]||e).toString();t=n+(n<r.slice(0,n.length)?r.slice(n.length):n>a.slice(0,n.length)?a.slice(n.length):t.toString().slice(n.length))}return t}function p(e,t,n){e[o]=u(t),e["raw"+o]=t,void 0!==s&&s.call(e.date,"month"==o?parseInt(e[o])-1:e[o])}if("string"==typeof c){for(;a=r(i).exec(t);){var d=c.slice(0,a[0].length);n.hasOwnProperty(a[0])&&(n[a[0]][0],o=n[a[0]][2],s=n[a[0]][1],p(l,d)),c=c.slice(d.length)}return l}if(c&&"object"==typeof c&&c.hasOwnProperty("date"))return c}return e.extendAliases({datetime:{mask:function(e){return n.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=i[e.inputFormat]||e.inputFormat,e.displayFormat=i[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=i[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[\[\]]/,""),e.regex=o(e.inputFormat,void 0,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},postValidation:function(e,t,n,i){i.min=s(i.min,i.inputFormat,i),i.max=s(i.max,i.inputFormat,i);var r=n,a=s(e.join(""),i.inputFormat,i);return r&&a.date.getTime()==a.date.getTime()&&(r=(r=function(e,t){return(!isFinite(e.rawday)||"29"==e.day&&!isFinite(e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)&&t}(a,r))&&function(e,t){var n=!0;if(t.min){if(e.rawyear){var i=e.rawyear.replace(/[^0-9]/g,""),r=t.min.year.substr(0,i.length);n=r<=i}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(n=t.min.date.getTime()<=e.date.getTime())}return n&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(n=t.max.date.getTime()>=e.date.getTime()),n}(a,i)),t&&r&&n.pos!==t?{buffer:o(i.inputFormat,a,i),refreshFromBuffer:{start:t,end:n.pos}}:r},onKeyDown:function(n,i,o,s){if(n.ctrlKey&&n.keyCode===e.keyCode.RIGHT){for(var l,c=new Date,u="";l=r(s).exec(s.inputFormat);)"d"===l[0].charAt(0)?u+=a(c.getDate(),l[0].length):"m"===l[0].charAt(0)?u+=a(c.getMonth()+1,l[0].length):"yyyy"===l[0]?u+=c.getFullYear().toString():"y"===l[0].charAt(0)&&(u+=a(c.getYear(),l[0].length));this.inputmask._valueSet(u),t(this).trigger("setvalue")}},onUnMask:function(e,t,n){return o(n.outputFormat,s(e,n.inputFormat,n),n,!0)},casing:function(e,t,n,i){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},insertMode:!1,shiftPositions:!1}}),e})?i.apply(t,r):i)||(e.exports=o)},29:function(e,t,n){var i,r,o;
/*!
* inputmask.numeric.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/r=[n(4)],void 0===(o="function"==typeof(i=function(e){var t=e.dependencyLib;function n(t,n){for(var i="",r=0;r<t.length;r++)e.prototype.definitions[t.charAt(r)]||n.definitions[t.charAt(r)]||n.optionalmarker.start===t.charAt(r)||n.optionalmarker.end===t.charAt(r)||n.quantifiermarker.start===t.charAt(r)||n.quantifiermarker.end===t.charAt(r)||n.groupmarker.start===t.charAt(r)||n.groupmarker.end===t.charAt(r)||n.alternatormarker===t.charAt(r)?i+="\\"+t.charAt(r):i+=t.charAt(r);return i}return e.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),i=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===i?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var r="[+]";if(r+=n(e.prefix,e),!0===e.integerOptional?r+="~{1,"+e.integerDigits+"}":r+="~{"+e.integerDigits+"}",void 0!==e.digits){var o=e.decimalProtect?":":e.radixPoint,a=e.digits.toString().split(",");isFinite(a[0])&&a[1]&&isFinite(a[1])?r+=o+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?r+="["+o+";{1,"+e.digits+"}]":r+=o+";{"+e.digits+"}")}return r+=n(e.suffix,e),r+="[-]",e.greedy=!1,r},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputType:"text",inputmode:"numeric",preValidation:function(e,n,i,r,o,a){if("-"===i||i===o.negationSymbol.front)return!0===o.allowMinus&&(o.isNegative=void 0===o.isNegative||!o.isNegative,""===e.join("")||{caret:a.validPositions[n]?n:void 0,dopost:!0});if(!1===r&&i===o.radixPoint&&void 0!==o.digits&&(isNaN(o.digits)||parseInt(o.digits)>0)){var s=t.inArray(o.radixPoint,e);if(-1!==s&&void 0!==a.validPositions[s])return!0===o.numericInput?n===s:{caret:s+1}}return!0},postValidation:function(n,i,r,o){var a=o.suffix.split(""),s=o.prefix.split("");if(void 0===r.pos&&void 0!==r.caret&&!0!==r.dopost)return r;var l=void 0!==r.caret?r.caret:r.pos,c=n.slice();o.numericInput&&(l=c.length-l-1,c=c.reverse());var u=c[l];if(u===o.groupSeparator&&(u=c[l+=1]),l===c.length-o.suffix.length-1&&u===o.radixPoint)return r;void 0!==u&&u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back&&(c[l]="?",o.prefix.length>0&&l>=(!1===o.isNegative?1:0)&&l<o.prefix.length-1+(!1===o.isNegative?1:0)?s[l-(!1===o.isNegative?1:0)]="?":o.suffix.length>0&&l>=c.length-o.suffix.length-(!1===o.isNegative?1:0)&&(a[l-(c.length-o.suffix.length-(!1===o.isNegative?1:0))]="?")),s=s.join(""),a=a.join("");var p=c.join("").replace(s,"");if(p=(p=(p=(p=p.replace(a,"")).replace(new RegExp(e.escapeRegex(o.groupSeparator),"g"),"")).replace(new RegExp("[-"+e.escapeRegex(o.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(o.negationSymbol.back)+"$"),""),isNaN(o.placeholder)&&(p=p.replace(new RegExp(e.escapeRegex(o.placeholder),"g"),"")),p.length>1&&1!==p.indexOf(o.radixPoint)&&("0"===u&&(p=p.replace(/^\?/g,"")),p=p.replace(/^0/g,"")),p.charAt(0)===o.radixPoint&&""!==o.radixPoint&&!0!==o.numericInput&&(p="0"+p),""!==p){if(p=p.split(""),(!o.digitsOptional||o.enforceDigitsOnBlur&&"blur"===r.event)&&isFinite(o.digits)){var d=t.inArray(o.radixPoint,p),f=t.inArray(o.radixPoint,c);-1===d&&(p.push(o.radixPoint),d=p.length-1);for(var h=1;h<=o.digits;h++)o.digitsOptional&&(!o.enforceDigitsOnBlur||"blur"!==r.event)||void 0!==p[d+h]&&p[d+h]!==o.placeholder.charAt(0)?-1!==f&&void 0!==c[f+h]&&(p[d+h]=p[d+h]||c[f+h]):p[d+h]=r.placeholder||o.placeholder.charAt(0)}if(!0!==o.autoGroup||""===o.groupSeparator||u===o.radixPoint&&void 0===r.pos&&!r.dopost)p=p.join("");else{var m=p[p.length-1]===o.radixPoint&&r.c===o.radixPoint;p=e(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(p,o),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(p.join("")),m&&(p+=o.radixPoint),p.charAt(0)===o.groupSeparator&&p.substr(1)}}if(o.isNegative&&"blur"===r.event&&(o.isNegative="0"!==p),p=s+p,p+=a,o.isNegative&&(p=o.negationSymbol.front+p,p+=o.negationSymbol.back),p=p.split(""),void 0!==u)if(u!==o.radixPoint&&u!==o.negationSymbol.front&&u!==o.negationSymbol.back)(l=t.inArray("?",p))>-1?p[l]=u:l=r.caret||0;else if(u===o.radixPoint||u===o.negationSymbol.front||u===o.negationSymbol.back){var g=t.inArray(u,p);-1!==g&&(l=g)}o.numericInput&&(l=p.length-l-1,p=p.reverse());var b={caret:void 0!==u&&void 0===r.pos||void 0===l?l:l+(o.numericInput?-1:1),buffer:p,refreshFromBuffer:r.dopost||n.join("")!==p.join("")};return b.refreshFromBuffer?b:r},onBeforeWrite:function(n,i,r,o){if(n)switch(n.type){case"keydown":return o.postValidation(i,r,{caret:r,dopost:!0},o);case"blur":case"checkval":var a;if(function(t){void 0===t.parseMinMaxOptions&&(null!==t.min&&(t.min=t.min.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.min=t.min.replace(t.radixPoint,".")),t.min=isFinite(t.min)?parseFloat(t.min):NaN,isNaN(t.min)&&(t.min=Number.MIN_VALUE)),null!==t.max&&(t.max=t.max.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.max=t.max.replace(t.radixPoint,".")),t.max=isFinite(t.max)?parseFloat(t.max):NaN,isNaN(t.max)&&(t.max=Number.MAX_VALUE)),t.parseMinMaxOptions="done")}(o),null!==o.min||null!==o.max){if(a=o.onUnMask(i.join(""),void 0,t.extend({},o,{unmaskAsNumber:!0})),null!==o.min&&a<o.min)return o.isNegative=o.min<0,o.postValidation(o.min.toString().replace(".",o.radixPoint).split(""),r,{caret:r,dopost:!0,placeholder:"0"},o);if(null!==o.max&&a>o.max)return o.isNegative=o.max<0,o.postValidation(o.max.toString().replace(".",o.radixPoint).split(""),r,{caret:r,dopost:!0,placeholder:"0"},o)}return o.postValidation(i,r,{caret:r,placeholder:"0",event:"blur"},o);case"_checkval":return{caret:r}}},regex:{integerPart:function(t,n){return n?new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?"):new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?\\d+")},integerNPart:function(t){return new RegExp("[\\d"+e.escapeRegex(t.groupSeparator)+e.escapeRegex(t.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(t,n,i,r,o,a){var s;if("k"===t||"m"===t){s={insert:[],c:0};for(var l=0,c="k"===t?2:5;l<c;l++)s.insert.push({pos:i+l,c:0});return s.pos=i+c,s}if(!0===(s=r?new RegExp("[0-9"+e.escapeRegex(o.groupSeparator)+"]").test(t):new RegExp("[0-9]").test(t))){if(!0!==o.numericInput&&void 0!==n.validPositions[i]&&"~"===n.validPositions[i].match.def&&!a){var u=n.buffer.join(""),p=(u=(u=u.replace(new RegExp("[-"+e.escapeRegex(o.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(o.negationSymbol.back)+"$"),"")).split(o.radixPoint);p.length>1&&(p[1]=p[1].replace(/0/g,o.placeholder.charAt(0))),"0"===p[0]&&(p[0]=p[0].replace(/0/g,o.placeholder.charAt(0))),u=p[0]+o.radixPoint+p[1]||"";var d=n._buffer.join("");for(u===o.radixPoint&&(u=d);null===u.match(e.escapeRegex(d)+"$");)d=d.slice(1);s=void 0===(u=(u=u.replace(d,"")).split(""))[i]?{pos:i,remove:i}:{pos:i}}}else r||t!==o.radixPoint||void 0!==n.validPositions[i-1]||(s={insert:{pos:i,c:0},pos:i+1});return s},cardinality:1},"+":{validator:function(e,t,n,i,r){return r.allowMinus&&("-"===e||e===r.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,r){return r.allowMinus&&e===r.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(t,n,i,r,o){var a="["+e.escapeRegex(o.radixPoint)+"]",s=new RegExp(a).test(t);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===o.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(t,n,i){if(""===n&&!0===i.nullable)return n;var r=t.replace(i.prefix,"");return r=(r=r.replace(i.suffix,"")).replace(new RegExp(e.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(r=r.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==r.indexOf(i.radixPoint)&&(r=r.replace(e.escapeRegex.call(this,i.radixPoint),".")),r=(r=r.replace(new RegExp("^"+e.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(i.negationSymbol.back)+"$"),""),Number(r)):r},isComplete:function(t,n){var i=(n.numericInput?t.slice().reverse():t).join("");return i=(i=(i=(i=(i=i.replace(new RegExp("^"+e.escapeRegex(n.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(n.negationSymbol.back)+"$"),"")).replace(n.prefix,"")).replace(n.suffix,"")).replace(new RegExp(e.escapeRegex(n.groupSeparator)+"([0-9]{3})","g"),"$1"),","===n.radixPoint&&(i=i.replace(e.escapeRegex(n.radixPoint),".")),isFinite(i)},onBeforeMask:function(n,i){i.isNegative=void 0;var r=i.radixPoint||",";"number"!=typeof n&&"number"!==i.inputType||""===r||(n=n.toString().replace(".",r));var o=n.split(r),a=o[0].replace(/[^\-0-9]/g,""),s=o.length>1?o[1].replace(/[^0-9]/g,""):"";n=a+(""!==s?r+s:s);var l=0;if(""!==r&&(l=s.length,""!==s)){var c=Math.pow(10,l||1);isFinite(i.digits)&&(l=parseInt(i.digits),c=Math.pow(10,l)),n=n.replace(e.escapeRegex(r),"."),isFinite(n)&&(n=Math.round(parseFloat(n)*c)/c),n=n.toString().replace(".",r)}return 0===i.digits&&-1!==n.indexOf(e.escapeRegex(r))&&(n=n.substring(0,n.indexOf(e.escapeRegex(r)))),function(e,n,i){if(n>0){var r=t.inArray(i.radixPoint,e);-1===r&&(e.push(i.radixPoint),r=e.length-1);for(var o=1;o<=n;o++)e[r+o]=e[r+o]||"0"}return e}(n.toString().split(""),l,i).join("")},onKeyDown:function(n,i,r,o){var a=t(this);if(n.ctrlKey)switch(n.keyCode){case e.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(o.step)),a.trigger("setvalue");break;case e.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(o.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),e})?i.apply(t,r):i)||(e.exports=o)},3:function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},30:function(e,t,n){"use strict";var i=n(5),r=n.n(i),o=n(31),a=n.n(o);function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c={0:"Январь",1:"Февраль",2:"Март",3:"Апрель",4:"Май",5:"Июнь",6:"Июль",7:"Август",8:"Сентябрь",9:"Октябрь",10:"Ноябрь",11:"Декабрь"},u={0:"янв",1:"фев",2:"мар",3:"апр",4:"мая",5:"июн",6:"июл",7:"авг",8:"сен",9:"окт",10:"ноя",11:"дек"};function p(e,t,n){var i=document.createElement(e);return t&&i.classList.add(t),n&&(i.textContent=n),i}function d(e){return e<10?"0".concat(e):e}t.a=function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s(this,e),l(this,"hasCurrentMonth",(function(e){return e.getMonth()===t.currentDate.getMonth()})),l(this,"compaireDate",(function(e,t){var n=e.getDate(),i=e.getMonth(),r=e.getFullYear(),o=t.getDate(),a=t.getMonth(),s=t.getFullYear();return r>s?1:r<s?-1:i>a?1:i<a?-1:n>o?1:n<o?-1:0})),l(this,"hasDataFull",(function(e){return e.split(".").every((function(e){return a()(e)}))})),l(this,"showCalendar",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.contains("date-picker--show")||e.classList.add("date-picker--show"),document.body.addEventListener("mouseup",t.onClickShowCalendar),document.addEventListener("keyup",t.onEscUnshowCalendar)})),l(this,"unshowCalendar",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.contains("date-picker--show")&&e.classList.remove("date-picker--show"),document.body.removeEventListener("mouseup",t.onClickShowCalendar),document.removeEventListener("keyup",t.onEscUnshowCalendar)})),l(this,"showArrivalMonthCalendar",(function(){var e=t.arrivalInput.value,n=t.getConverteDateByUserInput(e),i=t.compaireDate(n,new Date)>=0;t.showCalendar(),t.onInputDateArrival(),t.arrivalDate&&i&&t.updateCurrentDate(t.arrivalDate)})),l(this,"showDepartureMonthCalendar",(function(){t.showCalendar(),t.onInputDateDeparture(),t.departureDate&&t.updateCurrentDate(t.departureDate)})),l(this,"showErrorAnimation",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.add("date-picker--error-animation"),setTimeout((function(){e.classList.remove("date-picker--error-animation")}),700)})),l(this,"paintingSelectCell",(function(){var e=t.parentNode.querySelectorAll("td");if(t.arrivalDate&&t.departureDate){var n=t.getAriaDateByDate(t.arrivalDate),i=t.getAriaDateByDate(t.departureDate),r=n===i;e.forEach((function(e){var o=n===e.getAttribute("aria-date"),a=i===e.getAttribute("aria-date"),s=new Date(e.getAttribute("aria-date"));a&&!r&&(e.classList.add("date-picker__day--select-end"),e.classList.add("date-picker__day--select"));var l=t.compaireDate(s,t.arrivalDate)>0,c=t.compaireDate(s,t.departureDate)<0;l&&c&&e.classList.add("date-picker__day--select-space"),o&&i&&!r?(e.classList.add("date-picker__day--select-start"),e.classList.add("date-picker__day--select")):o&&e.classList.add("date-picker__day--select")}))}else if(t.arrivalDate){var o=t.getAriaDateByDate(t.arrivalDate);e.forEach((function(e){o===e.getAttribute("aria-date")&&e.classList.add("date-picker__day--select")}))}})),l(this,"clearSelectCell",(function(){t.parentNode.querySelectorAll("td").forEach((function(e){var t=e.classList.contains("date-picker__day--select"),n=e.classList.contains("date-picker__day--select-space"),i=e.classList.contains("date-picker__day--select-start"),r=e.classList.contains("date-picker__day--select-end");n&&e.classList.remove("date-picker__day--select-space"),t&&e.classList.remove("date-picker__day--select"),i&&e.classList.remove("date-picker__day--select-start"),r&&e.classList.remove("date-picker__day--select-end")}))})),l(this,"printReductionDate",(function(e){var n=d(e.getDate()),i=u[e.getMonth()],r="".concat(n," ").concat(i);t.datePickerInput&&(t.isEndSelect?t.datePickerInput.textContent+=" - ".concat(r):t.datePickerInput.textContent=r)})),l(this,"onClickShowCalendar",(function(e){var n=t.parentNode.querySelector(".date-picker"),i=e.target===t.arrivalInput||e.target===t.departureInput,r=n.contains(e.target);!i&&!r&&t.unshowCalendar()})),l(this,"onEscUnshowCalendar",(function(e){27===e.keyCode&&(t.unshowCalendar(),t.arrivalInput&&t.arrivalInput.blur(),t.departureInput&&t.departureInput.blur())})),l(this,"onFocusArrivalInput",(function(){var e=t.arrivalInput.value;if(t.hasDataFull(e)){var n=t.getConverteDateByUserInput(e);t.compaireDate(n,new Date)>=0&&t.showArrivalMonthCalendar()}else t.showCalendar()})),l(this,"onFocusDepartureInput",(function(){var e=t.departureInput.value;t.hasDataFull(e)?t.showDepartureMonthCalendar():t.showCalendar()})),l(this,"onInputDateArrival",(function(){var e=t.arrivalInput.value;if(t.hasDataFull(e)){var n=t.getConverteDateByUserInput(e),i=t.getAriaDateByDate(n),r=t.getCellByAriaDate(i),o=!1;if(t.departureDate&&(o=t.compaireDate(n,t.departureDate)>0),t.compaireDate(n,new Date)<0)t.showErrorAnimation(),r&&(r.classList.add("date-picker__day--error"),setTimeout((function(){r.classList.remove("date-picker__day--error")}),700)),t.arrivalInput.value="",t.clearSelectCell();else{if(r){var a=!1;if(t.arrivalDate&&(a=n.toDateString()===t.arrivalDate.toDateString()),!a){var s=!1;t.departureDate&&(s=t.compaireDate(n,t.departureDate)<0),s?(t.clearSelectCell(),t.onStartSelectRangeDate(r,n),t.paintingSelectCell()):o?(t.clearSelectCell(),t.onClearSelectRangeDate(),t.departureInput.value=""):(t.isEndSelect||t.isStartSelect)&&(t.clearSelectCell(),t.onClearSelectRangeDate())}}else o&&(t.clearSelectCell(),t.onClearSelectRangeDate(),t.departureInput.value="");t.onStartSelectRangeDate(r,n)}}})),l(this,"onInputDateDeparture",(function(){var e=t.arrivalInput.value,n=t.hasDataFull(e),i=t.departureInput.value,r=t.hasDataFull(i);if(!n&&r)t.showErrorAnimation(),t.arrivalInput.focus();else if(n&&t.onInputDateArrival(),r){var o=t.getConverteDateByUserInput(i),a=t.getAriaDateByDate(o),s=t.getCellByAriaDate(a);if(s)if(t.compaireDate(o,t.arrivalDate)<0)t.showErrorAnimation(),s.classList.add("date-picker__day--error"),setTimeout((function(){s.classList.remove("date-picker__day--error")}),700),t.departureInput.value="";else t.departureCell===s||(t.isEndSelect&&t.clearSelectCell(),t.onEndSelectRangeDate(s,o),t.paintingSelectCell());else t.compaireDate(o,t.arrivalDate)<0?(t.showErrorAnimation(),t.departureInput.value=""):(t.clearSelectCell(),t.onEndSelectRangeDate(s,o),t.paintingSelectCell())}})),l(this,"onStartSelectRangeDate",(function(e,n){e&&(t.arrivalCell=e,e.classList.add("date-picker__day--select")),t.isStartSelect=!0,t.isEndSelect=!1,t.arrivalDate=n})),l(this,"onEndSelectRangeDate",(function(e,n){e&&(t.departureCell=e,e.classList.add("date-picker__day--select")),t.isStartSelect=!1,t.isEndSelect=!0,t.departureDate=n})),l(this,"onClearSelectRangeDate",(function(){t.arrivalDate=null,t.departureDate=null,t.arrivalCell=null,t.departureCell=null,t.isStartSelect=!1,t.isEndSelect=!1})),l(this,"onFullClearCalendar",(function(){t.onClearSelectRangeDate(),t.clearSelectCell(),t.arrivalInput&&(t.arrivalInput.value=""),t.departureInput&&(t.departureInput.value=""),t.datePickerInput&&(t.datePickerInput.textContent=t.inputPlaceholder?t.inputPlaceholder:""),t.updateCurrentDate(new Date)})),l(this,"onSelectDate",(function(e){if(e.preventDefault(),"td"===e.target.tagName.toLowerCase()){t.isEndSelect&&(t.clearSelectCell(),t.onClearSelectRangeDate());var n=e.target,i=new Date(n.getAttribute("aria-date")),r=d(i.getDate()),o=d(i.getMonth()+1),a=i.getFullYear(),s="".concat(r,".").concat(o,".").concat(a),l=n===t.arrivalCell||n===t.departureCell;if(t.compaireDate(i,new Date)<0)t.showErrorAnimation(),n.classList.add("date-picker__day--error"),setTimeout((function(){n.classList.remove("date-picker__day--error")}),700);else if(t.isStartSelect&&!l){t.compaireDate(i,t.arrivalDate)<0?(t.showErrorAnimation(),n.classList.add("date-picker__day--error"),setTimeout((function(){n.classList.remove("date-picker__day--error")}),700)):(t.onEndSelectRangeDate(n,i),t.departureInput?t.departureInput.value=s:t.printReductionDate(i),t.paintingSelectCell(),t.updateCurrentDate(i))}else l&&!t.isEndSelect?(t.onEndSelectRangeDate(n,i),t.departureInput?t.departureInput.value=s:t.printReductionDate(i),t.updateCurrentDate(i)):(t.onStartSelectRangeDate(n,i),t.arrivalInput?t.arrivalInput.value=s:t.printReductionDate(i),t.updateCurrentDate(i))}})),l(this,"getAriaDateByDate",(function(e){var t=e.getDate();t>=1&&t<=9&&(t="0".concat(t));var n=e.getMonth()+1;n>=1&&n<=9&&(n="0".concat(n));var i=e.getFullYear();return"".concat(i,"-").concat(n,"-").concat(t)})),l(this,"getConverteDateByUserInput",(function(e){var t=e.split("."),n=t[0],i=t[1],r=t[2];return new Date(r,i-1,n)})),l(this,"getNumberRow",(function(){var e=t.currentDate.getFullYear(),n=t.currentDate.getMonth(),i=new Date(e+1,n+1,0).getDate(),r=new Date(e,n,0).getDay(),o=5;return 6===r&&i>=30&&(o=6),5===r&&31===i&&(o=6),0===r&&28===i&&(o=4),o})),l(this,"getCalendarTableDate",(function(){var e,n,i=document.createDocumentFragment(),r=new Date,o=t.currentDate.getFullYear(),a=t.currentDate.getMonth(),s=new Date(o,a,0).getDay(),l=new Date(o,a,0).getDate(),c=t.getNumberRow();0===s?(n=0,e=a):(n=l-s,e=a-1);for(var u=0;u<c;u++){for(var d=p("tr"),f=0;f<7;f++){var h=new Date(o,e,++n),m=p("td","date-picker__day",h.getDate()),g=0===t.compaireDate(h,r);t.hasCurrentMonth(h)||g||m.classList.add("date-picker__day--not-current"),g&&m.classList.add("date-picker__day--current");var b=t.getAriaDateByDate(h);m.setAttribute("aria-date",b),d.appendChild(m)}i.appendChild(d)}return i})),l(this,"getCellByAriaDate",(function(e){var n;return t.parentNode.querySelectorAll("td").forEach((function(t){t.getAttribute("aria-date")===e&&(n=t)})),n})),l(this,"getCalendar",(function(){var e=p("section","date-picker"),n=p("div","date-picker__wrap"),i=t.getCalendarTopControl(),r=t.getCalendarTable(),o=t.getCalendarBotControl();return n.appendChild(i),n.appendChild(r),n.appendChild(o),e.appendChild(n),e})),l(this,"getCalendarTopControl",(function(){var e=p("div","date-picker__control"),n=p("button","date-picker__slider-btn","Назад");n.classList.add("date-picker__slider-btn--prev"),n.type="button",n.addEventListener("click",(function(e){e.preventDefault();var n=t.currentDate.getFullYear(),i=t.currentDate.getMonth(),r=new Date(n,i-1,1);t.updateCurrentDate(r)}));var i=p("button","date-picker__slider-btn","Вперед");i.classList.add("date-picker__slider-btn--next"),i.type="button",i.addEventListener("click",(function(e){e.preventDefault();var n=t.currentDate.getFullYear(),i=t.currentDate.getMonth(),r=new Date(n,i+1,1);t.updateCurrentDate(r)}));var r=c[t.currentDate.getMonth()],o=t.currentDate.getFullYear(),a=p("h2","date-picker__title","".concat(r," ").concat(o));return a.id="date-picker-main-title",e.appendChild(n),e.appendChild(a),e.appendChild(i),e})),l(this,"getCalendarTable",(function(){var e=p("table","date-picker__calendar"),n=p("thead"),i=p("tbody"),r=p("tr");["Пн","Вт","Ср","Чт","Пт","Сб","Вс"].forEach((function(e){var t=p("th","date-picker__th",e);r.appendChild(t)})),n.appendChild(r);var o=t.getCalendarTableDate();return i.appendChild(o),i.addEventListener("click",t.onSelectDate),e.appendChild(n),e.appendChild(i),e})),l(this,"getCalendarBotControl",(function(){var e=p("div","date-picker__control");return[{text:"Очистить",isAccent:!1,clickHandler:t.onFullClearCalendar},{text:"Применить",isAccent:!0,clickHandler:t.unshowCalendar}].forEach((function(t){var n=p("button","date-picker__button",t.text);n.type="button",t.isAccent&&n.classList.add("date-picker__button--accent"),t.clickHandler&&n.addEventListener("click",(function(e){e.preventDefault(),t.clickHandler()})),e.appendChild(n)})),e})),l(this,"updateCurrentDate",(function(e){t.currentDate=e,t.updateCalendar(),t.paintingSelectCell()})),l(this,"updateCalendar",(function(){t.updateCalendarTitle(),t.updateCalendarTable()})),l(this,"updateCalendarTitle",(function(){var e=document.querySelector("#date-picker-main-title"),n=c[t.currentDate.getMonth()],i=t.currentDate.getFullYear();e.textContent="".concat(n," ").concat(i)})),l(this,"updateCalendarTable",(function(){var e=t.parentNode.querySelector("table"),n=e.querySelector("tbody");e.removeChild(n);var i=p("tbody"),r=t.getCalendarTableDate();i.addEventListener("click",t.onSelectDate),i.appendChild(r),e.appendChild(i)})),l(this,"renderCalendar",(function(){var e=t.getCalendar();t.parentNode.appendChild(e)})),n.parentNodeId?this.parentNode=document.querySelector("#".concat(n.parentNodeId)):console.error("Expected parentNodeId inside constructor object but not received"),n.arrivalInputId&&(this.arrivalInput=document.querySelector("#".concat(n.arrivalInputId)),r()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#".concat(n.arrivalInputId)),this.arrivalInput.addEventListener("focus",this.onFocusArrivalInput),this.arrivalInput.addEventListener("keydown",(function(e){if(13===e.keyCode){e.preventDefault(),t.showArrivalMonthCalendar();var n=t.arrivalInput.value;t.hasDataFull(n)&&t.departureInput.focus()}}))),n.departureInputId&&(this.departureInput=document.querySelector("#".concat(n.departureInputId)),r()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#".concat(n.departureInputId)),this.departureInput.addEventListener("focus",this.onFocusDepartureInput),this.departureInput.addEventListener("keydown",(function(e){13===e.keyCode&&(e.preventDefault(),t.showDepartureMonthCalendar())}))),n.datePickerInputId&&(this.datePickerInput=document.querySelector("#".concat(n.datePickerInputId)),this.datePickerInput.addEventListener("click",this.showCalendar)),n.arrivalSplitBtnId&&(this.arrivalSplitBtn=document.querySelector("#".concat(n.arrivalSplitBtnId)),this.arrivalSplitBtn.addEventListener("click",this.showArrivalMonthCalendar)),n.departureSplitBtnId&&(this.departureSplitBtn=document.querySelector("#".concat(n.departureSplitBtnId)),this.departureSplitBtn.addEventListener("click",this.showDepartureMonthCalendar)),n.inputPlaceholder&&(this.inputPlaceholder=n.inputPlaceholder),this.currentDate=new Date,this.arrivalDate=null,this.departureDate=null,this.arrivalCell=null,this.departureCell=null,this.isStartSelect=!1,this.isEndSelect=!1}},31:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,r.default)(e),t&&t.no_symbols)return a.test(e);return o.test(e)};var i,r=(i=n(33))&&i.__esModule?i:{default:i};var o=/^[+-]?([0-9]*[.])?[0-9]+$/,a=/^[0-9]+$/;e.exports=t.default,e.exports.default=t.default},32:function(e,t,n){e.exports=n.p+"img/arrow-back-403e5de.svg"},33:function(e,t,n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!("string"==typeof e||e instanceof String)){var t;throw t=null===e?"null":"object"===(t=i(e))&&e.constructor&&e.constructor.hasOwnProperty("name")?e.constructor.name:"a ".concat(t),new TypeError("Expected string but received ".concat(t,"."))}},e.exports=t.default,e.exports.default=t.default},34:function(e,t,n){e.exports=n.p+"img/star-baa2705.png"},35:function(e,t,n){e.exports=n.p+"img/star-active-1a5b8d2.png"},36:function(e,t,n){var i,r,o;/*! nouislider - 14.1.1 - 12/15/2019 */r=[],void 0===(o="function"==typeof(i=function(){"use strict";var e="14.1.1";function t(e){e.parentElement.removeChild(e)}function n(e){return null!=e}function i(e){e.preventDefault()}function r(e){return"number"==typeof e&&!isNaN(e)&&isFinite(e)}function o(e,t,n){n>0&&(c(e,t),setTimeout((function(){u(e,t)}),n))}function a(e){return Math.max(Math.min(e,100),0)}function s(e){return Array.isArray(e)?e:[e]}function l(e){var t=(e=String(e)).split(".");return t.length>1?t[1].length:0}function c(e,t){e.classList?e.classList.add(t):e.className+=" "+t}function u(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function p(e){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(e.compatMode||"");return{x:t?window.pageXOffset:n?e.documentElement.scrollLeft:e.body.scrollLeft,y:t?window.pageYOffset:n?e.documentElement.scrollTop:e.body.scrollTop}}function d(e,t){return 100/(t-e)}function f(e,t){return 100*t/(e[1]-e[0])}function h(e,t){for(var n=1;e>=t[n];)n+=1;return n}function m(e,t,n){if(n>=e.slice(-1)[0])return 100;var i=h(n,e),r=e[i-1],o=e[i],a=t[i-1],s=t[i];return a+function(e,t){return f(e,e[0]<0?t+Math.abs(e[0]):t-e[0])}([r,o],n)/d(a,s)}function g(e,t,n,i){if(100===i)return i;var r=h(i,e),o=e[r-1],a=e[r];return n?i-o>(a-o)/2?a:o:t[r-1]?e[r-1]+function(e,t){return Math.round(e/t)*t}(i-e[r-1],t[r-1]):i}function b(e,t,n){var i;if("number"==typeof t&&(t=[t]),!Array.isArray(t))throw new Error("noUiSlider (14.1.1): 'range' contains invalid value.");if(!r(i="min"===e?0:"max"===e?100:parseFloat(e))||!r(t[0]))throw new Error("noUiSlider (14.1.1): 'range' value isn't numeric.");n.xPct.push(i),n.xVal.push(t[0]),i?n.xSteps.push(!isNaN(t[1])&&t[1]):isNaN(t[1])||(n.xSteps[0]=t[1]),n.xHighestCompleteStep.push(0)}function v(e,t,n){if(t)if(n.xVal[e]!==n.xVal[e+1]){n.xSteps[e]=f([n.xVal[e],n.xVal[e+1]],t)/d(n.xPct[e],n.xPct[e+1]);var i=(n.xVal[e+1]-n.xVal[e])/n.xNumSteps[e],r=Math.ceil(Number(i.toFixed(3))-1),o=n.xVal[e]+n.xNumSteps[e]*r;n.xHighestCompleteStep[e]=o}else n.xSteps[e]=n.xHighestCompleteStep[e]=n.xVal[e]}function x(e,t,n){var i;this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=t;var r=[];for(i in e)e.hasOwnProperty(i)&&r.push([e[i],i]);for(r.length&&"object"==typeof r[0][0]?r.sort((function(e,t){return e[0][0]-t[0][0]})):r.sort((function(e,t){return e[0]-t[0]})),i=0;i<r.length;i++)b(r[i][1],r[i][0],this);for(this.xNumSteps=this.xSteps.slice(0),i=0;i<this.xNumSteps.length;i++)v(i,this.xNumSteps[i],this)}x.prototype.getMargin=function(e){var t=this.xNumSteps[0];if(t&&e/t%1!=0)throw new Error("noUiSlider (14.1.1): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&f(this.xVal,e)},x.prototype.toStepping=function(e){return e=m(this.xVal,this.xPct,e)},x.prototype.fromStepping=function(e){return function(e,t,n){if(n>=100)return e.slice(-1)[0];var i=h(n,t),r=e[i-1],o=e[i],a=t[i-1];return function(e,t){return t*(e[1]-e[0])/100+e[0]}([r,o],(n-a)*d(a,t[i]))}(this.xVal,this.xPct,e)},x.prototype.getStep=function(e){return e=g(this.xPct,this.xSteps,this.snap,e)},x.prototype.getDefaultStep=function(e,t,n){var i=h(e,this.xPct);return(100===e||t&&e===this.xPct[i-1])&&(i=Math.max(i-1,1)),(this.xVal[i]-this.xVal[i-1])/n},x.prototype.getNearbySteps=function(e){var t=h(e,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t],step:this.xNumSteps[t],highestStep:this.xHighestCompleteStep[t]}}},x.prototype.countStepDecimals=function(){var e=this.xNumSteps.map(l);return Math.max.apply(null,e)},x.prototype.convert=function(e){return this.getStep(this.toStepping(e))};var k={to:function(e){return void 0!==e&&e.toFixed(2)},from:Number};function y(e){if(function(e){return"object"==typeof e&&"function"==typeof e.to&&"function"==typeof e.from}(e))return!0;throw new Error("noUiSlider (14.1.1): 'format' requires 'to' and 'from' methods.")}function w(e,t){if(!r(t))throw new Error("noUiSlider (14.1.1): 'step' is not numeric.");e.singleStep=t}function _(e,t){if("object"!=typeof t||Array.isArray(t))throw new Error("noUiSlider (14.1.1): 'range' is not an object.");if(void 0===t.min||void 0===t.max)throw new Error("noUiSlider (14.1.1): Missing 'min' or 'max' in 'range'.");if(t.min===t.max)throw new Error("noUiSlider (14.1.1): 'range' 'min' and 'max' cannot be equal.");e.spectrum=new x(t,e.snap,e.singleStep)}function S(e,t){if(t=s(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider (14.1.1): 'start' option is incorrect.");e.handles=t.length,e.start=t}function C(e,t){if(e.snap=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.1.1): 'snap' option must be a boolean.")}function E(e,t){if(e.animate=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.1.1): 'animate' option must be a boolean.")}function D(e,t){if(e.animationDuration=t,"number"!=typeof t)throw new Error("noUiSlider (14.1.1): 'animationDuration' option must be a number.")}function A(e,t){var n,i=[!1];if("lower"===t?t=[!0,!1]:"upper"===t&&(t=[!1,!0]),!0===t||!1===t){for(n=1;n<e.handles;n++)i.push(t);i.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==e.handles+1)throw new Error("noUiSlider (14.1.1): 'connect' option doesn't match handle count.");i=t}e.connect=i}function P(e,t){switch(t){case"horizontal":e.ort=0;break;case"vertical":e.ort=1;break;default:throw new Error("noUiSlider (14.1.1): 'orientation' option is invalid.")}}function M(e,t){if(!r(t))throw new Error("noUiSlider (14.1.1): 'margin' option must be numeric.");if(0!==t&&(e.margin=e.spectrum.getMargin(t),!e.margin))throw new Error("noUiSlider (14.1.1): 'margin' option is only supported on linear sliders.")}function j(e,t){if(!r(t))throw new Error("noUiSlider (14.1.1): 'limit' option must be numeric.");if(e.limit=e.spectrum.getMargin(t),!e.limit||e.handles<2)throw new Error("noUiSlider (14.1.1): 'limit' option is only supported on linear sliders with 2 or more handles.")}function O(e,t){if(!r(t)&&!Array.isArray(t))throw new Error("noUiSlider (14.1.1): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(t)&&2!==t.length&&!r(t[0])&&!r(t[1]))throw new Error("noUiSlider (14.1.1): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==t){if(Array.isArray(t)||(t=[t,t]),e.padding=[e.spectrum.getMargin(t[0]),e.spectrum.getMargin(t[1])],!1===e.padding[0]||!1===e.padding[1])throw new Error("noUiSlider (14.1.1): 'padding' option is only supported on linear sliders.");if(e.padding[0]<0||e.padding[1]<0)throw new Error("noUiSlider (14.1.1): 'padding' option must be a positive number(s).");if(e.padding[0]+e.padding[1]>100)throw new Error("noUiSlider (14.1.1): 'padding' option must not exceed 100% of the range.")}}function L(e,t){switch(t){case"ltr":e.dir=0;break;case"rtl":e.dir=1;break;default:throw new Error("noUiSlider (14.1.1): 'direction' option was not recognized.")}}function z(e,t){if("string"!=typeof t)throw new Error("noUiSlider (14.1.1): 'behaviour' must be a string containing options.");var n=t.indexOf("tap")>=0,i=t.indexOf("drag")>=0,r=t.indexOf("fixed")>=0,o=t.indexOf("snap")>=0,a=t.indexOf("hover")>=0,s=t.indexOf("unconstrained")>=0;if(r){if(2!==e.handles)throw new Error("noUiSlider (14.1.1): 'fixed' behaviour must be used with 2 handles");M(e,e.start[1]-e.start[0])}if(s&&(e.margin||e.limit))throw new Error("noUiSlider (14.1.1): 'unconstrained' behaviour cannot be used with margin or limit");e.events={tap:n||o,drag:i,fixed:r,snap:o,hover:a,unconstrained:s}}function N(e,t){if(!1!==t)if(!0===t){e.tooltips=[];for(var n=0;n<e.handles;n++)e.tooltips.push(!0)}else{if(e.tooltips=s(t),e.tooltips.length!==e.handles)throw new Error("noUiSlider (14.1.1): must pass a formatter for all handles.");e.tooltips.forEach((function(e){if("boolean"!=typeof e&&("object"!=typeof e||"function"!=typeof e.to))throw new Error("noUiSlider (14.1.1): 'tooltips' must be passed a formatter or 'false'.")}))}}function T(e,t){e.ariaFormat=t,y(t)}function U(e,t){e.format=t,y(t)}function F(e,t){if(e.keyboardSupport=t,"boolean"!=typeof t)throw new Error("noUiSlider (14.1.1): 'keyboardSupport' option must be a boolean.")}function B(e,t){e.documentElement=t}function I(e,t){if("string"!=typeof t&&!1!==t)throw new Error("noUiSlider (14.1.1): 'cssPrefix' must be a string or `false`.");e.cssPrefix=t}function R(e,t){if("object"!=typeof t)throw new Error("noUiSlider (14.1.1): 'cssClasses' must be an object.");if("string"==typeof e.cssPrefix)for(var n in e.cssClasses={},t)t.hasOwnProperty(n)&&(e.cssClasses[n]=e.cssPrefix+t[n]);else e.cssClasses=t}function H(e){var t={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:k,format:k},i={step:{r:!1,t:w},start:{r:!0,t:S},connect:{r:!0,t:A},direction:{r:!0,t:L},snap:{r:!1,t:C},animate:{r:!1,t:E},animationDuration:{r:!1,t:D},range:{r:!0,t:_},orientation:{r:!1,t:P},margin:{r:!1,t:M},limit:{r:!1,t:j},padding:{r:!1,t:O},behaviour:{r:!0,t:z},ariaFormat:{r:!1,t:T},format:{r:!1,t:U},tooltips:{r:!1,t:N},keyboardSupport:{r:!0,t:F},documentElement:{r:!1,t:B},cssPrefix:{r:!0,t:I},cssClasses:{r:!0,t:R}},r={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};e.format&&!e.ariaFormat&&(e.ariaFormat=e.format),Object.keys(i).forEach((function(o){if(!n(e[o])&&void 0===r[o]){if(i[o].r)throw new Error("noUiSlider (14.1.1): '"+o+"' is required.");return!0}i[o].t(t,n(e[o])?e[o]:r[o])})),t.pips=e.pips;var o=document.createElement("div"),a=void 0!==o.style.msTransform,s=void 0!==o.style.transform;return t.transformRule=s?"transform":a?"msTransform":"webkitTransform",t.style=[["left","top"],["right","bottom"]][t.dir][t.ort],t}function V(e,n,r){var l,d,f,h,m,g,b,v,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},k=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}(),y=e,w=n.spectrum,_=[],S=[],C=[],E=0,D={},A=e.ownerDocument,P=n.documentElement||A.documentElement,M=A.body,j="rtl"===A.dir||1===n.ort?0:100;function O(e,t){var n=A.createElement("div");return t&&c(n,t),e.appendChild(n),n}function L(e,t){var i=O(e,n.cssClasses.origin),r=O(i,n.cssClasses.handle);return O(r,n.cssClasses.touchArea),r.setAttribute("data-handle",t),n.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",(function(e){return function(e,t){if(T()||U(t))return!1;var i=["Left","Right"],r=["Down","Up"],o=["PageDown","PageUp"],a=["Home","End"];n.dir&&!n.ort?i.reverse():n.ort&&!n.dir&&(r.reverse(),o.reverse());var s,l=e.key.replace("Arrow",""),c=l===o[0],u=l===o[1],p=l===r[0]||l===i[0]||c,d=l===r[1]||l===i[1]||u,f=l===a[0],h=l===a[1];if(!(p||d||f||h))return!0;if(e.preventDefault(),d||p){var m=p?0:1,g=de(t)[m];if(null===g)return!1;!1===g&&(g=w.getDefaultStep(S[t],p,10)),(u||c)&&(g*=5),g=Math.max(g,1e-7),g*=p?-1:1,s=_[t]+g}else s=h?n.spectrum.xVal[n.spectrum.xVal.length-1]:n.spectrum.xVal[0];return se(t,w.toStepping(s),!0,!0),te("slide",t),te("update",t),te("change",t),te("set",t),!1}(e,t)}))),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",n.ort?"vertical":"horizontal"),0===t?c(r,n.cssClasses.handleLower):t===n.handles-1&&c(r,n.cssClasses.handleUpper),i}function z(e,t){return!!t&&O(e,n.cssClasses.connect)}function N(e,t){return!!n.tooltips[t]&&O(e.firstChild,n.cssClasses.tooltip)}function T(){return y.hasAttribute("disabled")}function U(e){return d[e].hasAttribute("disabled")}function F(){m&&(ee("update.tooltips"),m.forEach((function(e){e&&t(e)})),m=null)}function B(){F(),m=d.map(N),Z("update.tooltips",(function(e,t,i){if(m[t]){var r=e[t];!0!==n.tooltips[t]&&(r=n.tooltips[t].to(i[t])),m[t].innerHTML=r}}))}function I(e,t,i){var r=A.createElement("div"),o=[];o[0]=n.cssClasses.valueNormal,o[1]=n.cssClasses.valueLarge,o[2]=n.cssClasses.valueSub;var a=[];a[0]=n.cssClasses.markerNormal,a[1]=n.cssClasses.markerLarge,a[2]=n.cssClasses.markerSub;var s=[n.cssClasses.valueHorizontal,n.cssClasses.valueVertical],l=[n.cssClasses.markerHorizontal,n.cssClasses.markerVertical];function u(e,t){var i=t===n.cssClasses.value,r=i?o:a;return t+" "+(i?s:l)[n.ort]+" "+r[e]}return c(r,n.cssClasses.pips),c(r,0===n.ort?n.cssClasses.pipsHorizontal:n.cssClasses.pipsVertical),Object.keys(e).forEach((function(o){!function(e,o,a){if(-1!==(a=t?t(o,a):a)){var s=O(r,!1);s.className=u(a,n.cssClasses.marker),s.style[n.style]=e+"%",a>0&&((s=O(r,!1)).className=u(a,n.cssClasses.value),s.setAttribute("data-value",o),s.style[n.style]=e+"%",s.innerHTML=i.to(o))}}(o,e[o][0],e[o][1])})),r}function R(){h&&(t(h),h=null)}function V(e){R();var t=e.mode,n=e.density||1,i=e.filter||!1,r=function(e,t,n){if("range"===e||"steps"===e)return w.xVal;if("count"===e){if(t<2)throw new Error("noUiSlider (14.1.1): 'values' (>= 2) required for mode 'count'.");var i=t-1,r=100/i;for(t=[];i--;)t[i]=i*r;t.push(100),e="positions"}return"positions"===e?t.map((function(e){return w.fromStepping(n?w.getStep(e):e)})):"values"===e?n?t.map((function(e){return w.fromStepping(w.getStep(w.toStepping(e)))})):t:void 0}(t,e.values||!1,e.stepped||!1),o=function(e,t,n){var i,r={},o=w.xVal[0],a=w.xVal[w.xVal.length-1],s=!1,l=!1,c=0;return i=n.slice().sort((function(e,t){return e-t})),(n=i.filter((function(e){return!this[e]&&(this[e]=!0)}),{}))[0]!==o&&(n.unshift(o),s=!0),n[n.length-1]!==a&&(n.push(a),l=!0),n.forEach((function(i,o){var a,u,p,d,f,h,m,g,b,v,x=i,k=n[o+1],y="steps"===t;if(y&&(a=w.xNumSteps[o]),a||(a=k-x),!1!==x&&void 0!==k)for(a=Math.max(a,1e-7),u=x;u<=k;u=(u+a).toFixed(7)/1){for(g=(f=(d=w.toStepping(u))-c)/e,v=f/(b=Math.round(g)),p=1;p<=b;p+=1)r[(h=c+p*v).toFixed(5)]=[w.fromStepping(h),0];m=n.indexOf(u)>-1?1:y?2:0,!o&&s&&(m=0),u===k&&l||(r[d.toFixed(5)]=[u,m]),c=d}})),r}(n,t,r),a=e.format||{to:Math.round};return h=y.appendChild(I(o,i,a))}function G(){var e=l.getBoundingClientRect(),t="offset"+["Width","Height"][n.ort];return 0===n.ort?e.width||l[t]:e.height||l[t]}function q(e,t,i,r){var o=function(o){return!!(o=function(e,t,n){var i,r,o=0===e.type.indexOf("touch"),a=0===e.type.indexOf("mouse"),s=0===e.type.indexOf("pointer");if(0===e.type.indexOf("MSPointer")&&(s=!0),o){var l=function(e){return e.target===n||n.contains(e.target)};if("touchstart"===e.type){var c=Array.prototype.filter.call(e.touches,l);if(c.length>1)return!1;i=c[0].pageX,r=c[0].pageY}else{var u=Array.prototype.find.call(e.changedTouches,l);if(!u)return!1;i=u.pageX,r=u.pageY}}return t=t||p(A),(a||s)&&(i=e.clientX+t.x,r=e.clientY+t.y),e.pageOffset=t,e.points=[i,r],e.cursor=a||s,e}(o,r.pageOffset,r.target||t))&&!(T()&&!r.doNotReject)&&(a=y,s=n.cssClasses.tap,!((a.classList?a.classList.contains(s):new RegExp("\\b"+s+"\\b").test(a.className))&&!r.doNotReject)&&!(e===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!r.hover||!o.buttons)&&(k||o.preventDefault(),o.calcPoint=o.points[n.ort],void i(o,r)));var a,s},a=[];return e.split(" ").forEach((function(e){t.addEventListener(e,o,!!k&&{passive:!0}),a.push([e,o])})),a}function Q(e){var t,i,r,o,s,c,u=100*(e-(t=l,i=n.ort,r=t.getBoundingClientRect(),o=t.ownerDocument,s=o.documentElement,c=p(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),i?r.top+c.y-s.clientTop:r.left+c.x-s.clientLeft))/G();return u=a(u),n.dir?100-u:u}function Y(e,t){"mouseout"===e.type&&"HTML"===e.target.nodeName&&null===e.relatedTarget&&W(e,t)}function K(e,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===e.buttons&&0!==t.buttonsProperty)return W(e,t);var i=(n.dir?-1:1)*(e.calcPoint-t.startCalcPoint);re(i>0,100*i/t.baseSize,t.locations,t.handleNumbers)}function W(e,t){t.handle&&(u(t.handle,n.cssClasses.active),E-=1),t.listeners.forEach((function(e){P.removeEventListener(e[0],e[1])})),0===E&&(u(y,n.cssClasses.drag),ae(),e.cursor&&(M.style.cursor="",M.removeEventListener("selectstart",i))),t.handleNumbers.forEach((function(e){te("change",e),te("set",e),te("end",e)}))}function $(e,t){if(t.handleNumbers.some(U))return!1;var r;1===t.handleNumbers.length&&(r=d[t.handleNumbers[0]].children[0],E+=1,c(r,n.cssClasses.active)),e.stopPropagation();var o=[],a=q(x.move,P,K,{target:e.target,handle:r,listeners:o,startCalcPoint:e.calcPoint,baseSize:G(),pageOffset:e.pageOffset,handleNumbers:t.handleNumbers,buttonsProperty:e.buttons,locations:S.slice()}),s=q(x.end,P,W,{target:e.target,handle:r,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers}),l=q("mouseout",P,Y,{target:e.target,handle:r,listeners:o,doNotReject:!0,handleNumbers:t.handleNumbers});o.push.apply(o,a.concat(s,l)),e.cursor&&(M.style.cursor=getComputedStyle(e.target).cursor,d.length>1&&c(y,n.cssClasses.drag),M.addEventListener("selectstart",i,!1)),t.handleNumbers.forEach((function(e){te("start",e)}))}function X(e){e.stopPropagation();var t=Q(e.calcPoint),i=function(e){var t=100,n=!1;return d.forEach((function(i,r){if(!U(r)){var o=S[r],a=Math.abs(o-e);(a<t||a<=t&&e>o||100===a&&100===t)&&(n=r,t=a)}})),n}(t);if(!1===i)return!1;n.events.snap||o(y,n.cssClasses.tap,n.animationDuration),se(i,t,!0,!0),ae(),te("slide",i,!0),te("update",i,!0),te("change",i,!0),te("set",i,!0),n.events.snap&&$(e,{handleNumbers:[i]})}function J(e){var t=Q(e.calcPoint),n=w.getStep(t),i=w.fromStepping(n);Object.keys(D).forEach((function(e){"hover"===e.split(".")[0]&&D[e].forEach((function(e){e.call(g,i)}))}))}function Z(e,t){D[e]=D[e]||[],D[e].push(t),"update"===e.split(".")[0]&&d.forEach((function(e,t){te("update",t)}))}function ee(e){var t=e&&e.split(".")[0],n=t&&e.substring(t.length);Object.keys(D).forEach((function(e){var i=e.split(".")[0],r=e.substring(i.length);t&&t!==i||n&&n!==r||delete D[e]}))}function te(e,t,i){Object.keys(D).forEach((function(r){var o=r.split(".")[0];e===o&&D[r].forEach((function(e){e.call(g,_.map(n.format.to),t,_.slice(),i||!1,S.slice())}))}))}function ne(e,t,i,r,o,s){return d.length>1&&!n.events.unconstrained&&(r&&t>0&&(i=Math.max(i,e[t-1]+n.margin)),o&&t<d.length-1&&(i=Math.min(i,e[t+1]-n.margin))),d.length>1&&n.limit&&(r&&t>0&&(i=Math.min(i,e[t-1]+n.limit)),o&&t<d.length-1&&(i=Math.max(i,e[t+1]-n.limit))),n.padding&&(0===t&&(i=Math.max(i,n.padding[0])),t===d.length-1&&(i=Math.min(i,100-n.padding[1]))),!((i=a(i=w.getStep(i)))===e[t]&&!s)&&i}function ie(e,t){var i=n.ort;return(i?t:e)+", "+(i?e:t)}function re(e,t,n,i){var r=n.slice(),o=[!e,e],a=[e,!e];i=i.slice(),e&&i.reverse(),i.length>1?i.forEach((function(e,n){var i=ne(r,e,r[e]+t,o[n],a[n],!1);!1===i?t=0:(t=i-r[e],r[e]=i)})):o=a=[!0];var s=!1;i.forEach((function(e,i){s=se(e,n[e]+t,o[i],a[i])||s})),s&&i.forEach((function(e){te("update",e),te("slide",e)}))}function oe(e,t){return n.dir?100-e-t:e}function ae(){C.forEach((function(e){var t=S[e]>50?-1:1,n=3+(d.length+t*e);d[e].style.zIndex=n}))}function se(e,t,i,r){return!1!==(t=ne(S,e,t,i,r,!1))&&(function(e,t){S[e]=t,_[e]=w.fromStepping(t);var i="translate("+ie(10*(oe(t,0)-j)+"%","0")+")";d[e].style[n.transformRule]=i,le(e),le(e+1)}(e,t),!0)}function le(e){if(f[e]){var t=0,i=100;0!==e&&(t=S[e-1]),e!==f.length-1&&(i=S[e]);var r=i-t,o="translate("+ie(oe(t,r)+"%","0")+")",a="scale("+ie(r/100,"1")+")";f[e].style[n.transformRule]=o+" "+a}}function ce(e,t){return null===e||!1===e||void 0===e?S[t]:("number"==typeof e&&(e=String(e)),e=n.format.from(e),!1===(e=w.toStepping(e))||isNaN(e)?S[t]:e)}function ue(e,t){var i=s(e),r=void 0===S[0];t=void 0===t||!!t,n.animate&&!r&&o(y,n.cssClasses.tap,n.animationDuration),C.forEach((function(e){se(e,ce(i[e],e),!0,!1)}));for(var a=1===C.length?0:1;a<C.length;++a)C.forEach((function(e){se(e,S[e],!0,!0)}));ae(),C.forEach((function(e){te("update",e),null!==i[e]&&t&&te("set",e)}))}function pe(){var e=_.map(n.format.to);return 1===e.length?e[0]:e}function de(e){var t=S[e],i=w.getNearbySteps(t),r=_[e],o=i.thisStep.step,a=null;if(n.snap)return[r-i.stepBefore.startValue||null,i.stepAfter.startValue-r||null];!1!==o&&r+o>i.stepAfter.startValue&&(o=i.stepAfter.startValue-r),a=r>i.thisStep.startValue?i.thisStep.step:!1!==i.stepBefore.step&&r-i.stepBefore.highestStep,100===t?o=null:0===t&&(a=null);var s=w.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(s))),null!==a&&!1!==a&&(a=Number(a.toFixed(s))),[a,o]}return c(b=y,n.cssClasses.target),0===n.dir?c(b,n.cssClasses.ltr):c(b,n.cssClasses.rtl),0===n.ort?c(b,n.cssClasses.horizontal):c(b,n.cssClasses.vertical),c(b,"rtl"===getComputedStyle(b).direction?n.cssClasses.textDirectionRtl:n.cssClasses.textDirectionLtr),l=O(b,n.cssClasses.base),function(e,t){var i=O(t,n.cssClasses.connects);d=[],(f=[]).push(z(i,e[0]));for(var r=0;r<n.handles;r++)d.push(L(t,r)),C[r]=r,f.push(z(i,e[r+1]))}(n.connect,l),(v=n.events).fixed||d.forEach((function(e,t){q(x.start,e.children[0],$,{handleNumbers:[t]})})),v.tap&&q(x.start,l,X,{}),v.hover&&q(x.move,l,J,{hover:!0}),v.drag&&f.forEach((function(e,t){if(!1!==e&&0!==t&&t!==f.length-1){var i=d[t-1],r=d[t],o=[e];c(e,n.cssClasses.draggable),v.fixed&&(o.push(i.children[0]),o.push(r.children[0])),o.forEach((function(e){q(x.start,e,$,{handles:[i,r],handleNumbers:[t-1,t]})}))}})),ue(n.start),n.pips&&V(n.pips),n.tooltips&&B(),Z("update",(function(e,t,i,r,o){C.forEach((function(e){var t=d[e],r=ne(S,e,0,!0,!0,!0),a=ne(S,e,100,!0,!0,!0),s=o[e],l=n.ariaFormat.to(i[e]);r=w.fromStepping(r).toFixed(1),a=w.fromStepping(a).toFixed(1),s=w.fromStepping(s).toFixed(1),t.children[0].setAttribute("aria-valuemin",r),t.children[0].setAttribute("aria-valuemax",a),t.children[0].setAttribute("aria-valuenow",s),t.children[0].setAttribute("aria-valuetext",l)}))})),g={destroy:function(){for(var e in n.cssClasses)n.cssClasses.hasOwnProperty(e)&&u(y,n.cssClasses[e]);for(;y.firstChild;)y.removeChild(y.firstChild);delete y.noUiSlider},steps:function(){return C.map(de)},on:Z,off:ee,get:pe,set:ue,setHandle:function(e,t,n){if(!((e=Number(e))>=0&&e<C.length))throw new Error("noUiSlider (14.1.1): invalid handle number, got: "+e);se(e,ce(t,e),!0,!0),te("update",e),n&&te("set",e)},reset:function(e){ue(n.start,e)},__moveHandles:function(e,t,n){re(e,t,S,n)},options:r,updateOptions:function(e,t){var i=pe(),o=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];o.forEach((function(t){void 0!==e[t]&&(r[t]=e[t])}));var a=H(r);o.forEach((function(t){void 0!==e[t]&&(n[t]=a[t])})),w=a.spectrum,n.margin=a.margin,n.limit=a.limit,n.padding=a.padding,n.pips?V(n.pips):R(),n.tooltips?B():F(),S=[],ue(e.start||i,t)},target:y,removePips:R,removeTooltips:F,pips:V}}return{__spectrum:x,version:e,create:function(e,t){if(!e||!e.nodeName)throw new Error("noUiSlider (14.1.1): create requires a single element, got: "+e);if(e.noUiSlider)throw new Error("noUiSlider (14.1.1): Slider was already initialized.");var n=V(e,H(t),t);return e.noUiSlider=n,n}}})?i.apply(t,r):i)||(e.exports=o)},37:function(e,t,n){var i,r,o;r=[],void 0===(o="function"==typeof(i=function(){"use strict";var e=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function t(e){return e.split("").reverse().join("")}function n(e,t){return e.substring(0,t.length)===t}function i(e,t,n){if((e[t]||e[n])&&e[t]===e[n])throw new Error(t)}function r(e){return"number"==typeof e&&isFinite(e)}function o(e,n,i,o,a,s,l,c,u,p,d,f){var h,m,g,b,v,x=f,k="",y="";return s&&(f=s(f)),!!r(f)&&(!1!==e&&0===parseFloat(f.toFixed(e))&&(f=0),f<0&&(h=!0,f=Math.abs(f)),!1!==e&&(v=e,b=(b=f).toString().split("e"),f=(+((b=(b=Math.round(+(b[0]+"e"+(b[1]?+b[1]+v:v)))).toString().split("e"))[0]+"e"+(b[1]?+b[1]-v:-v))).toFixed(v)),-1!==(f=f.toString()).indexOf(".")?(g=(m=f.split("."))[0],i&&(k=i+m[1])):g=f,n&&(g=t(g).match(/.{1,3}/g),g=t(g.join(t(n)))),h&&c&&(y+=c),o&&(y+=o),h&&u&&(y+=u),y+=g,y+=k,a&&(y+=a),p&&(y=p(y,x)),y)}function a(e,t,i,o,a,s,l,c,u,p,d,f){var h,m="";return d&&(f=d(f)),!(!f||"string"!=typeof f)&&(c&&n(f,c)&&(f=f.replace(c,""),h=!0),o&&n(f,o)&&(f=f.replace(o,"")),u&&n(f,u)&&(f=f.replace(u,""),h=!0),a&&function(e,t){return e.slice(-1*t.length)===t}(f,a)&&(f=f.slice(0,-1*a.length)),t&&(f=f.split(t).join("")),i&&(f=f.replace(i,".")),h&&(m+="-"),""!==(m=(m+=f).replace(/[^0-9\.\-.]/g,""))&&(m=Number(m),l&&(m=l(m)),!!r(m)&&m))}function s(t,n,i){var r,o=[];for(r=0;r<e.length;r+=1)o.push(t[e[r]]);return o.push(i),n.apply("",o)}return function t(n){if(!(this instanceof t))return new t(n);"object"==typeof n&&(n=function(t){var n,r,o,a={};for(void 0===t.suffix&&(t.suffix=t.postfix),n=0;n<e.length;n+=1)if(void 0===(o=t[r=e[n]]))"negative"!==r||a.negativeBefore?"mark"===r&&"."!==a.thousand?a[r]=".":a[r]=!1:a[r]="-";else if("decimals"===r){if(!(o>=0&&o<8))throw new Error(r);a[r]=o}else if("encoder"===r||"decoder"===r||"edit"===r||"undo"===r){if("function"!=typeof o)throw new Error(r);a[r]=o}else{if("string"!=typeof o)throw new Error(r);a[r]=o}return i(a,"mark","thousand"),i(a,"prefix","negative"),i(a,"prefix","negativeBefore"),a}(n),this.to=function(e){return s(n,o,e)},this.from=function(e){return s(n,a,e)})}})?i.apply(t,r):i)||(e.exports=o)},38:function(e,t,n){(t=n(1)(!1)).push([e.i,'/*! nouislider - 14.1.1 - 12/15/2019 */\n.noUi-target,.noUi-target *{-webkit-touch-callout:none;-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-ms-touch-action:none;touch-action:none;-ms-user-select:none;-moz-user-select:none;user-select:none;-moz-box-sizing:border-box;box-sizing:border-box}.noUi-target{position:relative}.noUi-base,.noUi-connects{width:100%;height:100%;position:relative;z-index:1}.noUi-connects{overflow:hidden;z-index:0}.noUi-connect,.noUi-origin{will-change:transform;position:absolute;z-index:1;top:0;right:0;-ms-transform-origin:0 0;-webkit-transform-origin:0 0;-webkit-transform-style:preserve-3d;transform-origin:0 0;transform-style:flat}.noUi-connect{height:100%;width:100%}.noUi-origin{height:10%;width:10%}.noUi-txt-dir-rtl.noUi-horizontal .noUi-origin{left:0;right:auto}.noUi-vertical .noUi-origin{width:0}.noUi-horizontal .noUi-origin{height:0}.noUi-handle{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute}.noUi-touch-area{height:100%;width:100%}.noUi-state-tap .noUi-connect,.noUi-state-tap .noUi-origin{-webkit-transition:transform .3s;transition:transform .3s}.noUi-state-drag *{cursor:inherit!important}.noUi-horizontal{height:18px}.noUi-horizontal .noUi-handle{width:34px;height:28px;right:-17px;top:-6px}.noUi-vertical{width:18px}.noUi-vertical .noUi-handle{width:28px;height:34px;right:-6px;top:-17px}.noUi-txt-dir-rtl.noUi-horizontal .noUi-handle{left:-17px;right:auto}.noUi-target{background:#FAFAFA;border-radius:4px;border:1px solid #D3D3D3;box-shadow:inset 0 1px 1px #F0F0F0,0 3px 6px -5px #BBB}.noUi-connects{border-radius:3px}.noUi-connect{background:#3FB8AF}.noUi-draggable{cursor:ew-resize}.noUi-vertical .noUi-draggable{cursor:ns-resize}.noUi-handle{border:1px solid #D9D9D9;border-radius:3px;background:#FFF;cursor:default;box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #EBEBEB,0 3px 6px -3px #BBB}.noUi-active{box-shadow:inset 0 0 1px #FFF,inset 0 1px 7px #DDD,0 3px 6px -3px #BBB}.noUi-handle:after,.noUi-handle:before{content:"";display:block;position:absolute;height:14px;width:1px;background:#E8E7E6;left:14px;top:6px}.noUi-handle:after{left:17px}.noUi-vertical .noUi-handle:after,.noUi-vertical .noUi-handle:before{width:14px;height:1px;left:6px;top:14px}.noUi-vertical .noUi-handle:after{top:17px}[disabled] .noUi-connect{background:#B8B8B8}[disabled] .noUi-handle,[disabled].noUi-handle,[disabled].noUi-target{cursor:not-allowed}.noUi-pips,.noUi-pips *{-moz-box-sizing:border-box;box-sizing:border-box}.noUi-pips{position:absolute;color:#999}.noUi-value{position:absolute;white-space:nowrap;text-align:center}.noUi-value-sub{color:#ccc;font-size:10px}.noUi-marker{position:absolute;background:#CCC}.noUi-marker-sub{background:#AAA}.noUi-marker-large{background:#AAA}.noUi-pips-horizontal{padding:10px 0;height:80px;top:100%;left:0;width:100%}.noUi-value-horizontal{-webkit-transform:translate(-50%,50%);transform:translate(-50%,50%)}.noUi-rtl .noUi-value-horizontal{-webkit-transform:translate(50%,50%);transform:translate(50%,50%)}.noUi-marker-horizontal.noUi-marker{margin-left:-1px;width:2px;height:5px}.noUi-marker-horizontal.noUi-marker-sub{height:10px}.noUi-marker-horizontal.noUi-marker-large{height:15px}.noUi-pips-vertical{padding:0 10px;height:100%;top:0;left:100%}.noUi-value-vertical{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);padding-left:25px}.noUi-rtl .noUi-value-vertical{-webkit-transform:translate(0,50%);transform:translate(0,50%)}.noUi-marker-vertical.noUi-marker{width:5px;height:2px;margin-top:-1px}.noUi-marker-vertical.noUi-marker-sub{width:10px}.noUi-marker-vertical.noUi-marker-large{width:15px}.noUi-tooltip{display:block;position:absolute;border:1px solid #D9D9D9;border-radius:3px;background:#fff;color:#000;padding:5px;text-align:center;white-space:nowrap}.noUi-horizontal .noUi-tooltip{-webkit-transform:translate(-50%,0);transform:translate(-50%,0);left:50%;bottom:120%}.noUi-vertical .noUi-tooltip{-webkit-transform:translate(0,-50%);transform:translate(0,-50%);top:50%;right:120%}',""]),e.exports=t},39:function(e,t,n){e.exports=n.p+"img/expand-more-814cc55.png"},4:function(e,t,n){var i,r,o;
/*!
* inputmask.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/r=[n(27),n(23)],void 0===(o="function"==typeof(i=function(e,t,n){var i=t.document,r=navigator.userAgent,o=r.indexOf("MSIE ")>0||r.indexOf("Trident/")>0,a=d("touchstart"),s=/iemobile/i.test(r),l=/iphone/i.test(r)&&!s;function c(t,i,r){if(!(this instanceof c))return new c(t,i,r);this.el=n,this.events={},this.maskset=n,this.refreshValue=!1,!0!==r&&(e.isPlainObject(t)?i=t:(i=i||{},t&&(i.alias=t)),this.opts=e.extend(!0,{},this.defaults,i),this.noMasksCache=i&&i.definitions!==n,this.userOptions=i||{},this.isRTL=this.opts.numericInput,u(this.opts.alias,i,this.opts))}function u(t,i,r){var o=c.prototype.aliases[t];return o?(o.alias&&u(o.alias,n,r),e.extend(!0,r,o),e.extend(!0,r,i),!0):(null===r.mask&&(r.mask=t),!1)}function p(t,i){function r(t,r,o){var a=!1;if(null!==t&&""!==t||((a=null!==o.regex)?t=(t=o.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(a=!0,t=".*")),1===t.length&&!1===o.greedy&&0!==o.repeat&&(o.placeholder=""),o.repeat>0||"*"===o.repeat||"+"===o.repeat){var s="*"===o.repeat?0:"+"===o.repeat?1:o.repeat;t=o.groupmarker[0]+t+o.groupmarker[1]+o.quantifiermarker[0]+s+","+o.repeat+o.quantifiermarker[1]}var l,u=a?"regex_"+o.regex:o.numericInput?t.split("").reverse().join(""):t;return c.prototype.masksCache[u]===n||!0===i?(l={mask:t,maskToken:c.prototype.analyseMask(t,a,o),validPositions:{},_buffer:n,buffer:n,tests:{},excludes:{},metadata:r,maskLength:n,jitOffset:{}},!0!==i&&(c.prototype.masksCache[u]=l,l=e.extend(!0,{},c.prototype.masksCache[u]))):l=e.extend(!0,{},c.prototype.masksCache[u]),l}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){if(null===t.keepStatic){t.keepStatic="auto";for(var o=0;o<t.mask.length;o++)if(t.mask[o].charAt(0)!==t.mask[0].charAt(0)){t.keepStatic=!0;break}}var a=t.groupmarker[0];return e.each(t.isRTL?t.mask.reverse():t.mask,(function(i,r){a.length>1&&(a+=t.groupmarker[1]+t.alternatormarker+t.groupmarker[0]),r.mask===n||e.isFunction(r.mask)?a+=r:a+=r.mask})),r(a+=t.groupmarker[1],t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==n&&!e.isFunction(t.mask.mask)?r(t.mask.mask,t.mask,t):r(t.mask,t.mask,t)}function d(e){var t=i.createElement("input"),n="on"+e,r=n in t;return r||(t.setAttribute(n,"return;"),r="function"==typeof t[n]),t=null,r}function f(r,u,p){u=u||this.maskset,p=p||this.opts;var h,m,g,b,v,x=this,k=this.el,y=this.isRTL,w=!1,_=!1,S=!1,C=!1,E=function(e,t,i,r,o){var a=p.greedy;o&&(p.greedy=!1),t=t||0;var s,l,c,u=[],d=0;P();do{if(!0===e&&D().validPositions[d])l=(c=o&&!0===D().validPositions[d].match.optionality&&D().validPositions[d+1]===n&&(!0===D().validPositions[d].generatedInput||D().validPositions[d].input==p.skipOptionalPartCharacter&&d>0)?O(d,T(d,s,d-1)):D().validPositions[d]).match,s=c.locator.slice(),u.push(!0===i?c.input:!1===i?l.nativeDef:$(d,l));else{l=(c=L(d,s,d-1)).match,s=c.locator.slice();var f=!0!==r&&(!1!==p.jitMasking?p.jitMasking:l.jit);(!1===f||f===n||"number"==typeof f&&isFinite(f)&&f>d)&&u.push(!1===i?l.nativeDef:$(d,l))}"auto"===p.keepStatic&&l.newBlockMarker&&null!==l.fn&&(p.keepStatic=d-1),d++}while((g===n||d<g)&&(null!==l.fn||""!==l.def)||t>d);return""===u[u.length-1]&&u.pop(),!1===i&&D().maskLength!==n||(D().maskLength=d-1),p.greedy=a,u};function D(){return u}function A(e){var t=D();t.buffer=n,!0!==e&&(t.validPositions={},t.p=0)}function P(e,t,i){var r=-1,o=-1,a=i||D().validPositions;for(var s in e===n&&(e=-1),a){var l=parseInt(s);a[l]&&(t||!0!==a[l].generatedInput)&&(l<=e&&(r=l),l>=e&&(o=l))}return-1===r||r==e?o:-1==o?r:e-r<o-e?r:o}function M(e){var t=e.locator[e.alternation];return"string"==typeof t&&t.length>0&&(t=t.split(",")[0]),t!==n?t.toString():""}function j(e,t){var i=(e.alternation!=n?e.mloc[M(e)]:e.locator).join("");if(""!==i)for(;i.length<t;)i+="0";return i}function O(e,t){for(var i,r,o,a=j(z(e=e>0?e-1:0)),s=0;s<t.length;s++){var l=t[s];i=j(l,a.length);var c=Math.abs(i-a);(r===n||""!==i&&c<r||o&&!p.greedy&&o.match.optionality&&"master"===o.match.newBlockMarker&&(!l.match.optionality||!l.match.newBlockMarker)||o&&o.match.optionalQuantifier&&!l.match.optionalQuantifier)&&(r=c,o=l)}return o}function L(e,t,n){return D().validPositions[e]||O(e,T(e,t?t.slice():t,n))}function z(e,t){return D().validPositions[e]?D().validPositions[e]:(t||T(e))[0]}function N(e,t){for(var n=!1,i=T(e),r=0;r<i.length;r++)if(i[r].match&&i[r].match.def===t){n=!0;break}return n}function T(t,i,r){var o,a=D().maskToken,s=i?r:0,l=i?i.slice():[0],c=[],u=!1,d=i?i.join(""):"";function f(i,r,a,l){function h(a,l,m){function g(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,(function(e,r){if(!0===r.isQuantifier?i=g(t,n.matches[e-1]):r.hasOwnProperty("matches")&&(i=g(t,r)),i)return!1})),i}function b(t,i,r){var o,a;if((D().tests[t]||D().validPositions[t])&&e.each(D().tests[t]||[D().validPositions[t]],(function(e,t){if(t.mloc[i])return o=t,!1;var s=r!==n?r:t.alternation,l=t.locator[s]!==n?t.locator[s].toString().indexOf(i):-1;(a===n||l<a)&&-1!==l&&(o=t,a=l)})),o){var s=o.locator[o.alternation];return(o.mloc[i]||o.mloc[s]||o.locator).slice((r!==n?r:o.alternation)+1)}return r!==n?b(t,i):n}function v(e,t){function n(e){for(var t,n,i=[],r=0,o=e.length;r<o;r++)if("-"===e.charAt(r))for(n=e.charCodeAt(r+1);++t<n;)i.push(String.fromCharCode(t));else t=e.charCodeAt(r),i.push(e.charAt(r));return i.join("")}return p.regex&&null!==e.match.fn&&null!==t.match.fn?-1!==n(t.match.def.replace(/[\[\]]/g,"")).indexOf(n(e.match.def.replace(/[\[\]]/g,""))):e.match.def===t.match.nativeDef}function x(e,t){if(t===n||e.alternation===t.alternation&&-1===e.locator[e.alternation].toString().indexOf(t.locator[t.alternation])){e.mloc=e.mloc||{};var i=e.locator[e.alternation];if(i!==n){if("string"==typeof i&&(i=i.split(",")[0]),e.mloc[i]===n&&(e.mloc[i]=e.locator.slice()),t!==n){for(var r in t.mloc)"string"==typeof r&&(r=r.split(",")[0]),e.mloc[r]===n&&(e.mloc[r]=t.mloc[r]);e.locator[e.alternation]=Object.keys(e.mloc).join(",")}return!0}e.alternation=n}return!1}if(s>500&&m!==n)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+D().mask;if(s===t&&a.matches===n)return c.push({match:a,locator:l.reverse(),cd:d,mloc:{}}),!0;if(a.matches!==n){if(a.isGroup&&m!==a){if(a=h(i.matches[e.inArray(a,i.matches)+1],l,m))return!0}else if(a.isOptional){var k=a;if(a=f(a,r,l,m)){if(e.each(c,(function(e,t){t.match.optionality=!0})),o=c[c.length-1].match,m!==n||!g(o,k))return!0;u=!0,s=t}}else if(a.isAlternator){var y,w=a,_=[],S=c.slice(),C=l.length,E=r.length>0?r.shift():-1;if(-1===E||"string"==typeof E){var A,P=s,M=r.slice(),j=[];if("string"==typeof E)j=E.split(",");else for(A=0;A<w.matches.length;A++)j.push(A.toString());if(D().excludes[t]){for(var O=j.slice(),L=0,z=D().excludes[t].length;L<z;L++)j.splice(j.indexOf(D().excludes[t][L].toString()),1);0===j.length&&(D().excludes[t]=n,j=O)}(!0===p.keepStatic||isFinite(parseInt(p.keepStatic))&&P>=p.keepStatic)&&(j=j.slice(0,1));for(var N=!1,T=0;T<j.length;T++){A=parseInt(j[T]),c=[],r="string"==typeof E&&b(s,A,C)||M.slice(),w.matches[A]&&h(w.matches[A],[A].concat(l),m)?a=!0:0===T&&(N=!0),y=c.slice(),s=P,c=[];for(var U=0;U<y.length;U++){var F=y[U],B=!1;F.match.jit=F.match.jit||N,F.alternation=F.alternation||C,x(F);for(var I=0;I<_.length;I++){var R=_[I];if("string"!=typeof E||F.alternation!==n&&-1!==e.inArray(F.locator[F.alternation].toString(),j)){if(F.match.nativeDef===R.match.nativeDef){B=!0,x(R,F);break}if(v(F,R)){x(F,R)&&(B=!0,_.splice(_.indexOf(R),0,F));break}if(v(R,F)){x(R,F);break}if(Q=R,(q=F).locator.slice(q.alternation).join("")==Q.locator.slice(Q.alternation).join("")&&null===q.match.fn&&null!==Q.match.fn&&Q.match.fn.test(q.match.def,D(),t,!1,p,!1)){x(F,R)&&(B=!0,_.splice(_.indexOf(R),0,F));break}}}B||_.push(F)}}c=S.concat(_),s=t,u=c.length>0,a=_.length>0,r=M.slice()}else a=h(w.matches[E]||i.matches[E],[E].concat(l),m);if(a)return!0}else if(a.isQuantifier&&m!==i.matches[e.inArray(a,i.matches)-1])for(var H=a,V=r.length>0?r.shift():0;V<(isNaN(H.quantifier.max)?V+1:H.quantifier.max)&&s<=t;V++){var G=i.matches[e.inArray(H,i.matches)-1];if(a=h(G,[V].concat(l),G)){if((o=c[c.length-1].match).optionalQuantifier=V>=H.quantifier.min,o.jit=(V||1)*G.matches.indexOf(o)>=H.quantifier.jit,o.optionalQuantifier&&g(o,G)){u=!0,s=t;break}return o.jit&&(D().jitOffset[t]=G.matches.indexOf(o)),!0}}else if(a=f(a,r,l,m))return!0}else s++;var q,Q}for(var m=r.length>0?r.shift():0;m<i.matches.length;m++)if(!0!==i.matches[m].isQuantifier){var g=h(i.matches[m],[m].concat(a),l);if(g&&s===t)return g;if(s>t)break}}if(t>-1){if(i===n){for(var h,m=t-1;(h=D().validPositions[m]||D().tests[m])===n&&m>-1;)m--;h!==n&&m>-1&&(l=function(t,i){var r=[];return e.isArray(i)||(i=[i]),i.length>0&&(i[0].alternation===n?0===(r=O(t,i.slice()).locator.slice()).length&&(r=i[0].locator.slice()):e.each(i,(function(e,t){if(""!==t.def)if(0===r.length)r=t.locator.slice();else for(var n=0;n<r.length;n++)t.locator[n]&&-1===r[n].toString().indexOf(t.locator[n])&&(r[n]+=","+t.locator[n])}))),r}(m,h),d=l.join(""),s=m)}if(D().tests[t]&&D().tests[t][0].cd===d)return D().tests[t];for(var g=l.shift();g<a.length&&!(f(a[g],l,[g])&&s===t||s>t);g++);}return(0===c.length||u)&&c.push({match:{fn:null,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:d}),i!==n&&D().tests[t]?e.extend(!0,[],c):(D().tests[t]=e.extend(!0,[],c),D().tests[t])}function U(){return D()._buffer===n&&(D()._buffer=E(!1,1),D().buffer===n&&(D().buffer=D()._buffer.slice())),D()._buffer}function F(e){return D().buffer!==n&&!0!==e||(D().buffer=E(!0,P(),!0),D()._buffer===n&&(D()._buffer=D().buffer.slice())),D().buffer}function B(e,t,i){var r,o;if(!0===e)A(),e=0,t=i.length;else for(r=e;r<t;r++)delete D().validPositions[r];for(o=e,r=e;r<t;r++)if(A(!0),i[r]!==p.skipOptionalPartCharacter){var a=V(o,i[r],!0,!0);!1!==a&&(A(!0),o=a.caret!==n?a.caret:a.pos+1)}}function I(t,n,i){switch(p.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var r=D().validPositions[i-1];t=0===i||r&&r.input===String.fromCharCode(c.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(p.casing)){var o=Array.prototype.slice.call(arguments);o.push(D().validPositions),t=p.casing.apply(this,o)}}return t}function R(t,i,r){for(var o,a=p.greedy?i:i.slice(0,1),s=!1,l=r!==n?r.split(","):[],c=0;c<l.length;c++)-1!==(o=t.indexOf(l[c]))&&t.splice(o,1);for(var u=0;u<t.length;u++)if(-1!==e.inArray(t[u],a)){s=!0;break}return s}function H(t,i,r,o,a){var s,l,c,u,p,d,f,h=e.extend(!0,{},D().validPositions),m=!1,g=a!==n?a:P();if(-1===g&&a===n)l=(u=z(s=0)).alternation;else for(;g>=0;g--)if((c=D().validPositions[g])&&c.alternation!==n){if(u&&u.locator[c.alternation]!==c.locator[c.alternation])break;s=g,l=D().validPositions[s].alternation,u=c}if(l!==n){f=parseInt(s),D().excludes[f]=D().excludes[f]||[],!0!==t&&D().excludes[f].push(M(u));var b=[],v=0;for(p=f;p<P(n,!0)+1;p++)(d=D().validPositions[p])&&!0!==d.generatedInput?b.push(d.input):p<t&&v++,delete D().validPositions[p];for(;D().excludes[f]&&D().excludes[f].length<10;){var x=-1*v,k=b.slice();for(D().tests[f]=n,A(!0),m=!0;k.length>0;){var y=k.shift();if(!(m=V(P(n,!0)+1,y,!1,o,!0)))break}if(m&&i!==n){var w=P(t)+1;for(p=f;p<P()+1;p++)((d=D().validPositions[p])===n||null==d.match.fn)&&p<t+x&&x++;m=V((t+=x)>w?w:t,i,r,o,!0)}if(m)break;if(A(),u=z(f),D().validPositions=e.extend(!0,{},h),!D().excludes[f]){m=H(t,i,r,o,f-1);break}var _=M(u);if(-1!==D().excludes[f].indexOf(_)){m=H(t,i,r,o,f-1);break}for(D().excludes[f].push(_),p=f;p<P(n,!0)+1;p++)delete D().validPositions[p]}}return D().excludes[f]=n,m}function V(t,i,r,o,a,s){function l(e){return y?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1}r=!0===r;var c=t;function u(i,r,a){var s=!1;return e.each(T(i),(function(c,u){var d=u.match;if(F(!0),!1!==(s=null!=d.fn?d.fn.test(r,D(),i,a,p,l(t)):(r===d.def||r===p.skipOptionalPartCharacter)&&""!==d.def&&{c:$(i,d,!0)||d.def,pos:i})){var f=s.c!==n?s.c:r,h=i;return f=f===p.skipOptionalPartCharacter&&null===d.fn?$(i,d,!0)||d.def:f,s.remove!==n&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort((function(e,t){return t-e})),(function(e,t){q({begin:t,end:t+1})}))),s.insert!==n&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort((function(e,t){return e-t})),(function(e,t){V(t.pos,t.c,!0,o)}))),!0!==s&&s.pos!==n&&s.pos!==i&&(h=s.pos),(!0===s||s.pos!==n||s.c!==n)&&(q(t,e.extend({},u,{input:I(f,d,h)}),o,h)||(s=!1),!1)}})),s}t.begin!==n&&(c=y?t.end:t.begin);var d=!0,f=e.extend(!0,{},D().validPositions);if(e.isFunction(p.preValidation)&&!r&&!0!==o&&!0!==s&&(d=p.preValidation(F(),c,i,l(t),p,D())),!0===d){if(G(n,c,!0),(g===n||c<g)&&(d=u(c,i,r),(!r||!0===o)&&!1===d&&!0!==s)){var h=D().validPositions[c];if(!h||null!==h.match.fn||h.match.def!==i&&i!==p.skipOptionalPartCharacter){if((p.insertMode||D().validPositions[Y(c)]===n)&&(!Q(c,!0)||D().jitOffset[c]))if(D().jitOffset[c]&&D().validPositions[Y(c)]===n)!1!==(d=V(c+D().jitOffset[c],i,r))&&(d.caret=c);else for(var m=c+1,b=Y(c);m<=b;m++)if(!1!==(d=u(m,i,r))){d=G(c,d.pos!==n?d.pos:m)||d,c=m;break}}else d={caret:Y(c)}}!1!==d||!1===p.keepStatic||null!=p.regex&&!ae(F())||r||!0===a||(d=H(c,i,r,o)),!0===d&&(d={pos:c})}if(e.isFunction(p.postValidation)&&!1!==d&&!r&&!0!==o&&!0!==s){var v=p.postValidation(F(!0),t.begin!==n?y?t.end:t.begin:t,d,p);if(v!==n){if(v.refreshFromBuffer&&v.buffer){var x=v.refreshFromBuffer;B(!0===x?x:x.start,x.end,v.buffer)}d=!0===v?d:v}}return d&&d.pos===n&&(d.pos=c),!1!==d&&!0!==s||(A(!0),D().validPositions=e.extend(!0,{},f)),d}function G(t,i,r){var o;if(t===n)for(t=i-1;t>0&&!D().validPositions[t];t--);for(var a=t;a<i;a++)if(D().validPositions[a]===n&&!Q(a,!0)&&(0==a?z(a):D().validPositions[a-1])){var s=T(a).slice();""===s[s.length-1].match.def&&s.pop();var l=O(a,s);if((l=e.extend({},l,{input:$(a,l.match,!0)||l.match.def})).generatedInput=!0,q(a,l,!0),!0!==r){var c=D().validPositions[i].input;D().validPositions[i]=n,o=V(i,c,!0,!0)}}return o}function q(t,i,r,o){function a(e,t,i){var r=t[e];if(r!==n&&(null===r.match.fn&&!0!==r.match.optionality||r.input===p.radixPoint)){var o=i.begin<=e-1?t[e-1]&&null===t[e-1].match.fn&&t[e-1]:t[e-1],a=i.end>e+1?t[e+1]&&null===t[e+1].match.fn&&t[e+1]:t[e+1];return o&&a}return!1}var s=t.begin!==n?t.begin:t,l=t.end!==n?t.end:t;if(t.begin>t.end&&(s=t.end,l=t.begin),o=o!==n?o:s,s!==l||p.insertMode&&D().validPositions[o]!==n&&r===n){var c=e.extend(!0,{},D().validPositions),u=P(n,!0);for(D().p=s,g=u;g>=s;g--)D().validPositions[g]&&"+"===D().validPositions[g].match.nativeDef&&(p.isNegative=!1),delete D().validPositions[g];var d=!0,f=o,h=(D().validPositions,!1),m=f,g=f;for(i&&(D().validPositions[o]=e.extend(!0,{},i),m++,f++,s<l&&g++);g<=u;g++){var b=c[g];if(b!==n&&(g>=l||g>=s&&!0!==b.generatedInput&&a(g,c,{begin:s,end:l}))){for(;""!==z(m).match.def;){if(!1===h&&c[m]&&c[m].match.nativeDef===b.match.nativeDef)D().validPositions[m]=e.extend(!0,{},c[m]),D().validPositions[m].input=b.input,G(n,m,!0),f=m+1,d=!0;else if(p.shiftPositions&&N(m,b.match.def)){var v=V(m,b.input,!0,!0);d=!1!==v,f=v.caret||v.insert?P():m+1,h=!0}else d=!0===b.generatedInput||b.input===p.radixPoint&&!0===p.numericInput;if(d)break;if(!d&&m>l&&Q(m,!0)&&(null!==b.match.fn||m>D().maskLength))break;m++}""==z(m).match.def&&(d=!1),m=f}if(!d)break}if(!d)return D().validPositions=e.extend(!0,{},c),A(!0),!1}else i&&(D().validPositions[o]=e.extend(!0,{},i));return A(!0),!0}function Q(e,t){var n=L(e).match;if(""===n.def&&(n=z(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=T(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function Y(e,t){for(var n=e+1;""!==z(n).match.def&&(!0===t&&(!0!==z(n).match.newBlockMarker||!Q(n))||!0!==t&&!Q(n));)n++;return n}function K(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==z(i).match.newBlockMarker||!0!==t&&!Q(i)&&((n=T(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function W(t,i,r,o,a){if(o&&e.isFunction(p.onBeforeWrite)){var s=p.onBeforeWrite.call(x,o,i,r,p);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;B(!0===l?l:l.start,l.end,s.buffer||i),i=F(!0)}r!==n&&(r=s.caret!==n?s.caret:r)}}if(t!==n&&(t.inputmask._valueSet(i.join("")),r===n||o!==n&&"blur"===o.type?ce(t,r,0===i.length):ie(t,r),!0===a)){var c=e(t),u=t.inputmask._valueGet();_=!0,c.trigger("input"),setTimeout((function(){u===U().join("")?c.trigger("cleared"):!0===ae(i)&&c.trigger("complete")}),0)}}function $(t,i,r){if((i=i||z(t).match).placeholder!==n||!0===r)return e.isFunction(i.placeholder)?i.placeholder(p):i.placeholder;if(null===i.fn){if(t>-1&&D().validPositions[t]===n){var o,a=T(t),s=[];if(a.length>1+(""===a[a.length-1].match.def?1:0))for(var l=0;l<a.length;l++)if(!0!==a[l].match.optionality&&!0!==a[l].match.optionalQuantifier&&(null===a[l].match.fn||o===n||!1!==a[l].match.fn.test(o.match.def,D(),t,!0,p))&&(s.push(a[l]),null===a[l].match.fn&&(o=a[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return p.placeholder.charAt(t%p.placeholder.length)}return i.def}return p.placeholder.charAt(t%p.placeholder.length)}function X(e,t){if(o){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var n=F().slice(),i=e.inputmask._valueGet();if(i!==t){var r=P();-1===r&&i===U().join("")?n=[]:-1!==r&&oe(n),W(e,n)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}var J,Z={on:function(t,i,r){var o=function(t){var i=this;if(i.inputmask===n&&"FORM"!==this.nodeName){var o=e.data(i,"_inputmask_opts");o?new c(o).mask(i):Z.off(i)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(i.disabled||i.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===p.tabThrough&&t.keyCode===c.keyCode.TAB))){switch(t.type){case"input":if(!0===_)return _=!1,t.preventDefault();if(a){var u=arguments;return setTimeout((function(){r.apply(i,u),ie(i,i.inputmask.caretPos,n,!0)}),0),!1}break;case"keydown":w=!1,_=!1;break;case"keypress":if(!0===w)return t.preventDefault();w=!0;break;case"click":if(s||l)return u=arguments,setTimeout((function(){r.apply(i,u)}),0),!1}var d=r.apply(i,arguments);return!1===d&&(t.preventDefault(),t.stopPropagation()),d}t.preventDefault()}};t.inputmask.events[i]=t.inputmask.events[i]||[],t.inputmask.events[i].push(o),-1!==e.inArray(i,["submit","reset"])?null!==t.form&&e(t.form).on(i,o):e(t).on(i,o)},off:function(t,n){var i;t.inputmask&&t.inputmask.events&&(n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,(function(n,i){for(;i.length>0;){var r=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,r):e(t).off(n,r)}delete t.inputmask.events[n]})))}},ee={keydownEvent:function(t){var n=e(this),i=t.keyCode,r=ie(this);if(i===c.keyCode.BACKSPACE||i===c.keyCode.DELETE||l&&i===c.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&i===c.keyCode.X&&!d("cut"))t.preventDefault(),se(0,i,r),W(this,F(!0),D().p,t,this.inputmask._valueGet()!==F().join(""));else if(i===c.keyCode.END||i===c.keyCode.PAGE_DOWN){t.preventDefault();var o=Y(P());ie(this,t.shiftKey?r.begin:o,o,!0)}else i===c.keyCode.HOME&&!t.shiftKey||i===c.keyCode.PAGE_UP?(t.preventDefault(),ie(this,0,t.shiftKey?r.begin:0,!0)):(p.undoOnEscape&&i===c.keyCode.ESCAPE||90===i&&t.ctrlKey)&&!0!==t.altKey?(te(this,!0,!1,h.split("")),n.trigger("click")):i!==c.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===p.tabThrough&&i===c.keyCode.TAB&&(!0===t.shiftKey?(null===z(r.begin).match.fn&&(r.begin=Y(r.begin)),r.end=K(r.begin,!0),r.begin=K(r.end,!0)):(r.begin=Y(r.begin,!0),r.end=Y(r.begin,!0),r.end<D().maskLength&&r.end--),r.begin<D().maskLength&&(t.preventDefault(),ie(this,r.begin,r.end))):(p.insertMode=!p.insertMode,this.setAttribute("im-insert",p.insertMode));p.onKeyDown.call(this,t,F(),ie(this).begin,p),S=-1!==e.inArray(i,p.ignorables)},keypressEvent:function(t,i,r,o,a){var s=this,l=e(s),u=t.which||t.charCode||t.keyCode;if(!(!0===i||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||S))return u===c.keyCode.ENTER&&h!==F().join("")&&(h=F().join(""),setTimeout((function(){l.trigger("change")}),0)),!0;if(u){46===u&&!1===t.shiftKey&&""!==p.radixPoint&&(u=p.radixPoint.charCodeAt(0));var d,f=i?{begin:a,end:a}:ie(s),m=String.fromCharCode(u),g=0;if(p._radixDance&&p.numericInput){var b=F().indexOf(p.radixPoint.charAt(0))+1;f.begin<=b&&(u===p.radixPoint.charCodeAt(0)&&(g=1),f.begin-=1,f.end-=1)}D().writeOutBuffer=!0;var v=V(f,m,o);if(!1!==v&&(A(!0),d=v.caret!==n?v.caret:Y(v.pos.begin?v.pos.begin:v.pos),D().p=d),d=(p.numericInput&&v.caret===n?K(d):d)+g,!1!==r&&(setTimeout((function(){p.onKeyValidation.call(s,u,v,p)}),0),D().writeOutBuffer&&!1!==v)){var x=F();W(s,x,d,t,!0!==i)}if(t.preventDefault(),i)return!1!==v&&(v.forwardPosition=d),v}},pasteEvent:function(n){var i,r=n.originalEvent||n,o=(e(this),this.inputmask._valueGet(!0)),a=ie(this);y&&(i=a.end,a.end=a.begin,a.begin=i);var s=o.substr(0,a.begin),l=o.substr(a.end,o.length);if(s===(y?U().reverse():U()).slice(0,a.begin).join("")&&(s=""),l===(y?U().reverse():U()).slice(a.end).join("")&&(l=""),t.clipboardData&&t.clipboardData.getData)o=s+t.clipboardData.getData("Text")+l;else{if(!r.clipboardData||!r.clipboardData.getData)return!0;o=s+r.clipboardData.getData("text/plain")+l}var c=o;if(e.isFunction(p.onBeforePaste)){if(!1===(c=p.onBeforePaste.call(x,o,p)))return n.preventDefault();c||(c=o)}return te(this,!1,!1,c.toString().split("")),W(this,F(),Y(P()),n,h!==F().join("")),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(F().join("")!==i){var r=ie(n);if(i=function(e,t,n){if(s){var i=t.replace(F().join(""),"");if(1===i.length){var r=t.split("");r.splice(n.begin,0,i),t=r.join("")}}return t}(0,i=function(e,t,n){return"."===t.charAt(n.begin-1)&&""!==p.radixPoint&&((t=t.split(""))[n.begin-1]=p.radixPoint.charAt(0),t=t.join("")),t}(0,i,r),r),F().join("")!==i){var o=F().join(""),a=!p.numericInput&&i.length>o.length?-1:0,l=i.substr(0,r.begin),u=i.substr(r.begin),d=o.substr(0,r.begin+a),f=o.substr(r.begin+a),h=r,m="",g=!1;if(l!==d){var b,v=(g=l.length>=d.length)?l.length:d.length;for(b=0;l.charAt(b)===d.charAt(b)&&b<v;b++);g&&(h.begin=b-a,m+=l.slice(b,h.end))}if(u!==f&&(u.length>f.length?m+=u.slice(0,1):u.length<f.length&&(h.end+=f.length-u.length,g||""===p.radixPoint||""!==u||l.charAt(h.begin+a-1)!==p.radixPoint||(h.begin--,m=p.radixPoint))),W(n,F(),{begin:h.begin+a,end:h.end+a}),m.length>0)e.each(m.split(""),(function(t,i){var r=new e.Event("keypress");r.which=i.charCodeAt(0),S=!1,ee.keypressEvent.call(n,r)}));else{h.begin===h.end-1&&(h.begin=K(h.begin+1),h.begin===h.end-1?ie(n,h.begin):ie(n,h.begin,h.end));var x=new e.Event("keydown");x.keyCode=p.numericInput?c.keyCode.BACKSPACE:c.keyCode.DELETE,ee.keydownEvent.call(n,x)}t.preventDefault()}}},beforeInputEvent:function(t){if(t.cancelable){var n=this;switch(t.inputType){case"insertText":return e.each(t.data.split(""),(function(t,i){var r=new e.Event("keypress");r.which=i.charCodeAt(0),S=!1,ee.keypressEvent.call(n,r)})),t.preventDefault();case"deleteContentBackward":return(i=new e.Event("keydown")).keyCode=c.keyCode.BACKSPACE,ee.keydownEvent.call(n,i),t.preventDefault();case"deleteContentForward":var i;return(i=new e.Event("keydown")).keyCode=c.keyCode.DELETE,ee.keydownEvent.call(n,i),t.preventDefault()}}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this,i=(i=t&&t.detail?t.detail[0]:arguments[1])||n.inputmask._valueGet(!0);e.isFunction(p.onBeforeMask)&&(i=p.onBeforeMask.call(x,i,p)||i),te(n,!0,!1,i=i.toString().split("")),h=F().join(""),(p.clearMaskOnLostFocus||p.clearIncomplete)&&n.inputmask._valueGet()===U().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();p.showMaskOnFocus&&(t!==F().join("")?W(this,F(),Y(P())):!1===C&&ie(this,Y(P()))),!0===p.positionCaretOnTab&&!1===C&&ee.clickEvent.apply(this,[e,!0]),h=F().join("")},mouseleaveEvent:function(e){C=!1,p.clearMaskOnLostFocus&&i.activeElement!==this&&X(this,v)},clickEvent:function(t,r){var o=this;setTimeout((function(){if(i.activeElement===o){var t=ie(o);if(r&&(y?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(p.positionCaretOnClick){case"none":break;case"select":ie(o,0,F().length);break;case"ignore":ie(o,Y(P()));break;case"radixFocus":if(function(t){if(""!==p.radixPoint){var i=D().validPositions;if(i[t]===n||i[t].input===$(t)){if(t<Y(-1))return!0;var r=e.inArray(p.radixPoint,F());if(-1!==r){for(var o in i)if(r<o&&i[o].input!==$(o))return!1;return!0}}}return!1}(t.begin)){var a=F().join("").indexOf(p.radixPoint);ie(o,p.numericInput?Y(a):a);break}default:var s=t.begin,l=P(s,!0),c=Y(l);if(s<c)ie(o,Q(s,!0)||Q(s-1,!0)?s:Y(s));else{var u=D().validPositions[l],d=L(c,u?u.match.locator:n,u),f=$(c,d.match);if(""!==f&&F()[c]!==f&&!0!==d.match.optionalQuantifier&&!0!==d.match.newBlockMarker||!Q(c,p.keepStatic)&&d.match.def===f){var h=Y(c);(s>=h||s===c)&&(c=h)}ie(o,c)}}}}),0)},cutEvent:function(n){e(this);var r=ie(this),o=n.originalEvent||n,a=t.clipboardData||o.clipboardData,s=y?F().slice(r.end,r.begin):F().slice(r.begin,r.end);a.setData("text",y?s.reverse().join(""):s.join("")),i.execCommand&&i.execCommand("copy"),se(0,c.keyCode.DELETE,r),W(this,F(),D().p,n,h!==F().join(""))},blurEvent:function(t){var i=e(this);if(this.inputmask){X(this,v);var r=this.inputmask._valueGet(),o=F().slice();""===r&&b===n||(p.clearMaskOnLostFocus&&(-1===P()&&r===U().join("")?o=[]:oe(o)),!1===ae(o)&&(setTimeout((function(){i.trigger("incomplete")}),0),p.clearIncomplete&&(A(),o=p.clearMaskOnLostFocus?[]:U().slice())),W(this,o,n,t)),h!==F().join("")&&(h=o.join(""),i.trigger("change"))}},mouseenterEvent:function(e){C=!0,i.activeElement!==this&&p.showMaskOnHover&&X(this,(y?F().slice().reverse():F()).join(""))},submitEvent:function(e){h!==F().join("")&&m.trigger("change"),p.clearMaskOnLostFocus&&-1===P()&&k.inputmask._valueGet&&k.inputmask._valueGet()===U().join("")&&k.inputmask._valueSet(""),p.clearIncomplete&&!1===ae(F())&&k.inputmask._valueSet(""),p.removeMaskOnSubmit&&(k.inputmask._valueSet(k.inputmask.unmaskedvalue(),!0),setTimeout((function(){W(k,F())}),0))},resetEvent:function(e){k.inputmask.refreshValue=!0,setTimeout((function(){m.trigger("setvalue")}),0)}};function te(t,i,r,o,a){var s=this||t.inputmask,l=o.slice(),u="",d=-1,f=n;if(A(),r||!0===p.autoUnmask)d=Y(d);else{var h=U().slice(0,Y(-1)).join(""),m=l.join("").match(new RegExp("^"+c.escapeRegex(h),"g"));m&&m.length>0&&(l.splice(0,m.length*h.length),d=Y(d))}-1===d?(D().p=Y(d),d=0):D().p=d,s.caretPos={begin:d},e.each(l,(function(i,o){if(o!==n)if(D().validPositions[i]===n&&l[i]===$(i)&&Q(i,!0)&&!1===V(i,l[i],!0,n,n,!0))D().p++;else{var a=new e.Event("_checkval");a.which=o.charCodeAt(0),u+=o;var c=P(n,!0);!function(e,t){return-1!==E(!0,0,!1).slice(e,Y(e)).join("").replace(/'/g,"").indexOf(t)&&!Q(e)&&(z(e).match.nativeDef===t.charAt(0)||null===z(e).match.fn&&z(e).match.nativeDef==="'"+t.charAt(0)||" "===z(e).match.nativeDef&&(z(e+1).match.nativeDef===t.charAt(0)||null===z(e+1).match.fn&&z(e+1).match.nativeDef==="'"+t.charAt(0)))}(d,u)?(f=ee.keypressEvent.call(t,a,!0,!1,r,s.caretPos.begin))&&(d=s.caretPos.begin+1,u=""):f=ee.keypressEvent.call(t,a,!0,!1,r,c+1),f&&(W(n,F(),f.forwardPosition,a,!1),s.caretPos={begin:f.forwardPosition,end:f.forwardPosition})}})),i&&W(t,F(),f?f.forwardPosition:n,a||new e.Event("checkval"),a&&"input"===a.type)}function ne(t){if(t){if(t.inputmask===n)return t.value;t.inputmask&&t.inputmask.refreshValue&&ee.setValueEvent.call(t)}var i=[],r=D().validPositions;for(var o in r)r[o].match&&null!=r[o].match.fn&&i.push(r[o].input);var a=0===i.length?"":(y?i.reverse():i).join("");if(e.isFunction(p.onUnMask)){var s=(y?F().slice().reverse():F()).join("");a=p.onUnMask.call(x,s,a,p)}return a}function ie(r,o,a,s){function l(e){return!y||"number"!=typeof e||p.greedy&&""===p.placeholder||!k||(e=k.inputmask._valueGet().length-e),e}var c;if(o===n)return"selectionStart"in r?(o=r.selectionStart,a=r.selectionEnd):t.getSelection?(c=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==r&&c.commonAncestorContainer!==r||(o=c.startOffset,a=c.endOffset):i.selection&&i.selection.createRange&&(a=(o=0-(c=i.selection.createRange()).duplicate().moveStart("character",-r.inputmask._valueGet().length))+c.text.length),{begin:s?o:l(o),end:s?a:l(a)};if(e.isArray(o)&&(a=y?o[0]:o[1],o=y?o[1]:o[0]),o.begin!==n&&(a=y?o.begin:o.end,o=y?o.end:o.begin),"number"==typeof o){o=s?o:l(o),a="number"==typeof(a=s?a:l(a))?a:o;var u=parseInt(((r.ownerDocument.defaultView||t).getComputedStyle?(r.ownerDocument.defaultView||t).getComputedStyle(r,null):r.currentStyle).fontSize)*a;if(r.scrollLeft=u>r.scrollWidth?u:0,r.inputmask.caretPos={begin:o,end:a},r===i.activeElement){if("selectionStart"in r)r.selectionStart=o,r.selectionEnd=a;else if(t.getSelection){if(c=i.createRange(),r.firstChild===n||null===r.firstChild){var d=i.createTextNode("");r.appendChild(d)}c.setStart(r.firstChild,o<r.inputmask._valueGet().length?o:r.inputmask._valueGet().length),c.setEnd(r.firstChild,a<r.inputmask._valueGet().length?a:r.inputmask._valueGet().length),c.collapse(!0);var f=t.getSelection();f.removeAllRanges(),f.addRange(c)}else r.createTextRange&&((c=r.createTextRange()).collapse(!0),c.moveEnd("character",a),c.moveStart("character",o),c.select());ce(r,{begin:o,end:a})}}}function re(t){var i,r,o=E(!0,P(),!0,!0),a=o.length,s=P(),l={},c=D().validPositions[s],u=c!==n?c.locator.slice():n;for(i=s+1;i<o.length;i++)u=(r=L(i,u,i-1)).locator.slice(),l[i]=e.extend(!0,{},r);var p=c&&c.alternation!==n?c.locator[c.alternation]:n;for(i=a-1;i>s&&((r=l[i]).match.optionality||r.match.optionalQuantifier&&r.match.newBlockMarker||p&&(p!==l[i].locator[c.alternation]&&null!=r.match.fn||null===r.match.fn&&r.locator[c.alternation]&&R(r.locator[c.alternation].toString().split(","),p.toString().split(","))&&""!==T(i)[0].def))&&o[i]===$(i,r.match);i--)a--;return t?{l:a,def:l[a]?l[a].match:n}:a}function oe(e){e.length=0;for(var t,i=E(!0,0,!0,n,!0);(t=i.shift())!==n;)e.push(t);return e}function ae(t){if(e.isFunction(p.isComplete))return p.isComplete(t,p);if("*"===p.repeat)return n;var i=!1,r=re(!0),o=K(r.l);if(r.def===n||r.def.newBlockMarker||r.def.optionality||r.def.optionalQuantifier){i=!0;for(var a=0;a<=o;a++){var s=L(a).match;if(null!==s.fn&&D().validPositions[a]===n&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[a]!==$(a,s)){i=!1;break}}}return i}function se(e,t,i,r,o){if((p.numericInput||y)&&(t===c.keyCode.BACKSPACE?t=c.keyCode.DELETE:t===c.keyCode.DELETE&&(t=c.keyCode.BACKSPACE),y)){var a=i.end;i.end=i.begin,i.begin=a}if(t===c.keyCode.BACKSPACE&&i.end-i.begin<1?(i.begin=K(i.begin),D().validPositions[i.begin]!==n&&D().validPositions[i.begin].input===p.groupSeparator&&i.begin--):t===c.keyCode.DELETE&&i.begin===i.end&&(i.end=Q(i.end,!0)&&D().validPositions[i.end]&&D().validPositions[i.end].input!==p.radixPoint?i.end+1:Y(i.end)+1,D().validPositions[i.begin]!==n&&D().validPositions[i.begin].input===p.groupSeparator&&i.end++),q(i),!0!==r&&!1!==p.keepStatic||null!==p.regex){var s=H(!0);if(s){var l=s.caret!==n?s.caret:s.pos?Y(s.pos.begin?s.pos.begin:s.pos):P(-1,!0);(t!==c.keyCode.DELETE||i.begin>l)&&i.begin}}var u=P(i.begin,!0);if(u<i.begin||-1===i.begin)D().p=Y(u);else if(!0!==r&&(D().p=i.begin,!0!==o))for(;D().p<u&&D().validPositions[D().p]===n;)D().p++}function le(n){var r=(n.ownerDocument.defaultView||t).getComputedStyle(n,null),o=i.createElement("div");o.style.width=r.width,o.style.textAlign=r.textAlign,b=i.createElement("div"),n.inputmask.colorMask=b,b.className="im-colormask",n.parentNode.insertBefore(b,n),n.parentNode.removeChild(n),b.appendChild(n),b.appendChild(o),n.style.left=o.offsetLeft+"px",e(b).on("mouseleave",(function(e){return ee.mouseleaveEvent.call(n,[e])})),e(b).on("mouseenter",(function(e){return ee.mouseenterEvent.call(n,[e])})),e(b).on("click",(function(e){return ie(n,function(e){var t,o=i.createElement("span");for(var a in r)isNaN(a)&&-1!==a.indexOf("font")&&(o.style[a]=r[a]);o.style.textTransform=r.textTransform,o.style.letterSpacing=r.letterSpacing,o.style.position="absolute",o.style.height="auto",o.style.width="auto",o.style.visibility="hidden",o.style.whiteSpace="nowrap",i.body.appendChild(o);var s,l=n.inputmask._valueGet(),c=0;for(t=0,s=l.length;t<=s;t++){if(o.innerHTML+=l.charAt(t)||"_",o.offsetWidth>=e){var u=e-c,p=o.offsetWidth-e;o.innerHTML=l.charAt(t),t=(u-=o.offsetWidth/3)<p?t-1:t;break}c=o.offsetWidth}return i.body.removeChild(o),t}(e.clientX)),ee.clickEvent.call(n,[e])}))}function ce(e,t,r){var o,a,s,l=[],c=!1,u=0;function d(e){if(e===n&&(e=""),c||null!==o.fn&&a.input!==n)if(c&&(null!==o.fn&&a.input!==n||""===o.def)){c=!1;var t=l.length;l[t-1]=l[t-1]+"</span>",l.push(e)}else l.push(e);else c=!0,l.push("<span class='im-static'>"+e)}if(b!==n){var f=F();if(t===n?t=ie(e):t.begin===n&&(t={begin:t,end:t}),!0!==r){var h=P();do{D().validPositions[u]?(a=D().validPositions[u],o=a.match,s=a.locator.slice(),d(f[u])):(a=L(u,s,u-1),o=a.match,s=a.locator.slice(),!1===p.jitMasking||u<h||"number"==typeof p.jitMasking&&isFinite(p.jitMasking)&&p.jitMasking>u?d($(u,o)):c=!1),u++}while((g===n||u<g)&&(null!==o.fn||""!==o.def)||h>u||c);c&&d(),i.activeElement===e&&(l.splice(t.begin,0,t.begin===t.end||t.end>D().maskLength?'<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">':'<mark class="im-caret-select">'),l.splice(t.end+1,0,"</mark>"))}var m=b.getElementsByTagName("div")[0];m.innerHTML=l.join(""),e.inputmask.positionColorMask(e,m)}}if(r!==n)switch(r.action){case"isComplete":return k=r.el,ae(F());case"unmaskedvalue":return k!==n&&r.value===n||(J=r.value,J=(e.isFunction(p.onBeforeMask)&&p.onBeforeMask.call(x,J,p)||J).split(""),te.call(this,n,!1,!1,J),e.isFunction(p.onBeforeWrite)&&p.onBeforeWrite.call(x,n,F(),0,p)),ne(k);case"mask":!function(t){Z.off(t);var r=function(t,r){var o=t.getAttribute("type"),a="INPUT"===t.tagName&&-1!==e.inArray(o,r.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!a)if("INPUT"===t.tagName){var s=i.createElement("input");s.setAttribute("type",o),a="text"===s.type,s=null}else a="partial";return!1!==a?function(t){var o,a;function s(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==P()||!0!==r.nullable?i.activeElement===this&&r.clearMaskOnLostFocus?(y?oe(F().slice()).reverse():oe(F().slice())).join(""):o.call(this):"":o.call(this)}function l(t){a.call(this,t),this.inputmask&&e(this).trigger("setvalue",[t])}if(!t.inputmask.__valueGet){if(!0!==r.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"==typeof"test".__proto__?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var c=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):n;c&&c.get&&c.set?(o=c.get,a=c.set,Object.defineProperty(t,"value",{get:s,set:l,configurable:!0})):"INPUT"!==t.tagName&&(o=function(){return this.textContent},a=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:s,set:l,configurable:!0}))}else i.__lookupGetter__&&t.__lookupGetter__("value")&&(o=t.__lookupGetter__("value"),a=t.__lookupSetter__("value"),t.__defineGetter__("value",s),t.__defineSetter__("value",l));t.inputmask.__valueGet=o,t.inputmask.__valueSet=a}t.inputmask._valueGet=function(e){return y&&!0!==e?o.call(this.el).split("").reverse().join(""):o.call(this.el)},t.inputmask._valueSet=function(e,t){a.call(this.el,null===e||e===n?"":!0!==t&&y?e.split("").reverse().join(""):e)},o===n&&(o=function(){return this.value},a=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===n||!0!==e.valHooks[t].inputmaskpatch)){var i=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},o=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=i(e);return-1!==P(n,n,e.inputmask.maskset.validPositions)||!0!==r.nullable?t:""}return i(e)},set:function(t,n){var i,r=e(t);return i=o(t,n),t.inputmask&&r.trigger("setvalue",[n]),i},inputmaskpatch:!0}}}(t.type),function(t){Z.on(t,"mouseenter",(function(t){var n=e(this);this.inputmask._valueGet()!==F().join("")&&n.trigger("setvalue")}))}(t))}}(t):t.inputmask=n,a}(t,p);if(!1!==r&&(m=e(k=t),v=k.placeholder,-1===(g=k!==n?k.maxLength:n)&&(g=n),!0===p.colorMask&&le(k),a&&("inputMode"in k&&(k.inputmode=p.inputmode,k.setAttribute("inputmode",p.inputmode)),!0===p.disablePredictiveText&&("autocorrect"in k?k.autocorrect=!1:(!0!==p.colorMask&&le(k),k.type="password"))),!0===r&&(k.setAttribute("im-insert",p.insertMode),Z.on(k,"submit",ee.submitEvent),Z.on(k,"reset",ee.resetEvent),Z.on(k,"blur",ee.blurEvent),Z.on(k,"focus",ee.focusEvent),!0!==p.colorMask&&(Z.on(k,"click",ee.clickEvent),Z.on(k,"mouseleave",ee.mouseleaveEvent),Z.on(k,"mouseenter",ee.mouseenterEvent)),Z.on(k,"paste",ee.pasteEvent),Z.on(k,"cut",ee.cutEvent),Z.on(k,"complete",p.oncomplete),Z.on(k,"incomplete",p.onincomplete),Z.on(k,"cleared",p.oncleared),a||!0===p.inputEventOnly?k.removeAttribute("maxLength"):(Z.on(k,"keydown",ee.keydownEvent),Z.on(k,"keypress",ee.keypressEvent)),Z.on(k,"input",ee.inputFallBackEvent),Z.on(k,"beforeinput",ee.beforeInputEvent)),Z.on(k,"setvalue",ee.setValueEvent),h=U().join(""),""!==k.inputmask._valueGet(!0)||!1===p.clearMaskOnLostFocus||i.activeElement===k)){var o=e.isFunction(p.onBeforeMask)&&p.onBeforeMask.call(x,k.inputmask._valueGet(!0),p)||k.inputmask._valueGet(!0);""!==o&&te(k,!0,!1,o.split(""));var s=F().slice();h=s.join(""),!1===ae(s)&&p.clearIncomplete&&A(),p.clearMaskOnLostFocus&&i.activeElement!==k&&(-1===P()?s=[]:oe(s)),(!1===p.clearMaskOnLostFocus||p.showMaskOnFocus&&i.activeElement===k||""!==k.inputmask._valueGet(!0))&&W(k,s),i.activeElement===k&&ie(k,Y(P()))}}(k);break;case"format":return J=(e.isFunction(p.onBeforeMask)&&p.onBeforeMask.call(x,r.value,p)||r.value).split(""),te.call(this,n,!0,!1,J),r.metadata?{value:y?F().slice().reverse().join(""):F().join(""),metadata:f.call(this,{action:"getmetadata"},u,p)}:y?F().slice().reverse().join(""):F().join("");case"isValid":r.value?(J=r.value.split(""),te.call(this,n,!0,!0,J)):r.value=F().join("");for(var ue=F(),pe=re(),de=ue.length-1;de>pe&&!Q(de);de--);return ue.splice(pe,de+1-pe),ae(ue)&&r.value===F().join("");case"getemptymask":return U().join("");case"remove":return k&&k.inputmask&&(e.data(k,"_inputmask_opts",null),m=e(k),k.inputmask._valueSet(p.autoUnmask?ne(k):k.inputmask._valueGet(!0)),Z.off(k),k.inputmask.colorMask&&((b=k.inputmask.colorMask).removeChild(k),b.parentNode.insertBefore(k,b),b.parentNode.removeChild(b)),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(k),"value")&&k.inputmask.__valueGet&&Object.defineProperty(k,"value",{get:k.inputmask.__valueGet,set:k.inputmask.__valueSet,configurable:!0}):i.__lookupGetter__&&k.__lookupGetter__("value")&&k.inputmask.__valueGet&&(k.__defineGetter__("value",k.inputmask.__valueGet),k.__defineSetter__("value",k.inputmask.__valueSet)),k.inputmask=n),k;case"getmetadata":if(e.isArray(u.metadata)){var fe=E(!0,0,!1).join("");return e.each(u.metadata,(function(e,t){if(t.mask===fe)return fe=t,!1})),fe}return u.metadata}}return c.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:n,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,disablePredictiveText:!1,importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(r){var o=this;return"string"==typeof r&&(r=i.getElementById(r)||i.querySelectorAll(r)),r=r.nodeName?[r]:r,e.each(r,(function(i,r){var a=e.extend(!0,{},o.opts);if(function(i,r,o,a){if(!0===r.importDataAttributes){var s,l,c,p,d=i.getAttribute(a),f=function(e,r){null!==(r=r!==n?r:i.getAttribute(a+"-"+e))&&("string"==typeof r&&(0===e.indexOf("on")?r=t[r]:"false"===r?r=!1:"true"===r&&(r=!0)),o[e]=r)};if(d&&""!==d&&(d=d.replace(/'/g,'"'),l=JSON.parse("{"+d+"}")),l)for(p in c=n,l)if("alias"===p.toLowerCase()){c=l[p];break}for(s in f("alias",c),o.alias&&u(o.alias,o,r),r){if(l)for(p in c=n,l)if(p.toLowerCase()===s.toLowerCase()){c=l[p];break}f(s,c)}}return e.extend(!0,r,o),("rtl"===i.dir||r.rightAlign)&&(i.style.textAlign="right"),("rtl"===i.dir||r.numericInput)&&(i.dir="ltr",i.removeAttribute("dir"),r.isRTL=!0),Object.keys(o).length}(r,a,e.extend(!0,{},o.userOptions),o.dataAttribute)){var s=p(a,o.noMasksCache);s!==n&&(r.inputmask!==n&&(r.inputmask.opts.autoUnmask=!0,r.inputmask.remove()),r.inputmask=new c(n,n,!0),r.inputmask.opts=a,r.inputmask.noMasksCache=o.noMasksCache,r.inputmask.userOptions=e.extend(!0,{},o.userOptions),r.inputmask.isRTL=a.isRTL||a.numericInput,r.inputmask.el=r,r.inputmask.maskset=s,e.data(r,"_inputmask_opts",a),f.call(r.inputmask,{action:"mask"}))}})),r&&r[0]&&r[0].inputmask||this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"==typeof t?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||p(this.opts,this.noMasksCache),f.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return f.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||p(this.opts,this.noMasksCache),f.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||p(this.opts,this.noMasksCache),f.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||p(this.opts,this.noMasksCache),f.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||p(this.opts,this.noMasksCache),f.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||p(this.opts,this.noMasksCache),f.call(this,{action:"format",value:e,metadata:t})},setValue:function(t){this.el&&e(this.el).trigger("setvalue",[t])},analyseMask:function(t,i,r){var o,a,s,l,u,p,d=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,f=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,h=!1,m=new v,g=[],b=[];function v(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function x(t,o,a){a=a!==n?a:t.matches.length;var s=t.matches[a-1];if(i)0===o.indexOf("[")||h&&/\\d|\\s|\\w]/i.test(o)||"."===o?t.matches.splice(a++,0,{fn:new RegExp(o,r.casing?"i":""),optionality:!1,newBlockMarker:s===n?"master":s.def!==o,casing:null,def:o,placeholder:n,nativeDef:o}):(h&&(o=o[o.length-1]),e.each(o.split(""),(function(e,i){s=t.matches[a-1],t.matches.splice(a++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==i&&null!==s.fn,casing:null,def:r.staticDefinitionSymbol||i,placeholder:r.staticDefinitionSymbol!==n?i:n,nativeDef:(h?"'":"")+i})}))),h=!1;else{var l=(r.definitions?r.definitions[o]:n)||c.prototype.definitions[o];l&&!h?t.matches.splice(a++,0,{fn:l.validator?"string"==typeof l.validator?new RegExp(l.validator,r.casing?"i":""):new function(){this.test=l.validator}:new RegExp("."),optionality:!1,newBlockMarker:s===n?"master":s.def!==(l.definitionSymbol||o),casing:l.casing,def:l.definitionSymbol||o,placeholder:l.placeholder,nativeDef:o}):(t.matches.splice(a++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==o&&null!==s.fn,casing:null,def:r.staticDefinitionSymbol||o,placeholder:r.staticDefinitionSymbol!==n?o:n,nativeDef:(h?"'":"")+o}),h=!1)}}function k(){if(g.length>0){if(x(l=g[g.length-1],a),l.isAlternator){u=g.pop();for(var e=0;e<u.matches.length;e++)u.matches[e].isGroup&&(u.matches[e].isGroup=!1);g.length>0?(l=g[g.length-1]).matches.push(u):m.matches.push(u)}}else x(m,a)}function y(e){var t=new v(!0);return t.openGroup=!1,t.matches=e,t}for(i&&(r.optionalmarker[0]=n,r.optionalmarker[1]=n);o=i?f.exec(t):d.exec(t);){if(a=o[0],i)switch(a.charAt(0)){case"?":a="{0,1}";break;case"+":case"*":a="{"+a+"}"}if(h)k();else switch(a.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case r.escapeChar:h=!0,i&&k();break;case r.optionalmarker[1]:case r.groupmarker[1]:if((s=g.pop()).openGroup=!1,s!==n)if(g.length>0){if((l=g[g.length-1]).matches.push(s),l.isAlternator){u=g.pop();for(var w=0;w<u.matches.length;w++)u.matches[w].isGroup=!1,u.matches[w].alternatorGroup=!1;g.length>0?(l=g[g.length-1]).matches.push(u):m.matches.push(u)}}else m.matches.push(s);else k();break;case r.optionalmarker[0]:g.push(new v(!1,!0));break;case r.groupmarker[0]:g.push(new v(!0));break;case r.quantifiermarker[0]:var _=new v(!1,!1,!0),S=(a=a.replace(/[{}]/g,"")).split("|"),C=S[0].split(","),E=isNaN(C[0])?C[0]:parseInt(C[0]),D=1===C.length?E:isNaN(C[1])?C[1]:parseInt(C[1]);"*"!==E&&"+"!==E||(E="*"===D?0:1),_.quantifier={min:E,max:D,jit:S[1]};var A=g.length>0?g[g.length-1].matches:m.matches;if((o=A.pop()).isAlternator){A.push(o),A=o.matches;var P=new v(!0),M=A.pop();A.push(P),A=P.matches,o=M}o.isGroup||(o=y([o])),A.push(o),A.push(_);break;case r.alternatormarker:var j=function(e){var t=e.pop();return t.isQuantifier&&(t=y([e.pop(),t])),t};if(g.length>0){var O=(l=g[g.length-1]).matches[l.matches.length-1];p=l.openGroup&&(O.matches===n||!1===O.isGroup&&!1===O.isAlternator)?g.pop():j(l.matches)}else p=j(m.matches);if(p.isAlternator)g.push(p);else if(p.alternatorGroup?(u=g.pop(),p.alternatorGroup=!1):u=new v(!1,!1,!1,!0),u.matches.push(p),g.push(u),p.openGroup){p.openGroup=!1;var L=new v(!0);L.alternatorGroup=!0,g.push(L)}break;default:k()}}for(;g.length>0;)s=g.pop(),m.matches.push(s);return m.matches.length>0&&(function t(o){o&&o.matches&&e.each(o.matches,(function(e,a){var s=o.matches[e+1];(s===n||s.matches===n||!1===s.isQuantifier)&&a&&a.isGroup&&(a.isGroup=!1,i||(x(a,r.groupmarker[0],0),!0!==a.openGroup&&x(a,r.groupmarker[1]))),t(a)}))}(m),b.push(m)),(r.numericInput||r.isRTL)&&function e(t){for(var i in t.matches=t.matches.reverse(),t.matches)if(t.matches.hasOwnProperty(i)){var o=parseInt(i);if(t.matches[i].isQuantifier&&t.matches[o+1]&&t.matches[o+1].isGroup){var a=t.matches[i];t.matches.splice(i,1),t.matches.splice(o+1,0,a)}t.matches[i].matches!==n?t.matches[i]=e(t.matches[i]):t.matches[i]=((s=t.matches[i])===r.optionalmarker[0]?s=r.optionalmarker[1]:s===r.optionalmarker[1]?s=r.optionalmarker[0]:s===r.groupmarker[0]?s=r.groupmarker[1]:s===r.groupmarker[1]&&(s=r.groupmarker[0]),s)}var s;return t}(b[0]),b},positionColorMask:function(e,t){e.style.left=t.offsetLeft+"px"}},c.extendDefaults=function(t){e.extend(!0,c.prototype.defaults,t)},c.extendDefinitions=function(t){e.extend(!0,c.prototype.definitions,t)},c.extendAliases=function(t){e.extend(!0,c.prototype.aliases,t)},c.format=function(e,t,n){return c(t).format(e,n)},c.unmask=function(e,t){return c(t).unmaskedvalue(e)},c.isValid=function(e,t){return c(t).isValid(e)},c.remove=function(t){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(e,t){t.inputmask&&t.inputmask.remove()}))},c.setValue=function(t,n){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(t,i){i.inputmask?i.inputmask.setValue(n):e(i).trigger("setvalue",[n])}))},c.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},c.keyCode={BACKSPACE:8,BACKSPACE_SAFARI:127,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,RIGHT:39,SPACE:32,TAB:9,UP:38,X:88,CONTROL:17},c.dependencyLib=e,c})?i.apply(t,r):i)||(e.exports=o)},40:function(e,t,n){e.exports=n.p+"img/expand-more-0a11a12.png"},41:function(e,t,n){e.exports=n.p+"img/arrow-42103db.png"},42:function(e,t,n){"use strict";var i=n(36),r=n.n(i),o=n(37),a=n.n(o),s=document.getElementById("range-slider"),l=[document.querySelector("#lower-value"),document.querySelector("#upper-value")];r.a.create(s,{start:[5e3,1e4],connect:!0,format:a()({decimals:0}),step:100,range:{min:[300],max:15700}}),s.noUiSlider.on("update",(function(e,t){var n=e[t].replace(/(\d)(?=(\d{3})+(\D|$))/g,"$1 ");n+="₽",l[t].textContent=n}))},45:function(e,t,n){"use strict";
/*!
 * Glide.js v3.4.1
 * (c) 2013-2019 Jędrzej Chałubek <jedrzej.chalubek@gmail.com> (http://jedrzejchalubek.com/)
 * Released under the MIT License.
 */var i={type:"slider",startAt:0,perView:1,focusAt:0,gap:10,autoplay:!1,hoverpause:!0,keyboard:!0,bound:!1,swipeThreshold:80,dragThreshold:120,perTouch:!1,touchRatio:.5,touchAngle:45,animationDuration:400,rewind:!0,rewindDuration:800,animationTimingFunc:"cubic-bezier(.165, .840, .440, 1)",throttle:10,direction:"ltr",peek:0,breakpoints:{},classes:{direction:{ltr:"glide--ltr",rtl:"glide--rtl"},slider:"glide--slider",carousel:"glide--carousel",swipeable:"glide--swipeable",dragging:"glide--dragging",cloneSlide:"glide__slide--clone",activeNav:"glide__bullet--active",activeSlide:"glide__slide--active",disabledArrow:"glide__arrow--disabled"}};function r(e){console.error("[Glide warn]: "+e)}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},c=function e(t,n,i){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,i)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(i):void 0},u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t};function p(e){return parseInt(e)}function d(e){return"string"==typeof e}function f(e){var t=void 0===e?"undefined":o(e);return"function"===t||"object"===t&&!!e}function h(e){return"function"==typeof e}function m(e){return void 0===e}function g(e){return e.constructor===Array}function b(e,t,n){var i={};for(var o in t)h(t[o])?i[o]=t[o](e,i,n):r("Extension must be a function");for(var a in i)h(i[a].mount)&&i[a].mount();return i}function v(e,t,n){Object.defineProperty(e,t,n)}function x(e,t){var n=l({},e,t);return t.hasOwnProperty("classes")&&(n.classes=l({},e.classes,t.classes),t.classes.hasOwnProperty("direction")&&(n.classes.direction=l({},e.classes.direction,t.classes.direction))),t.hasOwnProperty("breakpoints")&&(n.breakpoints=l({},e.breakpoints,t.breakpoints)),n}var k=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a(this,e),this.events=t,this.hop=t.hasOwnProperty}return s(e,[{key:"on",value:function(e,t){if(g(e))for(var n=0;n<e.length;n++)this.on(e[n],t);this.hop.call(this.events,e)||(this.events[e]=[]);var i=this.events[e].push(t)-1;return{remove:function(){delete this.events[e][i]}}}},{key:"emit",value:function(e,t){if(g(e))for(var n=0;n<e.length;n++)this.emit(e[n],t);this.hop.call(this.events,e)&&this.events[e].forEach((function(e){e(t||{})}))}}]),e}(),y=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};a(this,e),this._c={},this._t=[],this._e=new k,this.disabled=!1,this.selector=t,this.settings=x(i,n),this.index=this.settings.startAt}return s(e,[{key:"mount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._e.emit("mount.before"),f(e)?this._c=b(this,e,this._e):r("You need to provide a object on `mount()`"),this._e.emit("mount.after"),this}},{key:"mutate",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return g(e)?this._t=e:r("You need to provide a array on `mutate()`"),this}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.settings=x(this.settings,e),e.hasOwnProperty("startAt")&&(this.index=e.startAt),this._e.emit("update"),this}},{key:"go",value:function(e){return this._c.Run.make(e),this}},{key:"move",value:function(e){return this._c.Transition.disable(),this._c.Move.make(e),this}},{key:"destroy",value:function(){return this._e.emit("destroy"),this}},{key:"play",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e&&(this.settings.autoplay=e),this._e.emit("play"),this}},{key:"pause",value:function(){return this._e.emit("pause"),this}},{key:"disable",value:function(){return this.disabled=!0,this}},{key:"enable",value:function(){return this.disabled=!1,this}},{key:"on",value:function(e,t){return this._e.on(e,t),this}},{key:"isType",value:function(e){return this.settings.type===e}},{key:"settings",get:function(){return this._o},set:function(e){f(e)?this._o=e:r("Options must be an `object` instance.")}},{key:"index",get:function(){return this._i},set:function(e){this._i=p(e)}},{key:"type",get:function(){return this.settings.type}},{key:"disabled",get:function(){return this._d},set:function(e){this._d=!!e}}]),e}();function w(){return(new Date).getTime()}function _(e,t,n){var i=void 0,r=void 0,o=void 0,a=void 0,s=0;n||(n={});var l=function(){s=!1===n.leading?0:w(),i=null,a=e.apply(r,o),i||(r=o=null)},c=function(){var c=w();s||!1!==n.leading||(s=c);var u=t-(c-s);return r=this,o=arguments,u<=0||u>t?(i&&(clearTimeout(i),i=null),s=c,a=e.apply(r,o),i||(r=o=null)):i||!1===n.trailing||(i=setTimeout(l,u)),a};return c.cancel=function(){clearTimeout(i),s=0,i=r=o=null},c}var S={ltr:["marginLeft","marginRight"],rtl:["marginRight","marginLeft"]};function C(e){if(e&&e.parentNode){for(var t=e.parentNode.firstChild,n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}return[]}function E(e){return!!(e&&e instanceof window.HTMLElement)}var D=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a(this,e),this.listeners=t}return s(e,[{key:"on",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]&&arguments[3];d(e)&&(e=[e]);for(var r=0;r<e.length;r++)this.listeners[e[r]]=n,t.addEventListener(e[r],this.listeners[e[r]],i)}},{key:"off",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];d(e)&&(e=[e]);for(var i=0;i<e.length;i++)t.removeEventListener(e[i],this.listeners[e[i]],n)}},{key:"destroy",value:function(){delete this.listeners}}]),e}();var A=["ltr","rtl"],P={">":"<","<":">","=":"="};function M(e,t){return{modify:function(e){return t.Direction.is("rtl")?-e:e}}}function j(e,t){return{modify:function(n){return n+t.Gaps.value*e.index}}}function O(e,t){return{modify:function(e){return e+t.Clones.grow/2}}}function L(e,t){return{modify:function(n){if(e.settings.focusAt>=0){var i=t.Peek.value;return f(i)?n-i.before:n-i}return n}}}function z(e,t){return{modify:function(n){var i=t.Gaps.value,r=t.Sizes.width,o=e.settings.focusAt,a=t.Sizes.slideWidth;return"center"===o?n-(r/2-a/2):n-a*o-i*o}}}var N=!1;try{var T=Object.defineProperty({},"passive",{get:function(){N=!0}});window.addEventListener("testPassive",null,T),window.removeEventListener("testPassive",null,T)}catch(e){}var U=N,F=["touchstart","mousedown"],B=["touchmove","mousemove"],I=["touchend","touchcancel","mouseup","mouseleave"],R=["mousedown","mousemove","mouseup","mouseleave"];function H(e){return f(e)?(t=e,Object.keys(t).sort().reduce((function(e,n){return e[n]=t[n],e[n],e}),{})):(r("Breakpoints option must be an object"),{});var t}var V={Html:function(e,t){var n={mount:function(){this.root=e.selector,this.track=this.root.querySelector('[data-glide-el="track"]'),this.slides=Array.prototype.slice.call(this.wrapper.children).filter((function(t){return!t.classList.contains(e.settings.classes.cloneSlide)}))}};return v(n,"root",{get:function(){return n._r},set:function(e){d(e)&&(e=document.querySelector(e)),E(e)?n._r=e:r("Root element must be a existing Html node")}}),v(n,"track",{get:function(){return n._t},set:function(e){E(e)?n._t=e:r('Could not find track element. Please use [data-glide-el="track"] attribute.')}}),v(n,"wrapper",{get:function(){return n.track.children[0]}}),n},Translate:function(e,t,n){var i={set:function(n){var i=function(e,t,n){var i=[j,O,L,z].concat(e._t,[M]);return{mutate:function(o){for(var a=0;a<i.length;a++){var s=i[a];h(s)&&h(s().modify)?o=s(e,t,n).modify(o):r("Transformer should be a function that returns an object with `modify()` method")}return o}}}(e,t).mutate(n);t.Html.wrapper.style.transform="translate3d("+-1*i+"px, 0px, 0px)"},remove:function(){t.Html.wrapper.style.transform=""}};return n.on("move",(function(r){var o=t.Gaps.value,a=t.Sizes.length,s=t.Sizes.slideWidth;return e.isType("carousel")&&t.Run.isOffset("<")?(t.Transition.after((function(){n.emit("translate.jump"),i.set(s*(a-1))})),i.set(-s-o*a)):e.isType("carousel")&&t.Run.isOffset(">")?(t.Transition.after((function(){n.emit("translate.jump"),i.set(0)})),i.set(s*a+o*a)):i.set(r.movement)})),n.on("destroy",(function(){i.remove()})),i},Transition:function(e,t,n){var i=!1,r={compose:function(t){var n=e.settings;return i?t+" 0ms "+n.animationTimingFunc:t+" "+this.duration+"ms "+n.animationTimingFunc},set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";t.Html.wrapper.style.transition=this.compose(e)},remove:function(){t.Html.wrapper.style.transition=""},after:function(e){setTimeout((function(){e()}),this.duration)},enable:function(){i=!1,this.set()},disable:function(){i=!0,this.set()}};return v(r,"duration",{get:function(){var n=e.settings;return e.isType("slider")&&t.Run.offset?n.rewindDuration:n.animationDuration}}),n.on("move",(function(){r.set()})),n.on(["build.before","resize","translate.jump"],(function(){r.disable()})),n.on("run",(function(){r.enable()})),n.on("destroy",(function(){r.remove()})),r},Direction:function(e,t,n){var i={mount:function(){this.value=e.settings.direction},resolve:function(e){var t=e.slice(0,1);return this.is("rtl")?e.split(t).join(P[t]):e},is:function(e){return this.value===e},addClass:function(){t.Html.root.classList.add(e.settings.classes.direction[this.value])},removeClass:function(){t.Html.root.classList.remove(e.settings.classes.direction[this.value])}};return v(i,"value",{get:function(){return i._v},set:function(e){A.indexOf(e)>-1?i._v=e:r("Direction value must be `ltr` or `rtl`")}}),n.on(["destroy","update"],(function(){i.removeClass()})),n.on("update",(function(){i.mount()})),n.on(["build.before","update"],(function(){i.addClass()})),i},Peek:function(e,t,n){var i={mount:function(){this.value=e.settings.peek}};return v(i,"value",{get:function(){return i._v},set:function(e){f(e)?(e.before=p(e.before),e.after=p(e.after)):e=p(e),i._v=e}}),v(i,"reductor",{get:function(){var t=i.value,n=e.settings.perView;return f(t)?t.before/n+t.after/n:2*t/n}}),n.on(["resize","update"],(function(){i.mount()})),i},Sizes:function(e,t,n){var i={setupSlides:function(){for(var e=this.slideWidth+"px",n=t.Html.slides,i=0;i<n.length;i++)n[i].style.width=e},setupWrapper:function(e){t.Html.wrapper.style.width=this.wrapperSize+"px"},remove:function(){for(var e=t.Html.slides,n=0;n<e.length;n++)e[n].style.width="";t.Html.wrapper.style.width=""}};return v(i,"length",{get:function(){return t.Html.slides.length}}),v(i,"width",{get:function(){return t.Html.root.offsetWidth}}),v(i,"wrapperSize",{get:function(){return i.slideWidth*i.length+t.Gaps.grow+t.Clones.grow}}),v(i,"slideWidth",{get:function(){return i.width/e.settings.perView-t.Peek.reductor-t.Gaps.reductor}}),n.on(["build.before","resize","update"],(function(){i.setupSlides(),i.setupWrapper()})),n.on("destroy",(function(){i.remove()})),i},Gaps:function(e,t,n){var i={apply:function(e){for(var n=0,i=e.length;n<i;n++){var r=e[n].style,o=t.Direction.value;r[S[o][0]]=0!==n?this.value/2+"px":"",n!==e.length-1?r[S[o][1]]=this.value/2+"px":r[S[o][1]]=""}},remove:function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t].style;i.marginLeft="",i.marginRight=""}}};return v(i,"value",{get:function(){return p(e.settings.gap)}}),v(i,"grow",{get:function(){return i.value*(t.Sizes.length-1)}}),v(i,"reductor",{get:function(){var t=e.settings.perView;return i.value*(t-1)/t}}),n.on(["build.after","update"],_((function(){i.apply(t.Html.wrapper.children)}),30)),n.on("destroy",(function(){i.remove(t.Html.wrapper.children)})),i},Move:function(e,t,n){var i={mount:function(){this._o=0},make:function(){var e=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.offset=i,n.emit("move",{movement:this.value}),t.Transition.after((function(){n.emit("move.after",{movement:e.value})}))}};return v(i,"offset",{get:function(){return i._o},set:function(e){i._o=m(e)?0:p(e)}}),v(i,"translate",{get:function(){return t.Sizes.slideWidth*e.index}}),v(i,"value",{get:function(){var e=this.offset,n=this.translate;return t.Direction.is("rtl")?n+e:n-e}}),n.on(["build.before","run"],(function(){i.make()})),i},Clones:function(e,t,n){var i={mount:function(){this.items=[],e.isType("carousel")&&(this.items=this.collect())},collect:function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],i=t.Html.slides,r=e.settings,o=r.perView,a=r.classes,s=+!!e.settings.peek,l=o+s,c=i.slice(0,l),u=i.slice(-l),p=0;p<Math.max(1,Math.floor(o/i.length));p++){for(var d=0;d<c.length;d++){var f=c[d].cloneNode(!0);f.classList.add(a.cloneSlide),n.push(f)}for(var h=0;h<u.length;h++){var m=u[h].cloneNode(!0);m.classList.add(a.cloneSlide),n.unshift(m)}}return n},append:function(){for(var e=this.items,n=t.Html,i=n.wrapper,r=n.slides,o=Math.floor(e.length/2),a=e.slice(0,o).reverse(),s=e.slice(o,e.length),l=t.Sizes.slideWidth+"px",c=0;c<s.length;c++)i.appendChild(s[c]);for(var u=0;u<a.length;u++)i.insertBefore(a[u],r[0]);for(var p=0;p<e.length;p++)e[p].style.width=l},remove:function(){for(var e=this.items,n=0;n<e.length;n++)t.Html.wrapper.removeChild(e[n])}};return v(i,"grow",{get:function(){return(t.Sizes.slideWidth+t.Gaps.value)*i.items.length}}),n.on("update",(function(){i.remove(),i.mount(),i.append()})),n.on("build.before",(function(){e.isType("carousel")&&i.append()})),n.on("destroy",(function(){i.remove()})),i},Resize:function(e,t,n){var i=new D,r={mount:function(){this.bind()},bind:function(){i.on("resize",window,_((function(){n.emit("resize")}),e.settings.throttle))},unbind:function(){i.off("resize",window)}};return n.on("destroy",(function(){r.unbind(),i.destroy()})),r},Build:function(e,t,n){var i={mount:function(){n.emit("build.before"),this.typeClass(),this.activeClass(),n.emit("build.after")},typeClass:function(){t.Html.root.classList.add(e.settings.classes[e.settings.type])},activeClass:function(){var n=e.settings.classes,i=t.Html.slides[e.index];i&&(i.classList.add(n.activeSlide),C(i).forEach((function(e){e.classList.remove(n.activeSlide)})))},removeClasses:function(){var n=e.settings.classes;t.Html.root.classList.remove(n[e.settings.type]),t.Html.slides.forEach((function(e){e.classList.remove(n.activeSlide)}))}};return n.on(["destroy","update"],(function(){i.removeClasses()})),n.on(["resize","update"],(function(){i.mount()})),n.on("move.after",(function(){i.activeClass()})),i},Run:function(e,t,n){var i={mount:function(){this._o=!1},make:function(i){var r=this;e.disabled||(e.disable(),this.move=i,n.emit("run.before",this.move),this.calculate(),n.emit("run",this.move),t.Transition.after((function(){r.isStart()&&n.emit("run.start",r.move),r.isEnd()&&n.emit("run.end",r.move),(r.isOffset("<")||r.isOffset(">"))&&(r._o=!1,n.emit("run.offset",r.move)),n.emit("run.after",r.move),e.enable()})))},calculate:function(){var t=this.move,n=this.length,i=t.steps,o=t.direction,a="number"==typeof p(i)&&0!==p(i);switch(o){case">":">"===i?e.index=n:this.isEnd()?e.isType("slider")&&!e.settings.rewind||(this._o=!0,e.index=0):a?e.index+=Math.min(n-e.index,-p(i)):e.index++;break;case"<":"<"===i?e.index=0:this.isStart()?e.isType("slider")&&!e.settings.rewind||(this._o=!0,e.index=n):a?e.index-=Math.min(e.index,p(i)):e.index--;break;case"=":e.index=i;break;default:r("Invalid direction pattern ["+o+i+"] has been used")}},isStart:function(){return 0===e.index},isEnd:function(){return e.index===this.length},isOffset:function(e){return this._o&&this.move.direction===e}};return v(i,"move",{get:function(){return this._m},set:function(e){var t=e.substr(1);this._m={direction:e.substr(0,1),steps:t?p(t)?p(t):t:0}}}),v(i,"length",{get:function(){var n=e.settings,i=t.Html.slides.length;return e.isType("slider")&&"center"!==n.focusAt&&n.bound?i-1-(p(n.perView)-1)+p(n.focusAt):i-1}}),v(i,"offset",{get:function(){return this._o}}),i},Swipe:function(e,t,n){var i=new D,r=0,o=0,a=0,s=!1,l=!!U&&{passive:!0},c={mount:function(){this.bindSwipeStart()},start:function(t){if(!s&&!e.disabled){this.disable();var i=this.touches(t);r=null,o=p(i.pageX),a=p(i.pageY),this.bindSwipeMove(),this.bindSwipeEnd(),n.emit("swipe.start")}},move:function(i){if(!e.disabled){var s=e.settings,l=s.touchAngle,c=s.touchRatio,u=s.classes,d=this.touches(i),f=p(d.pageX)-o,h=p(d.pageY)-a,m=Math.abs(f<<2),g=Math.abs(h<<2),b=Math.sqrt(m+g),v=Math.sqrt(g);if(!(180*(r=Math.asin(v/b))/Math.PI<l))return!1;i.stopPropagation(),t.Move.make(f*parseFloat(c)),t.Html.root.classList.add(u.dragging),n.emit("swipe.move")}},end:function(i){if(!e.disabled){var a=e.settings,s=this.touches(i),l=this.threshold(i),c=s.pageX-o,u=180*r/Math.PI,d=Math.round(c/t.Sizes.slideWidth);this.enable(),c>l&&u<a.touchAngle?(a.perTouch&&(d=Math.min(d,p(a.perTouch))),t.Direction.is("rtl")&&(d=-d),t.Run.make(t.Direction.resolve("<"+d))):c<-l&&u<a.touchAngle?(a.perTouch&&(d=Math.max(d,-p(a.perTouch))),t.Direction.is("rtl")&&(d=-d),t.Run.make(t.Direction.resolve(">"+d))):t.Move.make(),t.Html.root.classList.remove(a.classes.dragging),this.unbindSwipeMove(),this.unbindSwipeEnd(),n.emit("swipe.end")}},bindSwipeStart:function(){var n=this,r=e.settings;r.swipeThreshold&&i.on(F[0],t.Html.wrapper,(function(e){n.start(e)}),l),r.dragThreshold&&i.on(F[1],t.Html.wrapper,(function(e){n.start(e)}),l)},unbindSwipeStart:function(){i.off(F[0],t.Html.wrapper,l),i.off(F[1],t.Html.wrapper,l)},bindSwipeMove:function(){var n=this;i.on(B,t.Html.wrapper,_((function(e){n.move(e)}),e.settings.throttle),l)},unbindSwipeMove:function(){i.off(B,t.Html.wrapper,l)},bindSwipeEnd:function(){var e=this;i.on(I,t.Html.wrapper,(function(t){e.end(t)}))},unbindSwipeEnd:function(){i.off(I,t.Html.wrapper)},touches:function(e){return R.indexOf(e.type)>-1?e:e.touches[0]||e.changedTouches[0]},threshold:function(t){var n=e.settings;return R.indexOf(t.type)>-1?n.dragThreshold:n.swipeThreshold},enable:function(){return s=!1,t.Transition.enable(),this},disable:function(){return s=!0,t.Transition.disable(),this}};return n.on("build.after",(function(){t.Html.root.classList.add(e.settings.classes.swipeable)})),n.on("destroy",(function(){c.unbindSwipeStart(),c.unbindSwipeMove(),c.unbindSwipeEnd(),i.destroy()})),c},Images:function(e,t,n){var i=new D,r={mount:function(){this.bind()},bind:function(){i.on("dragstart",t.Html.wrapper,this.dragstart)},unbind:function(){i.off("dragstart",t.Html.wrapper)},dragstart:function(e){e.preventDefault()}};return n.on("destroy",(function(){r.unbind(),i.destroy()})),r},Anchors:function(e,t,n){var i=new D,r=!1,o=!1,a={mount:function(){this._a=t.Html.wrapper.querySelectorAll("a"),this.bind()},bind:function(){i.on("click",t.Html.wrapper,this.click)},unbind:function(){i.off("click",t.Html.wrapper)},click:function(e){o&&(e.stopPropagation(),e.preventDefault())},detach:function(){if(o=!0,!r){for(var e=0;e<this.items.length;e++)this.items[e].draggable=!1,this.items[e].setAttribute("data-href",this.items[e].getAttribute("href")),this.items[e].removeAttribute("href");r=!0}return this},attach:function(){if(o=!1,r){for(var e=0;e<this.items.length;e++)this.items[e].draggable=!0,this.items[e].setAttribute("href",this.items[e].getAttribute("data-href"));r=!1}return this}};return v(a,"items",{get:function(){return a._a}}),n.on("swipe.move",(function(){a.detach()})),n.on("swipe.end",(function(){t.Transition.after((function(){a.attach()}))})),n.on("destroy",(function(){a.attach(),a.unbind(),i.destroy()})),a},Controls:function(e,t,n){var i=new D,r=!!U&&{passive:!0},o={mount:function(){this._n=t.Html.root.querySelectorAll('[data-glide-el="controls[nav]"]'),this._c=t.Html.root.querySelectorAll('[data-glide-el^="controls"]'),this.addBindings()},setActive:function(){for(var e=0;e<this._n.length;e++)this.addClass(this._n[e].children)},removeActive:function(){for(var e=0;e<this._n.length;e++)this.removeClass(this._n[e].children)},addClass:function(t){var n=e.settings,i=t[e.index];i&&(i.classList.add(n.classes.activeNav),C(i).forEach((function(e){e.classList.remove(n.classes.activeNav)})))},removeClass:function(t){var n=t[e.index];n&&n.classList.remove(e.settings.classes.activeNav)},addBindings:function(){for(var e=0;e<this._c.length;e++)this.bind(this._c[e].children)},removeBindings:function(){for(var e=0;e<this._c.length;e++)this.unbind(this._c[e].children)},bind:function(e){for(var t=0;t<e.length;t++)i.on("click",e[t],this.click),i.on("touchstart",e[t],this.click,r)},unbind:function(e){for(var t=0;t<e.length;t++)i.off(["click","touchstart"],e[t])},click:function(e){e.preventDefault(),t.Run.make(t.Direction.resolve(e.currentTarget.getAttribute("data-glide-dir")))}};return v(o,"items",{get:function(){return o._c}}),n.on(["mount.after","move.after"],(function(){o.setActive()})),n.on("destroy",(function(){o.removeBindings(),o.removeActive(),i.destroy()})),o},Keyboard:function(e,t,n){var i=new D,r={mount:function(){e.settings.keyboard&&this.bind()},bind:function(){i.on("keyup",document,this.press)},unbind:function(){i.off("keyup",document)},press:function(e){39===e.keyCode&&t.Run.make(t.Direction.resolve(">")),37===e.keyCode&&t.Run.make(t.Direction.resolve("<"))}};return n.on(["destroy","update"],(function(){r.unbind()})),n.on("update",(function(){r.mount()})),n.on("destroy",(function(){i.destroy()})),r},Autoplay:function(e,t,n){var i=new D,r={mount:function(){this.start(),e.settings.hoverpause&&this.bind()},start:function(){var n=this;e.settings.autoplay&&m(this._i)&&(this._i=setInterval((function(){n.stop(),t.Run.make(">"),n.start()}),this.time))},stop:function(){this._i=clearInterval(this._i)},bind:function(){var e=this;i.on("mouseover",t.Html.root,(function(){e.stop()})),i.on("mouseout",t.Html.root,(function(){e.start()}))},unbind:function(){i.off(["mouseover","mouseout"],t.Html.root)}};return v(r,"time",{get:function(){var n=t.Html.slides[e.index].getAttribute("data-glide-autoplay");return p(n||e.settings.autoplay)}}),n.on(["destroy","update"],(function(){r.unbind()})),n.on(["run.before","pause","destroy","swipe.start","update"],(function(){r.stop()})),n.on(["run.after","play","swipe.end"],(function(){r.start()})),n.on("update",(function(){r.mount()})),n.on("destroy",(function(){i.destroy()})),r},Breakpoints:function(e,t,n){var i=new D,r=e.settings,o=H(r.breakpoints),a=l({},r),s={match:function(e){if(void 0!==window.matchMedia)for(var t in e)if(e.hasOwnProperty(t)&&window.matchMedia("(max-width: "+t+"px)").matches)return e[t];return a}};return l(r,s.match(o)),i.on("resize",window,_((function(){e.settings=x(r,s.match(o))}),e.settings.throttle)),n.on("update",(function(){o=H(o),a=l({},r)})),n.on("destroy",(function(){i.off("resize",window)})),s}},G=function(e){function t(){return a(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),s(t,[{key:"mount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return c(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"mount",this).call(this,l({},V,e))}}]),t}(y);document.querySelectorAll(".glide").forEach((function(e){return new G(e,{type:"carousel"}).mount()}))},5:function(e,t,n){n(26),n(28),n(29),e.exports=n(4)},6:function(e,t,n){"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.a=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"onBurgerButtonClick",(function(e){e.preventDefault(),n.isProfileActive?(n.authList.classList.remove("page-header__auth-list--active"),n.isProfileActive=!1):n.mainMenu.classList.toggle("main-menu--active"),n.burgerButton.classList.toggle("main-menu__burger-icon--active"),n.profileButton&&n.profileButton.classList.toggle("page-header__auth-profile--hide")})),i(this,"onProfileButtonClick",(function(e){e.preventDefault(),n.isProfileActive||(n.authList.classList.add("page-header__auth-list--active"),n.burgerButton.classList.add("main-menu__burger-icon--active"),n.isProfileActive=!0,n.profileButton.classList.add("page-header__auth-profile--hide"))})),t.mainMenu?this.mainMenu=t.mainMenu:console.error("Expected burgerButton(node) inside constructor object but not received"),t.burgerButton?(this.burgerButton=t.burgerButton,this.burgerButton.addEventListener("click",this.onBurgerButtonClick)):console.error("Expected burgerButton(node) inside constructor object but not received"),t.profileButton?(this.profileButton=t.profileButton,this.profileButton.addEventListener("click",this.onProfileButtonClick)):this.profileButton=void 0,this.isProfileActive=!1,this.authList=t.authList}},7:function(e,t,n){var i=n(2),r=n(8);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1},a=(i(e.i,r,o),r.locals?r.locals:{});e.exports=a},8:function(e,t,n){var i=n(1),r=n(3),o=n(9),a=n(10),s=n(11),l=n(12),c=n(13),u=n(14),p=n(15),d=n(16),f=n(17),h=n(18),m=n(19),g=n(20);t=i(!1);var b=r(o),v=r(a),x=r(s,{hash:"#webfont"}),k=r(l),y=r(c),w=r(u,{hash:"#webfont"}),_=r(p),S=r(d),C=r(f,{hash:"#webfont"}),E=r(h),D=r(m),A=r(g,{hash:"#webfont"});t.push([e.i,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{margin:0.67em 0;font-size:2em}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}@font-face{font-weight:normal;font-family:"Montserrat";font-style:normal;src:url('+b+");src:url("+b+') format("woff"),url('+v+') format("truetype"),url('+x+') format("svg")}@font-face{font-weight:bold;font-family:"Montserrat";font-style:normal;src:url('+k+");src:url("+k+') format("woff"),url('+y+') format("truetype"),url('+w+') format("svg")}@font-face{font-weight:normal;font-family:"Quicksand";font-style:normal;src:url('+_+");src:url("+_+') format("woff"),url('+S+') format("truetype"),url('+C+') format("svg")}@font-face{font-weight:bold;font-family:"Quicksand";font-style:normal;src:url('+E+");src:url("+E+') format("woff"),url('+D+') format("truetype"),url('+A+') format("svg")}body{color:#1f2041;font-size:14px;font-family:"Quicksand", "Montserrat", "Arial", sans-serif}.container{position:relative;width:80.5556%;min-width:320px;max-width:1920px;margin:0 auto;padding:0 10px}@media (max-width: 1300px){.container{width:90.5556%}}@media (max-width: 425px){.container{width:auto;margin:0;padding:0}}\n',""]),e.exports=t},9:function(e,t,n){e.exports=n.p+"fonts/Montserrat-Regular-ec92d31.woff"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLnR0ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9Nb250c2VycmF0LUJvbGQud29mZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLnR0ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9wYWdlL3Jvb21zL3Jvb21zLnNjc3M/ZGNkNSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZS9yb29tcy9yb29tcy5zY3NzIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC50dGYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC5mb250LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jaGVja2JveC9jaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZS9yb29tcy9yb29tcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9idXR0b24vYXJyb3cuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2lucHV0L2V4cGFuZC1tb3JlLnN2ZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2dsb2JhbC93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZHJvcC1kb3duL2Ryb3AtZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9oZWFkZXIvdXNlci5zdmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2suZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2RlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmRhdGUuZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5udW1lcmljLmV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsaWRhdG9yL2xpYi9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvYXJyb3ctYmFjay5zdmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvdXRpbC9hc3NlcnRTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcmF0ZWJ0bi9zdGFyLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yYXRlYnRuL3N0YXItYWN0aXZlLnBuZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm91aXNsaWRlci9kaXN0cmlidXRlL25vdWlzbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dudW1iL3dOdW1iLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3Vpc2xpZGVyL2Rpc3RyaWJ1dGUvbm91aXNsaWRlci5taW4uY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2hvdGVsLWNhcmQvZXhwYW5kLW1vcmUucG5nIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NoZWNrYm94L2V4cGFuZC1tb3JlLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wYWdpbmF0aW9uL2Fycm93LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yYW5nZS1zbGlkZXIvcmFuZ2Utc2xpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZ2xpZGVqcy9nbGlkZS9kaXN0L2dsaWRlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ob3RlbC1jYXJkL2hvdGVsLWNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYWluLW1lbnUvbWFpbi1tZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS9pbmRleC5zY3NzP2EwMTkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtUmVndWxhci53b2ZmIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsIl9pIiwicHVzaCIsImFwaSIsImRlZmF1bHQiLCJvcHRpb25zIiwiZXhwb3J0ZWQiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwibW9kdWxlc1RvRG9tIiwicGFydCIsImNzcyIsIm1lZGlhIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwib2JqIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImJhc2UiLCJuZXdMaXN0IiwiaiIsIkV4cGFuZGFibGVDaGVja2JveCIsImV4cGFuZGFibGVCdG4iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJleHBhbmRhYmxlTGlzdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblRvZ2dsZUhpZGUiLCJjb25zb2xlIiwiZXJyb3IiLCJpc0hpZGUiLCJjb250YWlucyIsIkRhdGVQaWNrZXIiLCJwYXJlbnROb2RlSWQiLCJkYXRlUGlja2VySW5wdXRJZCIsImlucHV0UGxhY2Vob2xkZXIiLCJyZW5kZXJDYWxlbmRhciIsImRyb3BEb3duT3B0aW9ucyIsImNvbnRhaW5lciIsImlucHV0IiwiY291bnRFbGVtZW50cyIsImNvdW50R3JvdXBOYW1lIiwic3RhcnRWYWx1ZSIsImNvdW50R3JvdXBWaWV3IiwiYmVkcm9vbXMiLCJjb3VudGVyIiwidmlld3MiLCJiZWQiLCJiYXRoIiwicGxhY2Vob2xkZXIiLCJEcm9wRG93biIsImluaXQiLCJkcm9wRG93bkd1ZXN0T3B0aW9ucyIsImd1ZXN0IiwiY2hpbGQiLCJtYWluTWVudURvbU5vZGUiLCJtYWluTWVudSIsImJ1cmdlckJ1dHRvbiIsImF1dGhMaXN0IiwicHJvZmlsZUJ1dHRvbiIsIk1haW5NZW51IiwiZXZhbCIsImdldEh0bWxFbGVtZW50IiwidGFnTmFtZSIsImNsYXNzTmFtZSIsInRleHQiLCJlbGVtZW50IiwiYWRkIiwidGV4dENvbnRlbnQiLCJkZWNsT2ZOdW0iLCJudW1iZXIiLCJ0aXRsZXMiLCJzb21lIiwibWluIiwibWF4IiwibWluVmFsdWUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJkcm9wRG93blBhcmVudCIsIm9uQ2xpY2tIaWRlIiwib25QcmVzc0hpZGUiLCJpc1BpblNob3ciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xlYXJCdG4iLCJldnQiLCJpc0lucHV0Q2xpY2siLCJpc0NhbGVuZGFyQ2xpY2siLCJoaWRlIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwiZGlzY2FyZENvdW50ZXIiLCJkaXNjYXJkVmlld0NvdW50ZXIiLCJoaWRlQ2xlYXJCdG4iLCJxdWVyeVNlbGVjdG9yQWxsIiwid29yZE9mTnVtIiwiY3VycmVudENvdW50ZXJHcm91cCIsImN1cnJlbnRDb3VudGVyIiwiY3VycmVudFdvcmQiLCJzbGljZSIsInNwbGl0V29yZE9mTnVtIiwic3BsaXQiLCJ0cmltIiwiY291bnRJdGVtIiwiY291bnRJdGVtTmFtZSIsImNvdW50ZXJNZW51IiwiY291bnRJdGVtTWludXMiLCJ0eXBlIiwiY291bnRJdGVtVmlldyIsImNvdW50SXRlbVBsdXMiLCJncm91cFZpZXciLCJyZW5kZXJWaWV3Q291bnQiLCJldmVyeSIsIm1vZGlmaWVkQ291bnRFbGVtZW50cyIsImdldE1vZGlmaWVkQ291bnRFbGVtZW50cyIsImRyb3BEb3duUGFyZW50V3JhcCIsImNvdW50TGlzdCIsImRyb3BEb3duQ29udHJvbCIsIm9uQ2xpY2tDbGVhciIsImFjY2VwdEJ0biIsImNvdW50TGlzdEZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImdldENvdW50SXRlbSIsImlzSGlkZUNvbnRyb2wiLCJoYXNIYXZlU3RhcnRWYWx1ZSIsInJlbmRlclN0YXJ0Q291bnQiLCJzaG93IiwiaW5wdXRWaWV3cyIsIklucHV0bWFzayIsImV4dGVuZERlZmluaXRpb25zIiwiQSIsInZhbGlkYXRvciIsImNhc2luZyIsImV4dGVuZEFsaWFzZXMiLCJjc3N1bml0IiwicmVnZXgiLCJ1cmwiLCJhdXRvVW5tYXNrIiwiaXAiLCJtYXNrIiwiZGVmaW5pdGlvbnMiLCJjaHJzIiwibWFza3NldCIsInBvcyIsInN0cmljdCIsIm9wdHMiLCJidWZmZXIiLCJSZWdFeHAiLCJ0ZXN0Iiwib25Vbk1hc2siLCJtYXNrZWRWYWx1ZSIsInVubWFza2VkVmFsdWUiLCJpbnB1dG1vZGUiLCJlbWFpbCIsImdyZWVkeSIsIm9uQmVmb3JlUGFzdGUiLCJwYXN0ZWRWYWx1ZSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIm1hYyIsInZpbiIsIlYiLCJjbGVhckluY29tcGxldGUiLCJpc1dpbmRvdyIsImlzVmFsaWRFbGVtZW50IiwiZWxlbSIsIkVsZW1lbnQiLCJEZXBlbmRlbmN5TGliIiwibm9kZU5hbWUiLCJ1bmRlZmluZWQiLCJldmVudFJlZ2lzdHJ5Iiwib24iLCJldmVudHMiLCJoYW5kbGVyIiwiYWRkRXZlbnQiLCJldiIsIm5hbWVzcGFjZSIsImF0dGFjaEV2ZW50IiwiX2V2ZW50cyIsImVuZHgiLCJuc0V2ZW50Iiwib2ZmIiwicmVtb3ZlRXZlbnQiLCJkZXRhY2hFdmVudCIsIm5tc3AiLCJzcGxpY2UiLCJpbmRleE9mIiwicmVzb2x2ZU5hbWVzcGFjZSIsImhuZHgiLCJobmRMIiwiZXZ0cyIsImV2TmR4Iiwib2ZmRXZlbnRzIiwib2ZmRXZlbnRzTCIsInRyaWdnZXIiLCJldm50IiwicGFyYW1zIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJhcmd1bWVudHMiLCJjcmVhdGVFdmVudCIsIkN1c3RvbUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZXh0ZW5kIiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiZmlyZUV2ZW50IiwiRXZlbnQiLCJhcHBseSIsImlzRnVuY3Rpb24iLCJub29wIiwiaXNBcnJheSIsIkFycmF5IiwiaW5BcnJheSIsImFyciIsImxlbiIsInZhbEhvb2tzIiwiaXNQbGFpbk9iamVjdCIsIm5vZGVUeXBlIiwiY29uc3RydWN0b3IiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJlYWNoIiwiY2FsbGJhY2siLCJsdHlwZSIsImlzQXJyYXlsaWtlIiwib3duZXIiLCJfX2RhdGEiLCJldmVudCIsIiQiLCJkZXBlbmRlbmN5TGliIiwiZm9ybWF0Q29kZSIsIkRhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImRkIiwicGFkIiwiZGRkIiwiZGRkZCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJtbSIsIm1tbSIsIm1tbW0iLCJ5eSIsInNldEZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJ5eXl5IiwiaCIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJoaCIsImhoaCIsIkgiLCJISCIsIkhISCIsIk0iLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsIk1NIiwic3MiLCJzZXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsInNldE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIkwiLCJ0dCIsIlQiLCJUVCIsIloiLCJTIiwiZm9ybWF0QWxpYXMiLCJpc29EYXRlIiwiaXNvVGltZSIsImlzb0RhdGVUaW1lIiwiaXNvVXRjRGF0ZVRpbWUiLCJnZXRUb2tlbml6ZXIiLCJ0b2tlbml6ZXIiLCJ0b2tlbnMiLCJuZHgiLCJwYXJzZSIsImZvcm1hdCIsImRhdGVPYmpWYWx1ZSIsInJhdyIsIm1hdGNoIiwiZXhlYyIsImVzY2FwZVJlZ2V4IiwiZGF0ZSIsInZhbCIsIlN0cmluZyIsImFuYWx5c2VNYXNrIiwibWFza1N0cmluZyIsInRhcmdldFByb3AiLCJkYXRlT3BlcmF0aW9uIiwiZGF0ZU9iaiIsImV4dGVuZFByb3BlcnR5IiwiY29ycmVjdGVkVmFsdWUiLCJlbnRlcmVkUGFydCIsInNldFZhbHVlIiwicGFyc2VJbnQiLCJkYXRldGltZSIsImkxOG4iLCJvcmRpbmFsU3VmZml4IiwiaW5wdXRGb3JtYXQiLCJkaXNwbGF5Rm9ybWF0Iiwib3V0cHV0Rm9ybWF0IiwiZGF5TmFtZXMiLCJtb250aE5hbWVzIiwicG9zdFZhbGlkYXRpb24iLCJjdXJyZW50UmVzdWx0IiwicmVzdWx0IiwiZGF0ZVBhcnRzIiwiZ2V0VGltZSIsImlzRmluaXRlIiwicmF3ZGF5IiwiZGF5IiwicmF3eWVhciIsInJhd21vbnRoIiwibW9udGgiLCJpc1ZhbGlkRGF0ZSIsInJhd1llYXIiLCJtaW5ZZWFyIiwieWVhciIsInN1YnN0ciIsImlzRGF0ZUluUmFuZ2UiLCJyZWZyZXNoRnJvbUJ1ZmZlciIsInN0YXJ0IiwiZW5kIiwib25LZXlEb3duIiwiY2FyZXRQb3MiLCJjdHJsS2V5IiwiUklHSFQiLCJ0b2RheSIsImNoYXJBdCIsImdldFllYXIiLCJpbnB1dG1hc2siLCJfdmFsdWVTZXQiLCJ2YWxpZFBvc2l0aW9ucyIsIm5hdGl2ZURlZiIsInRvVXBwZXJDYXNlIiwiaW5zZXJ0TW9kZSIsInNoaWZ0UG9zaXRpb25zIiwiYXV0b0VzY2FwZSIsInR4dCIsImVzY2FwZWRUeHQiLCJvcHRpb25hbG1hcmtlciIsInF1YW50aWZpZXJtYXJrZXIiLCJncm91cG1hcmtlciIsImFsdGVybmF0b3JtYXJrZXIiLCJudW1lcmljIiwicmVwZWF0IiwiaXNOYU4iLCJpbnRlZ2VyRGlnaXRzIiwiZ3JvdXBTZXBhcmF0b3IiLCJyYWRpeFBvaW50IiwiZGlnaXRzIiwic2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciIsImF1dG9Hcm91cCIsImdyb3VwU2l6ZSIsInNlcHMiLCJtb2QiLCJwb3NpdGlvbkNhcmV0T25DbGljayIsImludGVnZXJPcHRpb25hbCIsImRlZmluaXRpb25TeW1ib2wiLCJudW1lcmljSW5wdXQiLCJkaWdpdHNPcHRpb25hbCIsImRlY2ltYWxQcm90ZWN0IiwicHJlZml4IiwicmFkaXhEZWYiLCJkcSIsInN1ZmZpeCIsImVuZm9yY2VEaWdpdHNPbkJsdXIiLCJhbGxvd01pbnVzIiwibmVnYXRpb25TeW1ib2wiLCJmcm9udCIsImJhY2siLCJyaWdodEFsaWduIiwic3RlcCIsInVubWFza0FzTnVtYmVyIiwiaW5wdXRUeXBlIiwicHJlVmFsaWRhdGlvbiIsImlzU2VsZWN0aW9uIiwiaXNOZWdhdGl2ZSIsImNhcmV0IiwiZG9wb3N0IiwicmFkaXhQb3MiLCJyZXZlcnNlIiwiY2hhckF0UG9zIiwicHJvY2Vzc1ZhbHVlIiwicmFkaXhQb3NpdGlvbiIsInJwYiIsImFkZFJhZGl4IiwicG9zdE1hc2siLCJyYWRpeFNwbGl0IiwiYnVpbGRQb3N0TWFzayIsImppdE1hc2tpbmciLCJjYXJkaW5hbGl0eSIsIm5ld0NhcmV0UG9zIiwicnNsdCIsIm9uQmVmb3JlV3JpdGUiLCJ1bm1hc2tlZCIsInBhcnNlTWluTWF4T3B0aW9ucyIsInBhcnNlRmxvYXQiLCJOYU4iLCJOdW1iZXIiLCJNSU5fVkFMVUUiLCJNQVhfVkFMVUUiLCJpbnRlZ2VyUGFydCIsImVtcHR5Q2hlY2siLCJpbnRlZ2VyTlBhcnQiLCJpc1ZhbGlkIiwiZGVmIiwicHZSYWRpeFNwbGl0IiwiYnVmZmVyVGVtcGxhdGUiLCJfYnVmZmVyIiwicmFkaXgiLCJudWxsYWJsZSIsImlzQ29tcGxldGUiLCJvbkJlZm9yZU1hc2siLCJpbml0aWFsVmFsdWUiLCJ2YWx1ZVBhcnRzIiwiZGVjaW1hbFBhcnQiLCJkaWdpdHNGYWN0b3IiLCJwb3ciLCJyb3VuZCIsInN1YnN0cmluZyIsImFsaWduRGlnaXRzIiwiJGlucHV0IiwiVVAiLCJ1bm1hc2tlZHZhbHVlIiwiRE9XTiIsImN1cnJlbmN5IiwiYWxpYXMiLCJjbGVhck1hc2tPbkxvc3RGb2N1cyIsImRlY2ltYWwiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsImhhc2giLCJuZWVkUXVvdGVzIiwibW9udGhSdXNUcmFuc2xhdGUiLCIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5IiwiMTAiLCIxMSIsIm1vbnRoUmVkdWN0aW9uIiwiZ2V0VHdvRGlnaXROdW1iZXJTdHJpbmciLCJkb21JbmZvIiwiY3VycmVudERhdGUiLCJmaXJzdERhdGUiLCJzZWNvbmREYXRlIiwiZmlyc3REYXkiLCJmaXJzdE1vbnRoIiwiZmlyc3RZZWFyIiwic2Vjb25kRGF5Iiwic2Vjb25kTW9udGgiLCJzZWNvbmRZZWFyIiwidGV4dERhdGUiLCJpc051bWVyaWMiLCJjYWxlbmRhciIsImJvZHkiLCJvbkNsaWNrU2hvd0NhbGVuZGFyIiwib25Fc2NVbnNob3dDYWxlbmRhciIsImlucHV0RGF0ZSIsImFycml2YWxJbnB1dCIsImFycml2YWxJbnB1dERhdGUiLCJnZXRDb252ZXJ0ZURhdGVCeVVzZXJJbnB1dCIsImRhdGVNb3JlVGhpc0RhdGUiLCJjb21wYWlyZURhdGUiLCJzaG93Q2FsZW5kYXIiLCJvbklucHV0RGF0ZUFycml2YWwiLCJhcnJpdmFsRGF0ZSIsInVwZGF0ZUN1cnJlbnREYXRlIiwib25JbnB1dERhdGVEZXBhcnR1cmUiLCJkZXBhcnR1cmVEYXRlIiwiZGF0ZVBpY2tlciIsInNldFRpbWVvdXQiLCJjZWxscyIsImFycml2YWxBcmlhRGF0ZSIsImdldEFyaWFEYXRlQnlEYXRlIiwiZGVwYXJ0dXJlQXJpYURhdGUiLCJpc0RvdWJsZVNlbGVjdCIsImNlbGwiLCJpc0NlbGxTdGFydCIsImdldEF0dHJpYnV0ZSIsImlzQ2VsbEVuZCIsImNlbGxEYXRlIiwiaXNDZWxsRGF0ZU1vcmVUaGFuQXJyaXZhbERhdGUiLCJpc0NlbGxEYXRlTGVzc1RoYW5EZXBhcnR1cmVEYXRlIiwiaXNDZWxsU2VsZWN0IiwiaXNDZWxsU2VsZWN0U3BhY2UiLCJpc0NlbGxTdGFydFNlbGVjdCIsImlzQ2VsbEVuZFNlbGVjdCIsInNlbGVjdERhdGUiLCJzZWxlY3REYXkiLCJzZWxlY3RNb250aCIsInByaW50TWVzc2FnZSIsImRhdGVQaWNrZXJJbnB1dCIsImlzRW5kU2VsZWN0IiwiZGVwYXJ0dXJlSW5wdXQiLCJ1bnNob3dDYWxlbmRhciIsImJsdXIiLCJoYXNEYXRhRnVsbCIsInNob3dBcnJpdmFsTW9udGhDYWxlbmRhciIsInNob3dEZXBhcnR1cmVNb250aENhbGVuZGFyIiwicGlja0RhdGUiLCJjb252ZXJ0ZVBpY2tEYXRlIiwiYXJpYURhdGUiLCJwaWNrQ2VsbCIsImdldENlbGxCeUFyaWFEYXRlIiwiaXNBcnJpdmFsRGF0ZU1vcmUiLCJzaG93RXJyb3JBbmltYXRpb24iLCJjbGVhclNlbGVjdENlbGwiLCJpc0Fycml2YWxDZWxsIiwidG9EYXRlU3RyaW5nIiwiaXNBcnJEYXRlTGVzc0RlcERhdGUiLCJvblN0YXJ0U2VsZWN0UmFuZ2VEYXRlIiwicGFpbnRpbmdTZWxlY3RDZWxsIiwib25DbGVhclNlbGVjdFJhbmdlRGF0ZSIsImlzU3RhcnRTZWxlY3QiLCJpbnB1dEFycml2YWxEYXRlIiwiaXNBcnJpdmFsRGF0ZUZ1bGwiLCJpc1BpY2tEYXRlRnVsbCIsImZvY3VzIiwiZGVwYXJ0dXJlQ2VsbCIsIm9uRW5kU2VsZWN0UmFuZ2VEYXRlIiwic3RhcnREYXRlIiwiYXJyaXZhbENlbGwiLCJkYXRlRW5kIiwidGQiLCJzZWxlY3RZZWFyIiwic2VsZWN0RGF0ZVRleHQiLCJpc0NlbGxEb3VibGVTZWxlY3QiLCJwcmludFJlZHVjdGlvbkRhdGUiLCJhcmlhRGF5IiwiYXJpYU1vbnRoIiwiYXJpYVllYXIiLCJ1c2VyRGF0ZSIsInNwbGl0VXNlckRhdGUiLCJjdXJyZW50WWVhciIsImN1cnJlbnRNb250aCIsImxhc3REYXlDdXJyZW50TW9udGgiLCJsYXN0V2Vla0RheVByZXZNb250aCIsImdldERheSIsIm51bWJlclJvdyIsInZpZXdNb250aCIsIm51bWJlckRheSIsInRhYmxlRnJhZ21lbnQiLCJub3dEYXRlIiwibGFzdERheVByZXZNb250aCIsImdldE51bWJlclJvdyIsInRhYmxlVHIiLCJ2aWV3RGF0ZSIsInRhYmxlVGQiLCJpc05vd0RhdGUiLCJoYXNDdXJyZW50TW9udGgiLCJ2aWV3RGF0ZUF0ciIsImRhdGVQaWNrZXJIdG1sU2VjdGlvbiIsImRhdGVQaWNrZXJIdG1sV3JhcCIsImRhdGVQaWNrZXJIdG1sQ29udHJvbCIsImdldENhbGVuZGFyVG9wQ29udHJvbCIsImRhdGVQaWNrZXJIdG1sVGFibGUiLCJnZXRDYWxlbmRhclRhYmxlIiwiZGF0ZVBpY2tlckh0bWxCb3RDb250cm9sIiwiZ2V0Q2FsZW5kYXJCb3RDb250cm9sIiwiZGF0ZVBpY2tlckh0bWxTbGlkZXJCdG5QcmV2IiwicHJldk1vbnRoRGF0ZSIsImRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuTmV4dCIsIm1vbnRoTmFtZSIsInllYXJOYW1lIiwiZGF0ZVBpY2tlckh0bWxUaXRsZSIsImNhbGVuZGFyVGFibGUiLCJ0SGVhZCIsInRCb2R5IiwidGFibGVUckhlYWQiLCJ0aCIsInRhYmxlRGF0ZSIsImdldENhbGVuZGFyVGFibGVEYXRlIiwib25TZWxlY3REYXRlIiwiaXNBY2NlbnQiLCJjbGlja0hhbmRsZXIiLCJvbkZ1bGxDbGVhckNhbGVuZGFyIiwiYnRuIiwidXBkYXRlQ2FsZW5kYXIiLCJ1cGRhdGVDYWxlbmRhclRpdGxlIiwidXBkYXRlQ2FsZW5kYXJUYWJsZSIsInRpdGxlIiwiY2FsZW5kYXJUYWJsZUJvZHkiLCJnZXRDYWxlbmRhciIsImFycml2YWxJbnB1dElkIiwib25Gb2N1c0Fycml2YWxJbnB1dCIsImRlcGFydHVyZUlucHV0SWQiLCJvbkZvY3VzRGVwYXJ0dXJlSW5wdXQiLCJhcnJpdmFsU3BsaXRCdG5JZCIsImFycml2YWxTcGxpdEJ0biIsImRlcGFydHVyZVNwbGl0QnRuSWQiLCJkZXBhcnR1cmVTcGxpdEJ0biIsInN0ciIsIl9hc3NlcnRTdHJpbmciLCJub19zeW1ib2xzIiwibnVtZXJpY05vU3ltYm9scyIsIl90eXBlb2YiLCJpdGVyYXRvciIsImludmFsaWRUeXBlIiwiVHlwZUVycm9yIiwiVkVSU0lPTiIsInJlbW92ZUVsZW1lbnQiLCJlbCIsInBhcmVudEVsZW1lbnQiLCJpc1NldCIsImEiLCJhZGRDbGFzc0ZvciIsImR1cmF0aW9uIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImxpbWl0IiwiYXNBcnJheSIsImNvdW50RGVjaW1hbHMiLCJudW1TdHIiLCJwaWVjZXMiLCJnZXRQYWdlT2Zmc2V0IiwiZG9jIiwic3VwcG9ydFBhZ2VPZmZzZXQiLCJwYWdlWE9mZnNldCIsImlzQ1NTMUNvbXBhdCIsImNvbXBhdE1vZGUiLCJ4IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsTGVmdCIsInkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsInN1YlJhbmdlUmF0aW8iLCJwYSIsInBiIiwiZnJvbVBlcmNlbnRhZ2UiLCJyYW5nZSIsImdldEoiLCJ0b1N0ZXBwaW5nIiwieFZhbCIsInhQY3QiLCJ2YSIsInZiIiwiYWJzIiwidG9QZXJjZW50YWdlIiwiZ2V0U3RlcCIsInhTdGVwcyIsInNuYXAiLCJiIiwidG8iLCJjbG9zZXN0IiwiaGFuZGxlRW50cnlQb2ludCIsInRoYXQiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsImhhbmRsZVN0ZXBQb2ludCIsInRvdGFsU3RlcHMiLCJ4TnVtU3RlcHMiLCJoaWdoZXN0U3RlcCIsImNlaWwiLCJ0b0ZpeGVkIiwiU3BlY3RydW0iLCJlbnRyeSIsInNpbmdsZVN0ZXAiLCJvcmRlcmVkIiwic29ydCIsImdldE1hcmdpbiIsImZyb21TdGVwcGluZyIsImlzUGVyY2VudGFnZSIsImdldERlZmF1bHRTdGVwIiwiaXNEb3duIiwic2l6ZSIsImdldE5lYXJieVN0ZXBzIiwic3RlcEJlZm9yZSIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJjb252ZXJ0IiwiZGVmYXVsdEZvcm1hdHRlciIsImZyb20iLCJ2YWxpZGF0ZUZvcm1hdCIsImlzVmFsaWRGb3JtYXR0ZXIiLCJ0ZXN0U3RlcCIsInBhcnNlZCIsInRlc3RSYW5nZSIsInNwZWN0cnVtIiwidGVzdFN0YXJ0IiwiaGFuZGxlcyIsInRlc3RTbmFwIiwidGVzdEFuaW1hdGUiLCJhbmltYXRlIiwidGVzdEFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ0ZXN0Q29ubmVjdCIsImNvbm5lY3QiLCJ0ZXN0T3JpZW50YXRpb24iLCJvcnQiLCJ0ZXN0TWFyZ2luIiwibWFyZ2luIiwidGVzdExpbWl0IiwidGVzdFBhZGRpbmciLCJwYWRkaW5nIiwidGVzdERpcmVjdGlvbiIsImRpciIsInRlc3RCZWhhdmlvdXIiLCJ0YXAiLCJkcmFnIiwiZml4ZWQiLCJob3ZlciIsInVuY29uc3RyYWluZWQiLCJ0ZXN0VG9vbHRpcHMiLCJ0b29sdGlwcyIsImZvcm1hdHRlciIsInRlc3RBcmlhRm9ybWF0IiwiYXJpYUZvcm1hdCIsInRlc3RGb3JtYXQiLCJ0ZXN0S2V5Ym9hcmRTdXBwb3J0Iiwia2V5Ym9hcmRTdXBwb3J0IiwidGVzdERvY3VtZW50RWxlbWVudCIsInRlc3RDc3NQcmVmaXgiLCJjc3NQcmVmaXgiLCJ0ZXN0Q3NzQ2xhc3NlcyIsImNzc0NsYXNzZXMiLCJ0ZXN0T3B0aW9ucyIsInRlc3RzIiwiZGlyZWN0aW9uIiwib3JpZW50YXRpb24iLCJiZWhhdmlvdXIiLCJkZWZhdWx0cyIsIm9yaWdpbiIsImhhbmRsZSIsImhhbmRsZUxvd2VyIiwiaGFuZGxlVXBwZXIiLCJ0b3VjaEFyZWEiLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJiYWNrZ3JvdW5kIiwiY29ubmVjdHMiLCJsdHIiLCJydGwiLCJ0ZXh0RGlyZWN0aW9uTHRyIiwidGV4dERpcmVjdGlvblJ0bCIsImRyYWdnYWJsZSIsImFjdGl2ZSIsInRvb2x0aXAiLCJwaXBzIiwicGlwc0hvcml6b250YWwiLCJwaXBzVmVydGljYWwiLCJtYXJrZXIiLCJtYXJrZXJIb3Jpem9udGFsIiwibWFya2VyVmVydGljYWwiLCJtYXJrZXJOb3JtYWwiLCJtYXJrZXJMYXJnZSIsIm1hcmtlclN1YiIsInZhbHVlSG9yaXpvbnRhbCIsInZhbHVlVmVydGljYWwiLCJ2YWx1ZU5vcm1hbCIsInZhbHVlTGFyZ2UiLCJ2YWx1ZVN1YiIsIm1zUHJlZml4IiwibXNUcmFuc2Zvcm0iLCJub1ByZWZpeCIsInRyYW5zZm9ybSIsInRyYW5zZm9ybVJ1bGUiLCJzY29wZSIsIm9yaWdpbmFsT3B0aW9ucyIsInNjb3BlX0Jhc2UiLCJzY29wZV9IYW5kbGVzIiwic2NvcGVfQ29ubmVjdHMiLCJzY29wZV9QaXBzIiwic2NvcGVfVG9vbHRpcHMiLCJzY29wZV9TZWxmIiwiYWRkVGFyZ2V0IiwiYWN0aW9ucyIsIm5hdmlnYXRvciIsInBvaW50ZXJFbmFibGVkIiwibW92ZSIsIm1zUG9pbnRlckVuYWJsZWQiLCJzdXBwb3J0c1Bhc3NpdmUiLCJDU1MiLCJzdXBwb3J0cyIsImdldFN1cHBvcnRzUGFzc2l2ZSIsInNjb3BlX1RhcmdldCIsInNjb3BlX1NwZWN0cnVtIiwic2NvcGVfVmFsdWVzIiwic2NvcGVfTG9jYXRpb25zIiwic2NvcGVfSGFuZGxlTnVtYmVycyIsInNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCIsInNjb3BlX0V2ZW50cyIsInNjb3BlX0RvY3VtZW50Iiwib3duZXJEb2N1bWVudCIsInNjb3BlX0RvY3VtZW50RWxlbWVudCIsInNjb3BlX0JvZHkiLCJzY29wZV9EaXJPZmZzZXQiLCJhZGROb2RlVG8iLCJkaXYiLCJhZGRPcmlnaW4iLCJoYW5kbGVOdW1iZXIiLCJpc1NsaWRlckRpc2FibGVkIiwiaXNIYW5kbGVEaXNhYmxlZCIsImhvcml6b250YWxLZXlzIiwidmVydGljYWxLZXlzIiwibGFyZ2VTdGVwS2V5cyIsImVkZ2VLZXlzIiwiaXNMYXJnZURvd24iLCJpc0xhcmdlVXAiLCJpc1VwIiwiaXNNaW4iLCJpc01heCIsImdldE5leHRTdGVwc0ZvckhhbmRsZSIsInNldEhhbmRsZSIsImV2ZW50S2V5ZG93biIsImFkZENvbm5lY3QiLCJhZGRUb29sdGlwIiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlVG9vbHRpcHMiLCJiaW5kRXZlbnQiLCJ2YWx1ZXMiLCJ1bmVuY29kZWQiLCJmb3JtYXR0ZWRWYWx1ZSIsImlubmVySFRNTCIsImFkZE1hcmtpbmciLCJzcHJlYWQiLCJmaWx0ZXJGdW5jIiwidmFsdWVTaXplQ2xhc3NlcyIsIm1hcmtlclNpemVDbGFzc2VzIiwidmFsdWVPcmllbnRhdGlvbkNsYXNzZXMiLCJtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXMiLCJnZXRDbGFzc2VzIiwic2l6ZUNsYXNzZXMiLCJvZmZzZXQiLCJub2RlIiwiYWRkU3ByZWFkIiwicmVtb3ZlUGlwcyIsImdyaWQiLCJkZW5zaXR5IiwiZ3JvdXAiLCJzdGVwcGVkIiwiaW50ZXJ2YWwiLCJnZXRHcm91cCIsImFycmF5IiwiaW5kZXhlcyIsImZpcnN0SW5SYW5nZSIsImxhc3RJblJhbmdlIiwiaWdub3JlRmlyc3QiLCJpZ25vcmVMYXN0IiwicHJldlBjdCIsInVuc2hpZnQiLCJjdXJyZW50IiwicSIsIm5ld1BjdCIsInBjdERpZmZlcmVuY2UiLCJwY3RQb3MiLCJzdGVwcyIsInJlYWxTdGVwcyIsInN0ZXBTaXplIiwibG93IiwiaGlnaCIsImlzU3RlcHMiLCJnZW5lcmF0ZVNwcmVhZCIsImJhc2VTaXplIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFsdCIsIndpZHRoIiwiaGVpZ2h0IiwibWV0aG9kIiwicGFnZU9mZnNldCIsImV2ZW50VGFyZ2V0IiwidG91Y2giLCJtb3VzZSIsInBvaW50ZXIiLCJpc1RvdWNoT25UYXJnZXQiLCJjaGVja1RvdWNoIiwidGFyZ2V0VG91Y2hlcyIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwidGFyZ2V0VG91Y2giLCJmaW5kIiwiY2hhbmdlZFRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsInBvaW50cyIsImN1cnNvciIsImZpeEV2ZW50IiwiZG9Ob3RSZWplY3QiLCJidXR0b25zIiwiY2FsY1BvaW50IiwibWV0aG9kcyIsImV2ZW50TmFtZSIsInBhc3NpdmUiLCJjYWxjUG9pbnRUb1BlcmNlbnRhZ2UiLCJkb2NFbGVtIiwicHJvcG9zYWwiLCJ1c2VyQWdlbnQiLCJ0b3AiLCJjbGllbnRUb3AiLCJsZWZ0IiwiY2xpZW50TGVmdCIsImRvY3VtZW50TGVhdmUiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnRFbmQiLCJldmVudE1vdmUiLCJhcHBWZXJzaW9uIiwiYnV0dG9uc1Byb3BlcnR5IiwibW92ZW1lbnQiLCJzdGFydENhbGNQb2ludCIsIm1vdmVIYW5kbGVzIiwibG9jYXRpb25zIiwiaGFuZGxlTnVtYmVycyIsImxpc3RlbmVycyIsInNldFppbmRleCIsImV2ZW50U3RhcnQiLCJjaGlsZHJlbiIsInN0b3BQcm9wYWdhdGlvbiIsIm1vdmVFdmVudCIsImVuZEV2ZW50Iiwib3V0RXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZXZlbnRUYXAiLCJjbGlja2VkUG9zaXRpb24iLCJzbWFsbGVzdERpZmZlcmVuY2UiLCJoYW5kbGVQb3NpdGlvbiIsImRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSIsImdldENsb3Nlc3RIYW5kbGUiLCJldmVudEhvdmVyIiwidGFyZ2V0RXZlbnQiLCJuYW1lc3BhY2VkRXZlbnQiLCJ0RXZlbnQiLCJ0TmFtZXNwYWNlIiwiY2hlY2tIYW5kbGVQb3NpdGlvbiIsInJlZmVyZW5jZSIsImxvb2tCYWNrd2FyZCIsImxvb2tGb3J3YXJkIiwiZ2V0VmFsdWUiLCJpblJ1bGVPcmRlciIsInYiLCJ1cHdhcmQiLCJwcm9wb3NhbHMiLCJmIiwic3RhdGUiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJ6SW5kZXgiLCJ0cmFuc2xhdGVSdWxlIiwidXBkYXRlQ29ubmVjdCIsInVwZGF0ZUhhbmRsZVBvc2l0aW9uIiwiY29ubmVjdFdpZHRoIiwic2NhbGVSdWxlIiwicmVzb2x2ZVRvVmFsdWUiLCJ2YWx1ZVNldCIsImZpcmVTZXRFdmVudCIsImlzSW5pdCIsInZhbHVlR2V0IiwibG9jYXRpb24iLCJuZWFyYnlTdGVwcyIsImluY3JlbWVudCIsImRlY3JlbWVudCIsImNvbm5lY3RPcHRpb25zIiwiY29ubmVjdEJhc2UiLCJhZGRFbGVtZW50cyIsImhhbmRsZUJlZm9yZSIsImhhbmRsZUFmdGVyIiwiZXZlbnRIb2xkZXJzIiwiZXZlbnRIb2xkZXIiLCJwb3NpdGlvbnMiLCJub3ciLCJkZXN0cm95Iiwibm9VaVNsaWRlciIsInNldCIsInJlc2V0IiwiX19tb3ZlSGFuZGxlcyIsInVwZGF0ZU9wdGlvbnMiLCJvcHRpb25zVG9VcGRhdGUiLCJ1cGRhdGVBYmxlIiwibmV3T3B0aW9ucyIsIl9fc3BlY3RydW0iLCJ2ZXJzaW9uIiwiRm9ybWF0T3B0aW9ucyIsInN0clJldmVyc2UiLCJzdHJTdGFydHNXaXRoIiwidGhyb3dFcXVhbEVycm9yIiwiRiIsImlzVmFsaWROdW1iZXIiLCJmb3JtYXRUbyIsImRlY2ltYWxzIiwidGhvdXNhbmQiLCJtYXJrIiwiZW5jb2RlciIsImRlY29kZXIiLCJuZWdhdGl2ZUJlZm9yZSIsIm5lZ2F0aXZlIiwiZWRpdCIsInVuZG8iLCJpbnB1dElzTmVnYXRpdmUiLCJpbnB1dFBpZWNlcyIsImlucHV0QmFzZSIsImV4cCIsIm9yaWdpbmFsSW5wdXQiLCJpbnB1dERlY2ltYWxzIiwib3V0cHV0IiwiZm9ybWF0RnJvbSIsInN0ckVuZHNXaXRoIiwicGFzc0FsbCIsImFyZ3MiLCJ3TnVtYiIsImlucHV0T3B0aW9ucyIsIm9wdGlvbk5hbWUiLCJvcHRpb25WYWx1ZSIsImZpbHRlcmVkT3B0aW9ucyIsInZhbGlkYXRlIiwidWEiLCJpZSIsIm1vYmlsZSIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsImllbW9iaWxlIiwiaXBob25lIiwiaW50ZXJuYWwiLCJyZWZyZXNoVmFsdWUiLCJub01hc2tzQ2FjaGUiLCJ1c2VyT3B0aW9ucyIsImlzUlRMIiwicmVzb2x2ZUFsaWFzIiwiYWxpYXNTdHIiLCJhbGlhc0RlZmluaXRpb24iLCJhbGlhc2VzIiwiZ2VuZXJhdGVNYXNrU2V0Iiwibm9jYWNoZSIsImdlbmVyYXRlTWFzayIsIm1ldGFkYXRhIiwicmVnZXhNYXNrIiwicmVwZWF0U3RhcnQiLCJtYXNrc2V0RGVmaW5pdGlvbiIsIm1hc2tkZWZLZXkiLCJtYXNrc0NhY2hlIiwibWFza1Rva2VuIiwiZXhjbHVkZXMiLCJtYXNrTGVuZ3RoIiwiaml0T2Zmc2V0Iiwia2VlcFN0YXRpYyIsImFsdE1hc2siLCJtc2siLCJwb3AiLCJldk5hbWUiLCJpc1N1cHBvcnRlZCIsIm1hc2tTY29wZSIsImFjdGlvbk9iaiIsInVuZG9WYWx1ZSIsIiRlbCIsIm1heExlbmd0aCIsImNvbG9yTWFzayIsIm9yaWdpbmFsUGxhY2Vob2xkZXIiLCJza2lwS2V5UHJlc3NFdmVudCIsInNraXBJbnB1dEV2ZW50IiwiaWdub3JhYmxlIiwibW91c2VFbnRlciIsImdldE1hc2tUZW1wbGF0ZSIsImJhc2VPbklucHV0IiwibWluaW1hbFBvcyIsImluY2x1ZGVNb2RlIiwibm9KaXQiLCJjbGVhck9wdGlvbmFsVGFpbCIsIm5keEludGx6ciIsInRlc3RQb3MiLCJtYXNrVGVtcGxhdGUiLCJnZXRMYXN0VmFsaWRQb3NpdGlvbiIsImdldE1hc2tTZXQiLCJvcHRpb25hbGl0eSIsImdlbmVyYXRlZElucHV0IiwiZGV0ZXJtaW5lVGVzdFRlbXBsYXRlIiwiZ2V0VGVzdHMiLCJsb2NhdG9yIiwiZ2V0UGxhY2Vob2xkZXIiLCJnZXRUZXN0VGVtcGxhdGUiLCJqaXQiLCJuZXdCbG9ja01hcmtlciIsImZuIiwicmVzZXRNYXNrU2V0Iiwic29mdCIsImNsb3Nlc3RUbyIsImJlZm9yZSIsImFmdGVyIiwidmFsaWRzIiwicG9zTmR4IiwicHNOZHgiLCJnZXREZWNpc2lvblRha2VyIiwidHN0IiwiZGVjaXNpb25UYWtlciIsImFsdGVybmF0aW9uIiwiZ2V0TG9jYXRvciIsImFsaWduIiwibWxvYyIsInRzdExvY2F0b3IiLCJiZXN0TWF0Y2giLCJ0YXJnZXRMb2NhdG9yIiwiZ2V0VGVzdCIsImRpc3RhbmNlIiwib3B0aW9uYWxRdWFudGlmaWVyIiwidHN0UHMiLCJwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbiIsInZhbGlkIiwidG5keCIsImxhdGVzdE1hdGNoIiwibWFza1Rva2VucyIsIm5keEluaXRpYWxpemVyIiwibWF0Y2hlcyIsImluc2VydFN0b3AiLCJjYWNoZURlcGVuZGVuY3kiLCJyZXNvbHZlVGVzdEZyb21Ub2tlbiIsImxvb3BOZHgiLCJxdWFudGlmaWVyUmVjdXJzZSIsImhhbmRsZU1hdGNoIiwiaXNGaXJzdE1hdGNoIiwidG9rZW5Hcm91cCIsImZpcnN0TWF0Y2giLCJpc1F1YW50aWZpZXIiLCJyZXNvbHZlTmR4SW5pdGlhbGl6ZXIiLCJhbHRlcm5hdGVOZHgiLCJ0YXJnZXRBbHRlcm5hdGlvbiIsImluZGV4UG9zIiwibG1udCIsIm5keFBvcyIsImJlc3RNYXRjaEFsdEluZGV4IiwiaXNTdWJzZXRPZiIsImV4cGFuZCIsInBhdHRlcm4iLCJleHBhbmRlZCIsImNoYXJDb2RlQXQiLCJmcm9tQ2hhckNvZGUiLCJzZXRNZXJnZUxvY2F0b3JzIiwidGFyZ2V0TWF0Y2giLCJhbHRNYXRjaCIsImxvY05keCIsImNkIiwiaXNHcm91cCIsImlzT3B0aW9uYWwiLCJvcHRpb25hbFRva2VuIiwibXRjaCIsImlzQWx0ZXJuYXRvciIsIm1hbHRNYXRjaGVzIiwiYWx0ZXJuYXRlVG9rZW4iLCJtYWx0ZXJuYXRlTWF0Y2hlcyIsImN1cnJlbnRNYXRjaGVzIiwibG9vcE5keENudCIsImFsdEluZGV4Iiwic2hpZnQiLCJhbW5keCIsImN1cnJlbnRQb3MiLCJuZHhJbml0aWFsaXplckNsb25lIiwiYWx0SW5kZXhBcnIiLCJhbHRJbmRleEFyckNsb25lIiwidW5NYXRjaGVkQWx0ZXJuYXRpb24iLCJuZHgxIiwiZHJvcE1hdGNoIiwibmR4MiIsImFsdE1hdGNoMiIsInF0IiwicW5keCIsInF1YW50aWZpZXIiLCJwcmV2aW91c1BvcyIsIm1lcmdlTG9jYXRvcnMiLCJtdG5keCIsImdldEJ1ZmZlclRlbXBsYXRlIiwiZ2V0QnVmZmVyIiwibm9DYWNoZSIsInZhbFJlc3VsdCIsInBvc0JlZm9yZSIsIlNQQUNFIiwiY2hlY2tBbHRlcm5hdGlvbk1hdGNoIiwiYWx0QXJyMSIsImFsdEFycjIiLCJuYSIsIm5hTmR4IiwiYWx0QXJyQyIsImlzTWF0Y2giLCJuYUFyciIsImFsbmR4IiwiYWx0ZXJuYXRlIiwiZnJvbVNldFZhbGlkIiwickFsdFBvcyIsImxhc3RBbHQiLCJhbHRQb3MiLCJwcmV2QWx0UG9zIiwidmFsaWRQb3MiLCJkZWNpc2lvblBvcyIsInZhbGlkUHNDbG9uZSIsImlzVmFsaWRSc2x0IiwibEFsdFBvcyIsInZhbGlkSW5wdXRzQ2xvbmUiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3MiLCJwb3NPZmZzZXQiLCJ2YWxpZElucHV0cyIsInRhcmdldEx2cCIsImZyb21BbHRlcm5hdGUiLCJ2YWxpZGF0ZU9ubHkiLCJwb3NPYmoiLCJiZWdpbiIsIm1hc2tQb3MiLCJfaXNWYWxpZCIsInBvc2l0aW9uIiwidmFsaWRhdGVkUG9zIiwicmV2YWxpZGF0ZU1hc2siLCJwb3NpdGlvbnNDbG9uZSIsInRyYWNrYmFja1Bvc2l0aW9ucyIsImN1cnJlbnRQb3NWYWxpZCIsInNlZWtOZXh0IiwiaXNNYXNrIiwiblBvcyIsInNuUG9zIiwicG9zdFJlc3VsdCIsInJlZnJlc2giLCJvcmlnaW5hbFBvcyIsIm5ld1BvcyIsImZpbGxPbmx5IiwicHMiLCJjdnBJbnB1dCIsInZhbGlkVGVzdCIsIklzRW5jbG9zZWRTdGF0aWMiLCJzZWxlY3Rpb24iLCJwb3NNYXRjaCIsInByZXZNYXRjaCIsIm5leHRNYXRjaCIsImx2cCIsIm5lZWRzVmFsaWRhdGlvbiIsIm5ld0Jsb2NrIiwic2Vla1ByZXZpb3VzIiwid3JpdGVCdWZmZXIiLCJ0cmlnZ2VyRXZlbnRzIiwicmVuZGVyQ29sb3JNYXNrIiwibnB0VmFsIiwiX3ZhbHVlR2V0IiwicmV0dXJuUEwiLCJwcmV2VGVzdCIsInN0YXRpY0FsdGVybmF0aW9ucyIsIkhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyIiwibnB0IiwibnB0VmFsdWUiLCJ2YWx1ZUJ1ZmZlciIsIkV2ZW50UnVsZXIiLCJldmVudEhhbmRsZXIiLCJpbU9wdHMiLCJkaXNhYmxlZCIsInJlYWRPbmx5IiwidGFiVGhyb3VnaCIsIlRBQiIsInJldHVyblZhbCIsImZvcm0iLCJldkFyciIsIkV2ZW50SGFuZGxlcnMiLCJrZXlkb3duRXZlbnQiLCJrIiwiQkFDS1NQQUNFIiwiREVMRVRFIiwiQkFDS1NQQUNFX1NBRkFSSSIsIlgiLCJoYW5kbGVSZW1vdmUiLCJFTkQiLCJQQUdFX0RPV04iLCJzaGlmdEtleSIsIkhPTUUiLCJQQUdFX1VQIiwidW5kb09uRXNjYXBlIiwiRVNDQVBFIiwiYWx0S2V5IiwiY2hlY2tWYWwiLCJJTlNFUlQiLCJpZ25vcmFibGVzIiwia2V5cHJlc3NFdmVudCIsImNoZWNrdmFsIiwid3JpdGVPdXQiLCJ3aGljaCIsImNoYXJDb2RlIiwibWV0YUtleSIsIkVOVEVSIiwiZm9yd2FyZFBvc2l0aW9uIiwiX3JhZGl4RGFuY2UiLCJ3cml0ZU91dEJ1ZmZlciIsIm9uS2V5VmFsaWRhdGlvbiIsInBhc3RlRXZlbnQiLCJ0ZW1wVmFsdWUiLCJvcmlnaW5hbEV2ZW50IiwiaW5wdXRWYWx1ZSIsInZhbHVlQmVmb3JlQ2FyZXQiLCJ2YWx1ZUFmdGVyQ2FyZXQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsInBhc3RlVmFsdWUiLCJpbnB1dEZhbGxCYWNrRXZlbnQiLCJpbnB1dENoYXIiLCJpdiIsImllTW9iaWxlSGFuZGxlciIsInJhZGl4UG9pbnRIYW5kbGVyIiwiZnJvbnRQYXJ0IiwiYmFja1BhcnQiLCJmcm9udEJ1ZmZlclBhcnQiLCJiYWNrQnVmZmVyUGFydCIsImVudHJpZXMiLCJpc0VudHJ5IiwiZnBsIiwia2V5cHJlc3MiLCJrZXlkb3duIiwiYmVmb3JlSW5wdXRFdmVudCIsInNldFZhbHVlRXZlbnQiLCJmb2N1c0V2ZW50Iiwic2hvd01hc2tPbkZvY3VzIiwicG9zaXRpb25DYXJldE9uVGFiIiwiY2xpY2tFdmVudCIsIm1vdXNlbGVhdmVFdmVudCIsImFjdGl2ZUVsZW1lbnQiLCJ0YWJiZWQiLCJzZWxlY3RlZENhcmV0IiwiY2xpY2tQb3MiLCJ2cHMiLCJ2cCIsImRvUmFkaXhGb2N1cyIsImNsaWNrUG9zaXRpb24iLCJsdmNsaWNrUG9zaXRpb24iLCJsYXN0UG9zaXRpb24iLCJjdXRFdmVudCIsImNsaXBEYXRhIiwic2V0RGF0YSIsImV4ZWNDb21tYW5kIiwiYmx1ckV2ZW50IiwibW91c2VlbnRlckV2ZW50Iiwic2hvd01hc2tPbkhvdmVyIiwic3VibWl0RXZlbnQiLCJyZW1vdmVNYXNrT25TdWJtaXQiLCJyZXNldEV2ZW50IiwibnB0dmwiLCJpbml0aWF0aW5nRXZlbnQiLCJjaGFyQ29kZXMiLCJpbml0aWFsTmR4Iiwic3RhdGljSW5wdXQiLCJpc1RlbXBsYXRlTWF0Y2giLCJ1bVZhbHVlIiwicG5keCIsImJ1ZmZlclZhbHVlIiwibm90cmFuc2xhdGUiLCJ0cmFuc2xhdGVQb3NpdGlvbiIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0UmFuZ2VBdCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJjcmVhdGVSYW5nZSIsImR1cGxpY2F0ZSIsIm1vdmVTdGFydCIsInNjcm9sbENhbGMiLCJkZWZhdWx0VmlldyIsImN1cnJlbnRTdHlsZSIsImZvbnRTaXplIiwic2Nyb2xsV2lkdGgiLCJ0ZXh0Tm9kZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29sbGFwc2UiLCJzZWwiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsIm1vdmVFbmQiLCJzZWxlY3QiLCJkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbiIsInJldHVybkRlZmluaXRpb24iLCJibCIsImx2VGVzdCIsImx2VGVzdEFsdCIsInRlbXBsYXRlIiwiY29tcGxldGUiLCJscnAiLCJhbWwiLCJmcm9tSXNWYWxpZCIsInBlbmQiLCJpbml0aWFsaXplQ29sb3JNYXNrIiwiY29tcHV0ZWRTdHlsZSIsInRleHRBbGlnbiIsIm9mZnNldExlZnQiLCJjbGllbnR4IiwidGV4dFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsIml0bCIsImlucHV0VGV4dCIsInByZXZpb3VzV2lkdGgiLCJvZmZzZXRXaWR0aCIsIm9mZnNldDEiLCJvZmZzZXQyIiwiZmluZENhcmV0UG9zIiwiY2xlYXIiLCJpc1N0YXRpYyIsInNldEVudHJ5IiwibXRsIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwb3NpdGlvbkNvbG9yTWFzayIsImFjdGlvbiIsImVsZW1lbnRUeXBlIiwic3VwcG9ydHNJbnB1dFR5cGUiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInNldHRlciIsIl9fdmFsdWVHZXQiLCJub1ZhbHVlUGF0Y2hpbmciLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInZhbHVlUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2RlZmluZVNldHRlcl9fIiwiX192YWx1ZVNldCIsIm92ZXJydWxlUlRMIiwiaW5wdXRtYXNrcGF0Y2giLCJ2YWxob29rR2V0IiwidmFsaG9va1NldCIsIiRlbGVtIiwicGF0Y2hWYWxob29rIiwiaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2siLCJwYXRjaFZhbHVlUHJvcGVydHkiLCJpc0VsZW1lbnRUeXBlU3VwcG9ydGVkIiwiZGlzYWJsZVByZWRpY3RpdmVUZXh0IiwiYXV0b2NvcnJlY3QiLCJvbmNvbXBsZXRlIiwib25pbmNvbXBsZXRlIiwib25jbGVhcmVkIiwiaW5wdXRFdmVudE9ubHkiLCJybCIsImxtaWIiLCJtYXNrVGFyZ2V0IiwibXRkdCIsImRhdGFBdHRyaWJ1dGUiLCJlc2NhcGVDaGFyIiwic3RhdGljRGVmaW5pdGlvblN5bWJvbCIsImltcG9ydERhdGFBdHRyaWJ1dGVzIiwiZWxlbXMiLCJnZXRFbGVtZW50QnlJZCIsInNjb3BlZE9wdHMiLCJvcHRpb24iLCJkYXRhb3B0aW9ucyIsIm9wdGlvbkRhdGEiLCJhdHRyT3B0aW9ucyIsImltcG9ydE9wdGlvbiIsImltcG9ydEF0dHJpYnV0ZU9wdGlvbnMiLCJub3JlbWFzayIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJvcGVuaW5nVG9rZW4iLCJjdXJyZW50T3BlbmluZ1Rva2VuIiwiYWx0ZXJuYXRvciIsImxhc3RNYXRjaCIsInJlZ2V4VG9rZW5pemVyIiwiZXNjYXBlZCIsImN1cnJlbnRUb2tlbiIsIk1hc2tUb2tlbiIsIm9wZW5lbmluZ3MiLCJvcGVuR3JvdXAiLCJhbHRlcm5hdG9yR3JvdXAiLCJpbnNlcnRUZXN0RGVmaW5pdGlvbiIsIm10b2tlbiIsIm1hc2tkZWYiLCJkZWZhdWx0Q2FzZSIsIm1uZHgiLCJncm91cGlmeSIsImdyb3VwVG9rZW4iLCJtcWoiLCJtcSIsIm1xMCIsIm1xMSIsInRtcE1hdGNoIiwiZ3JvdXBRdWFudGlmaWVyIiwic3ViVG9rZW4iLCJ2ZXJpZnlHcm91cE1hcmtlciIsInRva2VuIiwibmV4dFRva2VuIiwicmV2ZXJzZVRva2VucyIsImludE1hdGNoIiwic3QiLCJleHRlbmREZWZhdWx0cyIsImRlZmluaXRpb24iLCJ1bm1hc2siLCJMRUZUIiwiQ09OVFJPTCIsInN0ZXBzU2xpZGVyIiwidmlld05vZGVzIiwidmlld1ByaWNlIiwic3RhcnRBdCIsInBlclZpZXciLCJmb2N1c0F0IiwiZ2FwIiwiYXV0b3BsYXkiLCJob3ZlcnBhdXNlIiwia2V5Ym9hcmQiLCJib3VuZCIsInN3aXBlVGhyZXNob2xkIiwiZHJhZ1RocmVzaG9sZCIsInBlclRvdWNoIiwidG91Y2hSYXRpbyIsInRvdWNoQW5nbGUiLCJyZXdpbmQiLCJyZXdpbmREdXJhdGlvbiIsImFuaW1hdGlvblRpbWluZ0Z1bmMiLCJ0aHJvdHRsZSIsInBlZWsiLCJicmVha3BvaW50cyIsImNsYXNzZXMiLCJzbGlkZXIiLCJjYXJvdXNlbCIsInN3aXBlYWJsZSIsImRyYWdnaW5nIiwiY2xvbmVTbGlkZSIsImFjdGl2ZU5hdiIsImFjdGl2ZVNsaWRlIiwiZGlzYWJsZWRBcnJvdyIsIndhcm4iLCJtc2ciLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwicmVjZWl2ZXIiLCJGdW5jdGlvbiIsImRlc2MiLCJwYXJlbnQiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwidG9JbnQiLCJpc1N0cmluZyIsImlzT2JqZWN0IiwiaXNVbmRlZmluZWQiLCJtb3VudCIsImdsaWRlIiwiZXh0ZW5zaW9ucyIsImNvbXBvbmVudHMiLCJfbmFtZSIsImRlZmluZSIsInByb3AiLCJtZXJnZU9wdGlvbnMiLCJzZXR0aW5ncyIsIkV2ZW50c0J1cyIsImhvcCIsImNvbnRleHQiLCJlbWl0IiwiR2xpZGUiLCJzZWxlY3RvciIsIl9jIiwiX3QiLCJfZSIsInRyYW5zZm9ybWVycyIsIlJ1biIsIm1ha2UiLCJUcmFuc2l0aW9uIiwiZGlzYWJsZSIsIk1vdmUiLCJfbyIsIl9kIiwic3RhdHVzIiwiZnVuYyIsIndhaXQiLCJ0aW1lb3V0IiwicHJldmlvdXMiLCJsYXRlciIsImxlYWRpbmciLCJ0aHJvdHRsZWQiLCJhdCIsInJlbWFpbmluZyIsImNsZWFyVGltZW91dCIsInRyYWlsaW5nIiwiY2FuY2VsIiwiTUFSR0lOX1RZUEUiLCJzaWJsaW5ncyIsIm1hdGNoZWQiLCJuZXh0U2libGluZyIsImV4aXN0IiwiSFRNTEVsZW1lbnQiLCJFdmVudHNCaW5kZXIiLCJjbG9zdXJlIiwiY2FwdHVyZSIsIlZBTElEX0RJUkVDVElPTlMiLCJGTElQRURfTU9WRU1FTlRTIiwiUnRsIiwiQ29tcG9uZW50cyIsIm1vZGlmeSIsInRyYW5zbGF0ZSIsIkRpcmVjdGlvbiIsImlzIiwiR2FwIiwiR2FwcyIsIkdyb3ciLCJDbG9uZXMiLCJncm93IiwiUGVla2luZyIsIlBlZWsiLCJGb2N1c2luZyIsIlNpemVzIiwic2xpZGVXaWR0aCIsInN1cHBvcnRzUGFzc2l2ZSQxIiwiU1RBUlRfRVZFTlRTIiwiTU9WRV9FVkVOVFMiLCJFTkRfRVZFTlRTIiwiTU9VU0VfRVZFTlRTIiwic29ydEJyZWFrcG9pbnRzIiwicmVkdWNlIiwiQ09NUE9ORU5UUyIsIkh0bWwiLCJyb290IiwidHJhY2siLCJzbGlkZXMiLCJ3cmFwcGVyIiwic2xpZGUiLCJfciIsIlRyYW5zbGF0ZSIsIkV2ZW50cyIsIlRSQU5TRk9STUVSUyIsIm11dGF0ZSIsInRyYW5zZm9ybWVyIiwibXV0YXRvciIsImlzVHlwZSIsImlzT2Zmc2V0IiwiY29tcG9zZSIsInRyYW5zaXRpb24iLCJlbmFibGUiLCJyZXNvbHZlIiwiX3YiLCJzZXR1cFNsaWRlcyIsInNldHVwV3JhcHBlciIsImRpbWVudGlvbiIsIndyYXBwZXJTaXplIiwicmVkdWN0b3IiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJfdGhpcyIsIml0ZW1zIiwiY29sbGVjdCIsIl9HbGlkZSRzZXR0aW5ncyIsInBlZWtJbmNyZW1lbnRlciIsImNsb25lTm9kZSIsIl9jbG9uZSIsImFwcGVuZCIsIl9Db21wb25lbnRzJEh0bWwiLCJoYWxmIiwicHJlcGVuZCIsIl9pMiIsIl9pMyIsIlJlc2l6ZSIsIkJpbmRlciIsInVuYmluZCIsIkJ1aWxkIiwidHlwZUNsYXNzIiwiYWN0aXZlQ2xhc3MiLCJzaWJsaW5nIiwicmVtb3ZlQ2xhc3NlcyIsImNhbGN1bGF0ZSIsImlzU3RhcnQiLCJpc0VuZCIsImNvdW50YWJsZVN0ZXBzIiwiX20iLCJTd2lwZSIsInN3aXBlU2luIiwic3dpcGVTdGFydFgiLCJzd2lwZVN0YXJ0WSIsImJpbmRTd2lwZVN0YXJ0Iiwic3dpcGUiLCJiaW5kU3dpcGVNb3ZlIiwiYmluZFN3aXBlRW5kIiwic3ViRXhTeCIsInN1YkV5U3kiLCJwb3dFWCIsInBvd0VZIiwic3dpcGVIeXBvdGVudXNlIiwic3FydCIsInN3aXBlQ2F0aGV0dXMiLCJhc2luIiwiUEkiLCJ0aHJlc2hvbGQiLCJzd2lwZURpc3RhbmNlIiwic3dpcGVEZWciLCJ1bmJpbmRTd2lwZU1vdmUiLCJ1bmJpbmRTd2lwZUVuZCIsInVuYmluZFN3aXBlU3RhcnQiLCJfdGhpczIiLCJfdGhpczMiLCJJbWFnZXMiLCJkcmFnc3RhcnQiLCJBbmNob3JzIiwiZGV0YWNoZWQiLCJwcmV2ZW50ZWQiLCJfYSIsImNsaWNrIiwiZGV0YWNoIiwiYXR0YWNoIiwiQ29udHJvbHMiLCJfbiIsImFkZEJpbmRpbmdzIiwic2V0QWN0aXZlIiwicmVtb3ZlQWN0aXZlIiwiY29udHJvbHMiLCJyZW1vdmVCaW5kaW5ncyIsImVsZW1lbnRzIiwiY3VycmVudFRhcmdldCIsIktleWJvYXJkIiwicHJlc3MiLCJBdXRvcGxheSIsInNldEludGVydmFsIiwic3RvcCIsInRpbWUiLCJjbGVhckludGVydmFsIiwiQnJlYWtwb2ludHMiLCJtYXRjaE1lZGlhIiwicG9pbnQiLCJfQ29yZSIsIkdsaWRlJCQxIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJpbmhlcml0cyIsImlzUHJvZmlsZUFjdGl2ZSIsIm9uQnVyZ2VyQnV0dG9uQ2xpY2siLCJvblByb2ZpbGVCdXR0b25DbGljayIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzExX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX18iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEs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RUFBcUMsYUFBZUEsRUFBcUMsd0JBQTRCQyxFQUFxQyw0QkFBZ0NDLEVBQXFDLGlHQUF1RzB2RCxFQUFxQyxhQUFlQSxFQUFxQyx3QkFBNEJDLEVBQXNDLDRCQUFnQ0MsRUFBc0Msc1ZBQStWLEtBRXJtSHIxRCxFQUFPRCxRQUFVQSxHLGtCQy9CakJDLEVBQU9ELFFBQVUsSUFBMEIiLCJmaWxlIjoic2NyaXB0cy9yb29tcy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjA1KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtUmVndWxhci1hNzAwOTU0LnR0ZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtUmVndWxhci5mb250LWNiODMzMDkuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvTW9udHNlcnJhdC1Cb2xkLTNhYzFhNTMud29mZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtQm9sZC05ZTMxMTdhLnR0ZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtQm9sZC5mb250LTU5N2I3NmIuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXItYjZkYjIyMy53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXItNzczMDA5My50dGZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9RdWlja3NhbmQtUmVndWxhci5mb250LTBlNTQ0MzAuc3ZnXCI7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTctMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yb29tcy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKG1vZHVsZS5pZCwgY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9ub3Vpc2xpZGVyL2Rpc3RyaWJ1dGUvbm91aXNsaWRlci5taW4uY3NzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2hlYWRlci91c2VyLnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2J1dHRvbi9hcnJvdy5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9kYXRlLXBpY2tlci9hcnJvdy1iYWNrLnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2lucHV0L2V4cGFuZC1tb3JlLnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2hvdGVsLWNhcmQvZXhwYW5kLW1vcmUucG5nXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudHMvY2hlY2tib3gvZXhwYW5kLW1vcmUucG5nXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudHMvcmF0ZWJ0bi9zdGFyLnBuZ1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL3JhdGVidG4vc3Rhci1hY3RpdmUucG5nXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fID0gcmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9hcnJvdy5wbmdcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucGFnZS1oZWFkZXJ7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1jb2xvcjojZmZmOy13ZWJraXQtYm94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KX0ucGFnZS1oZWFkZXJfX3dyYXB7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7cGFkZGluZzoxN3B4IDAgMTVweH0ucGFnZS1oZWFkZXJfX2F1dGh7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tbGVmdDoyMnB4O3BhZGRpbmctYm90dG9tOjFweH0ucGFnZS1oZWFkZXJfX2F1dGgtLWlzLWF1dGh7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjIwcHh9LnBhZ2UtaGVhZGVyX19hdXRoLS1pcy1hdXRoOjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3dpZHRoOjFweDtoZWlnaHQ6MzBweDtiYWNrZ3JvdW5kOiMxZjIwNDE7b3BhY2l0eTowLjE7Y29udGVudDpcXFwiXFxcIn0ucGFnZS1oZWFkZXJfX2F1dGgtbGlzdHtwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowfS5wYWdlLWhlYWRlcl9fYXV0aCAuYnV0dG9ue21hcmdpbi1yaWdodDoyMHB4fS5wYWdlLWhlYWRlcl9fYXV0aCAuYnV0dG9uOm50aC1jaGlsZCgyKXttYXJnaW4tcmlnaHQ6MDtwYWRkaW5nLWxlZnQ6MThweDtsZXR0ZXItc3BhY2luZzowLjNweH0ucGFnZS1oZWFkZXJfX3VzZXItbmFtZXttYXJnaW46MDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2NvbG9yOiMxZjIwNDE7b3BhY2l0eTowLjV9LnBhZ2UtaGVhZGVyX19hdXRoLXByb2ZpbGV7ZGlzcGxheTpub25lfUBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpey5wYWdlLWhlYWRlcl9fYXV0aHstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjM7LW1zLWZsZXgtb3JkZXI6MjtvcmRlcjoyO21hcmdpbi1sZWZ0OmF1dG99LnBhZ2UtaGVhZGVyX19hdXRoLS1pcy1hdXRoe21hcmdpbi1yaWdodDoyMHB4O3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6MjBweH0ucGFnZS1oZWFkZXJfX2F1dGgtLWlzLWF1dGg6OmJlZm9yZXtsZWZ0OmF1dG87cmlnaHQ6MH0ucGFnZS1oZWFkZXJfX2F1dGg+LmJ1dHRvbntkaXNwbGF5Om5vbmV9LnBhZ2UtaGVhZGVyX19hdXRoLXByb2ZpbGV7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6NDBweDtkaXNwbGF5OmJsb2NrOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBuby1yZXBlYXQ7Ym9yZGVyOm5vbmU7Y3Vyc29yOnBvaW50ZXI7Y29udGVudDpcXFwiXFxcIn0ucGFnZS1oZWFkZXJfX2F1dGgtcHJvZmlsZS0taGlkZXtkaXNwbGF5Om5vbmV9LnBhZ2UtaGVhZGVyX19hdXRoLWxpc3R7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDA7dG9wOjU1cHg7bGVmdDo1MCU7ZGlzcGxheTpibG9jazt3aWR0aDoxMDB2dztwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lO2JhY2tncm91bmQ6I2ZmZjstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTEwcHgpO3Zpc2liaWxpdHk6aGlkZGVuOy13ZWJraXQtdHJhbnNpdGlvbjphbGwgMC4zcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmFsbCAwLjNzIGVhc2UtaW4tb3V0fS5wYWdlLWhlYWRlcl9fYXV0aC1saXN0LS1hY3RpdmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0ucGFnZS1oZWFkZXJfX2F1dGgtbGlzdCAucGFnZS1oZWFkZXJfX2F1dGgtaXRlbXt3aWR0aDoxMDAlfS5wYWdlLWhlYWRlcl9fYXV0aC1saXN0IC5wYWdlLWhlYWRlcl9fYXV0aC1pdGVtOmxhc3QtY2hpbGR7LXdlYmtpdC1ib3gtc2hhZG93OjAgNHB4IDJweCAtMnB4IHJnYmEoMCwwLDAsMC4yKTtib3gtc2hhZG93OjAgNHB4IDJweCAtMnB4IHJnYmEoMCwwLDAsMC4yKX0ucGFnZS1oZWFkZXJfX2F1dGgtbGlzdCBhe2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEwMCU7cGFkZGluZzoyMHB4IDA7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO3RleHQtYWxpZ246Y2VudGVyO3RleHQtZGVjb3JhdGlvbjpub25lO3ZlcnRpY2FsLWFsaWduOnRvcDtib3JkZXItdG9wOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpfS5wYWdlLWhlYWRlcl9fYXV0aC1saXN0IGE6aG92ZXJ7Y29sb3I6Izk5NjlmZn19QG1lZGlhIChtYXgtd2lkdGg6IDQyNXB4KXsucGFnZS1oZWFkZXJfX3dyYXB7cGFkZGluZy1yaWdodDoyMHB4O3BhZGRpbmctbGVmdDoyMHB4fS5wYWdlLWhlYWRlcl9fYXV0aC1wcm9maWxle3JpZ2h0OjYwcHh9fUBtZWRpYSAobWF4LXdpZHRoOiAzODBweCl7LnBhZ2UtaGVhZGVyX19hdXRoLS1pcy1hdXRoe21hcmdpbi1yaWdodDoxMHB4O3BhZGRpbmctcmlnaHQ6MH0ucGFnZS1oZWFkZXJfX2F1dGgtLWlzLWF1dGg6OmJlZm9yZXtkaXNwbGF5Om5vbmV9fS5sb2dve3Bvc2l0aW9uOnJlbGF0aXZlO21pbi13aWR0aDoxMjBweDttaW4taGVpZ2h0OjM4cHh9LmxvZ28tLWJpZ3ttYXJnaW4tdG9wOjMwcHg7bWFyZ2luLWxlZnQ6MzBweH0ubG9nb19fbGlua3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTJweH0ubG9nb19fbGluazpob3ZlciAubG9nb19fbGV0dGVye2ZpbGw6Izk5NjlmZn0ubG9nb19fbGluazpob3ZlciAubG9nb19fbGFiZWwtbGVmdHtmaWxsOiM2ZmNmOTd9LmxvZ29fX2xldHRlciwubG9nb19fbGFiZWwtbGVmdHstd2Via2l0LXRyYW5zaXRpb246ZmlsbCAwLjRzIGVhc2U7dHJhbnNpdGlvbjpmaWxsIDAuNHMgZWFzZX0uYnV0dG9ue3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MTAwO3BhZGRpbmc6MTBweCAyMHB4O2NvbG9yOiNmZmY7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxMnB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIlF1aWNrc2FuZFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7dGV4dC1kZWNvcmF0aW9uOm5vbmU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCNiYzljZmYpLCB0bygjOGJhNGY5KSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmIDAlLCAjOGJhNGY5IDEwMCUpO2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6MjJweDtjdXJzb3I6cG9pbnRlcn0uYnV0dG9uLS1kaXNhYmxle29wYWNpdHk6MC41O2N1cnNvcjpkZWZhdWx0fS5idXR0b24tLWRpc2FibGU6aG92ZXI6OmJlZm9yZXtkaXNwbGF5Om5vbmV9LmJ1dHRvbjo6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt6LWluZGV4Oi0xMDA7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjOTk2OWZmKSwgdG8oIzViN2VmNikpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KCM5OTY5ZmYsICM1YjdlZjYpO2JvcmRlci1yYWRpdXM6aW5oZXJpdDtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgMC40cyBlYXNlO3RyYW5zaXRpb246b3BhY2l0eSAwLjRzIGVhc2U7Y29udGVudDpcXFwiXFxcIn0uYnV0dG9uOmhvdmVyOjpiZWZvcmV7b3BhY2l0eToxfS5idXR0b24tLWVtcHR5LXN0eWxle3BhZGRpbmc6OHB4IDE4cHg7Y29sb3I6I2JjOWNmZjtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjJweCBzb2xpZCAjYmM5Y2ZmfS5idXR0b24tLWVtcHR5LXN0eWxlOjpiZWZvcmV7ZGlzcGxheTpub25lfS5idXR0b24tLWVtcHR5LXN0eWxlOmhvdmVye2NvbG9yOiM5OTY5ZmY7Ym9yZGVyLWNvbG9yOiM5OTY5ZmY7YmFja2dyb3VuZDojZmZmfS5idXR0b24tLWVtcHR5LWRpc2FibGV7b3BhY2l0eTowLjU7Y3Vyc29yOmRlZmF1bHR9LmJ1dHRvbi0tZW1wdHktZGlzYWJsZTpob3Zlcntjb2xvcjojYmM5Y2ZmICFpbXBvcnRhbnQ7YmFja2dyb3VuZDojZmZmICFpbXBvcnRhbnQ7Ym9yZGVyLWNvbG9yOiNiYzljZmYgIWltcG9ydGFudH0uYnV0dG9uLS1vbmx5LXRleHR7cGFkZGluZzowO2NvbG9yOiNiYzljZmY7YmFja2dyb3VuZDpub25lfS5idXR0b24tLW9ubHktdGV4dDo6YmVmb3Jle2Rpc3BsYXk6bm9uZX0uYnV0dG9uLS1vbmx5LXRleHQ6aG92ZXJ7Y29sb3I6Izk5NjlmZn0uYnV0dG9uLS1vbmx5LXRleHQtZGlzYWJsZXtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Y3Vyc29yOmRlZmF1bHR9LmJ1dHRvbi0tb25seS10ZXh0LWRpc2FibGU6aG92ZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpfS5idXR0b24tLWljb257cG9zaXRpb246cmVsYXRpdmV9LmJ1dHRvbi0taWNvbjo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtyaWdodDowO3dpZHRoOjQ0cHg7aGVpZ2h0OjQ0cHg7bWFyZ2luLXRvcDotMjJweDtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIikgbm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZCAwLjJzIGVhc2U7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDAuMnMgZWFzZTtjb250ZW50OlxcXCJcXFwifS5idXR0b24tLWljb246YWN0aXZlOjphZnRlcntiYWNrZ3JvdW5kLXBvc2l0aW9uOjIwcHggY2VudGVyfS5tYWluLW1lbnV7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luLWxlZnQ6YXV0b30ubWFpbi1tZW51X19saXN0LC5tYWluLW1lbnVfX3N1Yi1tZW51e21hcmdpbjowO3BhZGRpbmc6MDtsaXN0LXN0eWxlOm5vbmV9Lm1haW4tbWVudV9fYnVyZ2VyLWljb257cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpub25lO3dpZHRoOjI1cHg7aGVpZ2h0OjE2cHg7Y3Vyc29yOnBvaW50ZXJ9Lm1haW4tbWVudV9fYnVyZ2VyLWljb24gc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxMDAlO2hlaWdodDoycHg7dmVydGljYWwtYWxpZ246dG9wO2JhY2tncm91bmQtY29sb3I6IzFmMjA0MTstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAwLjJzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246b3BhY2l0eSAwLjJzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQsIG9wYWNpdHkgMC4ycyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0LCBvcGFjaXR5IDAuMnMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXR9Lm1haW4tbWVudV9fYnVyZ2VyLWljb24gc3BhbjpudGgtY2hpbGQoMil7dG9wOjdweH0ubWFpbi1tZW51X19idXJnZXItaWNvbiBzcGFuOmxhc3QtY2hpbGR7dG9wOjE0cHh9Lm1haW4tbWVudV9fYnVyZ2VyLWljb24tLWFjdGl2ZSBzcGFuOmZpcnN0LWNoaWxkey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKDdweCwgM3B4KTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKSB0cmFuc2xhdGUoN3B4LCAzcHgpfS5tYWluLW1lbnVfX2J1cmdlci1pY29uLS1hY3RpdmUgc3BhbjpudGgtY2hpbGQoMil7b3BhY2l0eTowfS5tYWluLW1lbnVfX2J1cmdlci1pY29uLS1hY3RpdmUgc3BhbjpsYXN0LWNoaWxkey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpIHRyYW5zbGF0ZSg3cHgsIC0zcHgpO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKSB0cmFuc2xhdGUoN3B4LCAtM3B4KX0ubWFpbi1tZW51X19saXN0e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5tYWluLW1lbnVfX3N1Yi1tZW51e3Bvc2l0aW9uOmFic29sdXRlO3RvcDozMHB4O2xlZnQ6NTAlO3BhZGRpbmc6NXB4IDIwcHg7dGV4dC1hbGlnbjpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6NXB4Oy13ZWJraXQtYm94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAxMHB4KTt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjRzIGVhc2U7dHJhbnNpdGlvbjphbGwgMC40cyBlYXNlfS5tYWluLW1lbnVfX2l0ZW17bWFyZ2luLXJpZ2h0OjIwcHh9Lm1haW4tbWVudV9faXRlbTpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS5tYWluLW1lbnVfX2l0ZW0tLWFjdGl2ZSBhe2ZvbnQtd2VpZ2h0OmJvbGQ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0ubWFpbi1tZW51X19pdGVtLS1zdWItbWVudXtwb3NpdGlvbjpyZWxhdGl2ZX0ubWFpbi1tZW51X19pdGVtLS1zdWItbWVudTpob3Zlcj5hW2hyZWZde2NvbG9yOiM5OTY5ZmY7b3BhY2l0eToxfS5tYWluLW1lbnVfX2l0ZW0tLXN1Yi1tZW51OmhvdmVyPmFbaHJlZl06OmFmdGVye2JvcmRlci1yaWdodC1jb2xvcjojYWI4M2ZmO2JvcmRlci1ib3R0b20tY29sb3I6I2FiODNmZjtvcGFjaXR5OjF9Lm1haW4tbWVudV9faXRlbS0tc3ViLW1lbnU6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTotMThweDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MjBweDtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2NvbnRlbnQ6XFxcIlxcXCJ9Lm1haW4tbWVudV9faXRlbS0tc3ViLW1lbnU+YXtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nLXJpZ2h0OjI0cHh9Lm1haW4tbWVudV9faXRlbS0tc3ViLW1lbnU+YTo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtyaWdodDo2cHg7d2lkdGg6N3B4O2hlaWdodDo3cHg7bWFyZ2luLXRvcDotNnB4O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjMWYyMDQxO2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMxZjIwNDE7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTtvcGFjaXR5OjAuNTtjb250ZW50OlxcXCJcXFwifS5tYWluLW1lbnVfX2l0ZW0tLXN1Yi1tZW51PmE6aG92ZXI6OmFmdGVye2JvcmRlci1yaWdodC1jb2xvcjojYWI4M2ZmO2JvcmRlci1ib3R0b20tY29sb3I6I2FiODNmZjtvcGFjaXR5OjF9Lm1haW4tbWVudV9faXRlbTpob3Zlcj4ubWFpbi1tZW51X19zdWItbWVudXt6LWluZGV4OjEwMDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAwKTt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxfS5tYWluLW1lbnVfX3N1Yi1pdGVte21hcmdpbi1ib3R0b206MTBweH0ubWFpbi1tZW51X19pdGVtIGEsLm1haW4tbWVudV9fc3ViLWl0ZW0gYXtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxN3B4O3RleHQtZGVjb3JhdGlvbjpub25lOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9Lm1haW4tbWVudV9faXRlbSBhW2hyZWZdOmhvdmVyLC5tYWluLW1lbnVfX3N1Yi1pdGVtIGFbaHJlZl06aG92ZXJ7Y29sb3I6Izk5NjlmZn1AbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KXsubWFpbi1tZW51ey13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6NDstbXMtZmxleC1vcmRlcjozO29yZGVyOjM7bWFyZ2luLWxlZnQ6MH0ubWFpbi1tZW51IG5hdntwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwMDt0b3A6NjlweDtsZWZ0OjUwJTt3aWR0aDoxMDB2dztiYWNrZ3JvdW5kOiNmZmY7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC0xMHB4KTt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjNzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YWxsIDAuM3MgZWFzZS1pbi1vdXR9Lm1haW4tbWVudS0tYWN0aXZlIG5hdnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAwKTt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxfS5tYWluLW1lbnVfX3N1Yi1tZW51e3RvcDo0NXB4fS5tYWluLW1lbnVfX2l0ZW17d2lkdGg6MTAwJX0ubWFpbi1tZW51X19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OmF1dG87LXdlYmtpdC1ib3gtc2hhZG93OjAgNHB4IDJweCAtMnB4IHJnYmEoMCwwLDAsMC4yKTtib3gtc2hhZG93OjAgNHB4IDJweCAtMnB4IHJnYmEoMCwwLDAsMC4yKX0ubWFpbi1tZW51X19pdGVtPmF7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTAwJTtwYWRkaW5nOjIwcHggMDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjp0b3A7Ym9yZGVyLXRvcDoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KX0ubWFpbi1tZW51X19saXN0ey13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5tYWluLW1lbnVfX2J1cmdlci1pY29ue2Rpc3BsYXk6YmxvY2t9Lm1haW4tbWVudV9faXRlbS0tc3ViLW1lbnU6OmFmdGVye2Rpc3BsYXk6bm9uZX0ubWFpbi1tZW51X19pdGVtLS1zdWItbWVudT5hOjphZnRlcnt0b3A6NDguNSU7cmlnaHQ6YXV0bzttYXJnaW4tbGVmdDoxMHB4fX0uZGF0ZS13aXNoZXN7d2lkdGg6MzgwcHg7YmFja2dyb3VuZDojZmZmO2JvcmRlci1yYWRpdXM6NHB4Oy13ZWJraXQtYm94LXNoYWRvdzowIDAgMjVweCByZ2JhKDAsMCwwLDAuMik7Ym94LXNoYWRvdzowIDAgMjVweCByZ2JhKDAsMCwwLDAuMil9LmRhdGUtd2lzaGVzIGZpZWxkc2V0e21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MH0uZGF0ZS13aXNoZXMgLmlucHV0LWdyb3VwX19sYWJlbHtjb2xvcjojMWYyMDQxO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmRhdGUtd2lzaGVzIC5idXR0b257LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTttYXJnaW4tdG9wOjMxcHg7cGFkZGluZzoxNXB4IDIwcHg7cGFkZGluZy10b3A6MTRweDtmb250LXdlaWdodDpub3JtYWw7dGV4dC1hbGlnbjpjZW50ZXJ9LmRhdGUtd2lzaGVzIC5idXR0b24tLWljb257ei1pbmRleDowfS5kYXRlLXdpc2hlc19fd3JhcHtwYWRkaW5nOjQwcHggMzBweCAzMHB4fS5kYXRlLXdpc2hlc19fZ3JvdXB7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbi1ib3R0b206MjBweH0uZGF0ZS13aXNoZXNfX2dyb3VwIC5pbnB1dC1ncm91cF9faW5wdXQtLWJ1dHRvbi1zcGxpdHt3aWR0aDoxMDZweH0uZGF0ZS13aXNoZXNfX2dyb3VwIC5kYXRlLXBpY2tlci1jb250YWluZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjI2OXB4O2xlZnQ6NTAlfS5kYXRlLXdpc2hlc19fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToyMHB4O2NvbG9yOiMxZjIwNDE7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MjRweDtsaW5lLWhlaWdodDozMHB4fUBtZWRpYSAobWF4LXdpZHRoOiAzODBweCl7LmRhdGUtd2lzaGVze3dpZHRoOjEwMCU7bWluLXdpZHRoOjMyMHB4O21hcmdpbjowIGF1dG99LmRhdGUtd2lzaGVzX19ncm91cHstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uZGF0ZS13aXNoZXNfX2dyb3VwIC5kYXRlLXBpY2tlci1jb250YWluZXJ7dG9wOjM0OHB4fS5kYXRlLXdpc2hlc19fZ3JvdXAgLmlucHV0LWdyb3Vwe21hcmdpbi1ib3R0b206MTVweH0uZGF0ZS13aXNoZXNfX2dyb3VwIC5pbnB1dC1ncm91cF9faW5wdXQtLWJ1dHRvbi1zcGxpdHt3aWR0aDoxMDAlfX1AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpey5kYXRlLXdpc2hlc3ttYXJnaW46MCBhdXRvfX1ALXdlYmtpdC1rZXlmcmFtZXMgc2hha2V7MTAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMXB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTFweCwgMCwgMCl9MjAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgycHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgycHgsIDAsIDApfTMwJSw1MCUsNzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC00cHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNHB4LCAwLCAwKX00MCUsNjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDRweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDRweCwgMCwgMCl9fUBrZXlmcmFtZXMgc2hha2V7MTAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMXB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTFweCwgMCwgMCl9MjAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgycHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgycHgsIDAsIDApfTMwJSw1MCUsNzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC00cHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNHB4LCAwLCAwKX00MCUsNjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDRweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDRweCwgMCwgMCl9fS5kYXRlLXBpY2tlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO2xlZnQ6NTAlO3otaW5kZXg6MTAwOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO21hcmdpbi10b3A6LTIwMHB4O21hcmdpbi1sZWZ0Oi01MCU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItcmFkaXVzOjRweDstd2Via2l0LWJveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KTtib3gtc2hhZG93OjAgMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246YWxsIDAuMnMgZWFzZS1pbjt0cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2UtaW59LmRhdGUtcGlja2VyLS1zaG93ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0uZGF0ZS1waWNrZXItLWVycm9yLWFuaW1hdGlvbnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXBlcnNwZWN0aXZlOjEwMDBweDtwZXJzcGVjdGl2ZToxMDAwcHg7LXdlYmtpdC1hbmltYXRpb246c2hha2UgMC43cyBjdWJpYy1iZXppZXIoMC4zNiwgMC4wNywgMC4xOSwgMC45NykgYm90aDthbmltYXRpb246c2hha2UgMC43cyBjdWJpYy1iZXppZXIoMC4zNiwgMC4wNywgMC4xOSwgMC45NykgYm90aH0uZGF0ZS1waWNrZXJfX3dyYXB7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjIwcHh9LmRhdGUtcGlja2VyX19jb250cm9se2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDoxMDAlfS5kYXRlLXBpY2tlcl9fdGl0bGV7bWFyZ2luOjA7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTlweDtsaW5lLWhlaWdodDoyNHB4fS5kYXRlLXBpY2tlcl9fc2xpZGVyLWJ0bnt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2ZvbnQtc2l6ZTowO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyIGNlbnRlcjtib3JkZXI6bm9uZTtvdXRsaW5lOm5vbmU7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDAuMnMgZWFzZTt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDAuMnMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjJzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4ycyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAwLjJzIGVhc2V9LmRhdGUtcGlja2VyX19zbGlkZXItYnRuLS1wcmV2e2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKX0uZGF0ZS1waWNrZXJfX3NsaWRlci1idG4tLXByZXY6YWN0aXZley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTVweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTVweCl9LmRhdGUtcGlja2VyX19zbGlkZXItYnRuLS1uZXh0e2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LmRhdGUtcGlja2VyX19zbGlkZXItYnRuLS1uZXh0OmFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKSB0cmFuc2xhdGVYKC01cHgpO3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKSB0cmFuc2xhdGVYKC01cHgpfS5kYXRlLXBpY2tlcl9fY2FsZW5kYXJ7bWFyZ2luLXRvcDozMHB4O21hcmdpbi1ib3R0b206MjBweDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2V9LmRhdGUtcGlja2VyX190aCwuZGF0ZS1waWNrZXJfX2RheXstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmRhdGUtcGlja2VyX190aHtjb2xvcjojYmM5Y2ZmfS5kYXRlLXBpY2tlcl9fZGF5e2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXdlaWdodDpub3JtYWw7Ym9yZGVyLXJhZGl1czoyMnB4O2N1cnNvcjpwb2ludGVyfS5kYXRlLXBpY2tlcl9fZGF5LS1lcnJvcntmb250LXdlaWdodDpib2xkO2JhY2tncm91bmQ6dG9tYXRvICFpbXBvcnRhbnR9LmRhdGUtcGlja2VyX19kYXktLWN1cnJlbnR7Y29sb3I6I2ZmZiAhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCM2ZmNmOTcpLCB0bygjNjZkMmVhKSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNmZjZjk3LCAjNjZkMmVhKX0uZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0e2NvbG9yOiNmZmYgIWltcG9ydGFudDtmb250LXdlaWdodDpib2xkO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjYmM5Y2ZmKSwgdG8oIzhiYTRmOSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiwgIzhiYTRmOSl9LmRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zcGFjZXtib3JkZXItcmFkaXVzOjA7YmFja2dyb3VuZDpyZ2JhKDE4OCwxNTYsMjU1LDAuMjUpfS5kYXRlLXBpY2tlcl9fZGF5LS1ub3QtY3VycmVudHtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjUpfS5kYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3Qtc3RhcnQsLmRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1lbmR7cG9zaXRpb246cmVsYXRpdmV9LmRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zdGFydDo6YWZ0ZXIsLmRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1lbmQ6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3dpZHRoOjM2JTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20ocmdiYSgxODgsMTU2LDI1NSwwLjI1KSksIHRvKHJnYmEoMTM5LDE2NCwyNDksMC4yNSkpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMTg4LDE1NiwyNTUsMC4yNSksIHJnYmEoMTM5LDE2NCwyNDksMC4yNSkpO2NvbnRlbnQ6XFxcIlxcXCJ9LmRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zdGFydDo6YWZ0ZXJ7cmlnaHQ6MH0uZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LWVuZDo6YWZ0ZXJ7bGVmdDowfS5kYXRlLXBpY2tlcl9fYnV0dG9ue3BhZGRpbmc6MDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXR9LmRhdGUtcGlja2VyX19idXR0b246aG92ZXJ7Y29sb3I6I2JjOWNmZn0uZGF0ZS1waWNrZXJfX2J1dHRvbjphY3RpdmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgzcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDNweCl9LmRhdGUtcGlja2VyX19idXR0b24tLWFjY2VudHtjb2xvcjojYmM5Y2ZmfS5kYXRlLXBpY2tlcl9fYnV0dG9uLS1hY2NlbnQ6aG92ZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpfS5kYXRlLXBpY2tlci1jb250YWluZXJ7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtsZWZ0OjUwJTttYXJnaW4tbGVmdDotNTAlfUBtZWRpYSAobWF4LXdpZHRoOiAzMjBweCl7LmRhdGUtcGlja2VyX19kYXl7aGVpZ2h0OjMwcHh9fUBtZWRpYSAoaG92ZXI6IGhvdmVyKXsuZGF0ZS1waWNrZXJfX2RheTpob3Zlcntjb2xvcjojZmZmICFpbXBvcnRhbnQ7Zm9udC13ZWlnaHQ6Ym9sZDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oI2JjOWNmZiksIHRvKCM4YmE0ZjkpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYsICM4YmE0ZjkpfX0uZHJvcC1kb3due3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxOThweDtsZWZ0OjUwJTt6LWluZGV4OjEwMDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MTAwJTttYXJnaW4tdG9wOi0yMDBweDttYXJnaW4tbGVmdDotNTAlO2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC41KTtib3JkZXItcmFkaXVzOjAgMCA0cHggNHB4Oy13ZWJraXQtYm94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowOy13ZWJraXQtdHJhbnNpdGlvbjphbGwgMC4ycyBlYXNlLWluO3RyYW5zaXRpb246YWxsIDAuMnMgZWFzZS1pbn0uZHJvcC1kb3duLS1zaG93ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0uZHJvcC1kb3duX193cmFwe3BhZGRpbmctdG9wOjdweDtwYWRkaW5nLWxlZnQ6MTRweDtwYWRkaW5nLXJpZ2h0OjdweDtwYWRkaW5nLWJvdHRvbTo4cHh9LmRyb3AtZG93bl9fY291bnQtbGlzdHttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lfS5kcm9wLWRvd25fX2NvdW50LWl0ZW17ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbi1ib3R0b206N3B4fS5kcm9wLWRvd25fX2NvdW50LWl0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LmRyb3AtZG93bl9fY291bnRlci1tZW51e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDo5MnB4fS5kcm9wLWRvd25fX2NvdW50LWl0ZW0tbmFtZXttYXJnaW46MDtwYWRkaW5nOjA7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uZHJvcC1kb3duX19zZWxlY3Qtdmlld3t3aWR0aDoyMHB4O21hcmdpbjowO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LWFsaWduOmNlbnRlcn0uZHJvcC1kb3duX19jb3VudGVyLWJ0bntwb3NpdGlvbjpyZWxhdGl2ZTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtwYWRkaW5nOjA7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxOHB4O3RleHQtYWxpZ246Y2VudGVyO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuNSk7Ym9yZGVyLXJhZGl1czo1MCU7Y3Vyc29yOnBvaW50ZXJ9LmRyb3AtZG93bl9fY291bnRlci1idG4tLXBsdXM6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDoycHg7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7Y29udGVudDpcXFwiK1xcXCJ9LmRyb3AtZG93bl9fY291bnRlci1idG4tLW1pbnVzOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MnB4O3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO2NvbnRlbnQ6XFxcIi1cXFwifS5kcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZHtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtjdXJzb3I6ZGVmYXVsdH0uZHJvcC1kb3duX19jb250cm9se2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW4tdG9wOjIwcHh9LmRyb3AtZG93bl9fYnV0dG9ue3BhZGRpbmc6MDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXR9LmRyb3AtZG93bl9fYnV0dG9uOmhvdmVye2NvbG9yOiNiYzljZmZ9LmRyb3AtZG93bl9fYnV0dG9uOmFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDNweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoM3B4KX0uZHJvcC1kb3duX19idXR0b24tLWFjY2VudHtjb2xvcjojYmM5Y2ZmfS5kcm9wLWRvd25fX2J1dHRvbi0tYWNjZW50OmhvdmVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KX0uZHJvcC1kb3duX19idXR0b24tLWhpZGV7b3BhY2l0eTowO3Zpc2liaWxpdHk6aGlkZGVufS5kcm9wLWRvd24tY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlfS5pbnB1dC1ncm91cHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O21hcmdpbjowfS5pbnB1dC1ncm91cC0tY29sdW1uey1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQsLmlucHV0LWdyb3VwOmZvY3VzIC5pbnB1dC1ncm91cF9faW5wdXR7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVyLCAuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVyLCAuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9faW5wdXQ6OnBsYWNlaG9sZGVyLC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cDpob3ZlciAuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdCwuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19idXR0b24tc3BsaXR7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19sYWJlbHttYXJnaW46MDttYXJnaW4tYm90dG9tOjVweH0uaW5wdXQtZ3JvdXBfX2Rlc2Nye21hcmdpbjowO3BhZGRpbmctYm90dG9tOjRweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNDUpO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIlF1aWNrc2FuZFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmlucHV0LWdyb3VwX19sYWJlbC0tYmlne2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uaW5wdXQtZ3JvdXBfX3NwbGl0e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTttYXJnaW46MH0uaW5wdXQtZ3JvdXBfX2lucHV0ey13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MTAwJTtwYWRkaW5nOjlweCAxNHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Zm9udC1zaXplOjE0cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtsaW5lLWhlaWdodDoyNHB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItcmFkaXVzOjRweDtvdXRsaW5lOm5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOmJvcmRlciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpib3JkZXIgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9faW5wdXQtLWljb257YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fICsgXCIpIG5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOjk1JSBjZW50ZXJ9LmlucHV0LWdyb3VwX19pbnB1dC0tYnV0dG9uLXNwbGl0e3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctcmlnaHQ6MDtib3JkZXItcmlnaHQ6bm9uZTtib3JkZXItcmFkaXVzOjRweCAwIDAgNHB4fS5pbnB1dC1ncm91cF9faW5wdXQtLWZha2V7Y3Vyc29yOnBvaW50ZXJ9LmlucHV0LWdyb3VwX19pbnB1dC0tYWN0aXZle2JvcmRlci1jb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXJ7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSkgIWltcG9ydGFudH0uaW5wdXQtZ3JvdXBfX2lucHV0LS1ob3ZlcjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjQpO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIlF1aWNrc2FuZFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjE0cHg7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXNpemU6MTRweDstbW96LXRyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlO3RyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXNpemU6MTRweDstbXMtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXNpemU6MTRweDstbXMtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDo6cGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxNHB4Oy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDpob3ZlciwuaW5wdXQtZ3JvdXBfX2lucHV0OmZvY3Vze2JvcmRlci1jb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9faW5wdXQ6aG92ZXIrLmlucHV0LWdyb3VwX19idXR0b24tc3BsaXQsLmlucHV0LWdyb3VwX19pbnB1dDpmb2N1cysuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdHtib3JkZXItY29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9faW5wdXQtLWRhcmstcGxhY2Vob2xkZXI6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjo6cGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6NDRweDtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItbGVmdDpub25lO2JvcmRlci1yYWRpdXM6MCA0cHggNHB4IDA7b3V0bGluZTpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNpdGlvbjpib3JkZXIgMC40cyBlYXNlO3RyYW5zaXRpb246Ym9yZGVyIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdCBpbWd7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZTt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjFzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4xcyBlYXNlLCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2V9LmlucHV0LWdyb3VwX19idXR0b24tc3BsaXQtLWRvd24tYW5pbWF0aW9uOmFjdGl2ZSBpbWd7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCl9LmlucHV0LWdyb3VwX19idXR0b24tc3BsaXQtLXJpZ2h0LWFuaW1hdGlvbjphY3RpdmUgaW1ney13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpfS5nbGlkZXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH0uZ2xpZGUgKnstd2Via2l0LWJveC1zaXppbmc6aW5oZXJpdDtib3gtc2l6aW5nOmluaGVyaXR9LmdsaWRlX190cmFja3tvdmVyZmxvdzpoaWRkZW59LmdsaWRlX19zbGlkZXN7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtsaXN0LXN0eWxlOm5vbmU7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXRyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDt0cmFuc2Zvcm0tc3R5bGU6cHJlc2VydmUtM2Q7LW1zLXRvdWNoLWFjdGlvbjpwYW4tWTt0b3VjaC1hY3Rpb246cGFuLVk7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MDt3aGl0ZS1zcGFjZTpub3dyYXA7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOm5vd3JhcDtmbGV4LXdyYXA6bm93cmFwO3dpbGwtY2hhbmdlOnRyYW5zZm9ybX0uZ2xpZGVfX3NsaWRlcy0tZHJhZ2dpbmd7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5nbGlkZV9fc2xpZGV7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7d2hpdGUtc3BhY2U6bm9ybWFsOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZTstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnR9LmdsaWRlX19zbGlkZSBhey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1kcmFnOm5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfS5nbGlkZV9fYXJyb3dzey13ZWJraXQtdG91Y2gtY2FsbG91dDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uZ2xpZGVfX2J1bGxldHN7LXdlYmtpdC10b3VjaC1jYWxsb3V0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5nbGlkZS0tcnRse2RpcmVjdGlvbjpydGx9LmhvdGVsLWNhcmR7d2lkdGg6MjcwcHg7YmFja2dyb3VuZDojZmZmO2JvcmRlci1yYWRpdXM6NHB4Oy13ZWJraXQtYm94LXNoYWRvdzowcHggMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSk7Ym94LXNoYWRvdzowcHggMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSl9LmhvdGVsLWNhcmQ6aG92ZXIgLmdsaWRlX19hcnJvd3N7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0uaG90ZWwtY2FyZCAuZ2xpZGVfX3NsaWRlc3ttYXJnaW46MH0uaG90ZWwtY2FyZCAuZ2xpZGVfX3NsaWRlIGltZ3tib3JkZXItcmFkaXVzOjRweCA0cHggMCAwfS5ob3RlbC1jYXJkIC5nbGlkZV9fYXJyb3dze3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246YWxsIDAuMnMgZWFzZS1pbjt0cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2UtaW59LmhvdGVsLWNhcmRfX3NsaWRlcntwb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6MTUycHh9LmhvdGVsLWNhcmRfX2J1bGxldHN7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MTVweDtib3R0b206MTZweDtmb250LXNpemU6MH0uaG90ZWwtY2FyZF9fYnVsbGV0cyBidXR0b257ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6N3B4O2hlaWdodDo3cHg7bWFyZ2luLXJpZ2h0OjMuNzVweDtwYWRkaW5nOjA7Zm9udC1zaXplOjA7dmVydGljYWwtYWxpZ246bWlkZGxlO2JvcmRlcjoxcHggc29saWQgI2ZmZjtib3JkZXItcmFkaXVzOjUwJTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2N1cnNvcjpwb2ludGVyfS5ob3RlbC1jYXJkX19idWxsZXRzIGJ1dHRvbjpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS5ob3RlbC1jYXJkX19idWxsZXRzIC5nbGlkZV9fYnVsbGV0LS1hY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5ob3RlbC1jYXJkX19zbGlkZXItYnRue3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDo0MnB4O2hlaWdodDoxNTJweDtmb250LXNpemU6MDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgcmlnaHQgdG9wLCBmcm9tKHJnYmEoMCwwLDAsMC41KSksIGNvbG9yLXN0b3AoOTkuOTklLCByZ2JhKDAsMCwwLDApKSwgdG8ocmdiYSgyNTUsMjU1LDI1NSwwKSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDkwZGVnLCByZ2JhKDAsMCwwLDAuNSkgMCUsIHJnYmEoMCwwLDAsMCkgOTkuOTklLCByZ2JhKDI1NSwyNTUsMjU1LDApIDEwMCUpO2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6NXB4IDAgMCAwO2N1cnNvcjpwb2ludGVyfS5ob3RlbC1jYXJkX19zbGlkZXItYnRuOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NjlweDtsZWZ0OjE4cHg7d2lkdGg6OHB4O2hlaWdodDoxM3B4O2NvbnRlbnQ6XFxcIlxcXCI7Ym9yZGVyOm5vbmU7YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fICsgXCIpIG5vLXJlcGVhdH0uaG90ZWwtY2FyZF9fc2xpZGVyLWJ0bi0tbmV4dHtsZWZ0OmF1dG87cmlnaHQ6LTFweDtib3JkZXItcmFkaXVzOjAgMCAwIDVweDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LmhvdGVsLWNhcmRfX2luZm97cGFkZGluZzoyMHB4IDIwcHh9LmhvdGVsLWNhcmRfX2luZm8taXRlbXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmhvdGVsLWNhcmRfX2luZm8taXRlbTpmaXJzdC1jaGlsZHtwYWRkaW5nLWJvdHRvbToxMHB4O21hcmdpbi1ib3R0b206MTBweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMSl9LmhvdGVsLWNhcmRfX3RpdGxle21hcmdpbjowO2ZvbnQtc2l6ZToxM3B4fS5ob3RlbC1jYXJkX190aXRsZSBhe2NvbG9yOnRyYW5zcGFyZW50O3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiMxZjIwNDE7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaG90ZWwtY2FyZF9fdGl0bGUgYTpob3Zlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmhvdGVsLWNhcmRfX3RpdGxlIGJ7Zm9udC1zaXplOjEycHg7Y29sb3I6I2JjOWNmZjt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmhvdGVsLWNhcmRfX3RpdGxlIHNwYW57Zm9udC1zaXplOjIwcHg7Zm9udC13ZWlnaHQ6Ym9sZH0uaG90ZWwtY2FyZF9fdGV4dHtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO21hcmdpbjowO2ZvbnQtc2l6ZToxMnB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KX0uaG90ZWwtY2FyZF9fdGV4dCBie2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIlF1aWNrc2FuZFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjE0cHh9LmhvdGVsLWNhcmRfX3RleHQtLWZ6bGFyZ2V7Zm9udC1zaXplOjE0cHh9LnJhbmdlX192aWV3e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW4tYm90dG9tOjIycHh9LnJhbmdlX19wcmljZSBpbnB1dHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6NTBweDttYXJnaW46MDttYXJnaW4tcmlnaHQ6MnB4O2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIlF1aWNrc2FuZFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6bm9ybWFsO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC40NSk7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7dmVydGljYWwtYWxpZ246dG9wO2JvcmRlcjpub25lO2JhY2tncm91bmQ6dHJhbnNwYXJlbnR9LnJhbmdlX19wcmljZSBpbnB1dDpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowO21hcmdpbi1sZWZ0OjJweH0ucmFuZ2VfX3NsaWRlcntoZWlnaHQ6NnB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnJhbmdlX19zbGlkZXIgLm5vVWktY29ubmVjdHtoZWlnaHQ6NnB4O2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjNmZjZjk3KSwgdG8oIzY2ZDJlYSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKX0ucmFuZ2VfX3NsaWRlciAubm9VaS1oYW5kbGV7d2lkdGg6MTRweDtoZWlnaHQ6MTRweDtib3JkZXI6MnB4IHNvbGlkICNmZmZmZmY7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCM2ZmNmOTcpLCB0bygjNjZkMmVhKSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNmZjZjk3IDAlLCAjNjZkMmVhIDEwMCUpOy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZCAwLjRzIGVhc2UgMHMsIGJvcmRlciAwLjRzIGVhc2UgMHM7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDAuNHMgZWFzZSAwcywgYm9yZGVyIDAuNHMgZWFzZSAwc30ucmFuZ2VfX3NsaWRlciAubm9VaS1oYW5kbGU6OmFmdGVyLC5yYW5nZV9fc2xpZGVyIC5ub1VpLWhhbmRsZTo6YmVmb3Jle2Rpc3BsYXk6bm9uZX0ucmFuZ2VfX3NsaWRlciAubm9VaS1oYW5kbGUtdXBwZXIsLnJhbmdlX19zbGlkZXIgLm5vVWktaGFuZGxlLWxvd2Vye3JpZ2h0Oi04cHh9LnJhbmdlX19jb3N0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowO21hcmdpbi1yaWdodDo4cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpub3JtYWw7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LnJhbmdlX19jb3N0OmZpcnN0LWNoaWxke3Bvc2l0aW9uOnJlbGF0aXZlfS5yYW5nZV9fY29zdDpmaXJzdC1jaGlsZDo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6LTcuNXB4O2NvbnRlbnQ6XFxcIi1cXFwiO2ZvbnQtc2l6ZToxMHB4fS5yYW5nZV9fY29zdDpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS5yYW5nZV9fdGl0bGV7bWFyZ2luOjA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5jaGVja2JveF9fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxOHB4O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uY2hlY2tib3hfX3RpdGxlLS1leHBhbmRhYmxle3Bvc2l0aW9uOnJlbGF0aXZlfS5jaGVja2JveF9fdGl0bGUtLWV4cGFuZGFibGUgYnV0dG9ue3dpZHRoOjEwMCU7Y29sb3I6IzFmMjA0MTt0ZXh0LWFsaWduOmxlZnR9LmNoZWNrYm94X190aXRsZS0tZXhwYW5kYWJsZSBidXR0b246OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1cHg7cmlnaHQ6MTZweDt3aWR0aDoxMnB4O2hlaWdodDo4cHg7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzVfX18gKyBcIikgbm8tcmVwZWF0O2N1cnNvcjpwb2ludGVyfS5jaGVja2JveF9fdGl0bGUtLWV4cGFuZGFibGUtb3BlbiBidXR0b246OmFmdGVyey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTtyaWdodDoxN3B4fS5jaGVja2JveF9fZXhwYW5kYWJsZXttYXJnaW46MDtwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2JvcmRlcjpub25lO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXJ9LmNoZWNrYm94X19pdGVte3dpZHRoOjI0MHB4O21hcmdpbjowO21hcmdpbi1ib3R0b206MTJweH0uY2hlY2tib3hfX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LmNoZWNrYm94LS1yaWNoIC5jaGVja2JveF9faXRlbXt3aWR0aDoyNjRweH0uY2hlY2tib3hfX2l0ZW0gaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXXtkaXNwbGF5Om5vbmV9LmNoZWNrYm94X19pdGVtIGxhYmVse3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7cGFkZGluZy1sZWZ0OjMwcHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjQ1KTtmb250LXNpemU6MTRweDtmb250LXdlaWdodDpub3JtYWw7bGluZS1oZWlnaHQ6MThweDtjdXJzb3I6cG9pbnRlcn0uY2hlY2tib3hfX2l0ZW0gbGFiZWw6OmJlZm9yZXstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246YWJzb2x1dGU7dG9wOi0ycHg7bGVmdDowO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItcmFkaXVzOjRweDstd2Via2l0LXRyYW5zaXRpb246Ym9yZGVyIDAuM3MgZWFzZSAwczt0cmFuc2l0aW9uOmJvcmRlciAwLjNzIGVhc2UgMHN9LmNoZWNrYm94X19pdGVtIGxhYmVsOjphZnRlcntjb250ZW50OlxcXCJcXFwiO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6M3B4O2xlZnQ6N3B4O3dpZHRoOjRweDtoZWlnaHQ6NnB4O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICNiYzljZmY7Ym9yZGVyLXJpZ2h0OjJweCBzb2xpZCAjYmM5Y2ZmO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAwLjNzIGVhc2UgMHMsIHZpc2liaWxpdHkgMC4zcyBlYXNlIDBzO3RyYW5zaXRpb246b3BhY2l0eSAwLjNzIGVhc2UgMHMsIHZpc2liaWxpdHkgMC4zcyBlYXNlIDBzfS5jaGVja2JveF9faXRlbSBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQrbGFiZWw6OmFmdGVye3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjF9LmNoZWNrYm94X19pdGVtIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCtsYWJlbDo6YmVmb3Jle2JvcmRlci1jb2xvcjojYmM5Y2ZmfS5jaGVja2JveF9fZGVzY3J7ZGlzcGxheTpibG9jazttYXJnaW46MDttYXJnaW4tdG9wOjVweDtmb250LXdlaWdodDpub3JtYWw7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE0cHh9LmNoZWNrYm94X19pdGVtIC5jaGVjYm94X19sYmwtLXJpY2h7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxOHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmNoZWNrYm94X19pdGVtLWxpc3QtLWhpZGV7ZGlzcGxheTpub25lfS5yYXRlYnRuX190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjE4cHg7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5yYXRlYnRuX19pdGVte2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOnJldmVyc2U7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlO2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlOy13ZWJraXQtYm94LXBhY2s6ZW5kOy1tcy1mbGV4LXBhY2s6ZW5kO2p1c3RpZnktY29udGVudDpmbGV4LWVuZDttYXJnaW4tcmlnaHQ6MjVweDtmb250LXNpemU6MH0ucmF0ZWJ0bl9faXRlbTpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS5yYXRlYnRuX19pdGVtIGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl17ZGlzcGxheTpub25lfS5yYXRlYnRuX19pdGVtIGxhYmVse3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDttYXJnaW4tbGVmdDo0cHg7YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fICsgXCIpIG5vLXJlcGVhdDtjdXJzb3I6cG9pbnRlcn0ucmF0ZWJ0bl9faXRlbSBsYWJlbDpsYXN0LWNoaWxke21hcmdpbi1sZWZ0OjB9LnJhdGVidG5fX2l0ZW0gbGFiZWw6aG92ZXIsLnJhdGVidG5fX2l0ZW0gbGFiZWw6aG92ZXIgfiBsYWJlbHtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gKyBcIikgbm8tcmVwZWF0fS5yYXRlYnRuX19pdGVtIGlucHV0OmNoZWNrZWQgfiBsYWJlbHtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gKyBcIikgbm8tcmVwZWF0fS5yYXRlYnRuX19pdGVtLXdyYXB7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0ucGFnaW5hdGlvbl9fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxNnB4O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucGFnaW5hdGlvbl9fcGFnZXN7bWFyZ2luOjA7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0ucGFnaW5hdGlvbl9fcGFnZS1pdGVte2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcH0ucGFnaW5hdGlvbl9fcGFnZS1pdGVtIGF7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjM2cHg7cGFkZGluZzoxMnB4IDBweDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIiwgXFxcIlF1aWNrc2FuZFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LnBhZ2luYXRpb25fX3BhZ2UtaXRlbS0tYWN0aXZlIGF7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oI2JjOWNmZiksIHRvKCM4YmE0ZjkpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYgMCUsICM4YmE0ZjkgMTAwJSk7Ym9yZGVyLXJhZGl1czo1MCV9LnBhZ2luYXRpb25fX3BhZ2UtbmV4dHtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tbGVmdDotMnB4fS5wYWdpbmF0aW9uX19wYWdlLW5leHQgYXt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O2NvbG9yOiNmZmY7Zm9udC1zaXplOjA7Zm9udC13ZWlnaHQ6Ym9sZDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oIzZmY2Y5NyksIHRvKCM2NmQyZWEpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICM2ZmNmOTcgMCUsICM2NmQyZWEgMTAwJSk7Ym9yZGVyLXJhZGl1czo1MCV9LnBhZ2luYXRpb25fX3BhZ2UtbmV4dDo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7cmlnaHQ6MDtsZWZ0OjA7d2lkdGg6MThweDtoZWlnaHQ6MTdweDttYXJnaW46YXV0bztjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyArIFwiKSBuby1yZXBlYXR9LnBhZ2luYXRpb25fX292ZXJ2aWV3e3BhZGRpbmctbGVmdDo2cHh9LnBhZ2luYXRpb25fX292ZXJ2aWV3IHB7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjttYXJnaW46MDttYXJnaW4tdG9wOjdweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyNHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LnBhZ2UtZm9vdGVye3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6I2ZmZjstd2Via2l0LWJveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KTtib3gtc2hhZG93OjAgMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSl9LnBhZ2UtZm9vdGVyOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206NzhweDt3aWR0aDoxMDAlO2hlaWdodDoxcHg7YmFja2dyb3VuZDpyZ2JhKDMxLDMyLDY1LDAuMSk7Y29udGVudDpcXFwiXFxcIn0ucGFnZS1mb290ZXItLXNob3J0IHNlY3Rpb24udGV4dC1jb250ZW50e3dpZHRoOjQ5JTt0ZXh0LWFsaWduOmNlbnRlcn0ucGFnZS1mb290ZXItLXNob3J0OjphZnRlcntkaXNwbGF5Om5vbmV9LnBhZ2UtZm9vdGVyLS1ib3JkZXItdG9we2JvcmRlci10b3A6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSl9LnBhZ2UtZm9vdGVyX193cmFwLS1zaG9ydHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO3BhZGRpbmc6MTAwcHggMCAxMDhweH0ucGFnZS1mb290ZXJfX3dyYXAtLXNob3J0IGRpdi5sb2dve21hcmdpbi1sZWZ0OjEycHg7bWFyZ2luLWJvdHRvbToxN3B4fS5wYWdlLWZvb3Rlcl9fd3JhcC0tc2hvcnQgLnRleHQtY29udGVudHttYXJnaW4tYm90dG9tOjI5cHh9LnBhZ2UtZm9vdGVyX19jb250ZW50e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cGFkZGluZzoxMDFweCAwIDk2cHh9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXB7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1mbGV4OjE7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmctdG9wOjJweH0ucGFnZS1mb290ZXJfX3NpZGUtaW5mb3tkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmc6MjlweCAwfS5wYWdlLWZvb3RlciAudGV4dC1jb250ZW50e3dpZHRoOjI2MHB4fS5wYWdlLWZvb3RlciAudGV4dC1jb250ZW50X190aXRsZXttYXJnaW4tYm90dG9tOjE5cHh9LnBhZ2UtZm9vdGVyIC5uYXYtbWVudV9fdGl0bGV7bWFyZ2luLWJvdHRvbToyMnB4fS5wYWdlLWZvb3RlciAubmF2LW1lbnVfX2l0ZW17bWFyZ2luLWJvdHRvbToyMXB4fS5wYWdlLWZvb3RlciAubG9nb3ttYXJnaW4tYm90dG9tOjE4cHh9LnBhZ2UtZm9vdGVyIC5pbnB1dC1ncm91cHttYXJnaW4tdG9wOjIzcHh9LnBhZ2UtZm9vdGVyIC5pbnB1dC1ncm91cF9faW5wdXQtLWJ1dHRvbi1zcGxpdHt3aWR0aDoyMTZweH0ucGFnZS1mb290ZXJfX2NvbC0tbGFyZ2U6Zmlyc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjMuNSV9QG1lZGlhICh3aWR0aDogMTQ0MHB4KXsucGFnZS1mb290ZXJfX2NvbDpudGgtY2hpbGQoMil7bWFyZ2luLXJpZ2h0OjkzcHh9LnBhZ2UtZm9vdGVyX19jb2w6bGFzdC1jaGlsZHttYXJnaW4tbGVmdDphdXRvfS5wYWdlLWZvb3Rlcl9fY29sLWdyb3VwIC5wYWdlLWZvb3Rlcl9fY29sOmZpcnN0LWNoaWxke21hcmdpbi1yaWdodDo1N3B4fX1AbWVkaWEgKG1heC13aWR0aDogMTEwMHB4KXsucGFnZS1mb290ZXJfX2NvbC1ncm91cHstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXB9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2x7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjUwJTttYXJnaW4tYm90dG9tOjQwcHh9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2w6bnRoLWNoaWxkKDMpe21hcmdpbi1ib3R0b206MH0ucGFnZS1mb290ZXJfX2NvbC1ncm91cCAucGFnZS1mb290ZXJfX2NvbDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0ucGFnZS1mb290ZXJfX2NvbC1ncm91cCAucGFnZS1mb290ZXJfX2NvbDpsYXN0LWNoaWxkIC50ZXh0LWNvbnRlbnR7d2lkdGg6ODUlfS5wYWdlLWZvb3Rlcl9fY29sLWdyb3VwIC5wYWdlLWZvb3Rlcl9fY29sOmxhc3QtY2hpbGQgLmlucHV0LWdyb3VwX19pbnB1dHt3aWR0aDo4My4wNyV9LnBhZ2UtZm9vdGVyX19jb250ZW50Pi5wYWdlLWZvb3Rlcl9fY29sey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoyNDBweDttYXJnaW4tcmlnaHQ6MTQlfS5wYWdlLWZvb3Rlcl9fY29udGVudD4ucGFnZS1mb290ZXJfX2NvbCAudGV4dC1jb250ZW50e3dpZHRoOjEwMCV9LnBhZ2UtZm9vdGVyX19jb250ZW50e3BhZGRpbmctdG9wOjUwcHg7cGFkZGluZy1ib3R0b206NTBweH19QG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KXsucGFnZS1mb290ZXIgLm5hdi1tZW51X190aXRsZXttYXJnaW4tYm90dG9tOjEwcHg7Zm9udC1zaXplOjE0cHh9LnBhZ2UtZm9vdGVyIC5uYXYtbWVudV9faXRlbXttYXJnaW4tYm90dG9tOjEwcHh9LnBhZ2UtZm9vdGVyIC50ZXh0LWNvbnRlbnRfX3RpdGxle21hcmdpbi1ib3R0b206MTBweDtwYWRkaW5nLWJvdHRvbToxMHB4O2ZvbnQtc2l6ZToxNHB4O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMxZjIwNDF9LnBhZ2UtZm9vdGVyX19jb250ZW50ey13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO3BhZGRpbmctdG9wOjMwcHg7cGFkZGluZy1ib3R0b206NDBweH0ucGFnZS1mb290ZXJfX2NvbnRlbnQ+LnBhZ2UtZm9vdGVyX19jb2x7d2lkdGg6MTAwJTttYXJnaW4tYm90dG9tOjQwcHh9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2x7d2lkdGg6MTAwJTttYXJnaW4tYm90dG9tOjQwcHh9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2w6bnRoLWNoaWxkKDMpe21hcmdpbi1ib3R0b206MzBweH0ucGFnZS1mb290ZXJfX2NvbC1ncm91cCAucGFnZS1mb290ZXJfX2NvbDpsYXN0LWNoaWxkIC50ZXh0LWNvbnRlbnR7d2lkdGg6MTAwJX0ucGFnZS1mb290ZXJfX2NvbC1ncm91cCAucGFnZS1mb290ZXJfX2NvbDpsYXN0LWNoaWxkIC5pbnB1dC1ncm91cHttYXJnaW4tdG9wOjIwcHh9LnBhZ2UtZm9vdGVyX19jb2wgLmlucHV0LWdyb3VwX19zcGxpdHstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfX1AbWVkaWEgKG1heC13aWR0aDogNTU1cHgpey5wYWdlLWZvb3Rlcjo6YWZ0ZXJ7Ym90dG9tOjEyMHB4fS5wYWdlLWZvb3Rlcl9fc2lkZS1pbmZvey13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5wYWdlLWZvb3Rlcl9fc2lkZS1pbmZvIC5jb3B5cmlnaHR7bWFyZ2luLWJvdHRvbToyMHB4O3RleHQtYWxpZ246Y2VudGVyfX1AbWVkaWEgKG1heC13aWR0aDogMzk0cHgpey5wYWdlLWZvb3Rlcjo6YWZ0ZXJ7Ym90dG9tOjEzNXB4fX1AbWVkaWEgKG1heC13aWR0aDogNDI1cHgpey5wYWdlLWZvb3Rlcl9fd3JhcHtwYWRkaW5nLXJpZ2h0OjIwcHg7cGFkZGluZy1sZWZ0OjIwcHh9fS5uYXYtbWVudV9fbGlzdHttYXJnaW46MDtwYWRkaW5nOjA7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtsaXN0LXN0eWxlOm5vbmV9Lm5hdi1tZW51X190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjIwcHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5uYXYtbWVudV9faXRlbXttYXJnaW4tYm90dG9tOjIwcHh9Lm5hdi1tZW51X19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5uYXYtbWVudV9faXRlbSBhe2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxN3B4O3RleHQtZGVjb3JhdGlvbjpub25lOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9Lm5hdi1tZW51X19pdGVtIGE6aG92ZXJ7Y29sb3I6Izk5NjlmZn1AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpey5uYXYtbWVudV9fdGl0bGV7cGFkZGluZy1ib3R0b206MTBweDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjMWYyMDQxfS5uYXYtbWVudV9faXRlbSBhe2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEwMCU7dmVydGljYWwtYWxpZ246dG9wfX0udGV4dC1jb250ZW50X190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjIwcHg7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiLCBcXFwiUXVpY2tzYW5kXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS50ZXh0LWNvbnRlbnRfX3BhcmFncmFwaHttYXJnaW46MDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjRweH0uc29jaWFsLWJ1dHRvbnNfX2xpc3R7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lfS5zb2NpYWwtYnV0dG9uc19faXRlbXttYXJnaW4tcmlnaHQ6MjRweH0uc29jaWFsLWJ1dHRvbnNfX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0uc29jaWFsLWJ1dHRvbnNfX2xpbmsgLmljb24tY29udGVudHstd2Via2l0LXRyYW5zaXRpb246ZmlsbCAwLjRzIGVhc2U7dHJhbnNpdGlvbjpmaWxsIDAuNHMgZWFzZX0uc29jaWFsLWJ1dHRvbnNfX2xpbms6aG92ZXIgLmljb24tY29udGVudHtmaWxsOiM5OTY5ZmZ9LmNvcHlyaWdodHtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJRdWlja3NhbmRcXFwiLCBcXFwiQXJpYWxcXFwiLCBzYW5zLXNlcmlmO21hcmdpbjowO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MTdweH0ucm9vbXMtcGFnZSAucGFnaW5hdGlvbnt0ZXh0LWFsaWduOmNlbnRlcn0ucm9vbXMtcGFnZSAuZGF0ZS1waWNrZXItY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlfS5yb29tcy1wYWdlIC5kYXRlLXBpY2tlcnt0b3A6MjAzcHh9LnJvb21zLXBhZ2UgLmRhdGUtcGlja2VyIC5kYXRlLXBpY2tlcl9fZGF5e2hlaWdodDozMnB4fS5yb29tcy1wYWdlX193cmFwe2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cGFkZGluZzozMHB4IDBweCA3MXB4fS5maWx0ZXJ7bWFyZ2luLXJpZ2h0OjYwcHh9LmZpbHRlcl9fd3JhcHt3aWR0aDoyNjZweH0uZmlsdGVyX19pdGVte21hcmdpbi1ib3R0b206MzBweH0uZmlsdGVyX19pdGVtLS1tYnN7bWFyZ2luLWJvdHRvbToyMHB4fS5maWx0ZXJfX2V4cGxhbnttYXJnaW46MDttYXJnaW4tdG9wOjE0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE0cHh9LmhvdGVsc19fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToyMXB4O2ZvbnQtc2l6ZToyM3B4O2ZvbnQtd2VpZ2h0OmJvbGQ7bGluZS1oZWlnaHQ6MzBweH0uaG90ZWxzX19saXN0e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47d2lkdGg6MTAwJTttYXJnaW46MDttYXJnaW4tYm90dG9tOjI1cHg7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0uaG90ZWxzX19pdGVte21hcmdpbi1ib3R0b206MjFweH1AbWVkaWEgKG1heC13aWR0aDogNDI1cHgpey5yb29tcy1wYWdlX193cmFwe3BhZGRpbmctbGVmdDoyMHB4O3BhZGRpbmctcmlnaHQ6MjBweH19QG1lZGlhIChtYXgtd2lkdGg6IDU5NXB4KXsuaG90ZWxzX19saXN0ey13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9fUBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCl7LnJvb21zLXBhZ2VfX3dyYXB7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmZpbHRlcnt3aWR0aDoyNjZweDttYXJnaW4tcmlnaHQ6MH0uZmlsdGVyX193cmFwe3dpZHRoOjEwMCV9fVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9RdWlja3NhbmQtQm9sZC1kOThlNjcyLndvZmZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy9RdWlja3NhbmQtQm9sZC03MGJhZWNhLnR0ZlwiOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbGlzdCwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogbGlzdFtpXVsxXSxcbiAgICAgIG1lZGlhOiBsaXN0W2ldWzJdLFxuICAgICAgc291cmNlTWFwOiBsaXN0W2ldWzNdXG4gICAgfTtcblxuICAgIGlmIChzdHlsZXNJbkRvbVttb2R1bGVJZF1baV0pIHtcbiAgICAgIHN0eWxlc0luRG9tW21vZHVsZUlkXVtpXShwYXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb21bbW9kdWxlSWRdLnB1c2goYWRkU3R5bGUocGFydCwgb3B0aW9ucykpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIG1vZHVsZUlkID0gb3B0aW9ucy5iYXNlID8gbW9kdWxlSWQgKyBvcHRpb25zLmJhc2UgOiBtb2R1bGVJZDtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG5cbiAgaWYgKCFzdHlsZXNJbkRvbVttb2R1bGVJZF0pIHtcbiAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0gPSBbXTtcbiAgfVxuXG4gIG1vZHVsZXNUb0RvbShtb2R1bGVJZCwgbGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc3R5bGVzSW5Eb21bbW9kdWxlSWRdKSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0gPSBbXTtcbiAgICB9XG5cbiAgICBtb2R1bGVzVG9Eb20obW9kdWxlSWQsIG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaiA9IG5ld0xpc3QubGVuZ3RoOyBqIDwgc3R5bGVzSW5Eb21bbW9kdWxlSWRdLmxlbmd0aDsgaisrKSB7XG4gICAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF1bal0oKTtcbiAgICB9XG5cbiAgICBzdHlsZXNJbkRvbVttb2R1bGVJZF0ubGVuZ3RoID0gbmV3TGlzdC5sZW5ndGg7XG5cbiAgICBpZiAoc3R5bGVzSW5Eb21bbW9kdWxlSWRdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW21vZHVsZUlkXTtcbiAgICB9XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL1F1aWNrc2FuZC1Cb2xkLmZvbnQtM2M5ZTdiZS5zdmdcIjsiLCJjbGFzcyBFeHBhbmRhYmxlQ2hlY2tib3gge1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG4gICAgaWYgKG9wdGlvbnMuZXhwYW5kYWJsZUJ0bikge1xyXG4gICAgICB0aGlzLmV4cGFuZGFibGVCdG4gPSBvcHRpb25zLmV4cGFuZGFibGVCdG47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgZXhwYW5kYWJsZUJ0biBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmV4cGFuZGFibGVMaXN0KSB7XHJcbiAgICAgIHRoaXMuZXhwYW5kYWJsZUxpc3QgPSBvcHRpb25zLmV4cGFuZGFibGVMaXN0O1xyXG4gICAgICB0aGlzLmlzSGlkZSA9IHRoaXMuZXhwYW5kYWJsZUxpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICAgIFwiY2hlY2tib3hfX2l0ZW0tbGlzdC0taGlkZVwiXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgZXhwYW5kYWJsZUxpc3QgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uVG9nZ2xlSGlkZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IHBhcmVudEV4cGFuZGFibGVCdG4gPSB0aGlzLmV4cGFuZGFibGVCdG4ucGFyZW50Tm9kZTtcclxuICAgIHBhcmVudEV4cGFuZGFibGVCdG4uY2xhc3NMaXN0LnRvZ2dsZShcImNoZWNrYm94X190aXRsZS0tZXhwYW5kYWJsZS1vcGVuXCIpO1xyXG4gICAgdGhpcy5leHBhbmRhYmxlTGlzdC5jbGFzc0xpc3QudG9nZ2xlKFwiY2hlY2tib3hfX2l0ZW0tbGlzdC0taGlkZVwiKTtcclxuICB9O1xyXG5cclxuICBpbml0ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5leHBhbmRhYmxlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uVG9nZ2xlSGlkZSk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhwYW5kYWJsZUNoZWNrYm94O1xyXG4iLCJpbXBvcnQgXCIuLi8uLi9zdHlsZS9pbmRleC5zY3NzXCI7XHJcbmltcG9ydCBcIi4vcm9vbXMuc2Nzc1wiO1xyXG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kYXRlLXBpY2tlci9kYXRlLXBpY2tlclwiO1xyXG5pbXBvcnQgRHJvcERvd24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvZHJvcC1kb3duL2Ryb3AtZG93blwiO1xyXG5pbXBvcnQgRXhwYW5kYWJsZUNoZWNrYm94IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94XCI7XHJcbmltcG9ydCBNYWluTWVudSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9tYWluLW1lbnUvbWFpbi1tZW51XCI7XHJcbmltcG9ydCBcIi4uLy4uL2NvbXBvbmVudHMvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlclwiO1xyXG5pbXBvcnQgXCIuLi8uLi9jb21wb25lbnRzL2hvdGVsLWNhcmQvaG90ZWwtY2FyZFwiO1xyXG5cclxuY29uc3QgZGF0ZVBpY2tlckRvbUluZm8gPSB7XHJcbiAgcGFyZW50Tm9kZUlkOiBcImRhdGUtcGlja2VyLWNvbnRhaW5lclwiLFxyXG4gIGRhdGVQaWNrZXJJbnB1dElkOiBcImRhdGUtcGlja2VyLWlucHV0XCIsXHJcbiAgaW5wdXRQbGFjZWhvbGRlcjogXCLQktGL0LHQtdGA0LjRgtC1INC00LDRgtGDXCJcclxufTtcclxuXHJcbmNvbnN0IGRhdGVQaWNrZXIgPSBuZXcgRGF0ZVBpY2tlcihkYXRlUGlja2VyRG9tSW5mbyk7XHJcbmRhdGVQaWNrZXIucmVuZGVyQ2FsZW5kYXIoKTtcclxuXHJcbmNvbnN0IGRyb3BEb3duQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkcm9wLWRvd24tY29udGFpbmVyXCIpO1xyXG5jb25zdCBpbnB1dERyb3BEb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNudW1iZXItYmVkXCIpO1xyXG5cclxuY29uc3QgZHJvcERvd25PcHRpb25zID0ge1xyXG4gIGNvbnRhaW5lcjogZHJvcERvd25Db250YWluZXIsXHJcbiAgaW5wdXQ6IGlucHV0RHJvcERvd24sXHJcbiAgY291bnRFbGVtZW50czogW1xyXG4gICAgeyBuYW1lOiBcItCh0L/QsNC70YzQvdC4XCIsIGNvdW50R3JvdXBOYW1lOiBcImJlZHJvb21zXCIsIHN0YXJ0VmFsdWU6IDIgfSxcclxuICAgIHsgbmFtZTogXCLQmtGA0L7QstCw0YLQuFwiLCBjb3VudEdyb3VwTmFtZTogXCJiZWRcIiwgc3RhcnRWYWx1ZTogMiB9LFxyXG4gICAgeyBuYW1lOiBcItCS0LDQvdC90YvQtSDQutC+0LzQvdCw0YLRi1wiLCBjb3VudEdyb3VwTmFtZTogXCJiYXRoXCIsIHN0YXJ0VmFsdWU6IDAgfVxyXG4gIF0sXHJcbiAgY291bnRHcm91cFZpZXc6IHtcclxuICAgIGJlZHJvb21zOiB7IGNvdW50ZXI6IDIsIHZpZXdzOiBbXCLRgdC/0LDQu9GM0L3Rj1wiLCBcItGB0L/QsNC70YzQvdC4XCIsIFwi0YHQv9Cw0LvQtdC9XCJdIH0sXHJcbiAgICBiZWQ6IHsgY291bnRlcjogMiwgdmlld3M6IFtcItC60YDQvtCy0LDRgtGMXCIsIFwi0LrRgNC+0LLQsNGC0LhcIiwgXCLQutGA0L7QstCw0YLQtdC5XCJdIH0sXHJcbiAgICBiYXRoOiB7XHJcbiAgICAgIGNvdW50ZXI6IDAsXHJcbiAgICAgIHZpZXdzOiBbXCLQstCw0L3QvdCw0Y8g0LrQvtC80L3QsNGC0LBcIiwgXCLQstCw0L3QvdGL0LUg0LrQvtC80L3QsNGC0YtcIiwgXCLQstCw0L3QvdGL0YUg0LrQvtC80L3QsNGCXCJdXHJcbiAgICB9XHJcbiAgfSxcclxuICBwbGFjZWhvbGRlcjogXCLQo9C00L7QsdGB0YLQstCwINC90L7QvNC10YDQsFwiXHJcbn07XHJcblxyXG5jb25zdCBkcm9wRG93biA9IG5ldyBEcm9wRG93bihkcm9wRG93bk9wdGlvbnMpO1xyXG5kcm9wRG93bi5pbml0KCk7XHJcblxyXG5jb25zdCBkcm9wRG93bkd1ZXN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNkcm9wLWRvd24tZ3Vlc3QtY29udGFpbmVyXCJcclxuKTtcclxuY29uc3QgaW5wdXREcm9wRG93bkd1ZXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNudW1iZXItZ3Vlc3RcIik7XHJcblxyXG5jb25zdCBkcm9wRG93bkd1ZXN0T3B0aW9ucyA9IHtcclxuICBjb250YWluZXI6IGRyb3BEb3duR3Vlc3RDb250YWluZXIsXHJcbiAgaW5wdXQ6IGlucHV0RHJvcERvd25HdWVzdCxcclxuICBjb3VudEVsZW1lbnRzOiBbXHJcbiAgICB7IG5hbWU6IFwi0JLQt9GA0L7RgdC70YvQtVwiLCBjb3VudEdyb3VwTmFtZTogXCJndWVzdFwiLCBzdGFydFZhbHVlOiAzIH0sXHJcbiAgICB7IG5hbWU6IFwi0JTQtdGC0LhcIiwgY291bnRHcm91cE5hbWU6IFwiZ3Vlc3RcIiwgc3RhcnRWYWx1ZTogMCB9LFxyXG4gICAgeyBuYW1lOiBcItCc0LvQsNC00LXQvdGG0YtcIiwgY291bnRHcm91cE5hbWU6IFwiY2hpbGRcIiwgc3RhcnRWYWx1ZTogMSB9XHJcbiAgXSxcclxuICBjb3VudEdyb3VwVmlldzoge1xyXG4gICAgZ3Vlc3Q6IHsgY291bnRlcjogMywgdmlld3M6IFtcItCz0L7RgdGC0YxcIiwgXCLQs9C+0YHRgtGPXCIsIFwi0LPQvtGB0YLQtdC5XCJdIH0sXHJcbiAgICBjaGlsZDogeyBjb3VudGVyOiAxLCB2aWV3czogW1wi0LzQu9Cw0LTQtdC90LXRhlwiLCBcItC80LvQsNC00LXQvdGG0LBcIiwgXCLQvNC70LDQtNC10L3RhtC10LJcIl0gfVxyXG4gIH0sXHJcbiAgcGxhY2Vob2xkZXI6IFwiQ9C60L7Qu9GM0LrQviDQs9C+0YHRgtC10LlcIlxyXG59O1xyXG5cclxuY29uc3QgZHJvcERvd25HdWVzdCA9IG5ldyBEcm9wRG93bihkcm9wRG93bkd1ZXN0T3B0aW9ucyk7XHJcbmRyb3BEb3duR3Vlc3QuaW5pdCgpO1xyXG5cclxuY29uc3QgZXhwYW5kYWJsZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2hlY2tib3gtZXhwYW5kYWJsZS1idG5cIik7XHJcbmNvbnN0IGV4cGFuZGFibGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjaGVja2JveC1leHBhbmRhYmxlLWxpc3RcIik7XHJcblxyXG5jb25zdCBleHBhbmRhYmxlQ2hlY2tib3ggPSBuZXcgRXhwYW5kYWJsZUNoZWNrYm94KHtcclxuICBleHBhbmRhYmxlQnRuLFxyXG4gIGV4cGFuZGFibGVMaXN0XHJcbn0pO1xyXG5leHBhbmRhYmxlQ2hlY2tib3guaW5pdCgpO1xyXG5cclxuY29uc3QgbWFpbk1lbnVEb21Ob2RlID0ge1xyXG4gIG1haW5NZW51OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW5NZW51XCIpLFxyXG4gIGJ1cmdlckJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtYWluTWVudUJ1cmdlckljb25cIiksXHJcbiAgYXV0aExpc3Q6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXV0aExpc3RJZFwiKSxcclxuICBwcm9maWxlQnV0dG9uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F1dGhCdXR0b25cIilcclxufTtcclxubmV3IE1haW5NZW51KG1haW5NZW51RG9tTm9kZSk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9hcnJvdy0wMzJiMGQ1LnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9leHBhbmQtbW9yZS1kMDRjOWFmLnN2Z1wiOyIsIi8qIVxuKiBnbG9iYWwvd2luZG93LmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBuZXcgKGV2YWwoXCJyZXF1aXJlKCdqc2RvbScpLkpTRE9NXCIpKShcIlwiKS53aW5kb3c7XG59KTsgZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG5ldyAoZXZhbChcInJlcXVpcmUoJ2pzZG9tJykuSlNET01cIikpKFwiXCIpLndpbmRvdzsiLCJmdW5jdGlvbiBnZXRIdG1sRWxlbWVudCh0YWdOYW1lLCBjbGFzc05hbWUsIHRleHQpIHtcclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgfVxyXG5cclxuICBpZiAodGV4dCkge1xyXG4gICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZWxlbWVudDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmFuZG9tTnVtYmVyKG1pbiwgbWF4KSB7XHJcbiAgY29uc3QgcmFuZG9tTnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKCttYXggLSArbWluKSkgKyArbWluO1xyXG4gIHJldHVybiByYW5kb21OdW1iZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlY2xPZk51bShudW1iZXIsIHRpdGxlcykge1xyXG4gIGNvbnN0IGNhc2VzID0gWzIsIDAsIDEsIDEsIDEsIDJdO1xyXG4gIHJldHVybiB0aXRsZXNbXHJcbiAgICBudW1iZXIgJSAxMDAgPiA0ICYmIG51bWJlciAlIDEwMCA8IDIwXHJcbiAgICAgID8gMlxyXG4gICAgICA6IGNhc2VzW251bWJlciAlIDEwIDwgNSA/IG51bWJlciAlIDEwIDogNV1cclxuICBdO1xyXG59XHJcblxyXG5jbGFzcyBEcm9wRG93biB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMuY29udGFpbmVyKSB7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XHJcbiAgICAgIGNvbnN0IGRyb3BEb3duUGFyZW50ID0gZ2V0SHRtbEVsZW1lbnQoXCJzZWN0aW9uXCIsIFwiZHJvcC1kb3duXCIpO1xyXG4gICAgICB0aGlzLmRyb3BEb3duUGFyZW50ID0gZHJvcERvd25QYXJlbnQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgY29udGFpbmVyKG5vZGUpIGluc2lkZSBjb25zdHJ1Y3RvciBvYmplY3QgYnV0IG5vdCByZWNlaXZlZFwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuaW5wdXQpIHtcclxuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBvcHRpb25zLnBsYWNlaG9sZGVyXHJcbiAgICAgICAgPyBvcHRpb25zLnBsYWNlaG9sZGVyXHJcbiAgICAgICAgOiBcItCS0YvQsdC10YDQuNGC0LUg0Y3Qu9C40LzQtdC90YJcIjtcclxuICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xyXG4gICAgICB0aGlzLmlucHV0ID0gb3B0aW9ucy5pbnB1dDtcclxuICAgICAgY29uc3QgaXNIYXZlU3RhcnRWYWx1ZSA9IHRoaXMuaGFzSGF2ZVN0YXJ0VmFsdWUob3B0aW9ucy5jb3VudEVsZW1lbnRzKTtcclxuICAgICAgaWYgKGlzSGF2ZVN0YXJ0VmFsdWUpIHtcclxuICAgICAgICB0aGlzLnJlbmRlclN0YXJ0Q291bnQob3B0aW9ucyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHBsYWNlaG9sZGVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIW9wdGlvbnMuaXNQaW5TaG93KSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5zaG93KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIGlucHV0KG5vZGUpIGluc2lkZSBjb25zdHJ1Y3RvciBvYmplY3QgYnV0IG5vdCByZWNlaXZlZFwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuY291bnRFbGVtZW50cykge1xyXG4gICAgICB0aGlzLmNvdW50RWxlbWVudHMgPSBvcHRpb25zLmNvdW50RWxlbWVudHM7XHJcbiAgICAgIHRoaXMuaW5wdXRWaWV3cyA9IFtdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIGNvdW50RWxlbWVudHMoQXJyYXkpIGluc2lkZSBjb25zdHJ1Y3RvciBvYmplY3QgYnV0IG5vdCByZWNlaXZlZFwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuY291bnRHcm91cFZpZXcpIHtcclxuICAgICAgdGhpcy5jb3VudEdyb3VwVmlldyA9IG9wdGlvbnMuY291bnRHcm91cFZpZXc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgY291bnRHcm91cFZpZXcoQXJyYXkpIGluc2lkZSBjb25zdHJ1Y3RvciBvYmplY3QgYnV0IG5vdCByZWNlaXZlZFwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuaXNIaWRlQ29udHJvbCkge1xyXG4gICAgICB0aGlzLmlzSGlkZUNvbnRyb2wgPSBvcHRpb25zLmlzSGlkZUNvbnRyb2w7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuaXNQaW5TaG93KSB7XHJcbiAgICAgIHRoaXMuaXNQaW5TaG93ID0gb3B0aW9ucy5pc1BpblNob3c7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYXNIYXZlU3RhcnRWYWx1ZSA9IGNvdW50RWxlbWVudHMgPT4ge1xyXG4gICAgcmV0dXJuIGNvdW50RWxlbWVudHMuc29tZShpdGVtID0+IHtcclxuICAgICAgaWYgKGl0ZW0uc3RhcnRWYWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnN0YXJ0VmFsdWUgPiAwO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBnZXRNb2RpZmllZENvdW50RWxlbWVudHMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2RpZmllZENvdW50RWxlbWVudHMgPSB0aGlzLmNvdW50RWxlbWVudHMubWFwKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBtaW5WYWx1ZSA9IGl0ZW0ubWluVmFsdWUgPyBpdGVtLm1pblZhbHVlIDogMDtcclxuICAgICAgY29uc3QgY291bnRlciA9IGl0ZW0uc3RhcnRWYWx1ZSA/IGl0ZW0uc3RhcnRWYWx1ZSA6IG1pblZhbHVlO1xyXG4gICAgICBpdGVtLmlkID0gYCR7aW5kZXh9JHtnZXRSYW5kb21OdW1iZXIoMSwgMTAwMDApfWA7XHJcbiAgICAgIGl0ZW0uY291bnRlciA9IGNvdW50ZXI7XHJcbiAgICAgIGl0ZW0ubWluVmFsdWUgPSBtaW5WYWx1ZTtcclxuICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbW9kaWZpZWRDb3VudEVsZW1lbnRzO1xyXG4gIH07XHJcblxyXG4gIHNob3cgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBpc0hhdmVDbGFzcyA9IHRoaXMuZHJvcERvd25QYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICBcImRyb3AtZG93bi0tc2hvd1wiXHJcbiAgICApO1xyXG4gICAgaWYgKCFpc0hhdmVDbGFzcykge1xyXG4gICAgICB0aGlzLmRyb3BEb3duUGFyZW50LmNsYXNzTGlzdC5hZGQoXCJkcm9wLWRvd24tLXNob3dcIik7XHJcbiAgICAgIHRoaXMuaW5wdXQuY2xhc3NMaXN0LmFkZChcImlucHV0LWdyb3VwX19pbnB1dC0tYWN0aXZlXCIpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbkNsaWNrSGlkZSk7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5vblByZXNzSGlkZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaGlkZSA9ICgpID0+IHtcclxuICAgIGlmICh0aGlzLmlzUGluU2hvdykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaXNIYXZlQ2xhc3MgPSB0aGlzLmRyb3BEb3duUGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgXCJkcm9wLWRvd24tLXNob3dcIlxyXG4gICAgKTtcclxuICAgIGlmIChpc0hhdmVDbGFzcykge1xyXG4gICAgICB0aGlzLmRyb3BEb3duUGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wLWRvd24tLXNob3dcIik7XHJcbiAgICAgIHRoaXMuaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImlucHV0LWdyb3VwX19pbnB1dC0tYWN0aXZlXCIpO1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbkNsaWNrSGlkZSk7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5vblByZXNzSGlkZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaGlkZUNsZWFyQnRuID0gKCkgPT4ge1xyXG4gICAgdGhpcy5jbGVhckJ0bi5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19idXR0b24tLWhpZGVcIik7XHJcbiAgfTtcclxuXHJcbiAgb25DbGlja0hpZGUgPSBldnQgPT4ge1xyXG4gICAgY29uc3QgaXNJbnB1dENsaWNrID0gZXZ0LnRhcmdldCA9PT0gdGhpcy5pbnB1dDtcclxuICAgIGNvbnN0IGlzQ2FsZW5kYXJDbGljayA9IHRoaXMuZHJvcERvd25QYXJlbnQuY29udGFpbnMoZXZ0LnRhcmdldCk7XHJcbiAgICBjb25zdCBpc091dHNpZGVDbGljayA9ICFpc0lucHV0Q2xpY2sgJiYgIWlzQ2FsZW5kYXJDbGljaztcclxuICAgIGlmIChpc091dHNpZGVDbGljaykge1xyXG4gICAgICB0aGlzLmhpZGUoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvblByZXNzSGlkZSA9IGV2dCA9PiB7XHJcbiAgICBjb25zdCBpc0VzY1ByZXNzID0gZXZ0LmtleUNvZGUgPT09IDI3O1xyXG4gICAgaWYgKGlzRXNjUHJlc3MpIHtcclxuICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25DbGlja0NsZWFyID0gZXZ0ID0+IHtcclxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5kaXNjYXJkQ291bnRlcigpO1xyXG4gICAgdGhpcy5kaXNjYXJkVmlld0NvdW50ZXIoKTtcclxuICAgIHRoaXMuaGlkZUNsZWFyQnRuKCk7XHJcbiAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gdGhpcy5wbGFjZWhvbGRlcjtcclxuICB9O1xyXG5cclxuICBkaXNjYXJkQ291bnRlciA9ICgpID0+IHtcclxuICAgIHRoaXMuY291bnRFbGVtZW50cy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCB2aWV3Q291bnRlciA9IHRoaXMuZHJvcERvd25QYXJlbnQucXVlcnlTZWxlY3RvcihgI3ZpZXctJHtpdGVtLmlkfWApO1xyXG4gICAgICB2aWV3Q291bnRlci50ZXh0Q29udGVudCA9IGl0ZW0ubWluVmFsdWU7XHJcbiAgICAgIGl0ZW0uY291bnRlciA9IGl0ZW0ubWluVmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBtaW51c0J1dHRvbnMgPSB0aGlzLmRyb3BEb3duUGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgIFwiLmRyb3AtZG93bl9fY291bnRlci1idG4tLW1pbnVzXCJcclxuICAgICk7XHJcbiAgICBtaW51c0J1dHRvbnMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgZGlzY2FyZFZpZXdDb3VudGVyID0gKCkgPT4ge1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5jb3VudEdyb3VwVmlldykuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgdGhpcy5jb3VudEdyb3VwVmlld1tpdGVtXS5jb3VudGVyID0gMDtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJlbmRlclZpZXdDb3VudCA9ICgpID0+IHtcclxuICAgIGxldCB3b3JkT2ZOdW0gPSBcIlwiO1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5jb3VudEdyb3VwVmlldykuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuY291bnRHcm91cFZpZXdbaXRlbV0uY291bnRlciA+IDApIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnRlckdyb3VwID0gdGhpcy5jb3VudEdyb3VwVmlld1tpdGVtXTtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnRlciA9IGN1cnJlbnRDb3VudGVyR3JvdXAuY291bnRlcjtcclxuICAgICAgICBjb25zdCBjdXJyZW50V29yZCA9IGRlY2xPZk51bShcclxuICAgICAgICAgIGN1cnJlbnRDb3VudGVyLFxyXG4gICAgICAgICAgY3VycmVudENvdW50ZXJHcm91cC52aWV3c1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCAmJiB3b3JkT2ZOdW0ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgd29yZE9mTnVtICs9IFwiLCBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd29yZE9mTnVtICs9IGAke2N1cnJlbnRDb3VudGVyfSAke2N1cnJlbnRXb3JkfWA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh3b3JkT2ZOdW0ubGVuZ3RoID49IDIwICYmIE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmxlbmd0aCA+IDIpIHtcclxuICAgICAgd29yZE9mTnVtID0gd29yZE9mTnVtLnNsaWNlKDAsIDIwKSArIFwiLi4uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHdvcmRPZk51bTtcclxuICB9O1xyXG5cclxuICByZW5kZXJTdGFydENvdW50ID0gb3B0aW9ucyA9PiB7XHJcbiAgICBjb25zdCBjb3VudEVsZW1lbnRzID0gb3B0aW9ucy5jb3VudEVsZW1lbnRzO1xyXG4gICAgbGV0IHdvcmRPZk51bSA9IFwiXCI7XHJcbiAgICBjb3VudEVsZW1lbnRzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChpdGVtLnN0YXJ0VmFsdWUgPiAwKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXJHcm91cCA9IG9wdGlvbnMuY291bnRHcm91cFZpZXdbaXRlbS5jb3VudEdyb3VwTmFtZV07XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXIgPSBjdXJyZW50Q291bnRlckdyb3VwLmNvdW50ZXI7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFdvcmQgPSBkZWNsT2ZOdW0oXHJcbiAgICAgICAgICBjdXJyZW50Q291bnRlcixcclxuICAgICAgICAgIGN1cnJlbnRDb3VudGVyR3JvdXAudmlld3NcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpbmRleCA+IDAgJiYgd29yZE9mTnVtLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHdvcmRPZk51bSArPSBcIiwgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdvcmRPZk51bSArPSBgJHtjdXJyZW50Q291bnRlcn0gJHtjdXJyZW50V29yZH1gO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAod29yZE9mTnVtLmxlbmd0aCA+PSAyMCAmJiBjb3VudEVsZW1lbnRzLmxlbmd0aCA+IDIpIHtcclxuICAgICAgd29yZE9mTnVtID0gd29yZE9mTnVtLnNsaWNlKDAsIDIwKSArIFwiLi4uXCI7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3BsaXRXb3JkT2ZOdW0gPSB3b3JkT2ZOdW0uc3BsaXQoXCIsXCIpO1xyXG4gICAgaWYgKHNwbGl0V29yZE9mTnVtLmxlbmd0aCA+IDEpIHtcclxuICAgICAgaWYgKHNwbGl0V29yZE9mTnVtWzBdLnRyaW0oKSA9PT0gc3BsaXRXb3JkT2ZOdW1bMV0udHJpbSgpKSB7XHJcbiAgICAgICAgd29yZE9mTnVtID0gc3BsaXRXb3JkT2ZOdW1bMF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gd29yZE9mTnVtO1xyXG4gIH07XHJcblxyXG4gIGdldENvdW50SXRlbSA9IGVsZW1lbnQgPT4ge1xyXG4gICAgY29uc3QgY291bnRJdGVtID0gZ2V0SHRtbEVsZW1lbnQoXCJsaVwiLCBcImRyb3AtZG93bl9fY291bnQtaXRlbVwiKTtcclxuICAgIGNvbnN0IGNvdW50SXRlbU5hbWUgPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJwXCIsXHJcbiAgICAgIFwiZHJvcC1kb3duX19jb3VudC1pdGVtLW5hbWVcIixcclxuICAgICAgZWxlbWVudC5uYW1lXHJcbiAgICApO1xyXG4gICAgY29uc3QgY291bnRlck1lbnUgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRyb3AtZG93bl9fY291bnRlci1tZW51XCIpO1xyXG4gICAgY29uc3QgY291bnRJdGVtTWludXMgPSBnZXRIdG1sRWxlbWVudChcImJ1dHRvblwiLCBcImRyb3AtZG93bl9fY291bnRlci1idG5cIik7XHJcbiAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tbWludXNcIik7XHJcbiAgICBpZiAoZWxlbWVudC5zdGFydFZhbHVlKSB7XHJcbiAgICAgIGlmIChlbGVtZW50LnN0YXJ0VmFsdWUgPT09IGVsZW1lbnQubWluVmFsdWUpIHtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgICAgY291bnRJdGVtTWludXMuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgIGNvdW50SXRlbU1pbnVzLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcclxuICAgIH1cclxuICAgIGNvdW50SXRlbU1pbnVzLnR5cGUgPSBcImJ1dHRvblwiO1xyXG4gICAgY29uc3QgY291bnRJdGVtVmlldyA9IGdldEh0bWxFbGVtZW50KFwicFwiLCBcImRyb3AtZG93bl9fc2VsZWN0LXZpZXdcIik7XHJcbiAgICBjb3VudEl0ZW1WaWV3LnRleHRDb250ZW50ID0gZWxlbWVudC5jb3VudGVyO1xyXG4gICAgY291bnRJdGVtVmlldy5pZCA9IGB2aWV3LSR7ZWxlbWVudC5pZH1gO1xyXG4gICAgY29uc3QgY291bnRJdGVtUGx1cyA9IGdldEh0bWxFbGVtZW50KFwiYnV0dG9uXCIsIFwiZHJvcC1kb3duX19jb3VudGVyLWJ0blwiKTtcclxuICAgIGNvdW50SXRlbVBsdXMuY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bl9fY291bnRlci1idG4tLXBsdXNcIik7XHJcbiAgICBjb3VudEl0ZW1QbHVzLnR5cGUgPSBcImJ1dHRvblwiO1xyXG5cclxuICAgIGNvdW50SXRlbVBsdXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgZ3JvdXBWaWV3ID0gdGhpcy5jb3VudEdyb3VwVmlld1tlbGVtZW50LmNvdW50R3JvdXBOYW1lXTtcclxuICAgICAgZWxlbWVudC5jb3VudGVyKys7XHJcbiAgICAgIGdyb3VwVmlldy5jb3VudGVyKys7XHJcbiAgICAgIGNvdW50SXRlbVZpZXcudGV4dENvbnRlbnQgPSBlbGVtZW50LmNvdW50ZXI7XHJcbiAgICAgIHRoaXMucmVuZGVyVmlld0NvdW50KCk7XHJcbiAgICAgIGNvbnN0IGlzTWludXNEaXNhYmxlZCA9IGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICBcImRyb3AtZG93bl9fY291bnRlci1idG4tLWRpc2FibGVkXCJcclxuICAgICAgKTtcclxuICAgICAgaWYgKGlzTWludXNEaXNhYmxlZCkge1xyXG4gICAgICAgIGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZFwiKTtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaXNDbGVhckJ0bkRpc2FibGVkID0gdGhpcy5jbGVhckJ0bi5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgICAgXCJkcm9wLWRvd25fX2J1dHRvbi0taGlkZVwiXHJcbiAgICAgICk7XHJcbiAgICAgIGlmIChpc0NsZWFyQnRuRGlzYWJsZWQpIHtcclxuICAgICAgICB0aGlzLmNsZWFyQnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wLWRvd25fX2J1dHRvbi0taGlkZVwiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY291bnRJdGVtTWludXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgZ3JvdXBWaWV3ID0gdGhpcy5jb3VudEdyb3VwVmlld1tlbGVtZW50LmNvdW50R3JvdXBOYW1lXTtcclxuICAgICAgZWxlbWVudC5jb3VudGVyLS07XHJcbiAgICAgIGdyb3VwVmlldy5jb3VudGVyLS07XHJcbiAgICAgIGNvdW50SXRlbVZpZXcudGV4dENvbnRlbnQgPSBlbGVtZW50LmNvdW50ZXI7XHJcbiAgICAgIGNvbnN0IG5leHREZWNyaW1lbnRDb3VudGVyID0gZWxlbWVudC5jb3VudGVyIC0gMTtcclxuICAgICAgaWYgKG5leHREZWNyaW1lbnRDb3VudGVyIDwgZWxlbWVudC5taW5WYWx1ZSkge1xyXG4gICAgICAgIGNvdW50SXRlbU1pbnVzLmNsYXNzTGlzdC5hZGQoXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZFwiKTtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZW5kZXJWaWV3Q291bnQoKTtcclxuICAgICAgaWYgKGdyb3VwVmlldy5jb3VudGVyID09PSAwKSB7XHJcbiAgICAgICAgY29uc3QgaXNDb3VudGVyR3JvdXBDbGVhciA9IE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmV2ZXJ5KFxyXG4gICAgICAgICAgaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvdW50R3JvdXBWaWV3W2l0ZW1dLmNvdW50ZXIgPT09IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNDb3VudGVyR3JvdXBDbGVhcikge1xyXG4gICAgICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgICB0aGlzLmhpZGVDbGVhckJ0bigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY291bnRlck1lbnUuYXBwZW5kQ2hpbGQoY291bnRJdGVtTWludXMpO1xyXG4gICAgY291bnRlck1lbnUuYXBwZW5kQ2hpbGQoY291bnRJdGVtVmlldyk7XHJcbiAgICBjb3VudGVyTWVudS5hcHBlbmRDaGlsZChjb3VudEl0ZW1QbHVzKTtcclxuICAgIGNvdW50SXRlbS5hcHBlbmRDaGlsZChjb3VudEl0ZW1OYW1lKTtcclxuICAgIGNvdW50SXRlbS5hcHBlbmRDaGlsZChjb3VudGVyTWVudSk7XHJcbiAgICByZXR1cm4gY291bnRJdGVtO1xyXG4gIH07XHJcblxyXG4gIGluaXQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2RpZmllZENvdW50RWxlbWVudHMgPSB0aGlzLmdldE1vZGlmaWVkQ291bnRFbGVtZW50cygpO1xyXG4gICAgdGhpcy5jb3VudEVsZW1lbnRzID0gbW9kaWZpZWRDb3VudEVsZW1lbnRzO1xyXG4gICAgY29uc3QgZHJvcERvd25QYXJlbnRXcmFwID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkcm9wLWRvd25fX3dyYXBcIik7XHJcbiAgICBjb25zdCBjb3VudExpc3QgPSBnZXRIdG1sRWxlbWVudChcInVsXCIsIFwiZHJvcC1kb3duX19jb3VudC1saXN0XCIpO1xyXG4gICAgY29uc3QgZHJvcERvd25Db250cm9sID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkcm9wLWRvd25fX2NvbnRyb2xcIik7XHJcbiAgICBjb25zdCBjbGVhckJ0biA9IGdldEh0bWxFbGVtZW50KFwiYnV0dG9uXCIsIFwiZHJvcC1kb3duX19idXR0b25cIiwgXCLQntGH0LjRgdGC0LjRgtGMXCIpO1xyXG4gICAgdGhpcy5jbGVhckJ0biA9IGNsZWFyQnRuO1xyXG4gICAgY2xlYXJCdG4udHlwZSA9IFwiYnV0dG9uXCI7XHJcbiAgICBjbGVhckJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrQ2xlYXIpO1xyXG4gICAgY29uc3QgYWNjZXB0QnRuID0gZ2V0SHRtbEVsZW1lbnQoXHJcbiAgICAgIFwiYnV0dG9uXCIsXHJcbiAgICAgIFwiZHJvcC1kb3duX19idXR0b25cIixcclxuICAgICAgXCLQn9GA0LjQvNC10L3QuNGC0YxcIlxyXG4gICAgKTtcclxuICAgIGFjY2VwdEJ0bi50eXBlID0gXCJidXR0b25cIjtcclxuICAgIGFjY2VwdEJ0bi5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19idXR0b24tLWFjY2VudFwiKTtcclxuICAgIGFjY2VwdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oaWRlKTtcclxuICAgIGNvbnN0IGNvdW50TGlzdEZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICAgIHRoaXMuY291bnRFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICBjb25zdCBjb3VudEl0ZW0gPSB0aGlzLmdldENvdW50SXRlbShlbGVtZW50KTtcclxuICAgICAgY291bnRMaXN0RnJhZ21lbnQuYXBwZW5kQ2hpbGQoY291bnRJdGVtKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvdW50TGlzdC5hcHBlbmRDaGlsZChjb3VudExpc3RGcmFnbWVudCk7XHJcbiAgICBpZiAoIXRoaXMuaXNIaWRlQ29udHJvbCkge1xyXG4gICAgICBkcm9wRG93bkNvbnRyb2wuYXBwZW5kQ2hpbGQoY2xlYXJCdG4pO1xyXG4gICAgICBkcm9wRG93bkNvbnRyb2wuYXBwZW5kQ2hpbGQoYWNjZXB0QnRuKTtcclxuICAgIH1cclxuXHJcbiAgICBkcm9wRG93blBhcmVudFdyYXAuYXBwZW5kQ2hpbGQoY291bnRMaXN0KTtcclxuXHJcbiAgICBpZiAoIXRoaXMuaXNIaWRlQ29udHJvbCkge1xyXG4gICAgICBkcm9wRG93blBhcmVudFdyYXAuYXBwZW5kQ2hpbGQoZHJvcERvd25Db250cm9sKTtcclxuICAgIH1cclxuICAgIHRoaXMuZHJvcERvd25QYXJlbnQuYXBwZW5kQ2hpbGQoZHJvcERvd25QYXJlbnRXcmFwKTtcclxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZHJvcERvd25QYXJlbnQpO1xyXG5cclxuICAgIGNvbnN0IGlzQWxsQ291bnRlclplcm8gPSB0aGlzLmNvdW50RWxlbWVudHMuZXZlcnkoXHJcbiAgICAgIGl0ZW0gPT4gaXRlbS5jb3VudGVyID09PSAwXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChpc0FsbENvdW50ZXJaZXJvKSB0aGlzLmhpZGVDbGVhckJ0bigpO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERyb3BEb3duO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvdXNlci1lNTM1MjVlLnN2Z1wiOyIsIi8qIVxuKiBpbnB1dG1hc2suZXh0ZW5zaW9ucy5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE5IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjlcbiovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbIFwiLi9pbnB1dG1hc2tcIiBdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9pbnB1dG1hc2tcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3Rvcnkod2luZG93LklucHV0bWFzayk7XG4gICAgfVxufSkoZnVuY3Rpb24oSW5wdXRtYXNrKSB7XG4gICAgSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zKHtcbiAgICAgICAgQToge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiZcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiNcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLUZhLWZdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9XG4gICAgfSk7XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBjc3N1bml0OiB7XG4gICAgICAgICAgICByZWdleDogXCJbKy1dP1swLTldK1xcXFwuPyhbMC05XSspPyhweHxlbXxyZW18ZXh8JXxpbnxjbXxtbXxwdHxwYylcIlxuICAgICAgICB9LFxuICAgICAgICB1cmw6IHtcbiAgICAgICAgICAgIHJlZ2V4OiBcIihodHRwcz98ZnRwKS8vLipcIixcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGlwOiB7XG4gICAgICAgICAgICBtYXNrOiBcImlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV1cIixcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgaToge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zIC0gMSA+IC0xICYmIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICE9PSBcIi5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocnMgPSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSArIGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyAtIDIgPiAtMSAmJiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2hycyA9IFwiMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjaHJzID0gXCIwMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XVwiKS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICBtYXNrOiBcIip7MSw2NH1bLip7MSw2NH1dWy4qezEsNjR9XVsuKnsxLDYzfV1ALXsxLDYzfS4tezEsNjN9Wy4tezEsNjN9XVsuLXsxLDYzfV1cIixcbiAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXG4gICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIixcbiAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgcGFzdGVkVmFsdWUgPSBwYXN0ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXN0ZWRWYWx1ZS5yZXBsYWNlKFwibWFpbHRvOlwiLCBcIlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1ISMkJSYnKisvPT9eX2B7fH1+LV1cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCItXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXotXVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwiZW1haWxcIlxuICAgICAgICB9LFxuICAgICAgICBtYWM6IHtcbiAgICAgICAgICAgIG1hc2s6IFwiIyM6IyM6IyM6IyM6IyM6IyNcIlxuICAgICAgICB9LFxuICAgICAgICB2aW46IHtcbiAgICAgICAgICAgIG1hc2s6IFwiVnsxM305ezR9XCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFY6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLUhKLU5QUi1aYS1oai1ucHItelxcXFxkXVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhckluY29tcGxldGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSW5wdXRtYXNrO1xufSk7IiwiLyohXG4qIGRlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuLi9nbG9iYWwvd2luZG93XCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4uL2dsb2JhbC93aW5kb3dcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5kZXBlbmRlbmN5TGliID0gZmFjdG9yeSh3aW5kb3cpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICBmdW5jdGlvbiBpbmRleE9mKGxpc3QsIGVsZW0pIHtcbiAgICAgICAgdmFyIGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgICAgICAgZm9yICg7aSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQXJyYXlsaWtlKG9iaikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCwgbHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgICAgICBpZiAobHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBpc1dpbmRvdyhvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIC0gMSBpbiBvYmo7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIGVsZW0gaW5zdGFuY2VvZiBFbGVtZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBEZXBlbmRlbmN5TGliKGVsZW0pIHtcbiAgICAgICAgaWYgKGVsZW0gaW5zdGFuY2VvZiBEZXBlbmRlbmN5TGliKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVwZW5kZW5jeUxpYikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGVwZW5kZW5jeUxpYihlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbSAhPT0gdW5kZWZpbmVkICYmIGVsZW0gIT09IG51bGwgJiYgZWxlbSAhPT0gd2luZG93KSB7XG4gICAgICAgICAgICB0aGlzWzBdID0gZWxlbS5ub2RlTmFtZSA/IGVsZW0gOiBlbGVtWzBdICE9PSB1bmRlZmluZWQgJiYgZWxlbVswXS5ub2RlTmFtZSA/IGVsZW1bMF0gOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0pO1xuICAgICAgICAgICAgaWYgKHRoaXNbMF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzWzBdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpc1swXS5ldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5IHx8IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtKSB7XG4gICAgICAgIHJldHVybiBpc1dpbmRvdyhlbGVtKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ID8gZWxlbS5kZWZhdWx0VmlldyB8fCBlbGVtLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xuICAgIH1cbiAgICBEZXBlbmRlbmN5TGliLnByb3RvdHlwZSA9IHtcbiAgICAgICAgb246IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBhZGRFdmVudCA9IGZ1bmN0aW9uKGV2LCBuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKGV2LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hdHRhY2hFdmVudChcIm9uXCIgKyBldiwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl0gPSBldmVudFJlZ2lzdHJ5W2V2XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXSA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0gfHwgW107XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ucHVzaChoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBfZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgZXYgPSBuc0V2ZW50WzBdLCBuYW1lc3BhY2UgPSBuc0V2ZW50WzFdIHx8IFwiZ2xvYmFsXCI7XG4gICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50KGV2LCBuYW1lc3BhY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGV2LCBuYW1lc3BhY2UsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2IGluIGV2ZW50UmVnaXN0cnkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZGV0YWNoRXZlbnQoXCJvblwiICsgZXYsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJnbG9iYWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLmluZGV4T2YoaGFuZGxlciksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5zcGxpY2UoZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5pbmRleE9mKGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVOYW1lc3BhY2UgPSBmdW5jdGlvbihldiwgbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldnRzID0gW10sIGhuZHgsIGhuZEw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChobmR4ID0gMCwgaG5kTCA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBobmR4IDwgaG5kTDsgaG5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldjogZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXZOZHggaW4gZXZlbnRSZWdpc3RyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldk5keF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5tc3AgPT09IG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaG5keCA9IDAsIGhuZEwgPSBldmVudFJlZ2lzdHJ5W2V2TmR4XVtubXNwXS5sZW5ndGg7IGhuZHggPCBobmRMOyBobmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2OiBldk5keCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbm1zcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGV2ZW50UmVnaXN0cnlbZXZOZHhdW25tc3BdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2TmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5tc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZ0cztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBfZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgb2ZmRXZlbnRzID0gcmVzb2x2ZU5hbWVzcGFjZShuc0V2ZW50WzBdLCBuc0V2ZW50WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG9mZkV2ZW50c0wgPSBvZmZFdmVudHMubGVuZ3RoOyBpIDwgb2ZmRXZlbnRzTDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFdmVudChvZmZFdmVudHNbaV0uZXYsIG9mZkV2ZW50c1tpXS5uYW1lc3BhY2UsIG9mZkV2ZW50c1tpXS5oYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudCh0aGlzWzBdKSkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5LCBlbGVtID0gdGhpc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgX2V2ZW50cyA9IHR5cGVvZiBldmVudHMgPT09IFwic3RyaW5nXCIgPyBldmVudHMuc3BsaXQoXCIgXCIpIDogWyBldmVudHMudHlwZSBdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGVuZHggPSAwOyBlbmR4IDwgX2V2ZW50cy5sZW5ndGg7IGVuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnNFdmVudCA9IF9ldmVudHNbZW5keF0uc3BsaXQoXCIuXCIpLCBldiA9IG5zRXZlbnRbMF0sIG5hbWVzcGFjZSA9IG5zRXZlbnRbMV0gfHwgXCJnbG9iYWxcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50ICE9PSB1bmRlZmluZWQgJiYgbmFtZXNwYWNlID09PSBcImdsb2JhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZudCwgaSwgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXYsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudC5pbml0Q3VzdG9tRXZlbnQoZXYsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMudHlwZSkgRGVwZW5kZW5jeUxpYi5leHRlbmQoZXZudCwgZXZlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoZXZudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQuZXZlbnRUeXBlID0gZXY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudC5kZXRhaWwgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cy50eXBlKSBEZXBlbmRlbmN5TGliLmV4dGVuZChldm50LCBldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZmlyZUV2ZW50KFwib25cIiArIGV2bnQuZXZlbnRUeXBlLCBldm50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudFJlZ2lzdHJ5W2V2XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBhcmd1bWVudHNbMF0udHlwZSA/IGFyZ3VtZW50c1swXSA6IERlcGVuZGVuY3lMaWIuRXZlbnQoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgPT09IFwiZ2xvYmFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBubXNwIGluIGV2ZW50UmVnaXN0cnlbZXZdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudFJlZ2lzdHJ5W2V2XVtubXNwXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF1baV0uYXBwbHkoZWxlbSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXVtpXS5hcHBseShlbGVtLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIubm9vcCA9IGZ1bmN0aW9uKCkge307XG4gICAgRGVwZW5kZW5jeUxpYi5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbiAgICBEZXBlbmRlbmN5TGliLmluQXJyYXkgPSBmdW5jdGlvbihlbGVtLCBhcnIsIGkpIHtcbiAgICAgICAgcmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mKGFyciwgZWxlbSwgaSk7XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLnZhbEhvb2tzID0gdW5kZWZpbmVkO1xuICAgIERlcGVuZGVuY3lMaWIuaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgaXNXaW5kb3cob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmouY29uc3RydWN0b3IgJiYgIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5leHRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLCB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBkZWVwID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgZGVlcCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1tpXSB8fCB7fTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhRGVwZW5kZW5jeUxpYi5pc0Z1bmN0aW9uKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRoaXM7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7aSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMgPSBhcmd1bWVudHNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvcHkgPSBvcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBjb3B5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVlcCAmJiBjb3B5ICYmIChEZXBlbmRlbmN5TGliLmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gRGVwZW5kZW5jeUxpYi5pc0FycmF5KGNvcHkpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5SXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlJc0FycmF5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgRGVwZW5kZW5jeUxpYi5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgRGVwZW5kZW5jeUxpYi5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IERlcGVuZGVuY3lMaWIuZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3B5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGNvcHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIuZWFjaCA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHZhbHVlLCBpID0gMDtcbiAgICAgICAgaWYgKGlzQXJyYXlsaWtlKG9iaikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5kYXRhID0gZnVuY3Rpb24ob3duZXIsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvd25lci5fX2RhdGEgPyBvd25lci5fX2RhdGFba2V5XSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvd25lci5fX2RhdGEgPSBvd25lci5fX2RhdGEgfHwge307XG4gICAgICAgICAgICBvd25lci5fX2RhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIERlcGVuZGVuY3lMaWIuRXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgRGVwZW5kZW5jeUxpYi5FdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7XG4gICAgICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgICB9O1xuICAgICAgICBEZXBlbmRlbmN5TGliLkV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgfVxuICAgIHJldHVybiBEZXBlbmRlbmN5TGliO1xufSk7IiwiLyohXG4qIGlucHV0bWFzay5kYXRlLmV4dGVuc2lvbnMuanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC45XG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWyBcIi4vaW5wdXRtYXNrXCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vaW5wdXRtYXNrXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KHdpbmRvdy5JbnB1dG1hc2spO1xuICAgIH1cbn0pKGZ1bmN0aW9uKElucHV0bWFzaykge1xuICAgIHZhciAkID0gSW5wdXRtYXNrLmRlcGVuZGVuY3lMaWI7XG4gICAgdmFyIGZvcm1hdENvZGUgPSB7XG4gICAgICAgIGQ6IFsgXCJbMS05XXxbMTJdWzAtOV18M1swMV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSwgXCJkYXlcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSBdLFxuICAgICAgICBkZDogWyBcIjBbMS05XXxbMTJdWzAtOV18M1swMV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSwgXCJkYXlcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldERhdGUuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgZGRkOiBbIFwiXCIgXSxcbiAgICAgICAgZGRkZDogWyBcIlwiIF0sXG4gICAgICAgIG06IFsgXCJbMS05XXwxWzAxMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TW9udGgsIFwibW9udGhcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5wcm90b3R5cGUuZ2V0TW9udGguY2FsbCh0aGlzKSArIDE7XG4gICAgICAgIH0gXSxcbiAgICAgICAgbW06IFsgXCIwWzEtOV18MVswMTJdXCIsIERhdGUucHJvdG90eXBlLnNldE1vbnRoLCBcIm1vbnRoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNb250aC5jYWxsKHRoaXMpICsgMSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgbW1tOiBbIFwiXCIgXSxcbiAgICAgICAgbW1tbTogWyBcIlwiIF0sXG4gICAgICAgIHl5OiBbIFwiWzAtOV17Mn1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXIsIFwieWVhclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgeXl5eTogWyBcIlswLTldezR9XCIsIERhdGUucHJvdG90eXBlLnNldEZ1bGxZZWFyLCBcInllYXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyLmNhbGwodGhpcyksIDQpO1xuICAgICAgICB9IF0sXG4gICAgICAgIGg6IFsgXCJbMS05XXwxWzAtMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgaGg6IFsgXCIwWzEtOV18MVswLTJdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBoaGg6IFsgXCJbMC05XStcIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgSDogWyBcIjE/WzAtOV18MlswLTNdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIERhdGUucHJvdG90eXBlLmdldEhvdXJzIF0sXG4gICAgICAgIEhIOiBbIFwiMFswLTldfDFbMC05XXwyWzAtM11cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEhvdXJzLmNhbGwodGhpcyksIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIEhISDogWyBcIlswLTldK1wiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRIb3VycyBdLFxuICAgICAgICBNOiBbIFwiWzEtNV0/WzAtOV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWludXRlcywgXCJtaW51dGVzXCIsIERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMgXSxcbiAgICAgICAgTU06IFsgXCIwWzAtOV18MVswLTldfDJbMC05XXwzWzAtOV18NFswLTldfDVbMC05XVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaW51dGVzLCBcIm1pbnV0ZXNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgc3M6IFsgXCJbMC01XVswLTldXCIsIERhdGUucHJvdG90eXBlLnNldFNlY29uZHMsIFwic2Vjb25kc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0U2Vjb25kcy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBsOiBbIFwiWzAtOV17M31cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWlsbGlzZWNvbmRzLCBcIm1pbGxpc2Vjb25kc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzLmNhbGwodGhpcyksIDMpO1xuICAgICAgICB9IF0sXG4gICAgICAgIEw6IFsgXCJbMC05XXsyfVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMsIFwibWlsbGlzZWNvbmRzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNaWxsaXNlY29uZHMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgdDogWyBcIlthcF1cIiBdLFxuICAgICAgICB0dDogWyBcIlthcF1tXCIgXSxcbiAgICAgICAgVDogWyBcIltBUF1cIiBdLFxuICAgICAgICBUVDogWyBcIltBUF1NXCIgXSxcbiAgICAgICAgWjogWyBcIlwiIF0sXG4gICAgICAgIG86IFsgXCJcIiBdLFxuICAgICAgICBTOiBbIFwiXCIgXVxuICAgIH0sIGZvcm1hdEFsaWFzID0ge1xuICAgICAgICBpc29EYXRlOiBcInl5eXktbW0tZGRcIixcbiAgICAgICAgaXNvVGltZTogXCJISDpNTTpzc1wiLFxuICAgICAgICBpc29EYXRlVGltZTogXCJ5eXl5LW1tLWRkJ1QnSEg6TU06c3NcIixcbiAgICAgICAgaXNvVXRjRGF0ZVRpbWU6IFwiVVRDOnl5eXktbW0tZGQnVCdISDpNTTpzcydaJ1wiXG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRUb2tlbml6ZXIob3B0cykge1xuICAgICAgICBpZiAoIW9wdHMudG9rZW5pemVyKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBuZHggaW4gZm9ybWF0Q29kZSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMuaW5kZXhPZihuZHhbMF0pID09PSAtMSkgdG9rZW5zLnB1c2gobmR4WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdHMudG9rZW5pemVyID0gXCIoXCIgKyB0b2tlbnMuam9pbihcIit8XCIpICsgXCIpKz98LlwiO1xuICAgICAgICAgICAgb3B0cy50b2tlbml6ZXIgPSBuZXcgUmVnRXhwKG9wdHMudG9rZW5pemVyLCBcImdcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdHMudG9rZW5pemVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlUGFydHMsIGN1cnJlbnRSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuICFpc0Zpbml0ZShkYXRlUGFydHMucmF3ZGF5KSB8fCBkYXRlUGFydHMuZGF5ID09IFwiMjlcIiAmJiAhaXNGaW5pdGUoZGF0ZVBhcnRzLnJhd3llYXIpIHx8IG5ldyBEYXRlKGRhdGVQYXJ0cy5kYXRlLmdldEZ1bGxZZWFyKCksIGlzRmluaXRlKGRhdGVQYXJ0cy5yYXdtb250aCkgPyBkYXRlUGFydHMubW9udGggOiBkYXRlUGFydHMuZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF0ZSgpID49IGRhdGVQYXJ0cy5kYXkgPyBjdXJyZW50UmVzdWx0IDogZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRGF0ZUluUmFuZ2UoZGF0ZVBhcnRzLCBvcHRzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgICBpZiAob3B0cy5taW4pIHtcbiAgICAgICAgICAgIGlmIChkYXRlUGFydHNbXCJyYXd5ZWFyXCJdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhd1llYXIgPSBkYXRlUGFydHNbXCJyYXd5ZWFyXCJdLnJlcGxhY2UoL1teMC05XS9nLCBcIlwiKSwgbWluWWVhciA9IG9wdHMubWluLnllYXIuc3Vic3RyKDAsIHJhd1llYXIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBtaW5ZZWFyIDw9IHJhd1llYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZVBhcnRzW1wieWVhclwiXSA9PT0gZGF0ZVBhcnRzW1wicmF3eWVhclwiXSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbi5kYXRlLmdldFRpbWUoKSA9PT0gb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkgPD0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ICYmIG9wdHMubWF4ICYmIG9wdHMubWF4LmRhdGUuZ2V0VGltZSgpID09PSBvcHRzLm1heC5kYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkgPj0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlKGZvcm1hdCwgZGF0ZU9ialZhbHVlLCBvcHRzLCByYXcpIHtcbiAgICAgICAgdmFyIG1hc2sgPSBcIlwiLCBtYXRjaDtcbiAgICAgICAgd2hpbGUgKG1hdGNoID0gZ2V0VG9rZW5pemVyKG9wdHMpLmV4ZWMoZm9ybWF0KSkge1xuICAgICAgICAgICAgaWYgKGRhdGVPYmpWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCIoXCIgKyBmb3JtYXRDb2RlW21hdGNoWzBdXVswXSArIFwiKVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiW1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIihcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIl1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCIpP1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBJbnB1dG1hc2suZXNjYXBlUmVnZXgobWF0Y2hbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Q29kZVttYXRjaFswXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhdyAhPT0gdHJ1ZSAmJiBmb3JtYXRDb2RlW21hdGNoWzBdXVszXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldEZuID0gZm9ybWF0Q29kZVttYXRjaFswXV1bM107XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IGdldEZuLmNhbGwoZGF0ZU9ialZhbHVlLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dWzJdKSBtYXNrICs9IGRhdGVPYmpWYWx1ZVtcInJhd1wiICsgZm9ybWF0Q29kZVttYXRjaFswXV1bMl1dOyBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhZCh2YWwsIGxlbikge1xuICAgICAgICB2YWwgPSBTdHJpbmcodmFsKTtcbiAgICAgICAgbGVuID0gbGVuIHx8IDI7XG4gICAgICAgIHdoaWxlICh2YWwubGVuZ3RoIDwgbGVuKSB2YWwgPSBcIjBcIiArIHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5hbHlzZU1hc2sobWFza1N0cmluZywgZm9ybWF0LCBvcHRzKSB7XG4gICAgICAgIHZhciBkYXRlT2JqID0ge1xuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoMSwgMCwgMSlcbiAgICAgICAgfSwgdGFyZ2V0UHJvcCwgbWFzayA9IG1hc2tTdHJpbmcsIG1hdGNoLCBkYXRlT3BlcmF0aW9uLCB0YXJnZXRWYWxpZGF0b3I7XG4gICAgICAgIGZ1bmN0aW9uIGV4dGVuZFByb3BlcnR5KHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY29ycmVjdGVkVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgXCIwXCIpO1xuICAgICAgICAgICAgaWYgKGNvcnJlY3RlZFZhbHVlICE9IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudGVyZWRQYXJ0ID0gdmFsdWUucmVwbGFjZSgvW14wLTldL2csIFwiXCIpLCBtaW4gPSAob3B0cy5taW4gJiYgb3B0cy5taW5bdGFyZ2V0UHJvcF0gfHwgdmFsdWUpLnRvU3RyaW5nKCksIG1heCA9IChvcHRzLm1heCAmJiBvcHRzLm1heFt0YXJnZXRQcm9wXSB8fCB2YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb3JyZWN0ZWRWYWx1ZSA9IGVudGVyZWRQYXJ0ICsgKGVudGVyZWRQYXJ0IDwgbWluLnNsaWNlKDAsIGVudGVyZWRQYXJ0Lmxlbmd0aCkgPyBtaW4uc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSA6IGVudGVyZWRQYXJ0ID4gbWF4LnNsaWNlKDAsIGVudGVyZWRQYXJ0Lmxlbmd0aCkgPyBtYXguc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSA6IGNvcnJlY3RlZFZhbHVlLnRvU3RyaW5nKCkuc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29ycmVjdGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0VmFsdWUoZGF0ZU9iaiwgdmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgIGRhdGVPYmpbdGFyZ2V0UHJvcF0gPSBleHRlbmRQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgICAgICBkYXRlT2JqW1wicmF3XCIgKyB0YXJnZXRQcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGRhdGVPcGVyYXRpb24gIT09IHVuZGVmaW5lZCkgZGF0ZU9wZXJhdGlvbi5jYWxsKGRhdGVPYmouZGF0ZSwgdGFyZ2V0UHJvcCA9PSBcIm1vbnRoXCIgPyBwYXJzZUludChkYXRlT2JqW3RhcmdldFByb3BdKSAtIDEgOiBkYXRlT2JqW3RhcmdldFByb3BdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1hc2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBtYXNrLnNsaWNlKDAsIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdENvZGUuaGFzT3duUHJvcGVydHkobWF0Y2hbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFZhbGlkYXRvciA9IGZvcm1hdENvZGVbbWF0Y2hbMF1dWzBdO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRQcm9wID0gZm9ybWF0Q29kZVttYXRjaFswXV1bMl07XG4gICAgICAgICAgICAgICAgICAgIGRhdGVPcGVyYXRpb24gPSBmb3JtYXRDb2RlW21hdGNoWzBdXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZU9iaiwgdmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5zbGljZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGVPYmo7XG4gICAgICAgIH0gZWxzZSBpZiAobWFzayAmJiB0eXBlb2YgbWFzayA9PT0gXCJvYmplY3RcIiAmJiBtYXNrLmhhc093blByb3BlcnR5KFwiZGF0ZVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBkYXRldGltZToge1xuICAgICAgICAgICAgbWFzazogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgIGZvcm1hdENvZGUuUyA9IG9wdHMuaTE4bi5vcmRpbmFsU3VmZml4LmpvaW4oXCJ8XCIpO1xuICAgICAgICAgICAgICAgIG9wdHMuaW5wdXRGb3JtYXQgPSBmb3JtYXRBbGlhc1tvcHRzLmlucHV0Rm9ybWF0XSB8fCBvcHRzLmlucHV0Rm9ybWF0O1xuICAgICAgICAgICAgICAgIG9wdHMuZGlzcGxheUZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMuZGlzcGxheUZvcm1hdF0gfHwgb3B0cy5kaXNwbGF5Rm9ybWF0IHx8IG9wdHMuaW5wdXRGb3JtYXQ7XG4gICAgICAgICAgICAgICAgb3B0cy5vdXRwdXRGb3JtYXQgPSBmb3JtYXRBbGlhc1tvcHRzLm91dHB1dEZvcm1hdF0gfHwgb3B0cy5vdXRwdXRGb3JtYXQgfHwgb3B0cy5pbnB1dEZvcm1hdDtcbiAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gb3B0cy5wbGFjZWhvbGRlciAhPT0gXCJcIiA/IG9wdHMucGxhY2Vob2xkZXIgOiBvcHRzLmlucHV0Rm9ybWF0LnJlcGxhY2UoL1tcXFtcXF1dLywgXCJcIik7XG4gICAgICAgICAgICAgICAgb3B0cy5yZWdleCA9IHBhcnNlKG9wdHMuaW5wdXRGb3JtYXQsIHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXG4gICAgICAgICAgICBpbnB1dEZvcm1hdDogXCJpc29EYXRlVGltZVwiLFxuICAgICAgICAgICAgZGlzcGxheUZvcm1hdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3V0cHV0Rm9ybWF0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtaW46IG51bGwsXG4gICAgICAgICAgICBtYXg6IG51bGwsXG4gICAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICAgICAgZGF5TmFtZXM6IFsgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiLCBcIlN1bmRheVwiIF0sXG4gICAgICAgICAgICAgICAgbW9udGhOYW1lczogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiLCBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcbiAgICAgICAgICAgICAgICBvcmRpbmFsU3VmZml4OiBbIFwic3RcIiwgXCJuZFwiLCBcInJkXCIsIFwidGhcIiBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IGZ1bmN0aW9uKGJ1ZmZlciwgcG9zLCBjdXJyZW50UmVzdWx0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5taW4gPSBhbmFseXNlTWFzayhvcHRzLm1pbiwgb3B0cy5pbnB1dEZvcm1hdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgb3B0cy5tYXggPSBhbmFseXNlTWFzayhvcHRzLm1heCwgb3B0cy5pbnB1dEZvcm1hdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1cnJlbnRSZXN1bHQsIGRhdGVQYXJ0cyA9IGFuYWx5c2VNYXNrKGJ1ZmZlci5qb2luKFwiXCIpLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIGRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKSA9PT0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzVmFsaWREYXRlKGRhdGVQYXJ0cywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICYmIGlzRGF0ZUluUmFuZ2UoZGF0ZVBhcnRzLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBvcyAmJiByZXN1bHQgJiYgY3VycmVudFJlc3VsdC5wb3MgIT09IHBvcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBwYXJzZShvcHRzLmlucHV0Rm9ybWF0LCBkYXRlUGFydHMsIG9wdHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogY3VycmVudFJlc3VsdC5wb3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpLCBtYXRjaCwgZGF0ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKG9wdHMuaW5wdXRGb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcImRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldERhdGUoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcIm1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldE1vbnRoKCkgKyAxLCBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gXCJ5eXl5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9IHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcInlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldFllYXIoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZShvcHRzLm91dHB1dEZvcm1hdCwgYW5hbHlzZU1hc2sobWFza2VkVmFsdWUsIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpLCBvcHRzLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXNpbmc6IGZ1bmN0aW9uKGVsZW0sIHRlc3QsIHBvcywgdmFsaWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIlthcF1cIikgPT0gMCkgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIltBUF1cIikgPT0gMCkgcmV0dXJuIGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIHNoaWZ0UG9zaXRpb25zOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIElucHV0bWFzaztcbn0pOyIsIi8qIVxuKiBpbnB1dG1hc2subnVtZXJpYy5leHRlbnNpb25zLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuL2lucHV0bWFza1wiIF0sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2lucHV0bWFza1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeSh3aW5kb3cuSW5wdXRtYXNrKTtcbiAgICB9XG59KShmdW5jdGlvbihJbnB1dG1hc2spIHtcbiAgICB2YXIgJCA9IElucHV0bWFzay5kZXBlbmRlbmN5TGliO1xuICAgIGZ1bmN0aW9uIGF1dG9Fc2NhcGUodHh0LCBvcHRzKSB7XG4gICAgICAgIHZhciBlc2NhcGVkVHh0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zW3R4dC5jaGFyQXQoaSldIHx8IG9wdHMuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gfHwgb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5xdWFudGlmaWVybWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuZ3JvdXBtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuYWx0ZXJuYXRvcm1hcmtlciA9PT0gdHh0LmNoYXJBdChpKSkge1xuICAgICAgICAgICAgICAgIGVzY2FwZWRUeHQgKz0gXCJcXFxcXCIgKyB0eHQuY2hhckF0KGkpO1xuICAgICAgICAgICAgfSBlbHNlIGVzY2FwZWRUeHQgKz0gdHh0LmNoYXJBdChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXNjYXBlZFR4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWxpZ25EaWdpdHMoYnVmZmVyLCBkaWdpdHMsIG9wdHMpIHtcbiAgICAgICAgaWYgKGRpZ2l0cyA+IDApIHtcbiAgICAgICAgICAgIHZhciByYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChyYWRpeFBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgcmFkaXhQb3NpdGlvbiA9IGJ1ZmZlci5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZGlnaXRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldID0gYnVmZmVyW3JhZGl4UG9zaXRpb24gKyBpXSB8fCBcIjBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XG4gICAgICAgIG51bWVyaWM6IHtcbiAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgIT09IDAgJiYgaXNOYU4ob3B0cy5pbnRlZ2VyRGlnaXRzKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPSBvcHRzLnJlcGVhdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5yZXBlYXQgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmdyb3VwU2VwYXJhdG9yID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5kaWdpdHMgJiYgb3B0cy5kaWdpdHMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmdyb3VwU2VwYXJhdG9yID0gXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLlwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmdyb3VwU2VwYXJhdG9yID09PSBcIiBcIikge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuYXV0b0dyb3VwID0gb3B0cy5hdXRvR3JvdXAgJiYgb3B0cy5ncm91cFNlcGFyYXRvciAhPT0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5hdXRvR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmdyb3VwU2l6ZSA9PSBcInN0cmluZ1wiICYmIGlzRmluaXRlKG9wdHMuZ3JvdXBTaXplKSkgb3B0cy5ncm91cFNpemUgPSBwYXJzZUludChvcHRzLmdyb3VwU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShvcHRzLmludGVnZXJEaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwcyA9IE1hdGguZmxvb3Iob3B0cy5pbnRlZ2VyRGlnaXRzIC8gb3B0cy5ncm91cFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZCA9IG9wdHMuaW50ZWdlckRpZ2l0cyAlIG9wdHMuZ3JvdXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gcGFyc2VJbnQob3B0cy5pbnRlZ2VyRGlnaXRzKSArIChtb2QgPT09IDAgPyBzZXBzIC0gMSA6IHNlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaW50ZWdlckRpZ2l0cyA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPSBcIipcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5wbGFjZWhvbGRlci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPT09IFwicmFkaXhGb2N1c1wiICYmIChvcHRzLnBsYWNlaG9sZGVyID09PSBcIlwiICYmIG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9IFwibHZwXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbXCI7XCJdID0gb3B0cy5kZWZpbml0aW9uc1tcIn5cIl07XG4gICAgICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9uc1tcIjtcIl0uZGVmaW5pdGlvblN5bWJvbCA9IFwiflwiO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID0gb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9PT0gXCJyYWRpeEZvY3VzXCIgPyBcImx2cFwiIDogb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljaztcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kaWdpdHNPcHRpb25hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5kaWdpdHMpKSBvcHRzLmRpZ2l0cyA9IDI7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZGVjaW1hbFByb3RlY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1hc2sgPSBcIlsrXVwiO1xuICAgICAgICAgICAgICAgIG1hc2sgKz0gYXV0b0VzY2FwZShvcHRzLnByZWZpeCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCJ+ezEsXCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbWFzayArPSBcIn57XCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhEZWYgPSBvcHRzLmRlY2ltYWxQcm90ZWN0ID8gXCI6XCIgOiBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcSA9IG9wdHMuZGlnaXRzLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUoZHFbMF0pICYmIGRxWzFdICYmIGlzRmluaXRlKGRxWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSByYWRpeERlZiArIFwiO3tcIiArIG9wdHMuZGlnaXRzICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpZ2l0c09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIltcIiArIHJhZGl4RGVmICsgXCI7ezEsXCIgKyBvcHRzLmRpZ2l0cyArIFwifV1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXNrICs9IHJhZGl4RGVmICsgXCI7e1wiICsgb3B0cy5kaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrICs9IGF1dG9Fc2NhcGUob3B0cy5zdWZmaXgsIG9wdHMpO1xuICAgICAgICAgICAgICAgIG1hc2sgKz0gXCJbLV1cIjtcbiAgICAgICAgICAgICAgICBvcHRzLmdyZWVkeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxuICAgICAgICAgICAgZ3JlZWR5OiBmYWxzZSxcbiAgICAgICAgICAgIGRpZ2l0czogXCIqXCIsXG4gICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgIGVuZm9yY2VEaWdpdHNPbkJsdXI6IGZhbHNlLFxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25DbGljazogXCJyYWRpeEZvY3VzXCIsXG4gICAgICAgICAgICBncm91cFNpemU6IDMsXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgIGF1dG9Hcm91cDogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd01pbnVzOiB0cnVlLFxuICAgICAgICAgICAgbmVnYXRpb25TeW1ib2w6IHtcbiAgICAgICAgICAgICAgICBmcm9udDogXCItXCIsXG4gICAgICAgICAgICAgICAgYmFjazogXCJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGludGVnZXJEaWdpdHM6IFwiK1wiLFxuICAgICAgICAgICAgaW50ZWdlck9wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgcHJlZml4OiBcIlwiLFxuICAgICAgICAgICAgc3VmZml4OiBcIlwiLFxuICAgICAgICAgICAgcmlnaHRBbGlnbjogdHJ1ZSxcbiAgICAgICAgICAgIGRlY2ltYWxQcm90ZWN0OiB0cnVlLFxuICAgICAgICAgICAgbWluOiBudWxsLFxuICAgICAgICAgICAgbWF4OiBudWxsLFxuICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgIGluc2VydE1vZGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiBmYWxzZSxcbiAgICAgICAgICAgIHVubWFza0FzTnVtYmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGlucHV0VHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogZnVuY3Rpb24oYnVmZmVyLCBwb3MsIGMsIGlzU2VsZWN0aW9uLCBvcHRzLCBtYXNrc2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IFwiLVwiIHx8IGMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuYWxsb3dNaW51cyAhPT0gdHJ1ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBvcHRzLmlzTmVnYXRpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhb3B0cy5pc05lZ2F0aXZlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmpvaW4oXCJcIikgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSA/IHBvcyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTZWxlY3Rpb24gPT09IGZhbHNlICYmIGMgPT09IG9wdHMucmFkaXhQb2ludCAmJiAob3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCAmJiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3MgIT09IC0xICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3NdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3MgPT09IHJhZGl4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcmFkaXhQb3MgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbihidWZmZXIsIHBvcywgY3VycmVudFJlc3VsdCwgb3B0cykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkUG9zdE1hc2soYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3N0TWFzayA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHBvc3RNYXNrICs9IFwiKFwiICsgb3B0cy5ncm91cFNlcGFyYXRvciArIFwiKntcIiArIG9wdHMuZ3JvdXBTaXplICsgXCJ9KXsqfVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhTcGxpdCA9IGJ1ZmZlci5qb2luKFwiXCIpLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhTcGxpdFsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RNYXNrICs9IG9wdHMucmFkaXhQb2ludCArIFwiKntcIiArIHJhZGl4U3BsaXRbMV0ubWF0Y2goL15cXGQqXFw/P1xcZCovKVswXS5sZW5ndGggKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zdE1hc2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSBvcHRzLnN1ZmZpeC5zcGxpdChcIlwiKSwgcHJlZml4ID0gb3B0cy5wcmVmaXguc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZXN1bHQucG9zID09PSB1bmRlZmluZWQgJiYgY3VycmVudFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkICYmIGN1cnJlbnRSZXN1bHQuZG9wb3N0ICE9PSB0cnVlKSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjdXJyZW50UmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyBjdXJyZW50UmVzdWx0LmNhcmV0IDogY3VycmVudFJlc3VsdC5wb3M7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0gbWFza2VkVmFsdWUubGVuZ3RoIC0gY2FyZXRQb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zID09PSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAxICYmIGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50KSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWVbY2FyZXRQb3NdID0gXCI/XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wcmVmaXgubGVuZ3RoID4gMCAmJiBjYXJldFBvcyA+PSAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSAmJiBjYXJldFBvcyA8IG9wdHMucHJlZml4Lmxlbmd0aCAtIDEgKyAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeFtjYXJldFBvcyAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApXSA9IFwiP1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnN1ZmZpeC5sZW5ndGggPiAwICYmIGNhcmV0UG9zID49IG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4W2NhcmV0UG9zIC0gKG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApKV0gPSBcIj9cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVmaXggPSBwcmVmaXguam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBzdWZmaXggPSBzdWZmaXguam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUuam9pbihcIlwiKS5yZXBsYWNlKHByZWZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uoc3VmZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiWy1cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiXVwiLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihvcHRzLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnBsYWNlaG9sZGVyKSwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZS5sZW5ndGggPiAxICYmIHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKC9eXFw/L2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKC9eMC9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZS5jaGFyQXQoMCkgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIgJiYgb3B0cy5udW1lcmljSW5wdXQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gXCIwXCIgKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKCFvcHRzLmRpZ2l0c09wdGlvbmFsIHx8IG9wdHMuZW5mb3JjZURpZ2l0c09uQmx1ciAmJiBjdXJyZW50UmVzdWx0LmV2ZW50ID09PSBcImJsdXJcIikgJiYgaXNGaW5pdGUob3B0cy5kaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnBiID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza2VkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zaXRpb24gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlLnB1c2gob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpeFBvc2l0aW9uID0gcHJvY2Vzc1ZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBvcHRzLmRpZ2l0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghb3B0cy5kaWdpdHNPcHRpb25hbCB8fCBvcHRzLmVuZm9yY2VEaWdpdHNPbkJsdXIgJiYgY3VycmVudFJlc3VsdC5ldmVudCA9PT0gXCJibHVyXCIpICYmIChwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID09PSB1bmRlZmluZWQgfHwgcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSA9PT0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBjdXJyZW50UmVzdWx0LnBsYWNlaG9sZGVyIHx8IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocnBiICE9PSAtMSAmJiBtYXNrZWRWYWx1ZVtycGIgKyBpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldIHx8IG1hc2tlZFZhbHVlW3JwYiArIGldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5hdXRvR3JvdXAgPT09IHRydWUgJiYgb3B0cy5ncm91cFNlcGFyYXRvciAhPT0gXCJcIiAmJiAoY2hhckF0UG9zICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgY3VycmVudFJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCB8fCBjdXJyZW50UmVzdWx0LmRvcG9zdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRSYWRpeCA9IHByb2Nlc3NWYWx1ZVtwcm9jZXNzVmFsdWUubGVuZ3RoIC0gMV0gPT09IG9wdHMucmFkaXhQb2ludCAmJiBjdXJyZW50UmVzdWx0LmMgPT09IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IElucHV0bWFzayhidWlsZFBvc3RNYXNrKHByb2Nlc3NWYWx1ZSwgb3B0cyksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmljSW5wdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaml0TWFza2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTk/XVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmZvcm1hdChwcm9jZXNzVmFsdWUuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkUmFkaXgpIHByb2Nlc3NWYWx1ZSArPSBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlLmNoYXJBdCgwKSA9PT0gb3B0cy5ncm91cFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaXNOZWdhdGl2ZSAmJiBjdXJyZW50UmVzdWx0LmV2ZW50ID09PSBcImJsdXJcIikge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBwcm9jZXNzVmFsdWUgIT09IFwiMFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcmVmaXggKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlICs9IHN1ZmZpeDtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5pc05lZ2F0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSArPSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSAkLmluQXJyYXkoXCI/XCIsIHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtjYXJldFBvc10gPSBjaGFyQXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2FyZXRQb3MgPSBjdXJyZW50UmVzdWx0LmNhcmV0IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckF0UG9zID09PSBvcHRzLnJhZGl4UG9pbnQgfHwgY2hhckF0UG9zID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IHx8IGNoYXJBdFBvcyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2FyZXRQb3MgPSAkLmluQXJyYXkoY2hhckF0UG9zLCBwcm9jZXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NhcmV0UG9zICE9PSAtMSkgY2FyZXRQb3MgPSBuZXdDYXJldFBvcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBwcm9jZXNzVmFsdWUubGVuZ3RoIC0gY2FyZXRQb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IChjaGFyQXRQb3MgPT09IHVuZGVmaW5lZCB8fCBjdXJyZW50UmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkKSAmJiBjYXJldFBvcyAhPT0gdW5kZWZpbmVkID8gY2FyZXRQb3MgKyAob3B0cy5udW1lcmljSW5wdXQgPyAtMSA6IDEpIDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogcHJvY2Vzc1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogY3VycmVudFJlc3VsdC5kb3Bvc3QgfHwgYnVmZmVyLmpvaW4oXCJcIikgIT09IHByb2Nlc3NWYWx1ZS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlciA/IHJzbHQgOiBjdXJyZW50UmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXJzZU1pbk1heE9wdGlvbnMob3B0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wYXJzZU1pbk1heE9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5taW4gPSBvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCA9PT0gXCIsXCIpIG9wdHMubWluID0gb3B0cy5taW4ucmVwbGFjZShvcHRzLnJhZGl4UG9pbnQsIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm1pbiA9IGlzRmluaXRlKG9wdHMubWluKSA/IHBhcnNlRmxvYXQob3B0cy5taW4pIDogTmFOO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihvcHRzLm1pbikpIG9wdHMubWluID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1heCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gb3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLFwiKSBvcHRzLm1heCA9IG9wdHMubWF4LnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5tYXggPSBpc0Zpbml0ZShvcHRzLm1heCkgPyBwYXJzZUZsb2F0KG9wdHMubWF4KSA6IE5hTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5tYXgpKSBvcHRzLm1heCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnBhcnNlTWluTWF4T3B0aW9ucyA9IFwiZG9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgY2FyZXRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJibHVyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZU1pbk1heE9wdGlvbnMob3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5taW4gIT09IG51bGwgfHwgb3B0cy5tYXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tlZCA9IG9wdHMub25Vbk1hc2soYnVmZmVyLmpvaW4oXCJcIiksIHVuZGVmaW5lZCwgJC5leHRlbmQoe30sIG9wdHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsICYmIHVubWFza2VkIDwgb3B0cy5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc05lZ2F0aXZlID0gb3B0cy5taW4gPCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksIGNhcmV0UG9zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLm1heCAhPT0gbnVsbCAmJiB1bm1hc2tlZCA+IG9wdHMubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IG9wdHMubWF4IDwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucG9zdFZhbGlkYXRpb24ob3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLCBjYXJldFBvcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgY2FyZXRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImJsdXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiX2NoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdleDoge1xuICAgICAgICAgICAgICAgIGludGVnZXJQYXJ0OiBmdW5jdGlvbihvcHRzLCBlbXB0eUNoZWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eUNoZWNrID8gbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XCIpIDogbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XFxcXGQrXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZWdlck5QYXJ0OiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiW1xcXFxkXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpICsgXCJdK1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBcIn5cIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzLCBpc1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQsIGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hycyA9PT0gXCJrXCIgfHwgY2hycyA9PT0gXCJtXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNocnMgPT09IFwia1wiID8gMiA6IDU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZC5pbnNlcnQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkLnBvcyA9IHBvcyArIGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gc3RyaWN0ID8gbmV3IFJlZ0V4cChcIlswLTlcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIFwiXVwiKS50ZXN0KGNocnMpIDogbmV3IFJlZ0V4cChcIlswLTldXCIpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCAhPT0gdHJ1ZSAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gIT09IHVuZGVmaW5lZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10ubWF0Y2guZGVmID09PSBcIn5cIiAmJiAhaXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCJdXCIsIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHZSYWRpeFNwbGl0ID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHZSYWRpeFNwbGl0WzFdID0gcHZSYWRpeFNwbGl0WzFdLnJlcGxhY2UoLzAvZywgb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXRbMF0gPT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdlJhZGl4U3BsaXRbMF0gPSBwdlJhZGl4U3BsaXRbMF0ucmVwbGFjZSgvMC9nLCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHZSYWRpeFNwbGl0WzBdICsgb3B0cy5yYWRpeFBvaW50ICsgcHZSYWRpeFNwbGl0WzFdIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJUZW1wbGF0ZSA9IG1hc2tzZXQuX2J1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IGJ1ZmZlclRlbXBsYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcm9jZXNzVmFsdWUubWF0Y2goSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KGJ1ZmZlclRlbXBsYXRlKSArIFwiJFwiKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyVGVtcGxhdGUgPSBidWZmZXJUZW1wbGF0ZS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShidWZmZXJUZW1wbGF0ZSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZVtwb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIGNocnMgPT09IG9wdHMucmFkaXhQb2ludCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIitcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIChjaHJzID09PSBcIi1cIiB8fCBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIi1cIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIjpcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXggPSBcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpICsgXCJdXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG5ldyBSZWdFeHAocmFkaXgpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLnBsYWNlaG9sZGVyID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIGlmICh1bm1hc2tlZFZhbHVlID09PSBcIlwiICYmIG9wdHMubnVsbGFibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCksIFwiZ1wiKSwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy51bm1hc2tBc051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiICYmIHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgIT09IC0xKSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkpLCBcIi1cIik7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24oYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gKG9wdHMubnVtZXJpY0lucHV0ID8gYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpIDogYnVmZmVyKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpKSwgXCItXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgXCIoWzAtOV17M30pXCIsIFwiZ1wiKSwgXCIkMVwiKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKG1hc2tlZFZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkJlZm9yZU1hc2s6IGZ1bmN0aW9uKGluaXRpYWxWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb2ludCA9IG9wdHMucmFkaXhQb2ludCB8fCBcIixcIjtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBpbml0aWFsVmFsdWUgPT0gXCJudW1iZXJcIiB8fCBvcHRzLmlucHV0VHlwZSA9PT0gXCJudW1iZXJcIikgJiYgcmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlUGFydHMgPSBpbml0aWFsVmFsdWUuc3BsaXQocmFkaXhQb2ludCksIGludGVnZXJQYXJ0ID0gdmFsdWVQYXJ0c1swXS5yZXBsYWNlKC9bXlxcLTAtOV0vZywgXCJcIiksIGRlY2ltYWxQYXJ0ID0gdmFsdWVQYXJ0cy5sZW5ndGggPiAxID8gdmFsdWVQYXJ0c1sxXS5yZXBsYWNlKC9bXjAtOV0vZywgXCJcIikgOiBcIlwiO1xuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGludGVnZXJQYXJ0ICsgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiID8gcmFkaXhQb2ludCArIGRlY2ltYWxQYXJ0IDogZGVjaW1hbFBhcnQpO1xuICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9IGRlY2ltYWxQYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyB8fCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShvcHRzLmRpZ2l0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBwYXJzZUludChvcHRzLmRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCksIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShpbml0aWFsVmFsdWUpKSBpbml0aWFsVmFsdWUgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoaW5pdGlhbFZhbHVlKSAqIGRpZ2l0c0ZhY3RvcikgLyBkaWdpdHNGYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHMgPT09IDAgJiYgaW5pdGlhbFZhbHVlLmluZGV4T2YoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHJhZGl4UG9pbnQpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZihJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsaWduRGlnaXRzKGluaXRpYWxWYWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpLCBkaWdpdHMsIG9wdHMpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgSW5wdXRtYXNrLmtleUNvZGUuVVA6XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKSArIHBhcnNlSW50KG9wdHMuc3RlcCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnB1dG1hc2sua2V5Q29kZS5ET1dOOlxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgLSBwYXJzZUludChvcHRzLnN0ZXApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVuY3k6IHtcbiAgICAgICAgICAgIHByZWZpeDogXCIkIFwiLFxuICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiLFwiLFxuICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgYXV0b0dyb3VwOiB0cnVlLFxuICAgICAgICAgICAgZGlnaXRzOiAyLFxuICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGRlY2ltYWw6IHtcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIlxuICAgICAgICB9LFxuICAgICAgICBpbnRlZ2VyOiB7XG4gICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXG4gICAgICAgICAgICBkaWdpdHM6IDAsXG4gICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIHBlcmNlbnRhZ2U6IHtcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIGRpZ2l0czogMixcbiAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXG4gICAgICAgICAgICBhdXRvR3JvdXA6IGZhbHNlLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgICAgICBzdWZmaXg6IFwiICVcIixcbiAgICAgICAgICAgIGFsbG93TWludXM6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSW5wdXRtYXNrO1xufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiaW1wb3J0IElucHV0bWFzayBmcm9tIFwiaW5wdXRtYXNrXCI7XHJcbmltcG9ydCBpc051bWVyaWMgZnJvbSBcInZhbGlkYXRvci9saWIvaXNOdW1lcmljXCI7XHJcblxyXG5jb25zdCBtb250aFJ1c1RyYW5zbGF0ZSA9IHtcclxuICAwOiBcItCv0L3QstCw0YDRjFwiLFxyXG4gIDE6IFwi0KTQtdCy0YDQsNC70YxcIixcclxuICAyOiBcItCc0LDRgNGCXCIsXHJcbiAgMzogXCLQkNC/0YDQtdC70YxcIixcclxuICA0OiBcItCc0LDQuVwiLFxyXG4gIDU6IFwi0JjRjtC90YxcIixcclxuICA2OiBcItCY0Y7Qu9GMXCIsXHJcbiAgNzogXCLQkNCy0LPRg9GB0YJcIixcclxuICA4OiBcItCh0LXQvdGC0Y/QsdGA0YxcIixcclxuICA5OiBcItCe0LrRgtGP0LHRgNGMXCIsXHJcbiAgMTA6IFwi0J3QvtGP0LHRgNGMXCIsXHJcbiAgMTE6IFwi0JTQtdC60LDQsdGA0YxcIlxyXG59O1xyXG5cclxuY29uc3QgbW9udGhSZWR1Y3Rpb24gPSB7XHJcbiAgMDogXCLRj9C90LJcIixcclxuICAxOiBcItGE0LXQslwiLFxyXG4gIDI6IFwi0LzQsNGAXCIsXHJcbiAgMzogXCLQsNC/0YBcIixcclxuICA0OiBcItC80LDRj1wiLFxyXG4gIDU6IFwi0LjRjtC9XCIsXHJcbiAgNjogXCLQuNGO0LtcIixcclxuICA3OiBcItCw0LLQs1wiLFxyXG4gIDg6IFwi0YHQtdC9XCIsXHJcbiAgOTogXCLQvtC60YJcIixcclxuICAxMDogXCLQvdC+0Y9cIixcclxuICAxMTogXCLQtNC10LpcIlxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0SHRtbEVsZW1lbnQodGFnTmFtZSwgY2xhc3NOYW1lLCB0ZXh0KSB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XHJcblxyXG4gIGlmIChjbGFzc05hbWUpIHtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRleHQpIHtcclxuICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFR3b0RpZ2l0TnVtYmVyU3RyaW5nKG51bWJlcikge1xyXG4gIGlmIChudW1iZXIgPCAxMCkge1xyXG4gICAgcmV0dXJuIGAwJHtudW1iZXJ9YDtcclxuICB9XHJcblxyXG4gIHJldHVybiBudW1iZXI7XHJcbn1cclxuXHJcbmNsYXNzIERhdGVQaWNrZXIge1xyXG4gIGNvbnN0cnVjdG9yKGRvbUluZm8gPSB7fSkge1xyXG4gICAgaWYgKGRvbUluZm8ucGFyZW50Tm9kZUlkKSB7XHJcbiAgICAgIHRoaXMucGFyZW50Tm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2RvbUluZm8ucGFyZW50Tm9kZUlkfWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIHBhcmVudE5vZGVJZCBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb21JbmZvLmFycml2YWxJbnB1dElkKSB7XHJcbiAgICAgIHRoaXMuYXJyaXZhbElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7ZG9tSW5mby5hcnJpdmFsSW5wdXRJZH1gKTtcclxuICAgICAgSW5wdXRtYXNrKHsgbWFzazogXCI5OS45OS45OTk5XCIsIHBsYWNlaG9sZGVyOiBcItCU0JQu0JzQnC7Qk9CT0JPQk1wiIH0pLm1hc2soXHJcbiAgICAgICAgYCMke2RvbUluZm8uYXJyaXZhbElucHV0SWR9YFxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmFycml2YWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy5vbkZvY3VzQXJyaXZhbElucHV0KTtcclxuICAgICAgdGhpcy5hcnJpdmFsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZ0ID0+IHtcclxuICAgICAgICBjb25zdCBpc1ByZXNzRW50ZXIgPSBldnQua2V5Q29kZSA9PT0gMTM7XHJcbiAgICAgICAgaWYgKGlzUHJlc3NFbnRlcikge1xyXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB0aGlzLnNob3dBcnJpdmFsTW9udGhDYWxlbmRhcigpO1xyXG4gICAgICAgICAgY29uc3QgYXJyaXZhbElucHV0RGF0ZSA9IHRoaXMuYXJyaXZhbElucHV0LnZhbHVlO1xyXG4gICAgICAgICAgaWYgKHRoaXMuaGFzRGF0YUZ1bGwoYXJyaXZhbElucHV0RGF0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC5mb2N1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRvbUluZm8uZGVwYXJ0dXJlSW5wdXRJZCkge1xyXG4gICAgICB0aGlzLmRlcGFydHVyZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBgIyR7ZG9tSW5mby5kZXBhcnR1cmVJbnB1dElkfWBcclxuICAgICAgKTtcclxuICAgICAgSW5wdXRtYXNrKHsgbWFzazogXCI5OS45OS45OTk5XCIsIHBsYWNlaG9sZGVyOiBcItCU0JQu0JzQnC7Qk9CT0JPQk1wiIH0pLm1hc2soXHJcbiAgICAgICAgYCMke2RvbUluZm8uZGVwYXJ0dXJlSW5wdXRJZH1gXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMub25Gb2N1c0RlcGFydHVyZUlucHV0KTtcclxuICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldnQgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzUHJlc3NFbnRlciA9IGV2dC5rZXlDb2RlID09PSAxMztcclxuICAgICAgICBpZiAoaXNQcmVzc0VudGVyKSB7XHJcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIHRoaXMuc2hvd0RlcGFydHVyZU1vbnRoQ2FsZW5kYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb21JbmZvLmRhdGVQaWNrZXJJbnB1dElkKSB7XHJcbiAgICAgIHRoaXMuZGF0ZVBpY2tlcklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBgIyR7ZG9tSW5mby5kYXRlUGlja2VySW5wdXRJZH1gXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZGF0ZVBpY2tlcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNob3dDYWxlbmRhcik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRvbUluZm8uYXJyaXZhbFNwbGl0QnRuSWQpIHtcclxuICAgICAgdGhpcy5hcnJpdmFsU3BsaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIGAjJHtkb21JbmZvLmFycml2YWxTcGxpdEJ0bklkfWBcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5hcnJpdmFsU3BsaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgdGhpcy5zaG93QXJyaXZhbE1vbnRoQ2FsZW5kYXJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZG9tSW5mby5kZXBhcnR1cmVTcGxpdEJ0bklkKSB7XHJcbiAgICAgIHRoaXMuZGVwYXJ0dXJlU3BsaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIGAjJHtkb21JbmZvLmRlcGFydHVyZVNwbGl0QnRuSWR9YFxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmRlcGFydHVyZVNwbGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgIHRoaXMuc2hvd0RlcGFydHVyZU1vbnRoQ2FsZW5kYXJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZG9tSW5mby5pbnB1dFBsYWNlaG9sZGVyKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRQbGFjZWhvbGRlciA9IGRvbUluZm8uaW5wdXRQbGFjZWhvbGRlcjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcclxuICAgIHRoaXMuYXJyaXZhbERhdGUgPSBudWxsO1xyXG4gICAgdGhpcy5kZXBhcnR1cmVEYXRlID0gbnVsbDtcclxuICAgIHRoaXMuYXJyaXZhbENlbGwgPSBudWxsO1xyXG4gICAgdGhpcy5kZXBhcnR1cmVDZWxsID0gbnVsbDtcclxuICAgIHRoaXMuaXNTdGFydFNlbGVjdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc0VuZFNlbGVjdCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaGFzQ3VycmVudE1vbnRoID0gZGF0ZSA9PiB7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpID09PSB0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCk7XHJcbiAgfTtcclxuXHJcbiAgY29tcGFpcmVEYXRlID0gKGZpcnN0RGF0ZSwgc2Vjb25kRGF0ZSkgPT4ge1xyXG4gICAgY29uc3QgZmlyc3REYXkgPSBmaXJzdERhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgY29uc3QgZmlyc3RNb250aCA9IGZpcnN0RGF0ZS5nZXRNb250aCgpO1xyXG4gICAgY29uc3QgZmlyc3RZZWFyID0gZmlyc3REYXRlLmdldEZ1bGxZZWFyKCk7XHJcblxyXG4gICAgY29uc3Qgc2Vjb25kRGF5ID0gc2Vjb25kRGF0ZS5nZXREYXRlKCk7XHJcbiAgICBjb25zdCBzZWNvbmRNb250aCA9IHNlY29uZERhdGUuZ2V0TW9udGgoKTtcclxuICAgIGNvbnN0IHNlY29uZFllYXIgPSBzZWNvbmREYXRlLmdldEZ1bGxZZWFyKCk7XHJcblxyXG4gICAgaWYgKGZpcnN0WWVhciA+IHNlY29uZFllYXIpIHtcclxuICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZpcnN0WWVhciA8IHNlY29uZFllYXIpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaXJzdE1vbnRoID4gc2Vjb25kTW9udGgpIHtcclxuICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZpcnN0TW9udGggPCBzZWNvbmRNb250aCkge1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZpcnN0RGF5ID4gc2Vjb25kRGF5KSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaXJzdERheSA8IHNlY29uZERheSkge1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfTtcclxuXHJcbiAgaGFzRGF0YUZ1bGwgPSB0ZXh0RGF0ZSA9PiB7XHJcbiAgICBjb25zdCB0ZXh0RGF0ZVNwbGl0ID0gdGV4dERhdGUuc3BsaXQoXCIuXCIpO1xyXG4gICAgY29uc3QgaXNEYXRhRnVsbE51bWJlciA9IHRleHREYXRlU3BsaXQuZXZlcnkoaXRlbSA9PiBpc051bWVyaWMoaXRlbSkpO1xyXG4gICAgcmV0dXJuIGlzRGF0YUZ1bGxOdW1iZXI7XHJcbiAgfTtcclxuXHJcbiAgc2hvd0NhbGVuZGFyID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2FsZW5kYXIgPSB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcIi5kYXRlLXBpY2tlclwiKTtcclxuICAgIGNvbnN0IGlzSGF2ZVNob3dDbGFzcyA9IGNhbGVuZGFyLmNsYXNzTGlzdC5jb250YWlucyhcImRhdGUtcGlja2VyLS1zaG93XCIpO1xyXG4gICAgaWYgKCFpc0hhdmVTaG93Q2xhc3MpIHtcclxuICAgICAgY2FsZW5kYXIuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyLS1zaG93XCIpO1xyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm9uQ2xpY2tTaG93Q2FsZW5kYXIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMub25Fc2NVbnNob3dDYWxlbmRhcik7XHJcbiAgfTtcclxuXHJcbiAgdW5zaG93Q2FsZW5kYXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWxlbmRhciA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwiLmRhdGUtcGlja2VyXCIpO1xyXG4gICAgY29uc3QgaXNIYXZlU2hvd0NsYXNzID0gY2FsZW5kYXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGF0ZS1waWNrZXItLXNob3dcIik7XHJcbiAgICBpZiAoaXNIYXZlU2hvd0NsYXNzKSB7XHJcbiAgICAgIGNhbGVuZGFyLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlci0tc2hvd1wiKTtcclxuICAgIH1cclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbkNsaWNrU2hvd0NhbGVuZGFyKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uRXNjVW5zaG93Q2FsZW5kYXIpO1xyXG4gIH07XHJcblxyXG4gIHNob3dBcnJpdmFsTW9udGhDYWxlbmRhciA9ICgpID0+IHtcclxuICAgIGNvbnN0IGlucHV0RGF0ZSA9IHRoaXMuYXJyaXZhbElucHV0LnZhbHVlO1xyXG4gICAgY29uc3QgYXJyaXZhbElucHV0RGF0ZSA9IHRoaXMuZ2V0Q29udmVydGVEYXRlQnlVc2VySW5wdXQoaW5wdXREYXRlKTtcclxuICAgIGNvbnN0IGRhdGVNb3JlVGhpc0RhdGUgPVxyXG4gICAgICB0aGlzLmNvbXBhaXJlRGF0ZShhcnJpdmFsSW5wdXREYXRlLCBuZXcgRGF0ZSgpKSA+PSAwO1xyXG4gICAgdGhpcy5zaG93Q2FsZW5kYXIoKTtcclxuICAgIHRoaXMub25JbnB1dERhdGVBcnJpdmFsKCk7XHJcbiAgICBpZiAodGhpcy5hcnJpdmFsRGF0ZSAmJiBkYXRlTW9yZVRoaXNEYXRlKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlQ3VycmVudERhdGUodGhpcy5hcnJpdmFsRGF0ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc2hvd0RlcGFydHVyZU1vbnRoQ2FsZW5kYXIgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNob3dDYWxlbmRhcigpO1xyXG4gICAgdGhpcy5vbklucHV0RGF0ZURlcGFydHVyZSgpO1xyXG4gICAgaWYgKHRoaXMuZGVwYXJ0dXJlRGF0ZSkge1xyXG4gICAgICB0aGlzLnVwZGF0ZUN1cnJlbnREYXRlKHRoaXMuZGVwYXJ0dXJlRGF0ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc2hvd0Vycm9yQW5pbWF0aW9uID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlciA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKFwiLmRhdGUtcGlja2VyXCIpO1xyXG4gICAgZGF0ZVBpY2tlci5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXItLWVycm9yLWFuaW1hdGlvblwiKTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBkYXRlUGlja2VyLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlci0tZXJyb3ItYW5pbWF0aW9uXCIpO1xyXG4gICAgfSwgNzAwKTtcclxuICB9O1xyXG5cclxuICBwYWludGluZ1NlbGVjdENlbGwgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjZWxscyA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwidGRcIik7XHJcbiAgICBpZiAodGhpcy5hcnJpdmFsRGF0ZSAmJiB0aGlzLmRlcGFydHVyZURhdGUpIHtcclxuICAgICAgY29uc3QgYXJyaXZhbEFyaWFEYXRlID0gdGhpcy5nZXRBcmlhRGF0ZUJ5RGF0ZSh0aGlzLmFycml2YWxEYXRlKTtcclxuICAgICAgY29uc3QgZGVwYXJ0dXJlQXJpYURhdGUgPSB0aGlzLmdldEFyaWFEYXRlQnlEYXRlKHRoaXMuZGVwYXJ0dXJlRGF0ZSk7XHJcbiAgICAgIGNvbnN0IGlzRG91YmxlU2VsZWN0ID0gYXJyaXZhbEFyaWFEYXRlID09PSBkZXBhcnR1cmVBcmlhRGF0ZTtcclxuXHJcbiAgICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNDZWxsU3RhcnQgPSBhcnJpdmFsQXJpYURhdGUgPT09IGNlbGwuZ2V0QXR0cmlidXRlKFwiYXJpYS1kYXRlXCIpO1xyXG4gICAgICAgIGNvbnN0IGlzQ2VsbEVuZCA9IGRlcGFydHVyZUFyaWFEYXRlID09PSBjZWxsLmdldEF0dHJpYnV0ZShcImFyaWEtZGF0ZVwiKTtcclxuICAgICAgICBjb25zdCBjZWxsRGF0ZSA9IG5ldyBEYXRlKGNlbGwuZ2V0QXR0cmlidXRlKFwiYXJpYS1kYXRlXCIpKTtcclxuXHJcbiAgICAgICAgaWYgKGlzQ2VsbEVuZCAmJiAhaXNEb3VibGVTZWxlY3QpIHtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1lbmRcIik7XHJcbiAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3RcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpc0NlbGxEYXRlTW9yZVRoYW5BcnJpdmFsRGF0ZSA9XHJcbiAgICAgICAgICB0aGlzLmNvbXBhaXJlRGF0ZShjZWxsRGF0ZSwgdGhpcy5hcnJpdmFsRGF0ZSkgPiAwO1xyXG4gICAgICAgIGNvbnN0IGlzQ2VsbERhdGVMZXNzVGhhbkRlcGFydHVyZURhdGUgPVxyXG4gICAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoY2VsbERhdGUsIHRoaXMuZGVwYXJ0dXJlRGF0ZSkgPCAwO1xyXG4gICAgICAgIGNvbnN0IGlzQ2VsbERhdGVJblJhbmdlID1cclxuICAgICAgICAgIGlzQ2VsbERhdGVNb3JlVGhhbkFycml2YWxEYXRlICYmIGlzQ2VsbERhdGVMZXNzVGhhbkRlcGFydHVyZURhdGU7XHJcblxyXG4gICAgICAgIGlmIChpc0NlbGxEYXRlSW5SYW5nZSkge1xyXG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LXNwYWNlXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzQ2VsbFN0YXJ0ICYmIGRlcGFydHVyZUFyaWFEYXRlICYmICFpc0RvdWJsZVNlbGVjdCkge1xyXG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LXN0YXJ0XCIpO1xyXG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0XCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNDZWxsU3RhcnQpIHtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmFycml2YWxEYXRlKSB7XHJcbiAgICAgIGNvbnN0IGFycml2YWxBcmlhRGF0ZSA9IHRoaXMuZ2V0QXJpYURhdGVCeURhdGUodGhpcy5hcnJpdmFsRGF0ZSk7XHJcblxyXG4gICAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzQ2VsbFN0YXJ0ID0gYXJyaXZhbEFyaWFEYXRlID09PSBjZWxsLmdldEF0dHJpYnV0ZShcImFyaWEtZGF0ZVwiKTtcclxuICAgICAgICBpZiAoaXNDZWxsU3RhcnQpIHtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNsZWFyU2VsZWN0Q2VsbCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNlbGxzID0gdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZFwiKTtcclxuICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgIGNvbnN0IGlzQ2VsbFNlbGVjdCA9IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0XCIpO1xyXG4gICAgICBjb25zdCBpc0NlbGxTZWxlY3RTcGFjZSA9IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICAgIFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LXNwYWNlXCJcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgaXNDZWxsU3RhcnRTZWxlY3QgPSBjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICBcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zdGFydFwiXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGlzQ2VsbEVuZFNlbGVjdCA9IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICAgIFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LWVuZFwiXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoaXNDZWxsU2VsZWN0U3BhY2UpIHtcclxuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3Qtc3BhY2VcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0NlbGxTZWxlY3QpIHtcclxuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3RcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0NlbGxTdGFydFNlbGVjdCkge1xyXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zdGFydFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzQ2VsbEVuZFNlbGVjdCkge1xyXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1lbmRcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHByaW50UmVkdWN0aW9uRGF0ZSA9IHNlbGVjdERhdGUgPT4ge1xyXG4gICAgY29uc3Qgc2VsZWN0RGF5ID0gZ2V0VHdvRGlnaXROdW1iZXJTdHJpbmcoc2VsZWN0RGF0ZS5nZXREYXRlKCkpO1xyXG4gICAgY29uc3Qgc2VsZWN0TW9udGggPSBtb250aFJlZHVjdGlvbltzZWxlY3REYXRlLmdldE1vbnRoKCldO1xyXG4gICAgY29uc3QgcHJpbnRNZXNzYWdlID0gYCR7c2VsZWN0RGF5fSAke3NlbGVjdE1vbnRofWA7XHJcbiAgICBpZiAodGhpcy5kYXRlUGlja2VySW5wdXQpIHtcclxuICAgICAgaWYgKHRoaXMuaXNFbmRTZWxlY3QpIHtcclxuICAgICAgICB0aGlzLmRhdGVQaWNrZXJJbnB1dC50ZXh0Q29udGVudCArPSBgIC0gJHtwcmludE1lc3NhZ2V9YDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmRhdGVQaWNrZXJJbnB1dC50ZXh0Q29udGVudCA9IHByaW50TWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uQ2xpY2tTaG93Q2FsZW5kYXIgPSBldnQgPT4ge1xyXG4gICAgY29uc3QgY2FsZW5kYXIgPSB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcIi5kYXRlLXBpY2tlclwiKTtcclxuICAgIGNvbnN0IGlzSW5wdXRDbGljayA9XHJcbiAgICAgIGV2dC50YXJnZXQgPT09IHRoaXMuYXJyaXZhbElucHV0IHx8IGV2dC50YXJnZXQgPT09IHRoaXMuZGVwYXJ0dXJlSW5wdXQ7XHJcbiAgICBjb25zdCBpc0NhbGVuZGFyQ2xpY2sgPSBjYWxlbmRhci5jb250YWlucyhldnQudGFyZ2V0KTtcclxuICAgIGNvbnN0IGlzT3V0c2lkZUNsaWNrID0gIWlzSW5wdXRDbGljayAmJiAhaXNDYWxlbmRhckNsaWNrO1xyXG4gICAgaWYgKGlzT3V0c2lkZUNsaWNrKSB7XHJcbiAgICAgIHRoaXMudW5zaG93Q2FsZW5kYXIoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvbkVzY1Vuc2hvd0NhbGVuZGFyID0gZXZ0ID0+IHtcclxuICAgIGNvbnN0IGlzRXNjUHJlc3MgPSBldnQua2V5Q29kZSA9PT0gMjc7XHJcbiAgICBpZiAoaXNFc2NQcmVzcykge1xyXG4gICAgICB0aGlzLnVuc2hvd0NhbGVuZGFyKCk7XHJcbiAgICAgIGlmICh0aGlzLmFycml2YWxJbnB1dCkge1xyXG4gICAgICAgIHRoaXMuYXJyaXZhbElucHV0LmJsdXIoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5kZXBhcnR1cmVJbnB1dCkge1xyXG4gICAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQuYmx1cigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25Gb2N1c0Fycml2YWxJbnB1dCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGlucHV0RGF0ZSA9IHRoaXMuYXJyaXZhbElucHV0LnZhbHVlO1xyXG4gICAgY29uc3QgaXNJbnB1dERhdGVGdWxsID0gdGhpcy5oYXNEYXRhRnVsbChpbnB1dERhdGUpO1xyXG4gICAgaWYgKGlzSW5wdXREYXRlRnVsbCkge1xyXG4gICAgICBjb25zdCBhcnJpdmFsSW5wdXREYXRlID0gdGhpcy5nZXRDb252ZXJ0ZURhdGVCeVVzZXJJbnB1dChpbnB1dERhdGUpO1xyXG4gICAgICBjb25zdCBkYXRlTW9yZVRoaXNEYXRlID1cclxuICAgICAgICB0aGlzLmNvbXBhaXJlRGF0ZShhcnJpdmFsSW5wdXREYXRlLCBuZXcgRGF0ZSgpKSA+PSAwO1xyXG4gICAgICBpZiAoZGF0ZU1vcmVUaGlzRGF0ZSkge1xyXG4gICAgICAgIHRoaXMuc2hvd0Fycml2YWxNb250aENhbGVuZGFyKCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2hvd0NhbGVuZGFyKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25Gb2N1c0RlcGFydHVyZUlucHV0ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgaW5wdXREYXRlID0gdGhpcy5kZXBhcnR1cmVJbnB1dC52YWx1ZTtcclxuICAgIGNvbnN0IGlzSW5wdXREYXRlRnVsbCA9IHRoaXMuaGFzRGF0YUZ1bGwoaW5wdXREYXRlKTtcclxuICAgIGlmIChpc0lucHV0RGF0ZUZ1bGwpIHtcclxuICAgICAgdGhpcy5zaG93RGVwYXJ0dXJlTW9udGhDYWxlbmRhcigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zaG93Q2FsZW5kYXIoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvbklucHV0RGF0ZUFycml2YWwgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBwaWNrRGF0ZSA9IHRoaXMuYXJyaXZhbElucHV0LnZhbHVlO1xyXG4gICAgY29uc3QgaXNEYXRhRnVsbCA9IHRoaXMuaGFzRGF0YUZ1bGwocGlja0RhdGUpO1xyXG4gICAgaWYgKGlzRGF0YUZ1bGwpIHtcclxuICAgICAgY29uc3QgY29udmVydGVQaWNrRGF0ZSA9IHRoaXMuZ2V0Q29udmVydGVEYXRlQnlVc2VySW5wdXQocGlja0RhdGUpO1xyXG4gICAgICBjb25zdCBhcmlhRGF0ZSA9IHRoaXMuZ2V0QXJpYURhdGVCeURhdGUoY29udmVydGVQaWNrRGF0ZSk7XHJcbiAgICAgIGNvbnN0IHBpY2tDZWxsID0gdGhpcy5nZXRDZWxsQnlBcmlhRGF0ZShhcmlhRGF0ZSk7XHJcbiAgICAgIGxldCBpc0Fycml2YWxEYXRlTW9yZSA9IGZhbHNlO1xyXG4gICAgICBpZiAodGhpcy5kZXBhcnR1cmVEYXRlKSB7XHJcbiAgICAgICAgaXNBcnJpdmFsRGF0ZU1vcmUgPVxyXG4gICAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoY29udmVydGVQaWNrRGF0ZSwgdGhpcy5kZXBhcnR1cmVEYXRlKSA+IDA7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcGlja0RhdGVMZXNzVGhpc0RhdGUgPVxyXG4gICAgICAgIHRoaXMuY29tcGFpcmVEYXRlKGNvbnZlcnRlUGlja0RhdGUsIG5ldyBEYXRlKCkpIDwgMDtcclxuICAgICAgaWYgKHBpY2tEYXRlTGVzc1RoaXNEYXRlKSB7XHJcbiAgICAgICAgdGhpcy5zaG93RXJyb3JBbmltYXRpb24oKTtcclxuICAgICAgICBpZiAocGlja0NlbGwpIHtcclxuICAgICAgICAgIHBpY2tDZWxsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1lcnJvclwiKTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwaWNrQ2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwiZGF0ZS1waWNrZXJfX2RheS0tZXJyb3JcIik7XHJcbiAgICAgICAgICB9LCA3MDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFycml2YWxJbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5jbGVhclNlbGVjdENlbGwoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAocGlja0NlbGwpIHtcclxuICAgICAgICAgIGxldCBpc0Fycml2YWxDZWxsID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuYXJyaXZhbERhdGUpIHtcclxuICAgICAgICAgICAgaXNBcnJpdmFsQ2VsbCA9XHJcbiAgICAgICAgICAgICAgY29udmVydGVQaWNrRGF0ZS50b0RhdGVTdHJpbmcoKSA9PT1cclxuICAgICAgICAgICAgICB0aGlzLmFycml2YWxEYXRlLnRvRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICghaXNBcnJpdmFsQ2VsbCkge1xyXG4gICAgICAgICAgICBsZXQgaXNBcnJEYXRlTGVzc0RlcERhdGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlcGFydHVyZURhdGUpIHtcclxuICAgICAgICAgICAgICBpc0FyckRhdGVMZXNzRGVwRGF0ZSA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBhaXJlRGF0ZShjb252ZXJ0ZVBpY2tEYXRlLCB0aGlzLmRlcGFydHVyZURhdGUpIDwgMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzQXJyRGF0ZUxlc3NEZXBEYXRlKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgICB0aGlzLm9uU3RhcnRTZWxlY3RSYW5nZURhdGUocGlja0NlbGwsIGNvbnZlcnRlUGlja0RhdGUpO1xyXG4gICAgICAgICAgICAgIHRoaXMucGFpbnRpbmdTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJpdmFsRGF0ZU1vcmUpIHtcclxuICAgICAgICAgICAgICB0aGlzLmNsZWFyU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgICAgIHRoaXMub25DbGVhclNlbGVjdFJhbmdlRGF0ZSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFbmRTZWxlY3QgfHwgdGhpcy5pc1N0YXJ0U2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgICB0aGlzLm9uQ2xlYXJTZWxlY3RSYW5nZURhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJpdmFsRGF0ZU1vcmUpIHtcclxuICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICB0aGlzLm9uQ2xlYXJTZWxlY3RSYW5nZURhdGUoKTtcclxuICAgICAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vblN0YXJ0U2VsZWN0UmFuZ2VEYXRlKHBpY2tDZWxsLCBjb252ZXJ0ZVBpY2tEYXRlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uSW5wdXREYXRlRGVwYXJ0dXJlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgaW5wdXRBcnJpdmFsRGF0ZSA9IHRoaXMuYXJyaXZhbElucHV0LnZhbHVlO1xyXG4gICAgY29uc3QgaXNBcnJpdmFsRGF0ZUZ1bGwgPSB0aGlzLmhhc0RhdGFGdWxsKGlucHV0QXJyaXZhbERhdGUpO1xyXG4gICAgY29uc3QgcGlja0RhdGUgPSB0aGlzLmRlcGFydHVyZUlucHV0LnZhbHVlO1xyXG4gICAgY29uc3QgaXNQaWNrRGF0ZUZ1bGwgPSB0aGlzLmhhc0RhdGFGdWxsKHBpY2tEYXRlKTtcclxuICAgIGlmICghaXNBcnJpdmFsRGF0ZUZ1bGwgJiYgaXNQaWNrRGF0ZUZ1bGwpIHtcclxuICAgICAgdGhpcy5zaG93RXJyb3JBbmltYXRpb24oKTtcclxuICAgICAgdGhpcy5hcnJpdmFsSW5wdXQuZm9jdXMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChpc0Fycml2YWxEYXRlRnVsbCkge1xyXG4gICAgICAgIHRoaXMub25JbnB1dERhdGVBcnJpdmFsKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc1BpY2tEYXRlRnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnZlcnRlUGlja0RhdGUgPSB0aGlzLmdldENvbnZlcnRlRGF0ZUJ5VXNlcklucHV0KHBpY2tEYXRlKTtcclxuICAgICAgICBjb25zdCBhcmlhRGF0ZSA9IHRoaXMuZ2V0QXJpYURhdGVCeURhdGUoY29udmVydGVQaWNrRGF0ZSk7XHJcbiAgICAgICAgY29uc3QgcGlja0NlbGwgPSB0aGlzLmdldENlbGxCeUFyaWFEYXRlKGFyaWFEYXRlKTtcclxuICAgICAgICBpZiAocGlja0NlbGwpIHtcclxuICAgICAgICAgIGNvbnN0IGlzRGF0ZVNlbGVjdExlc3MgPVxyXG4gICAgICAgICAgICB0aGlzLmNvbXBhaXJlRGF0ZShjb252ZXJ0ZVBpY2tEYXRlLCB0aGlzLmFycml2YWxEYXRlKSA8IDA7XHJcbiAgICAgICAgICBpZiAoaXNEYXRlU2VsZWN0TGVzcykge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dFcnJvckFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICBwaWNrQ2VsbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tZXJyb3JcIik7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHBpY2tDZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlcl9fZGF5LS1lcnJvclwiKTtcclxuICAgICAgICAgICAgfSwgNzAwKTtcclxuICAgICAgICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpc0RlcGFydHVyZUNlbGwgPSB0aGlzLmRlcGFydHVyZUNlbGwgPT09IHBpY2tDZWxsO1xyXG4gICAgICAgICAgICBpZiAoIWlzRGVwYXJ0dXJlQ2VsbCkge1xyXG4gICAgICAgICAgICAgIGlmICh0aGlzLmlzRW5kU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgdGhpcy5vbkVuZFNlbGVjdFJhbmdlRGF0ZShwaWNrQ2VsbCwgY29udmVydGVQaWNrRGF0ZSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5wYWludGluZ1NlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBpc0RhdGVTZWxlY3RMZXNzID1cclxuICAgICAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoY29udmVydGVQaWNrRGF0ZSwgdGhpcy5hcnJpdmFsRGF0ZSkgPCAwO1xyXG4gICAgICAgICAgaWYgKGlzRGF0ZVNlbGVjdExlc3MpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgICB0aGlzLm9uRW5kU2VsZWN0UmFuZ2VEYXRlKHBpY2tDZWxsLCBjb252ZXJ0ZVBpY2tEYXRlKTtcclxuICAgICAgICAgICAgdGhpcy5wYWludGluZ1NlbGVjdENlbGwoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvblN0YXJ0U2VsZWN0UmFuZ2VEYXRlID0gKGNlbGwsIHN0YXJ0RGF0ZSkgPT4ge1xyXG4gICAgaWYgKGNlbGwpIHtcclxuICAgICAgdGhpcy5hcnJpdmFsQ2VsbCA9IGNlbGw7XHJcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlzU3RhcnRTZWxlY3QgPSB0cnVlO1xyXG4gICAgdGhpcy5pc0VuZFNlbGVjdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5hcnJpdmFsRGF0ZSA9IHN0YXJ0RGF0ZTtcclxuICB9O1xyXG5cclxuICBvbkVuZFNlbGVjdFJhbmdlRGF0ZSA9IChjZWxsLCBkYXRlRW5kKSA9PiB7XHJcbiAgICBpZiAoY2VsbCkge1xyXG4gICAgICB0aGlzLmRlcGFydHVyZUNlbGwgPSBjZWxsO1xyXG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3RcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pc1N0YXJ0U2VsZWN0ID0gZmFsc2U7XHJcbiAgICB0aGlzLmlzRW5kU2VsZWN0ID0gdHJ1ZTtcclxuICAgIHRoaXMuZGVwYXJ0dXJlRGF0ZSA9IGRhdGVFbmQ7XHJcbiAgfTtcclxuXHJcbiAgb25DbGVhclNlbGVjdFJhbmdlRGF0ZSA9ICgpID0+IHtcclxuICAgIHRoaXMuYXJyaXZhbERhdGUgPSBudWxsO1xyXG4gICAgdGhpcy5kZXBhcnR1cmVEYXRlID0gbnVsbDtcclxuICAgIHRoaXMuYXJyaXZhbENlbGwgPSBudWxsO1xyXG4gICAgdGhpcy5kZXBhcnR1cmVDZWxsID0gbnVsbDtcclxuICAgIHRoaXMuaXNTdGFydFNlbGVjdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc0VuZFNlbGVjdCA9IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIG9uRnVsbENsZWFyQ2FsZW5kYXIgPSAoKSA9PiB7XHJcbiAgICB0aGlzLm9uQ2xlYXJTZWxlY3RSYW5nZURhdGUoKTtcclxuICAgIHRoaXMuY2xlYXJTZWxlY3RDZWxsKCk7XHJcbiAgICBpZiAodGhpcy5hcnJpdmFsSW5wdXQpIHRoaXMuYXJyaXZhbElucHV0LnZhbHVlID0gXCJcIjtcclxuICAgIGlmICh0aGlzLmRlcGFydHVyZUlucHV0KSB0aGlzLmRlcGFydHVyZUlucHV0LnZhbHVlID0gXCJcIjtcclxuICAgIGlmICh0aGlzLmRhdGVQaWNrZXJJbnB1dCkge1xyXG4gICAgICB0aGlzLmRhdGVQaWNrZXJJbnB1dC50ZXh0Q29udGVudCA9IHRoaXMuaW5wdXRQbGFjZWhvbGRlclxyXG4gICAgICAgID8gdGhpcy5pbnB1dFBsYWNlaG9sZGVyXHJcbiAgICAgICAgOiBcIlwiO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVDdXJyZW50RGF0ZShuZXcgRGF0ZSgpKTtcclxuICB9O1xyXG5cclxuICBvblNlbGVjdERhdGUgPSBldnQgPT4ge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBpc1RkVGFnID0gZXZ0LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidGRcIjtcclxuICAgIGlmIChpc1RkVGFnKSB7XHJcbiAgICAgIGlmICh0aGlzLmlzRW5kU2VsZWN0KSB7XHJcbiAgICAgICAgdGhpcy5jbGVhclNlbGVjdENlbGwoKTtcclxuICAgICAgICB0aGlzLm9uQ2xlYXJTZWxlY3RSYW5nZURhdGUoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdGQgPSBldnQudGFyZ2V0O1xyXG4gICAgICBjb25zdCBzZWxlY3REYXRlID0gbmV3IERhdGUodGQuZ2V0QXR0cmlidXRlKFwiYXJpYS1kYXRlXCIpKTtcclxuICAgICAgY29uc3Qgc2VsZWN0RGF5ID0gZ2V0VHdvRGlnaXROdW1iZXJTdHJpbmcoc2VsZWN0RGF0ZS5nZXREYXRlKCkpO1xyXG4gICAgICBjb25zdCBzZWxlY3RNb250aCA9IGdldFR3b0RpZ2l0TnVtYmVyU3RyaW5nKHNlbGVjdERhdGUuZ2V0TW9udGgoKSArIDEpO1xyXG4gICAgICBjb25zdCBzZWxlY3RZZWFyID0gc2VsZWN0RGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICBjb25zdCBzZWxlY3REYXRlVGV4dCA9IGAke3NlbGVjdERheX0uJHtzZWxlY3RNb250aH0uJHtzZWxlY3RZZWFyfWA7XHJcbiAgICAgIGNvbnN0IGlzQ2VsbERvdWJsZVNlbGVjdCA9XHJcbiAgICAgICAgdGQgPT09IHRoaXMuYXJyaXZhbENlbGwgfHwgdGQgPT09IHRoaXMuZGVwYXJ0dXJlQ2VsbDtcclxuICAgICAgY29uc3QgaXNEYXRlTGVzc1RoaXNEYXRlID0gdGhpcy5jb21wYWlyZURhdGUoc2VsZWN0RGF0ZSwgbmV3IERhdGUoKSkgPCAwO1xyXG4gICAgICBpZiAoaXNEYXRlTGVzc1RoaXNEYXRlKSB7XHJcbiAgICAgICAgdGhpcy5zaG93RXJyb3JBbmltYXRpb24oKTtcclxuICAgICAgICB0ZC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tZXJyb3JcIik7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0ZC5jbGFzc0xpc3QucmVtb3ZlKFwiZGF0ZS1waWNrZXJfX2RheS0tZXJyb3JcIik7XHJcbiAgICAgICAgfSwgNzAwKTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU3RhcnRTZWxlY3QgJiYgIWlzQ2VsbERvdWJsZVNlbGVjdCkge1xyXG4gICAgICAgIGNvbnN0IGlzRGF0ZVNlbGVjdExlc3MgPVxyXG4gICAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoc2VsZWN0RGF0ZSwgdGhpcy5hcnJpdmFsRGF0ZSkgPCAwO1xyXG4gICAgICAgIGlmIChpc0RhdGVTZWxlY3RMZXNzKSB7XHJcbiAgICAgICAgICB0aGlzLnNob3dFcnJvckFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgdGQuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLWVycm9yXCIpO1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRkLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlcl9fZGF5LS1lcnJvclwiKTtcclxuICAgICAgICAgIH0sIDcwMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMub25FbmRTZWxlY3RSYW5nZURhdGUodGQsIHNlbGVjdERhdGUpO1xyXG4gICAgICAgICAgaWYgKHRoaXMuZGVwYXJ0dXJlSW5wdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC52YWx1ZSA9IHNlbGVjdERhdGVUZXh0O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcmludFJlZHVjdGlvbkRhdGUoc2VsZWN0RGF0ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnBhaW50aW5nU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50RGF0ZShzZWxlY3REYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNDZWxsRG91YmxlU2VsZWN0ICYmICF0aGlzLmlzRW5kU2VsZWN0KSB7XHJcbiAgICAgICAgdGhpcy5vbkVuZFNlbGVjdFJhbmdlRGF0ZSh0ZCwgc2VsZWN0RGF0ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVwYXJ0dXJlSW5wdXQpIHtcclxuICAgICAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQudmFsdWUgPSBzZWxlY3REYXRlVGV4dDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5wcmludFJlZHVjdGlvbkRhdGUoc2VsZWN0RGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlQ3VycmVudERhdGUoc2VsZWN0RGF0ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5vblN0YXJ0U2VsZWN0UmFuZ2VEYXRlKHRkLCBzZWxlY3REYXRlKTtcclxuICAgICAgICBpZiAodGhpcy5hcnJpdmFsSW5wdXQpIHtcclxuICAgICAgICAgIHRoaXMuYXJyaXZhbElucHV0LnZhbHVlID0gc2VsZWN0RGF0ZVRleHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMucHJpbnRSZWR1Y3Rpb25EYXRlKHNlbGVjdERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnREYXRlKHNlbGVjdERhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZ2V0QXJpYURhdGVCeURhdGUgPSBkYXRlID0+IHtcclxuICAgIGxldCBhcmlhRGF5ID0gZGF0ZS5nZXREYXRlKCk7XHJcbiAgICBpZiAoYXJpYURheSA+PSAxICYmIGFyaWFEYXkgPD0gOSkge1xyXG4gICAgICBhcmlhRGF5ID0gYDAke2FyaWFEYXl9YDtcclxuICAgIH1cclxuICAgIGxldCBhcmlhTW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgaWYgKGFyaWFNb250aCA+PSAxICYmIGFyaWFNb250aCA8PSA5KSB7XHJcbiAgICAgIGFyaWFNb250aCA9IGAwJHthcmlhTW9udGh9YDtcclxuICAgIH1cclxuICAgIGNvbnN0IGFyaWFZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgY29uc3QgYXJpYURhdGUgPSBgJHthcmlhWWVhcn0tJHthcmlhTW9udGh9LSR7YXJpYURheX1gO1xyXG4gICAgcmV0dXJuIGFyaWFEYXRlO1xyXG4gIH07XHJcblxyXG4gIGdldENvbnZlcnRlRGF0ZUJ5VXNlcklucHV0ID0gdXNlckRhdGUgPT4ge1xyXG4gICAgY29uc3Qgc3BsaXRVc2VyRGF0ZSA9IHVzZXJEYXRlLnNwbGl0KFwiLlwiKTtcclxuICAgIGNvbnN0IGRheSA9IHNwbGl0VXNlckRhdGVbMF07XHJcbiAgICBjb25zdCBtb250aCA9IHNwbGl0VXNlckRhdGVbMV07XHJcbiAgICBjb25zdCB5ZWFyID0gc3BsaXRVc2VyRGF0ZVsyXTtcclxuICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7XHJcbiAgfTtcclxuXHJcbiAgZ2V0TnVtYmVyUm93ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY3VycmVudFllYXIgPSB0aGlzLmN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBjdXJyZW50TW9udGggPSB0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCk7XHJcbiAgICBjb25zdCBsYXN0RGF5Q3VycmVudE1vbnRoID0gbmV3IERhdGUoXHJcbiAgICAgIGN1cnJlbnRZZWFyICsgMSxcclxuICAgICAgY3VycmVudE1vbnRoICsgMSxcclxuICAgICAgMFxyXG4gICAgKS5nZXREYXRlKCk7XHJcbiAgICBjb25zdCBsYXN0V2Vla0RheVByZXZNb250aCA9IG5ldyBEYXRlKFxyXG4gICAgICBjdXJyZW50WWVhcixcclxuICAgICAgY3VycmVudE1vbnRoLFxyXG4gICAgICAwXHJcbiAgICApLmdldERheSgpO1xyXG4gICAgY29uc3QgaXNMYXN0V2Vla0RheVN1dGVyZGF5ID0gbGFzdFdlZWtEYXlQcmV2TW9udGggPT09IDY7XHJcbiAgICBjb25zdCBpc0xhc3RXZWVrRGF5RnJpZGF5ID0gbGFzdFdlZWtEYXlQcmV2TW9udGggPT09IDU7XHJcbiAgICBjb25zdCBpc0xhc3RXZWVrRGF5U3VuZGF5ID0gbGFzdFdlZWtEYXlQcmV2TW9udGggPT09IDA7XHJcbiAgICBsZXQgbnVtYmVyUm93ID0gNTtcclxuXHJcbiAgICBpZiAoaXNMYXN0V2Vla0RheVN1dGVyZGF5ICYmIGxhc3REYXlDdXJyZW50TW9udGggPj0gMzApIHtcclxuICAgICAgbnVtYmVyUm93ID0gNjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNMYXN0V2Vla0RheUZyaWRheSAmJiBsYXN0RGF5Q3VycmVudE1vbnRoID09PSAzMSkge1xyXG4gICAgICBudW1iZXJSb3cgPSA2O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0xhc3RXZWVrRGF5U3VuZGF5ICYmIGxhc3REYXlDdXJyZW50TW9udGggPT09IDI4KSB7XHJcbiAgICAgIG51bWJlclJvdyA9IDQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVtYmVyUm93O1xyXG4gIH07XHJcblxyXG4gIGdldENhbGVuZGFyVGFibGVEYXRlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdGFibGVGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgIGNvbnN0IG5vd0RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgY3VycmVudFllYXIgPSB0aGlzLmN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBjdXJyZW50TW9udGggPSB0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCk7XHJcbiAgICBjb25zdCBsYXN0V2Vla0RheVByZXZNb250aCA9IG5ldyBEYXRlKFxyXG4gICAgICBjdXJyZW50WWVhcixcclxuICAgICAgY3VycmVudE1vbnRoLFxyXG4gICAgICAwXHJcbiAgICApLmdldERheSgpO1xyXG4gICAgY29uc3QgbGFzdERheVByZXZNb250aCA9IG5ldyBEYXRlKGN1cnJlbnRZZWFyLCBjdXJyZW50TW9udGgsIDApLmdldERhdGUoKTtcclxuICAgIGNvbnN0IG51bWJlckNvbHVtbiA9IDc7XHJcbiAgICBjb25zdCBudW1iZXJSb3cgPSB0aGlzLmdldE51bWJlclJvdygpO1xyXG5cclxuICAgIGxldCB2aWV3TW9udGg7XHJcbiAgICBsZXQgbnVtYmVyRGF5O1xyXG5cclxuICAgIGNvbnN0IGlzTGFzdFdlZWtEYXlTdW5kYXkgPSBsYXN0V2Vla0RheVByZXZNb250aCA9PT0gMDtcclxuXHJcbiAgICBpZiAoaXNMYXN0V2Vla0RheVN1bmRheSkge1xyXG4gICAgICBudW1iZXJEYXkgPSAwO1xyXG4gICAgICB2aWV3TW9udGggPSBjdXJyZW50TW9udGg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBudW1iZXJEYXkgPSBsYXN0RGF5UHJldk1vbnRoIC0gbGFzdFdlZWtEYXlQcmV2TW9udGg7XHJcbiAgICAgIHZpZXdNb250aCA9IGN1cnJlbnRNb250aCAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJSb3c7IGkrKykge1xyXG4gICAgICBjb25zdCB0YWJsZVRyID0gZ2V0SHRtbEVsZW1lbnQoXCJ0clwiKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtYmVyQ29sdW1uOyBqKyspIHtcclxuICAgICAgICBjb25zdCB2aWV3RGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnRZZWFyLCB2aWV3TW9udGgsICsrbnVtYmVyRGF5KTtcclxuICAgICAgICBjb25zdCB0YWJsZVRkID0gZ2V0SHRtbEVsZW1lbnQoXHJcbiAgICAgICAgICBcInRkXCIsXHJcbiAgICAgICAgICBcImRhdGUtcGlja2VyX19kYXlcIixcclxuICAgICAgICAgIHZpZXdEYXRlLmdldERhdGUoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgaXNOb3dEYXRlID0gdGhpcy5jb21wYWlyZURhdGUodmlld0RhdGUsIG5vd0RhdGUpID09PSAwO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaGFzQ3VycmVudE1vbnRoKHZpZXdEYXRlKSAmJiAhaXNOb3dEYXRlKSB7XHJcbiAgICAgICAgICB0YWJsZVRkLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1ub3QtY3VycmVudFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc05vd0RhdGUpIHtcclxuICAgICAgICAgIHRhYmxlVGQuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLWN1cnJlbnRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB2aWV3RGF0ZUF0ciA9IHRoaXMuZ2V0QXJpYURhdGVCeURhdGUodmlld0RhdGUpO1xyXG4gICAgICAgIHRhYmxlVGQuc2V0QXR0cmlidXRlKFwiYXJpYS1kYXRlXCIsIHZpZXdEYXRlQXRyKTtcclxuICAgICAgICB0YWJsZVRyLmFwcGVuZENoaWxkKHRhYmxlVGQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0YWJsZUZyYWdtZW50LmFwcGVuZENoaWxkKHRhYmxlVHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YWJsZUZyYWdtZW50O1xyXG4gIH07XHJcblxyXG4gIGdldENlbGxCeUFyaWFEYXRlID0gYXJpYURhdGUgPT4ge1xyXG4gICAgY29uc3QgY2VsbHMgPSB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChcInRkXCIpO1xyXG4gICAgbGV0IGNlbGw7XHJcbiAgICBjZWxscy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCBhcmlhRGF0ZUl0ZW0gPSBpdGVtLmdldEF0dHJpYnV0ZShcImFyaWEtZGF0ZVwiKTtcclxuICAgICAgaWYgKGFyaWFEYXRlSXRlbSA9PT0gYXJpYURhdGUpIGNlbGwgPSBpdGVtO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY2VsbDtcclxuICB9O1xyXG5cclxuICBnZXRDYWxlbmRhciA9ICgpID0+IHtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXJIdG1sU2VjdGlvbiA9IGdldEh0bWxFbGVtZW50KFwic2VjdGlvblwiLCBcImRhdGUtcGlja2VyXCIpO1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlckh0bWxXcmFwID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkYXRlLXBpY2tlcl9fd3JhcFwiKTtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXJIdG1sQ29udHJvbCA9IHRoaXMuZ2V0Q2FsZW5kYXJUb3BDb250cm9sKCk7XHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbFRhYmxlID0gdGhpcy5nZXRDYWxlbmRhclRhYmxlKCk7XHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbEJvdENvbnRyb2wgPSB0aGlzLmdldENhbGVuZGFyQm90Q29udHJvbCgpO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxXcmFwLmFwcGVuZENoaWxkKGRhdGVQaWNrZXJIdG1sQ29udHJvbCk7XHJcbiAgICBkYXRlUGlja2VySHRtbFdyYXAuYXBwZW5kQ2hpbGQoZGF0ZVBpY2tlckh0bWxUYWJsZSk7XHJcbiAgICBkYXRlUGlja2VySHRtbFdyYXAuYXBwZW5kQ2hpbGQoZGF0ZVBpY2tlckh0bWxCb3RDb250cm9sKTtcclxuICAgIGRhdGVQaWNrZXJIdG1sU2VjdGlvbi5hcHBlbmRDaGlsZChkYXRlUGlja2VySHRtbFdyYXApO1xyXG5cclxuICAgIHJldHVybiBkYXRlUGlja2VySHRtbFNlY3Rpb247XHJcbiAgfTtcclxuXHJcbiAgZ2V0Q2FsZW5kYXJUb3BDb250cm9sID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlckh0bWxDb250cm9sID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkYXRlLXBpY2tlcl9fY29udHJvbFwiKTtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuUHJldiA9IGdldEh0bWxFbGVtZW50KFxyXG4gICAgICBcImJ1dHRvblwiLFxyXG4gICAgICBcImRhdGUtcGlja2VyX19zbGlkZXItYnRuXCIsXHJcbiAgICAgIFwi0J3QsNC30LDQtFwiXHJcbiAgICApO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxTbGlkZXJCdG5QcmV2LmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fc2xpZGVyLWJ0bi0tcHJldlwiKTtcclxuICAgIGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuUHJldi50eXBlID0gXCJidXR0b25cIjtcclxuXHJcbiAgICBkYXRlUGlja2VySHRtbFNsaWRlckJ0blByZXYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2dCA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCB5ZWFyID0gdGhpcy5jdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICBjb25zdCBtb250aCA9IHRoaXMuY3VycmVudERhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgY29uc3QgZGF5ID0gMTtcclxuICAgICAgY29uc3QgcHJldk1vbnRoRGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF5KTtcclxuICAgICAgdGhpcy51cGRhdGVDdXJyZW50RGF0ZShwcmV2TW9udGhEYXRlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuTmV4dCA9IGdldEh0bWxFbGVtZW50KFxyXG4gICAgICBcImJ1dHRvblwiLFxyXG4gICAgICBcImRhdGUtcGlja2VyX19zbGlkZXItYnRuXCIsXHJcbiAgICAgIFwi0JLQv9C10YDQtdC0XCJcclxuICAgICk7XHJcbiAgICBkYXRlUGlja2VySHRtbFNsaWRlckJ0bk5leHQuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19zbGlkZXItYnRuLS1uZXh0XCIpO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxTbGlkZXJCdG5OZXh0LnR5cGUgPSBcImJ1dHRvblwiO1xyXG5cclxuICAgIGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuTmV4dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZ0ID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNvbnN0IHllYXIgPSB0aGlzLmN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgIGNvbnN0IG1vbnRoID0gdGhpcy5jdXJyZW50RGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICBjb25zdCBkYXkgPSAxO1xyXG4gICAgICBjb25zdCBwcmV2TW9udGhEYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGggKyAxLCBkYXkpO1xyXG4gICAgICB0aGlzLnVwZGF0ZUN1cnJlbnREYXRlKHByZXZNb250aERhdGUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbW9udGhOYW1lID0gbW9udGhSdXNUcmFuc2xhdGVbdGhpcy5jdXJyZW50RGF0ZS5nZXRNb250aCgpXTtcclxuICAgIGNvbnN0IHllYXJOYW1lID0gdGhpcy5jdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpO1xyXG5cclxuICAgIGNvbnN0IGRhdGVQaWNrZXJIdG1sVGl0bGUgPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJoMlwiLFxyXG4gICAgICBcImRhdGUtcGlja2VyX190aXRsZVwiLFxyXG4gICAgICBgJHttb250aE5hbWV9ICR7eWVhck5hbWV9YFxyXG4gICAgKTtcclxuXHJcbiAgICBkYXRlUGlja2VySHRtbFRpdGxlLmlkID0gXCJkYXRlLXBpY2tlci1tYWluLXRpdGxlXCI7XHJcblxyXG4gICAgZGF0ZVBpY2tlckh0bWxDb250cm9sLmFwcGVuZENoaWxkKGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuUHJldik7XHJcbiAgICBkYXRlUGlja2VySHRtbENvbnRyb2wuYXBwZW5kQ2hpbGQoZGF0ZVBpY2tlckh0bWxUaXRsZSk7XHJcbiAgICBkYXRlUGlja2VySHRtbENvbnRyb2wuYXBwZW5kQ2hpbGQoZGF0ZVBpY2tlckh0bWxTbGlkZXJCdG5OZXh0KTtcclxuXHJcbiAgICByZXR1cm4gZGF0ZVBpY2tlckh0bWxDb250cm9sO1xyXG4gIH07XHJcblxyXG4gIGdldENhbGVuZGFyVGFibGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWxlbmRhclRhYmxlID0gZ2V0SHRtbEVsZW1lbnQoXCJ0YWJsZVwiLCBcImRhdGUtcGlja2VyX19jYWxlbmRhclwiKTtcclxuICAgIGNvbnN0IHRIZWFkID0gZ2V0SHRtbEVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgIGNvbnN0IHRCb2R5ID0gZ2V0SHRtbEVsZW1lbnQoXCJ0Ym9keVwiKTtcclxuICAgIGNvbnN0IHRhYmxlVHJIZWFkID0gZ2V0SHRtbEVsZW1lbnQoXCJ0clwiKTtcclxuICAgIGNvbnN0IHRhYmxlSGVhZCA9IFtcItCf0L1cIiwgXCLQktGCXCIsIFwi0KHRgFwiLCBcItCn0YJcIiwgXCLQn9GCXCIsIFwi0KHQsVwiLCBcItCS0YFcIl07XHJcblxyXG4gICAgdGFibGVIZWFkLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIGNvbnN0IHRoID0gZ2V0SHRtbEVsZW1lbnQoXCJ0aFwiLCBcImRhdGUtcGlja2VyX190aFwiLCBpdGVtKTtcclxuICAgICAgdGFibGVUckhlYWQuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdEhlYWQuYXBwZW5kQ2hpbGQodGFibGVUckhlYWQpO1xyXG4gICAgY29uc3QgdGFibGVEYXRlID0gdGhpcy5nZXRDYWxlbmRhclRhYmxlRGF0ZSgpO1xyXG5cclxuICAgIHRCb2R5LmFwcGVuZENoaWxkKHRhYmxlRGF0ZSk7XHJcbiAgICB0Qm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vblNlbGVjdERhdGUpO1xyXG5cclxuICAgIGNhbGVuZGFyVGFibGUuYXBwZW5kQ2hpbGQodEhlYWQpO1xyXG4gICAgY2FsZW5kYXJUYWJsZS5hcHBlbmRDaGlsZCh0Qm9keSk7XHJcbiAgICByZXR1cm4gY2FsZW5kYXJUYWJsZTtcclxuICB9O1xyXG5cclxuICBnZXRDYWxlbmRhckJvdENvbnRyb2wgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbENvbnRyb2wgPSBnZXRIdG1sRWxlbWVudChcImRpdlwiLCBcImRhdGUtcGlja2VyX19jb250cm9sXCIpO1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlckJ1dHRvbnMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB0ZXh0OiBcItCe0YfQuNGB0YLQuNGC0YxcIixcclxuICAgICAgICBpc0FjY2VudDogZmFsc2UsXHJcbiAgICAgICAgY2xpY2tIYW5kbGVyOiB0aGlzLm9uRnVsbENsZWFyQ2FsZW5kYXJcclxuICAgICAgfSxcclxuICAgICAgeyB0ZXh0OiBcItCf0YDQuNC80LXQvdC40YLRjFwiLCBpc0FjY2VudDogdHJ1ZSwgY2xpY2tIYW5kbGVyOiB0aGlzLnVuc2hvd0NhbGVuZGFyIH1cclxuICAgIF07XHJcblxyXG4gICAgZGF0ZVBpY2tlckJ1dHRvbnMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgY29uc3QgYnRuID0gZ2V0SHRtbEVsZW1lbnQoXCJidXR0b25cIiwgXCJkYXRlLXBpY2tlcl9fYnV0dG9uXCIsIGl0ZW0udGV4dCk7XHJcbiAgICAgIGJ0bi50eXBlID0gXCJidXR0b25cIjtcclxuXHJcbiAgICAgIGlmIChpdGVtLmlzQWNjZW50KSB7XHJcbiAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fYnV0dG9uLS1hY2NlbnRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpdGVtLmNsaWNrSGFuZGxlcikge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZ0ID0+IHtcclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgaXRlbS5jbGlja0hhbmRsZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGF0ZVBpY2tlckh0bWxDb250cm9sLmFwcGVuZENoaWxkKGJ0bik7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZGF0ZVBpY2tlckh0bWxDb250cm9sO1xyXG4gIH07XHJcblxyXG4gIHVwZGF0ZUN1cnJlbnREYXRlID0gZGF0ZSA9PiB7XHJcbiAgICB0aGlzLmN1cnJlbnREYXRlID0gZGF0ZTtcclxuICAgIHRoaXMudXBkYXRlQ2FsZW5kYXIoKTtcclxuICAgIHRoaXMucGFpbnRpbmdTZWxlY3RDZWxsKCk7XHJcbiAgfTtcclxuXHJcbiAgdXBkYXRlQ2FsZW5kYXIgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyVGl0bGUoKTtcclxuICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJUYWJsZSgpO1xyXG4gIH07XHJcblxyXG4gIHVwZGF0ZUNhbGVuZGFyVGl0bGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGF0ZS1waWNrZXItbWFpbi10aXRsZVwiKTtcclxuICAgIGNvbnN0IG1vbnRoTmFtZSA9IG1vbnRoUnVzVHJhbnNsYXRlW3RoaXMuY3VycmVudERhdGUuZ2V0TW9udGgoKV07XHJcbiAgICBjb25zdCB5ZWFyTmFtZSA9IHRoaXMuY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgIHRpdGxlLnRleHRDb250ZW50ID0gYCR7bW9udGhOYW1lfSAke3llYXJOYW1lfWA7XHJcbiAgfTtcclxuXHJcbiAgdXBkYXRlQ2FsZW5kYXJUYWJsZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNhbGVuZGFyVGFibGUgPSB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcInRhYmxlXCIpO1xyXG4gICAgY29uc3QgY2FsZW5kYXJUYWJsZUJvZHkgPSBjYWxlbmRhclRhYmxlLnF1ZXJ5U2VsZWN0b3IoXCJ0Ym9keVwiKTtcclxuICAgIGNhbGVuZGFyVGFibGUucmVtb3ZlQ2hpbGQoY2FsZW5kYXJUYWJsZUJvZHkpO1xyXG4gICAgY29uc3QgdEJvZHkgPSBnZXRIdG1sRWxlbWVudChcInRib2R5XCIpO1xyXG4gICAgY29uc3QgdGFibGVEYXRlID0gdGhpcy5nZXRDYWxlbmRhclRhYmxlRGF0ZSgpO1xyXG4gICAgdEJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub25TZWxlY3REYXRlKTtcclxuICAgIHRCb2R5LmFwcGVuZENoaWxkKHRhYmxlRGF0ZSk7XHJcbiAgICBjYWxlbmRhclRhYmxlLmFwcGVuZENoaWxkKHRCb2R5KTtcclxuICB9O1xyXG5cclxuICByZW5kZXJDYWxlbmRhciA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNhbGVuZGFyID0gdGhpcy5nZXRDYWxlbmRhcigpO1xyXG4gICAgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGNhbGVuZGFyKTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEYXRlUGlja2VyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTnVtZXJpYztcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG51bWVyaWMgPSAvXlsrLV0/KFswLTldKlsuXSk/WzAtOV0rJC87XG52YXIgbnVtZXJpY05vU3ltYm9scyA9IC9eWzAtOV0rJC87XG5cbmZ1bmN0aW9uIGlzTnVtZXJpYyhzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm5vX3N5bWJvbHMpIHtcbiAgICByZXR1cm4gbnVtZXJpY05vU3ltYm9scy50ZXN0KHN0cik7XG4gIH1cblxuICByZXR1cm4gbnVtZXJpYy50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvYXJyb3ctYmFjay00MDNlNWRlLnN2Z1wiOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXNzZXJ0U3RyaW5nO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBhc3NlcnRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZztcblxuICBpZiAoIWlzU3RyaW5nKSB7XG4gICAgdmFyIGludmFsaWRUeXBlO1xuXG4gICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICBpbnZhbGlkVHlwZSA9ICdudWxsJztcbiAgICB9IGVsc2Uge1xuICAgICAgaW52YWxpZFR5cGUgPSBfdHlwZW9mKGlucHV0KTtcblxuICAgICAgaWYgKGludmFsaWRUeXBlID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciAmJiBpbnB1dC5jb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpKSB7XG4gICAgICAgIGludmFsaWRUeXBlID0gaW5wdXQuY29uc3RydWN0b3IubmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRUeXBlID0gXCJhIFwiLmNvbmNhdChpbnZhbGlkVHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIHN0cmluZyBidXQgcmVjZWl2ZWQgXCIuY29uY2F0KGludmFsaWRUeXBlLCBcIi5cIikpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvc3Rhci1iYWEyNzA1LnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9zdGFyLWFjdGl2ZS0xYTViOGQyLnBuZ1wiOyIsIi8qISBub3Vpc2xpZGVyIC0gMTQuMS4xIC0gMTIvMTUvMjAxOSAqL1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoW10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgLy8gTm9kZS9Db21tb25KU1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgd2luZG93Lm5vVWlTbGlkZXIgPSBmYWN0b3J5KCk7XG4gICAgfVxufSkoZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgVkVSU0lPTiA9IFwiMTQuMS4xXCI7XG5cbiAgICAvL3JlZ2lvbiBIZWxwZXIgTWV0aG9kc1xuXG4gICAgZnVuY3Rpb24gaXNWYWxpZEZvcm1hdHRlcihlbnRyeSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBlbnRyeS50byA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBlbnRyeS5mcm9tID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChlbCkge1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBCaW5kYWJsZSB2ZXJzaW9uXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlcyBkdXBsaWNhdGVzIGZyb20gYW4gYXJyYXkuXG4gICAgZnVuY3Rpb24gdW5pcXVlKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzW2FdID8gKHRoaXNbYV0gPSB0cnVlKSA6IGZhbHNlO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuXG4gICAgLy8gUm91bmQgYSB2YWx1ZSB0byB0aGUgY2xvc2VzdCAndG8nLlxuICAgIGZ1bmN0aW9uIGNsb3Nlc3QodmFsdWUsIHRvKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlIC8gdG8pICogdG87XG4gICAgfVxuXG4gICAgLy8gQ3VycmVudCBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudC5cbiAgICBmdW5jdGlvbiBvZmZzZXQoZWxlbSwgb3JpZW50YXRpb24pIHtcbiAgICAgICAgdmFyIHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuICAgICAgICB2YXIgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBwYWdlT2Zmc2V0ID0gZ2V0UGFnZU9mZnNldChkb2MpO1xuXG4gICAgICAgIC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBjb250YWlucyBsZWZ0IHNjcm9sbCBpbiBDaHJvbWUgb24gQW5kcm9pZC5cbiAgICAgICAgLy8gSSBoYXZlbid0IGZvdW5kIGEgZmVhdHVyZSBkZXRlY3Rpb24gdGhhdCBwcm92ZXMgdGhpcy4gV29yc3QgY2FzZVxuICAgICAgICAvLyBzY2VuYXJpbyBvbiBtaXMtbWF0Y2g6IHRoZSAndGFwJyBmZWF0dXJlIG9uIGhvcml6b250YWwgc2xpZGVycyBicmVha3MuXG4gICAgICAgIGlmICgvd2Via2l0LipDaHJvbWUuKk1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgIHBhZ2VPZmZzZXQueCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JpZW50YXRpb25cbiAgICAgICAgICAgID8gcmVjdC50b3AgKyBwYWdlT2Zmc2V0LnkgLSBkb2NFbGVtLmNsaWVudFRvcFxuICAgICAgICAgICAgOiByZWN0LmxlZnQgKyBwYWdlT2Zmc2V0LnggLSBkb2NFbGVtLmNsaWVudExlZnQ7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2tzIHdoZXRoZXIgYSB2YWx1ZSBpcyBudW1lcmljYWwuXG4gICAgZnVuY3Rpb24gaXNOdW1lcmljKGEpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBhID09PSBcIm51bWJlclwiICYmICFpc05hTihhKSAmJiBpc0Zpbml0ZShhKTtcbiAgICB9XG5cbiAgICAvLyBTZXRzIGEgY2xhc3MgYW5kIHJlbW92ZXMgaXQgYWZ0ZXIgW2R1cmF0aW9uXSBtcy5cbiAgICBmdW5jdGlvbiBhZGRDbGFzc0ZvcihlbGVtZW50LCBjbGFzc05hbWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMaW1pdHMgYSB2YWx1ZSB0byAwIC0gMTAwXG4gICAgZnVuY3Rpb24gbGltaXQoYSkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4oYSwgMTAwKSwgMCk7XG4gICAgfVxuXG4gICAgLy8gV3JhcHMgYSB2YXJpYWJsZSBhcyBhbiBhcnJheSwgaWYgaXQgaXNuJ3Qgb25lIHlldC5cbiAgICAvLyBOb3RlIHRoYXQgYW4gaW5wdXQgYXJyYXkgaXMgcmV0dXJuZWQgYnkgcmVmZXJlbmNlIVxuICAgIGZ1bmN0aW9uIGFzQXJyYXkoYSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhKSA/IGEgOiBbYV07XG4gICAgfVxuXG4gICAgLy8gQ291bnRzIGRlY2ltYWxzXG4gICAgZnVuY3Rpb24gY291bnREZWNpbWFscyhudW1TdHIpIHtcbiAgICAgICAgbnVtU3RyID0gU3RyaW5nKG51bVN0cik7XG4gICAgICAgIHZhciBwaWVjZXMgPSBudW1TdHIuc3BsaXQoXCIuXCIpO1xuICAgICAgICByZXR1cm4gcGllY2VzLmxlbmd0aCA+IDEgPyBwaWVjZXNbMV0ubGVuZ3RoIDogMDtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS8jYWRkX2NsYXNzXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gXCIgXCIgKyBjbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS8jcmVtb3ZlX2NsYXNzXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKFwiKF58XFxcXGIpXCIgKyBjbGFzc05hbWUuc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpICsgXCIoXFxcXGJ8JClcIiwgXCJnaVwiKSxcbiAgICAgICAgICAgICAgICBcIiBcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vcGxhaW5qcy5jb20vamF2YXNjcmlwdC9hdHRyaWJ1dGVzL2FkZGluZy1yZW1vdmluZy1hbmQtdGVzdGluZy1mb3ItY2xhc3Nlcy05L1xuICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdFxuICAgICAgICAgICAgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKVxuICAgICAgICAgICAgOiBuZXcgUmVnRXhwKFwiXFxcXGJcIiArIGNsYXNzTmFtZSArIFwiXFxcXGJcIikudGVzdChlbC5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvc2Nyb2xsWSNOb3Rlc1xuICAgIGZ1bmN0aW9uIGdldFBhZ2VPZmZzZXQoZG9jKSB7XG4gICAgICAgIHZhciBzdXBwb3J0UGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaXNDU1MxQ29tcGF0ID0gKGRvYy5jb21wYXRNb2RlIHx8IFwiXCIpID09PSBcIkNTUzFDb21wYXRcIjtcbiAgICAgICAgdmFyIHggPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVhPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbExlZnQ7XG4gICAgICAgIHZhciB5ID0gc3VwcG9ydFBhZ2VPZmZzZXRcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IGlzQ1NTMUNvbXBhdFxuICAgICAgICAgICAgICAgID8gZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbFRvcDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyB3ZSBwcm92aWRlIGEgZnVuY3Rpb24gdG8gY29tcHV0ZSBjb25zdGFudHMgaW5zdGVhZFxuICAgIC8vIG9mIGFjY2Vzc2luZyB3aW5kb3cuKiBhcyBzb29uIGFzIHRoZSBtb2R1bGUgbmVlZHMgaXRcbiAgICAvLyBzbyB0aGF0IHdlIGRvIG5vdCBjb21wdXRlIGFueXRoaW5nIGlmIG5vdCBuZWVkZWRcbiAgICBmdW5jdGlvbiBnZXRBY3Rpb25zKCkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGV2ZW50cyB0byBiaW5kLiBJRTExIGltcGxlbWVudHMgcG9pbnRlckV2ZW50cyB3aXRob3V0XG4gICAgICAgIC8vIGEgcHJlZml4LCB3aGljaCBicmVha3MgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBJRTEwIGltcGxlbWVudGF0aW9uLlxuICAgICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICBzdGFydDogXCJwb2ludGVyZG93blwiLFxuICAgICAgICAgICAgICAgICAgbW92ZTogXCJwb2ludGVybW92ZVwiLFxuICAgICAgICAgICAgICAgICAgZW5kOiBcInBvaW50ZXJ1cFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwiTVNQb2ludGVyRG93blwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1vdmU6IFwiTVNQb2ludGVyTW92ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZDogXCJNU1BvaW50ZXJVcFwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwibW91c2Vkb3duIHRvdWNoc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIm1vdXNlbW92ZSB0b3VjaG1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IFwibW91c2V1cCB0b3VjaGVuZFwiXG4gICAgICAgICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL0V2ZW50TGlzdGVuZXJPcHRpb25zL2Jsb2IvZ2gtcGFnZXMvZXhwbGFpbmVyLm1kXG4gICAgLy8gSXNzdWUgIzc4NVxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzUGFzc2l2ZSgpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJwYXNzaXZlXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgbnVsbCwgb3B0cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cblxuICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LkNTUyAmJiBDU1Muc3VwcG9ydHMgJiYgQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKTtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgLy9yZWdpb24gUmFuZ2UgQ2FsY3VsYXRpb25cblxuICAgIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiBhIHN1Yi1yYW5nZSBpbiByZWxhdGlvbiB0byBhIGZ1bGwgcmFuZ2UuXG4gICAgZnVuY3Rpb24gc3ViUmFuZ2VSYXRpbyhwYSwgcGIpIHtcbiAgICAgICAgcmV0dXJuIDEwMCAvIChwYiAtIHBhKTtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgSG93IG1hbnkgcGVyY2VudCBpcyB0aGlzIHZhbHVlIG9mIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAxMDApIC8gKHJhbmdlWzFdIC0gcmFuZ2VbMF0pO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBXaGVyZSBpcyB0aGlzIHZhbHVlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gdG9QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHJhbmdlWzBdIDwgMCA/IHZhbHVlICsgTWF0aC5hYnMocmFuZ2VbMF0pIDogdmFsdWUgLSByYW5nZVswXSk7XG4gICAgfVxuXG4gICAgLy8gKHZhbHVlKSBIb3cgbXVjaCBpcyB0aGlzIHBlcmNlbnRhZ2Ugb24gdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBpc1BlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAocmFuZ2VbMV0gLSByYW5nZVswXSkpIC8gMTAwICsgcmFuZ2VbMF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Sih2YWx1ZSwgYXJyKSB7XG4gICAgICAgIHZhciBqID0gMTtcblxuICAgICAgICB3aGlsZSAodmFsdWUgPj0gYXJyW2pdKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gajtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgSW5wdXQgYSB2YWx1ZSwgZmluZCB3aGVyZSwgb24gYSBzY2FsZSBvZiAwLTEwMCwgaXQgYXBwbGllcy5cbiAgICBmdW5jdGlvbiB0b1N0ZXBwaW5nKHhWYWwsIHhQY3QsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+PSB4VmFsLnNsaWNlKC0xKVswXSkge1xuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFZhbCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gcGEgKyB0b1BlcmNlbnRhZ2UoW3ZhLCB2Yl0sIHZhbHVlKSAvIHN1YlJhbmdlUmF0aW8ocGEsIHBiKTtcbiAgICB9XG5cbiAgICAvLyAodmFsdWUpIElucHV0IGEgcGVyY2VudGFnZSwgZmluZCB3aGVyZSBpdCBpcyBvbiB0aGUgc3BlY2lmaWVkIHJhbmdlLlxuICAgIGZ1bmN0aW9uIGZyb21TdGVwcGluZyh4VmFsLCB4UGN0LCB2YWx1ZSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBubyByYW5nZSBncm91cCB0aGF0IGZpdHMgMTAwXG4gICAgICAgIGlmICh2YWx1ZSA+PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB4VmFsLnNsaWNlKC0xKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gaXNQZXJjZW50YWdlKFt2YSwgdmJdLCAodmFsdWUgLSBwYSkgKiBzdWJSYW5nZVJhdGlvKHBhLCBwYikpO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBHZXQgdGhlIHN0ZXAgdGhhdCBhcHBsaWVzIGF0IGEgY2VydGFpbiB2YWx1ZS5cbiAgICBmdW5jdGlvbiBnZXRTdGVwKHhQY3QsIHhTdGVwcywgc25hcCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBiID0geFBjdFtqXTtcblxuICAgICAgICAvLyBJZiAnc25hcCcgaXMgc2V0LCBzdGVwcyBhcmUgdXNlZCBhcyBmaXhlZCBwb2ludHMgb24gdGhlIHNsaWRlci5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgcG9zaXRpb24sIGEgb3IgYi5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAtIGEgPiAoYiAtIGEpIC8gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgheFN0ZXBzW2ogLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHhQY3RbaiAtIDFdICsgY2xvc2VzdCh2YWx1ZSAtIHhQY3RbaiAtIDFdLCB4U3RlcHNbaiAtIDFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFbnRyeVBvaW50KGluZGV4LCB2YWx1ZSwgdGhhdCkge1xuICAgICAgICB2YXIgcGVyY2VudGFnZTtcblxuICAgICAgICAvLyBXcmFwIG51bWVyaWNhbCBpbnB1dCBpbiBhbiBhcnJheS5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVqZWN0IGFueSBpbnZhbGlkIGlucHV0LCBieSB0ZXN0aW5nIHdoZXRoZXIgdmFsdWUgaXMgYW4gYXJyYXkuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyBjb250YWlucyBpbnZhbGlkIHZhbHVlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvdmVydCBtaW4vbWF4IHN5bnRheCB0byAwIGFuZCAxMDAuXG4gICAgICAgIGlmIChpbmRleCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgcGVyY2VudGFnZSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gcGFyc2VGbG9hdChpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgY29ycmVjdCBpbnB1dC5cbiAgICAgICAgaWYgKCFpc051bWVyaWMocGVyY2VudGFnZSkgfHwgIWlzTnVtZXJpYyh2YWx1ZVswXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHZhbHVlcy5cbiAgICAgICAgdGhhdC54UGN0LnB1c2gocGVyY2VudGFnZSk7XG4gICAgICAgIHRoYXQueFZhbC5wdXNoKHZhbHVlWzBdKTtcblxuICAgICAgICAvLyBOYU4gd2lsbCBldmFsdWF0ZSB0byBmYWxzZSB0b28sIGJ1dCB0byBrZWVwXG4gICAgICAgIC8vIGxvZ2dpbmcgY2xlYXIsIHNldCBzdGVwIGV4cGxpY2l0bHkuIE1ha2Ugc3VyZVxuICAgICAgICAvLyBub3QgdG8gb3ZlcnJpZGUgdGhlICdzdGVwJyBzZXR0aW5nIHdpdGggZmFsc2UuXG4gICAgICAgIGlmICghcGVyY2VudGFnZSkge1xuICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZVsxXSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnhTdGVwc1swXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhhdC54U3RlcHMucHVzaChpc05hTih2YWx1ZVsxXSkgPyBmYWxzZSA6IHZhbHVlWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQueEhpZ2hlc3RDb21wbGV0ZVN0ZXAucHVzaCgwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdGVwUG9pbnQoaSwgbiwgdGhhdCkge1xuICAgICAgICAvLyBJZ25vcmUgJ2ZhbHNlJyBzdGVwcGluZy5cbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgaWYgKHRoYXQueFZhbFtpXSA9PT0gdGhhdC54VmFsW2kgKyAxXSkge1xuICAgICAgICAgICAgdGhhdC54U3RlcHNbaV0gPSB0aGF0LnhIaWdoZXN0Q29tcGxldGVTdGVwW2ldID0gdGhhdC54VmFsW2ldO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGYWN0b3IgdG8gcmFuZ2UgcmF0aW9cbiAgICAgICAgdGhhdC54U3RlcHNbaV0gPVxuICAgICAgICAgICAgZnJvbVBlcmNlbnRhZ2UoW3RoYXQueFZhbFtpXSwgdGhhdC54VmFsW2kgKyAxXV0sIG4pIC8gc3ViUmFuZ2VSYXRpbyh0aGF0LnhQY3RbaV0sIHRoYXQueFBjdFtpICsgMV0pO1xuXG4gICAgICAgIHZhciB0b3RhbFN0ZXBzID0gKHRoYXQueFZhbFtpICsgMV0gLSB0aGF0LnhWYWxbaV0pIC8gdGhhdC54TnVtU3RlcHNbaV07XG4gICAgICAgIHZhciBoaWdoZXN0U3RlcCA9IE1hdGguY2VpbChOdW1iZXIodG90YWxTdGVwcy50b0ZpeGVkKDMpKSAtIDEpO1xuICAgICAgICB2YXIgc3RlcCA9IHRoYXQueFZhbFtpXSArIHRoYXQueE51bVN0ZXBzW2ldICogaGlnaGVzdFN0ZXA7XG5cbiAgICAgICAgdGhhdC54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIFNwZWN0cnVtXG5cbiAgICBmdW5jdGlvbiBTcGVjdHJ1bShlbnRyeSwgc25hcCwgc2luZ2xlU3RlcCkge1xuICAgICAgICB0aGlzLnhQY3QgPSBbXTtcbiAgICAgICAgdGhpcy54VmFsID0gW107XG4gICAgICAgIHRoaXMueFN0ZXBzID0gW3NpbmdsZVN0ZXAgfHwgZmFsc2VdO1xuICAgICAgICB0aGlzLnhOdW1TdGVwcyA9IFtmYWxzZV07XG4gICAgICAgIHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXAgPSBbXTtcblxuICAgICAgICB0aGlzLnNuYXAgPSBzbmFwO1xuXG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIG9yZGVyZWQgPSBbXTsgLy8gWzAsICdtaW4nXSwgWzEsICc1MCUnXSwgWzIsICdtYXgnXVxuXG4gICAgICAgIC8vIE1hcCB0aGUgb2JqZWN0IGtleXMgdG8gYW4gYXJyYXkuXG4gICAgICAgIGZvciAoaW5kZXggaW4gZW50cnkpIHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBvcmRlcmVkLnB1c2goW2VudHJ5W2luZGV4XSwgaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvcnQgYWxsIGVudHJpZXMgYnkgdmFsdWUgKG51bWVyaWMgc29ydCkuXG4gICAgICAgIGlmIChvcmRlcmVkLmxlbmd0aCAmJiB0eXBlb2Ygb3JkZXJlZFswXVswXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVswXVswXSAtIGJbMF1bMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9yZGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBlbnRyaWVzIHRvIHN1YnJhbmdlcy5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgb3JkZXJlZC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGhhbmRsZUVudHJ5UG9pbnQob3JkZXJlZFtpbmRleF1bMV0sIG9yZGVyZWRbaW5kZXhdWzBdLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBhY3R1YWwgc3RlcCB2YWx1ZXMuXG4gICAgICAgIC8vIHhTdGVwcyBpcyBzb3J0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgeFBjdCBhbmQgeFZhbC5cbiAgICAgICAgdGhpcy54TnVtU3RlcHMgPSB0aGlzLnhTdGVwcy5zbGljZSgwKTtcblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBudW1lcmljIHN0ZXBzIHRvIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBzdWJyYW5nZSB0aGV5IHJlcHJlc2VudC5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBoYW5kbGVTdGVwUG9pbnQoaW5kZXgsIHRoaXMueE51bVN0ZXBzW2luZGV4XSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0TWFyZ2luID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnhOdW1TdGVwc1swXTtcblxuICAgICAgICBpZiAoc3RlcCAmJiAodmFsdWUgLyBzdGVwKSAlIDEgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2xpbWl0JywgJ21hcmdpbicgYW5kICdwYWRkaW5nJyBtdXN0IGJlIGRpdmlzaWJsZSBieSBzdGVwLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnhQY3QubGVuZ3RoID09PSAyID8gZnJvbVBlcmNlbnRhZ2UodGhpcy54VmFsLCB2YWx1ZSkgOiBmYWxzZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLnRvU3RlcHBpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHRvU3RlcHBpbmcodGhpcy54VmFsLCB0aGlzLnhQY3QsIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5mcm9tU3RlcHBpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVN0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXRTdGVwID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBnZXRTdGVwKHRoaXMueFBjdCwgdGhpcy54U3RlcHMsIHRoaXMuc25hcCwgdmFsdWUpO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldERlZmF1bHRTdGVwID0gZnVuY3Rpb24odmFsdWUsIGlzRG93biwgc2l6ZSkge1xuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG5cbiAgICAgICAgLy8gV2hlbiBhdCB0aGUgdG9wIG9yIHN0ZXBwaW5nIGRvd24sIGxvb2sgYXQgdGhlIHByZXZpb3VzIHN1Yi1yYW5nZVxuICAgICAgICBpZiAodmFsdWUgPT09IDEwMCB8fCAoaXNEb3duICYmIHZhbHVlID09PSB0aGlzLnhQY3RbaiAtIDFdKSkge1xuICAgICAgICAgICAgaiA9IE1hdGgubWF4KGogLSAxLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAodGhpcy54VmFsW2pdIC0gdGhpcy54VmFsW2ogLSAxXSkgLyBzaXplO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0TmVhcmJ5U3RlcHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0ZXBCZWZvcmU6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbaiAtIDJdLFxuICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAyXSxcbiAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqIC0gMl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzU3RlcDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqIC0gMV0sXG4gICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbaiAtIDFdLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2ogLSAxXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0ZXBBZnRlcjoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqXSxcbiAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqXSxcbiAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY291bnRTdGVwRGVjaW1hbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHRoaXMueE51bVN0ZXBzLm1hcChjb3VudERlY2ltYWxzKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIHN0ZXBEZWNpbWFscyk7XG4gICAgfTtcblxuICAgIC8vIE91dHNpZGUgdGVzdGluZ1xuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5jb252ZXJ0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RlcCh0aGlzLnRvU3RlcHBpbmcodmFsdWUpKTtcbiAgICB9O1xuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIE9wdGlvbnNcblxuICAgIC8qXHRFdmVyeSBpbnB1dCBvcHRpb24gaXMgdGVzdGVkIGFuZCBwYXJzZWQuIFRoaXMnbGwgcHJldmVudFxuICAgICAgICBlbmRsZXNzIHZhbGlkYXRpb24gaW4gaW50ZXJuYWwgbWV0aG9kcy4gVGhlc2UgdGVzdHMgYXJlXG4gICAgICAgIHN0cnVjdHVyZWQgd2l0aCBhbiBpdGVtIGZvciBldmVyeSBvcHRpb24gYXZhaWxhYmxlLiBBblxuICAgICAgICBvcHRpb24gY2FuIGJlIG1hcmtlZCBhcyByZXF1aXJlZCBieSBzZXR0aW5nIHRoZSAncicgZmxhZy5cbiAgICAgICAgVGhlIHRlc3RpbmcgZnVuY3Rpb24gaXMgcHJvdmlkZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICAgICAgICAtIFRoZSBwcm92aWRlZCB2YWx1ZSBmb3IgdGhlIG9wdGlvbjtcbiAgICAgICAgICAgIC0gQSByZWZlcmVuY2UgdG8gdGhlIG9wdGlvbnMgb2JqZWN0O1xuICAgICAgICAgICAgLSBUaGUgbmFtZSBmb3IgdGhlIG9wdGlvbjtcblxuICAgICAgICBUaGUgdGVzdGluZyBmdW5jdGlvbiByZXR1cm5zIGZhbHNlIHdoZW4gYW4gZXJyb3IgaXMgZGV0ZWN0ZWQsXG4gICAgICAgIG9yIHRydWUgd2hlbiBldmVyeXRoaW5nIGlzIE9LLiBJdCBjYW4gYWxzbyBtb2RpZnkgdGhlIG9wdGlvblxuICAgICAgICBvYmplY3QsIHRvIG1ha2Ugc3VyZSBhbGwgdmFsdWVzIGNhbiBiZSBjb3JyZWN0bHkgbG9vcGVkIGVsc2V3aGVyZS4gKi9cblxuICAgIHZhciBkZWZhdWx0Rm9ybWF0dGVyID0ge1xuICAgICAgICB0bzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnRvRml4ZWQoMik7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb206IE51bWJlclxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChlbnRyeSkge1xuICAgICAgICAvLyBBbnkgb2JqZWN0IHdpdGggYSB0byBhbmQgZnJvbSBtZXRob2QgaXMgc3VwcG9ydGVkLlxuICAgICAgICBpZiAoaXNWYWxpZEZvcm1hdHRlcihlbnRyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnZm9ybWF0JyByZXF1aXJlcyAndG8nIGFuZCAnZnJvbScgbWV0aG9kcy5cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFN0ZXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3N0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBzdGVwIG9wdGlvbiBjYW4gc3RpbGwgYmUgdXNlZCB0byBzZXQgc3RlcHBpbmdcbiAgICAgICAgLy8gZm9yIGxpbmVhciBzbGlkZXJzLiBPdmVyd3JpdHRlbiBpZiBzZXQgaW4gJ3JhbmdlJy5cbiAgICAgICAgcGFyc2VkLnNpbmdsZVN0ZXAgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0UmFuZ2UocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBGaWx0ZXIgaW5jb3JyZWN0IGlucHV0LlxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBtaXNzaW5nIHN0YXJ0IG9yIGVuZC5cbiAgICAgICAgaWYgKGVudHJ5Lm1pbiA9PT0gdW5kZWZpbmVkIHx8IGVudHJ5Lm1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IE1pc3NpbmcgJ21pbicgb3IgJ21heCcgaW4gJ3JhbmdlJy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBlcXVhbCBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IGVudHJ5Lm1heCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnICdtaW4nIGFuZCAnbWF4JyBjYW5ub3QgYmUgZXF1YWwuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLnNwZWN0cnVtID0gbmV3IFNwZWN0cnVtKGVudHJ5LCBwYXJzZWQuc25hcCwgcGFyc2VkLnNpbmdsZVN0ZXApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTdGFydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgaW5wdXQuIFZhbHVlcyBhcmVuJ3QgdGVzdGVkLCBhcyB0aGUgcHVibGljIC52YWwgbWV0aG9kXG4gICAgICAgIC8vIHdpbGwgYWx3YXlzIHByb3ZpZGUgYSB2YWxpZCBsb2NhdGlvbi5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzdGFydCcgb3B0aW9uIGlzIGluY29ycmVjdC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgbnVtYmVyIG9mIGhhbmRsZXMuXG4gICAgICAgIHBhcnNlZC5oYW5kbGVzID0gZW50cnkubGVuZ3RoO1xuXG4gICAgICAgIC8vIFdoZW4gdGhlIHNsaWRlciBpcyBpbml0aWFsaXplZCwgdGhlIC52YWwgbWV0aG9kIHdpbGxcbiAgICAgICAgLy8gYmUgY2FsbGVkIHdpdGggdGhlIHN0YXJ0IG9wdGlvbnMuXG4gICAgICAgIHBhcnNlZC5zdGFydCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTbmFwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gRW5mb3JjZSAxMDAlIHN0ZXBwaW5nIHdpdGhpbiBzdWJyYW5nZXMuXG4gICAgICAgIHBhcnNlZC5zbmFwID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3NuYXAnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QW5pbWF0ZShwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuYW5pbWF0ZSA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdhbmltYXRlJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFuaW1hdGlvbkR1cmF0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmFuaW1hdGlvbkR1cmF0aW9uID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDb25uZWN0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgdmFyIGNvbm5lY3QgPSBbZmFsc2VdO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICAvLyBNYXAgbGVnYWN5IG9wdGlvbnNcbiAgICAgICAgaWYgKGVudHJ5ID09PSBcImxvd2VyXCIpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW3RydWUsIGZhbHNlXTtcbiAgICAgICAgfSBlbHNlIGlmIChlbnRyeSA9PT0gXCJ1cHBlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtmYWxzZSwgdHJ1ZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgYm9vbGVhbiBvcHRpb25zXG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSB8fCBlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBwYXJzZWQuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdC5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdC5wdXNoKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlamVjdCBpbnZhbGlkIGlucHV0XG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoIHx8IGVudHJ5Lmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMgKyAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdjb25uZWN0JyBvcHRpb24gZG9lc24ndCBtYXRjaCBoYW5kbGUgY291bnQuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29ubmVjdCA9IGVudHJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmNvbm5lY3QgPSBjb25uZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RPcmllbnRhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBvcmllbnRhdGlvbiB0byBhbiBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeVxuICAgICAgICAvLyBhcnJheSBzZWxlY3Rpb24uXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob3Jpem9udGFsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmVydGljYWxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQub3J0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnb3JpZW50YXRpb24nIG9wdGlvbiBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RNYXJnaW4ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJc3N1ZSAjNTgyXG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLm1hcmdpbiA9IHBhcnNlZC5zcGVjdHJ1bS5nZXRNYXJnaW4oZW50cnkpO1xuXG4gICAgICAgIGlmICghcGFyc2VkLm1hcmdpbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnbWFyZ2luJyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdExpbWl0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdsaW1pdCcgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQubGltaXQgPSBwYXJzZWQuc3BlY3RydW0uZ2V0TWFyZ2luKGVudHJ5KTtcblxuICAgICAgICBpZiAoIXBhcnNlZC5saW1pdCB8fCBwYXJzZWQuaGFuZGxlcyA8IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICtcbiAgICAgICAgICAgICAgICAgICAgVkVSU0lPTiArXG4gICAgICAgICAgICAgICAgICAgIFwiKTogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RQYWRkaW5nKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpICYmICFBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgbnVtZXJpYyBvciBhcnJheSBvZiBleGFjdGx5IDIgbnVtYmVycy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVudHJ5KSAmJiAhKGVudHJ5Lmxlbmd0aCA9PT0gMiB8fCBpc051bWVyaWMoZW50cnlbMF0pIHx8IGlzTnVtZXJpYyhlbnRyeVsxXSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtlbnRyeSwgZW50cnldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ2dldE1hcmdpbicgcmV0dXJucyBmYWxzZSBmb3IgaW52YWxpZCB2YWx1ZXMuXG4gICAgICAgIHBhcnNlZC5wYWRkaW5nID0gW3BhcnNlZC5zcGVjdHJ1bS5nZXRNYXJnaW4oZW50cnlbMF0pLCBwYXJzZWQuc3BlY3RydW0uZ2V0TWFyZ2luKGVudHJ5WzFdKV07XG5cbiAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdID09PSBmYWxzZSB8fCBwYXJzZWQucGFkZGluZ1sxXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBsaW5lYXIgc2xpZGVycy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VkLnBhZGRpbmdbMF0gPCAwIHx8IHBhcnNlZC5wYWRkaW5nWzFdIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIocykuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdICsgcGFyc2VkLnBhZGRpbmdbMV0gPiAxMDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IG5vdCBleGNlZWQgMTAwJSBvZiB0aGUgcmFuZ2UuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERpcmVjdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBkaXJlY3Rpb24gYXMgYSBudW1lcmljYWwgdmFsdWUgZm9yIGVhc3kgcGFyc2luZy5cbiAgICAgICAgLy8gSW52ZXJ0IGNvbm5lY3Rpb24gZm9yIFJUTCBzbGlkZXJzLCBzbyB0aGF0IHRoZSBwcm9wZXJcbiAgICAgICAgLy8gaGFuZGxlcyBnZXQgdGhlIGNvbm5lY3QvYmFja2dyb3VuZCBjbGFzc2VzLlxuICAgICAgICBzd2l0Y2ggKGVudHJ5KSB7XG4gICAgICAgICAgICBjYXNlIFwibHRyXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicnRsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QmVoYXZpb3VyKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbnB1dCBpcyBhIHN0cmluZy5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYmVoYXZpb3VyJyBtdXN0IGJlIGEgc3RyaW5nIGNvbnRhaW5pbmcgb3B0aW9ucy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGFueSBrZXl3b3Jkcy5cbiAgICAgICAgLy8gTm9uZSBhcmUgcmVxdWlyZWQuXG4gICAgICAgIHZhciB0YXAgPSBlbnRyeS5pbmRleE9mKFwidGFwXCIpID49IDA7XG4gICAgICAgIHZhciBkcmFnID0gZW50cnkuaW5kZXhPZihcImRyYWdcIikgPj0gMDtcbiAgICAgICAgdmFyIGZpeGVkID0gZW50cnkuaW5kZXhPZihcImZpeGVkXCIpID49IDA7XG4gICAgICAgIHZhciBzbmFwID0gZW50cnkuaW5kZXhPZihcInNuYXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGhvdmVyID0gZW50cnkuaW5kZXhPZihcImhvdmVyXCIpID49IDA7XG4gICAgICAgIHZhciB1bmNvbnN0cmFpbmVkID0gZW50cnkuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIikgPj0gMDtcblxuICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWQuaGFuZGxlcyAhPT0gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2ZpeGVkJyBiZWhhdmlvdXIgbXVzdCBiZSB1c2VkIHdpdGggMiBoYW5kbGVzXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgbWFyZ2luIHRvIGVuZm9yY2UgZml4ZWQgc3RhdGVcbiAgICAgICAgICAgIHRlc3RNYXJnaW4ocGFyc2VkLCBwYXJzZWQuc3RhcnRbMV0gLSBwYXJzZWQuc3RhcnRbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuY29uc3RyYWluZWQgJiYgKHBhcnNlZC5tYXJnaW4gfHwgcGFyc2VkLmxpbWl0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndW5jb25zdHJhaW5lZCcgYmVoYXZpb3VyIGNhbm5vdCBiZSB1c2VkIHdpdGggbWFyZ2luIG9yIGxpbWl0XCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQuZXZlbnRzID0ge1xuICAgICAgICAgICAgdGFwOiB0YXAgfHwgc25hcCxcbiAgICAgICAgICAgIGRyYWc6IGRyYWcsXG4gICAgICAgICAgICBmaXhlZDogZml4ZWQsXG4gICAgICAgICAgICBzbmFwOiBzbmFwLFxuICAgICAgICAgICAgaG92ZXI6IGhvdmVyLFxuICAgICAgICAgICAgdW5jb25zdHJhaW5lZDogdW5jb25zdHJhaW5lZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RUb29sdGlwcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gYXNBcnJheShlbnRyeSk7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZWQudG9vbHRpcHMubGVuZ3RoICE9PSBwYXJzZWQuaGFuZGxlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogbXVzdCBwYXNzIGEgZm9ybWF0dGVyIGZvciBhbGwgaGFuZGxlcy5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGZvcm1hdHRlciAhPT0gXCJib29sZWFuXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZvcm1hdHRlci50byAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QXJpYUZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5hcmlhRm9ybWF0ID0gZW50cnk7XG4gICAgICAgIHZhbGlkYXRlRm9ybWF0KGVudHJ5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Rm9ybWF0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmZvcm1hdCA9IGVudHJ5O1xuICAgICAgICB2YWxpZGF0ZUZvcm1hdChlbnRyeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkU3VwcG9ydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFN1cHBvcnQgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAna2V5Ym9hcmRTdXBwb3J0JyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERvY3VtZW50RWxlbWVudChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gYWR2YW5jZWQgb3B0aW9uLiBQYXNzZWQgdmFsdWVzIGFyZSB1c2VkIHdpdGhvdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgcGFyc2VkLmRvY3VtZW50RWxlbWVudCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NQcmVmaXgocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcInN0cmluZ1wiICYmIGVudHJ5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzUHJlZml4JyBtdXN0IGJlIGEgc3RyaW5nIG9yIGBmYWxzZWAuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmNzc1ByZWZpeCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NDbGFzc2VzKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzQ2xhc3NlcycgbXVzdCBiZSBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWQuY3NzUHJlZml4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJ5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXNba2V5XSA9IHBhcnNlZC5jc3NQcmVmaXggKyBlbnRyeVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRlc3QgYWxsIGRldmVsb3BlciBzZXR0aW5ncyBhbmQgcGFyc2UgdG8gYXNzdW1wdGlvbi1zYWZlIHZhbHVlcy5cbiAgICBmdW5jdGlvbiB0ZXN0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIC8vIFRvIHByb3ZlIGEgZml4IGZvciAjNTM3LCBmcmVlemUgb3B0aW9ucyBoZXJlLlxuICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IGlzIG1vZGlmaWVkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgICAgLy8gT2JqZWN0LmZyZWV6ZShvcHRpb25zKTtcblxuICAgICAgICB2YXIgcGFyc2VkID0ge1xuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICBhcmlhRm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyLFxuICAgICAgICAgICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGVzdHMgYXJlIGV4ZWN1dGVkIGluIHRoZSBvcmRlciB0aGV5IGFyZSBwcmVzZW50ZWQgaGVyZS5cbiAgICAgICAgdmFyIHRlc3RzID0ge1xuICAgICAgICAgICAgc3RlcDogeyByOiBmYWxzZSwgdDogdGVzdFN0ZXAgfSxcbiAgICAgICAgICAgIHN0YXJ0OiB7IHI6IHRydWUsIHQ6IHRlc3RTdGFydCB9LFxuICAgICAgICAgICAgY29ubmVjdDogeyByOiB0cnVlLCB0OiB0ZXN0Q29ubmVjdCB9LFxuICAgICAgICAgICAgZGlyZWN0aW9uOiB7IHI6IHRydWUsIHQ6IHRlc3REaXJlY3Rpb24gfSxcbiAgICAgICAgICAgIHNuYXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RTbmFwIH0sXG4gICAgICAgICAgICBhbmltYXRlOiB7IHI6IGZhbHNlLCB0OiB0ZXN0QW5pbWF0ZSB9LFxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IHsgcjogZmFsc2UsIHQ6IHRlc3RBbmltYXRpb25EdXJhdGlvbiB9LFxuICAgICAgICAgICAgcmFuZ2U6IHsgcjogdHJ1ZSwgdDogdGVzdFJhbmdlIH0sXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogeyByOiBmYWxzZSwgdDogdGVzdE9yaWVudGF0aW9uIH0sXG4gICAgICAgICAgICBtYXJnaW46IHsgcjogZmFsc2UsIHQ6IHRlc3RNYXJnaW4gfSxcbiAgICAgICAgICAgIGxpbWl0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0TGltaXQgfSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHsgcjogZmFsc2UsIHQ6IHRlc3RQYWRkaW5nIH0sXG4gICAgICAgICAgICBiZWhhdmlvdXI6IHsgcjogdHJ1ZSwgdDogdGVzdEJlaGF2aW91ciB9LFxuICAgICAgICAgICAgYXJpYUZvcm1hdDogeyByOiBmYWxzZSwgdDogdGVzdEFyaWFGb3JtYXQgfSxcbiAgICAgICAgICAgIGZvcm1hdDogeyByOiBmYWxzZSwgdDogdGVzdEZvcm1hdCB9LFxuICAgICAgICAgICAgdG9vbHRpcHM6IHsgcjogZmFsc2UsIHQ6IHRlc3RUb29sdGlwcyB9LFxuICAgICAgICAgICAga2V5Ym9hcmRTdXBwb3J0OiB7IHI6IHRydWUsIHQ6IHRlc3RLZXlib2FyZFN1cHBvcnQgfSxcbiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudDogeyByOiBmYWxzZSwgdDogdGVzdERvY3VtZW50RWxlbWVudCB9LFxuICAgICAgICAgICAgY3NzUHJlZml4OiB7IHI6IHRydWUsIHQ6IHRlc3RDc3NQcmVmaXggfSxcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IHsgcjogdHJ1ZSwgdDogdGVzdENzc0NsYXNzZXMgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGNvbm5lY3Q6IGZhbHNlLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiBcImx0clwiLFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBcInRhcFwiLFxuICAgICAgICAgICAgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAga2V5Ym9hcmRTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgICAgY3NzUHJlZml4OiBcIm5vVWktXCIsXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcInRhcmdldFwiLFxuICAgICAgICAgICAgICAgIGJhc2U6IFwiYmFzZVwiLFxuICAgICAgICAgICAgICAgIG9yaWdpbjogXCJvcmlnaW5cIixcbiAgICAgICAgICAgICAgICBoYW5kbGU6IFwiaGFuZGxlXCIsXG4gICAgICAgICAgICAgICAgaGFuZGxlTG93ZXI6IFwiaGFuZGxlLWxvd2VyXCIsXG4gICAgICAgICAgICAgICAgaGFuZGxlVXBwZXI6IFwiaGFuZGxlLXVwcGVyXCIsXG4gICAgICAgICAgICAgICAgdG91Y2hBcmVhOiBcInRvdWNoLWFyZWFcIixcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiYmFja2dyb3VuZFwiLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Q6IFwiY29ubmVjdFwiLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RzOiBcImNvbm5lY3RzXCIsXG4gICAgICAgICAgICAgICAgbHRyOiBcImx0clwiLFxuICAgICAgICAgICAgICAgIHJ0bDogXCJydGxcIixcbiAgICAgICAgICAgICAgICB0ZXh0RGlyZWN0aW9uTHRyOiBcInR4dC1kaXItbHRyXCIsXG4gICAgICAgICAgICAgICAgdGV4dERpcmVjdGlvblJ0bDogXCJ0eHQtZGlyLXJ0bFwiLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogXCJkcmFnZ2FibGVcIixcbiAgICAgICAgICAgICAgICBkcmFnOiBcInN0YXRlLWRyYWdcIixcbiAgICAgICAgICAgICAgICB0YXA6IFwic3RhdGUtdGFwXCIsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiBcImFjdGl2ZVwiLFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IFwidG9vbHRpcFwiLFxuICAgICAgICAgICAgICAgIHBpcHM6IFwicGlwc1wiLFxuICAgICAgICAgICAgICAgIHBpcHNIb3Jpem9udGFsOiBcInBpcHMtaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAgICAgIHBpcHNWZXJ0aWNhbDogXCJwaXBzLXZlcnRpY2FsXCIsXG4gICAgICAgICAgICAgICAgbWFya2VyOiBcIm1hcmtlclwiLFxuICAgICAgICAgICAgICAgIG1hcmtlckhvcml6b250YWw6IFwibWFya2VyLWhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJWZXJ0aWNhbDogXCJtYXJrZXItdmVydGljYWxcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJOb3JtYWw6IFwibWFya2VyLW5vcm1hbFwiLFxuICAgICAgICAgICAgICAgIG1hcmtlckxhcmdlOiBcIm1hcmtlci1sYXJnZVwiLFxuICAgICAgICAgICAgICAgIG1hcmtlclN1YjogXCJtYXJrZXItc3ViXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZUhvcml6b250YWw6IFwidmFsdWUtaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlVmVydGljYWw6IFwidmFsdWUtdmVydGljYWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZU5vcm1hbDogXCJ2YWx1ZS1ub3JtYWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZUxhcmdlOiBcInZhbHVlLWxhcmdlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVTdWI6IFwidmFsdWUtc3ViXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBBcmlhRm9ybWF0IGRlZmF1bHRzIHRvIHJlZ3VsYXIgZm9ybWF0LCBpZiBhbnkuXG4gICAgICAgIGlmIChvcHRpb25zLmZvcm1hdCAmJiAhb3B0aW9ucy5hcmlhRm9ybWF0KSB7XG4gICAgICAgICAgICBvcHRpb25zLmFyaWFGb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biBhbGwgb3B0aW9ucyB0aHJvdWdoIGEgdGVzdGluZyBtZWNoYW5pc20gdG8gZW5zdXJlIGNvcnJlY3RcbiAgICAgICAgLy8gaW5wdXQuIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IG9wdGlvbnMgbWlnaHQgZ2V0IG1vZGlmaWVkIHRvXG4gICAgICAgIC8vIGJlIGhhbmRsZWQgcHJvcGVybHkuIEUuZy4gd3JhcHBpbmcgaW50ZWdlcnMgaW4gYXJyYXlzLlxuICAgICAgICBPYmplY3Qua2V5cyh0ZXN0cykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgb3B0aW9uIGlzbid0IHNldCwgYnV0IGl0IGlzIHJlcXVpcmVkLCB0aHJvdyBhbiBlcnJvci5cbiAgICAgICAgICAgIGlmICghaXNTZXQob3B0aW9uc1tuYW1lXSkgJiYgZGVmYXVsdHNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0c1tuYW1lXS5yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ1wiICsgbmFtZSArIFwiJyBpcyByZXF1aXJlZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlc3RzW25hbWVdLnQocGFyc2VkLCAhaXNTZXQob3B0aW9uc1tuYW1lXSkgPyBkZWZhdWx0c1tuYW1lXSA6IG9wdGlvbnNbbmFtZV0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGb3J3YXJkIHBpcHMgb3B0aW9uc1xuICAgICAgICBwYXJzZWQucGlwcyA9IG9wdGlvbnMucGlwcztcblxuICAgICAgICAvLyBBbGwgcmVjZW50IGJyb3dzZXJzIGFjY2VwdCB1bnByZWZpeGVkIHRyYW5zZm9ybS5cbiAgICAgICAgLy8gV2UgbmVlZCAtbXMtIGZvciBJRTkgYW5kIC13ZWJraXQtIGZvciBvbGRlciBBbmRyb2lkO1xuICAgICAgICAvLyBBc3N1bWUgdXNlIG9mIC13ZWJraXQtIGlmIHVucHJlZml4ZWQgYW5kIC1tcy0gYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9dHJhbnNmb3JtczJkXG4gICAgICAgIHZhciBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG1zUHJlZml4ID0gZC5zdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbm9QcmVmaXggPSBkLnN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHBhcnNlZC50cmFuc2Zvcm1SdWxlID0gbm9QcmVmaXggPyBcInRyYW5zZm9ybVwiIDogbXNQcmVmaXggPyBcIm1zVHJhbnNmb3JtXCIgOiBcIndlYmtpdFRyYW5zZm9ybVwiO1xuXG4gICAgICAgIC8vIFBpcHMgZG9uJ3QgbW92ZSwgc28gd2UgY2FuIHBsYWNlIHRoZW0gdXNpbmcgbGVmdC90b3AuXG4gICAgICAgIHZhciBzdHlsZXMgPSBbW1wibGVmdFwiLCBcInRvcFwiXSwgW1wicmlnaHRcIiwgXCJib3R0b21cIl1dO1xuXG4gICAgICAgIHBhcnNlZC5zdHlsZSA9IHN0eWxlc1twYXJzZWQuZGlyXVtwYXJzZWQub3J0XTtcblxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICBmdW5jdGlvbiBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IGdldEFjdGlvbnMoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lICYmIGdldFN1cHBvcnRzUGFzc2l2ZSgpO1xuXG4gICAgICAgIC8vIEFsbCB2YXJpYWJsZXMgbG9jYWwgdG8gJ3Njb3BlJyBhcmUgcHJlZml4ZWQgd2l0aCAnc2NvcGVfJ1xuXG4gICAgICAgIC8vIFNsaWRlciBET00gTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX1RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdmFyIHNjb3BlX0Jhc2U7XG4gICAgICAgIHZhciBzY29wZV9IYW5kbGVzO1xuICAgICAgICB2YXIgc2NvcGVfQ29ubmVjdHM7XG4gICAgICAgIHZhciBzY29wZV9QaXBzO1xuICAgICAgICB2YXIgc2NvcGVfVG9vbHRpcHM7XG5cbiAgICAgICAgLy8gU2xpZGVyIHN0YXRlIHZhbHVlc1xuICAgICAgICB2YXIgc2NvcGVfU3BlY3RydW0gPSBvcHRpb25zLnNwZWN0cnVtO1xuICAgICAgICB2YXIgc2NvcGVfVmFsdWVzID0gW107XG4gICAgICAgIHZhciBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZU51bWJlcnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9IDA7XG4gICAgICAgIHZhciBzY29wZV9FdmVudHMgPSB7fTtcblxuICAgICAgICAvLyBFeHBvc2VkIEFQSVxuICAgICAgICB2YXIgc2NvcGVfU2VsZjtcblxuICAgICAgICAvLyBEb2N1bWVudCBOb2Rlc1xuICAgICAgICB2YXIgc2NvcGVfRG9jdW1lbnQgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50RWxlbWVudCA9IG9wdGlvbnMuZG9jdW1lbnRFbGVtZW50IHx8IHNjb3BlX0RvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0JvZHkgPSBzY29wZV9Eb2N1bWVudC5ib2R5O1xuXG4gICAgICAgIC8vIFBpcHMgY29uc3RhbnRzXG4gICAgICAgIHZhciBQSVBTX05PTkUgPSAtMTtcbiAgICAgICAgdmFyIFBJUFNfTk9fVkFMVUUgPSAwO1xuICAgICAgICB2YXIgUElQU19MQVJHRV9WQUxVRSA9IDE7XG4gICAgICAgIHZhciBQSVBTX1NNQUxMX1ZBTFVFID0gMjtcblxuICAgICAgICAvLyBGb3IgaG9yaXpvbnRhbCBzbGlkZXJzIGluIHN0YW5kYXJkIGx0ciBkb2N1bWVudHMsXG4gICAgICAgIC8vIG1ha2UgLm5vVWktb3JpZ2luIG92ZXJmbG93IHRvIHRoZSBsZWZ0IHNvIHRoZSBkb2N1bWVudCBkb2Vzbid0IHNjcm9sbC5cbiAgICAgICAgdmFyIHNjb3BlX0Rpck9mZnNldCA9IHNjb3BlX0RvY3VtZW50LmRpciA9PT0gXCJydGxcIiB8fCBvcHRpb25zLm9ydCA9PT0gMSA/IDAgOiAxMDA7XG5cbiAgICAgICAgLy8gQ3JlYXRlcyBhIG5vZGUsIGFkZHMgaXQgdG8gdGFyZ2V0LCByZXR1cm5zIHRoZSBuZXcgbm9kZS5cbiAgICAgICAgZnVuY3Rpb24gYWRkTm9kZVRvKGFkZFRhcmdldCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB2YXIgZGl2ID0gc2NvcGVfRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGRpdiwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkVGFyZ2V0LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHBlbmQgYSBvcmlnaW4gdG8gdGhlIGJhc2VcbiAgICAgICAgZnVuY3Rpb24gYWRkT3JpZ2luKGJhc2UsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMub3JpZ2luKTtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBhZGROb2RlVG8ob3JpZ2luLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlKTtcblxuICAgICAgICAgICAgYWRkTm9kZVRvKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvdWNoQXJlYSk7XG5cbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhbmRsZVwiLCBoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5rZXlib2FyZFN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL3RhYmluZGV4XG4gICAgICAgICAgICAgICAgLy8gMCA9IGZvY3VzYWJsZSBhbmQgcmVhY2hhYmxlXG4gICAgICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJzbGlkZXJcIik7XG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiYXJpYS1vcmllbnRhdGlvblwiLCBvcHRpb25zLm9ydCA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiKTtcblxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZUxvd2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlTnVtYmVyID09PSBvcHRpb25zLmhhbmRsZXMgLSAxKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlVXBwZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5zZXJ0IG5vZGVzIGZvciBjb25uZWN0IGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIGFkZENvbm5lY3QoYmFzZSwgYWRkKSB7XG4gICAgICAgICAgICBpZiAoIWFkZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMuY29ubmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgaGFuZGxlcyB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgIGZ1bmN0aW9uIGFkZEVsZW1lbnRzKGNvbm5lY3RPcHRpb25zLCBiYXNlKSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdEJhc2UgPSBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3RzKTtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlcyA9IFtdO1xuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMgPSBbXTtcblxuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1swXSkpO1xuXG4gICAgICAgICAgICAvLyBbOjo6Ok89PT09Tz09PT1PPT09PV1cbiAgICAgICAgICAgIC8vIGNvbm5lY3RPcHRpb25zID0gWzAsIDEsIDEsIDFdXG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIGEgbGlzdCBvZiBhbGwgYWRkZWQgaGFuZGxlcy5cbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLnB1c2goYWRkT3JpZ2luKGJhc2UsIGkpKTtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzW2ldID0gaTtcbiAgICAgICAgICAgICAgICBzY29wZV9Db25uZWN0cy5wdXNoKGFkZENvbm5lY3QoY29ubmVjdEJhc2UsIGNvbm5lY3RPcHRpb25zW2kgKyAxXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhIHNpbmdsZSBzbGlkZXIuXG4gICAgICAgIGZ1bmN0aW9uIGFkZFNsaWRlcihhZGRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEFwcGx5IGNsYXNzZXMgYW5kIGRhdGEgdG8gdGhlIHRhcmdldC5cbiAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmx0cik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnJ0bCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm9ydCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmhvcml6b250YWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52ZXJ0aWNhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0ZXh0RGlyZWN0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShhZGRUYXJnZXQpLmRpcmVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKHRleHREaXJlY3Rpb24gPT09IFwicnRsXCIpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50ZXh0RGlyZWN0aW9uUnRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvbkx0cik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuYmFzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRUb29sdGlwKGhhbmRsZSwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhoYW5kbGUuZmlyc3RDaGlsZCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvb2x0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNTbGlkZXJEaXNhYmxlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29wZV9UYXJnZXQuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEaXNhYmxlIHRoZSBzbGlkZXIgZHJhZ2dpbmcgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICBmdW5jdGlvbiBpc0hhbmRsZURpc2FibGVkKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIGhhbmRsZU9yaWdpbiA9IHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVPcmlnaW4uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVUb29sdGlwcygpIHtcbiAgICAgICAgICAgIGlmIChzY29wZV9Ub29sdGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50KFwidXBkYXRlLnRvb2x0aXBzXCIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzLmZvckVhY2goZnVuY3Rpb24odG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0b29sdGlwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSB0b29sdGlwcyBvcHRpb24gaXMgYSBzaG9ydGhhbmQgZm9yIHVzaW5nIHRoZSAndXBkYXRlJyBldmVudC5cbiAgICAgICAgZnVuY3Rpb24gdG9vbHRpcHMoKSB7XG4gICAgICAgICAgICByZW1vdmVUb29sdGlwcygpO1xuXG4gICAgICAgICAgICAvLyBUb29sdGlwcyBhcmUgYWRkZWQgd2l0aCBvcHRpb25zLnRvb2x0aXBzIGluIG9yaWdpbmFsIG9yZGVyLlxuICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMgPSBzY29wZV9IYW5kbGVzLm1hcChhZGRUb29sdGlwKTtcblxuICAgICAgICAgICAgYmluZEV2ZW50KFwidXBkYXRlLnRvb2x0aXBzXCIsIGZ1bmN0aW9uKHZhbHVlcywgaGFuZGxlTnVtYmVyLCB1bmVuY29kZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlc1toYW5kbGVOdW1iZXJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IG9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXS50byh1bmVuY29kZWRbaGFuZGxlTnVtYmVyXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHNbaGFuZGxlTnVtYmVyXS5pbm5lckhUTUwgPSBmb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXJpYSgpIHtcbiAgICAgICAgICAgIGJpbmRFdmVudChcInVwZGF0ZVwiLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkLCB0YXAsIHBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBBcmlhIFZhbHVlcyBmb3IgYWxsIGhhbmRsZXMsIGFzIGEgY2hhbmdlIGluIG9uZSBjaGFuZ2VzIG1pbiBhbmQgbWF4IHZhbHVlcyBmb3IgdGhlIG5leHQuXG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGUgPSBzY29wZV9IYW5kbGVzW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWluID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGluZGV4LCAwLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBpbmRleCwgMTAwLCB0cnVlLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm93ID0gcG9zaXRpb25zW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBGb3JtYXR0ZWQgdmFsdWUgZm9yIGRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBvcHRpb25zLmFyaWFGb3JtYXQudG8odW5lbmNvZGVkW2luZGV4XSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTWFwIHRvIHNsaWRlciByYW5nZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgbWluID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG1pbikudG9GaXhlZCgxKTtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG1heCkudG9GaXhlZCgxKTtcbiAgICAgICAgICAgICAgICAgICAgbm93ID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKG5vdykudG9GaXhlZCgxKTtcblxuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1pblwiLCBtaW4pO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1heFwiLCBtYXgpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLCBub3cpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIiwgdGV4dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEdyb3VwKG1vZGUsIHZhbHVlcywgc3RlcHBlZCkge1xuICAgICAgICAgICAgLy8gVXNlIHRoZSByYW5nZS5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcInJhbmdlXCIgfHwgbW9kZSA9PT0gXCJzdGVwc1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLnhWYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcImNvdW50XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzIDwgMikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICd2YWx1ZXMnICg+PSAyKSByZXF1aXJlZCBmb3IgbW9kZSAnY291bnQnLlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEaXZpZGUgMCAtIDEwMCBpbiAnY291bnQnIHBhcnRzLlxuICAgICAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHZhbHVlcyAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIHNwcmVhZCA9IDEwMCAvIGludGVydmFsO1xuXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gW107XG5cbiAgICAgICAgICAgICAgICAvLyBMaXN0IHRoZXNlIHBhcnRzIGFuZCBoYXZlIHRoZW0gaGFuZGxlZCBhcyAncG9zaXRpb25zJy5cbiAgICAgICAgICAgICAgICB3aGlsZSAoaW50ZXJ2YWwtLSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW50ZXJ2YWxdID0gaW50ZXJ2YWwgKiBzcHJlYWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goMTAwKTtcblxuICAgICAgICAgICAgICAgIG1vZGUgPSBcInBvc2l0aW9uc1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJwb3NpdGlvbnNcIikge1xuICAgICAgICAgICAgICAgIC8vIE1hcCBhbGwgcGVyY2VudGFnZXMgdG8gb24tcmFuZ2UgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcoc3RlcHBlZCA/IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAodmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJ2YWx1ZXNcIikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB2YWx1ZSBtdXN0IGJlIHN0ZXBwZWQsIGl0IG5lZWRzIHRvIGJlIGNvbnZlcnRlZCB0byBhIHBlcmNlbnRhZ2UgZmlyc3QuXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gcGVyY2VudGFnZSwgYXBwbHkgc3RlcCwgcmV0dXJuIHRvIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcodmFsdWUpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgY2FuIHNpbXBseSB1c2UgdGhlIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVTcHJlYWQoZGVuc2l0eSwgbW9kZSwgZ3JvdXApIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNhZmVJbmNyZW1lbnQodmFsdWUsIGluY3JlbWVudCkge1xuICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZsb2F0aW5nIHBvaW50IHZhcmlhbmNlIGJ5IGRyb3BwaW5nIHRoZSBzbWFsbGVzdCBkZWNpbWFsIHBsYWNlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHZhbHVlICsgaW5jcmVtZW50KS50b0ZpeGVkKDcpIC8gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGluZGV4ZXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBmaXJzdEluUmFuZ2UgPSBzY29wZV9TcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICAgICAgdmFyIGxhc3RJblJhbmdlID0gc2NvcGVfU3BlY3RydW0ueFZhbFtzY29wZV9TcGVjdHJ1bS54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgdmFyIGlnbm9yZUZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaWdub3JlTGFzdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHByZXZQY3QgPSAwO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBncm91cCwgc29ydCBpdCBhbmQgZmlsdGVyIGF3YXkgYWxsIGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICBncm91cCA9IHVuaXF1ZShcbiAgICAgICAgICAgICAgICBncm91cC5zbGljZSgpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgcmFuZ2Ugc3RhcnRzIHdpdGggdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgICAgICBpZiAoZ3JvdXBbMF0gIT09IGZpcnN0SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnVuc2hpZnQoZmlyc3RJblJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZ25vcmVGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExpa2V3aXNlIGZvciB0aGUgbGFzdCBvbmUuXG4gICAgICAgICAgICBpZiAoZ3JvdXBbZ3JvdXAubGVuZ3RoIC0gMV0gIT09IGxhc3RJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAucHVzaChsYXN0SW5SYW5nZSk7XG4gICAgICAgICAgICAgICAgaWdub3JlTGFzdCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdyb3VwLmZvckVhY2goZnVuY3Rpb24oY3VycmVudCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc3RlcCBhbmQgdGhlIGxvd2VyICsgdXBwZXIgcG9zaXRpb25zLlxuICAgICAgICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBxO1xuICAgICAgICAgICAgICAgIHZhciBsb3cgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIHZhciBoaWdoID0gZ3JvdXBbaW5kZXggKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3UGN0O1xuICAgICAgICAgICAgICAgIHZhciBwY3REaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgIHZhciBwY3RQb3M7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGU7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBzO1xuICAgICAgICAgICAgICAgIHZhciByZWFsU3RlcHM7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgIHZhciBpc1N0ZXBzID0gbW9kZSA9PT0gXCJzdGVwc1wiO1xuXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB1c2luZyAnc3RlcHMnIG1vZGUsIHVzZSB0aGUgcHJvdmlkZWQgc3RlcHMuXG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSdsbCBzdGVwIG9uIHRvIHRoZSBuZXh0IHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgIGlmIChpc1N0ZXBzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBzY29wZV9TcGVjdHJ1bS54TnVtU3RlcHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gYSAnZnVsbCcgc3RlcC5cbiAgICAgICAgICAgICAgICBpZiAoIXN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IGhpZ2ggLSBsb3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTG93IGNhbiBiZSAwLCBzbyB0ZXN0IGZvciBmYWxzZS4gSWYgaGlnaCBpcyB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIGF0IHRoZSBsYXN0IHN1YnJhbmdlLiBJbmRleCAwIGlzIGFscmVhZHkgaGFuZGxlZC5cbiAgICAgICAgICAgICAgICBpZiAobG93ID09PSBmYWxzZSB8fCBoaWdoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBzdGVwIGlzbid0IDAsIHdoaWNoIHdvdWxkIGNhdXNlIGFuIGluZmluaXRlIGxvb3AgKCM2NTQpXG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KHN0ZXAsIDAuMDAwMDAwMSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGaW5kIGFsbCBzdGVwcyBpbiB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkgPSBzYWZlSW5jcmVtZW50KGksIHN0ZXApKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcGVyY2VudGFnZSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgc3RlcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzaXplIGZvciB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIG5ld1BjdCA9IHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcoaSk7XG4gICAgICAgICAgICAgICAgICAgIHBjdERpZmZlcmVuY2UgPSBuZXdQY3QgLSBwcmV2UGN0O1xuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gcGN0RGlmZmVyZW5jZSAvIGRlbnNpdHk7XG4gICAgICAgICAgICAgICAgICAgIHJlYWxTdGVwcyA9IE1hdGgucm91bmQoc3RlcHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcmF0aW8gcmVwcmVzZW50cyB0aGUgYW1vdW50IG9mIHBlcmNlbnRhZ2Utc3BhY2UgYSBwb2ludCBpbmRpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBhIGRlbnNpdHkgMSB0aGUgcG9pbnRzL3BlcmNlbnRhZ2UgPSAxLiBGb3IgZGVuc2l0eSAyLCB0aGF0IHBlcmNlbnRhZ2UgbmVlZHMgdG8gYmUgcmUtZGl2aWRlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gUm91bmQgdGhlIHBlcmNlbnRhZ2Ugb2Zmc2V0IHRvIGFuIGV2ZW4gbnVtYmVyLCB0aGVuIGRpdmlkZSBieSB0d29cbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gc3ByZWFkIHRoZSBvZmZzZXQgb24gYm90aCBzaWRlcyBvZiB0aGUgcmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBTaXplID0gcGN0RGlmZmVyZW5jZSAvIHJlYWxTdGVwcztcblxuICAgICAgICAgICAgICAgICAgICAvLyBEaXZpZGUgYWxsIHBvaW50cyBldmVubHksIGFkZGluZyB0aGUgY29ycmVjdCBudW1iZXIgdG8gdGhpcyBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gUnVuIHVwIHRvIDw9IHNvIHRoYXQgMTAwJSBnZXRzIGEgcG9pbnQsIGV2ZW50IGlmIGlnbm9yZUxhc3QgaXMgc2V0LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHEgPSAxOyBxIDw9IHJlYWxTdGVwczsgcSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmF0aW8gYmV0d2VlbiB0aGUgcm91bmRlZCB2YWx1ZSBhbmQgdGhlIGFjdHVhbCBzaXplIG1pZ2h0IGJlIH4xJSBvZmYuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb3JyZWN0IHRoZSBwZXJjZW50YWdlIG9mZnNldCBieSB0aGUgbnVtYmVyIG9mIHBvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGVyIHN1YnJhbmdlLiBkZW5zaXR5ID0gMSB3aWxsIHJlc3VsdCBpbiAxMDAgcG9pbnRzIG9uIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnVsbCByYW5nZSwgMiBmb3IgNTAsIDQgZm9yIDI1LCBldGMuXG4gICAgICAgICAgICAgICAgICAgICAgICBwY3RQb3MgPSBwcmV2UGN0ICsgcSAqIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1twY3RQb3MudG9GaXhlZCg1KV0gPSBbc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHBjdFBvcyksIDBdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBwb2ludCB0eXBlLlxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gZ3JvdXAuaW5kZXhPZihpKSA+IC0xID8gUElQU19MQVJHRV9WQUxVRSA6IGlzU3RlcHMgPyBQSVBTX1NNQUxMX1ZBTFVFIDogUElQU19OT19WQUxVRTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBFbmZvcmNlIHRoZSAnaWdub3JlRmlyc3QnIG9wdGlvbiBieSBvdmVyd3JpdGluZyB0aGUgdHlwZSBmb3IgMC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmRleCAmJiBpZ25vcmVGaXJzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIShpID09PSBoaWdoICYmIGlnbm9yZUxhc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSAndHlwZScgb2YgdGhpcyBwb2ludC4gMCA9IHBsYWluLCAxID0gcmVhbCB2YWx1ZSwgMiA9IHN0ZXAgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW25ld1BjdC50b0ZpeGVkKDUpXSA9IFtpLCB0eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcGVyY2VudGFnZSBjb3VudC5cbiAgICAgICAgICAgICAgICAgICAgcHJldlBjdCA9IG5ld1BjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRNYXJraW5nKHNwcmVhZCwgZmlsdGVyRnVuYywgZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHNjb3BlX0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZVNpemVDbGFzc2VzID0gW107XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfTk9fVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlTm9ybWFsO1xuICAgICAgICAgICAgdmFsdWVTaXplQ2xhc3Nlc1tQSVBTX0xBUkdFX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZUxhcmdlO1xuICAgICAgICAgICAgdmFsdWVTaXplQ2xhc3Nlc1tQSVBTX1NNQUxMX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZVN1YjtcblxuICAgICAgICAgICAgdmFyIG1hcmtlclNpemVDbGFzc2VzID0gW107XG4gICAgICAgICAgICBtYXJrZXJTaXplQ2xhc3Nlc1tQSVBTX05PX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJOb3JtYWw7XG4gICAgICAgICAgICBtYXJrZXJTaXplQ2xhc3Nlc1tQSVBTX0xBUkdFX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJMYXJnZTtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfU01BTExfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlclN1YjtcblxuICAgICAgICAgICAgdmFyIHZhbHVlT3JpZW50YXRpb25DbGFzc2VzID0gW29wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZUhvcml6b250YWwsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZVZlcnRpY2FsXTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXMgPSBbb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlckhvcml6b250YWwsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJWZXJ0aWNhbF07XG5cbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzKTtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIG9wdGlvbnMub3J0ID09PSAwID8gb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHNIb3Jpem9udGFsIDogb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHNWZXJ0aWNhbCk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENsYXNzZXModHlwZSwgc291cmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBzb3VyY2UgPT09IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZW50YXRpb25DbGFzc2VzID0gYSA/IHZhbHVlT3JpZW50YXRpb25DbGFzc2VzIDogbWFya2VyT3JpZW50YXRpb25DbGFzc2VzO1xuICAgICAgICAgICAgICAgIHZhciBzaXplQ2xhc3NlcyA9IGEgPyB2YWx1ZVNpemVDbGFzc2VzIDogbWFya2VyU2l6ZUNsYXNzZXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlICsgXCIgXCIgKyBvcmllbnRhdGlvbkNsYXNzZXNbb3B0aW9ucy5vcnRdICsgXCIgXCIgKyBzaXplQ2xhc3Nlc1t0eXBlXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkU3ByZWFkKG9mZnNldCwgdmFsdWUsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGUgZmlsdGVyIGZ1bmN0aW9uLCBpZiBpdCBpcyBzZXQuXG4gICAgICAgICAgICAgICAgdHlwZSA9IGZpbHRlckZ1bmMgPyBmaWx0ZXJGdW5jKHZhbHVlLCB0eXBlKSA6IHR5cGU7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gUElQU19OT05FKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBtYXJrZXIgZm9yIGV2ZXJ5IHBvaW50XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBhZGROb2RlVG8oZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gZ2V0Q2xhc3Nlcyh0eXBlLCBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyKTtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlW29wdGlvbnMuc3R5bGVdID0gb2Zmc2V0ICsgXCIlXCI7XG5cbiAgICAgICAgICAgICAgICAvLyBWYWx1ZXMgYXJlIG9ubHkgYXBwZW5kZWQgZm9yIHBvaW50cyBtYXJrZWQgJzEnIG9yICcyJy5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA+IFBJUFNfTk9fVkFMVUUpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGFkZE5vZGVUbyhlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gZ2V0Q2xhc3Nlcyh0eXBlLCBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlW29wdGlvbnMuc3R5bGVdID0gb2Zmc2V0ICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gZm9ybWF0dGVyLnRvKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFwcGVuZCBhbGwgcG9pbnRzLlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3ByZWFkKS5mb3JFYWNoKGZ1bmN0aW9uKG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGFkZFNwcmVhZChvZmZzZXQsIHNwcmVhZFtvZmZzZXRdWzBdLCBzcHJlYWRbb2Zmc2V0XVsxXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVQaXBzKCkge1xuICAgICAgICAgICAgaWYgKHNjb3BlX1BpcHMpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50KHNjb3BlX1BpcHMpO1xuICAgICAgICAgICAgICAgIHNjb3BlX1BpcHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGlwcyhncmlkKSB7XG4gICAgICAgICAgICAvLyBGaXggIzY2OVxuICAgICAgICAgICAgcmVtb3ZlUGlwcygpO1xuXG4gICAgICAgICAgICB2YXIgbW9kZSA9IGdyaWQubW9kZTtcbiAgICAgICAgICAgIHZhciBkZW5zaXR5ID0gZ3JpZC5kZW5zaXR5IHx8IDE7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gZ3JpZC5maWx0ZXIgfHwgZmFsc2U7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gZ3JpZC52YWx1ZXMgfHwgZmFsc2U7XG4gICAgICAgICAgICB2YXIgc3RlcHBlZCA9IGdyaWQuc3RlcHBlZCB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciBncm91cCA9IGdldEdyb3VwKG1vZGUsIHZhbHVlcywgc3RlcHBlZCk7XG4gICAgICAgICAgICB2YXIgc3ByZWFkID0gZ2VuZXJhdGVTcHJlYWQoZGVuc2l0eSwgbW9kZSwgZ3JvdXApO1xuICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGdyaWQuZm9ybWF0IHx8IHtcbiAgICAgICAgICAgICAgICB0bzogTWF0aC5yb3VuZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGVfUGlwcyA9IHNjb3BlX1RhcmdldC5hcHBlbmRDaGlsZChhZGRNYXJraW5nKHNwcmVhZCwgZmlsdGVyLCBmb3JtYXQpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1BpcHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG9ydGhhbmQgZm9yIGJhc2UgZGltZW5zaW9ucy5cbiAgICAgICAgZnVuY3Rpb24gYmFzZVNpemUoKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHNjb3BlX0Jhc2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB2YXIgYWx0ID0gXCJvZmZzZXRcIiArIFtcIldpZHRoXCIsIFwiSGVpZ2h0XCJdW29wdGlvbnMub3J0XTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm9ydCA9PT0gMCA/IHJlY3Qud2lkdGggfHwgc2NvcGVfQmFzZVthbHRdIDogcmVjdC5oZWlnaHQgfHwgc2NvcGVfQmFzZVthbHRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlciBmb3IgYXR0YWNoaW5nIGV2ZW50cyB0cm91Z2ggYSBwcm94eS5cbiAgICAgICAgZnVuY3Rpb24gYXR0YWNoRXZlbnQoZXZlbnRzLCBlbGVtZW50LCBjYWxsYmFjaywgZGF0YSkge1xuICAgICAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byAnZmlsdGVyJyBldmVudHMgdG8gdGhlIHNsaWRlci5cbiAgICAgICAgICAgIC8vIGVsZW1lbnQgaXMgYSBub2RlLCBub3QgYSBub2RlTGlzdFxuXG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUgPSBmaXhFdmVudChlLCBkYXRhLnBhZ2VPZmZzZXQsIGRhdGEudGFyZ2V0IHx8IGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gZml4RXZlbnQgcmV0dXJucyBmYWxzZSBpZiB0aGlzIGV2ZW50IGhhcyBhIGRpZmZlcmVudCB0YXJnZXRcbiAgICAgICAgICAgICAgICAvLyB3aGVuIGhhbmRsaW5nIChtdWx0aS0pIHRvdWNoIGV2ZW50cztcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGRvTm90UmVqZWN0IGlzIHBhc3NlZCBieSBhbGwgZW5kIGV2ZW50cyB0byBtYWtlIHN1cmUgcmVsZWFzZWQgdG91Y2hlc1xuICAgICAgICAgICAgICAgIC8vIGFyZSBub3QgcmVqZWN0ZWQsIGxlYXZpbmcgdGhlIHNsaWRlciBcInN0dWNrXCIgdG8gdGhlIGN1cnNvcjtcbiAgICAgICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpICYmICFkYXRhLmRvTm90UmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTdG9wIGlmIGFuIGFjdGl2ZSAndGFwJyB0cmFuc2l0aW9uIGlzIHRha2luZyBwbGFjZS5cbiAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwKSAmJiAhZGF0YS5kb05vdFJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHJpZ2h0IG9yIG1pZGRsZSBjbGlja3Mgb24gc3RhcnQgIzQ1NFxuICAgICAgICAgICAgICAgIGlmIChldmVudHMgPT09IGFjdGlvbnMuc3RhcnQgJiYgZS5idXR0b25zICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b25zID4gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHJpZ2h0IG9yIG1pZGRsZSBjbGlja3Mgb24gc3RhcnQgIzQ1NFxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhvdmVyICYmIGUuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gJ3N1cHBvcnRzUGFzc2l2ZScgaXMgb25seSB0cnVlIGlmIGEgYnJvd3NlciBhbHNvIHN1cHBvcnRzIHRvdWNoLWFjdGlvbjogbm9uZSBpbiBDU1MuXG4gICAgICAgICAgICAgICAgLy8gaU9TIHNhZmFyaSBkb2VzIG5vdCwgc28gaXQgZG9lc24ndCBnZXQgdG8gYmVuZWZpdCBmcm9tIHBhc3NpdmUgc2Nyb2xsaW5nLiBpT1MgZG9lcyBzdXBwb3J0XG4gICAgICAgICAgICAgICAgLy8gdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb24sIGJ1dCB0aGF0IGFsbG93cyBwYW5uaW5nLCB3aGljaCBicmVha3NcbiAgICAgICAgICAgICAgICAvLyBzbGlkZXJzIGFmdGVyIHpvb21pbmcvb24gbm9uLXJlc3BvbnNpdmUgcGFnZXMuXG4gICAgICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTMzMTEyXG4gICAgICAgICAgICAgICAgaWYgKCFzdXBwb3J0c1Bhc3NpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGUuY2FsY1BvaW50ID0gZS5wb2ludHNbb3B0aW9ucy5vcnRdO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgZXZlbnQgaGFuZGxlciB3aXRoIHRoZSBldmVudCBbIGFuZCBhZGRpdGlvbmFsIGRhdGEgXS5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBkYXRhKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBtZXRob2RzID0gW107XG5cbiAgICAgICAgICAgIC8vIEJpbmQgYSBjbG9zdXJlIG9uIHRoZSB0YXJnZXQgZm9yIGV2ZXJ5IGV2ZW50IHR5cGUuXG4gICAgICAgICAgICBldmVudHMuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbWV0aG9kLCBzdXBwb3J0c1Bhc3NpdmUgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnB1c2goW2V2ZW50TmFtZSwgbWV0aG9kXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcm92aWRlIGEgY2xlYW4gZXZlbnQgd2l0aCBzdGFuZGFyZGl6ZWQgb2Zmc2V0IHZhbHVlcy5cbiAgICAgICAgZnVuY3Rpb24gZml4RXZlbnQoZSwgcGFnZU9mZnNldCwgZXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEZpbHRlciB0aGUgZXZlbnQgdG8gcmVnaXN0ZXIgdGhlIHR5cGUsIHdoaWNoIGNhbiBiZVxuICAgICAgICAgICAgLy8gdG91Y2gsIG1vdXNlIG9yIHBvaW50ZXIuIE9mZnNldCBjaGFuZ2VzIG5lZWQgdG8gYmVcbiAgICAgICAgICAgIC8vIG1hZGUgb24gYW4gZXZlbnQgc3BlY2lmaWMgYmFzaXMuXG4gICAgICAgICAgICB2YXIgdG91Y2ggPSBlLnR5cGUuaW5kZXhPZihcInRvdWNoXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIG1vdXNlID0gZS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSA9PT0gMDtcbiAgICAgICAgICAgIHZhciBwb2ludGVyID0gZS50eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpID09PSAwO1xuXG4gICAgICAgICAgICB2YXIgeDtcbiAgICAgICAgICAgIHZhciB5O1xuXG4gICAgICAgICAgICAvLyBJRTEwIGltcGxlbWVudGVkIHBvaW50ZXIgZXZlbnRzIHdpdGggYSBwcmVmaXg7XG4gICAgICAgICAgICBpZiAoZS50eXBlLmluZGV4T2YoXCJNU1BvaW50ZXJcIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIG9ubHkgdGhpbmcgb25lIGhhbmRsZSBzaG91bGQgYmUgY29uY2VybmVkIGFib3V0IGlzIHRoZSB0b3VjaGVzIHRoYXQgb3JpZ2luYXRlZCBvbiB0b3Agb2YgaXQuXG4gICAgICAgICAgICBpZiAodG91Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm5zIHRydWUgaWYgYSB0b3VjaCBvcmlnaW5hdGVkIG9uIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICAgICAgdmFyIGlzVG91Y2hPblRhcmdldCA9IGZ1bmN0aW9uKGNoZWNrVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrVG91Y2gudGFyZ2V0ID09PSBldmVudFRhcmdldCB8fCBldmVudFRhcmdldC5jb250YWlucyhjaGVja1RvdWNoLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIHRvdWNoc3RhcnQgZXZlbnRzLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBzdGlsbCBubyBtb3JlIHRoYW4gb25lXG4gICAgICAgICAgICAgICAgLy8gdG91Y2ggb24gdGhlIHRhcmdldCBzbyB3ZSBsb29rIGFtb25nc3QgYWxsIHRvdWNoZXMuXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gXCJ0b3VjaHN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFRvdWNoZXMgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZS50b3VjaGVzLCBpc1RvdWNoT25UYXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdCBzdXBwb3J0IG1vcmUgdGhhbiBvbmUgdG91Y2ggcGVyIGhhbmRsZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB0YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHRoZSBvdGhlciBjYXNlcywgZmluZCBvbiBjaGFuZ2VkVG91Y2hlcyBpcyBlbm91Z2guXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaCA9IEFycmF5LnByb3RvdHlwZS5maW5kLmNhbGwoZS5jaGFuZ2VkVG91Y2hlcywgaXNUb3VjaE9uVGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYW5jZWwgaWYgdGhlIHRhcmdldCB0b3VjaCBoYXMgbm90IG1vdmVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldFRvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB4ID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB0YXJnZXRUb3VjaC5wYWdlWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhZ2VPZmZzZXQgPSBwYWdlT2Zmc2V0IHx8IGdldFBhZ2VPZmZzZXQoc2NvcGVfRG9jdW1lbnQpO1xuXG4gICAgICAgICAgICBpZiAobW91c2UgfHwgcG9pbnRlcikge1xuICAgICAgICAgICAgICAgIHggPSBlLmNsaWVudFggKyBwYWdlT2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgeSA9IGUuY2xpZW50WSArIHBhZ2VPZmZzZXQueTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZS5wYWdlT2Zmc2V0ID0gcGFnZU9mZnNldDtcbiAgICAgICAgICAgIGUucG9pbnRzID0gW3gsIHldO1xuICAgICAgICAgICAgZS5jdXJzb3IgPSBtb3VzZSB8fCBwb2ludGVyOyAvLyBGaXggIzQzNVxuXG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zbGF0ZSBhIGNvb3JkaW5hdGUgaW4gdGhlIGRvY3VtZW50IHRvIGEgcGVyY2VudGFnZSBvbiB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGNhbGNQb2ludFRvUGVyY2VudGFnZShjYWxjUG9pbnQpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNhbGNQb2ludCAtIG9mZnNldChzY29wZV9CYXNlLCBvcHRpb25zLm9ydCk7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSAobG9jYXRpb24gKiAxMDApIC8gYmFzZVNpemUoKTtcblxuICAgICAgICAgICAgLy8gQ2xhbXAgcHJvcG9zYWwgYmV0d2VlbiAwJSBhbmQgMTAwJVxuICAgICAgICAgICAgLy8gT3V0LW9mLWJvdW5kIGNvb3JkaW5hdGVzIG1heSBvY2N1ciB3aGVuIC5ub1VpLWJhc2UgcHNldWRvLWVsZW1lbnRzXG4gICAgICAgICAgICAvLyBhcmUgdXNlZCAoZS5nLiBjb250YWluZWQgaGFuZGxlcyBmZWF0dXJlKVxuICAgICAgICAgICAgcHJvcG9zYWwgPSBsaW1pdChwcm9wb3NhbCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRpciA/IDEwMCAtIHByb3Bvc2FsIDogcHJvcG9zYWw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIGhhbmRsZSBjbG9zZXN0IHRvIGEgY2VydGFpbiBwZXJjZW50YWdlIG9uIHRoZSBzbGlkZXJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdEhhbmRsZShjbGlja2VkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBzbWFsbGVzdERpZmZlcmVuY2UgPSAxMDA7XG4gICAgICAgICAgICB2YXIgaGFuZGxlTnVtYmVyID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gRGlzYWJsZWQgaGFuZGxlcyBhcmUgaWdub3JlZFxuICAgICAgICAgICAgICAgIGlmIChpc0hhbmRsZURpc2FibGVkKGluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZVBvc2l0aW9uID0gc2NvcGVfTG9jYXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlID0gTWF0aC5hYnMoaGFuZGxlUG9zaXRpb24gLSBjbGlja2VkUG9zaXRpb24pO1xuXG4gICAgICAgICAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZVxuICAgICAgICAgICAgICAgIHZhciBjbGlja0F0RWRnZSA9IGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSA9PT0gMTAwICYmIHNtYWxsZXN0RGlmZmVyZW5jZSA9PT0gMTAwO1xuXG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW5jZSB3aXRoIHRoaXMgaGFuZGxlIGlzIHNtYWxsZXIgdGhhbiB0aGUgcHJldmlvdXNseSBjaGVja2VkIGhhbmRsZVxuICAgICAgICAgICAgICAgIHZhciBpc0Nsb3NlciA9IGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSA8IHNtYWxsZXN0RGlmZmVyZW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNDbG9zZXJBZnRlciA9IGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSA8PSBzbWFsbGVzdERpZmZlcmVuY2UgJiYgY2xpY2tlZFBvc2l0aW9uID4gaGFuZGxlUG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNDbG9zZXIgfHwgaXNDbG9zZXJBZnRlciB8fCBjbGlja0F0RWRnZSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIgPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgc21hbGxlc3REaWZmZXJlbmNlID0gZGlmZmVyZW5jZVdpdGhUaGlzSGFuZGxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlTnVtYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyZSAnZW5kJyB3aGVuIGEgbW91c2Ugb3IgcGVuIGxlYXZlcyB0aGUgZG9jdW1lbnQuXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50TGVhdmUoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBcIm1vdXNlb3V0XCIgJiYgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09PSBcIkhUTUxcIiAmJiBldmVudC5yZWxhdGVkVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIG1vdmVtZW50IG9uIGRvY3VtZW50IGZvciBoYW5kbGUgYW5kIHJhbmdlIGRyYWcuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50TW92ZShldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gRml4ICM0OThcbiAgICAgICAgICAgIC8vIENoZWNrIHZhbHVlIG9mIC5idXR0b25zIGluICdzdGFydCcgdG8gd29yayBhcm91bmQgYSBidWcgaW4gSUUxMCBtb2JpbGUgKGRhdGEuYnV0dG9uc1Byb3BlcnR5KS5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvOTI3MDA1L21vYmlsZS1pZTEwLXdpbmRvd3MtcGhvbmUtYnV0dG9ucy1wcm9wZXJ0eS1vZi1wb2ludGVybW92ZS1ldmVudC1hbHdheXMtemVyb1xuICAgICAgICAgICAgLy8gSUU5IGhhcyAuYnV0dG9ucyBhbmQgLndoaWNoIHplcm8gb24gbW91c2Vtb3ZlLlxuICAgICAgICAgICAgLy8gRmlyZWZveCBicmVha3MgdGhlIHNwZWMgTUROIGRlZmluZXMuXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZihcIk1TSUUgOVwiKSA9PT0gLTEgJiYgZXZlbnQuYnV0dG9ucyA9PT0gMCAmJiBkYXRhLmJ1dHRvbnNQcm9wZXJ0eSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudEVuZChldmVudCwgZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGFyZSBtb3ZpbmcgdXAgb3IgZG93blxuICAgICAgICAgICAgdmFyIG1vdmVtZW50ID0gKG9wdGlvbnMuZGlyID8gLTEgOiAxKSAqIChldmVudC5jYWxjUG9pbnQgLSBkYXRhLnN0YXJ0Q2FsY1BvaW50KTtcblxuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbW92ZW1lbnQgaW50byBhIHBlcmNlbnRhZ2Ugb2YgdGhlIHNsaWRlciB3aWR0aC9oZWlnaHRcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IChtb3ZlbWVudCAqIDEwMCkgLyBkYXRhLmJhc2VTaXplO1xuXG4gICAgICAgICAgICBtb3ZlSGFuZGxlcyhtb3ZlbWVudCA+IDAsIHByb3Bvc2FsLCBkYXRhLmxvY2F0aW9ucywgZGF0YS5oYW5kbGVOdW1iZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuYmluZCBtb3ZlIGV2ZW50cyBvbiBkb2N1bWVudCwgY2FsbCBjYWxsYmFja3MuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50RW5kKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGUgaGFuZGxlIGlzIG5vIGxvbmdlciBhY3RpdmUsIHNvIHJlbW92ZSB0aGUgY2xhc3MuXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGUpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkYXRhLmhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50IC09IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVuYmluZCB0aGUgbW92ZSBhbmQgZW5kIGV2ZW50cywgd2hpY2ggYXJlIGFkZGVkIG9uICdzdGFydCcuXG4gICAgICAgICAgICBkYXRhLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9Eb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihjWzBdLCBjWzFdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGRyYWdnaW5nIGNsYXNzLlxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWcpO1xuICAgICAgICAgICAgICAgIHNldFppbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGN1cnNvciBzdHlsZXMgYW5kIHRleHQtc2VsZWN0aW9uIGV2ZW50cyBib3VuZCB0byB0aGUgYm9keS5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkuc3R5bGUuY3Vyc29yID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfQm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0c3RhcnRcIiwgcHJldmVudERlZmF1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiZW5kXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJpbmQgbW92ZSBldmVudHMgb24gZG9jdW1lbnQuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50U3RhcnQoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBldmVudCBpZiBhbnkgaGFuZGxlIGlzIGRpc2FibGVkXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVOdW1iZXJzLnNvbWUoaXNIYW5kbGVEaXNhYmxlZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBoYW5kbGU7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZU51bWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZU9yaWdpbiA9IHNjb3BlX0hhbmRsZXNbZGF0YS5oYW5kbGVOdW1iZXJzWzBdXTtcblxuICAgICAgICAgICAgICAgIGhhbmRsZSA9IGhhbmRsZU9yaWdpbi5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgICBzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgKz0gMTtcblxuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIGhhbmRsZSBhcyAnYWN0aXZlJyBzbyBpdCBjYW4gYmUgc3R5bGVkLlxuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmFjdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEEgZHJhZyBzaG91bGQgbmV2ZXIgcHJvcGFnYXRlIHVwIHRvIHRoZSAndGFwJyBldmVudC5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAvLyBSZWNvcmQgdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLlxuICAgICAgICAgICAgdmFyIG1vdmVFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMubW92ZSwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBldmVudE1vdmUsIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZXZlbnQgdGFyZ2V0IGhhcyBjaGFuZ2VkIHNvIHdlIG5lZWQgdG8gcHJvcGFnYXRlIHRoZSBvcmlnaW5hbCBvbmUgc28gdGhhdCB3ZSBrZWVwXG4gICAgICAgICAgICAgICAgLy8gcmVseWluZyBvbiBpdCB0byBleHRyYWN0IHRhcmdldCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIHN0YXJ0Q2FsY1BvaW50OiBldmVudC5jYWxjUG9pbnQsXG4gICAgICAgICAgICAgICAgYmFzZVNpemU6IGJhc2VTaXplKCksXG4gICAgICAgICAgICAgICAgcGFnZU9mZnNldDogZXZlbnQucGFnZU9mZnNldCxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnMsXG4gICAgICAgICAgICAgICAgYnV0dG9uc1Byb3BlcnR5OiBldmVudC5idXR0b25zLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogc2NvcGVfTG9jYXRpb25zLnNsaWNlKClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZW5kRXZlbnQgPSBhdHRhY2hFdmVudChhY3Rpb25zLmVuZCwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBldmVudEVuZCwge1xuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIGRvTm90UmVqZWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVyc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBvdXRFdmVudCA9IGF0dGFjaEV2ZW50KFwibW91c2VvdXRcIiwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudExlYXZlLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgcHVzaGVkIHRoZSBsaXN0ZW5lcnMgaW4gdGhlIGxpc3RlbmVyIGxpc3QgcmF0aGVyIHRoYW4gY3JlYXRpbmdcbiAgICAgICAgICAgIC8vIGEgbmV3IG9uZSBhcyBpdCBoYXMgYWxyZWFkeSBiZWVuIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaC5hcHBseShsaXN0ZW5lcnMsIG1vdmVFdmVudC5jb25jYXQoZW5kRXZlbnQsIG91dEV2ZW50KSk7XG5cbiAgICAgICAgICAgIC8vIFRleHQgc2VsZWN0aW9uIGlzbid0IGFuIGlzc3VlIG9uIHRvdWNoIGRldmljZXMsXG4gICAgICAgICAgICAvLyBzbyBhZGRpbmcgY3Vyc29yIHN0eWxlcyBjYW4gYmUgc2tpcHBlZC5cbiAgICAgICAgICAgIGlmIChldmVudC5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSAnSScgY3Vyc29yIGFuZCBleHRlbmQgdGhlIHJhbmdlLWRyYWcgY3Vyc29yLlxuICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkuc3R5bGUuY3Vyc29yID0gZ2V0Q29tcHV0ZWRTdHlsZShldmVudC50YXJnZXQpLmN1cnNvcjtcblxuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIHRhcmdldCB3aXRoIGEgZHJhZ2dpbmcgc3RhdGUuXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRleHQgc2VsZWN0aW9uIHdoZW4gZHJhZ2dpbmcgdGhlIGhhbmRsZXMuXG4gICAgICAgICAgICAgICAgLy8gSW4gbm9VaVNsaWRlciA8PSA5LjIuMCwgdGhpcyB3YXMgaGFuZGxlZCBieSBjYWxsaW5nIHByZXZlbnREZWZhdWx0IG9uIG1vdXNlL3RvdWNoIHN0YXJ0L21vdmUsXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgc2Nyb2xsIGJsb2NraW5nLiBUaGUgc2VsZWN0c3RhcnQgZXZlbnQgaXMgc3VwcG9ydGVkIGJ5IEZpcmVGb3ggc3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDUyLFxuICAgICAgICAgICAgICAgIC8vIG1lYW5pbmcgdGhlIG9ubHkgaG9sZG91dCBpcyBpT1MgU2FmYXJpLiBUaGlzIGRvZXNuJ3QgbWF0dGVyOiB0ZXh0IHNlbGVjdGlvbiBpc24ndCB0cmlnZ2VyZWQgdGhlcmUuXG4gICAgICAgICAgICAgICAgLy8gVGhlICdjdXJzb3InIGZsYWcgaXMgZmFsc2UuXG4gICAgICAgICAgICAgICAgLy8gU2VlOiBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zZWxlY3RzdGFydFxuICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIHByZXZlbnREZWZhdWx0LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInN0YXJ0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmUgY2xvc2VzdCBoYW5kbGUgdG8gdGFwcGVkIGxvY2F0aW9uLlxuICAgICAgICBmdW5jdGlvbiBldmVudFRhcChldmVudCkge1xuICAgICAgICAgICAgLy8gVGhlIHRhcCBldmVudCBzaG91bGRuJ3QgcHJvcGFnYXRlIHVwXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gY2FsY1BvaW50VG9QZXJjZW50YWdlKGV2ZW50LmNhbGNQb2ludCk7XG4gICAgICAgICAgICB2YXIgaGFuZGxlTnVtYmVyID0gZ2V0Q2xvc2VzdEhhbmRsZShwcm9wb3NhbCk7XG5cbiAgICAgICAgICAgIC8vIFRhY2tsZSB0aGUgY2FzZSB0aGF0IGFsbCBoYW5kbGVzIGFyZSAnZGlzYWJsZWQnLlxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZsYWcgdGhlIHNsaWRlciBhcyBpdCBpcyBub3cgaW4gYSB0cmFuc2l0aW9uYWwgc3RhdGUuXG4gICAgICAgICAgICAvLyBUcmFuc2l0aW9uIHRha2VzIGEgY29uZmlndXJhYmxlIGFtb3VudCBvZiBtcyAoZGVmYXVsdCAzMDApLiBSZS1lbmFibGUgdGhlIHNsaWRlciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmV2ZW50cy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcHJvcG9zYWwsIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBzZXRaaW5kZXgoKTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXZlbnRzLnNuYXApIHtcbiAgICAgICAgICAgICAgICBldmVudFN0YXJ0KGV2ZW50LCB7IGhhbmRsZU51bWJlcnM6IFtoYW5kbGVOdW1iZXJdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyZXMgYSAnaG92ZXInIGV2ZW50IGZvciBhIGhvdmVyZWQgbW91c2UvcGVuIHBvc2l0aW9uLlxuICAgICAgICBmdW5jdGlvbiBldmVudEhvdmVyKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoZXZlbnQuY2FsY1BvaW50KTtcblxuICAgICAgICAgICAgdmFyIHRvID0gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcChwcm9wb3NhbCk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJob3ZlclwiID09PSB0YXJnZXRFdmVudC5zcGxpdChcIi5cIilbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfRXZlbnRzW3RhcmdldEV2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHNjb3BlX1NlbGYsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGVzIGtleWRvd24gb24gZm9jdXNlZCBoYW5kbGVzXG4gICAgICAgIC8vIERvbid0IG1vdmUgdGhlIGRvY3VtZW50IHdoZW4gcHJlc3NpbmcgYXJyb3cga2V5cyBvbiBmb2N1c2VkIGhhbmRsZXNcbiAgICAgICAgZnVuY3Rpb24gZXZlbnRLZXlkb3duKGV2ZW50LCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChpc1NsaWRlckRpc2FibGVkKCkgfHwgaXNIYW5kbGVEaXNhYmxlZChoYW5kbGVOdW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaG9yaXpvbnRhbEtleXMgPSBbXCJMZWZ0XCIsIFwiUmlnaHRcIl07XG4gICAgICAgICAgICB2YXIgdmVydGljYWxLZXlzID0gW1wiRG93blwiLCBcIlVwXCJdO1xuICAgICAgICAgICAgdmFyIGxhcmdlU3RlcEtleXMgPSBbXCJQYWdlRG93blwiLCBcIlBhZ2VVcFwiXTtcbiAgICAgICAgICAgIHZhciBlZGdlS2V5cyA9IFtcIkhvbWVcIiwgXCJFbmRcIl07XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpciAmJiAhb3B0aW9ucy5vcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBPbiBhbiByaWdodC10by1sZWZ0IHNsaWRlciwgdGhlIGxlZnQgYW5kIHJpZ2h0IGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm9ydCAmJiAhb3B0aW9ucy5kaXIpIHtcbiAgICAgICAgICAgICAgICAvLyBPbiBhIHRvcC10by1ib3R0b20gc2xpZGVyLCB0aGUgdXAgYW5kIGRvd24ga2V5cyBhY3QgaW52ZXJ0ZWRcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIGxhcmdlU3RlcEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdHJpcCBcIkFycm93XCIgZm9yIElFIGNvbXBhdGliaWxpdHkuIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleVxuICAgICAgICAgICAgdmFyIGtleSA9IGV2ZW50LmtleS5yZXBsYWNlKFwiQXJyb3dcIiwgXCJcIik7XG5cbiAgICAgICAgICAgIHZhciBpc0xhcmdlRG93biA9IGtleSA9PT0gbGFyZ2VTdGVwS2V5c1swXTtcbiAgICAgICAgICAgIHZhciBpc0xhcmdlVXAgPSBrZXkgPT09IGxhcmdlU3RlcEtleXNbMV07XG4gICAgICAgICAgICB2YXIgaXNEb3duID0ga2V5ID09PSB2ZXJ0aWNhbEtleXNbMF0gfHwga2V5ID09PSBob3Jpem9udGFsS2V5c1swXSB8fCBpc0xhcmdlRG93bjtcbiAgICAgICAgICAgIHZhciBpc1VwID0ga2V5ID09PSB2ZXJ0aWNhbEtleXNbMV0gfHwga2V5ID09PSBob3Jpem9udGFsS2V5c1sxXSB8fCBpc0xhcmdlVXA7XG4gICAgICAgICAgICB2YXIgaXNNaW4gPSBrZXkgPT09IGVkZ2VLZXlzWzBdO1xuICAgICAgICAgICAgdmFyIGlzTWF4ID0ga2V5ID09PSBlZGdlS2V5c1sxXTtcblxuICAgICAgICAgICAgaWYgKCFpc0Rvd24gJiYgIWlzVXAgJiYgIWlzTWluICYmICFpc01heCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2YXIgdG87XG5cbiAgICAgICAgICAgIGlmIChpc1VwIHx8IGlzRG93bikge1xuICAgICAgICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gNTtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gaXNEb3duID8gMCA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBzID0gZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBzdGVwc1tkaXJlY3Rpb25dO1xuXG4gICAgICAgICAgICAgICAgLy8gQXQgdGhlIGVkZ2Ugb2YgYSBzbGlkZXIsIGRvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTm8gc3RlcCBzZXQsIHVzZSB0aGUgZGVmYXVsdCBvZiAxMCUgb2YgdGhlIHN1Yi1yYW5nZVxuICAgICAgICAgICAgICAgIGlmIChzdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gc2NvcGVfU3BlY3RydW0uZ2V0RGVmYXVsdFN0ZXAoc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0sIGlzRG93biwgMTApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0xhcmdlVXAgfHwgaXNMYXJnZURvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCAqPSBtdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFN0ZXAgb3ZlciB6ZXJvLWxlbmd0aCByYW5nZXMgKCM5NDgpO1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLm1heChzdGVwLCAwLjAwMDAwMDEpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGVjcmVtZW50IGZvciBkb3duIHN0ZXBzXG4gICAgICAgICAgICAgICAgc3RlcCA9IChpc0Rvd24gPyAtMSA6IDEpICogc3RlcDtcblxuICAgICAgICAgICAgICAgIHRvID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gKyBzdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01heCkge1xuICAgICAgICAgICAgICAgIC8vIEVuZCBrZXlcbiAgICAgICAgICAgICAgICB0byA9IG9wdGlvbnMuc3BlY3RydW0ueFZhbFtvcHRpb25zLnNwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhvbWUga2V5XG4gICAgICAgICAgICAgICAgdG8gPSBvcHRpb25zLnNwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcodG8pLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXR0YWNoIGV2ZW50cyB0byBzZXZlcmFsIHNsaWRlciBwYXJ0cy5cbiAgICAgICAgZnVuY3Rpb24gYmluZFNsaWRlckV2ZW50cyhiZWhhdmlvdXIpIHtcbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgc3RhbmRhcmQgZHJhZyBldmVudCB0byB0aGUgaGFuZGxlcy5cbiAgICAgICAgICAgIGlmICghYmVoYXZpb3VyLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZXZlbnRzIGFyZSBvbmx5IGJvdW5kIHRvIHRoZSB2aXN1YWwgaGFuZGxlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQsIG5vdCB0aGUgJ3JlYWwnIG9yaWdpbiBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBoYW5kbGUuY2hpbGRyZW5bMF0sIGV2ZW50U3RhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IFtpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgdGFwIGV2ZW50IHRvIHRoZSBzbGlkZXIgYmFzZS5cbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIudGFwKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgc2NvcGVfQmFzZSwgZXZlbnRUYXAsIHt9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmlyZSBob3ZlciBldmVudHNcbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuaG92ZXIpIHtcbiAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLm1vdmUsIHNjb3BlX0Jhc2UsIGV2ZW50SG92ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWFrZSB0aGUgcmFuZ2UgZHJhZ2dhYmxlLlxuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5kcmFnKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMuZm9yRWFjaChmdW5jdGlvbihjb25uZWN0LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdCA9PT0gZmFsc2UgfHwgaW5kZXggPT09IDAgfHwgaW5kZXggPT09IHNjb3BlX0Nvbm5lY3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVCZWZvcmUgPSBzY29wZV9IYW5kbGVzW2luZGV4IC0gMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVBZnRlciA9IHNjb3BlX0hhbmRsZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRIb2xkZXJzID0gW2Nvbm5lY3RdO1xuXG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGNvbm5lY3QsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnZ2FibGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIHJhbmdlIGlzIGZpeGVkLCB0aGUgZW50aXJlIHJhbmdlIGNhblxuICAgICAgICAgICAgICAgICAgICAvLyBiZSBkcmFnZ2VkIGJ5IHRoZSBoYW5kbGVzLiBUaGUgaGFuZGxlIGluIHRoZSBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAvLyBvcmlnaW4gd2lsbCBwcm9wYWdhdGUgdGhlIHN0YXJ0IGV2ZW50IHVwd2FyZCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGl0IG5lZWRzIHRvIGJlIGJvdW5kIG1hbnVhbGx5IG9uIHRoZSBvdGhlci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5maXhlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLnB1c2goaGFuZGxlQmVmb3JlLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5wdXNoKGhhbmRsZUFmdGVyLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50SG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBldmVudEhvbGRlciwgZXZlbnRTdGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFtoYW5kbGVCZWZvcmUsIGhhbmRsZUFmdGVyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBbaW5kZXggLSAxLCBpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF0dGFjaCBhbiBldmVudCB0byB0aGlzIHNsaWRlciwgcG9zc2libHkgaW5jbHVkaW5nIGEgbmFtZXNwYWNlXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRFdmVudChuYW1lc3BhY2VkRXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSA9IHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0ucHVzaChjYWxsYmFjayk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBldmVudCBib3VuZCBpcyAndXBkYXRlLCcgZmlyZSBpdCBpbW1lZGlhdGVseSBmb3IgYWxsIGhhbmRsZXMuXG4gICAgICAgICAgICBpZiAobmFtZXNwYWNlZEV2ZW50LnNwbGl0KFwiLlwiKVswXSA9PT0gXCJ1cGRhdGVcIikge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbihhLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVW5kbyBhdHRhY2htZW50IG9mIGV2ZW50XG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50KG5hbWVzcGFjZWRFdmVudCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmFtZXNwYWNlZEV2ZW50ICYmIG5hbWVzcGFjZWRFdmVudC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gZXZlbnQgJiYgbmFtZXNwYWNlZEV2ZW50LnN1YnN0cmluZyhldmVudC5sZW5ndGgpO1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24oYmluZCkge1xuICAgICAgICAgICAgICAgIHZhciB0RXZlbnQgPSBiaW5kLnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdE5hbWVzcGFjZSA9IGJpbmQuc3Vic3RyaW5nKHRFdmVudC5sZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCghZXZlbnQgfHwgZXZlbnQgPT09IHRFdmVudCkgJiYgKCFuYW1lc3BhY2UgfHwgbmFtZXNwYWNlID09PSB0TmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2NvcGVfRXZlbnRzW2JpbmRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXh0ZXJuYWwgZXZlbnQgaGFuZGxpbmdcbiAgICAgICAgZnVuY3Rpb24gZmlyZUV2ZW50KGV2ZW50TmFtZSwgaGFuZGxlTnVtYmVyLCB0YXApIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbih0YXJnZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSB0YXJnZXRFdmVudC5zcGxpdChcIi5cIilbMF07XG5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSBldmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfRXZlbnRzW3RhcmdldEV2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgc2xpZGVyIHB1YmxpYyBBUEkgYXMgdGhlIHNjb3BlICgndGhpcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfU2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdmFsdWVzIGFzIGFycmF5LCBzbyBhcmdfMVthcmdfMl0gaXMgYWx3YXlzIHZhbGlkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBpbmRleCwgMCBvciAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuLWZvcm1hdHRlZCBzbGlkZXIgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfVmFsdWVzLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXZlbnQgaXMgZmlyZWQgYnkgdGFwLCB0cnVlIG9yIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExlZnQgb2Zmc2V0IG9mIHRoZSBoYW5kbGUsIGluIHJlbGF0aW9uIHRvIHRoZSBzbGlkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnMuc2xpY2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTcGxpdCBvdXQgdGhlIGhhbmRsZSBwb3NpdGlvbmluZyBsb2dpYyBzbyB0aGUgTW92ZSBldmVudCBjYW4gdXNlIGl0LCB0b29cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tIYW5kbGVQb3NpdGlvbihyZWZlcmVuY2UsIGhhbmRsZU51bWJlciwgdG8sIGxvb2tCYWNrd2FyZCwgbG9va0ZvcndhcmQsIGdldFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBGb3Igc2xpZGVycyB3aXRoIG11bHRpcGxlIGhhbmRsZXMsIGxpbWl0IG1vdmVtZW50IHRvIHRoZSBvdGhlciBoYW5kbGUuXG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgbWFyZ2luIG9wdGlvbiBieSBhZGRpbmcgaXQgdG8gdGhlIGhhbmRsZSBwb3NpdGlvbnMuXG4gICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxICYmICFvcHRpb25zLmV2ZW50cy51bmNvbnN0cmFpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvb2tCYWNrd2FyZCAmJiBoYW5kbGVOdW1iZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgLSAxXSArIG9wdGlvbnMubWFyZ2luKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9va0ZvcndhcmQgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgKyAxXSAtIG9wdGlvbnMubWFyZ2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBsaW1pdCBvcHRpb24gaGFzIHRoZSBvcHBvc2l0ZSBlZmZlY3QsIGxpbWl0aW5nIGhhbmRsZXMgdG8gYVxuICAgICAgICAgICAgLy8gbWF4aW11bSBkaXN0YW5jZSBmcm9tIGFub3RoZXIuIExpbWl0IG11c3QgYmUgPiAwLCBhcyBvdGhlcndpc2VcbiAgICAgICAgICAgIC8vIGhhbmRsZXMgd291bGQgYmUgdW5tb3ZhYmxlLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiBvcHRpb25zLmxpbWl0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvb2tCYWNrd2FyZCAmJiBoYW5kbGVOdW1iZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgLSAxXSArIG9wdGlvbnMubGltaXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChsb29rRm9yd2FyZCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1heCh0bywgcmVmZXJlbmNlW2hhbmRsZU51bWJlciArIDFdIC0gb3B0aW9ucy5saW1pdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgcGFkZGluZyBvcHRpb24ga2VlcHMgdGhlIGhhbmRsZXMgYSBjZXJ0YWluIGRpc3RhbmNlIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBlZGdlcyBvZiB0aGUgc2xpZGVyLiBQYWRkaW5nIG11c3QgYmUgPiAwLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFkZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1heCh0bywgb3B0aW9ucy5wYWRkaW5nWzBdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1pbih0bywgMTAwIC0gb3B0aW9ucy5wYWRkaW5nWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcCh0byk7XG5cbiAgICAgICAgICAgIC8vIExpbWl0IHBlcmNlbnRhZ2UgdG8gdGhlIDAgLSAxMDAgcmFuZ2VcbiAgICAgICAgICAgIHRvID0gbGltaXQodG8pO1xuXG4gICAgICAgICAgICAvLyBSZXR1cm4gZmFsc2UgaWYgaGFuZGxlIGNhbid0IG1vdmVcbiAgICAgICAgICAgIGlmICh0byA9PT0gcmVmZXJlbmNlW2hhbmRsZU51bWJlcl0gJiYgIWdldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2VzIHNsaWRlciBvcmllbnRhdGlvbiB0byBjcmVhdGUgQ1NTIHJ1bGVzLiBhID0gYmFzZSB2YWx1ZTtcbiAgICAgICAgZnVuY3Rpb24gaW5SdWxlT3JkZXIodiwgYSkge1xuICAgICAgICAgICAgdmFyIG8gPSBvcHRpb25zLm9ydDtcbiAgICAgICAgICAgIHJldHVybiAobyA/IGEgOiB2KSArIFwiLCBcIiArIChvID8gdiA6IGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZXMgaGFuZGxlKHMpIGJ5IGEgcGVyY2VudGFnZVxuICAgICAgICAvLyAoYm9vbCwgJSB0byBtb3ZlLCBbJSB3aGVyZSBoYW5kbGUgc3RhcnRlZCwgLi4uXSwgW2luZGV4IGluIHNjb3BlX0hhbmRsZXMsIC4uLl0pXG4gICAgICAgIGZ1bmN0aW9uIG1vdmVIYW5kbGVzKHVwd2FyZCwgcHJvcG9zYWwsIGxvY2F0aW9ucywgaGFuZGxlTnVtYmVycykge1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FscyA9IGxvY2F0aW9ucy5zbGljZSgpO1xuXG4gICAgICAgICAgICB2YXIgYiA9IFshdXB3YXJkLCB1cHdhcmRdO1xuICAgICAgICAgICAgdmFyIGYgPSBbdXB3YXJkLCAhdXB3YXJkXTtcblxuICAgICAgICAgICAgLy8gQ29weSBoYW5kbGVOdW1iZXJzIHNvIHdlIGRvbid0IGNoYW5nZSB0aGUgZGF0YXNldFxuICAgICAgICAgICAgaGFuZGxlTnVtYmVycyA9IGhhbmRsZU51bWJlcnMuc2xpY2UoKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIHdoaWNoIGhhbmRsZSBpcyAnbGVhZGluZycuXG4gICAgICAgICAgICAvLyBJZiB0aGF0IG9uZSBjYW4ndCBtb3ZlIHRoZSBzZWNvbmQgY2FuJ3QgZWl0aGVyLlxuICAgICAgICAgICAgaWYgKHVwd2FyZCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdGVwIDE6IGdldCB0aGUgbWF4aW11bSBwZXJjZW50YWdlIHRoYXQgYW55IG9mIHRoZSBoYW5kbGVzIGNhbiBtb3ZlXG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlciwgbykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSBjaGVja0hhbmRsZVBvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzW2hhbmRsZU51bWJlcl0gKyBwcm9wb3NhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJbb10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmW29dLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIGlmIG9uZSBvZiB0aGUgaGFuZGxlcyBjYW4ndCBtb3ZlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbCA9IHRvIC0gcHJvcG9zYWxzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXSA9IHRvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHVzaW5nIG9uZSBoYW5kbGUsIGNoZWNrIGJhY2t3YXJkIEFORCBmb3J3YXJkXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBiID0gZiA9IFt0cnVlXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0YXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMjogVHJ5IHRvIHNldCB0aGUgaGFuZGxlcyB3aXRoIHRoZSBmb3VuZCBwZXJjZW50YWdlXG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBsb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSArIHByb3Bvc2FsLCBiW29dLCBmW29dKSB8fCBzdGF0ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBTdGVwIDM6IElmIGEgaGFuZGxlIG1vdmVkLCBmaXJlIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRha2VzIGEgYmFzZSB2YWx1ZSBhbmQgYW4gb2Zmc2V0LiBUaGlzIG9mZnNldCBpcyB1c2VkIGZvciB0aGUgY29ubmVjdCBiYXIgc2l6ZS5cbiAgICAgICAgLy8gSW4gdGhlIGluaXRpYWwgZGVzaWduIGZvciB0aGlzIGZlYXR1cmUsIHRoZSBvcmlnaW4gZWxlbWVudCB3YXMgMSUgd2lkZS5cbiAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgYSByb3VuZGluZyBidWcgaW4gQ2hyb21lIG1ha2VzIGl0IGltcG9zc2libGUgdG8gaW1wbGVtZW50IHRoaXMgZmVhdHVyZVxuICAgICAgICAvLyBpbiB0aGlzIG1hbm5lcjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Nzk4MjIzXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybURpcmVjdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBhIC0gYiA6IGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVzIHNjb3BlX0xvY2F0aW9ucyBhbmQgc2NvcGVfVmFsdWVzLCB1cGRhdGVzIHZpc3VhbCBzdGF0ZVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVIYW5kbGVQb3NpdGlvbihoYW5kbGVOdW1iZXIsIHRvKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbG9jYXRpb25zLlxuICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0gPSB0bztcblxuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgdmFsdWUgdG8gdGhlIHNsaWRlciBzdGVwcGluZy9yYW5nZS5cbiAgICAgICAgICAgIHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gMTAgKiAodHJhbnNmb3JtRGlyZWN0aW9uKHRvLCAwKSAtIHNjb3BlX0Rpck9mZnNldCk7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlUnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNsYXRpb24gKyBcIiVcIiwgXCIwXCIpICsgXCIpXCI7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZTtcblxuICAgICAgICAgICAgdXBkYXRlQ29ubmVjdChoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgdXBkYXRlQ29ubmVjdChoYW5kbGVOdW1iZXIgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZXMgYmVmb3JlIHRoZSBzbGlkZXIgbWlkZGxlIGFyZSBzdGFja2VkIGxhdGVyID0gaGlnaGVyLFxuICAgICAgICAvLyBIYW5kbGVzIGFmdGVyIHRoZSBtaWRkbGUgbGF0ZXIgaXMgbG93ZXJcbiAgICAgICAgLy8gW1s3XSBbOF0gLi4uLi4uLi4uLiB8IC4uLi4uLi4uLi4gWzVdIFs0XVxuICAgICAgICBmdW5jdGlvbiBzZXRaaW5kZXgoKSB7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpciA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID4gNTAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHpJbmRleCA9IDMgKyAoc2NvcGVfSGFuZGxlcy5sZW5ndGggKyBkaXIgKiBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZS56SW5kZXggPSB6SW5kZXg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3Qgc3VnZ2VzdGVkIHZhbHVlcyBhbmQgYXBwbHkgbWFyZ2luLCBzdGVwLlxuICAgICAgICBmdW5jdGlvbiBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCkge1xuICAgICAgICAgICAgdG8gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cGRhdGVIYW5kbGVQb3NpdGlvbihoYW5kbGVOdW1iZXIsIHRvKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVzIHN0eWxlIGF0dHJpYnV0ZSBmb3IgY29ubmVjdCBub2Rlc1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDb25uZWN0KGluZGV4KSB7XG4gICAgICAgICAgICAvLyBTa2lwIGNvbm5lY3RzIHNldCB0byBmYWxzZVxuICAgICAgICAgICAgaWYgKCFzY29wZV9Db25uZWN0c1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsID0gMDtcbiAgICAgICAgICAgIHZhciBoID0gMTAwO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICBsID0gc2NvcGVfTG9jYXRpb25zW2luZGV4IC0gMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gc2NvcGVfQ29ubmVjdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGggPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSB1c2UgdHdvIHJ1bGVzOlxuICAgICAgICAgICAgLy8gJ3RyYW5zbGF0ZScgdG8gY2hhbmdlIHRoZSBsZWZ0L3RvcCBvZmZzZXQ7XG4gICAgICAgICAgICAvLyAnc2NhbGUnIHRvIGNoYW5nZSB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBBcyB0aGUgZWxlbWVudCBoYXMgYSB3aWR0aCBvZiAxMDAlLCBhIHRyYW5zbGF0aW9uIG9mIDEwMCUgaXMgZXF1YWwgdG8gMTAwJSBvZiB0aGUgcGFyZW50ICgubm9VaS1iYXNlKVxuICAgICAgICAgICAgdmFyIGNvbm5lY3RXaWR0aCA9IGggLSBsO1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVJ1bGUgPSBcInRyYW5zbGF0ZShcIiArIGluUnVsZU9yZGVyKHRyYW5zZm9ybURpcmVjdGlvbihsLCBjb25uZWN0V2lkdGgpICsgXCIlXCIsIFwiMFwiKSArIFwiKVwiO1xuICAgICAgICAgICAgdmFyIHNjYWxlUnVsZSA9IFwic2NhbGUoXCIgKyBpblJ1bGVPcmRlcihjb25uZWN0V2lkdGggLyAxMDAsIFwiMVwiKSArIFwiKVwiO1xuXG4gICAgICAgICAgICBzY29wZV9Db25uZWN0c1tpbmRleF0uc3R5bGVbb3B0aW9ucy50cmFuc2Zvcm1SdWxlXSA9IHRyYW5zbGF0ZVJ1bGUgKyBcIiBcIiArIHNjYWxlUnVsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBhcnNlcyB2YWx1ZSBwYXNzZWQgdG8gLnNldCBtZXRob2QuIFJldHVybnMgY3VycmVudCB2YWx1ZSBpZiBub3QgcGFyc2UtYWJsZS5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVRvVmFsdWUodG8sIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgLy8gU2V0dGluZyB3aXRoIG51bGwgaW5kaWNhdGVzIGFuICdpZ25vcmUnLlxuICAgICAgICAgICAgLy8gSW5wdXR0aW5nICdmYWxzZScgaXMgaW52YWxpZC5cbiAgICAgICAgICAgIGlmICh0byA9PT0gbnVsbCB8fCB0byA9PT0gZmFsc2UgfHwgdG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYSBmb3JtYXR0ZWQgbnVtYmVyIHdhcyBwYXNzZWQsIGF0dGVtcHQgdG8gZGVjb2RlIGl0LlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRvID0gU3RyaW5nKHRvKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG8gPSBvcHRpb25zLmZvcm1hdC5mcm9tKHRvKTtcbiAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh0byk7XG5cbiAgICAgICAgICAgIC8vIElmIHBhcnNpbmcgdGhlIG51bWJlciBmYWlsZWQsIHVzZSB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNOYU4odG8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXQoaW5wdXQsIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGFzQXJyYXkoaW5wdXQpO1xuICAgICAgICAgICAgdmFyIGlzSW5pdCA9IHNjb3BlX0xvY2F0aW9uc1swXSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAvLyBFdmVudCBmaXJlcyBieSBkZWZhdWx0XG4gICAgICAgICAgICBmaXJlU2V0RXZlbnQgPSBmaXJlU2V0RXZlbnQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIWZpcmVTZXRFdmVudDtcblxuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGlzIG9wdGlvbmFsLlxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbml0aWFsIHZhbHVlcyB3ZXJlIHNldCBiZWZvcmUgdXNpbmcgYW5pbWF0ZWQgcGxhY2VtZW50LlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0ZSAmJiAhaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmlyc3QgcGFzcywgd2l0aG91dCBsb29rQWhlYWQgYnV0IHdpdGggbG9va0JhY2t3YXJkLiBWYWx1ZXMgYXJlIHNldCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWVzW2hhbmRsZU51bWJlcl0sIGhhbmRsZU51bWJlciksIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgaSA9IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoID09PSAxID8gMCA6IDE7XG5cbiAgICAgICAgICAgIC8vIFNlY29uZGFyeSBwYXNzZXMuIE5vdyB0aGF0IGFsbCBiYXNlIHZhbHVlcyBhcmUgc2V0LCBhcHBseSBjb25zdHJhaW50cy5cbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgYWxsIGhhbmRsZXMgdG8gZW5zdXJlIGNvbnN0cmFpbnRzIGFyZSBhcHBsaWVkIGZvciB0aGUgZW50aXJlIHNsaWRlciAoSXNzdWUgIzEwMDkpXG4gICAgICAgICAgICBmb3IgKDsgaSA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50IG9ubHkgZm9yIGhhbmRsZXMgdGhhdCByZWNlaXZlZCBhIG5ldyB2YWx1ZSwgYXMgcGVyICM1NzlcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2hhbmRsZU51bWJlcl0gIT09IG51bGwgJiYgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgc2xpZGVyIHRvIGluaXRpYWwgdmFsdWVzXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlUmVzZXQoZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zLnN0YXJ0LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHZhbHVlIGZvciBhIHNpbmdsZSBoYW5kbGVcbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB2YWx1ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgbnVtZXJpYyBpbnB1dFxuICAgICAgICAgICAgaGFuZGxlTnVtYmVyID0gTnVtYmVyKGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIGlmICghKGhhbmRsZU51bWJlciA+PSAwICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogaW52YWxpZCBoYW5kbGUgbnVtYmVyLCBnb3Q6IFwiICsgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9vayBib3RoIGJhY2t3YXJkIGFuZCBmb3J3YXJkLCBzaW5jZSB3ZSBkb24ndCB3YW50IHRoaXMgaGFuZGxlIHRvIFwicHVzaFwiIG90aGVyIGhhbmRsZXMgKCM5NjApO1xuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWUsIGhhbmRsZU51bWJlciksIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlR2V0KCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pO1xuXG4gICAgICAgICAgICAvLyBJZiBvbmx5IG9uZSBoYW5kbGUgaXMgdXNlZCwgcmV0dXJuIGEgc2luZ2xlIHZhbHVlLlxuICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlcyBjbGFzc2VzIGZyb20gdGhlIHJvb3QgYW5kIGVtcHRpZXMgaXQuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jc3NDbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNzc0NsYXNzZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXNba2V5XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlIChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX1RhcmdldC5yZW1vdmVDaGlsZChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9UYXJnZXQubm9VaVNsaWRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgdmFyIG5lYXJieVN0ZXBzID0gc2NvcGVfU3BlY3RydW0uZ2V0TmVhcmJ5U3RlcHMobG9jYXRpb24pO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgaW5jcmVtZW50ID0gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RlcDtcbiAgICAgICAgICAgIHZhciBkZWNyZW1lbnQgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBJZiBzbmFwcGVkLCBkaXJlY3RseSB1c2UgZGVmaW5lZCBzdGVwIHZhbHVlXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLnN0YXJ0VmFsdWUgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbmVhcmJ5U3RlcHMuc3RlcEFmdGVyLnN0YXJ0VmFsdWUgLSB2YWx1ZSB8fCBudWxsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIG5leHQgdmFsdWUgaW4gdGhpcyBzdGVwIG1vdmVzIGludG8gdGhlIG5leHQgc3RlcCxcbiAgICAgICAgICAgIC8vIHRoZSBpbmNyZW1lbnQgaXMgdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IHN0ZXAgLSB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgKyBpbmNyZW1lbnQgPiBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSAtIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGJleW9uZCB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0YXJ0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLnN0ZXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGEgaGFuZGxlIGlzIGF0IHRoZSBzdGFydCBvZiBhIHN0ZXAsIGl0IGFsd2F5cyBzdGVwcyBiYWNrIGludG8gdGhlIHByZXZpb3VzIHN0ZXAgZmlyc3RcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IHZhbHVlIC0gbmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5oaWdoZXN0U3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm93LCBpZiBhdCB0aGUgc2xpZGVyIGVkZ2VzLCB0aGVyZSBpcyBubyBpbi9kZWNyZW1lbnRcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBcyBwZXIgIzM5MSwgdGhlIGNvbXBhcmlzb24gZm9yIHRoZSBkZWNyZW1lbnQgc3RlcCBjYW4gaGF2ZSBzb21lIHJvdW5kaW5nIGlzc3Vlcy5cbiAgICAgICAgICAgIHZhciBzdGVwRGVjaW1hbHMgPSBzY29wZV9TcGVjdHJ1bS5jb3VudFN0ZXBEZWNpbWFscygpO1xuXG4gICAgICAgICAgICAvLyBSb3VuZCBwZXIgIzM5MVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gbnVsbCAmJiBpbmNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gTnVtYmVyKGluY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVjcmVtZW50ICE9PSBudWxsICYmIGRlY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBOdW1iZXIoZGVjcmVtZW50LnRvRml4ZWQoc3RlcERlY2ltYWxzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbZGVjcmVtZW50LCBpbmNyZW1lbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgc2l6ZSBmb3IgdGhlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZU51bWJlcnMubWFwKGdldE5leHRTdGVwc0ZvckhhbmRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVhYmxlOiBtYXJnaW4sIGxpbWl0LCBwYWRkaW5nLCBzdGVwLCByYW5nZSwgYW5pbWF0ZSwgc25hcFxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdGlvbnNUb1VwZGF0ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTcGVjdHJ1bSBpcyBjcmVhdGVkIHVzaW5nIHRoZSByYW5nZSwgc25hcCwgZGlyZWN0aW9uIGFuZCBzdGVwIG9wdGlvbnMuXG4gICAgICAgICAgICAvLyAnc25hcCcgYW5kICdzdGVwJyBjYW4gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIC8vIElmICdzbmFwJyBhbmQgJ3N0ZXAnIGFyZSBub3QgcGFzc2VkLCB0aGV5IHNob3VsZCByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZUdldCgpO1xuXG4gICAgICAgICAgICB2YXIgdXBkYXRlQWJsZSA9IFtcbiAgICAgICAgICAgICAgICBcIm1hcmdpblwiLFxuICAgICAgICAgICAgICAgIFwibGltaXRcIixcbiAgICAgICAgICAgICAgICBcInBhZGRpbmdcIixcbiAgICAgICAgICAgICAgICBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgXCJhbmltYXRlXCIsXG4gICAgICAgICAgICAgICAgXCJzbmFwXCIsXG4gICAgICAgICAgICAgICAgXCJzdGVwXCIsXG4gICAgICAgICAgICAgICAgXCJmb3JtYXRcIixcbiAgICAgICAgICAgICAgICBcInBpcHNcIixcbiAgICAgICAgICAgICAgICBcInRvb2x0aXBzXCJcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIC8vIE9ubHkgY2hhbmdlIG9wdGlvbnMgdGhhdCB3ZSdyZSBhY3R1YWxseSBwYXNzZWQgdG8gdXBkYXRlLlxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgdW5kZWZpbmVkLiBudWxsIHJlbW92ZXMgdGhlIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVG9VcGRhdGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbE9wdGlvbnNbbmFtZV0gPSBvcHRpb25zVG9VcGRhdGVbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBuZXdPcHRpb25zID0gdGVzdE9wdGlvbnMob3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gTG9hZCBuZXcgb3B0aW9ucyBpbnRvIHRoZSBzbGlkZXIgc3RhdGVcbiAgICAgICAgICAgIHVwZGF0ZUFibGUuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSBuZXdPcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY29wZV9TcGVjdHJ1bSA9IG5ld09wdGlvbnMuc3BlY3RydW07XG5cbiAgICAgICAgICAgIC8vIExpbWl0LCBtYXJnaW4gYW5kIHBhZGRpbmcgZGVwZW5kIG9uIHRoZSBzcGVjdHJ1bSBidXQgYXJlIHN0b3JlZCBvdXRzaWRlIG9mIGl0LiAoIzY3NylcbiAgICAgICAgICAgIG9wdGlvbnMubWFyZ2luID0gbmV3T3B0aW9ucy5tYXJnaW47XG4gICAgICAgICAgICBvcHRpb25zLmxpbWl0ID0gbmV3T3B0aW9ucy5saW1pdDtcbiAgICAgICAgICAgIG9wdGlvbnMucGFkZGluZyA9IG5ld09wdGlvbnMucGFkZGluZztcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHBpcHMsIHJlbW92ZXMgZXhpc3RpbmcuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVQaXBzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwcywgcmVtb3ZlcyBleGlzdGluZy5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSB0aGUgY3VycmVudCBwb3NpdGlvbmluZyBzbyB2YWx1ZVNldCBmb3JjZXMgYW4gdXBkYXRlLlxuICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zID0gW107XG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zVG9VcGRhdGUuc3RhcnQgfHwgdiwgZmlyZVNldEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemF0aW9uIHN0ZXBzXG4gICAgICAgIGZ1bmN0aW9uIHNldHVwU2xpZGVyKCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBiYXNlIGVsZW1lbnQsIGluaXRpYWxpemUgSFRNTCBhbmQgc2V0IGNsYXNzZXMuXG4gICAgICAgICAgICAvLyBBZGQgaGFuZGxlcyBhbmQgY29ubmVjdCBlbGVtZW50cy5cbiAgICAgICAgICAgIHNjb3BlX0Jhc2UgPSBhZGRTbGlkZXIoc2NvcGVfVGFyZ2V0KTtcblxuICAgICAgICAgICAgYWRkRWxlbWVudHMob3B0aW9ucy5jb25uZWN0LCBzY29wZV9CYXNlKTtcblxuICAgICAgICAgICAgLy8gQXR0YWNoIHVzZXIgZXZlbnRzLlxuICAgICAgICAgICAgYmluZFNsaWRlckV2ZW50cyhvcHRpb25zLmV2ZW50cyk7XG5cbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcHVibGljIHZhbHVlIG1ldGhvZCB0byBzZXQgdGhlIHN0YXJ0IHZhbHVlcy5cbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnMuc3RhcnQpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50b29sdGlwcykge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFyaWEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldHVwU2xpZGVyKCk7XG5cbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEpTVW51c2VkR2xvYmFsU3ltYm9sc1xuICAgICAgICBzY29wZV9TZWxmID0ge1xuICAgICAgICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgICAgICAgIHN0ZXBzOiBnZXROZXh0U3RlcHMsXG4gICAgICAgICAgICBvbjogYmluZEV2ZW50LFxuICAgICAgICAgICAgb2ZmOiByZW1vdmVFdmVudCxcbiAgICAgICAgICAgIGdldDogdmFsdWVHZXQsXG4gICAgICAgICAgICBzZXQ6IHZhbHVlU2V0LFxuICAgICAgICAgICAgc2V0SGFuZGxlOiB2YWx1ZVNldEhhbmRsZSxcbiAgICAgICAgICAgIHJlc2V0OiB2YWx1ZVJlc2V0LFxuICAgICAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICAgICAgX19tb3ZlSGFuZGxlczogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIG1vdmVIYW5kbGVzKGEsIGIsIHNjb3BlX0xvY2F0aW9ucywgYyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uczogb3JpZ2luYWxPcHRpb25zLCAvLyBJc3N1ZSAjNjAwLCAjNjc4XG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zOiB1cGRhdGVPcHRpb25zLFxuICAgICAgICAgICAgdGFyZ2V0OiBzY29wZV9UYXJnZXQsIC8vIElzc3VlICM1OTdcbiAgICAgICAgICAgIHJlbW92ZVBpcHM6IHJlbW92ZVBpcHMsXG4gICAgICAgICAgICByZW1vdmVUb29sdGlwczogcmVtb3ZlVG9vbHRpcHMsXG4gICAgICAgICAgICBwaXBzOiBwaXBzIC8vIElzc3VlICM1OTRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2NvcGVfU2VsZjtcbiAgICB9XG5cbiAgICAvLyBSdW4gdGhlIHN0YW5kYXJkIGluaXRpYWxpemVyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSh0YXJnZXQsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0Lm5vZGVOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IGNyZWF0ZSByZXF1aXJlcyBhIHNpbmdsZSBlbGVtZW50LCBnb3Q6IFwiICsgdGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIHRoZSBzbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAgICAgIGlmICh0YXJnZXQubm9VaVNsaWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBTbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCB0aGUgb3B0aW9ucyBhbmQgY3JlYXRlIHRoZSBzbGlkZXIgZW52aXJvbm1lbnQ7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGVzdE9wdGlvbnMob3JpZ2luYWxPcHRpb25zLCB0YXJnZXQpO1xuICAgICAgICB2YXIgYXBpID0gc2NvcGUodGFyZ2V0LCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMpO1xuXG4gICAgICAgIHRhcmdldC5ub1VpU2xpZGVyID0gYXBpO1xuXG4gICAgICAgIHJldHVybiBhcGk7XG4gICAgfVxuXG4gICAgLy8gVXNlIGFuIG9iamVjdCBpbnN0ZWFkIG9mIGEgZnVuY3Rpb24gZm9yIGZ1dHVyZSBleHBhbmRhYmlsaXR5O1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZywgZG9uJ3QgdXNlIHRoaXMgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICAgICAgX19zcGVjdHJ1bTogU3BlY3RydW0sXG4gICAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgICAgIGNyZWF0ZTogaW5pdGlhbGl6ZVxuICAgIH07XG59KTtcbiIsIihmdW5jdGlvbihmYWN0b3J5KSB7XHJcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXHJcbiAgICBkZWZpbmUoW10sIGZhY3RvcnkpO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgIC8vIE5vZGUvQ29tbW9uSlNcclxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcclxuICAgIHdpbmRvdy53TnVtYiA9IGZhY3RvcnkoKTtcclxuICB9XHJcbn0pKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB2YXIgRm9ybWF0T3B0aW9ucyA9IFtcclxuICAgIFwiZGVjaW1hbHNcIixcclxuICAgIFwidGhvdXNhbmRcIixcclxuICAgIFwibWFya1wiLFxyXG4gICAgXCJwcmVmaXhcIixcclxuICAgIFwic3VmZml4XCIsXHJcbiAgICBcImVuY29kZXJcIixcclxuICAgIFwiZGVjb2RlclwiLFxyXG4gICAgXCJuZWdhdGl2ZUJlZm9yZVwiLFxyXG4gICAgXCJuZWdhdGl2ZVwiLFxyXG4gICAgXCJlZGl0XCIsXHJcbiAgICBcInVuZG9cIlxyXG4gIF07XHJcblxyXG4gIC8vIEdlbmVyYWxcclxuXHJcbiAgLy8gUmV2ZXJzZSBhIHN0cmluZ1xyXG4gIGZ1bmN0aW9uIHN0clJldmVyc2UoYSkge1xyXG4gICAgcmV0dXJuIGFcclxuICAgICAgLnNwbGl0KFwiXCIpXHJcbiAgICAgIC5yZXZlcnNlKClcclxuICAgICAgLmpvaW4oXCJcIik7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCBhIHNwZWNpZmllZCBwcmVmaXguXHJcbiAgZnVuY3Rpb24gc3RyU3RhcnRzV2l0aChpbnB1dCwgbWF0Y2gpIHtcclxuICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcoMCwgbWF0Y2gubGVuZ3RoKSA9PT0gbWF0Y2g7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpcyBhIHN0cmluZyBlbmRzIGluIGEgc3BlY2lmaWVkIHN1ZmZpeC5cclxuICBmdW5jdGlvbiBzdHJFbmRzV2l0aChpbnB1dCwgbWF0Y2gpIHtcclxuICAgIHJldHVybiBpbnB1dC5zbGljZSgtMSAqIG1hdGNoLmxlbmd0aCkgPT09IG1hdGNoO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgZm9ybWF0dGluZyBvcHRpb25zIGFyZSBpbmNvbXBhdGlibGUuXHJcbiAgZnVuY3Rpb24gdGhyb3dFcXVhbEVycm9yKEYsIGEsIGIpIHtcclxuICAgIGlmICgoRlthXSB8fCBGW2JdKSAmJiBGW2FdID09PSBGW2JdKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIGEgbnVtYmVyIGlzIGZpbml0ZSBhbmQgbm90IE5hTlxyXG4gIGZ1bmN0aW9uIGlzVmFsaWROdW1iZXIoaW5wdXQpIHtcclxuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUoaW5wdXQpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHJvdmlkZSByb3VuZGluZy1hY2N1cmF0ZSB0b0ZpeGVkIG1ldGhvZC5cclxuICAvLyBCb3Jyb3dlZDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjEzMjMzMzAvNzc1MjY1XHJcbiAgZnVuY3Rpb24gdG9GaXhlZCh2YWx1ZSwgZXhwKSB7XHJcbiAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJlXCIpO1xyXG4gICAgdmFsdWUgPSBNYXRoLnJvdW5kKCsodmFsdWVbMF0gKyBcImVcIiArICh2YWx1ZVsxXSA/ICt2YWx1ZVsxXSArIGV4cCA6IGV4cCkpKTtcclxuICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdChcImVcIik7XHJcbiAgICByZXR1cm4gKCsodmFsdWVbMF0gKyBcImVcIiArICh2YWx1ZVsxXSA/ICt2YWx1ZVsxXSAtIGV4cCA6IC1leHApKSkudG9GaXhlZChleHApO1xyXG4gIH1cclxuXHJcbiAgLy8gRm9ybWF0dGluZ1xyXG5cclxuICAvLyBBY2NlcHQgYSBudW1iZXIgYXMgaW5wdXQsIG91dHB1dCBmb3JtYXR0ZWQgc3RyaW5nLlxyXG4gIGZ1bmN0aW9uIGZvcm1hdFRvKFxyXG4gICAgZGVjaW1hbHMsXHJcbiAgICB0aG91c2FuZCxcclxuICAgIG1hcmssXHJcbiAgICBwcmVmaXgsXHJcbiAgICBzdWZmaXgsXHJcbiAgICBlbmNvZGVyLFxyXG4gICAgZGVjb2RlcixcclxuICAgIG5lZ2F0aXZlQmVmb3JlLFxyXG4gICAgbmVnYXRpdmUsXHJcbiAgICBlZGl0LFxyXG4gICAgdW5kbyxcclxuICAgIGlucHV0XHJcbiAgKSB7XHJcbiAgICB2YXIgb3JpZ2luYWxJbnB1dCA9IGlucHV0LFxyXG4gICAgICBpbnB1dElzTmVnYXRpdmUsXHJcbiAgICAgIGlucHV0UGllY2VzLFxyXG4gICAgICBpbnB1dEJhc2UsXHJcbiAgICAgIGlucHV0RGVjaW1hbHMgPSBcIlwiLFxyXG4gICAgICBvdXRwdXQgPSBcIlwiO1xyXG5cclxuICAgIC8vIEFwcGx5IHVzZXIgZW5jb2RlciB0byB0aGUgaW5wdXQuXHJcbiAgICAvLyBFeHBlY3RlZCBvdXRjb21lOiBudW1iZXIuXHJcbiAgICBpZiAoZW5jb2Rlcikge1xyXG4gICAgICBpbnB1dCA9IGVuY29kZXIoaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0b3AgaWYgbm8gdmFsaWQgbnVtYmVyIHdhcyBwcm92aWRlZCwgdGhlIG51bWJlciBpcyBpbmZpbml0ZSBvciBOYU4uXHJcbiAgICBpZiAoIWlzVmFsaWROdW1iZXIoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSb3VuZGluZyBhd2F5IGRlY2ltYWxzIG1pZ2h0IGNhdXNlIGEgdmFsdWUgb2YgLTBcclxuICAgIC8vIHdoZW4gdXNpbmcgdmVyeSBzbWFsbCByYW5nZXMuIFJlbW92ZSB0aG9zZSBjYXNlcy5cclxuICAgIGlmIChkZWNpbWFscyAhPT0gZmFsc2UgJiYgcGFyc2VGbG9hdChpbnB1dC50b0ZpeGVkKGRlY2ltYWxzKSkgPT09IDApIHtcclxuICAgICAgaW5wdXQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvcm1hdHRpbmcgaXMgZG9uZSBvbiBhYnNvbHV0ZSBudW1iZXJzLFxyXG4gICAgLy8gZGVjb3JhdGVkIGJ5IGFuIG9wdGlvbmFsIG5lZ2F0aXZlIHN5bWJvbC5cclxuICAgIGlmIChpbnB1dCA8IDApIHtcclxuICAgICAgaW5wdXRJc05lZ2F0aXZlID0gdHJ1ZTtcclxuICAgICAgaW5wdXQgPSBNYXRoLmFicyhpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVkdWNlIHRoZSBudW1iZXIgb2YgZGVjaW1hbHMgdG8gdGhlIHNwZWNpZmllZCBvcHRpb24uXHJcbiAgICBpZiAoZGVjaW1hbHMgIT09IGZhbHNlKSB7XHJcbiAgICAgIGlucHV0ID0gdG9GaXhlZChpbnB1dCwgZGVjaW1hbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRyYW5zZm9ybSB0aGUgbnVtYmVyIGludG8gYSBzdHJpbmcsIHNvIGl0IGNhbiBiZSBzcGxpdC5cclxuICAgIGlucHV0ID0gaW5wdXQudG9TdHJpbmcoKTtcclxuXHJcbiAgICAvLyBCcmVhayB0aGUgbnVtYmVyIG9uIHRoZSBkZWNpbWFsIHNlcGFyYXRvci5cclxuICAgIGlmIChpbnB1dC5pbmRleE9mKFwiLlwiKSAhPT0gLTEpIHtcclxuICAgICAgaW5wdXRQaWVjZXMgPSBpbnB1dC5zcGxpdChcIi5cIik7XHJcblxyXG4gICAgICBpbnB1dEJhc2UgPSBpbnB1dFBpZWNlc1swXTtcclxuXHJcbiAgICAgIGlmIChtYXJrKSB7XHJcbiAgICAgICAgaW5wdXREZWNpbWFscyA9IG1hcmsgKyBpbnB1dFBpZWNlc1sxXTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gSWYgaXQgaXNuJ3Qgc3BsaXQsIHRoZSBlbnRpcmUgbnVtYmVyIHdpbGwgZG8uXHJcbiAgICAgIGlucHV0QmFzZSA9IGlucHV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdyb3VwIG51bWJlcnMgaW4gc2V0cyBvZiB0aHJlZS5cclxuICAgIGlmICh0aG91c2FuZCkge1xyXG4gICAgICBpbnB1dEJhc2UgPSBzdHJSZXZlcnNlKGlucHV0QmFzZSkubWF0Y2goLy57MSwzfS9nKTtcclxuICAgICAgaW5wdXRCYXNlID0gc3RyUmV2ZXJzZShpbnB1dEJhc2Uuam9pbihzdHJSZXZlcnNlKHRob3VzYW5kKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIHByZWZpeCB3aXRoIG5lZ2F0aW9uIHN5bWJvbC5cclxuICAgIGlmIChpbnB1dElzTmVnYXRpdmUgJiYgbmVnYXRpdmVCZWZvcmUpIHtcclxuICAgICAgb3V0cHV0ICs9IG5lZ2F0aXZlQmVmb3JlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByZWZpeCB0aGUgbnVtYmVyXHJcbiAgICBpZiAocHJlZml4KSB7XHJcbiAgICAgIG91dHB1dCArPSBwcmVmaXg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm9ybWFsIG5lZ2F0aXZlIG9wdGlvbiBjb21lcyBhZnRlciB0aGUgcHJlZml4LiBEZWZhdWx0cyB0byAnLScuXHJcbiAgICBpZiAoaW5wdXRJc05lZ2F0aXZlICYmIG5lZ2F0aXZlKSB7XHJcbiAgICAgIG91dHB1dCArPSBuZWdhdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBcHBlbmQgdGhlIGFjdHVhbCBudW1iZXIuXHJcbiAgICBvdXRwdXQgKz0gaW5wdXRCYXNlO1xyXG4gICAgb3V0cHV0ICs9IGlucHV0RGVjaW1hbHM7XHJcblxyXG4gICAgLy8gQXBwbHkgdGhlIHN1ZmZpeC5cclxuICAgIGlmIChzdWZmaXgpIHtcclxuICAgICAgb3V0cHV0ICs9IHN1ZmZpeDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSdW4gdGhlIG91dHB1dCB0aHJvdWdoIGEgdXNlci1zcGVjaWZpZWQgcG9zdC1mb3JtYXR0ZXIuXHJcbiAgICBpZiAoZWRpdCkge1xyXG4gICAgICBvdXRwdXQgPSBlZGl0KG91dHB1dCwgb3JpZ2luYWxJbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWxsIGRvbmUuXHJcbiAgICByZXR1cm4gb3V0cHV0O1xyXG4gIH1cclxuXHJcbiAgLy8gQWNjZXB0IGEgc3RpbmcgYXMgaW5wdXQsIG91dHB1dCBkZWNvZGVkIG51bWJlci5cclxuICBmdW5jdGlvbiBmb3JtYXRGcm9tKFxyXG4gICAgZGVjaW1hbHMsXHJcbiAgICB0aG91c2FuZCxcclxuICAgIG1hcmssXHJcbiAgICBwcmVmaXgsXHJcbiAgICBzdWZmaXgsXHJcbiAgICBlbmNvZGVyLFxyXG4gICAgZGVjb2RlcixcclxuICAgIG5lZ2F0aXZlQmVmb3JlLFxyXG4gICAgbmVnYXRpdmUsXHJcbiAgICBlZGl0LFxyXG4gICAgdW5kbyxcclxuICAgIGlucHV0XHJcbiAgKSB7XHJcbiAgICB2YXIgb3JpZ2luYWxJbnB1dCA9IGlucHV0LFxyXG4gICAgICBpbnB1dElzTmVnYXRpdmUsXHJcbiAgICAgIG91dHB1dCA9IFwiXCI7XHJcblxyXG4gICAgLy8gVXNlciBkZWZpbmVkIHByZS1kZWNvZGVyLiBSZXN1bHQgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcuXHJcbiAgICBpZiAodW5kbykge1xyXG4gICAgICBpbnB1dCA9IHVuZG8oaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRlc3QgdGhlIGlucHV0LiBDYW4ndCBiZSBlbXB0eS5cclxuICAgIGlmICghaW5wdXQgfHwgdHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgc3RyaW5nIHN0YXJ0cyB3aXRoIHRoZSBuZWdhdGl2ZUJlZm9yZSB2YWx1ZTogcmVtb3ZlIGl0LlxyXG4gICAgLy8gUmVtZW1iZXIgaXMgd2FzIHRoZXJlLCB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLlxyXG4gICAgaWYgKG5lZ2F0aXZlQmVmb3JlICYmIHN0clN0YXJ0c1dpdGgoaW5wdXQsIG5lZ2F0aXZlQmVmb3JlKSkge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UobmVnYXRpdmVCZWZvcmUsIFwiXCIpO1xyXG4gICAgICBpbnB1dElzTmVnYXRpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlcGVhdCB0aGUgc2FtZSBwcm9jZWR1cmUgZm9yIHRoZSBwcmVmaXguXHJcbiAgICBpZiAocHJlZml4ICYmIHN0clN0YXJ0c1dpdGgoaW5wdXQsIHByZWZpeCkpIHtcclxuICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKHByZWZpeCwgXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQW5kIGFnYWluIGZvciBuZWdhdGl2ZS5cclxuICAgIGlmIChuZWdhdGl2ZSAmJiBzdHJTdGFydHNXaXRoKGlucHV0LCBuZWdhdGl2ZSkpIHtcclxuICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5lZ2F0aXZlLCBcIlwiKTtcclxuICAgICAgaW5wdXRJc05lZ2F0aXZlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgdGhlIHN1ZmZpeC5cclxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zbGljZVxyXG4gICAgaWYgKHN1ZmZpeCAmJiBzdHJFbmRzV2l0aChpbnB1dCwgc3VmZml4KSkge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDAsIC0xICogc3VmZml4Lmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRoZSB0aG91c2FuZCBncm91cGluZy5cclxuICAgIGlmICh0aG91c2FuZCkge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnNwbGl0KHRob3VzYW5kKS5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNldCB0aGUgZGVjaW1hbCBzZXBhcmF0b3IgYmFjayB0byBwZXJpb2QuXHJcbiAgICBpZiAobWFyaykge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UobWFyaywgXCIuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByZXBlbmQgdGhlIG5lZ2F0aXZlIHN5bWJvbC5cclxuICAgIGlmIChpbnB1dElzTmVnYXRpdmUpIHtcclxuICAgICAgb3V0cHV0ICs9IFwiLVwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCB0aGUgbnVtYmVyXHJcbiAgICBvdXRwdXQgKz0gaW5wdXQ7XHJcblxyXG4gICAgLy8gVHJpbSBhbGwgbm9uLW51bWVyaWMgY2hhcmFjdGVycyAoYWxsb3cgJy4nIGFuZCAnLScpO1xyXG4gICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1teMC05XFwuXFwtLl0vZywgXCJcIik7XHJcblxyXG4gICAgLy8gVGhlIHZhbHVlIGNvbnRhaW5zIG5vIHBhcnNlLWFibGUgbnVtYmVyLlxyXG4gICAgaWYgKG91dHB1dCA9PT0gXCJcIikge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ292ZXJ0IHRvIG51bWJlci5cclxuICAgIG91dHB1dCA9IE51bWJlcihvdXRwdXQpO1xyXG5cclxuICAgIC8vIFJ1biB0aGUgdXNlci1zcGVjaWZpZWQgcG9zdC1kZWNvZGVyLlxyXG4gICAgaWYgKGRlY29kZXIpIHtcclxuICAgICAgb3V0cHV0ID0gZGVjb2RlcihvdXRwdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlzIHRoZSBvdXRwdXQgaXMgdmFsaWQsIG90aGVyd2lzZTogcmV0dXJuIGZhbHNlLlxyXG4gICAgaWYgKCFpc1ZhbGlkTnVtYmVyKG91dHB1dCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgfVxyXG5cclxuICAvLyBGcmFtZXdvcmtcclxuXHJcbiAgLy8gVmFsaWRhdGUgZm9ybWF0dGluZyBvcHRpb25zXHJcbiAgZnVuY3Rpb24gdmFsaWRhdGUoaW5wdXRPcHRpb25zKSB7XHJcbiAgICB2YXIgaSxcclxuICAgICAgb3B0aW9uTmFtZSxcclxuICAgICAgb3B0aW9uVmFsdWUsXHJcbiAgICAgIGZpbHRlcmVkT3B0aW9ucyA9IHt9O1xyXG5cclxuICAgIGlmIChpbnB1dE9wdGlvbnNbXCJzdWZmaXhcIl0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBpbnB1dE9wdGlvbnNbXCJzdWZmaXhcIl0gPSBpbnB1dE9wdGlvbnNbXCJwb3N0Zml4XCJdO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBGb3JtYXRPcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIG9wdGlvbk5hbWUgPSBGb3JtYXRPcHRpb25zW2ldO1xyXG4gICAgICBvcHRpb25WYWx1ZSA9IGlucHV0T3B0aW9uc1tvcHRpb25OYW1lXTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25WYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgLy8gT25seSBkZWZhdWx0IGlmIG5lZ2F0aXZlQmVmb3JlIGlzbid0IHNldC5cclxuICAgICAgICBpZiAob3B0aW9uTmFtZSA9PT0gXCJuZWdhdGl2ZVwiICYmICFmaWx0ZXJlZE9wdGlvbnMubmVnYXRpdmVCZWZvcmUpIHtcclxuICAgICAgICAgIGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IFwiLVwiO1xyXG4gICAgICAgICAgLy8gRG9uJ3Qgc2V0IGEgZGVmYXVsdCBmb3IgbWFyayB3aGVuICd0aG91c2FuZCcgaXMgc2V0LlxyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9uTmFtZSA9PT0gXCJtYXJrXCIgJiYgZmlsdGVyZWRPcHRpb25zLnRob3VzYW5kICE9PSBcIi5cIikge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gXCIuXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRmxvYXRpbmcgcG9pbnRzIGluIEpTIGFyZSBzdGFibGUgdXAgdG8gNyBkZWNpbWFscy5cclxuICAgICAgfSBlbHNlIGlmIChvcHRpb25OYW1lID09PSBcImRlY2ltYWxzXCIpIHtcclxuICAgICAgICBpZiAob3B0aW9uVmFsdWUgPj0gMCAmJiBvcHRpb25WYWx1ZSA8IDgpIHtcclxuICAgICAgICAgIGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IG9wdGlvblZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iob3B0aW9uTmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGVzZSBvcHRpb25zLCB3aGVuIHByb3ZpZGVkLCBtdXN0IGJlIGZ1bmN0aW9ucy5cclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBvcHRpb25OYW1lID09PSBcImVuY29kZXJcIiB8fFxyXG4gICAgICAgIG9wdGlvbk5hbWUgPT09IFwiZGVjb2RlclwiIHx8XHJcbiAgICAgICAgb3B0aW9uTmFtZSA9PT0gXCJlZGl0XCIgfHxcclxuICAgICAgICBvcHRpb25OYW1lID09PSBcInVuZG9cIlxyXG4gICAgICApIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvblZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgIGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IG9wdGlvblZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iob3B0aW9uTmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBPdGhlciBvcHRpb25zIGFyZSBzdHJpbmdzLlxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgIGZpbHRlcmVkT3B0aW9uc1tvcHRpb25OYW1lXSA9IG9wdGlvblZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iob3B0aW9uTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU29tZSB2YWx1ZXMgY2FuJ3QgYmUgZXh0cmFjdGVkIGZyb20gYVxyXG4gICAgLy8gc3RyaW5nIGlmIGNlcnRhaW4gY29tYmluYXRpb25zIGFyZSBwcmVzZW50LlxyXG4gICAgdGhyb3dFcXVhbEVycm9yKGZpbHRlcmVkT3B0aW9ucywgXCJtYXJrXCIsIFwidGhvdXNhbmRcIik7XHJcbiAgICB0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCBcInByZWZpeFwiLCBcIm5lZ2F0aXZlXCIpO1xyXG4gICAgdGhyb3dFcXVhbEVycm9yKGZpbHRlcmVkT3B0aW9ucywgXCJwcmVmaXhcIiwgXCJuZWdhdGl2ZUJlZm9yZVwiKTtcclxuXHJcbiAgICByZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgLy8gUGFzcyBhbGwgb3B0aW9ucyBhcyBmdW5jdGlvbiBhcmd1bWVudHNcclxuICBmdW5jdGlvbiBwYXNzQWxsKG9wdGlvbnMsIG1ldGhvZCwgaW5wdXQpIHtcclxuICAgIHZhciBpLFxyXG4gICAgICBhcmdzID0gW107XHJcblxyXG4gICAgLy8gQWRkIGFsbCBvcHRpb25zIGluIG9yZGVyIG9mIEZvcm1hdE9wdGlvbnNcclxuICAgIGZvciAoaSA9IDA7IGkgPCBGb3JtYXRPcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGFyZ3MucHVzaChvcHRpb25zW0Zvcm1hdE9wdGlvbnNbaV1dKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBcHBlbmQgdGhlIGlucHV0LCB0aGVuIGNhbGwgdGhlIG1ldGhvZCwgcHJlc2VudGluZyBhbGxcclxuICAgIC8vIG9wdGlvbnMgYXMgYXJndW1lbnRzLlxyXG4gICAgYXJncy5wdXNoKGlucHV0KTtcclxuICAgIHJldHVybiBtZXRob2QuYXBwbHkoXCJcIiwgYXJncyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB3TnVtYihvcHRpb25zKSB7XHJcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2Ygd051bWIpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgd051bWIob3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBvcHRpb25zID0gdmFsaWRhdGUob3B0aW9ucyk7XHJcblxyXG4gICAgLy8gQ2FsbCAnZm9ybWF0VG8nIHdpdGggcHJvcGVyIGFyZ3VtZW50cy5cclxuICAgIHRoaXMudG8gPSBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICByZXR1cm4gcGFzc0FsbChvcHRpb25zLCBmb3JtYXRUbywgaW5wdXQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDYWxsICdmb3JtYXRGcm9tJyB3aXRoIHByb3BlciBhcmd1bWVudHMuXHJcbiAgICB0aGlzLmZyb20gPSBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICByZXR1cm4gcGFzc0FsbChvcHRpb25zLCBmb3JtYXRGcm9tLCBpbnB1dCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHdOdW1iO1xyXG59KTtcclxuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohIG5vdWlzbGlkZXIgLSAxNC4xLjEgLSAxMi8xNS8yMDE5ICovXFxuLm5vVWktdGFyZ2V0LC5ub1VpLXRhcmdldCAqey13ZWJraXQtdG91Y2gtY2FsbG91dDpub25lOy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXRvdWNoLWFjdGlvbjpub25lO3RvdWNoLWFjdGlvbjpub25lOy1tcy11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lOy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH0ubm9VaS10YXJnZXR7cG9zaXRpb246cmVsYXRpdmV9Lm5vVWktYmFzZSwubm9VaS1jb25uZWN0c3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MX0ubm9VaS1jb25uZWN0c3tvdmVyZmxvdzpoaWRkZW47ei1pbmRleDowfS5ub1VpLWNvbm5lY3QsLm5vVWktb3JpZ2lue3dpbGwtY2hhbmdlOnRyYW5zZm9ybTtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjE7dG9wOjA7cmlnaHQ6MDstbXMtdHJhbnNmb3JtLW9yaWdpbjowIDA7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgMDstd2Via2l0LXRyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDt0cmFuc2Zvcm0tb3JpZ2luOjAgMDt0cmFuc2Zvcm0tc3R5bGU6ZmxhdH0ubm9VaS1jb25uZWN0e2hlaWdodDoxMDAlO3dpZHRoOjEwMCV9Lm5vVWktb3JpZ2lue2hlaWdodDoxMCU7d2lkdGg6MTAlfS5ub1VpLXR4dC1kaXItcnRsLm5vVWktaG9yaXpvbnRhbCAubm9VaS1vcmlnaW57bGVmdDowO3JpZ2h0OmF1dG99Lm5vVWktdmVydGljYWwgLm5vVWktb3JpZ2lue3dpZHRoOjB9Lm5vVWktaG9yaXpvbnRhbCAubm9VaS1vcmlnaW57aGVpZ2h0OjB9Lm5vVWktaGFuZGxley13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47cG9zaXRpb246YWJzb2x1dGV9Lm5vVWktdG91Y2gtYXJlYXtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlfS5ub1VpLXN0YXRlLXRhcCAubm9VaS1jb25uZWN0LC5ub1VpLXN0YXRlLXRhcCAubm9VaS1vcmlnaW57LXdlYmtpdC10cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3M7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjNzfS5ub1VpLXN0YXRlLWRyYWcgKntjdXJzb3I6aW5oZXJpdCFpbXBvcnRhbnR9Lm5vVWktaG9yaXpvbnRhbHtoZWlnaHQ6MThweH0ubm9VaS1ob3Jpem9udGFsIC5ub1VpLWhhbmRsZXt3aWR0aDozNHB4O2hlaWdodDoyOHB4O3JpZ2h0Oi0xN3B4O3RvcDotNnB4fS5ub1VpLXZlcnRpY2Fse3dpZHRoOjE4cHh9Lm5vVWktdmVydGljYWwgLm5vVWktaGFuZGxle3dpZHRoOjI4cHg7aGVpZ2h0OjM0cHg7cmlnaHQ6LTZweDt0b3A6LTE3cHh9Lm5vVWktdHh0LWRpci1ydGwubm9VaS1ob3Jpem9udGFsIC5ub1VpLWhhbmRsZXtsZWZ0Oi0xN3B4O3JpZ2h0OmF1dG99Lm5vVWktdGFyZ2V0e2JhY2tncm91bmQ6I0ZBRkFGQTtib3JkZXItcmFkaXVzOjRweDtib3JkZXI6MXB4IHNvbGlkICNEM0QzRDM7Ym94LXNoYWRvdzppbnNldCAwIDFweCAxcHggI0YwRjBGMCwwIDNweCA2cHggLTVweCAjQkJCfS5ub1VpLWNvbm5lY3Rze2JvcmRlci1yYWRpdXM6M3B4fS5ub1VpLWNvbm5lY3R7YmFja2dyb3VuZDojM0ZCOEFGfS5ub1VpLWRyYWdnYWJsZXtjdXJzb3I6ZXctcmVzaXplfS5ub1VpLXZlcnRpY2FsIC5ub1VpLWRyYWdnYWJsZXtjdXJzb3I6bnMtcmVzaXplfS5ub1VpLWhhbmRsZXtib3JkZXI6MXB4IHNvbGlkICNEOUQ5RDk7Ym9yZGVyLXJhZGl1czozcHg7YmFja2dyb3VuZDojRkZGO2N1cnNvcjpkZWZhdWx0O2JveC1zaGFkb3c6aW5zZXQgMCAwIDFweCAjRkZGLGluc2V0IDAgMXB4IDdweCAjRUJFQkVCLDAgM3B4IDZweCAtM3B4ICNCQkJ9Lm5vVWktYWN0aXZle2JveC1zaGFkb3c6aW5zZXQgMCAwIDFweCAjRkZGLGluc2V0IDAgMXB4IDdweCAjRERELDAgM3B4IDZweCAtM3B4ICNCQkJ9Lm5vVWktaGFuZGxlOmFmdGVyLC5ub1VpLWhhbmRsZTpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDoxNHB4O3dpZHRoOjFweDtiYWNrZ3JvdW5kOiNFOEU3RTY7bGVmdDoxNHB4O3RvcDo2cHh9Lm5vVWktaGFuZGxlOmFmdGVye2xlZnQ6MTdweH0ubm9VaS12ZXJ0aWNhbCAubm9VaS1oYW5kbGU6YWZ0ZXIsLm5vVWktdmVydGljYWwgLm5vVWktaGFuZGxlOmJlZm9yZXt3aWR0aDoxNHB4O2hlaWdodDoxcHg7bGVmdDo2cHg7dG9wOjE0cHh9Lm5vVWktdmVydGljYWwgLm5vVWktaGFuZGxlOmFmdGVye3RvcDoxN3B4fVtkaXNhYmxlZF0gLm5vVWktY29ubmVjdHtiYWNrZ3JvdW5kOiNCOEI4Qjh9W2Rpc2FibGVkXSAubm9VaS1oYW5kbGUsW2Rpc2FibGVkXS5ub1VpLWhhbmRsZSxbZGlzYWJsZWRdLm5vVWktdGFyZ2V0e2N1cnNvcjpub3QtYWxsb3dlZH0ubm9VaS1waXBzLC5ub1VpLXBpcHMgKnstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Lm5vVWktcGlwc3twb3NpdGlvbjphYnNvbHV0ZTtjb2xvcjojOTk5fS5ub1VpLXZhbHVle3Bvc2l0aW9uOmFic29sdXRlO3doaXRlLXNwYWNlOm5vd3JhcDt0ZXh0LWFsaWduOmNlbnRlcn0ubm9VaS12YWx1ZS1zdWJ7Y29sb3I6I2NjYztmb250LXNpemU6MTBweH0ubm9VaS1tYXJrZXJ7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZDojQ0NDfS5ub1VpLW1hcmtlci1zdWJ7YmFja2dyb3VuZDojQUFBfS5ub1VpLW1hcmtlci1sYXJnZXtiYWNrZ3JvdW5kOiNBQUF9Lm5vVWktcGlwcy1ob3Jpem9udGFse3BhZGRpbmc6MTBweCAwO2hlaWdodDo4MHB4O3RvcDoxMDAlO2xlZnQ6MDt3aWR0aDoxMDAlfS5ub1VpLXZhbHVlLWhvcml6b250YWx7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsNTAlKX0ubm9VaS1ydGwgLm5vVWktdmFsdWUtaG9yaXpvbnRhbHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoNTAlLDUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSg1MCUsNTAlKX0ubm9VaS1tYXJrZXItaG9yaXpvbnRhbC5ub1VpLW1hcmtlcnttYXJnaW4tbGVmdDotMXB4O3dpZHRoOjJweDtoZWlnaHQ6NXB4fS5ub1VpLW1hcmtlci1ob3Jpem9udGFsLm5vVWktbWFya2VyLXN1YntoZWlnaHQ6MTBweH0ubm9VaS1tYXJrZXItaG9yaXpvbnRhbC5ub1VpLW1hcmtlci1sYXJnZXtoZWlnaHQ6MTVweH0ubm9VaS1waXBzLXZlcnRpY2Fse3BhZGRpbmc6MCAxMHB4O2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MTAwJX0ubm9VaS12YWx1ZS12ZXJ0aWNhbHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoMCwtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTUwJSk7cGFkZGluZy1sZWZ0OjI1cHh9Lm5vVWktcnRsIC5ub1VpLXZhbHVlLXZlcnRpY2Fsey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgwLDUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLDUwJSl9Lm5vVWktbWFya2VyLXZlcnRpY2FsLm5vVWktbWFya2Vye3dpZHRoOjVweDtoZWlnaHQ6MnB4O21hcmdpbi10b3A6LTFweH0ubm9VaS1tYXJrZXItdmVydGljYWwubm9VaS1tYXJrZXItc3Vie3dpZHRoOjEwcHh9Lm5vVWktbWFya2VyLXZlcnRpY2FsLm5vVWktbWFya2VyLWxhcmdle3dpZHRoOjE1cHh9Lm5vVWktdG9vbHRpcHtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlcjoxcHggc29saWQgI0Q5RDlEOTtib3JkZXItcmFkaXVzOjNweDtiYWNrZ3JvdW5kOiNmZmY7Y29sb3I6IzAwMDtwYWRkaW5nOjVweDt0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpub3dyYXB9Lm5vVWktaG9yaXpvbnRhbCAubm9VaS10b29sdGlwey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwwKTtsZWZ0OjUwJTtib3R0b206MTIwJX0ubm9VaS12ZXJ0aWNhbCAubm9VaS10b29sdGlwey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC01MCUpO3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwtNTAlKTt0b3A6NTAlO3JpZ2h0OjEyMCV9XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9leHBhbmQtbW9yZS04MTRjYzU1LnBuZ1wiOyIsIi8qIVxuKiBpbnB1dG1hc2suanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC45XG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWyBcIi4vZGVwZW5kZW5jeUxpYnMvaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWJcIiwgXCIuL2dsb2JhbC93aW5kb3dcIiBdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9kZXBlbmRlbmN5TGlicy9pbnB1dG1hc2suZGVwZW5kZW5jeUxpYlwiKSwgcmVxdWlyZShcIi4vZ2xvYmFsL3dpbmRvd1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LklucHV0bWFzayA9IGZhY3Rvcnkod2luZG93LmRlcGVuZGVuY3lMaWIgfHwgalF1ZXJ5LCB3aW5kb3cpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKCQsIHdpbmRvdywgdW5kZWZpbmVkKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsIGllID0gdWEuaW5kZXhPZihcIk1TSUUgXCIpID4gMCB8fCB1YS5pbmRleE9mKFwiVHJpZGVudC9cIikgPiAwLCBtb2JpbGUgPSBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoXCJ0b3VjaHN0YXJ0XCIpLCBpZW1vYmlsZSA9IC9pZW1vYmlsZS9pLnRlc3QodWEpLCBpcGhvbmUgPSAvaXBob25lL2kudGVzdCh1YSkgJiYgIWllbW9iaWxlO1xuICAgIGZ1bmN0aW9uIElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIElucHV0bWFzaykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW5wdXRtYXNrKGFsaWFzLCBvcHRpb25zLCBpbnRlcm5hbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5tYXNrc2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlZnJlc2hWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoaW50ZXJuYWwgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICgkLmlzUGxhaW5PYmplY3QoYWxpYXMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGFsaWFzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgICAgICBpZiAoYWxpYXMpIG9wdGlvbnMuYWxpYXMgPSBhbGlhcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3B0cyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMubm9NYXNrc0NhY2hlID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlZmluaXRpb25zICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnVzZXJPcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMuaXNSVEwgPSB0aGlzLm9wdHMubnVtZXJpY0lucHV0O1xuICAgICAgICAgICAgcmVzb2x2ZUFsaWFzKHRoaXMub3B0cy5hbGlhcywgb3B0aW9ucywgdGhpcy5vcHRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBJbnB1dG1hc2sucHJvdG90eXBlID0ge1xuICAgICAgICBkYXRhQXR0cmlidXRlOiBcImRhdGEtaW5wdXRtYXNrXCIsXG4gICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJfXCIsXG4gICAgICAgICAgICBvcHRpb25hbG1hcmtlcjogWyBcIltcIiwgXCJdXCIgXSxcbiAgICAgICAgICAgIHF1YW50aWZpZXJtYXJrZXI6IFsgXCJ7XCIsIFwifVwiIF0sXG4gICAgICAgICAgICBncm91cG1hcmtlcjogWyBcIihcIiwgXCIpXCIgXSxcbiAgICAgICAgICAgIGFsdGVybmF0b3JtYXJrZXI6IFwifFwiLFxuICAgICAgICAgICAgZXNjYXBlQ2hhcjogXCJcXFxcXCIsXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxuICAgICAgICAgICAgcmVnZXg6IG51bGwsXG4gICAgICAgICAgICBvbmNvbXBsZXRlOiAkLm5vb3AsXG4gICAgICAgICAgICBvbmluY29tcGxldGU6ICQubm9vcCxcbiAgICAgICAgICAgIG9uY2xlYXJlZDogJC5ub29wLFxuICAgICAgICAgICAgcmVwZWF0OiAwLFxuICAgICAgICAgICAgZ3JlZWR5OiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlLFxuICAgICAgICAgICAgcmVtb3ZlTWFza09uU3VibWl0OiBmYWxzZSxcbiAgICAgICAgICAgIGNsZWFyTWFza09uTG9zdEZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgaW5zZXJ0TW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgICBhbGlhczogbnVsbCxcbiAgICAgICAgICAgIG9uS2V5RG93bjogJC5ub29wLFxuICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBudWxsLFxuICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24ocGFzdGVkVmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwodGhpcywgcGFzdGVkVmFsdWUsIG9wdHMpIDogcGFzdGVkVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogbnVsbCxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBudWxsLFxuICAgICAgICAgICAgc2hvd01hc2tPbkZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgc2hvd01hc2tPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgb25LZXlWYWxpZGF0aW9uOiAkLm5vb3AsXG4gICAgICAgICAgICBza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyOiBcIiBcIixcbiAgICAgICAgICAgIG51bWVyaWNJbnB1dDogZmFsc2UsXG4gICAgICAgICAgICByaWdodEFsaWduOiBmYWxzZSxcbiAgICAgICAgICAgIHVuZG9PbkVzY2FwZTogdHJ1ZSxcbiAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiXCIsXG4gICAgICAgICAgICBfcmFkaXhEYW5jZTogZmFsc2UsXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgIGtlZXBTdGF0aWM6IG51bGwsXG4gICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25UYWI6IHRydWUsXG4gICAgICAgICAgICB0YWJUaHJvdWdoOiBmYWxzZSxcbiAgICAgICAgICAgIHN1cHBvcnRzSW5wdXRUeXBlOiBbIFwidGV4dFwiLCBcInRlbFwiLCBcInVybFwiLCBcInBhc3N3b3JkXCIsIFwic2VhcmNoXCIgXSxcbiAgICAgICAgICAgIGlnbm9yYWJsZXM6IFsgOCwgOSwgMTMsIDE5LCAyNywgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0NSwgNDYsIDkzLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzLCAwLCAyMjkgXSxcbiAgICAgICAgICAgIGlzQ29tcGxldGU6IG51bGwsXG4gICAgICAgICAgICBwcmVWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IG51bGwsXG4gICAgICAgICAgICBzdGF0aWNEZWZpbml0aW9uU3ltYm9sOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBqaXRNYXNraW5nOiBmYWxzZSxcbiAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgaW5wdXRFdmVudE9ubHk6IGZhbHNlLFxuICAgICAgICAgICAgbm9WYWx1ZVBhdGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHBvc2l0aW9uQ2FyZXRPbkNsaWNrOiBcImx2cFwiLFxuICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgaW5wdXRtb2RlOiBcInZlcmJhdGltXCIsXG4gICAgICAgICAgICBjb2xvck1hc2s6IGZhbHNlLFxuICAgICAgICAgICAgZGlzYWJsZVByZWRpY3RpdmVUZXh0OiBmYWxzZSxcbiAgICAgICAgICAgIGltcG9ydERhdGFBdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgc2hpZnRQb3NpdGlvbnM6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgIDk6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOVxcdWZmMTEtXFx1ZmYxOV1cIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uU3ltYm9sOiBcIipcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiW0EtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uU3ltYm9sOiBcIipcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlcXHVmZjExLVxcdWZmMTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxpYXNlczoge30sXG4gICAgICAgIG1hc2tzQ2FjaGU6IHt9LFxuICAgICAgICBtYXNrOiBmdW5jdGlvbihlbGVtcykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgZnVuY3Rpb24gaW1wb3J0QXR0cmlidXRlT3B0aW9ucyhucHQsIG9wdHMsIHVzZXJPcHRpb25zLCBkYXRhQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaW1wb3J0RGF0YUF0dHJpYnV0ZXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJPcHRpb25zID0gbnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKSwgb3B0aW9uLCBkYXRhb3B0aW9ucywgb3B0aW9uRGF0YSwgcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltcG9ydE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbiwgb3B0aW9uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IG9wdGlvbkRhdGEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbkRhdGEgOiBucHQuZ2V0QXR0cmlidXRlKGRhdGFBdHRyaWJ1dGUgKyBcIi1cIiArIG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uRGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uRGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmluZGV4T2YoXCJvblwiKSA9PT0gMCkgb3B0aW9uRGF0YSA9IHdpbmRvd1tvcHRpb25EYXRhXTsgZWxzZSBpZiAob3B0aW9uRGF0YSA9PT0gXCJmYWxzZVwiKSBvcHRpb25EYXRhID0gZmFsc2U7IGVsc2UgaWYgKG9wdGlvbkRhdGEgPT09IFwidHJ1ZVwiKSBvcHRpb25EYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck9wdGlvbnNbb3B0aW9uXSA9IG9wdGlvbkRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyT3B0aW9ucyAmJiBhdHRyT3B0aW9ucyAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck9wdGlvbnMgPSBhdHRyT3B0aW9ucy5yZXBsYWNlKC8nL2csICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YW9wdGlvbnMgPSBKU09OLnBhcnNlKFwie1wiICsgYXR0ck9wdGlvbnMgKyBcIn1cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAudG9Mb3dlckNhc2UoKSA9PT0gXCJhbGlhc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBkYXRhb3B0aW9uc1twXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydE9wdGlvbihcImFsaWFzXCIsIG9wdGlvbkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlck9wdGlvbnMuYWxpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVBbGlhcyh1c2VyT3B0aW9ucy5hbGlhcywgdXNlck9wdGlvbnMsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAob3B0aW9uIGluIG9wdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIGRhdGFvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLnRvTG93ZXJDYXNlKCkgPT09IG9wdGlvbi50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gZGF0YW9wdGlvbnNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydE9wdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIG9wdHMsIHVzZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAobnB0LmRpciA9PT0gXCJydGxcIiB8fCBvcHRzLnJpZ2h0QWxpZ24pIHtcbiAgICAgICAgICAgICAgICAgICAgbnB0LnN0eWxlLnRleHRBbGlnbiA9IFwicmlnaHRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5kaXIgPT09IFwicnRsXCIgfHwgb3B0cy5udW1lcmljSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbnB0LmRpciA9IFwibHRyXCI7XG4gICAgICAgICAgICAgICAgICAgIG5wdC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIik7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaXNSVEwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModXNlck9wdGlvbnMpLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcbiAgICAgICAgICAgICQuZWFjaChlbGVtcywgZnVuY3Rpb24obmR4LCBlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzY29wZWRPcHRzID0gJC5leHRlbmQodHJ1ZSwge30sIHRoYXQub3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMoZWwsIHNjb3BlZE9wdHMsICQuZXh0ZW5kKHRydWUsIHt9LCB0aGF0LnVzZXJPcHRpb25zKSwgdGhhdC5kYXRhQXR0cmlidXRlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza3NldCA9IGdlbmVyYXRlTWFza1NldChzY29wZWRPcHRzLCB0aGF0Lm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXNrc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzayA9IG5ldyBJbnB1dG1hc2sodW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm9wdHMgPSBzY29wZWRPcHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm5vTWFza3NDYWNoZSA9IHRoYXQubm9NYXNrc0NhY2hlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLnVzZXJPcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHRoYXQudXNlck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLmlzUlRMID0gc2NvcGVkT3B0cy5pc1JUTCB8fCBzY29wZWRPcHRzLm51bWVyaWNJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5lbCA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLm1hc2tzZXQgPSBtYXNrc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5kYXRhKGVsLCBcIl9pbnB1dG1hc2tfb3B0c1wiLCBzY29wZWRPcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tTY29wZS5jYWxsKGVsLmlucHV0bWFzaywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJtYXNrXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbXMgJiYgZWxlbXNbMF0gPyBlbGVtc1swXS5pbnB1dG1hc2sgfHwgdGhpcyA6IHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbjogZnVuY3Rpb24ob3B0aW9ucywgbm9yZW1hc2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdHNbb3B0aW9uc107XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgJC5leHRlbmQodGhpcy51c2VyT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWwgJiYgbm9yZW1hc2sgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrKHRoaXMuZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdW5tYXNrZWR2YWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJ1bm1hc2tlZHZhbHVlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlbW92ZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0ZW1wdHltYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJnZXRlbXB0eW1hc2tcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc01hc2tlZFZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5vcHRzLmF1dG9Vbm1hc2s7XG4gICAgICAgIH0sXG4gICAgICAgIGlzQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5tYXNrc2V0ID0gdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKTtcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImlzQ29tcGxldGVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldG1ldGFkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJnZXRtZXRhZGF0YVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc1ZhbGlkXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0OiBmdW5jdGlvbih2YWx1ZSwgbWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJmb3JtYXRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbCkge1xuICAgICAgICAgICAgICAgICQodGhpcy5lbCkudHJpZ2dlcihcInNldHZhbHVlXCIsIFsgdmFsdWUgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFuYWx5c2VNYXNrOiBmdW5jdGlvbihtYXNrLCByZWdleE1hc2ssIG9wdHMpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbml6ZXIgPSAvKD86Wz8qK118XFx7WzAtOVxcK1xcKl0rKD86LFswLTlcXCtcXCpdKik/KD86XFx8WzAtOVxcK1xcKl0qKT9cXH0pfFteLj8qK14ke1tdKCl8XFxcXF0rfC4vZywgcmVnZXhUb2tlbml6ZXIgPSAvXFxbXFxeP10/KD86W15cXFxcXFxdXSt8XFxcXFtcXFNcXHNdPykqXT98XFxcXCg/OjAoPzpbMC0zXVswLTddezAsMn18WzQtN11bMC03XT8pP3xbMS05XVswLTldKnx4WzAtOUEtRmEtZl17Mn18dVswLTlBLUZhLWZdezR9fGNbQS1aYS16XXxbXFxTXFxzXT8pfFxcKCg/OlxcP1s6PSFdPyk/fCg/Ols/KitdfFxce1swLTldKyg/OixbMC05XSopP1xcfSlcXD8/fFteLj8qK14ke1soKXxcXFxcXSt8Li9nLCBlc2NhcGVkID0gZmFsc2UsIGN1cnJlbnRUb2tlbiA9IG5ldyBNYXNrVG9rZW4oKSwgbWF0Y2gsIG0sIG9wZW5lbmluZ3MgPSBbXSwgbWFza1Rva2VucyA9IFtdLCBvcGVuaW5nVG9rZW4sIGN1cnJlbnRPcGVuaW5nVG9rZW4sIGFsdGVybmF0b3IsIGxhc3RNYXRjaCwgZ3JvdXBUb2tlbjtcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1hc2tUb2tlbihpc0dyb3VwLCBpc09wdGlvbmFsLCBpc1F1YW50aWZpZXIsIGlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbkdyb3VwID0gaXNHcm91cCB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0b3JHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNHcm91cCA9IGlzR3JvdXAgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc09wdGlvbmFsID0gaXNPcHRpb25hbCB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUXVhbnRpZmllciA9IGlzUXVhbnRpZmllciB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzQWx0ZXJuYXRvciA9IGlzQWx0ZXJuYXRvciB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnF1YW50aWZpZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgICAgICAgICAgbWF4OiAxXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGluc2VydFRlc3REZWZpbml0aW9uKG10b2tlbiwgZWxlbWVudCwgcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uICE9PSB1bmRlZmluZWQgPyBwb3NpdGlvbiA6IG10b2tlbi5tYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgcHJldk1hdGNoID0gbXRva2VuLm1hdGNoZXNbcG9zaXRpb24gLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmluZGV4T2YoXCJbXCIpID09PSAwIHx8IGVzY2FwZWQgJiYgL1xcXFxkfFxcXFxzfFxcXFx3XS9pLnRlc3QoZWxlbWVudCkgfHwgZWxlbWVudCA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG5ldyBSZWdFeHAoZWxlbWVudCwgb3B0cy5jYXNpbmcgPyBcImlcIiA6IFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgPyBcIm1hc3RlclwiIDogcHJldk1hdGNoLmRlZiAhPT0gZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkKSBlbGVtZW50ID0gZWxlbWVudFtlbGVtZW50Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGVsZW1lbnQuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgbG1udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGxtbnQgJiYgcHJldk1hdGNoLmZuICE9PSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sIHx8IGxtbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgIT09IHVuZGVmaW5lZCA/IGxtbnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogKGVzY2FwZWQgPyBcIidcIiA6IFwiXCIpICsgbG1udFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrZGVmID0gKG9wdHMuZGVmaW5pdGlvbnMgPyBvcHRzLmRlZmluaXRpb25zW2VsZW1lbnRdIDogdW5kZWZpbmVkKSB8fCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zW2VsZW1lbnRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza2RlZiAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogbWFza2RlZi52YWxpZGF0b3IgPyB0eXBlb2YgbWFza2RlZi52YWxpZGF0b3IgPT0gXCJzdHJpbmdcIiA/IG5ldyBSZWdFeHAobWFza2RlZi52YWxpZGF0b3IsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSA6IG5ldyBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0ID0gbWFza2RlZi52YWxpZGF0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpIDogbmV3IFJlZ0V4cChcIi5cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSAobWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbWFza2RlZi5jYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBtYXNrZGVmLmRlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQgJiYgcHJldk1hdGNoLmZuICE9PSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgIT09IHVuZGVmaW5lZCA/IGVsZW1lbnQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiAoZXNjYXBlZCA/IFwiJ1wiIDogXCJcIikgKyBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHZlcmlmeUdyb3VwTWFya2VyKG1hc2tUb2tlbikge1xuICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4gJiYgbWFza1Rva2VuLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKG1hc2tUb2tlbi5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFRva2VuID0gbWFza1Rva2VuLm1hdGNoZXNbbmR4ICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKG5leHRUb2tlbiA9PT0gdW5kZWZpbmVkIHx8IChuZXh0VG9rZW4ubWF0Y2hlcyA9PT0gdW5kZWZpbmVkIHx8IG5leHRUb2tlbi5pc1F1YW50aWZpZXIgPT09IGZhbHNlKSkgJiYgdG9rZW4gJiYgdG9rZW4uaXNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLmlzR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbih0b2tlbiwgb3B0cy5ncm91cG1hcmtlclswXSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbi5vcGVuR3JvdXAgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFRlc3REZWZpbml0aW9uKHRva2VuLCBvcHRzLmdyb3VwbWFya2VyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUdyb3VwTWFya2VyKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZGVmYXVsdENhc2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50T3BlbmluZ1Rva2VuLCBtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50VG9rZW4sIG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VUb2tlbnMobWFza1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZVN0YXRpYyhzdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXJbMF0pIHN0ID0gb3B0cy5vcHRpb25hbG1hcmtlclsxXTsgZWxzZSBpZiAoc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXJbMV0pIHN0ID0gb3B0cy5vcHRpb25hbG1hcmtlclswXTsgZWxzZSBpZiAoc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXJbMF0pIHN0ID0gb3B0cy5ncm91cG1hcmtlclsxXTsgZWxzZSBpZiAoc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXJbMV0pIHN0ID0gb3B0cy5ncm91cG1hcmtlclswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcyA9IG1hc2tUb2tlbi5tYXRjaGVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtYXRjaCBpbiBtYXNrVG9rZW4ubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXMuaGFzT3duUHJvcGVydHkobWF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50TWF0Y2ggPSBwYXJzZUludChtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdLmlzUXVhbnRpZmllciAmJiBtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCArIDFdICYmIG1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoICsgMV0uaXNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdCA9IG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UobWF0Y2gsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShpbnRNYXRjaCArIDEsIDAsIHF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0ubWF0Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdID0gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0gPSByZXZlcnNlU3RhdGljKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdyb3VwaWZ5KG1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5vcGVuR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBncm91cFRva2VuLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgICAgICAgICAgICAgIHJldHVybiBncm91cFRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgIG9wdHMub3B0aW9uYWxtYXJrZXJbMF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgb3B0cy5vcHRpb25hbG1hcmtlclsxXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4TWFzayA/IHJlZ2V4VG9rZW5pemVyLmV4ZWMobWFzaykgOiB0b2tlbml6ZXIuZXhlYyhtYXNrKSkge1xuICAgICAgICAgICAgICAgIG0gPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiP1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFwiezAsMX1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFwie1wiICsgbSArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAobS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIoPz1cIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIoPyFcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIoPzw9XCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD88IVwiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmVzY2FwZUNoYXI6XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXJbMV06XG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXJbMV06XG4gICAgICAgICAgICAgICAgICAgIG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5pbmdUb2tlbi5vcGVuR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5pbmdUb2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHRlcm5hdG9yLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uYWx0ZXJuYXRvckdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlclswXTpcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4oZmFsc2UsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5ncm91cG1hcmtlclswXTpcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4odHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWFudGlmaWVyID0gbmV3IE1hc2tUb2tlbihmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBtID0gbS5yZXBsYWNlKC9be31dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXFqID0gbS5zcGxpdChcInxcIiksIG1xID0gbXFqWzBdLnNwbGl0KFwiLFwiKSwgbXEwID0gaXNOYU4obXFbMF0pID8gbXFbMF0gOiBwYXJzZUludChtcVswXSksIG1xMSA9IG1xLmxlbmd0aCA9PT0gMSA/IG1xMCA6IGlzTmFOKG1xWzFdKSA/IG1xWzFdIDogcGFyc2VJbnQobXFbMV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobXEwID09PSBcIipcIiB8fCBtcTAgPT09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtcTAgPSBtcTEgPT09IFwiKlwiID8gMCA6IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpZmllci5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBtcTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg6IG1xMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGppdDogbXFqWzFdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gb3BlbmVuaW5ncy5sZW5ndGggPiAwID8gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLm1hdGNoZXMgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcztcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IG1hdGNoLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTWF0Y2ggPSBtYXRjaGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGdyb3VwVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IGdyb3VwVG9rZW4ubWF0Y2hlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdG1wTWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaC5pc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGdyb3VwaWZ5KFsgbWF0Y2ggXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmFsdGVybmF0b3JtYXJrZXI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cFF1YW50aWZpZXIgPSBmdW5jdGlvbihtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdE1hdGNoID0gbWF0Y2hlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWF0Y2guaXNRdWFudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gZ3JvdXBpZnkoWyBtYXRjaGVzLnBvcCgpLCBsYXN0TWF0Y2ggXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFzdE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlRva2VuID0gY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzW2N1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuLm9wZW5Hcm91cCAmJiAoc3ViVG9rZW4ubWF0Y2hlcyA9PT0gdW5kZWZpbmVkIHx8IHN1YlRva2VuLmlzR3JvdXAgPT09IGZhbHNlICYmIHN1YlRva2VuLmlzQWx0ZXJuYXRvciA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gZ3JvdXBRdWFudGlmaWVyKGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2ggPSBncm91cFF1YW50aWZpZXIoY3VycmVudFRva2VuLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobGFzdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWF0Y2guYWx0ZXJuYXRvckdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoLmFsdGVybmF0b3JHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gbmV3IE1hc2tUb2tlbihmYWxzZSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlcy5wdXNoKGxhc3RNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLm9wZW5Hcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5vcGVuR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRvckdyb3VwID0gbmV3IE1hc2tUb2tlbih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yR3JvdXAuYWx0ZXJuYXRvckdyb3VwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2goYWx0ZXJuYXRvckdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgb3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZlcmlmeUdyb3VwTWFya2VyKGN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICAgICAgbWFza1Rva2Vucy5wdXNoKGN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgfHwgb3B0cy5pc1JUTCkge1xuICAgICAgICAgICAgICAgIHJldmVyc2VUb2tlbnMobWFza1Rva2Vuc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFza1Rva2VucztcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb25Db2xvck1hc2s6IGZ1bmN0aW9uKGlucHV0LCB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgaW5wdXQuc3R5bGUubGVmdCA9IHRlbXBsYXRlLm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0bWFzay5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMgPSBmdW5jdGlvbihkZWZpbml0aW9uKSB7XG4gICAgICAgICQuZXh0ZW5kKHRydWUsIElucHV0bWFzay5wcm90b3R5cGUuZGVmaW5pdGlvbnMsIGRlZmluaXRpb24pO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMgPSBmdW5jdGlvbihhbGlhcykge1xuICAgICAgICAkLmV4dGVuZCh0cnVlLCBJbnB1dG1hc2sucHJvdG90eXBlLmFsaWFzZXMsIGFsaWFzKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5mb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucywgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5mb3JtYXQodmFsdWUsIG1ldGFkYXRhKTtcbiAgICB9O1xuICAgIElucHV0bWFzay51bm1hc2sgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLnVubWFza2VkdmFsdWUodmFsdWUpO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLmlzVmFsaWQgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLmlzVmFsaWQodmFsdWUpO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLnJlbW92ZSA9IGZ1bmN0aW9uKGVsZW1zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcbiAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XG4gICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrKSBlbC5pbnB1dG1hc2sucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLnNldFZhbHVlID0gZnVuY3Rpb24oZWxlbXMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1zID0gZWxlbXMubm9kZU5hbWUgPyBbIGVsZW1zIF0gOiBlbGVtcztcbiAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbihuZHgsIGVsKSB7XG4gICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrKSBlbC5pbnB1dG1hc2suc2V0VmFsdWUodmFsdWUpOyBlbHNlICQoZWwpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIElucHV0bWFzay5lc2NhcGVSZWdleCA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICB2YXIgc3BlY2lhbHMgPSBbIFwiL1wiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLCBcIj9cIiwgXCJ8XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIFwiXFxcXFwiLCBcIiRcIiwgXCJeXCIgXTtcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXFxcXFwiICsgc3BlY2lhbHMuam9pbihcInxcXFxcXCIpICsgXCIpXCIsIFwiZ2ltXCIpLCBcIlxcXFwkMVwiKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5rZXlDb2RlID0ge1xuICAgICAgICBCQUNLU1BBQ0U6IDgsXG4gICAgICAgIEJBQ0tTUEFDRV9TQUZBUkk6IDEyNyxcbiAgICAgICAgREVMRVRFOiA0NixcbiAgICAgICAgRE9XTjogNDAsXG4gICAgICAgIEVORDogMzUsXG4gICAgICAgIEVOVEVSOiAxMyxcbiAgICAgICAgRVNDQVBFOiAyNyxcbiAgICAgICAgSE9NRTogMzYsXG4gICAgICAgIElOU0VSVDogNDUsXG4gICAgICAgIExFRlQ6IDM3LFxuICAgICAgICBQQUdFX0RPV046IDM0LFxuICAgICAgICBQQUdFX1VQOiAzMyxcbiAgICAgICAgUklHSFQ6IDM5LFxuICAgICAgICBTUEFDRTogMzIsXG4gICAgICAgIFRBQjogOSxcbiAgICAgICAgVVA6IDM4LFxuICAgICAgICBYOiA4OCxcbiAgICAgICAgQ09OVFJPTDogMTdcbiAgICB9O1xuICAgIElucHV0bWFzay5kZXBlbmRlbmN5TGliID0gJDtcbiAgICBmdW5jdGlvbiByZXNvbHZlQWxpYXMoYWxpYXNTdHIsIG9wdGlvbnMsIG9wdHMpIHtcbiAgICAgICAgdmFyIGFsaWFzRGVmaW5pdGlvbiA9IElucHV0bWFzay5wcm90b3R5cGUuYWxpYXNlc1thbGlhc1N0cl07XG4gICAgICAgIGlmIChhbGlhc0RlZmluaXRpb24pIHtcbiAgICAgICAgICAgIGlmIChhbGlhc0RlZmluaXRpb24uYWxpYXMpIHJlc29sdmVBbGlhcyhhbGlhc0RlZmluaXRpb24uYWxpYXMsIHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBvcHRzLCBhbGlhc0RlZmluaXRpb24pO1xuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0cywgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRzLm1hc2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdHMubWFzayA9IGFsaWFzU3RyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrU2V0KG9wdHMsIG5vY2FjaGUpIHtcbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssIG1ldGFkYXRhLCBvcHRzKSB7XG4gICAgICAgICAgICB2YXIgcmVnZXhNYXNrID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAobWFzayA9PT0gbnVsbCB8fCBtYXNrID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgcmVnZXhNYXNrID0gb3B0cy5yZWdleCAhPT0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgPSBvcHRzLnJlZ2V4O1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5yZXBsYWNlKC9eKFxcXikoLiopKFxcJCkkLywgXCIkMlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWdleE1hc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gXCIuKlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXNrLmxlbmd0aCA9PT0gMSAmJiBvcHRzLmdyZWVkeSA9PT0gZmFsc2UgJiYgb3B0cy5yZXBlYXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLnJlcGVhdCA+IDAgfHwgb3B0cy5yZXBlYXQgPT09IFwiKlwiIHx8IG9wdHMucmVwZWF0ID09PSBcIitcIikge1xuICAgICAgICAgICAgICAgIHZhciByZXBlYXRTdGFydCA9IG9wdHMucmVwZWF0ID09PSBcIipcIiA/IDAgOiBvcHRzLnJlcGVhdCA9PT0gXCIrXCIgPyAxIDogb3B0cy5yZXBlYXQ7XG4gICAgICAgICAgICAgICAgbWFzayA9IG9wdHMuZ3JvdXBtYXJrZXJbMF0gKyBtYXNrICsgb3B0cy5ncm91cG1hcmtlclsxXSArIG9wdHMucXVhbnRpZmllcm1hcmtlclswXSArIHJlcGVhdFN0YXJ0ICsgXCIsXCIgKyBvcHRzLnJlcGVhdCArIG9wdHMucXVhbnRpZmllcm1hcmtlclsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtYXNrc2V0RGVmaW5pdGlvbiwgbWFza2RlZktleSA9IHJlZ2V4TWFzayA/IFwicmVnZXhfXCIgKyBvcHRzLnJlZ2V4IDogb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFzaztcbiAgICAgICAgICAgIGlmIChJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0gPT09IHVuZGVmaW5lZCB8fCBub2NhY2hlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbWFza3NldERlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2s6IG1hc2ssXG4gICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbjogSW5wdXRtYXNrLnByb3RvdHlwZS5hbmFseXNlTWFzayhtYXNrLCByZWdleE1hc2ssIG9wdHMpLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZFBvc2l0aW9uczoge30sXG4gICAgICAgICAgICAgICAgICAgIF9idWZmZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHRlc3RzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZXM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1hc2tMZW5ndGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgaml0T2Zmc2V0OiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKG5vY2FjaGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldID0gbWFza3NldERlZmluaXRpb247XG4gICAgICAgICAgICAgICAgICAgIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQodHJ1ZSwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQodHJ1ZSwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza3NldERlZmluaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1zO1xuICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMubWFzaykpIHtcbiAgICAgICAgICAgIG9wdHMubWFzayA9IG9wdHMubWFzayhvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJC5pc0FycmF5KG9wdHMubWFzaykpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLm1hc2subGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmtlZXBTdGF0aWMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5tYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXNrW2ldLmNoYXJBdCgwKSAhPT0gb3B0cy5tYXNrWzBdLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMua2VlcFN0YXRpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFsdE1hc2sgPSBvcHRzLmdyb3VwbWFya2VyWzBdO1xuICAgICAgICAgICAgICAgICQuZWFjaChvcHRzLmlzUlRMID8gb3B0cy5tYXNrLnJldmVyc2UoKSA6IG9wdHMubWFzaywgZnVuY3Rpb24obmR4LCBtc2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hc2subGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdICsgb3B0cy5hbHRlcm5hdG9ybWFya2VyICsgb3B0cy5ncm91cG1hcmtlclswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobXNrLm1hc2sgIT09IHVuZGVmaW5lZCAmJiAhJC5pc0Z1bmN0aW9uKG1zay5tYXNrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWFzayArPSBtc2subWFzaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gbXNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYWx0TWFzayArPSBvcHRzLmdyb3VwbWFya2VyWzFdO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZU1hc2soYWx0TWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgICAgIH0gZWxzZSBvcHRzLm1hc2sgPSBvcHRzLm1hc2sucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMubWFzayAmJiBvcHRzLm1hc2subWFzayAhPT0gdW5kZWZpbmVkICYmICEkLmlzRnVuY3Rpb24ob3B0cy5tYXNrLm1hc2spKSB7XG4gICAgICAgICAgICBtcyA9IGdlbmVyYXRlTWFzayhvcHRzLm1hc2subWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1zID0gZ2VuZXJhdGVNYXNrKG9wdHMubWFzaywgb3B0cy5tYXNrLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzSW5wdXRFdmVudFN1cHBvcnRlZChldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLCBldk5hbWUgPSBcIm9uXCIgKyBldmVudE5hbWUsIGlzU3VwcG9ydGVkID0gZXZOYW1lIGluIGVsO1xuICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZXZOYW1lLCBcInJldHVybjtcIik7XG4gICAgICAgICAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbFtldk5hbWVdID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWwgPSBudWxsO1xuICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hc2tTY29wZShhY3Rpb25PYmosIG1hc2tzZXQsIG9wdHMpIHtcbiAgICAgICAgbWFza3NldCA9IG1hc2tzZXQgfHwgdGhpcy5tYXNrc2V0O1xuICAgICAgICBvcHRzID0gb3B0cyB8fCB0aGlzLm9wdHM7XG4gICAgICAgIHZhciBpbnB1dG1hc2sgPSB0aGlzLCBlbCA9IHRoaXMuZWwsIGlzUlRMID0gdGhpcy5pc1JUTCwgdW5kb1ZhbHVlLCAkZWwsIHNraXBLZXlQcmVzc0V2ZW50ID0gZmFsc2UsIHNraXBJbnB1dEV2ZW50ID0gZmFsc2UsIGlnbm9yYWJsZSA9IGZhbHNlLCBtYXhMZW5ndGgsIG1vdXNlRW50ZXIgPSBmYWxzZSwgY29sb3JNYXNrLCBvcmlnaW5hbFBsYWNlaG9sZGVyO1xuICAgICAgICB2YXIgZ2V0TWFza1RlbXBsYXRlID0gZnVuY3Rpb24oYmFzZU9uSW5wdXQsIG1pbmltYWxQb3MsIGluY2x1ZGVNb2RlLCBub0ppdCwgY2xlYXJPcHRpb25hbFRhaWwpIHtcbiAgICAgICAgICAgIHZhciBncmVlZHkgPSBvcHRzLmdyZWVkeTtcbiAgICAgICAgICAgIGlmIChjbGVhck9wdGlvbmFsVGFpbCkgb3B0cy5ncmVlZHkgPSBmYWxzZTtcbiAgICAgICAgICAgIG1pbmltYWxQb3MgPSBtaW5pbWFsUG9zIHx8IDA7XG4gICAgICAgICAgICB2YXIgbWFza1RlbXBsYXRlID0gW10sIG5keEludGx6ciwgcG9zID0gMCwgdGVzdCwgdGVzdFBvcywgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoYmFzZU9uSW5wdXQgPT09IHRydWUgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGNsZWFyT3B0aW9uYWxUYWlsICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLm9wdGlvbmFsaXR5ID09PSB0cnVlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MgKyAxXSA9PT0gdW5kZWZpbmVkICYmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5nZW5lcmF0ZWRJbnB1dCA9PT0gdHJ1ZSB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCA9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgJiYgcG9zID4gMCkgPyBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgcG9zIC0gMSkpIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZU1vZGUgPT09IHRydWUgPyB0ZXN0UG9zLmlucHV0IDogaW5jbHVkZU1vZGUgPT09IGZhbHNlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaml0TWFza2luZyA9IG5vSml0ID09PSB0cnVlID8gZmFsc2UgOiBvcHRzLmppdE1hc2tpbmcgIT09IGZhbHNlID8gb3B0cy5qaXRNYXNraW5nIDogdGVzdC5qaXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqaXRNYXNraW5nID09PSBmYWxzZSB8fCBqaXRNYXNraW5nID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGppdE1hc2tpbmcgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUoaml0TWFza2luZykgJiYgaml0TWFza2luZyA+IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZU1vZGUgPT09IGZhbHNlID8gdGVzdC5uYXRpdmVEZWYgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID09PSBcImF1dG9cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdC5uZXdCbG9ja01hcmtlciAmJiB0ZXN0LmZuICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmtlZXBTdGF0aWMgPSBwb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgfSB3aGlsZSAoKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHBvcyA8IG1heExlbmd0aCkgJiYgKHRlc3QuZm4gIT09IG51bGwgfHwgdGVzdC5kZWYgIT09IFwiXCIpIHx8IG1pbmltYWxQb3MgPiBwb3MpO1xuICAgICAgICAgICAgaWYgKG1hc2tUZW1wbGF0ZVttYXNrVGVtcGxhdGUubGVuZ3RoIC0gMV0gPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU1vZGUgIT09IGZhbHNlIHx8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID0gcG9zIC0gMTtcbiAgICAgICAgICAgIG9wdHMuZ3JlZWR5ID0gZ3JlZWR5O1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tUZW1wbGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWFza1NldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXNrc2V0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0TWFza1NldChzb2Z0KSB7XG4gICAgICAgICAgICB2YXIgbWFza3NldCA9IGdldE1hc2tTZXQoKTtcbiAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHNvZnQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBtYXNrc2V0LnZhbGlkUG9zaXRpb25zID0ge307XG4gICAgICAgICAgICAgICAgbWFza3NldC5wID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbG9zZXN0VG8sIHN0cmljdCwgdmFsaWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBiZWZvcmUgPSAtMSwgYWZ0ZXIgPSAtMSwgdmFsaWRzID0gdmFsaWRQb3NpdGlvbnMgfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xuICAgICAgICAgICAgaWYgKGNsb3Nlc3RUbyA9PT0gdW5kZWZpbmVkKSBjbG9zZXN0VG8gPSAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIHBvc05keCBpbiB2YWxpZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHNOZHggPSBwYXJzZUludChwb3NOZHgpO1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZHNbcHNOZHhdICYmIChzdHJpY3QgfHwgdmFsaWRzW3BzTmR4XS5nZW5lcmF0ZWRJbnB1dCAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBzTmR4IDw9IGNsb3Nlc3RUbykgYmVmb3JlID0gcHNOZHg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwc05keCA+PSBjbG9zZXN0VG8pIGFmdGVyID0gcHNOZHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJlZm9yZSA9PT0gLTEgfHwgYmVmb3JlID09IGNsb3Nlc3RUbyA/IGFmdGVyIDogYWZ0ZXIgPT0gLTEgPyBiZWZvcmUgOiBjbG9zZXN0VG8gLSBiZWZvcmUgPCBhZnRlciAtIGNsb3Nlc3RUbyA/IGJlZm9yZSA6IGFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldERlY2lzaW9uVGFrZXIodHN0KSB7XG4gICAgICAgICAgICB2YXIgZGVjaXNpb25UYWtlciA9IHRzdC5sb2NhdG9yW3RzdC5hbHRlcm5hdGlvbl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlY2lzaW9uVGFrZXIgPT0gXCJzdHJpbmdcIiAmJiBkZWNpc2lvblRha2VyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBkZWNpc2lvblRha2VyID0gZGVjaXNpb25UYWtlci5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjaXNpb25UYWtlciAhPT0gdW5kZWZpbmVkID8gZGVjaXNpb25UYWtlci50b1N0cmluZygpIDogXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRMb2NhdG9yKHRzdCwgYWxpZ24pIHtcbiAgICAgICAgICAgIHZhciBsb2NhdG9yID0gKHRzdC5hbHRlcm5hdGlvbiAhPSB1bmRlZmluZWQgPyB0c3QubWxvY1tnZXREZWNpc2lvblRha2VyKHRzdCldIDogdHN0LmxvY2F0b3IpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICBpZiAobG9jYXRvciAhPT0gXCJcIikgd2hpbGUgKGxvY2F0b3IubGVuZ3RoIDwgYWxpZ24pIGxvY2F0b3IgKz0gXCIwXCI7XG4gICAgICAgICAgICByZXR1cm4gbG9jYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCB0ZXN0cykge1xuICAgICAgICAgICAgcG9zID0gcG9zID4gMCA/IHBvcyAtIDEgOiAwO1xuICAgICAgICAgICAgdmFyIGFsdFRlc3QgPSBnZXRUZXN0KHBvcyksIHRhcmdldExvY2F0b3IgPSBnZXRMb2NhdG9yKGFsdFRlc3QpLCB0c3RMb2NhdG9yLCBjbG9zZXN0LCBiZXN0TWF0Y2g7XG4gICAgICAgICAgICBmb3IgKHZhciBuZHggPSAwOyBuZHggPCB0ZXN0cy5sZW5ndGg7IG5keCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRzdCA9IHRlc3RzW25keF07XG4gICAgICAgICAgICAgICAgdHN0TG9jYXRvciA9IGdldExvY2F0b3IodHN0LCB0YXJnZXRMb2NhdG9yLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnModHN0TG9jYXRvciAtIHRhcmdldExvY2F0b3IpO1xuICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0ID09PSB1bmRlZmluZWQgfHwgdHN0TG9jYXRvciAhPT0gXCJcIiAmJiBkaXN0YW5jZSA8IGNsb3Nlc3QgfHwgYmVzdE1hdGNoICYmICFvcHRzLmdyZWVkeSAmJiBiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxpdHkgJiYgYmVzdE1hdGNoLm1hdGNoLm5ld0Jsb2NrTWFya2VyID09PSBcIm1hc3RlclwiICYmICghdHN0Lm1hdGNoLm9wdGlvbmFsaXR5IHx8ICF0c3QubWF0Y2gubmV3QmxvY2tNYXJrZXIpIHx8IGJlc3RNYXRjaCAmJiBiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmICF0c3QubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gdHN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiZXN0TWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCB0c3RQcykge1xuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdIHx8IGRldGVybWluZVRlc3RUZW1wbGF0ZShwb3MsIGdldFRlc3RzKHBvcywgbmR4SW50bHpyID8gbmR4SW50bHpyLnNsaWNlKCkgOiBuZHhJbnRsenIsIHRzdFBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdChwb3MsIHRlc3RzKSB7XG4gICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKHRlc3RzIHx8IGdldFRlc3RzKHBvcykpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvcywgZGVmKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWQgPSBmYWxzZSwgdGVzdHMgPSBnZXRUZXN0cyhwb3MpO1xuICAgICAgICAgICAgZm9yICh2YXIgdG5keCA9IDA7IHRuZHggPCB0ZXN0cy5sZW5ndGg7IHRuZHgrKykge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0c1t0bmR4XS5tYXRjaCAmJiB0ZXN0c1t0bmR4XS5tYXRjaC5kZWYgPT09IGRlZikge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgdHN0UHMpIHtcbiAgICAgICAgICAgIHZhciBtYXNrVG9rZW5zID0gZ2V0TWFza1NldCgpLm1hc2tUb2tlbiwgdGVzdFBvcyA9IG5keEludGx6ciA/IHRzdFBzIDogMCwgbmR4SW5pdGlhbGl6ZXIgPSBuZHhJbnRsenIgPyBuZHhJbnRsenIuc2xpY2UoKSA6IFsgMCBdLCBtYXRjaGVzID0gW10sIGluc2VydFN0b3AgPSBmYWxzZSwgbGF0ZXN0TWF0Y2gsIGNhY2hlRGVwZW5kZW5jeSA9IG5keEludGx6ciA/IG5keEludGx6ci5qb2luKFwiXCIpIDogXCJcIjtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbiwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlTWF0Y2gobWF0Y2gsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgdG9rZW5Hcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0TWF0Y2ggPSAkLmluQXJyYXkobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlcykgPT09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2godG9rZW5Hcm91cC5tYXRjaGVzLCBmdW5jdGlvbihuZHgsIG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pc1F1YW50aWZpZXIgPT09IHRydWUpIGZpcnN0TWF0Y2ggPSBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlc1tuZHggLSAxXSk7IGVsc2UgaWYgKG1hdGNoLmhhc093blByb3BlcnR5KFwibWF0Y2hlc1wiKSkgZmlyc3RNYXRjaCA9IGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgbWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RNYXRjaCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcywgYWx0ZXJuYXRlTmR4LCB0YXJnZXRBbHRlcm5hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaCwgaW5kZXhQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gfHwgWyBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSBdLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxtbnQubWxvY1thbHRlcm5hdGVOZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2ggPSBsbW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGlvbiA9IHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGxtbnQuYWx0ZXJuYXRpb24sIG5keFBvcyA9IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gIT09IHVuZGVmaW5lZCA/IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdGVybmF0ZU5keCkgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpbmRleFBvcyA9PT0gdW5kZWZpbmVkIHx8IG5keFBvcyA8IGluZGV4UG9zKSAmJiBuZHhQb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2ggPSBsbW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhQb3MgPSBuZHhQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZXN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVzdE1hdGNoQWx0SW5kZXggPSBiZXN0TWF0Y2gubG9jYXRvcltiZXN0TWF0Y2guYWx0ZXJuYXRpb25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdG9yID0gYmVzdE1hdGNoLm1sb2NbYWx0ZXJuYXRlTmR4XSB8fCBiZXN0TWF0Y2gubWxvY1tiZXN0TWF0Y2hBbHRJbmRleF0gfHwgYmVzdE1hdGNoLmxvY2F0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3Iuc2xpY2UoKHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyB0YXJnZXRBbHRlcm5hdGlvbiA6IGJlc3RNYXRjaC5hbHRlcm5hdGlvbikgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldEFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyByZXNvbHZlTmR4SW5pdGlhbGl6ZXIocG9zLCBhbHRlcm5hdGVOZHgpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzU3Vic2V0T2Yoc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGFuZChwYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGFuZGVkID0gW10sIHN0YXJ0LCBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXR0ZXJuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0dGVybi5jaGFyQXQoaSkgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBwYXR0ZXJuLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCsrc3RhcnQgPCBlbmQpIGV4cGFuZGVkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShzdGFydCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBwYXR0ZXJuLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZC5wdXNoKHBhdHRlcm4uY2hhckF0KGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kZWQuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJlZ2V4ICYmIHNvdXJjZS5tYXRjaC5mbiAhPT0gbnVsbCAmJiB0YXJnZXQubWF0Y2guZm4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kKHRhcmdldC5tYXRjaC5kZWYucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcIikpLmluZGV4T2YoZXhwYW5kKHNvdXJjZS5tYXRjaC5kZWYucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcIikpKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlLm1hdGNoLmRlZiA9PT0gdGFyZ2V0Lm1hdGNoLm5hdGl2ZURlZjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdGF0aWNDYW5NYXRjaERlZmluaXRpb24oc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbG9jID0gc291cmNlLmxvY2F0b3Iuc2xpY2Uoc291cmNlLmFsdGVybmF0aW9uKS5qb2luKFwiXCIpLCB0bG9jID0gdGFyZ2V0LmxvY2F0b3Iuc2xpY2UodGFyZ2V0LmFsdGVybmF0aW9uKS5qb2luKFwiXCIpLCBjYW5NYXRjaCA9IHNsb2MgPT0gdGxvYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbk1hdGNoID0gY2FuTWF0Y2ggJiYgc291cmNlLm1hdGNoLmZuID09PSBudWxsICYmIHRhcmdldC5tYXRjaC5mbiAhPT0gbnVsbCA/IHRhcmdldC5tYXRjaC5mbi50ZXN0KHNvdXJjZS5tYXRjaC5kZWYsIGdldE1hc2tTZXQoKSwgcG9zLCBmYWxzZSwgb3B0cywgZmFsc2UpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FuTWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0TWVyZ2VMb2NhdG9ycyh0YXJnZXRNYXRjaCwgYWx0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXRjaCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldE1hdGNoLmFsdGVybmF0aW9uID09PSBhbHRNYXRjaC5hbHRlcm5hdGlvbiAmJiB0YXJnZXRNYXRjaC5sb2NhdG9yW3RhcmdldE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YoYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1hdGNoLm1sb2MgPSB0YXJnZXRNYXRjaC5tbG9jIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NOZHggPSB0YXJnZXRNYXRjaC5sb2NhdG9yW3RhcmdldE1hdGNoLmFsdGVybmF0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jTmR4ID09PSB1bmRlZmluZWQpIHRhcmdldE1hdGNoLmFsdGVybmF0aW9uID0gdW5kZWZpbmVkOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2NOZHggPT09IFwic3RyaW5nXCIpIGxvY05keCA9IGxvY05keC5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNYXRjaC5tbG9jW2xvY05keF0gPT09IHVuZGVmaW5lZCkgdGFyZ2V0TWF0Y2gubWxvY1tsb2NOZHhdID0gdGFyZ2V0TWF0Y2gubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4IGluIGFsdE1hdGNoLm1sb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5keCA9PT0gXCJzdHJpbmdcIikgbmR4ID0gbmR4LnNwbGl0KFwiLFwiKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWF0Y2gubWxvY1tuZHhdID09PSB1bmRlZmluZWQpIHRhcmdldE1hdGNoLm1sb2NbbmR4XSA9IGFsdE1hdGNoLm1sb2NbbmR4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1hdGNoLmxvY2F0b3JbdGFyZ2V0TWF0Y2guYWx0ZXJuYXRpb25dID0gT2JqZWN0LmtleXModGFyZ2V0TWF0Y2gubWxvYykuam9pbihcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0UG9zID4gNTAwICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiSW5wdXRtYXNrOiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIG1hc2sgZGVmaW5pdGlvbiBvciBpbiB0aGUgY29kZS4gQ3JlYXRlIGFuIGlzc3VlIG9uIGdpdGh1YiB3aXRoIGFuIGV4YW1wbGUgb2YgdGhlIG1hc2sgeW91IGFyZSB1c2luZy4gXCIgKyBnZXRNYXNrU2V0KCkubWFzaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA9PT0gcG9zICYmIG1hdGNoLm1hdGNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRvcjogbG9vcE5keC5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Q6IGNhY2hlRGVwZW5kZW5jeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtbG9jOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5tYXRjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pc0dyb3VwICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgKyAxXSwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uYWxUb2tlbiA9IG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXRjaGVzLCBmdW5jdGlvbihuZHgsIG10Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10Y2gubWF0Y2gub3B0aW9uYWxpdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0TWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWFudGlmaWVyUmVjdXJzZSA9PT0gdW5kZWZpbmVkICYmIGlzRmlyc3RNYXRjaChsYXRlc3RNYXRjaCwgb3B0aW9uYWxUb2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNBbHRlcm5hdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0ZVRva2VuID0gbWF0Y2gsIG1hbHRlcm5hdGVNYXRjaGVzID0gW10sIG1hbHRNYXRjaGVzLCBjdXJyZW50TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoKSwgbG9vcE5keENudCA9IGxvb3BOZHgubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRJbmRleCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdEluZGV4ID09PSAtMSB8fCB0eXBlb2YgYWx0SW5kZXggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3MgPSB0ZXN0UG9zLCBuZHhJbml0aWFsaXplckNsb25lID0gbmR4SW5pdGlhbGl6ZXIuc2xpY2UoKSwgYWx0SW5kZXhBcnIgPSBbXSwgYW1uZHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWx0SW5kZXggPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0SW5kZXhBcnIgPSBhbHRJbmRleC5zcGxpdChcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGFtbmR4ID0gMDsgYW1uZHggPCBhbHRlcm5hdGVUb2tlbi5tYXRjaGVzLmxlbmd0aDsgYW1uZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyLnB1c2goYW1uZHgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0SW5kZXhBcnJDbG9uZSA9IGFsdEluZGV4QXJyLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZWwgPSBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXS5sZW5ndGg7IGkgPCBlbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0SW5kZXhBcnIuc3BsaWNlKGFsdEluZGV4QXJyLmluZGV4T2YoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW3Bvc11baV0udG9TdHJpbmcoKSksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdEluZGV4QXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1twb3NdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyID0gYWx0SW5kZXhBcnJDbG9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID09PSB0cnVlIHx8IGlzRmluaXRlKHBhcnNlSW50KG9wdHMua2VlcFN0YXRpYykpICYmIGN1cnJlbnRQb3MgPj0gb3B0cy5rZWVwU3RhdGljKSBhbHRJbmRleEFyciA9IGFsdEluZGV4QXJyLnNsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5NYXRjaGVkQWx0ZXJuYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4ID0gMDsgbmR4IDwgYWx0SW5kZXhBcnIubGVuZ3RoOyBuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1uZHggPSBwYXJzZUludChhbHRJbmRleEFycltuZHhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEluaXRpYWxpemVyID0gdHlwZW9mIGFsdEluZGV4ID09PSBcInN0cmluZ1wiID8gcmVzb2x2ZU5keEluaXRpYWxpemVyKHRlc3RQb3MsIGFtbmR4LCBsb29wTmR4Q250KSB8fCBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCkgOiBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbW5keF0gJiYgaGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbW5keF0sIFsgYW1uZHggXS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKSkgbWF0Y2ggPSB0cnVlOyBlbHNlIGlmIChuZHggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bk1hdGNoZWRBbHRlcm5hdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBjdXJyZW50UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4MSA9IDA7IG5keDEgPCBtYWx0TWF0Y2hlcy5sZW5ndGg7IG5keDErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXRjaCA9IG1hbHRNYXRjaGVzW25keDFdLCBkcm9wTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaC5tYXRjaC5qaXQgPSBhbHRNYXRjaC5tYXRjaC5qaXQgfHwgdW5NYXRjaGVkQWx0ZXJuYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWF0Y2guYWx0ZXJuYXRpb24gPSBhbHRNYXRjaC5hbHRlcm5hdGlvbiB8fCBsb29wTmR4Q250O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDIgPSAwOyBuZHgyIDwgbWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoOyBuZHgyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hdGNoMiA9IG1hbHRlcm5hdGVNYXRjaGVzW25keDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFsdEluZGV4ICE9PSBcInN0cmluZ1wiIHx8IGFsdE1hdGNoLmFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgJiYgJC5pbkFycmF5KGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksIGFsdEluZGV4QXJyKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXRjaC5tYXRjaC5uYXRpdmVEZWYgPT09IGFsdE1hdGNoMi5tYXRjaC5uYXRpdmVEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3Vic2V0T2YoYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0TWVyZ2VMb2NhdG9ycyhhbHRNYXRjaCwgYWx0TWF0Y2gyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0ZXJuYXRlTWF0Y2hlcy5zcGxpY2UobWFsdGVybmF0ZU1hdGNoZXMuaW5kZXhPZihhbHRNYXRjaDIpLCAwLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N1YnNldE9mKGFsdE1hdGNoMiwgYWx0TWF0Y2gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWVyZ2VMb2NhdG9ycyhhbHRNYXRjaDIsIGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGljQ2FuTWF0Y2hEZWZpbml0aW9uKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMCwgYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRyb3BNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWx0ZXJuYXRlTWF0Y2hlcy5wdXNoKGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IGN1cnJlbnRNYXRjaGVzLmNvbmNhdChtYWx0ZXJuYXRlTWF0Y2hlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSBtYXRjaGVzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW5pdGlhbGl6ZXIgPSBuZHhJbml0aWFsaXplckNsb25lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG1hdGNoID0gaGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbHRJbmRleF0gfHwgbWFza1Rva2VuLm1hdGNoZXNbYWx0SW5kZXhdLCBbIGFsdEluZGV4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNRdWFudGlmaWVyICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSBtYXNrVG9rZW4ubWF0Y2hlc1skLmluQXJyYXkobWF0Y2gsIG1hc2tUb2tlbi5tYXRjaGVzKSAtIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF0ID0gbWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcW5keCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogMDsgcW5keCA8IChpc05hTihxdC5xdWFudGlmaWVyLm1heCkgPyBxbmR4ICsgMSA6IHF0LnF1YW50aWZpZXIubWF4KSAmJiB0ZXN0UG9zIDw9IHBvczsgcW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbkdyb3VwID0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KHF0LCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBoYW5kbGVNYXRjaCh0b2tlbkdyb3VwLCBbIHFuZHggXS5jb25jYXQobG9vcE5keCksIHRva2VuR3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0TWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyID0gcW5keCA+PSBxdC5xdWFudGlmaWVyLm1pbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoLmppdCA9IChxbmR4IHx8IDEpICogdG9rZW5Hcm91cC5tYXRjaGVzLmluZGV4T2YobGF0ZXN0TWF0Y2gpID49IHF0LnF1YW50aWZpZXIuaml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0U3RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaC5qaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuaml0T2Zmc2V0W3Bvc10gPSB0b2tlbkdyb3VwLm1hdGNoZXMuaW5kZXhPZihsYXRlc3RNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXRjaCwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHRuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHRuZHggPCBtYXNrVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IHRuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbdG5keF0uaXNRdWFudGlmaWVyICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBoYW5kbGVNYXRjaChtYXNrVG9rZW4ubWF0Y2hlc1t0bmR4XSwgWyB0bmR4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgdGVzdFBvcyA9PT0gcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZXN0UG9zID4gcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtZXJnZUxvY2F0b3JzKHBvcywgdGVzdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRvciA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICghJC5pc0FycmF5KHRlc3RzKSkgdGVzdHMgPSBbIHRlc3RzIF07XG4gICAgICAgICAgICAgICAgaWYgKHRlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzWzBdLmFsdGVybmF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0b3IgPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCB0ZXN0cy5zbGljZSgpKS5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYXRvci5sZW5ndGggPT09IDApIGxvY2F0b3IgPSB0ZXN0c1swXS5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2godGVzdHMsIGZ1bmN0aW9uKG5keCwgdHN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRzdC5kZWYgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0b3IubGVuZ3RoID09PSAwKSBsb2NhdG9yID0gdHN0LmxvY2F0b3Iuc2xpY2UoKTsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2F0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHN0LmxvY2F0b3JbaV0gJiYgbG9jYXRvcltpXS50b1N0cmluZygpLmluZGV4T2YodHN0LmxvY2F0b3JbaV0pID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yW2ldICs9IFwiLFwiICsgdHN0LmxvY2F0b3JbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobmR4SW50bHpyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUG9zID0gcG9zIC0gMSwgdGVzdDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCh0ZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ByZXZpb3VzUG9zXSB8fCBnZXRNYXNrU2V0KCkudGVzdHNbcHJldmlvdXNQb3NdKSA9PT0gdW5kZWZpbmVkICYmIHByZXZpb3VzUG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUG9zLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3QgIT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c1BvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZHhJbml0aWFsaXplciA9IG1lcmdlTG9jYXRvcnMocHJldmlvdXNQb3MsIHRlc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVEZXBlbmRlbmN5ID0gbmR4SW5pdGlhbGl6ZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwcmV2aW91c1BvcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gJiYgZ2V0TWFza1NldCgpLnRlc3RzW3Bvc11bMF0uY2QgPT09IGNhY2hlRGVwZW5kZW5jeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnRlc3RzW3Bvc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIG10bmR4ID0gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKTsgbXRuZHggPCBtYXNrVG9rZW5zLmxlbmd0aDsgbXRuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXNrVG9rZW5zW210bmR4XSwgbmR4SW5pdGlhbGl6ZXIsIFsgbXRuZHggXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiB0ZXN0UG9zID09PSBwb3MgfHwgdGVzdFBvcyA+IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDAgfHwgaW5zZXJ0U3RvcCkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IFtdLFxuICAgICAgICAgICAgICAgICAgICBtbG9jOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgY2Q6IGNhY2hlRGVwZW5kZW5jeVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5keEludGx6ciAhPT0gdW5kZWZpbmVkICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIFtdLCBtYXRjaGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdID0gJC5leHRlbmQodHJ1ZSwgW10sIG1hdGNoZXMpO1xuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlclRlbXBsYXRlKCkge1xuICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5fYnVmZmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuX2J1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZShmYWxzZSwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5idWZmZXIgPT09IHVuZGVmaW5lZCkgZ2V0TWFza1NldCgpLmJ1ZmZlciA9IGdldE1hc2tTZXQoKS5fYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLl9idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyKG5vQ2FjaGUpIHtcbiAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuYnVmZmVyID09PSB1bmRlZmluZWQgfHwgbm9DYWNoZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5fYnVmZmVyID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5fYnVmZmVyID0gZ2V0TWFza1NldCgpLmJ1ZmZlci5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVmcmVzaEZyb21CdWZmZXIoc3RhcnQsIGVuZCwgYnVmZmVyKSB7XG4gICAgICAgICAgICB2YXIgaSwgcDtcbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICBlbmQgPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCA9IHN0YXJ0O1xuICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyW2ldICE9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbFJlc3VsdCA9IGlzVmFsaWQocCwgYnVmZmVyW2ldLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB2YWxSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHZhbFJlc3VsdC5jYXJldCA6IHZhbFJlc3VsdC5wb3MgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhc2luZyhlbGVtLCB0ZXN0LCBwb3MpIHtcbiAgICAgICAgICAgIHN3aXRjaCAob3B0cy5jYXNpbmcgfHwgdGVzdC5jYXNpbmcpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInVwcGVyXCI6XG4gICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwibG93ZXJcIjpcbiAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgICAgICAgICAgIHZhciBwb3NCZWZvcmUgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCB8fCBwb3NCZWZvcmUgJiYgcG9zQmVmb3JlLmlucHV0ID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKElucHV0bWFzay5rZXlDb2RlLlNQQUNFKSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmNhc2luZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IG9wdHMuY2FzaW5nLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQWx0ZXJuYXRpb25NYXRjaChhbHRBcnIxLCBhbHRBcnIyLCBuYSkge1xuICAgICAgICAgICAgdmFyIGFsdEFyckMgPSBvcHRzLmdyZWVkeSA/IGFsdEFycjIgOiBhbHRBcnIyLnNsaWNlKDAsIDEpLCBpc01hdGNoID0gZmFsc2UsIG5hQXJyID0gbmEgIT09IHVuZGVmaW5lZCA/IG5hLnNwbGl0KFwiLFwiKSA6IFtdLCBuYU5keDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoKG5hTmR4ID0gYWx0QXJyMS5pbmRleE9mKG5hQXJyW2ldKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdEFycjEuc3BsaWNlKG5hTmR4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBhbG5keCA9IDA7IGFsbmR4IDwgYWx0QXJyMS5sZW5ndGg7IGFsbmR4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGFsdEFycjFbYWxuZHhdLCBhbHRBcnJDKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc01hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFsdGVybmF0ZShwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCByQWx0UG9zKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQc0Nsb25lID0gJC5leHRlbmQodHJ1ZSwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGxhc3RBbHQsIGFsdGVybmF0aW9uLCBpc1ZhbGlkUnNsdCA9IGZhbHNlLCBhbHRQb3MsIHByZXZBbHRQb3MsIGksIHZhbGlkUG9zLCBkZWNpc2lvblBvcywgbEFsdFBvcyA9IHJBbHRQb3MgIT09IHVuZGVmaW5lZCA/IHJBbHRQb3MgOiBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xuICAgICAgICAgICAgaWYgKGxBbHRQb3MgPT09IC0xICYmIHJBbHRQb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxhc3RBbHQgPSAwO1xuICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBnZXRUZXN0KGxhc3RBbHQpO1xuICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uID0gcHJldkFsdFBvcy5hbHRlcm5hdGlvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICg7bEFsdFBvcyA+PSAwOyBsQWx0UG9zLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWx0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2xBbHRQb3NdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWx0UG9zICYmIGFsdFBvcy5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldkFsdFBvcyAmJiBwcmV2QWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSAhPT0gYWx0UG9zLmxvY2F0b3JbYWx0UG9zLmFsdGVybmF0aW9uXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFsdCA9IGxBbHRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbiA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XS5hbHRlcm5hdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBhbHRQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlY2lzaW9uUG9zID0gcGFyc2VJbnQobGFzdEFsdCk7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSA9IGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10gfHwgW107XG4gICAgICAgICAgICAgICAgaWYgKHBvcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdLnB1c2goZ2V0RGVjaXNpb25UYWtlcihwcmV2QWx0UG9zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWxpZElucHV0c0Nsb25lID0gW10sIHN0YXRpY0lucHV0c0JlZm9yZVBvcyA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gZGVjaXNpb25Qb3M7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHRydWUpICsgMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRQb3MgJiYgdmFsaWRQb3MuZ2VuZXJhdGVkSW5wdXQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkSW5wdXRzQ2xvbmUucHVzaCh2YWxpZFBvcy5pbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IHBvcykgc3RhdGljSW5wdXRzQmVmb3JlUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdICYmIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10ubGVuZ3RoIDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc09mZnNldCA9IHN0YXRpY0lucHV0c0JlZm9yZVBvcyAqIC0xLCB2YWxpZElucHV0cyA9IHZhbGlkSW5wdXRzQ2xvbmUuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnRlc3RzW2RlY2lzaW9uUG9zXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkUnNsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh2YWxpZElucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB2YWxpZElucHV0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSkgKyAxLCBpbnB1dCwgZmFsc2UsIGZyb21TZXRWYWxpZCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRSc2x0ICYmIGMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcykgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gZGVjaXNpb25Qb3M7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICsgMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWxpZFBvcyA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkUG9zLm1hdGNoLmZuID09IG51bGwpICYmIGkgPCBwb3MgKyBwb3NPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zT2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gcG9zICsgcG9zT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKHBvcyA+IHRhcmdldEx2cCA/IHRhcmdldEx2cCA6IHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZFJzbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkFsdFBvcyA9IGdldFRlc3QoZGVjaXNpb25Qb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHZhbGlkUHNDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNpc2lvblRha2VyID0gZ2V0RGVjaXNpb25UYWtlcihwcmV2QWx0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5pbmRleE9mKGRlY2lzaW9uVGFrZXIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkUnNsdCA9IGFsdGVybmF0ZShwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCBkZWNpc2lvblBvcyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGRlY2lzaW9uVGFrZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKSArIDE7IGkrKykgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZGVjaXNpb25Qb3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gaXNWYWxpZFJzbHQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNWYWxpZChwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCBmcm9tQWx0ZXJuYXRlLCB2YWxpZGF0ZU9ubHkpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzU2VsZWN0aW9uKHBvc09iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1JUTCA/IHBvc09iai5iZWdpbiAtIHBvc09iai5lbmQgPiAxIHx8IHBvc09iai5iZWdpbiAtIHBvc09iai5lbmQgPT09IDEgOiBwb3NPYmouZW5kIC0gcG9zT2JqLmJlZ2luID4gMSB8fCBwb3NPYmouZW5kIC0gcG9zT2JqLmJlZ2luID09PSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyaWN0ID0gc3RyaWN0ID09PSB0cnVlO1xuICAgICAgICAgICAgdmFyIG1hc2tQb3MgPSBwb3M7XG4gICAgICAgICAgICBpZiAocG9zLmJlZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXNrUG9zID0gaXNSVEwgPyBwb3MuZW5kIDogcG9zLmJlZ2luO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX2lzVmFsaWQocG9zaXRpb24sIGMsIHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHZhciByc2x0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgJC5lYWNoKGdldFRlc3RzKHBvc2l0aW9uKSwgZnVuY3Rpb24obmR4LCB0c3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QgPSB0c3QubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIGdldEJ1ZmZlcih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcnNsdCA9IHRlc3QuZm4gIT0gbnVsbCA/IHRlc3QuZm4udGVzdChjLCBnZXRNYXNrU2V0KCksIHBvc2l0aW9uLCBzdHJpY3QsIG9wdHMsIGlzU2VsZWN0aW9uKHBvcykpIDogKGMgPT09IHRlc3QuZGVmIHx8IGMgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikgJiYgdGVzdC5kZWYgIT09IFwiXCIgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBnZXRQbGFjZWhvbGRlcihwb3NpdGlvbiwgdGVzdCwgdHJ1ZSkgfHwgdGVzdC5kZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHJzbHQuYyAhPT0gdW5kZWZpbmVkID8gcnNsdC5jIDogYywgdmFsaWRhdGVkUG9zID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbSA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmIHRlc3QuZm4gPT09IG51bGwgPyBnZXRQbGFjZWhvbGRlcihwb3NpdGlvbiwgdGVzdCwgdHJ1ZSkgfHwgdGVzdC5kZWYgOiBlbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQucmVtb3ZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheShyc2x0LnJlbW92ZSkpIHJzbHQucmVtb3ZlID0gWyByc2x0LnJlbW92ZSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChyc2x0LnJlbW92ZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgLSBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZU1hc2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxtbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGxtbnQgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQuaW5zZXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheShyc2x0Lmluc2VydCkpIHJzbHQuaW5zZXJ0ID0gWyByc2x0Lmluc2VydCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChyc2x0Lmluc2VydC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZChsbW50LnBvcywgbG1udC5jLCB0cnVlLCBmcm9tU2V0VmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzbHQgIT09IHRydWUgJiYgcnNsdC5wb3MgIT09IHVuZGVmaW5lZCAmJiByc2x0LnBvcyAhPT0gcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZWRQb3MgPSByc2x0LnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSB0cnVlICYmIHJzbHQucG9zID09PSB1bmRlZmluZWQgJiYgcnNsdC5jID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJldmFsaWRhdGVNYXNrKHBvcywgJC5leHRlbmQoe30sIHRzdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBjYXNpbmcoZWxlbSwgdGVzdCwgdmFsaWRhdGVkUG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZyb21TZXRWYWxpZCwgdmFsaWRhdGVkUG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzbHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByc2x0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRydWUsIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQodHJ1ZSwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyk7XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucHJlVmFsaWRhdGlvbikgJiYgIXN0cmljdCAmJiBmcm9tU2V0VmFsaWQgIT09IHRydWUgJiYgdmFsaWRhdGVPbmx5ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5wcmVWYWxpZGF0aW9uKGdldEJ1ZmZlcigpLCBtYXNrUG9zLCBjLCBpc1NlbGVjdGlvbihwb3MpLCBvcHRzLCBnZXRNYXNrU2V0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRyYWNrYmFja1Bvc2l0aW9ucyh1bmRlZmluZWQsIG1hc2tQb3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBtYXNrUG9zIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9pc1ZhbGlkKG1hc2tQb3MsIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoIXN0cmljdCB8fCBmcm9tU2V0VmFsaWQgPT09IHRydWUpICYmIHJlc3VsdCA9PT0gZmFsc2UgJiYgdmFsaWRhdGVPbmx5ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvc1ZhbGlkID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW21hc2tQb3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3NWYWxpZCAmJiBjdXJyZW50UG9zVmFsaWQubWF0Y2guZm4gPT09IG51bGwgJiYgKGN1cnJlbnRQb3NWYWxpZC5tYXRjaC5kZWYgPT09IGMgfHwgYyA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHNlZWtOZXh0KG1hc2tQb3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChvcHRzLmluc2VydE1vZGUgfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3NlZWtOZXh0KG1hc2tQb3MpXSA9PT0gdW5kZWZpbmVkKSAmJiAoIWlzTWFzayhtYXNrUG9zLCB0cnVlKSB8fCBnZXRNYXNrU2V0KCkuaml0T2Zmc2V0W21hc2tQb3NdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmppdE9mZnNldFttYXNrUG9zXSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc2Vla05leHQobWFza1BvcyldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzVmFsaWQobWFza1BvcyArIGdldE1hc2tTZXQoKS5qaXRPZmZzZXRbbWFza1Bvc10sIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkgcmVzdWx0LmNhcmV0ID0gbWFza1BvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAodmFyIG5Qb3MgPSBtYXNrUG9zICsgMSwgc25Qb3MgPSBzZWVrTmV4dChtYXNrUG9zKTsgblBvcyA8PSBzblBvczsgblBvcysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfaXNWYWxpZChuUG9zLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2JhY2tQb3NpdGlvbnMobWFza1BvcywgcmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LnBvcyA6IG5Qb3MpIHx8IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrUG9zID0gblBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSAmJiBvcHRzLmtlZXBTdGF0aWMgIT09IGZhbHNlICYmIChvcHRzLnJlZ2V4ID09IG51bGwgfHwgaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkpICYmICFzdHJpY3QgJiYgZnJvbUFsdGVybmF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhbHRlcm5hdGUobWFza1BvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWFza1Bvc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5wb3N0VmFsaWRhdGlvbikgJiYgcmVzdWx0ICE9PSBmYWxzZSAmJiAhc3RyaWN0ICYmIGZyb21TZXRWYWxpZCAhPT0gdHJ1ZSAmJiB2YWxpZGF0ZU9ubHkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdFJlc3VsdCA9IG9wdHMucG9zdFZhbGlkYXRpb24oZ2V0QnVmZmVyKHRydWUpLCBwb3MuYmVnaW4gIT09IHVuZGVmaW5lZCA/IGlzUlRMID8gcG9zLmVuZCA6IHBvcy5iZWdpbiA6IHBvcywgcmVzdWx0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zdFJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N0UmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyICYmIHBvc3RSZXN1bHQuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHBvc3RSZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcihyZWZyZXNoID09PSB0cnVlID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCBwb3N0UmVzdWx0LmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcG9zdFJlc3VsdCA9PT0gdHJ1ZSA/IHJlc3VsdCA6IHBvc3RSZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQucG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucG9zID0gbWFza1BvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlIHx8IHZhbGlkYXRlT25seSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgcG9zaXRpb25zQ2xvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0cmFja2JhY2tQb3NpdGlvbnMob3JpZ2luYWxQb3MsIG5ld1BvcywgZmlsbE9ubHkpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICBpZiAob3JpZ2luYWxQb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZvciAob3JpZ2luYWxQb3MgPSBuZXdQb3MgLSAxOyBvcmlnaW5hbFBvcyA+IDA7IG9yaWdpbmFsUG9zLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tvcmlnaW5hbFBvc10pIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIHBzID0gb3JpZ2luYWxQb3M7IHBzIDwgbmV3UG9zOyBwcysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twc10gPT09IHVuZGVmaW5lZCAmJiAhaXNNYXNrKHBzLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdnAgPSBwcyA9PSAwID8gZ2V0VGVzdChwcykgOiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcHMgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwcykuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPT09IFwiXCIpIHRlc3RzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaCA9IGRldGVybWluZVRlc3RUZW1wbGF0ZShwcywgdGVzdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gJC5leHRlbmQoe30sIGJlc3RNYXRjaCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBnZXRQbGFjZWhvbGRlcihwcywgYmVzdE1hdGNoLm1hdGNoLCB0cnVlKSB8fCBiZXN0TWF0Y2gubWF0Y2guZGVmXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaC5nZW5lcmF0ZWRJbnB1dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXZhbGlkYXRlTWFzayhwcywgYmVzdE1hdGNoLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxsT25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdnBJbnB1dCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZXdQb3NdLmlucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZXdQb3NdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzVmFsaWQobmV3UG9zLCBjdnBJbnB1dCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJldmFsaWRhdGVNYXNrKHBvcywgdmFsaWRUZXN0LCBmcm9tU2V0VmFsaWQsIHZhbGlkYXRlZFBvcykge1xuICAgICAgICAgICAgZnVuY3Rpb24gSXNFbmNsb3NlZFN0YXRpYyhwb3MsIHZhbGlkcywgc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc01hdGNoID0gdmFsaWRzW3Bvc107XG4gICAgICAgICAgICAgICAgaWYgKHBvc01hdGNoICE9PSB1bmRlZmluZWQgJiYgKHBvc01hdGNoLm1hdGNoLmZuID09PSBudWxsICYmIHBvc01hdGNoLm1hdGNoLm9wdGlvbmFsaXR5ICE9PSB0cnVlIHx8IHBvc01hdGNoLmlucHV0ID09PSBvcHRzLnJhZGl4UG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2TWF0Y2ggPSBzZWxlY3Rpb24uYmVnaW4gPD0gcG9zIC0gMSA/IHZhbGlkc1twb3MgLSAxXSAmJiB2YWxpZHNbcG9zIC0gMV0ubWF0Y2guZm4gPT09IG51bGwgJiYgdmFsaWRzW3BvcyAtIDFdIDogdmFsaWRzW3BvcyAtIDFdLCBuZXh0TWF0Y2ggPSBzZWxlY3Rpb24uZW5kID4gcG9zICsgMSA/IHZhbGlkc1twb3MgKyAxXSAmJiB2YWxpZHNbcG9zICsgMV0ubWF0Y2guZm4gPT09IG51bGwgJiYgdmFsaWRzW3BvcyArIDFdIDogdmFsaWRzW3BvcyArIDFdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldk1hdGNoICYmIG5leHRNYXRjaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJlZ2luID0gcG9zLmJlZ2luICE9PSB1bmRlZmluZWQgPyBwb3MuYmVnaW4gOiBwb3MsIGVuZCA9IHBvcy5lbmQgIT09IHVuZGVmaW5lZCA/IHBvcy5lbmQgOiBwb3M7XG4gICAgICAgICAgICBpZiAocG9zLmJlZ2luID4gcG9zLmVuZCkge1xuICAgICAgICAgICAgICAgIGJlZ2luID0gcG9zLmVuZDtcbiAgICAgICAgICAgICAgICBlbmQgPSBwb3MuYmVnaW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWxpZGF0ZWRQb3MgPSB2YWxpZGF0ZWRQb3MgIT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlZFBvcyA6IGJlZ2luO1xuICAgICAgICAgICAgaWYgKGJlZ2luICE9PSBlbmQgfHwgb3B0cy5pbnNlcnRNb2RlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1t2YWxpZGF0ZWRQb3NdICE9PSB1bmRlZmluZWQgJiYgZnJvbVNldFZhbGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25zQ2xvbmUgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKSwgaTtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IGJlZ2luO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IGx2cDsgaSA+PSBiZWdpbjsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLm1hdGNoLm5hdGl2ZURlZiA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWxpZCA9IHRydWUsIGogPSB2YWxpZGF0ZWRQb3MsIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucywgbmVlZHNWYWxpZGF0aW9uID0gZmFsc2UsIHBvc01hdGNoID0gaiwgaSA9IGo7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkVGVzdCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB2YWxpZFRlc3QpO1xuICAgICAgICAgICAgICAgICAgICBwb3NNYXRjaCsrO1xuICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWdpbiA8IGVuZCkgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKDtpIDw9IGx2cDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gcG9zaXRpb25zQ2xvbmVbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICE9PSB1bmRlZmluZWQgJiYgKGkgPj0gZW5kIHx8IGkgPj0gYmVnaW4gJiYgdC5nZW5lcmF0ZWRJbnB1dCAhPT0gdHJ1ZSAmJiBJc0VuY2xvc2VkU3RhdGljKGksIHBvc2l0aW9uc0Nsb25lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgICAgICAgICB9KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChnZXRUZXN0KHBvc01hdGNoKS5tYXRjaC5kZWYgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZHNWYWxpZGF0aW9uID09PSBmYWxzZSAmJiBwb3NpdGlvbnNDbG9uZVtwb3NNYXRjaF0gJiYgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdLm1hdGNoLm5hdGl2ZURlZiA9PT0gdC5tYXRjaC5uYXRpdmVEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc01hdGNoXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBwb3NpdGlvbnNDbG9uZVtwb3NNYXRjaF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zTWF0Y2hdLmlucHV0ID0gdC5pbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tiYWNrUG9zaXRpb25zKHVuZGVmaW5lZCwgcG9zTWF0Y2gsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gcG9zTWF0Y2ggKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnNoaWZ0UG9zaXRpb25zICYmIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvc01hdGNoLCB0Lm1hdGNoLmRlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGlzVmFsaWQocG9zTWF0Y2gsIHQuaW5wdXQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHJlc3VsdCAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSByZXN1bHQuY2FyZXQgfHwgcmVzdWx0Lmluc2VydCA/IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgOiBwb3NNYXRjaCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRzVmFsaWRhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0LmdlbmVyYXRlZElucHV0ID09PSB0cnVlIHx8IHQuaW5wdXQgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkICYmIHBvc01hdGNoID4gZW5kICYmIGlzTWFzayhwb3NNYXRjaCwgdHJ1ZSkgJiYgKHQubWF0Y2guZm4gIT09IG51bGwgfHwgcG9zTWF0Y2ggPiBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc01hdGNoKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0VGVzdChwb3NNYXRjaCkubWF0Y2guZGVmID09IFwiXCIpIHZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NNYXRjaCA9IGo7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHBvc2l0aW9uc0Nsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWxpZFRlc3QpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB2YWxpZFRlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzZXRNYXNrU2V0KHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNNYXNrKHBvcywgc3RyaWN0KSB7XG4gICAgICAgICAgICB2YXIgdGVzdCA9IGdldFRlc3RUZW1wbGF0ZShwb3MpLm1hdGNoO1xuICAgICAgICAgICAgaWYgKHRlc3QuZGVmID09PSBcIlwiKSB0ZXN0ID0gZ2V0VGVzdChwb3MpLm1hdGNoO1xuICAgICAgICAgICAgaWYgKHRlc3QuZm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0LmZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0cmljdCAhPT0gdHJ1ZSAmJiBwb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgIHZhciB0ZXN0cyA9IGdldFRlc3RzKHBvcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RzLmxlbmd0aCA+IDEgKyAodGVzdHNbdGVzdHMubGVuZ3RoIC0gMV0ubWF0Y2guZGVmID09PSBcIlwiID8gMSA6IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNlZWtOZXh0KHBvcywgbmV3QmxvY2spIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHBvcyArIDE7XG4gICAgICAgICAgICB3aGlsZSAoZ2V0VGVzdChwb3NpdGlvbikubWF0Y2guZGVmICE9PSBcIlwiICYmIChuZXdCbG9jayA9PT0gdHJ1ZSAmJiAoZ2V0VGVzdChwb3NpdGlvbikubWF0Y2gubmV3QmxvY2tNYXJrZXIgIT09IHRydWUgfHwgIWlzTWFzayhwb3NpdGlvbikpIHx8IG5ld0Jsb2NrICE9PSB0cnVlICYmICFpc01hc2socG9zaXRpb24pKSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2Vla1ByZXZpb3VzKHBvcywgbmV3QmxvY2spIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHBvcywgdGVzdHM7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPD0gMCkgcmV0dXJuIDA7XG4gICAgICAgICAgICB3aGlsZSAoLS1wb3NpdGlvbiA+IDAgJiYgKG5ld0Jsb2NrID09PSB0cnVlICYmIGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8IG5ld0Jsb2NrICE9PSB0cnVlICYmICFpc01hc2socG9zaXRpb24pICYmICh0ZXN0cyA9IGdldFRlc3RzKHBvc2l0aW9uKSwgXG4gICAgICAgICAgICB0ZXN0cy5sZW5ndGggPCAyIHx8IHRlc3RzLmxlbmd0aCA9PT0gMiAmJiB0ZXN0c1sxXS5tYXRjaC5kZWYgPT09IFwiXCIpKSkge31cbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCBjYXJldFBvcywgZXZlbnQsIHRyaWdnZXJFdmVudHMpIHtcbiAgICAgICAgICAgIGlmIChldmVudCAmJiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dG1hc2ssIGV2ZW50LCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gdHJ1ZSA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcmVzdWx0LmJ1ZmZlciB8fCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gZ2V0QnVmZmVyKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJldFBvcyAhPT0gdW5kZWZpbmVkKSBjYXJldFBvcyA9IHJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LmNhcmV0IDogY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGJ1ZmZlci5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgIT09IHVuZGVmaW5lZCAmJiAoZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC50eXBlICE9PSBcImJsdXJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgcmVuZGVyQ29sb3JNYXNrKGlucHV0LCBjYXJldFBvcywgYnVmZmVyLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRyaWdnZXJFdmVudHMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQoaW5wdXQpLCBucHRWYWwgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHNraXBJbnB1dEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChucHRWYWwgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2xlYXJlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDb21wbGV0ZShidWZmZXIpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCwgcmV0dXJuUEwpIHtcbiAgICAgICAgICAgIHRlc3QgPSB0ZXN0IHx8IGdldFRlc3QocG9zKS5tYXRjaDtcbiAgICAgICAgICAgIGlmICh0ZXN0LnBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQgfHwgcmV0dXJuUEwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0Z1bmN0aW9uKHRlc3QucGxhY2Vob2xkZXIpID8gdGVzdC5wbGFjZWhvbGRlcihvcHRzKSA6IHRlc3QucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRlc3QuZm4gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocG9zID4gLTEgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwb3MpLCBzdGF0aWNBbHRlcm5hdGlvbnMgPSBbXSwgcHJldlRlc3Q7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0cy5sZW5ndGggPiAxICsgKHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiA9PT0gXCJcIiA/IDEgOiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbGl0eSAhPT0gdHJ1ZSAmJiB0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgIT09IHRydWUgJiYgKHRlc3RzW2ldLm1hdGNoLmZuID09PSBudWxsIHx8IChwcmV2VGVzdCA9PT0gdW5kZWZpbmVkIHx8IHRlc3RzW2ldLm1hdGNoLmZuLnRlc3QocHJldlRlc3QubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgdHJ1ZSwgb3B0cykgIT09IGZhbHNlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQWx0ZXJuYXRpb25zLnB1c2godGVzdHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbaV0ubWF0Y2guZm4gPT09IG51bGwpIHByZXZUZXN0ID0gdGVzdHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0aWNBbHRlcm5hdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9bMC05YS1iQS1aXS8udGVzdChzdGF0aWNBbHRlcm5hdGlvbnNbMF0ubWF0Y2guZGVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlc3QuZGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBIYW5kbGVOYXRpdmVQbGFjZWhvbGRlcihucHQsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobnB0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gdmFsdWUgJiYgKG5wdC5wbGFjZWhvbGRlciAhPT0gdmFsdWUgfHwgbnB0LnBsYWNlaG9sZGVyID09PSBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKSwgbnB0VmFsdWUgPSBucHQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnB0VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsdnAgPT09IC0xICYmIG5wdFZhbHVlID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobHZwICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihucHQsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5wdC5wbGFjZWhvbGRlciAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBucHQucGxhY2Vob2xkZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAobnB0LnBsYWNlaG9sZGVyID09PSBcIlwiKSBucHQucmVtb3ZlQXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEV2ZW50UnVsZXIgPSB7XG4gICAgICAgICAgICBvbjogZnVuY3Rpb24oaW5wdXQsIGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LmlucHV0bWFzayA9PT0gdW5kZWZpbmVkICYmIHRoaXMubm9kZU5hbWUgIT09IFwiRk9STVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1PcHRzID0gJC5kYXRhKHRoYXQsIFwiX2lucHV0bWFza19vcHRzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltT3B0cykgbmV3IElucHV0bWFzayhpbU9wdHMpLm1hc2sodGhhdCk7IGVsc2UgRXZlbnRSdWxlci5vZmYodGhhdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50eXBlICE9PSBcInNldHZhbHVlXCIgJiYgdGhpcy5ub2RlTmFtZSAhPT0gXCJGT1JNXCIgJiYgKHRoYXQuZGlzYWJsZWQgfHwgdGhhdC5yZWFkT25seSAmJiAhKGUudHlwZSA9PT0gXCJrZXlkb3duXCIgJiYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IDY3KSB8fCBvcHRzLnRhYlRocm91Z2ggPT09IGZhbHNlICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuVEFCKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwSW5wdXRFdmVudCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQodGhhdCwgdGhhdC5pbnB1dG1hc2suY2FyZXRQb3MsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwS2V5UHJlc3NFdmVudCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwS2V5UHJlc3NFdmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsaWNrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGllbW9iaWxlIHx8IGlwaG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0dXJuVmFsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdO1xuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXS5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5mb3JtICE9PSBudWxsKSAkKGlucHV0LmZvcm0pLm9uKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQoaW5wdXQpLm9uKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvZmY6IGZ1bmN0aW9uKGlucHV0LCBldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgJiYgaW5wdXQuaW5wdXRtYXNrLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzW2V2ZW50XSA9IGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnRdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gaW5wdXQuaW5wdXRtYXNrLmV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goZXZlbnRzLCBmdW5jdGlvbihldmVudE5hbWUsIGV2QXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZXZBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldiA9IGV2QXJyLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoZXZlbnROYW1lLCBbIFwic3VibWl0XCIsIFwicmVzZXRcIiBdKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmZvcm0gIT09IG51bGwpICQoaW5wdXQuZm9ybSkub2ZmKGV2ZW50TmFtZSwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoaW5wdXQpLm9mZihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBFdmVudEhhbmRsZXJzID0ge1xuICAgICAgICAgICAga2V5ZG93bkV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLmtleUNvZGUsIHBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFIHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSB8fCBpcGhvbmUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFX1NBRkFSSSB8fCBlLmN0cmxLZXkgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuWCAmJiAhaXNJbnB1dEV2ZW50U3VwcG9ydGVkKFwiY3V0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKHRydWUpLCBnZXRNYXNrU2V0KCkucCwgZSwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVORCB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5QQUdFX0RPV04pIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiBjYXJldFBvcywgY2FyZXRQb3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuSE9NRSAmJiAhZS5zaGlmdEtleSB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5QQUdFX1VQKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiAwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChvcHRzLnVuZG9PbkVzY2FwZSAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FU0NBUEUgfHwgayA9PT0gOTAgJiYgZS5jdHJsS2V5KSAmJiBlLmFsdEtleSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbChpbnB1dCwgdHJ1ZSwgZmFsc2UsIHVuZG9WYWx1ZS5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2xpY2tcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5JTlNFUlQgJiYgIShlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnNlcnRNb2RlID0gIW9wdHMuaW5zZXJ0TW9kZTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiaW0taW5zZXJ0XCIsIG9wdHMuaW5zZXJ0TW9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnRhYlRocm91Z2ggPT09IHRydWUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuVEFCKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0VGVzdChwb3MuYmVnaW4pLm1hdGNoLmZuID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gc2Vla05leHQocG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9IHNlZWtQcmV2aW91cyhwb3MuZW5kLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gc2Vla05leHQocG9zLmJlZ2luLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MuZW5kIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpIHBvcy5lbmQtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmJlZ2luIDwgZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBwb3MuYmVnaW4sIHBvcy5lbmQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMub25LZXlEb3duLmNhbGwodGhpcywgZSwgZ2V0QnVmZmVyKCksIGNhcmV0KGlucHV0KS5iZWdpbiwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWdub3JhYmxlID0gJC5pbkFycmF5KGssIG9wdHMuaWdub3JhYmxlcykgIT09IC0xO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtleXByZXNzRXZlbnQ6IGZ1bmN0aW9uKGUsIGNoZWNrdmFsLCB3cml0ZU91dCwgc3RyaWN0LCBuZHgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUud2hpY2ggfHwgZS5jaGFyQ29kZSB8fCBlLmtleUNvZGU7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrdmFsICE9PSB0cnVlICYmICghKGUuY3RybEtleSAmJiBlLmFsdEtleSkgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgaWdub3JhYmxlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVOVEVSICYmIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IDQ2ICYmIGUuc2hpZnRLZXkgPT09IGZhbHNlICYmIG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIikgayA9IG9wdHMucmFkaXhQb2ludC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGNoZWNrdmFsID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBuZHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBuZHhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBjYXJldChpbnB1dCksIGZvcndhcmRQb3NpdGlvbiwgYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoayksIG9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5fcmFkaXhEYW5jZSAmJiBvcHRzLm51bWVyaWNJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGdldEJ1ZmZlcigpLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50LmNoYXJBdCgwKSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MuYmVnaW4gPD0gY2FyZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgPT09IG9wdHMucmFkaXhQb2ludC5jaGFyQ29kZUF0KDApKSBvZmZzZXQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS53cml0ZU91dEJ1ZmZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsUmVzdWx0ID0gaXNWYWxpZChwb3MsIGMsIHN0cmljdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsUmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkUG9zaXRpb24gPSB2YWxSZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHZhbFJlc3VsdC5jYXJldCA6IHNlZWtOZXh0KHZhbFJlc3VsdC5wb3MuYmVnaW4gPyB2YWxSZXN1bHQucG9zLmJlZ2luIDogdmFsUmVzdWx0LnBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBmb3J3YXJkUG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkUG9zaXRpb24gPSAob3B0cy5udW1lcmljSW5wdXQgJiYgdmFsUmVzdWx0LmNhcmV0ID09PSB1bmRlZmluZWQgPyBzZWVrUHJldmlvdXMoZm9yd2FyZFBvc2l0aW9uKSA6IGZvcndhcmRQb3NpdGlvbikgKyBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod3JpdGVPdXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5vbktleVZhbGlkYXRpb24uY2FsbChpbnB1dCwgaywgdmFsUmVzdWx0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLndyaXRlT3V0QnVmZmVyICYmIHZhbFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCBmb3J3YXJkUG9zaXRpb24sIGUsIGNoZWNrdmFsICE9PSB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2t2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsUmVzdWx0ICE9PSBmYWxzZSkgdmFsUmVzdWx0LmZvcndhcmRQb3NpdGlvbiA9IGZvcndhcmRQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3RlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBldiA9IGUub3JpZ2luYWxFdmVudCB8fCBlLCAkaW5wdXQgPSAkKGlucHV0KSwgaW5wdXRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSksIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpLCB0ZW1wVmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGlzUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBWYWx1ZSA9IGNhcmV0UG9zLmVuZDtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MuZW5kID0gY2FyZXRQb3MuYmVnaW47XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zLmJlZ2luID0gdGVtcFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVCZWZvcmVDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgdmFsdWVBZnRlckNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoY2FyZXRQb3MuZW5kLCBpbnB1dFZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlQmVmb3JlQ2FyZXQgPT09IChpc1JUTCA/IGdldEJ1ZmZlclRlbXBsYXRlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyVGVtcGxhdGUoKSkuc2xpY2UoMCwgY2FyZXRQb3MuYmVnaW4pLmpvaW4oXCJcIikpIHZhbHVlQmVmb3JlQ2FyZXQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUFmdGVyQ2FyZXQgPT09IChpc1JUTCA/IGdldEJ1ZmZlclRlbXBsYXRlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyVGVtcGxhdGUoKSkuc2xpY2UoY2FyZXRQb3MuZW5kKS5qb2luKFwiXCIpKSB2YWx1ZUFmdGVyQ2FyZXQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuY2xpcGJvYXJkRGF0YSAmJiB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSB2YWx1ZUJlZm9yZUNhcmV0ICsgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcIlRleHRcIikgKyB2YWx1ZUFmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldi5jbGlwYm9hcmREYXRhICYmIGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgKyB2YWx1ZUFmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVQYXN0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFzdGVWYWx1ZSA9IG9wdHMub25CZWZvcmVQYXN0ZS5jYWxsKGlucHV0bWFzaywgaW5wdXRWYWx1ZSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXN0ZVZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhc3RlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCBmYWxzZSwgZmFsc2UsIHBhc3RlVmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlucHV0RmFsbEJhY2tFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJhZGl4UG9pbnRIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZS5jaGFyQXQoY2FyZXRQb3MuYmVnaW4gLSAxKSA9PT0gXCIuXCIgJiYgb3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWVbY2FyZXRQb3MuYmVnaW4gLSAxXSA9IG9wdHMucmFkaXhQb2ludC5jaGFyQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpZU1vYmlsZUhhbmRsZXIoaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZW1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0Q2hhciA9IGlucHV0VmFsdWUucmVwbGFjZShnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dENoYXIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl2ID0gaW5wdXRWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdi5zcGxpY2UoY2FyZXRQb3MuYmVnaW4sIDAsIGlucHV0Q2hhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGl2LmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIGlucHV0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgIT09IGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gcmFkaXhQb2ludEhhbmRsZXIoaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGllTW9iaWxlSGFuZGxlcihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAhPT0gaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIG9mZnNldCA9ICFvcHRzLm51bWVyaWNJbnB1dCAmJiBpbnB1dFZhbHVlLmxlbmd0aCA+IGJ1ZmZlci5sZW5ndGggPyAtMSA6IDAsIGZyb250UGFydCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgYmFja1BhcnQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5iZWdpbiksIGZyb250QnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4gKyBvZmZzZXQpLCBiYWNrQnVmZmVyUGFydCA9IGJ1ZmZlci5zdWJzdHIoY2FyZXRQb3MuYmVnaW4gKyBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGNhcmV0UG9zLCBlbnRyaWVzID0gXCJcIiwgaXNFbnRyeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyb250UGFydCAhPT0gZnJvbnRCdWZmZXJQYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZwbCA9IChpc0VudHJ5ID0gZnJvbnRQYXJ0Lmxlbmd0aCA+PSBmcm9udEJ1ZmZlclBhcnQubGVuZ3RoKSA/IGZyb250UGFydC5sZW5ndGggOiBmcm9udEJ1ZmZlclBhcnQubGVuZ3RoLCBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGZyb250UGFydC5jaGFyQXQoaSkgPT09IGZyb250QnVmZmVyUGFydC5jaGFyQXQoaSkgJiYgaSA8IGZwbDsgaSsrKSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luID0gaSAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyArPSBmcm9udFBhcnQuc2xpY2UoaSwgc2VsZWN0aW9uLmVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tQYXJ0ICE9PSBiYWNrQnVmZmVyUGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWNrUGFydC5sZW5ndGggPiBiYWNrQnVmZmVyUGFydC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyArPSBiYWNrUGFydC5zbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja1BhcnQubGVuZ3RoIDwgYmFja0J1ZmZlclBhcnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZW5kICs9IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCAtIGJhY2tQYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFbnRyeSAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIgJiYgYmFja1BhcnQgPT09IFwiXCIgJiYgZnJvbnRQYXJ0LmNoYXJBdChzZWxlY3Rpb24uYmVnaW4gKyBvZmZzZXQgLSAxKSA9PT0gb3B0cy5yYWRpeFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcyA9IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBzZWxlY3Rpb24uYmVnaW4gKyBvZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBzZWxlY3Rpb24uZW5kICsgb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZW50cmllcy5zcGxpdChcIlwiKSwgZnVuY3Rpb24obmR4LCBlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGVudHJ5LmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uLmJlZ2luID09PSBzZWxlY3Rpb24uZW5kIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYmVnaW4gPSBzZWVrUHJldmlvdXMoc2VsZWN0aW9uLmJlZ2luICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24uYmVnaW4gPT09IHNlbGVjdGlvbi5lbmQgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgc2VsZWN0aW9uLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWxlY3Rpb24uYmVnaW4sIHNlbGVjdGlvbi5lbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlkb3duID0gbmV3ICQuRXZlbnQoXCJrZXlkb3duXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWRvd24ua2V5Q29kZSA9IG9wdHMubnVtZXJpY0lucHV0ID8gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFIDogSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsIGtleWRvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJlZm9yZUlucHV0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5pbnB1dFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5zZXJ0VGV4dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGUuZGF0YS5zcGxpdChcIlwiKSwgZnVuY3Rpb24obmR4LCBlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9IG5ldyAkLkV2ZW50KFwia2V5cHJlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSBlbnRyeS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZG93biA9IG5ldyAkLkV2ZW50KFwia2V5ZG93blwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWRvd24ua2V5Q29kZSA9IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsIGtleWRvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVDb250ZW50Rm9yd2FyZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleWRvd24gPSBuZXcgJC5FdmVudChcImtleWRvd25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEU7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0VmFsdWVFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIHZhbHVlID0gZSAmJiBlLmRldGFpbCA/IGUuZGV0YWlsWzBdIDogYXJndW1lbnRzWzFdLCB2YWx1ZSA9IHZhbHVlIHx8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykpIHZhbHVlID0gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIHZhbHVlLCBvcHRzKSB8fCB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsIHRydWUsIGZhbHNlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgb3B0cy5jbGVhckluY29tcGxldGUpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvY3VzRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBucHRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5zaG93TWFza09uRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5wdFZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb3VzZUVudGVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5wb3NpdGlvbkNhcmV0T25UYWIgPT09IHRydWUgJiYgbW91c2VFbnRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50LmFwcGx5KGlucHV0LCBbIGUsIHRydWUgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW91c2VsZWF2ZUV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBtb3VzZUVudGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIG9yaWdpbmFsUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGlja0V2ZW50OiBmdW5jdGlvbihlLCB0YWJiZWQpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb1JhZGl4Rm9jdXMoY2xpY2tQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2cHNbY2xpY2tQb3NdID09PSB1bmRlZmluZWQgfHwgdnBzW2NsaWNrUG9zXS5pbnB1dCA9PT0gZ2V0UGxhY2Vob2xkZXIoY2xpY2tQb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrUG9zIDwgc2Vla05leHQoLTEpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBnZXRCdWZmZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2cCBpbiB2cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvcyA8IHZwICYmIHZwc1t2cF0uaW5wdXQgIT09IGdldFBsYWNlaG9sZGVyKHZwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ2FyZXQgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2FyZXQuZW5kID0gc2VsZWN0ZWRDYXJldC5iZWdpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENhcmV0LmJlZ2luID0gc2VsZWN0ZWRDYXJldC5lbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ2FyZXQuYmVnaW4gPT09IHNlbGVjdGVkQ2FyZXQuZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm9uZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgMCwgZ2V0QnVmZmVyKCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpZ25vcmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyYWRpeEZvY3VzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb1JhZGl4Rm9jdXMoc2VsZWN0ZWRDYXJldC5iZWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIG9wdHMubnVtZXJpY0lucHV0ID8gc2Vla05leHQocmFkaXhQb3MpIDogcmFkaXhQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsaWNrUG9zaXRpb24gPSBzZWxlY3RlZENhcmV0LmJlZ2luLCBsdmNsaWNrUG9zaXRpb24gPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbGlja1Bvc2l0aW9uLCB0cnVlKSwgbGFzdFBvc2l0aW9uID0gc2Vla05leHQobHZjbGlja1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWNrUG9zaXRpb24gPCBsYXN0UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCAhaXNNYXNrKGNsaWNrUG9zaXRpb24sIHRydWUpICYmICFpc01hc2soY2xpY2tQb3NpdGlvbiAtIDEsIHRydWUpID8gc2Vla05leHQoY2xpY2tQb3NpdGlvbikgOiBjbGlja1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZjbGlja1Bvc2l0aW9uXSwgdHQgPSBnZXRUZXN0VGVtcGxhdGUobGFzdFBvc2l0aW9uLCBsdnAgPyBsdnAubWF0Y2gubG9jYXRvciA6IHVuZGVmaW5lZCwgbHZwKSwgcGxhY2Vob2xkZXIgPSBnZXRQbGFjZWhvbGRlcihsYXN0UG9zaXRpb24sIHR0Lm1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlciAhPT0gXCJcIiAmJiBnZXRCdWZmZXIoKVtsYXN0UG9zaXRpb25dICE9PSBwbGFjZWhvbGRlciAmJiB0dC5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgIT09IHRydWUgJiYgdHQubWF0Y2gubmV3QmxvY2tNYXJrZXIgIT09IHRydWUgfHwgIWlzTWFzayhsYXN0UG9zaXRpb24sIG9wdHMua2VlcFN0YXRpYykgJiYgdHQubWF0Y2guZGVmID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdQb3MgPSBzZWVrTmV4dChsYXN0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1Bvc2l0aW9uID49IG5ld1BvcyB8fCBjbGlja1Bvc2l0aW9uID09PSBsYXN0UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBvc2l0aW9uID0gbmV3UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBsYXN0UG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGN1dEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIHBvcyA9IGNhcmV0KGlucHV0KSwgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xpcGJvYXJkRGF0YSA9IHdpbmRvdy5jbGlwYm9hcmREYXRhIHx8IGV2LmNsaXBib2FyZERhdGEsIGNsaXBEYXRhID0gaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZShwb3MuZW5kLCBwb3MuYmVnaW4pIDogZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmJlZ2luLCBwb3MuZW5kKTtcbiAgICAgICAgICAgICAgICBjbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0XCIsIGlzUlRMID8gY2xpcERhdGEucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBjbGlwRGF0YS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZXhlY0NvbW1hbmQpIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVSZW1vdmUoaW5wdXQsIElucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgcG9zKTtcbiAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIGdldE1hc2tTZXQoKS5wLCBlLCB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsdXJFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICBIYW5kbGVOYXRpdmVQbGFjZWhvbGRlcihpbnB1dCwgb3JpZ2luYWxQbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBucHRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSwgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5wdFZhbHVlICE9PSBcIlwiIHx8IGNvbG9yTWFzayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRMYXN0VmFsaWRQb3NpdGlvbigpID09PSAtMSAmJiBucHRWYWx1ZSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImluY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJJbmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCB1bmRlZmluZWQsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW91c2VlbnRlckV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBtb3VzZUVudGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQgJiYgb3B0cy5zaG93TWFza09uSG92ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIChpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWJtaXRFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmICh1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGdldExhc3RWYWxpZFBvc2l0aW9uKCkgPT09IC0xICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJJbmNvbXBsZXRlICYmIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZW1vdmVNYXNrT25TdWJtaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChlbC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGVsLCBnZXRCdWZmZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNldEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tWYWwoaW5wdXQsIHdyaXRlT3V0LCBzdHJpY3QsIG5wdHZsLCBpbml0aWF0aW5nRXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dG1hc2sgPSB0aGlzIHx8IGlucHV0LmlucHV0bWFzaywgaW5wdXRWYWx1ZSA9IG5wdHZsLnNsaWNlKCksIGNoYXJDb2RlcyA9IFwiXCIsIGluaXRpYWxOZHggPSAtMSwgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNUZW1wbGF0ZU1hdGNoKG5keCwgY2hhckNvZGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJDb2RlTmR4ID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIDAsIGZhbHNlKS5zbGljZShuZHgsIHNlZWtOZXh0KG5keCkpLmpvaW4oXCJcIikucmVwbGFjZSgvJy9nLCBcIlwiKS5pbmRleE9mKGNoYXJDb2Rlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJDb2RlTmR4ICE9PSAtMSAmJiAhaXNNYXNrKG5keCkgJiYgKGdldFRlc3QobmR4KS5tYXRjaC5uYXRpdmVEZWYgPT09IGNoYXJDb2Rlcy5jaGFyQXQoMCkgfHwgZ2V0VGVzdChuZHgpLm1hdGNoLmZuID09PSBudWxsICYmIGdldFRlc3QobmR4KS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiJ1wiICsgY2hhckNvZGVzLmNoYXJBdCgwKSB8fCBnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBcIiBcIiAmJiAoZ2V0VGVzdChuZHggKyAxKS5tYXRjaC5uYXRpdmVEZWYgPT09IGNoYXJDb2Rlcy5jaGFyQXQoMCkgfHwgZ2V0VGVzdChuZHggKyAxKS5tYXRjaC5mbiA9PT0gbnVsbCAmJiBnZXRUZXN0KG5keCArIDEpLm1hdGNoLm5hdGl2ZURlZiA9PT0gXCInXCIgKyBjaGFyQ29kZXMuY2hhckF0KDApKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmIG9wdHMuYXV0b1VubWFzayAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0aWNJbnB1dCA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoMCwgc2Vla05leHQoLTEpKS5qb2luKFwiXCIpLCBtYXRjaGVzID0gaW5wdXRWYWx1ZS5qb2luKFwiXCIpLm1hdGNoKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgoc3RhdGljSW5wdXQpLCBcImdcIikpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlLnNwbGljZSgwLCBtYXRjaGVzLmxlbmd0aCAqIHN0YXRpY0lucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSBzZWVrTmV4dChpbml0aWFsTmR4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSBzZWVrTmV4dChpbml0aWFsTmR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbml0aWFsTmR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQoaW5pdGlhbE5keCk7XG4gICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgZ2V0TWFza1NldCgpLnAgPSBpbml0aWFsTmR4O1xuICAgICAgICAgICAgaW5wdXRtYXNrLmNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgIGJlZ2luOiBpbml0aWFsTmR4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJC5lYWNoKGlucHV0VmFsdWUsIGZ1bmN0aW9uKG5keCwgY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW25keF0gPT09IHVuZGVmaW5lZCAmJiBpbnB1dFZhbHVlW25keF0gPT09IGdldFBsYWNlaG9sZGVyKG5keCkgJiYgaXNNYXNrKG5keCwgdHJ1ZSkgJiYgaXNWYWxpZChuZHgsIGlucHV0VmFsdWVbbmR4XSwgdHJ1ZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnArKztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9IG5ldyAkLkV2ZW50KFwiX2NoZWNrdmFsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSBjaGFyQ29kZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGVzICs9IGNoYXJDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVNYXRjaChpbml0aWFsTmR4LCBjaGFyQ29kZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCB0cnVlLCBmYWxzZSwgc3RyaWN0LCBpbnB1dG1hc2suY2FyZXRQb3MuYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IGlucHV0bWFzay5jYXJldFBvcy5iZWdpbiArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlcyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsIHRydWUsIGZhbHNlLCBzdHJpY3QsIGx2cCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKHVuZGVmaW5lZCwgZ2V0QnVmZmVyKCksIHJlc3VsdC5mb3J3YXJkUG9zaXRpb24sIGtleXByZXNzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRtYXNrLmNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogcmVzdWx0LmZvcndhcmRQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiByZXN1bHQuZm9yd2FyZFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHdyaXRlT3V0KSB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHJlc3VsdCA/IHJlc3VsdC5mb3J3YXJkUG9zaXRpb24gOiB1bmRlZmluZWQsIGluaXRpYXRpbmdFdmVudCB8fCBuZXcgJC5FdmVudChcImNoZWNrdmFsXCIpLCBpbml0aWF0aW5nRXZlbnQgJiYgaW5pdGlhdGluZ0V2ZW50LnR5cGUgPT09IFwiaW5wdXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW5tYXNrZWR2YWx1ZShpbnB1dCkge1xuICAgICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmlucHV0bWFzayAmJiBpbnB1dC5pbnB1dG1hc2sucmVmcmVzaFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMuc2V0VmFsdWVFdmVudC5jYWxsKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdW1WYWx1ZSA9IFtdLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICBmb3IgKHZhciBwbmR4IGluIHZwcykge1xuICAgICAgICAgICAgICAgIGlmICh2cHNbcG5keF0ubWF0Y2ggJiYgdnBzW3BuZHhdLm1hdGNoLmZuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdW1WYWx1ZS5wdXNoKHZwc1twbmR4XS5pbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVubWFza2VkVmFsdWUgPSB1bVZhbHVlLmxlbmd0aCA9PT0gMCA/IFwiXCIgOiAoaXNSVEwgPyB1bVZhbHVlLnJldmVyc2UoKSA6IHVtVmFsdWUpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25Vbk1hc2spKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlclZhbHVlID0gKGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkgOiBnZXRCdWZmZXIoKSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB1bm1hc2tlZFZhbHVlID0gb3B0cy5vblVuTWFzay5jYWxsKGlucHV0bWFzaywgYnVmZmVyVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2FyZXQoaW5wdXQsIGJlZ2luLCBlbmQsIG5vdHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiB0cmFuc2xhdGVQb3NpdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSVEwgJiYgdHlwZW9mIHBvcyA9PT0gXCJudW1iZXJcIiAmJiAoIW9wdHMuZ3JlZWR5IHx8IG9wdHMucGxhY2Vob2xkZXIgIT09IFwiXCIpICYmIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggLSBwb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmFuZ2U7XG4gICAgICAgICAgICBpZiAoYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGlzUlRMID8gYmVnaW5bMF0gOiBiZWdpblsxXTtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBpc1JUTCA/IGJlZ2luWzFdIDogYmVnaW5bMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChiZWdpbi5iZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGlzUlRMID8gYmVnaW4uYmVnaW4gOiBiZWdpbi5lbmQ7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gaXNSVEwgPyBiZWdpbi5lbmQgOiBiZWdpbi5iZWdpbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiZWdpbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IG5vdHJhbnNsYXRlID8gYmVnaW4gOiB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbik7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IG5vdHJhbnNsYXRlID8gZW5kIDogdHJhbnNsYXRlUG9zaXRpb24oZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gdHlwZW9mIGVuZCA9PSBcIm51bWJlclwiID8gZW5kIDogYmVnaW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxDYWxjID0gcGFyc2VJbnQoKChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZSA/IChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCwgbnVsbCkgOiBpbnB1dC5jdXJyZW50U3R5bGUpLmZvbnRTaXplKSAqIGVuZDtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2Nyb2xsTGVmdCA9IHNjcm9sbENhbGMgPiBpbnB1dC5zY3JvbGxXaWR0aCA/IHNjcm9sbENhbGMgOiAwO1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suY2FyZXRQb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IGJlZ2luO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZmlyc3RDaGlsZCA9PT0gdW5kZWZpbmVkIHx8IGlucHV0LmZpcnN0Q2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKHRleHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoaW5wdXQuZmlyc3RDaGlsZCwgYmVnaW4gPCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoID8gYmVnaW4gOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQoaW5wdXQuZmlyc3RDaGlsZCwgZW5kIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGVuZCA6IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gaW5wdXQuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZUVuZChcImNoYXJhY3RlclwiLCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCBiZWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJDb2xvck1hc2soaW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogYmVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJzZWxlY3Rpb25TdGFydFwiIGluIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gaW5wdXQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGlucHV0LnNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUgPT09IGlucHV0IHx8IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID09PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSByYW5nZS5zdGFydE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHJhbmdlLmVuZE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IDAgLSByYW5nZS5kdXBsaWNhdGUoKS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgLWlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBiZWdpbiArIHJhbmdlLnRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbjogbm90cmFuc2xhdGUgPyBiZWdpbiA6IHRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBub3RyYW5zbGF0ZSA/IGVuZCA6IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKHJldHVybkRlZmluaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgdHJ1ZSwgdHJ1ZSksIGJsID0gYnVmZmVyLmxlbmd0aCwgcG9zLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBwb3NpdGlvbnMgPSB7fSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5keEludGx6ciA9IGx2VGVzdCAhPT0gdW5kZWZpbmVkID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHVuZGVmaW5lZCwgdGVzdFBvcztcbiAgICAgICAgICAgIGZvciAocG9zID0gbHZwICsgMTsgcG9zIDwgYnVmZmVyLmxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgICAgICAgICB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKTtcbiAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbcG9zXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0ZXN0UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsdlRlc3RBbHQgPSBsdlRlc3QgJiYgbHZUZXN0LmFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQgPyBsdlRlc3QubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgZm9yIChwb3MgPSBibCAtIDE7IHBvcyA+IGx2cDsgcG9zLS0pIHtcbiAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcG9zaXRpb25zW3Bvc107XG4gICAgICAgICAgICAgICAgaWYgKCh0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsaXR5IHx8IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICYmIHRlc3RQb3MubWF0Y2gubmV3QmxvY2tNYXJrZXIgfHwgbHZUZXN0QWx0ICYmIChsdlRlc3RBbHQgIT09IHBvc2l0aW9uc1twb3NdLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiB0ZXN0UG9zLm1hdGNoLmZuICE9IG51bGwgfHwgdGVzdFBvcy5tYXRjaC5mbiA9PT0gbnVsbCAmJiB0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiBjaGVja0FsdGVybmF0aW9uTWF0Y2godGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksIGx2VGVzdEFsdC50b1N0cmluZygpLnNwbGl0KFwiLFwiKSkgJiYgZ2V0VGVzdHMocG9zKVswXS5kZWYgIT09IFwiXCIpKSAmJiBidWZmZXJbcG9zXSA9PT0gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0UG9zLm1hdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICBibC0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5EZWZpbml0aW9uID8ge1xuICAgICAgICAgICAgICAgIGw6IGJsLFxuICAgICAgICAgICAgICAgIGRlZjogcG9zaXRpb25zW2JsXSA/IHBvc2l0aW9uc1tibF0ubWF0Y2ggOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0gOiBibDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpIHtcbiAgICAgICAgICAgIGJ1ZmZlci5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIDAsIHRydWUsIHVuZGVmaW5lZCwgdHJ1ZSksIGxtbnQsIHZhbGlkUG9zO1xuICAgICAgICAgICAgd2hpbGUgKGxtbnQgPSB0ZW1wbGF0ZS5zaGlmdCgpLCBsbW50ICE9PSB1bmRlZmluZWQpIGJ1ZmZlci5wdXNoKGxtbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0NvbXBsZXRlKGJ1ZmZlcikge1xuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmlzQ29tcGxldGUpKSByZXR1cm4gb3B0cy5pc0NvbXBsZXRlKGJ1ZmZlciwgb3B0cyk7XG4gICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgPT09IFwiKlwiKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gZmFsc2UsIGxycCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKHRydWUpLCBhbWwgPSBzZWVrUHJldmlvdXMobHJwLmwpO1xuICAgICAgICAgICAgaWYgKGxycC5kZWYgPT09IHVuZGVmaW5lZCB8fCBscnAuZGVmLm5ld0Jsb2NrTWFya2VyIHx8IGxycC5kZWYub3B0aW9uYWxpdHkgfHwgbHJwLmRlZi5vcHRpb25hbFF1YW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gYW1sOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUoaSkubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0LmZuICE9PSBudWxsICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSA9PT0gdW5kZWZpbmVkICYmIHRlc3Qub3B0aW9uYWxpdHkgIT09IHRydWUgJiYgdGVzdC5vcHRpb25hbFF1YW50aWZpZXIgIT09IHRydWUgfHwgdGVzdC5mbiA9PT0gbnVsbCAmJiBidWZmZXJbaV0gIT09IGdldFBsYWNlaG9sZGVyKGksIHRlc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MsIHN0cmljdCwgZnJvbUlzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCB8fCBpc1JUTCkge1xuICAgICAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UpIHtcbiAgICAgICAgICAgICAgICAgICAgayA9IElucHV0bWFzay5rZXlDb2RlLkRFTEVURTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSkge1xuICAgICAgICAgICAgICAgICAgICBrID0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmQgPSBwb3MuZW5kO1xuICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gcG9zLmJlZ2luO1xuICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBwZW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgJiYgcG9zLmVuZCAtIHBvcy5iZWdpbiA8IDEpIHtcbiAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0gIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCA9PT0gb3B0cy5ncm91cFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4tLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSAmJiBwb3MuYmVnaW4gPT09IHBvcy5lbmQpIHtcbiAgICAgICAgICAgICAgICBwb3MuZW5kID0gaXNNYXNrKHBvcy5lbmQsIHRydWUpICYmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmVuZF0gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5lbmRdLmlucHV0ICE9PSBvcHRzLnJhZGl4UG9pbnQpID8gcG9zLmVuZCArIDEgOiBzZWVrTmV4dChwb3MuZW5kKSArIDE7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dICE9PSB1bmRlZmluZWQgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0uaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldmFsaWRhdGVNYXNrKHBvcyk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICE9PSB0cnVlICYmIG9wdHMua2VlcFN0YXRpYyAhPT0gZmFsc2UgfHwgb3B0cy5yZWdleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhbHRlcm5hdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gcmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyByZXN1bHQuY2FyZXQgOiByZXN1bHQucG9zID8gc2Vla05leHQocmVzdWx0LnBvcy5iZWdpbiA/IHJlc3VsdC5wb3MuYmVnaW4gOiByZXN1bHQucG9zKSA6IGdldExhc3RWYWxpZFBvc2l0aW9uKC0xLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgIT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSB8fCBwb3MuYmVnaW4gPiBuZXdQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9PSBuZXdQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24ocG9zLmJlZ2luLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChsdnAgPCBwb3MuYmVnaW4gfHwgcG9zLmJlZ2luID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQobHZwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBwb3MuYmVnaW47XG4gICAgICAgICAgICAgICAgaWYgKGZyb21Jc1ZhbGlkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChnZXRNYXNrU2V0KCkucCA8IGx2cCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZ2V0TWFza1NldCgpLnBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbG9yTWFzayhpbnB1dCkge1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSAoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoaW5wdXQsIG51bGwpO1xuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENhcmV0UG9zKGNsaWVudHgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLCBjYXJldFBvcztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzdHlsZSBpbiBjb21wdXRlZFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihzdHlsZSkgJiYgc3R5bGUuaW5kZXhPZihcImZvbnRcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0eWxlW3N0eWxlXSA9IGNvbXB1dGVkU3R5bGVbc3R5bGVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUuc3R5bGUudGV4dFRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUudGV4dFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBjb21wdXRlZFN0eWxlLmxldHRlclNwYWNpbmc7XG4gICAgICAgICAgICAgICAgZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgIGUuc3R5bGUud2lkdGggPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgICAgIGUuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCI7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRUZXh0ID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLCBwcmV2aW91c1dpZHRoID0gMCwgaXRsO1xuICAgICAgICAgICAgICAgIGZvciAoY2FyZXRQb3MgPSAwLCBpdGwgPSBpbnB1dFRleHQubGVuZ3RoOyBjYXJldFBvcyA8PSBpdGw7IGNhcmV0UG9zKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZS5pbm5lckhUTUwgKz0gaW5wdXRUZXh0LmNoYXJBdChjYXJldFBvcykgfHwgXCJfXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm9mZnNldFdpZHRoID49IGNsaWVudHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQxID0gY2xpZW50eCAtIHByZXZpb3VzV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0MiA9IGUub2Zmc2V0V2lkdGggLSBjbGllbnR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5pbm5lckhUTUwgPSBpbnB1dFRleHQuY2hhckF0KGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDEgLT0gZS5vZmZzZXRXaWR0aCAvIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IG9mZnNldDEgPCBvZmZzZXQyID8gY2FyZXRQb3MgLSAxIDogY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1dpZHRoID0gZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZXRQb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdGVtcGxhdGUuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgICAgICAgICAgdGVtcGxhdGUuc3R5bGUudGV4dEFsaWduID0gY29tcHV0ZWRTdHlsZS50ZXh0QWxpZ247XG4gICAgICAgICAgICBjb2xvck1hc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmNvbG9yTWFzayA9IGNvbG9yTWFzaztcbiAgICAgICAgICAgIGNvbG9yTWFzay5jbGFzc05hbWUgPSBcImltLWNvbG9ybWFza1wiO1xuICAgICAgICAgICAgaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29sb3JNYXNrLCBpbnB1dCk7XG4gICAgICAgICAgICBpbnB1dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlucHV0KTtcbiAgICAgICAgICAgIGNvbG9yTWFzay5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICBjb2xvck1hc2suYXBwZW5kQ2hpbGQodGVtcGxhdGUpO1xuICAgICAgICAgICAgaW5wdXQuc3R5bGUubGVmdCA9IHRlbXBsYXRlLm9mZnNldExlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICAkKGNvbG9yTWFzaykub24oXCJtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVycy5tb3VzZWxlYXZlRXZlbnQuY2FsbChpbnB1dCwgWyBlIF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKGNvbG9yTWFzaykub24oXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVycy5tb3VzZWVudGVyRXZlbnQuY2FsbChpbnB1dCwgWyBlIF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKGNvbG9yTWFzaykub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGZpbmRDYXJldFBvcyhlLmNsaWVudFgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlckNvbG9yTWFzayhpbnB1dCwgY2FyZXRQb3MsIGNsZWFyKSB7XG4gICAgICAgICAgICB2YXIgbWFza1RlbXBsYXRlID0gW10sIGlzU3RhdGljID0gZmFsc2UsIHRlc3QsIHRlc3RQb3MsIG5keEludGx6ciwgcG9zID0gMDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldEVudHJ5KGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5ID09PSB1bmRlZmluZWQpIGVudHJ5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoIWlzU3RhdGljICYmICh0ZXN0LmZuID09PSBudWxsIHx8IHRlc3RQb3MuaW5wdXQgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTdGF0aWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUucHVzaChcIjxzcGFuIGNsYXNzPSdpbS1zdGF0aWMnPlwiICsgZW50cnkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdGF0aWMgJiYgKHRlc3QuZm4gIT09IG51bGwgJiYgdGVzdFBvcy5pbnB1dCAhPT0gdW5kZWZpbmVkIHx8IHRlc3QuZGVmID09PSBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXRsID0gbWFza1RlbXBsYXRlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlW210bCAtIDFdID0gbWFza1RlbXBsYXRlW210bCAtIDFdICsgXCI8L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbWFza1RlbXBsYXRlLnB1c2goZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0Q2FyZXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5zcGxpY2UoY2FyZXRQb3MuYmVnaW4sIDAsIGNhcmV0UG9zLmJlZ2luID09PSBjYXJldFBvcy5lbmQgfHwgY2FyZXRQb3MuZW5kID4gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGggPyAnPG1hcmsgY2xhc3M9XCJpbS1jYXJldFwiIHN0eWxlPVwiYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7Ym9yZGVyLXJpZ2h0LXN0eWxlOiBzb2xpZDtcIj4nIDogJzxtYXJrIGNsYXNzPVwiaW0tY2FyZXQtc2VsZWN0XCI+Jyk7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5zcGxpY2UoY2FyZXRQb3MuZW5kICsgMSwgMCwgXCI8L21hcms+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2xvck1hc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNhcmV0UG9zLmJlZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGNhcmV0UG9zXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjbGVhciAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVudHJ5KGJ1ZmZlcltwb3NdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdCA9IHRlc3RQb3MubWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaml0TWFza2luZyA9PT0gZmFsc2UgfHwgcG9zIDwgbHZwIHx8IHR5cGVvZiBvcHRzLmppdE1hc2tpbmcgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUob3B0cy5qaXRNYXNraW5nKSAmJiBvcHRzLmppdE1hc2tpbmcgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RW50cnkoZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlzU3RhdGljID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoKG1heExlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHBvcyA8IG1heExlbmd0aCkgJiYgKHRlc3QuZm4gIT09IG51bGwgfHwgdGVzdC5kZWYgIT09IFwiXCIpIHx8IGx2cCA+IHBvcyB8fCBpc1N0YXRpYyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N0YXRpYykgc2V0RW50cnkoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q2FyZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gY29sb3JNYXNrLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpWzBdO1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IG1hc2tUZW1wbGF0ZS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5wb3NpdGlvbkNvbG9yTWFzayhpbnB1dCwgdGVtcGxhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hc2soZWxlbSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNFbGVtZW50VHlwZVN1cHBvcnRlZChpbnB1dCwgb3B0cykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBhdGNoVmFsdWVQcm9wZXJ0eShucHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlR2V0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVTZXQ7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBhdGNoVmFsaG9vayh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC52YWxIb29rcyAmJiAoJC52YWxIb29rc1t0eXBlXSA9PT0gdW5kZWZpbmVkIHx8ICQudmFsSG9va3NbdHlwZV0uaW5wdXRtYXNrcGF0Y2ggIT09IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGhvb2tHZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uZ2V0ID8gJC52YWxIb29rc1t0eXBlXS5nZXQgOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGhvb2tTZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uc2V0ID8gJC52YWxIb29rc1t0eXBlXS5zZXQgOiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC52YWxIb29rc1t0eXBlXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGhvb2tHZXQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHVuZGVmaW5lZCwgZWxlbS5pbnB1dG1hc2subWFza3NldC52YWxpZFBvc2l0aW9ucykgIT09IC0xIHx8IG9wdHMubnVsbGFibGUgIT09IHRydWUgPyByZXN1bHQgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdmFsaG9va0dldChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihlbGVtLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKSwgcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsaG9va1NldChlbGVtLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZWxlbS50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyB2YWx1ZSBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFza3BhdGNoOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID8gdGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAhPT0gLTEgfHwgb3B0cy5udWxsYWJsZSAhPT0gdHJ1ZSA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMgJiYgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyA/IChpc1JUTCA/IGNsZWFyT3B0aW9uYWxUYWlsKGdldEJ1ZmZlcigpLnNsaWNlKCkpLnJldmVyc2UoKSA6IGNsZWFyT3B0aW9uYWxUYWlsKGdldEJ1ZmZlcigpLnNsaWNlKCkpKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzKSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmV0dXJuIHZhbHVlR2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0dGVyKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcihcInNldHZhbHVlXCIsIFsgdmFsdWUgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKG5wdCwgXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyksIGlucHV0ID0gdGhpcywgdmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm5vVmFsdWVQYXRjaGluZyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldFByb3RvdHlwZU9mICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZiA9IHR5cGVvZiBcInRlc3RcIi5fX3Byb3RvX18gPT09IFwib2JqZWN0XCIgPyBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0Ll9fcHJvdG9fXztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihucHQpLCBcInZhbHVlXCIpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVQcm9wZXJ0eSAmJiB2YWx1ZVByb3BlcnR5LmdldCAmJiB2YWx1ZVByb3BlcnR5LnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSB2YWx1ZVByb3BlcnR5LmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0ID0gdmFsdWVQcm9wZXJ0eS5zZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5wdC50YWdOYW1lICE9PSBcIklOUFVUXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIG5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSBucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IG5wdC5fX2xvb2t1cFNldHRlcl9fKFwidmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIiwgZ2V0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0Ll9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLCBzZXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQgPSB2YWx1ZUdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl9fdmFsdWVTZXQgPSB2YWx1ZVNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0ID0gZnVuY3Rpb24ob3ZlcnJ1bGVSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgJiYgb3ZlcnJ1bGVSVEwgIT09IHRydWUgPyB2YWx1ZUdldC5jYWxsKHRoaXMuZWwpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl92YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlLCBvdmVycnVsZVJUTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcy5lbCwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBvdmVycnVsZVJUTCAhPT0gdHJ1ZSAmJiBpc1JUTCA/IHZhbHVlLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVHZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoVmFsaG9vayhucHQudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFR5cGUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICAgICAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGlucHV0LnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiAkLmluQXJyYXkoZWxlbWVudFR5cGUsIG9wdHMuc3VwcG9ydHNJbnB1dFR5cGUpICE9PSAtMSB8fCBpbnB1dC5pc0NvbnRlbnRFZGl0YWJsZSB8fCBpbnB1dC50YWdOYW1lID09PSBcIlRFWFRBUkVBXCI7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudGFnTmFtZSA9PT0gXCJJTlBVVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGVsZW1lbnRUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gZWwudHlwZSA9PT0gXCJ0ZXh0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpc1N1cHBvcnRlZCA9IFwicGFydGlhbFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoVmFsdWVQcm9wZXJ0eShpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlucHV0LmlucHV0bWFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbGVtKTtcbiAgICAgICAgICAgIHZhciBpc1N1cHBvcnRlZCA9IGlzRWxlbWVudFR5cGVTdXBwb3J0ZWQoZWxlbSwgb3B0cyk7XG4gICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZWwgPSBlbGVtO1xuICAgICAgICAgICAgICAgICRlbCA9ICQoZWwpO1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsUGxhY2Vob2xkZXIgPSBlbC5wbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSBlbCAhPT0gdW5kZWZpbmVkID8gZWwubWF4TGVuZ3RoIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChtYXhMZW5ndGggPT09IC0xKSBtYXhMZW5ndGggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDb2xvck1hc2soZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcImlucHV0TW9kZVwiIGluIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1vZGUgPSBvcHRzLmlucHV0bW9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImlucHV0bW9kZVwiLCBvcHRzLmlucHV0bW9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlzYWJsZVByZWRpY3RpdmVUZXh0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJhdXRvY29ycmVjdFwiIGluIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuYXV0b2NvcnJlY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVDb2xvck1hc2soZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC50eXBlID0gXCJwYXNzd29yZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc1N1cHBvcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpbS1pbnNlcnRcIiwgb3B0cy5pbnNlcnRNb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJzdWJtaXRcIiwgRXZlbnRIYW5kbGVycy5zdWJtaXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwicmVzZXRcIiwgRXZlbnRIYW5kbGVycy5yZXNldEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJibHVyXCIsIEV2ZW50SGFuZGxlcnMuYmx1ckV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJmb2N1c1wiLCBFdmVudEhhbmRsZXJzLmZvY3VzRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jb2xvck1hc2sgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY2xpY2tcIiwgRXZlbnRIYW5kbGVycy5jbGlja0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwibW91c2VsZWF2ZVwiLCBFdmVudEhhbmRsZXJzLm1vdXNlbGVhdmVFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcIm1vdXNlZW50ZXJcIiwgRXZlbnRIYW5kbGVycy5tb3VzZWVudGVyRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwicGFzdGVcIiwgRXZlbnRIYW5kbGVycy5wYXN0ZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjdXRcIiwgRXZlbnRIYW5kbGVycy5jdXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY29tcGxldGVcIiwgb3B0cy5vbmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJpbmNvbXBsZXRlXCIsIG9wdHMub25pbmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJjbGVhcmVkXCIsIG9wdHMub25jbGVhcmVkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2JpbGUgJiYgb3B0cy5pbnB1dEV2ZW50T25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJrZXlkb3duXCIsIEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwia2V5cHJlc3NcIiwgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcIm1heExlbmd0aFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImlucHV0XCIsIEV2ZW50SGFuZGxlcnMuaW5wdXRGYWxsQmFja0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJiZWZvcmVpbnB1dFwiLCBFdmVudEhhbmRsZXJzLmJlZm9yZUlucHV0RXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInNldHZhbHVlXCIsIEV2ZW50SGFuZGxlcnMuc2V0VmFsdWVFdmVudCk7XG4gICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpICE9PSBcIlwiIHx8IG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPT09IGZhbHNlIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSksIG9wdHMpIHx8IGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSkgOiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSBcIlwiKSBjaGVja1ZhbChlbCwgdHJ1ZSwgZmFsc2UsIGluaXRpYWxWYWx1ZS5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFySW5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyA9PT0gZmFsc2UgfHwgb3B0cy5zaG93TWFza09uRm9jdXMgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwgfHwgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSAhPT0gXCJcIikgd3JpdGVCdWZmZXIoZWwsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoZWwsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWVCdWZmZXI7XG4gICAgICAgIGlmIChhY3Rpb25PYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25PYmouYWN0aW9uKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJpc0NvbXBsZXRlXCI6XG4gICAgICAgICAgICAgICAgZWwgPSBhY3Rpb25PYmouZWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJ1bm1hc2tlZHZhbHVlXCI6XG4gICAgICAgICAgICAgICAgaWYgKGVsID09PSB1bmRlZmluZWQgfHwgYWN0aW9uT2JqLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVCdWZmZXIgPSBhY3Rpb25PYmoudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgdmFsdWVCdWZmZXIsIG9wdHMpIHx8IHZhbHVlQnVmZmVyIDogdmFsdWVCdWZmZXIpLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgZmFsc2UsIGZhbHNlLCB2YWx1ZUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkgb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCB1bmRlZmluZWQsIGdldEJ1ZmZlcigpLCAwLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkdmFsdWUoZWwpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJtYXNrXCI6XG4gICAgICAgICAgICAgICAgbWFzayhlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImZvcm1hdFwiOlxuICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0bWFzaywgYWN0aW9uT2JqLnZhbHVlLCBvcHRzKSB8fCBhY3Rpb25PYmoudmFsdWUgOiBhY3Rpb25PYmoudmFsdWUpLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgIGNoZWNrVmFsLmNhbGwodGhpcywgdW5kZWZpbmVkLCB0cnVlLCBmYWxzZSwgdmFsdWVCdWZmZXIpO1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25PYmoubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbWFza3NldCwgb3B0cylcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImlzVmFsaWRcIjpcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uT2JqLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgdHJ1ZSwgdHJ1ZSwgdmFsdWVCdWZmZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbk9iai52YWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcmwgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbigpLCBsbWliID0gYnVmZmVyLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgZm9yICg7bG1pYiA+IHJsOyBsbWliLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFzayhsbWliKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1ZmZlci5zcGxpY2UocmwsIGxtaWIgKyAxIC0gcmwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0NvbXBsZXRlKGJ1ZmZlcikgJiYgYWN0aW9uT2JqLnZhbHVlID09PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJnZXRlbXB0eW1hc2tcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjpcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgZWwuaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZGF0YShlbCwgXCJfaW5wdXRtYXNrX29wdHNcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICRlbCA9ICQoZWwpO1xuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KG9wdHMuYXV0b1VubWFzayA/IHVubWFza2VkdmFsdWUoZWwpIDogZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub2ZmKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5jb2xvck1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFzayA9IGVsLmlucHV0bWFzay5jb2xvck1hc2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1hc2sucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCBjb2xvck1hc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29sb3JNYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoZWwpLCBcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCBcInZhbHVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlU2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIGVsLl9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgZWwuaW5wdXRtYXNrLl9fdmFsdWVTZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJnZXRtZXRhZGF0YVwiOlxuICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkobWFza3NldC5tZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tUYXJnZXQgPSBnZXRNYXNrVGVtcGxhdGUodHJ1ZSwgMCwgZmFsc2UpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXNrc2V0Lm1ldGFkYXRhLCBmdW5jdGlvbihuZHgsIG10ZHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdGR0Lm1hc2sgPT09IG1hc2tUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVGFyZ2V0ID0gbXRkdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFza1RhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQubWV0YWRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElucHV0bWFzaztcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9leHBhbmQtbW9yZS0wYTExYTEyLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9hcnJvdy00MjEwM2RiLnBuZ1wiOyIsImltcG9ydCBub1VpU2xpZGVyIGZyb20gXCJub3Vpc2xpZGVyXCI7XHJcbmltcG9ydCB3TnVtYiBmcm9tIFwid251bWJcIjtcclxuXHJcbnZhciBzdGVwc1NsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmFuZ2Utc2xpZGVyXCIpO1xyXG5jb25zdCBsb3dlclZpZXdQcmljZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG93ZXItdmFsdWVcIik7XHJcbmNvbnN0IHVwcGVyVmlld1ByaWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN1cHBlci12YWx1ZVwiKTtcclxuY29uc3Qgdmlld05vZGVzID0gW2xvd2VyVmlld1ByaWNlLCB1cHBlclZpZXdQcmljZV1cclxuXHJcbm5vVWlTbGlkZXIuY3JlYXRlKHN0ZXBzU2xpZGVyLCB7XHJcbiAgc3RhcnQ6IFs1MDAwLCAxMDAwMF0sXHJcbiAgY29ubmVjdDogdHJ1ZSxcclxuICBmb3JtYXQ6IHdOdW1iKHsgZGVjaW1hbHM6IDAgfSksXHJcbiAgc3RlcDogMTAwLFxyXG4gIHJhbmdlOiB7XHJcbiAgICBtaW46IFszMDBdLFxyXG4gICAgbWF4OiAxNTcwMFxyXG4gIH1cclxufSk7XHJcblxyXG5zdGVwc1NsaWRlci5ub1VpU2xpZGVyLm9uKFwidXBkYXRlXCIsIGZ1bmN0aW9uKHZhbHVlcywgaGFuZGxlKSB7XHJcbiAgbGV0IHZpZXdQcmljZSA9IHZhbHVlc1toYW5kbGVdLnJlcGxhY2UoLyhcXGQpKD89KFxcZHszfSkrKFxcRHwkKSkvZywgXCIkMSBcIik7XHJcbiAgdmlld1ByaWNlICs9IFwi4oK9XCI7XHJcbiAgdmlld05vZGVzW2hhbmRsZV0udGV4dENvbnRlbnQgPSB2aWV3UHJpY2U7XHJcbn0pO1xyXG5cclxuIiwiLyohXG4gKiBHbGlkZS5qcyB2My40LjFcbiAqIChjKSAyMDEzLTIwMTkgSsSZZHJ6ZWogQ2hhxYJ1YmVrIDxqZWRyemVqLmNoYWx1YmVrQGdtYWlsLmNvbT4gKGh0dHA6Ly9qZWRyemVqY2hhbHViZWsuY29tLylcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBtb3ZlbWVudC5cbiAgICpcbiAgICogQXZhaWxhYmxlIHR5cGVzOlxuICAgKiBgc2xpZGVyYCAtIFJld2luZHMgc2xpZGVyIHRvIHRoZSBzdGFydC9lbmQgd2hlbiBpdCByZWFjaGVzIHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlLlxuICAgKiBgY2Fyb3VzZWxgIC0gQ2hhbmdlcyBzbGlkZXMgd2l0aG91dCBzdGFydGluZyBvdmVyIHdoZW4gaXQgcmVhY2hlcyB0aGUgZmlyc3Qgb3IgbGFzdCBzbGlkZS5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIHR5cGU6ICdzbGlkZXInLFxuXG4gIC8qKlxuICAgKiBTdGFydCBhdCBzcGVjaWZpYyBzbGlkZSBudW1iZXIgZGVmaW5lZCB3aXRoIHplcm8tYmFzZWQgaW5kZXguXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBzdGFydEF0OiAwLFxuXG4gIC8qKlxuICAgKiBBIG51bWJlciBvZiBzbGlkZXMgdmlzaWJsZSBvbiB0aGUgc2luZ2xlIHZpZXdwb3J0LlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgcGVyVmlldzogMSxcblxuICAvKipcbiAgICogRm9jdXMgY3VycmVudGx5IGFjdGl2ZSBzbGlkZSBhdCBhIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgdHJhY2suXG4gICAqXG4gICAqIEF2YWlsYWJsZSBpbnB1dHM6XG4gICAqIGBjZW50ZXJgIC0gQ3VycmVudCBzbGlkZSB3aWxsIGJlIGFsd2F5cyBmb2N1c2VkIGF0IHRoZSBjZW50ZXIgb2YgYSB0cmFjay5cbiAgICogYDAsMSwyLDMuLi5gIC0gQ3VycmVudCBzbGlkZSB3aWxsIGJlIGZvY3VzZWQgb24gdGhlIHNwZWNpZmllZCB6ZXJvLWJhc2VkIGluZGV4LlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfE51bWJlcn1cbiAgICovXG4gIGZvY3VzQXQ6IDAsXG5cbiAgLyoqXG4gICAqIEEgc2l6ZSBvZiB0aGUgZ2FwIGFkZGVkIGJldHdlZW4gc2xpZGVzLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgZ2FwOiAxMCxcblxuICAvKipcbiAgICogQ2hhbmdlIHNsaWRlcyBhZnRlciBhIHNwZWNpZmllZCBpbnRlcnZhbC4gVXNlIGBmYWxzZWAgZm9yIHR1cm5pbmcgb2ZmIGF1dG9wbGF5LlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfEJvb2xlYW59XG4gICAqL1xuICBhdXRvcGxheTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFN0b3AgYXV0b3BsYXkgb24gbW91c2VvdmVyIGV2ZW50LlxuICAgKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIGhvdmVycGF1c2U6IHRydWUsXG5cbiAgLyoqXG4gICAqIEFsbG93IGZvciBjaGFuZ2luZyBzbGlkZXMgd2l0aCBsZWZ0IGFuZCByaWdodCBrZXlib2FyZCBhcnJvd3MuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAga2V5Ym9hcmQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFN0b3AgcnVubmluZyBgcGVyVmlld2AgbnVtYmVyIG9mIHNsaWRlcyBmcm9tIHRoZSBlbmQuIFVzZSB0aGlzXG4gICAqIG9wdGlvbiBpZiB5b3UgZG9uJ3Qgd2FudCB0byBoYXZlIGFuIGVtcHR5IHNwYWNlIGFmdGVyXG4gICAqIGEgc2xpZGVyLiBXb3JrcyBvbmx5IHdpdGggYHNsaWRlcmAgdHlwZSBhbmQgYVxuICAgKiBub24tY2VudGVyZWQgYGZvY3VzQXRgIHNldHRpbmcuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgYm91bmQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBNaW5pbWFsIHN3aXBlIGRpc3RhbmNlIG5lZWRlZCB0byBjaGFuZ2UgdGhlIHNsaWRlLiBVc2UgYGZhbHNlYCBmb3IgdHVybmluZyBvZmYgYSBzd2lwaW5nLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfEJvb2xlYW59XG4gICAqL1xuICBzd2lwZVRocmVzaG9sZDogODAsXG5cbiAgLyoqXG4gICAqIE1pbmltYWwgbW91c2UgZHJhZyBkaXN0YW5jZSBuZWVkZWQgdG8gY2hhbmdlIHRoZSBzbGlkZS4gVXNlIGBmYWxzZWAgZm9yIHR1cm5pbmcgb2ZmIGEgZHJhZ2dpbmcuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ8Qm9vbGVhbn1cbiAgICovXG4gIGRyYWdUaHJlc2hvbGQ6IDEyMCxcblxuICAvKipcbiAgICogQSBtYXhpbXVtIG51bWJlciBvZiBzbGlkZXMgdG8gd2hpY2ggbW92ZW1lbnQgd2lsbCBiZSBtYWRlIG9uIHN3aXBpbmcgb3IgZHJhZ2dpbmcuIFVzZSBgZmFsc2VgIGZvciB1bmxpbWl0ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ8Qm9vbGVhbn1cbiAgICovXG4gIHBlclRvdWNoOiBmYWxzZSxcblxuICAvKipcbiAgICogTW92aW5nIGRpc3RhbmNlIHJhdGlvIG9mIHRoZSBzbGlkZXMgb24gYSBzd2lwaW5nIGFuZCBkcmFnZ2luZy5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHRvdWNoUmF0aW86IDAuNSxcblxuICAvKipcbiAgICogQW5nbGUgcmVxdWlyZWQgdG8gYWN0aXZhdGUgc2xpZGVzIG1vdmluZyBvbiBzd2lwaW5nIG9yIGRyYWdnaW5nLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgdG91Y2hBbmdsZTogNDUsXG5cbiAgLyoqXG4gICAqIER1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24gaW4gbWlsbGlzZWNvbmRzLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgYW5pbWF0aW9uRHVyYXRpb246IDQwMCxcblxuICAvKipcbiAgICogQWxsb3dzIGxvb3BpbmcgdGhlIGBzbGlkZXJgIHR5cGUuIFNsaWRlciB3aWxsIHJld2luZCB0byB0aGUgZmlyc3QvbGFzdCBzbGlkZSB3aGVuIGl0J3MgYXQgdGhlIHN0YXJ0L2VuZC5cbiAgICpcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqL1xuICByZXdpbmQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIER1cmF0aW9uIG9mIHRoZSByZXdpbmRpbmcgYW5pbWF0aW9uIG9mIHRoZSBgc2xpZGVyYCB0eXBlIGluIG1pbGxpc2Vjb25kcy5cbiAgICpcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHJld2luZER1cmF0aW9uOiA4MDAsXG5cbiAgLyoqXG4gICAqIEVhc2luZyBmdW5jdGlvbiBmb3IgdGhlIGFuaW1hdGlvbi5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIGFuaW1hdGlvblRpbWluZ0Z1bmM6ICdjdWJpYy1iZXppZXIoLjE2NSwgLjg0MCwgLjQ0MCwgMSknLFxuXG4gIC8qKlxuICAgKiBUaHJvdHRsZSBjb3N0bHkgZXZlbnRzIGF0IG1vc3Qgb25jZSBwZXIgZXZlcnkgd2FpdCBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICB0aHJvdHRsZTogMTAsXG5cbiAgLyoqXG4gICAqIE1vdmluZyBkaXJlY3Rpb24gbW9kZS5cbiAgICpcbiAgICogQXZhaWxhYmxlIGlucHV0czpcbiAgICogLSAnbHRyJyAtIGxlZnQgdG8gcmlnaHQgbW92ZW1lbnQsXG4gICAqIC0gJ3J0bCcgLSByaWdodCB0byBsZWZ0IG1vdmVtZW50LlxuICAgKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgZGlyZWN0aW9uOiAnbHRyJyxcblxuICAvKipcbiAgICogVGhlIGRpc3RhbmNlIHZhbHVlIG9mIHRoZSBuZXh0IGFuZCBwcmV2aW91cyB2aWV3cG9ydHMgd2hpY2hcbiAgICogaGF2ZSB0byBwZWVrIGluIHRoZSBjdXJyZW50IHZpZXcuIEFjY2VwdHMgbnVtYmVyIGFuZFxuICAgKiBwaXhlbHMgYXMgYSBzdHJpbmcuIExlZnQgYW5kIHJpZ2h0IHBlZWtpbmcgY2FuIGJlXG4gICAqIHNldCB1cCBzZXBhcmF0ZWx5IHdpdGggYSBkaXJlY3Rpb25zIG9iamVjdC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGU6XG4gICAqIGAxMDBgIC0gUGVlayAxMDBweCBvbiB0aGUgYm90aCBzaWRlcy5cbiAgICogeyBiZWZvcmU6IDEwMCwgYWZ0ZXI6IDUwIH1gIC0gUGVlayAxMDBweCBvbiB0aGUgbGVmdCBzaWRlIGFuZCA1MHB4IG9uIHRoZSByaWdodCBzaWRlLlxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfFN0cmluZ3xPYmplY3R9XG4gICAqL1xuICBwZWVrOiAwLFxuXG4gIC8qKlxuICAgKiBDb2xsZWN0aW9uIG9mIG9wdGlvbnMgYXBwbGllZCBhdCBzcGVjaWZpZWQgbWVkaWEgYnJlYWtwb2ludHMuXG4gICAqIEZvciBleGFtcGxlOiBkaXNwbGF5IHR3byBzbGlkZXMgcGVyIHZpZXcgdW5kZXIgODAwcHguXG4gICAqIGB7XG4gICAqICAgJzgwMHB4Jzoge1xuICAgKiAgICAgcGVyVmlldzogMlxuICAgKiAgIH1cbiAgICogfWBcbiAgICovXG4gIGJyZWFrcG9pbnRzOiB7fSxcblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBpbnRlcm5hbGx5IHVzZWQgSFRNTCBjbGFzc2VzLlxuICAgKlxuICAgKiBAdG9kbyBSZWZhY3RvciBgc2xpZGVyYCBhbmQgYGNhcm91c2VsYCBwcm9wZXJ0aWVzIHRvIHNpbmdsZSBgdHlwZTogeyBzbGlkZXI6ICcnLCBjYXJvdXNlbDogJycgfWAgb2JqZWN0XG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBjbGFzc2VzOiB7XG4gICAgZGlyZWN0aW9uOiB7XG4gICAgICBsdHI6ICdnbGlkZS0tbHRyJyxcbiAgICAgIHJ0bDogJ2dsaWRlLS1ydGwnXG4gICAgfSxcbiAgICBzbGlkZXI6ICdnbGlkZS0tc2xpZGVyJyxcbiAgICBjYXJvdXNlbDogJ2dsaWRlLS1jYXJvdXNlbCcsXG4gICAgc3dpcGVhYmxlOiAnZ2xpZGUtLXN3aXBlYWJsZScsXG4gICAgZHJhZ2dpbmc6ICdnbGlkZS0tZHJhZ2dpbmcnLFxuICAgIGNsb25lU2xpZGU6ICdnbGlkZV9fc2xpZGUtLWNsb25lJyxcbiAgICBhY3RpdmVOYXY6ICdnbGlkZV9fYnVsbGV0LS1hY3RpdmUnLFxuICAgIGFjdGl2ZVNsaWRlOiAnZ2xpZGVfX3NsaWRlLS1hY3RpdmUnLFxuICAgIGRpc2FibGVkQXJyb3c6ICdnbGlkZV9fYXJyb3ctLWRpc2FibGVkJ1xuICB9XG59O1xuXG4vKipcbiAqIE91dHB1dHMgd2FybmluZyBtZXNzYWdlIHRvIHRoZSBib3dzZXIgY29uc29sZS5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG1zZ1xuICogQHJldHVybiB7Vm9pZH1cbiAqL1xuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgY29uc29sZS5lcnJvcihcIltHbGlkZSB3YXJuXTogXCIgKyBtc2cpO1xufVxuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcblxuICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykge1xuICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDtcblxuICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpO1xuICB9XG59O1xuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB2YWx1ZSBlbnRlcmVkIGFzIG51bWJlclxuICogb3Igc3RyaW5nIHRvIGludGVnZXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7TnVtYmVyfVxuICovXG5mdW5jdGlvbiB0b0ludCh2YWx1ZSkge1xuICByZXR1cm4gcGFyc2VJbnQodmFsdWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHZhbHVlIGVudGVyZWQgYXMgbnVtYmVyXG4gKiBvciBzdHJpbmcgdG8gZmxhdCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHRvRmxvYXQodmFsdWUpIHtcbiAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7Kn0gICB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtICB7Kn0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmVcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcblxuICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIXZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1peGVkLW9wZXJhdG9yc1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBudW1iZXIuXG4gKlxuICogQHBhcmFtICB7Kn0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHsqfSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSAgeyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSAgeyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgc3BlY2lmaWVkIGNvbGxlY3Rpb24gb2YgZXh0ZW5zaW9ucy5cbiAqIEVhY2ggZXh0ZW5zaW9uIHJlY2VpdmVzIGFjY2VzcyB0byBpbnN0YW5jZSBvZiBnbGlkZSBhbmQgcmVzdCBvZiBjb21wb25lbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBnbGlkZVxuICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnNcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBtb3VudChnbGlkZSwgZXh0ZW5zaW9ucywgZXZlbnRzKSB7XG4gIHZhciBjb21wb25lbnRzID0ge307XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBleHRlbnNpb25zKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZXh0ZW5zaW9uc1tuYW1lXSkpIHtcbiAgICAgIGNvbXBvbmVudHNbbmFtZV0gPSBleHRlbnNpb25zW25hbWVdKGdsaWRlLCBjb21wb25lbnRzLCBldmVudHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKCdFeHRlbnNpb24gbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX25hbWUgaW4gY29tcG9uZW50cykge1xuICAgIGlmIChpc0Z1bmN0aW9uKGNvbXBvbmVudHNbX25hbWVdLm1vdW50KSkge1xuICAgICAgY29tcG9uZW50c1tfbmFtZV0ubW91bnQoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29tcG9uZW50cztcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGdldHRlciBhbmQgc2V0dGVyIHByb3BlcnR5IG9uIHRoZSBzcGVjaWZpZWQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqICAgICAgICAgT2JqZWN0IHdoZXJlIHByb3BlcnR5IGhhcyB0byBiZSBkZWZpbmVkLlxuICogQHBhcmFtICB7U3RyaW5nfSBwcm9wICAgICAgICBOYW1lIG9mIHRoZSBkZWZpbmVkIHByb3BlcnR5LlxuICogQHBhcmFtICB7T2JqZWN0fSBkZWZpbml0aW9uICBHZXQgYW5kIHNldCBkZWZpbml0aW9ucyBmb3IgdGhlIHByb3BlcnR5LlxuICogQHJldHVybiB7Vm9pZH1cbiAqL1xuZnVuY3Rpb24gZGVmaW5lKG9iaiwgcHJvcCwgZGVmaW5pdGlvbikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBkZWZpbml0aW9uKTtcbn1cblxuLyoqXG4gKiBTb3J0cyBhcGhhYmV0aWNhbGx5IG9iamVjdCBrZXlzLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHNvcnRLZXlzKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5zb3J0KCkucmVkdWNlKGZ1bmN0aW9uIChyLCBrKSB7XG4gICAgcltrXSA9IG9ialtrXTtcblxuICAgIHJldHVybiByW2tdLCByO1xuICB9LCB7fSk7XG59XG5cbi8qKlxuICogTWVyZ2VzIHBhc3NlZCBzZXR0aW5ncyBvYmplY3Qgd2l0aCBkZWZhdWx0IG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBkZWZhdWx0c1xuICogQHBhcmFtICB7T2JqZWN0fSBzZXR0aW5nc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIHNldHRpbmdzKSB7XG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBzZXR0aW5ncyk7XG5cbiAgLy8gYE9iamVjdC5hc3NpZ25gIGRvIG5vdCBkZWVwbHkgbWVyZ2Ugb2JqZWN0cywgc28gd2VcbiAgLy8gaGF2ZSB0byBkbyBpdCBtYW51YWxseSBmb3IgZXZlcnkgbmVzdGVkIG9iamVjdFxuICAvLyBpbiBvcHRpb25zLiBBbHRob3VnaCBpdCBkb2VzIG5vdCBsb29rIHNtYXJ0LFxuICAvLyBpdCdzIHNtYWxsZXIgYW5kIGZhc3RlciB0aGFuIHNvbWUgZmFuY3lcbiAgLy8gbWVyZ2luZyBkZWVwLW1lcmdlIGFsZ29yaXRobSBzY3JpcHQuXG4gIGlmIChzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eSgnY2xhc3NlcycpKSB7XG4gICAgb3B0aW9ucy5jbGFzc2VzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLmNsYXNzZXMsIHNldHRpbmdzLmNsYXNzZXMpO1xuXG4gICAgaWYgKHNldHRpbmdzLmNsYXNzZXMuaGFzT3duUHJvcGVydHkoJ2RpcmVjdGlvbicpKSB7XG4gICAgICBvcHRpb25zLmNsYXNzZXMuZGlyZWN0aW9uID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLmNsYXNzZXMuZGlyZWN0aW9uLCBzZXR0aW5ncy5jbGFzc2VzLmRpcmVjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KCdicmVha3BvaW50cycpKSB7XG4gICAgb3B0aW9ucy5icmVha3BvaW50cyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cy5icmVha3BvaW50cywgc2V0dGluZ3MuYnJlYWtwb2ludHMpO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbnZhciBFdmVudHNCdXMgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBFdmVudEJ1cyBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50c1xuICAgKi9cbiAgZnVuY3Rpb24gRXZlbnRzQnVzKCkge1xuICAgIHZhciBldmVudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50c0J1cyk7XG5cbiAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgICB0aGlzLmhvcCA9IGV2ZW50cy5oYXNPd25Qcm9wZXJ0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGxpc3RlbmVyIHRvIHRoZSBzcGVjaWZlZCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGV2ZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG5cblxuICBjcmVhdGVDbGFzcyhFdmVudHNCdXMsIFt7XG4gICAga2V5OiAnb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgaGFuZGxlcikge1xuICAgICAgaWYgKGlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLm9uKGV2ZW50W2ldLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgdGhlIGV2ZW50J3Mgb2JqZWN0IGlmIG5vdCB5ZXQgY3JlYXRlZFxuICAgICAgaWYgKCF0aGlzLmhvcC5jYWxsKHRoaXMuZXZlbnRzLCBldmVudCkpIHtcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0gW107XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB0aGUgaGFuZGxlciB0byBxdWV1ZVxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5ldmVudHNbZXZlbnRdLnB1c2goaGFuZGxlcikgLSAxO1xuXG4gICAgICAvLyBQcm92aWRlIGhhbmRsZSBiYWNrIGZvciByZW1vdmFsIG9mIGV2ZW50XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5ldmVudHNbZXZlbnRdW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW5zIHJlZ2lzdGVyZWQgaGFuZGxlcnMgZm9yIHNwZWNpZmllZCBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBldmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlbWl0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChldmVudCwgY29udGV4dCkge1xuICAgICAgaWYgKGlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmVtaXQoZXZlbnRbaV0sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBldmVudCBkb2Vzbid0IGV4aXN0LCBvciB0aGVyZSdzIG5vIGhhbmRsZXJzIGluIHF1ZXVlLCBqdXN0IGxlYXZlXG4gICAgICBpZiAoIXRoaXMuaG9wLmNhbGwodGhpcy5ldmVudHMsIGV2ZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEN5Y2xlIHRocm91Z2ggZXZlbnRzIHF1ZXVlLCBmaXJlIVxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaXRlbShjb250ZXh0IHx8IHt9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRXZlbnRzQnVzO1xufSgpO1xuXG52YXIgR2xpZGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdCBnbGlkZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gc2VsZWN0b3JcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcclxuICAgKi9cbiAgZnVuY3Rpb24gR2xpZGUoc2VsZWN0b3IpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xpZGUpO1xuXG4gICAgdGhpcy5fYyA9IHt9O1xuICAgIHRoaXMuX3QgPSBbXTtcbiAgICB0aGlzLl9lID0gbmV3IEV2ZW50c0J1cygpO1xuXG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB0aGlzLnNldHRpbmdzID0gbWVyZ2VPcHRpb25zKGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLmluZGV4ID0gdGhpcy5zZXR0aW5ncy5zdGFydEF0O1xuICB9XG5cbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZXMgZ2xpZGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZXh0ZW5zaW9ucyBDb2xsZWN0aW9uIG9mIGV4dGVuc2lvbnMgdG8gaW5pdGlhbGl6ZS5cclxuICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgKi9cblxuXG4gIGNyZWF0ZUNsYXNzKEdsaWRlLCBbe1xuICAgIGtleTogJ21vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW91bnQkJDEoKSB7XG4gICAgICB2YXIgZXh0ZW5zaW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgIHRoaXMuX2UuZW1pdCgnbW91bnQuYmVmb3JlJyk7XG5cbiAgICAgIGlmIChpc09iamVjdChleHRlbnNpb25zKSkge1xuICAgICAgICB0aGlzLl9jID0gbW91bnQodGhpcywgZXh0ZW5zaW9ucywgdGhpcy5fZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKCdZb3UgbmVlZCB0byBwcm92aWRlIGEgb2JqZWN0IG9uIGBtb3VudCgpYCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lLmVtaXQoJ21vdW50LmFmdGVyJyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogQ29sbGVjdHMgYW4gaW5zdGFuY2UgYHRyYW5zbGF0ZWAgdHJhbnNmb3JtZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAge0FycmF5fSB0cmFuc2Zvcm1lcnMgQ29sbGVjdGlvbiBvZiB0cmFuc2Zvcm1lcnMuXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ211dGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG11dGF0ZSgpIHtcbiAgICAgIHZhciB0cmFuc2Zvcm1lcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG4gICAgICBpZiAoaXNBcnJheSh0cmFuc2Zvcm1lcnMpKSB7XG4gICAgICAgIHRoaXMuX3QgPSB0cmFuc2Zvcm1lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKCdZb3UgbmVlZCB0byBwcm92aWRlIGEgYXJyYXkgb24gYG11dGF0ZSgpYCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgZ2xpZGUgd2l0aCBzcGVjaWZpZWQgc2V0dGluZ3MuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzXHJcbiAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgc2V0dGluZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICB0aGlzLnNldHRpbmdzID0gbWVyZ2VPcHRpb25zKHRoaXMuc2V0dGluZ3MsIHNldHRpbmdzKTtcblxuICAgICAgaWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KCdzdGFydEF0JykpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IHNldHRpbmdzLnN0YXJ0QXQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2UuZW1pdCgndXBkYXRlJyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlIHNsaWRlIHdpdGggc3BlY2lmaWVkIHBhdHRlcm4uIEEgcGF0dGVybiBtdXN0IGJlIGluIHRoZSBzcGVjaWFsIGZvcm1hdDpcclxuICAgICAqIGA+YCAtIE1vdmUgb25lIGZvcndhcmRcclxuICAgICAqIGA8YCAtIE1vdmUgb25lIGJhY2t3YXJkXHJcbiAgICAgKiBgPXtpfWAgLSBHbyB0byB7aX0gemVyby1iYXNlZCBzbGlkZSAoZXEuICc9MScsIHdpbGwgZ28gdG8gc2Vjb25kIHNsaWRlKVxyXG4gICAgICogYD4+YCAtIFJld2luZHMgdG8gZW5kIChsYXN0IHNsaWRlKVxyXG4gICAgICogYDw8YCAtIFJld2luZHMgdG8gc3RhcnQgKGZpcnN0IHNsaWRlKVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuXHJcbiAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdvKHBhdHRlcm4pIHtcbiAgICAgIHRoaXMuX2MuUnVuLm1ha2UocGF0dGVybik7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogTW92ZSB0cmFjayBieSBzcGVjaWZpZWQgZGlzdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRpc3RhbmNlXHJcbiAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZShkaXN0YW5jZSkge1xuICAgICAgdGhpcy5fYy5UcmFuc2l0aW9uLmRpc2FibGUoKTtcbiAgICAgIHRoaXMuX2MuTW92ZS5tYWtlKGRpc3RhbmNlKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95IGluc3RhbmNlIGFuZCByZXZlcnQgYWxsIGNoYW5nZXMgZG9uZSBieSB0aGlzLl9jLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5fZS5lbWl0KCdkZXN0cm95Jyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU3RhcnQgaW5zdGFuY2UgYXV0b3BsYXlpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gaW50ZXJ2YWwgUnVuIGF1dG9wbGF5aW5nIHdpdGggcGFzc2VkIGludGVydmFsIHJlZ2FyZGxlc3Mgb2YgYGF1dG9wbGF5YCBzZXR0aW5nc1xyXG4gICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncGxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB2YXIgaW50ZXJ2YWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgICBpZiAoaW50ZXJ2YWwpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5hdXRvcGxheSA9IGludGVydmFsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lLmVtaXQoJ3BsYXknKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wIGluc3RhbmNlIGF1dG9wbGF5aW5nLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLl9lLmVtaXQoJ3BhdXNlJyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2V0cyBnbGlkZSBpbnRvIGEgaWRsZSBzdGF0dXMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGdsaWRlIGludG8gYSBhY3RpdmUgc3RhdHVzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGN1dXRvbSBldmVudCBsaXN0ZW5lciB3aXRoIGhhbmRsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfEFycmF5fSBldmVudFxyXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXJcclxuICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX2Uub24oZXZlbnQsIGhhbmRsZXIpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiBnbGlkZSBpcyBhIHByZWNpc2VkIHR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzVHlwZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzVHlwZShuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy50eXBlID09PSBuYW1lO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgY29yZSBvcHRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXR0aW5ncycsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbztcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFNldHMgdmFsdWUgb2YgdGhlIGNvcmUgb3B0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9cclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEobykge1xuICAgICAgaWYgKGlzT2JqZWN0KG8pKSB7XG4gICAgICAgIHRoaXMuX28gPSBvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybignT3B0aW9ucyBtdXN0IGJlIGFuIGBvYmplY3RgIGluc3RhbmNlLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogR2V0cyBjdXJyZW50IGluZGV4IG9mIHRoZSBzbGlkZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2V0cyBjdXJyZW50IGluZGV4IGEgc2xpZGVyLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShpKSB7XG4gICAgICB0aGlzLl9pID0gdG9JbnQoaSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHR5cGUgbmFtZSBvZiB0aGUgc2xpZGVyLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0eXBlJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnR5cGU7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBpZGxlIHN0YXR1cy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVkJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgaWRsZSBzdGF0dXMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShzdGF0dXMpIHtcbiAgICAgIHRoaXMuX2QgPSAhIXN0YXR1cztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEdsaWRlO1xufSgpO1xuXG5mdW5jdGlvbiBSdW4gKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgdmFyIFJ1biA9IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhdXRvcnVubmluZyBvZiB0aGUgZ2xpZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgIHRoaXMuX28gPSBmYWxzZTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBnbGlkZXMgcnVubmluZyBiYXNlZCBvbiB0aGUgcGFzc2VkIG1vdmluZyBzY2hlbWEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbW92ZVxuICAgICAqL1xuICAgIG1ha2U6IGZ1bmN0aW9uIG1ha2UobW92ZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCFHbGlkZS5kaXNhYmxlZCkge1xuICAgICAgICBHbGlkZS5kaXNhYmxlKCk7XG5cbiAgICAgICAgdGhpcy5tb3ZlID0gbW92ZTtcblxuICAgICAgICBFdmVudHMuZW1pdCgncnVuLmJlZm9yZScsIHRoaXMubW92ZSk7XG5cbiAgICAgICAgdGhpcy5jYWxjdWxhdGUoKTtcblxuICAgICAgICBFdmVudHMuZW1pdCgncnVuJywgdGhpcy5tb3ZlKTtcblxuICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5pc1N0YXJ0KCkpIHtcbiAgICAgICAgICAgIEV2ZW50cy5lbWl0KCdydW4uc3RhcnQnLCBfdGhpcy5tb3ZlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3RoaXMuaXNFbmQoKSkge1xuICAgICAgICAgICAgRXZlbnRzLmVtaXQoJ3J1bi5lbmQnLCBfdGhpcy5tb3ZlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3RoaXMuaXNPZmZzZXQoJzwnKSB8fCBfdGhpcy5pc09mZnNldCgnPicpKSB7XG4gICAgICAgICAgICBfdGhpcy5fbyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLm9mZnNldCcsIF90aGlzLm1vdmUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEV2ZW50cy5lbWl0KCdydW4uYWZ0ZXInLCBfdGhpcy5tb3ZlKTtcblxuICAgICAgICAgIEdsaWRlLmVuYWJsZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGN1cnJlbnQgaW5kZXggYmFzZWQgb24gZGVmaW5lZCBtb3ZlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBjYWxjdWxhdGU6IGZ1bmN0aW9uIGNhbGN1bGF0ZSgpIHtcbiAgICAgIHZhciBtb3ZlID0gdGhpcy5tb3ZlLFxuICAgICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgdmFyIHN0ZXBzID0gbW92ZS5zdGVwcyxcbiAgICAgICAgICBkaXJlY3Rpb24gPSBtb3ZlLmRpcmVjdGlvbjtcblxuXG4gICAgICB2YXIgY291bnRhYmxlU3RlcHMgPSBpc051bWJlcih0b0ludChzdGVwcykpICYmIHRvSW50KHN0ZXBzKSAhPT0gMDtcblxuICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgaWYgKHN0ZXBzID09PSAnPicpIHtcbiAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0VuZCgpKSB7XG4gICAgICAgICAgICBpZiAoIShHbGlkZS5pc1R5cGUoJ3NsaWRlcicpICYmICFHbGlkZS5zZXR0aW5ncy5yZXdpbmQpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX28gPSB0cnVlO1xuXG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50YWJsZVN0ZXBzKSB7XG4gICAgICAgICAgICBHbGlkZS5pbmRleCArPSBNYXRoLm1pbihsZW5ndGggLSBHbGlkZS5pbmRleCwgLXRvSW50KHN0ZXBzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEdsaWRlLmluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGlmIChzdGVwcyA9PT0gJzwnKSB7XG4gICAgICAgICAgICBHbGlkZS5pbmRleCA9IDA7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU3RhcnQoKSkge1xuICAgICAgICAgICAgaWYgKCEoR2xpZGUuaXNUeXBlKCdzbGlkZXInKSAmJiAhR2xpZGUuc2V0dGluZ3MucmV3aW5kKSkge1xuICAgICAgICAgICAgICB0aGlzLl9vID0gdHJ1ZTtcblxuICAgICAgICAgICAgICBHbGlkZS5pbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50YWJsZVN0ZXBzKSB7XG4gICAgICAgICAgICBHbGlkZS5pbmRleCAtPSBNYXRoLm1pbihHbGlkZS5pbmRleCwgdG9JbnQoc3RlcHMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgR2xpZGUuaW5kZXgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnPSc6XG4gICAgICAgICAgR2xpZGUuaW5kZXggPSBzdGVwcztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHdhcm4oJ0ludmFsaWQgZGlyZWN0aW9uIHBhdHRlcm4gWycgKyBkaXJlY3Rpb24gKyBzdGVwcyArICddIGhhcyBiZWVuIHVzZWQnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgd2UgYXJlIG9uIHRoZSBmaXJzdCBzbGlkZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNTdGFydDogZnVuY3Rpb24gaXNTdGFydCgpIHtcbiAgICAgIHJldHVybiBHbGlkZS5pbmRleCA9PT0gMDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgd2UgYXJlIG9uIHRoZSBsYXN0IHNsaWRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0VuZDogZnVuY3Rpb24gaXNFbmQoKSB7XG4gICAgICByZXR1cm4gR2xpZGUuaW5kZXggPT09IHRoaXMubGVuZ3RoO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB3ZSBhcmUgbWFraW5nIGEgb2Zmc2V0IHJ1bi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb25cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzT2Zmc2V0OiBmdW5jdGlvbiBpc09mZnNldChkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVybiB0aGlzLl9vICYmIHRoaXMubW92ZS5kaXJlY3Rpb24gPT09IGRpcmVjdGlvbjtcbiAgICB9XG4gIH07XG5cbiAgZGVmaW5lKFJ1biwgJ21vdmUnLCB7XG4gICAgLyoqXG4gICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgbW92ZSBzY2hlbWEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX207XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgbW92ZSBzY2hlbWEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICB2YXIgc3RlcCA9IHZhbHVlLnN1YnN0cigxKTtcblxuICAgICAgdGhpcy5fbSA9IHtcbiAgICAgICAgZGlyZWN0aW9uOiB2YWx1ZS5zdWJzdHIoMCwgMSksXG4gICAgICAgIHN0ZXBzOiBzdGVwID8gdG9JbnQoc3RlcCkgPyB0b0ludChzdGVwKSA6IHN0ZXAgOiAwXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgZGVmaW5lKFJ1biwgJ2xlbmd0aCcsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBydW5uaW5nIGRpc3RhbmNlIGJhc2VkXG4gICAgICogb24gemVyby1pbmRleGluZyBudW1iZXIgb2Ygc2xpZGVzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG4gICAgICB2YXIgbGVuZ3RoID0gQ29tcG9uZW50cy5IdG1sLnNsaWRlcy5sZW5ndGg7XG5cbiAgICAgIC8vIElmIHRoZSBgYm91bmRgIG9wdGlvbiBpcyBhY2l0dmUsIGEgbWF4aW11bSBydW5uaW5nIGRpc3RhbmNlIHNob3VsZCBiZVxuICAgICAgLy8gcmVkdWNlZCBieSBgcGVyVmlld2AgYW5kIGBmb2N1c0F0YCBzZXR0aW5ncy4gUnVubmluZyBkaXN0YW5jZVxuICAgICAgLy8gc2hvdWxkIGVuZCBiZWZvcmUgY3JlYXRpbmcgYW4gZW1wdHkgc3BhY2UgYWZ0ZXIgaW5zdGFuY2UuXG5cbiAgICAgIGlmIChHbGlkZS5pc1R5cGUoJ3NsaWRlcicpICYmIHNldHRpbmdzLmZvY3VzQXQgIT09ICdjZW50ZXInICYmIHNldHRpbmdzLmJvdW5kKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggLSAxIC0gKHRvSW50KHNldHRpbmdzLnBlclZpZXcpIC0gMSkgKyB0b0ludChzZXR0aW5ncy5mb2N1c0F0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxlbmd0aCAtIDE7XG4gICAgfVxuICB9KTtcblxuICBkZWZpbmUoUnVuLCAnb2Zmc2V0Jywge1xuICAgIC8qKlxuICAgICAqIEdldHMgc3RhdHVzIG9mIHRoZSBvZmZzZXR0aW5nIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX287XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gUnVuO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBjdXJyZW50IHRpbWUuXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZFxuICogYXQgbW9zdCBvbmNlIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAqIEBwYXJhbSB7TnVtYmVyfSB3YWl0XG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlXG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIHRpbWVvdXQgPSB2b2lkIDAsXG4gICAgICBjb250ZXh0ID0gdm9pZCAwLFxuICAgICAgYXJncyA9IHZvaWQgMCxcbiAgICAgIHJlc3VsdCA9IHZvaWQgMDtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cbiAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IG5vdygpO1xuICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gIH07XG5cbiAgdmFyIHRocm90dGxlZCA9IGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICB2YXIgYXQgPSBub3coKTtcbiAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gYXQ7XG4gICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAoYXQgLSBwcmV2aW91cyk7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzID0gYXQ7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdGhyb3R0bGVkLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgcHJldmlvdXMgPSAwO1xuICAgIHRpbWVvdXQgPSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHRocm90dGxlZDtcbn1cblxudmFyIE1BUkdJTl9UWVBFID0ge1xuICBsdHI6IFsnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddLFxuICBydGw6IFsnbWFyZ2luUmlnaHQnLCAnbWFyZ2luTGVmdCddXG59O1xuXG5mdW5jdGlvbiBHYXBzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gIHZhciBHYXBzID0ge1xuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZ2FwcyBiZXR3ZWVuIHNsaWRlcy4gRmlyc3QgYW5kIGxhc3RcbiAgICAgKiBzbGlkZXMgZG8gbm90IHJlY2VpdmUgaXQncyBlZGdlIG1hcmdpbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxDb2xsZWN0aW9ufSBzbGlkZXNcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseShzbGlkZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzbGlkZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHN0eWxlID0gc2xpZGVzW2ldLnN0eWxlO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gQ29tcG9uZW50cy5EaXJlY3Rpb24udmFsdWU7XG5cbiAgICAgICAgaWYgKGkgIT09IDApIHtcbiAgICAgICAgICBzdHlsZVtNQVJHSU5fVFlQRVtkaXJlY3Rpb25dWzBdXSA9IHRoaXMudmFsdWUgLyAyICsgJ3B4JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZVtNQVJHSU5fVFlQRVtkaXJlY3Rpb25dWzBdXSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGkgIT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgc3R5bGVbTUFSR0lOX1RZUEVbZGlyZWN0aW9uXVsxXV0gPSB0aGlzLnZhbHVlIC8gMiArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVbTUFSR0lOX1RZUEVbZGlyZWN0aW9uXVsxXV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZ2FwcyBmcm9tIHRoZSBzbGlkZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxDb2xsZWN0aW9ufSBzbGlkZXNcbiAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKHNsaWRlcykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgc3R5bGUgPSBzbGlkZXNbaV0uc3R5bGU7XG5cbiAgICAgICAgc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgICAgICBzdHlsZS5tYXJnaW5SaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkZWZpbmUoR2FwcywgJ3ZhbHVlJywge1xuICAgIC8qKlxuICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIGdhcC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdG9JbnQoR2xpZGUuc2V0dGluZ3MuZ2FwKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlZmluZShHYXBzLCAnZ3JvdycsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGFkZGl0aW9uYWwgZGltZW50aW9ucyB2YWx1ZSBjYXVzZWQgYnkgZ2Fwcy5cbiAgICAgKiBVc2VkIHRvIGluY3JlYXNlIHdpZHRoIG9mIHRoZSBzbGlkZXMgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gR2Fwcy52YWx1ZSAqIChDb21wb25lbnRzLlNpemVzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgfSk7XG5cbiAgZGVmaW5lKEdhcHMsICdyZWR1Y3RvcicsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIHJlZHVjdGlvbiB2YWx1ZSBjYXVzZWQgYnkgZ2Fwcy5cbiAgICAgKiBVc2VkIHRvIHN1YnRyYWN0IHdpZHRoIG9mIHRoZSBzbGlkZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHBlclZpZXcgPSBHbGlkZS5zZXR0aW5ncy5wZXJWaWV3O1xuXG4gICAgICByZXR1cm4gR2Fwcy52YWx1ZSAqIChwZXJWaWV3IC0gMSkgLyBwZXJWaWV3O1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFwcGx5IGNhbGN1bGF0ZWQgZ2FwczpcbiAgICogLSBhZnRlciBidWlsZGluZywgc28gc2xpZGVzIChpbmNsdWRpbmcgY2xvbmVzKSB3aWxsIHJlY2VpdmUgcHJvcGVyIG1hcmdpbnNcbiAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJLCB0byByZWNhbGN1bGF0ZSBnYXBzIHdpdGggbmV3IG9wdGlvbnNcbiAgICovXG4gIEV2ZW50cy5vbihbJ2J1aWxkLmFmdGVyJywgJ3VwZGF0ZSddLCB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgR2Fwcy5hcHBseShDb21wb25lbnRzLkh0bWwud3JhcHBlci5jaGlsZHJlbik7XG4gIH0sIDMwKSk7XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBnYXBzOlxuICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0YWwgc3RhdGVcbiAgICovXG4gIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICBHYXBzLnJlbW92ZShDb21wb25lbnRzLkh0bWwud3JhcHBlci5jaGlsZHJlbik7XG4gIH0pO1xuXG4gIHJldHVybiBHYXBzO1xufVxuXG4vKipcbiAqIEZpbmRzIHNpYmxpbmdzIG5vZGVzIG9mIHRoZSBwYXNzZWQgbm9kZS5cbiAqXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gc2libGluZ3Mobm9kZSkge1xuICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcbiAgICB2YXIgbiA9IG5vZGUucGFyZW50Tm9kZS5maXJzdENoaWxkO1xuICAgIHZhciBtYXRjaGVkID0gW107XG5cbiAgICBmb3IgKDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcpIHtcbiAgICAgIGlmIChuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IG5vZGUpIHtcbiAgICAgICAgbWF0Y2hlZC5wdXNoKG4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaGVkO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBwYXNzZWQgbm9kZSBleGlzdCBhbmQgaXMgYSB2YWxpZCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGV4aXN0KG5vZGUpIHtcbiAgaWYgKG5vZGUgJiYgbm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgVFJBQ0tfU0VMRUNUT1IgPSAnW2RhdGEtZ2xpZGUtZWw9XCJ0cmFja1wiXSc7XG5cbmZ1bmN0aW9uIEh0bWwgKEdsaWRlLCBDb21wb25lbnRzKSB7XG4gIHZhciBIdG1sID0ge1xuICAgIC8qKlxuICAgICAqIFNldHVwIHNsaWRlciBIVE1MIG5vZGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtHbGlkZX0gZ2xpZGVcbiAgICAgKi9cbiAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICB0aGlzLnJvb3QgPSBHbGlkZS5zZWxlY3RvcjtcbiAgICAgIHRoaXMudHJhY2sgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihUUkFDS19TRUxFQ1RPUik7XG4gICAgICB0aGlzLnNsaWRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMud3JhcHBlci5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICByZXR1cm4gIXNsaWRlLmNsYXNzTGlzdC5jb250YWlucyhHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmNsb25lU2xpZGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGRlZmluZShIdG1sLCAncm9vdCcsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG5vZGUgb2YgdGhlIGdsaWRlIG1haW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBIdG1sLl9yO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFNldHMgbm9kZSBvZiB0aGUgZ2xpZGUgbWFpbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24gc2V0KHIpIHtcbiAgICAgIGlmIChpc1N0cmluZyhyKSkge1xuICAgICAgICByID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4aXN0KHIpKSB7XG4gICAgICAgIEh0bWwuX3IgPSByO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybignUm9vdCBlbGVtZW50IG11c3QgYmUgYSBleGlzdGluZyBIdG1sIG5vZGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGRlZmluZShIdG1sLCAndHJhY2snLCB7XG4gICAgLyoqXG4gICAgICogR2V0cyBub2RlIG9mIHRoZSBnbGlkZSB0cmFjayB3aXRoIHNsaWRlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBIdG1sLl90O1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFNldHMgbm9kZSBvZiB0aGUgZ2xpZGUgdHJhY2sgd2l0aCBzbGlkZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodCkge1xuICAgICAgaWYgKGV4aXN0KHQpKSB7XG4gICAgICAgIEh0bWwuX3QgPSB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybignQ291bGQgbm90IGZpbmQgdHJhY2sgZWxlbWVudC4gUGxlYXNlIHVzZSAnICsgVFJBQ0tfU0VMRUNUT1IgKyAnIGF0dHJpYnV0ZS4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGRlZmluZShIdG1sLCAnd3JhcHBlcicsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG5vZGUgb2YgdGhlIHNsaWRlcyB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIEh0bWwudHJhY2suY2hpbGRyZW5bMF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gSHRtbDtcbn1cblxuZnVuY3Rpb24gUGVlayAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICB2YXIgUGVlayA9IHtcbiAgICAvKipcbiAgICAgKiBTZXR1cHMgaG93IG11Y2ggdG8gcGVlayBiYXNlZCBvbiBzZXR0aW5ncy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgdGhpcy52YWx1ZSA9IEdsaWRlLnNldHRpbmdzLnBlZWs7XG4gICAgfVxuICB9O1xuXG4gIGRlZmluZShQZWVrLCAndmFsdWUnLCB7XG4gICAgLyoqXG4gICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgcGVlay5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ8T2JqZWN0fVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFBlZWsuX3Y7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgcGVlay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmJlZm9yZSA9IHRvSW50KHZhbHVlLmJlZm9yZSk7XG4gICAgICAgIHZhbHVlLmFmdGVyID0gdG9JbnQodmFsdWUuYWZ0ZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIFBlZWsuX3YgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlZmluZShQZWVrLCAncmVkdWN0b3InLCB7XG4gICAgLyoqXG4gICAgICogR2V0cyByZWR1Y3Rpb24gdmFsdWUgY2F1c2VkIGJ5IHBlZWsuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHZhbHVlID0gUGVlay52YWx1ZTtcbiAgICAgIHZhciBwZXJWaWV3ID0gR2xpZGUuc2V0dGluZ3MucGVyVmlldztcblxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUuYmVmb3JlIC8gcGVyVmlldyArIHZhbHVlLmFmdGVyIC8gcGVyVmlldztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlICogMiAvIHBlclZpZXc7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmVjYWxjdWxhdGUgcGVla2luZyBzaXplcyBvbjpcbiAgICogLSB3aGVuIHJlc2l6aW5nIHdpbmRvdyB0byB1cGRhdGUgdG8gcHJvcGVyIHBlcmNlbnRzXG4gICAqL1xuICBFdmVudHMub24oWydyZXNpemUnLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICBQZWVrLm1vdW50KCk7XG4gIH0pO1xuXG4gIHJldHVybiBQZWVrO1xufVxuXG5mdW5jdGlvbiBNb3ZlIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gIHZhciBNb3ZlID0ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgbW92ZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgKi9cbiAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICB0aGlzLl9vID0gMDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGEgbW92ZW1lbnQgdmFsdWUgYmFzZWQgb24gcGFzc2VkIG9mZnNldCBhbmQgY3VycmVudGx5IGFjdGl2ZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gb2Zmc2V0XG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBtYWtlOiBmdW5jdGlvbiBtYWtlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAgIEV2ZW50cy5lbWl0KCdtb3ZlJywge1xuICAgICAgICBtb3ZlbWVudDogdGhpcy52YWx1ZVxuICAgICAgfSk7XG5cbiAgICAgIENvbXBvbmVudHMuVHJhbnNpdGlvbi5hZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIEV2ZW50cy5lbWl0KCdtb3ZlLmFmdGVyJywge1xuICAgICAgICAgIG1vdmVtZW50OiBfdGhpcy52YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBkZWZpbmUoTW92ZSwgJ29mZnNldCcsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIG9mZnNldCB2YWx1ZSB1c2VkIHRvIG1vZGlmeSBjdXJyZW50IHRyYW5zbGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBNb3ZlLl9vO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFNldHMgYW4gb2Zmc2V0IHZhbHVlIHVzZWQgdG8gbW9kaWZ5IGN1cnJlbnQgdHJhbnNsYXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBNb3ZlLl9vID0gIWlzVW5kZWZpbmVkKHZhbHVlKSA/IHRvSW50KHZhbHVlKSA6IDA7XG4gICAgfVxuICB9KTtcblxuICBkZWZpbmUoTW92ZSwgJ3RyYW5zbGF0ZScsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmF3IG1vdmVtZW50IHZhbHVlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aCAqIEdsaWRlLmluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgZGVmaW5lKE1vdmUsICd2YWx1ZScsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGFjdHVhbCBtb3ZlbWVudCB2YWx1ZSBjb3JyZWN0ZWQgYnkgb2Zmc2V0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgdmFyIHRyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlO1xuXG4gICAgICBpZiAoQ29tcG9uZW50cy5EaXJlY3Rpb24uaXMoJ3J0bCcpKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGUgKyBvZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2xhdGUgLSBvZmZzZXQ7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogTWFrZSBtb3ZlbWVudCB0byBwcm9wZXIgc2xpZGUgb246XG4gICAqIC0gYmVmb3JlIGJ1aWxkLCBzbyBnbGlkZSB3aWxsIHN0YXJ0IGF0IGBzdGFydEF0YCBpbmRleFxuICAgKiAtIG9uIGVhY2ggc3RhbmRhcmQgcnVuIHRvIG1vdmUgdG8gbmV3bHkgY2FsY3VsYXRlZCBpbmRleFxuICAgKi9cbiAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3J1biddLCBmdW5jdGlvbiAoKSB7XG4gICAgTW92ZS5tYWtlKCk7XG4gIH0pO1xuXG4gIHJldHVybiBNb3ZlO1xufVxuXG5mdW5jdGlvbiBTaXplcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICB2YXIgU2l6ZXMgPSB7XG4gICAgLyoqXG4gICAgICogU2V0dXBzIGRpbWVudGlvbnMgb2Ygc2xpZGVzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBzZXR1cFNsaWRlczogZnVuY3Rpb24gc2V0dXBTbGlkZXMoKSB7XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLnNsaWRlV2lkdGggKyAncHgnO1xuICAgICAgdmFyIHNsaWRlcyA9IENvbXBvbmVudHMuSHRtbC5zbGlkZXM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFNldHVwcyBkaW1lbnRpb25zIG9mIHNsaWRlcyB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBzZXR1cFdyYXBwZXI6IGZ1bmN0aW9uIHNldHVwV3JhcHBlcihkaW1lbnRpb24pIHtcbiAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLndpZHRoID0gdGhpcy53cmFwcGVyU2l6ZSArICdweCc7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhcHBsaWVkIHN0eWxlcyBmcm9tIEhUTUwgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Vm9pZH1cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH1cblxuICAgICAgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIuc3R5bGUud2lkdGggPSAnJztcbiAgICB9XG4gIH07XG5cbiAgZGVmaW5lKFNpemVzLCAnbGVuZ3RoJywge1xuICAgIC8qKlxuICAgICAqIEdldHMgY291bnQgbnVtYmVyIG9mIHRoZSBzbGlkZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gQ29tcG9uZW50cy5IdG1sLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICB9KTtcblxuICBkZWZpbmUoU2l6ZXMsICd3aWR0aCcsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIHdpZHRoIHZhbHVlIG9mIHRoZSBnbGlkZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBDb21wb25lbnRzLkh0bWwucm9vdC5vZmZzZXRXaWR0aDtcbiAgICB9XG4gIH0pO1xuXG4gIGRlZmluZShTaXplcywgJ3dyYXBwZXJTaXplJywge1xuICAgIC8qKlxuICAgICAqIEdldHMgc2l6ZSBvZiB0aGUgc2xpZGVzIHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gU2l6ZXMuc2xpZGVXaWR0aCAqIFNpemVzLmxlbmd0aCArIENvbXBvbmVudHMuR2Fwcy5ncm93ICsgQ29tcG9uZW50cy5DbG9uZXMuZ3JvdztcbiAgICB9XG4gIH0pO1xuXG4gIGRlZmluZShTaXplcywgJ3NsaWRlV2lkdGgnLCB7XG4gICAgLyoqXG4gICAgICogR2V0cyB3aWR0aCB2YWx1ZSBvZiB0aGUgc2luZ2xlIHNsaWRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFNpemVzLndpZHRoIC8gR2xpZGUuc2V0dGluZ3MucGVyVmlldyAtIENvbXBvbmVudHMuUGVlay5yZWR1Y3RvciAtIENvbXBvbmVudHMuR2Fwcy5yZWR1Y3RvcjtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBBcHBseSBjYWxjdWxhdGVkIGdsaWRlJ3MgZGltZW5zaW9uczpcbiAgICogLSBiZWZvcmUgYnVpbGRpbmcsIHNvIG90aGVyIGRpbWVudGlvbnMgKGUuZy4gdHJhbnNsYXRlKSB3aWxsIGJlIGNhbGN1bGF0ZWQgcHJvcGVydGx5XG4gICAqIC0gd2hlbiByZXNpemluZyB3aW5kb3cgdG8gcmVjYWxjdWxhdGUgc2lsZGVzIGRpbWVuc2lvbnNcbiAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJLCB0byBjYWxjdWxhdGUgZGltZW5zaW9ucyBiYXNlZCBvbiBuZXcgb3B0aW9uc1xuICAgKi9cbiAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3Jlc2l6ZScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgIFNpemVzLnNldHVwU2xpZGVzKCk7XG4gICAgU2l6ZXMuc2V0dXBXcmFwcGVyKCk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgY2FsY3VsYXRlZCBnbGlkZSdzIGRpbWVuc2lvbnM6XG4gICAqIC0gb24gZGVzdG90aW5nIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGFsIHN0YXRlXG4gICAqL1xuICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgU2l6ZXMucmVtb3ZlKCk7XG4gIH0pO1xuXG4gIHJldHVybiBTaXplcztcbn1cblxuZnVuY3Rpb24gQnVpbGQgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgdmFyIEJ1aWxkID0ge1xuICAgIC8qKlxuICAgICAqIEluaXQgZ2xpZGUgYnVpbGRpbmcuIEFkZHMgY2xhc3Nlcywgc2V0c1xuICAgICAqIGRpbWVuc2lvbnMgYW5kIHNldHVwcyBpbml0aWFsIHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICBFdmVudHMuZW1pdCgnYnVpbGQuYmVmb3JlJyk7XG5cbiAgICAgIHRoaXMudHlwZUNsYXNzKCk7XG4gICAgICB0aGlzLmFjdGl2ZUNsYXNzKCk7XG5cbiAgICAgIEV2ZW50cy5lbWl0KCdidWlsZC5hZnRlcicpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHR5cGVgIGNsYXNzIHRvIHRoZSBnbGlkZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICB0eXBlQ2xhc3M6IGZ1bmN0aW9uIHR5cGVDbGFzcygpIHtcbiAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5hZGQoR2xpZGUuc2V0dGluZ3MuY2xhc3Nlc1tHbGlkZS5zZXR0aW5ncy50eXBlXSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhY3RpdmUgY2xhc3MgdG8gY3VycmVudCBzbGlkZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgYWN0aXZlQ2xhc3M6IGZ1bmN0aW9uIGFjdGl2ZUNsYXNzKCkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBHbGlkZS5zZXR0aW5ncy5jbGFzc2VzO1xuICAgICAgdmFyIHNsaWRlID0gQ29tcG9uZW50cy5IdG1sLnNsaWRlc1tHbGlkZS5pbmRleF07XG5cbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICBzbGlkZS5jbGFzc0xpc3QuYWRkKGNsYXNzZXMuYWN0aXZlU2xpZGUpO1xuXG4gICAgICAgIHNpYmxpbmdzKHNsaWRlKS5mb3JFYWNoKGZ1bmN0aW9uIChzaWJsaW5nKSB7XG4gICAgICAgICAgc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXMuYWN0aXZlU2xpZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIEhUTUwgY2xhc3NlcyBhcHBsaWVkIGF0IGJ1aWxkaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICByZW1vdmVDbGFzc2VzOiBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBHbGlkZS5zZXR0aW5ncy5jbGFzc2VzO1xuXG4gICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXNbR2xpZGUuc2V0dGluZ3MudHlwZV0pO1xuXG4gICAgICBDb21wb25lbnRzLkh0bWwuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpYmxpbmcpIHtcbiAgICAgICAgc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXMuYWN0aXZlU2xpZGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhciBidWlsZGluZyBjbGFzc2VzOlxuICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gYnJpbmcgSFRNTCB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgKiAtIG9uIHVwZGF0aW5nIHRvIHJlbW92ZSBjbGFzc2VzIGJlZm9yZSByZW1vdW50aW5nIGNvbXBvbmVudFxuICAgKi9cbiAgRXZlbnRzLm9uKFsnZGVzdHJveScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgIEJ1aWxkLnJlbW92ZUNsYXNzZXMoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJlbW91bnQgY29tcG9uZW50OlxuICAgKiAtIG9uIHJlc2l6aW5nIG9mIHRoZSB3aW5kb3cgdG8gY2FsY3VsYXRlIG5ldyBkaW1lbnRpb25zXG4gICAqIC0gb24gdXBkYXRpbmcgc2V0dGluZ3MgdmlhIEFQSVxuICAgKi9cbiAgRXZlbnRzLm9uKFsncmVzaXplJywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgQnVpbGQubW91bnQoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFN3YXAgYWN0aXZlIGNsYXNzIG9mIGN1cnJlbnQgc2xpZGU6XG4gICAqIC0gYWZ0ZXIgZWFjaCBtb3ZlIHRvIHRoZSBuZXcgaW5kZXhcbiAgICovXG4gIEV2ZW50cy5vbignbW92ZS5hZnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICBCdWlsZC5hY3RpdmVDbGFzcygpO1xuICB9KTtcblxuICByZXR1cm4gQnVpbGQ7XG59XG5cbmZ1bmN0aW9uIENsb25lcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICB2YXIgQ2xvbmVzID0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBwYXR0ZXJuIG1hcCBhbmQgY29sbGVjdCBzbGlkZXMgdG8gYmUgY2xvbmVkLlxuICAgICAqL1xuICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgIHRoaXMuaXRlbXMgPSBbXTtcblxuICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSkge1xuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5jb2xsZWN0KCk7XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdCBjbG9uZXMgd2l0aCBwYXR0ZXJuLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBjb2xsZWN0OiBmdW5jdGlvbiBjb2xsZWN0KCkge1xuICAgICAgdmFyIGl0ZW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xuICAgICAgdmFyIF9HbGlkZSRzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzLFxuICAgICAgICAgIHBlclZpZXcgPSBfR2xpZGUkc2V0dGluZ3MucGVyVmlldyxcbiAgICAgICAgICBjbGFzc2VzID0gX0dsaWRlJHNldHRpbmdzLmNsYXNzZXM7XG5cblxuICAgICAgdmFyIHBlZWtJbmNyZW1lbnRlciA9ICshIUdsaWRlLnNldHRpbmdzLnBlZWs7XG4gICAgICB2YXIgcGFydCA9IHBlclZpZXcgKyBwZWVrSW5jcmVtZW50ZXI7XG4gICAgICB2YXIgc3RhcnQgPSBzbGlkZXMuc2xpY2UoMCwgcGFydCk7XG4gICAgICB2YXIgZW5kID0gc2xpZGVzLnNsaWNlKC1wYXJ0KTtcblxuICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHBlclZpZXcgLyBzbGlkZXMubGVuZ3RoKSk7IHIrKykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGNsb25lID0gc3RhcnRbaV0uY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgY2xvbmUuY2xhc3NMaXN0LmFkZChjbGFzc2VzLmNsb25lU2xpZGUpO1xuXG4gICAgICAgICAgaXRlbXMucHVzaChjbG9uZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZW5kLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgIHZhciBfY2xvbmUgPSBlbmRbX2ldLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgIF9jbG9uZS5jbGFzc0xpc3QuYWRkKGNsYXNzZXMuY2xvbmVTbGlkZSk7XG5cbiAgICAgICAgICBpdGVtcy51bnNoaWZ0KF9jbG9uZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBjbG9uZWQgc2xpZGVzIHdpdGggZ2VuZXJhdGVkIHBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKCkge1xuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgIHZhciBfQ29tcG9uZW50cyRIdG1sID0gQ29tcG9uZW50cy5IdG1sLFxuICAgICAgICAgIHdyYXBwZXIgPSBfQ29tcG9uZW50cyRIdG1sLndyYXBwZXIsXG4gICAgICAgICAgc2xpZGVzID0gX0NvbXBvbmVudHMkSHRtbC5zbGlkZXM7XG5cblxuICAgICAgdmFyIGhhbGYgPSBNYXRoLmZsb29yKGl0ZW1zLmxlbmd0aCAvIDIpO1xuICAgICAgdmFyIHByZXBlbmQgPSBpdGVtcy5zbGljZSgwLCBoYWxmKS5yZXZlcnNlKCk7XG4gICAgICB2YXIgYXBwZW5kID0gaXRlbXMuc2xpY2UoaGFsZiwgaXRlbXMubGVuZ3RoKTtcbiAgICAgIHZhciB3aWR0aCA9IENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aCArICdweCc7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXBwZW5kLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoYXBwZW5kW2ldKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgcHJlcGVuZC5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHdyYXBwZXIuaW5zZXJ0QmVmb3JlKHByZXBlbmRbX2kyXSwgc2xpZGVzWzBdKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgaXRlbXMubGVuZ3RoOyBfaTMrKykge1xuICAgICAgICBpdGVtc1tfaTNdLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBjbG9uZWQgc2xpZGVzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG5cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5yZW1vdmVDaGlsZChpdGVtc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGRlZmluZShDbG9uZXMsICdncm93Jywge1xuICAgIC8qKlxuICAgICAqIEdldHMgYWRkaXRpb25hbCBkaW1lbnRpb25zIHZhbHVlIGNhdXNlZCBieSBjbG9uZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gKENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aCArIENvbXBvbmVudHMuR2Fwcy52YWx1ZSkgKiBDbG9uZXMuaXRlbXMubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFwcGVuZCBhZGRpdGlvbmFsIHNsaWRlJ3MgY2xvbmVzOlxuICAgKiAtIHdoaWxlIGdsaWRlJ3MgdHlwZSBpcyBgY2Fyb3VzZWxgXG4gICAqL1xuICBFdmVudHMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICBDbG9uZXMucmVtb3ZlKCk7XG4gICAgQ2xvbmVzLm1vdW50KCk7XG4gICAgQ2xvbmVzLmFwcGVuZCgpO1xuICB9KTtcblxuICAvKipcbiAgICogQXBwZW5kIGFkZGl0aW9uYWwgc2xpZGUncyBjbG9uZXM6XG4gICAqIC0gd2hpbGUgZ2xpZGUncyB0eXBlIGlzIGBjYXJvdXNlbGBcbiAgICovXG4gIEV2ZW50cy5vbignYnVpbGQuYmVmb3JlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChHbGlkZS5pc1R5cGUoJ2Nhcm91c2VsJykpIHtcbiAgICAgIENsb25lcy5hcHBlbmQoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgY2xvbmVzIEhUTUxFbGVtZW50czpcbiAgICogLSBvbiBkZXN0cm95aW5nLCB0byBicmluZyBIVE1MIHRvIGl0cyBpbml0aWFsIHN0YXRlXG4gICAqL1xuICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgQ2xvbmVzLnJlbW92ZSgpO1xuICB9KTtcblxuICByZXR1cm4gQ2xvbmVzO1xufVxuXG52YXIgRXZlbnRzQmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgRXZlbnRzQmluZGVyIGluc3RhbmNlLlxuICAgKi9cbiAgZnVuY3Rpb24gRXZlbnRzQmluZGVyKCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50c0JpbmRlcik7XG5cbiAgICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50cyBsaXN0ZW5lcnMgdG8gYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ3xBcnJheX0gZXZlbnRzXG4gICAqIEBwYXJhbSAge0VsZW1lbnR8V2luZG93fERvY3VtZW50fSBlbFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2xvc3VyZVxuICAgKiBAcGFyYW0gIHtCb29sZWFufE9iamVjdH0gY2FwdHVyZVxuICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgKi9cblxuXG4gIGNyZWF0ZUNsYXNzKEV2ZW50c0JpbmRlciwgW3tcbiAgICBrZXk6ICdvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50cywgZWwsIGNsb3N1cmUpIHtcbiAgICAgIHZhciBjYXB0dXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcblxuICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50cykpIHtcbiAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50c1tpXV0gPSBjbG9zdXJlO1xuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCB0aGlzLmxpc3RlbmVyc1tldmVudHNbaV1dLCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBmcm9tIGFycm93cyBIVE1MIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfEFycmF5fSBldmVudHNcbiAgICAgKiBAcGFyYW0gIHtFbGVtZW50fFdpbmRvd3xEb2N1bWVudH0gZWxcbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufE9iamVjdH0gY2FwdHVyZVxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29mZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudHMsIGVsKSB7XG4gICAgICB2YXIgY2FwdHVyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgICAgIGlmIChpc1N0cmluZyhldmVudHMpKSB7XG4gICAgICAgIGV2ZW50cyA9IFtldmVudHNdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50c1tpXSwgdGhpcy5saXN0ZW5lcnNbZXZlbnRzW2ldXSwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSBjb2xsZWN0ZWQgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1ZvaWR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRXZlbnRzQmluZGVyO1xufSgpO1xuXG5mdW5jdGlvbiBSZXNpemUgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgLyoqXG4gICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAqXG4gICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAqL1xuICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gIHZhciBSZXNpemUgPSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgd2luZG93IGJpbmRpbmdzLlxuICAgICAqL1xuICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgIHRoaXMuYmluZCgpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEJpbmRzIGByZXpzaXplYCBsaXN0ZW5lciB0byB0aGUgd2luZG93LlxuICAgICAqIEl0J3MgYSBjb3N0bHkgZXZlbnQsIHNvIHdlIGFyZSBkZWJvdW5jaW5nIGl0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgQmluZGVyLm9uKCdyZXNpemUnLCB3aW5kb3csIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgRXZlbnRzLmVtaXQoJ3Jlc2l6ZScpO1xuICAgICAgfSwgR2xpZGUuc2V0dGluZ3MudGhyb3R0bGUpKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmRzIGxpc3RlbmVycyBmcm9tIHRoZSB3aW5kb3cuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgQmluZGVyLm9mZigncmVzaXplJywgd2luZG93KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBiaW5kaW5ncyBmcm9tIHdpbmRvdzpcbiAgICogLSBvbiBkZXN0cm95aW5nLCB0byByZW1vdmUgYWRkZWQgRXZlbnRMaXN0ZW5lclxuICAgKi9cbiAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgIFJlc2l6ZS51bmJpbmQoKTtcbiAgICBCaW5kZXIuZGVzdHJveSgpO1xuICB9KTtcblxuICByZXR1cm4gUmVzaXplO1xufVxuXG52YXIgVkFMSURfRElSRUNUSU9OUyA9IFsnbHRyJywgJ3J0bCddO1xudmFyIEZMSVBFRF9NT1ZFTUVOVFMgPSB7XG4gICc+JzogJzwnLFxuICAnPCc6ICc+JyxcbiAgJz0nOiAnPSdcbn07XG5cbmZ1bmN0aW9uIERpcmVjdGlvbiAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICB2YXIgRGlyZWN0aW9uID0ge1xuICAgIC8qKlxuICAgICAqIFNldHVwcyBnYXAgdmFsdWUgYmFzZWQgb24gc2V0dGluZ3MuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBHbGlkZS5zZXR0aW5ncy5kaXJlY3Rpb247XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgcGF0dGVybiBiYXNlZCBvbiBkaXJlY3Rpb24gdmFsdWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cbiAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHBhdHRlcm4pIHtcbiAgICAgIHZhciB0b2tlbiA9IHBhdHRlcm4uc2xpY2UoMCwgMSk7XG5cbiAgICAgIGlmICh0aGlzLmlzKCdydGwnKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCh0b2tlbikuam9pbihGTElQRURfTU9WRU1FTlRTW3Rva2VuXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB2YWx1ZSBvZiBkaXJlY3Rpb24gbW9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpczogZnVuY3Rpb24gaXMoZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gZGlyZWN0aW9uO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZGlyZWN0aW9uIGNsYXNzIHRvIHRoZSByb290IEhUTUwgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIGFkZENsYXNzKCkge1xuICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LmFkZChHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmRpcmVjdGlvblt0aGlzLnZhbHVlXSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBkaXJlY3Rpb24gY2xhc3MgZnJvbSB0aGUgcm9vdCBIVE1MIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcygpIHtcbiAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5yZW1vdmUoR2xpZGUuc2V0dGluZ3MuY2xhc3Nlcy5kaXJlY3Rpb25bdGhpcy52YWx1ZV0pO1xuICAgIH1cbiAgfTtcblxuICBkZWZpbmUoRGlyZWN0aW9uLCAndmFsdWUnLCB7XG4gICAgLyoqXG4gICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEaXJlY3Rpb24uX3Y7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKFZBTElEX0RJUkVDVElPTlMuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgICBEaXJlY3Rpb24uX3YgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oJ0RpcmVjdGlvbiB2YWx1ZSBtdXN0IGJlIGBsdHJgIG9yIGBydGxgJyk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogQ2xlYXIgZGlyZWN0aW9uIGNsYXNzOlxuICAgKiAtIG9uIGRlc3Ryb3kgdG8gYnJpbmcgSFRNTCB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgKiAtIG9uIHVwZGF0ZSB0byByZW1vdmUgY2xhc3MgYmVmb3JlIHJlYXBwbGluZyBiZWxsb3dcbiAgICovXG4gIEV2ZW50cy5vbihbJ2Rlc3Ryb3knLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICBEaXJlY3Rpb24ucmVtb3ZlQ2xhc3MoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJlbW91bnQgY29tcG9uZW50OlxuICAgKiAtIG9uIHVwZGF0ZSB0byByZWZsZWN0IGNoYW5nZXMgaW4gZGlyZWN0aW9uIHZhbHVlXG4gICAqL1xuICBFdmVudHMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICBEaXJlY3Rpb24ubW91bnQoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFwcGx5IGRpcmVjdGlvbiBjbGFzczpcbiAgICogLSBiZWZvcmUgYnVpbGRpbmcgdG8gYXBwbHkgY2xhc3MgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAqIC0gb24gdXBkYXRpbmcgdG8gcmVhcHBseSBkaXJlY3Rpb24gY2xhc3MgdGhhdCBtYXkgY2hhbmdlZFxuICAgKi9cbiAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgRGlyZWN0aW9uLmFkZENsYXNzKCk7XG4gIH0pO1xuXG4gIHJldHVybiBEaXJlY3Rpb247XG59XG5cbi8qKlxuICogUmVmbGVjdHMgdmFsdWUgb2YgZ2xpZGUgbW92ZW1lbnQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBHbGlkZVxuICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIFJ0bCAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBOZWdhdGVzIHRoZSBwYXNzZWQgdHJhbnNsYXRlIGlmIGdsaWRlIGlzIGluIFJUTCBvcHRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBtb2RpZnk6IGZ1bmN0aW9uIG1vZGlmeSh0cmFuc2xhdGUpIHtcbiAgICAgIGlmIChDb21wb25lbnRzLkRpcmVjdGlvbi5pcygncnRsJykpIHtcbiAgICAgICAgcmV0dXJuIC10cmFuc2xhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgZ2xpZGUgbW92ZW1lbnQgd2l0aCBhIGBnYXBgIHNldHRpbmdzLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBHYXAgKEdsaWRlLCBDb21wb25lbnRzKSB7XG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgcGFzc2VkIHRyYW5zbGF0ZSB2YWx1ZSB3aXRoIG51bWJlciBpbiB0aGUgYGdhcGAgc2V0dGluZ3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBtb2RpZnk6IGZ1bmN0aW9uIG1vZGlmeSh0cmFuc2xhdGUpIHtcbiAgICAgIHJldHVybiB0cmFuc2xhdGUgKyBDb21wb25lbnRzLkdhcHMudmFsdWUgKiBHbGlkZS5pbmRleDtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogVXBkYXRlcyBnbGlkZSBtb3ZlbWVudCB3aXRoIHdpZHRoIG9mIGFkZGl0aW9uYWwgY2xvbmVzIHdpZHRoLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBHcm93IChHbGlkZSwgQ29tcG9uZW50cykge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEFkZHMgdG8gdGhlIHBhc3NlZCB0cmFuc2xhdGUgd2lkdGggb2YgdGhlIGhhbGYgb2YgY2xvbmVzLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB0cmFuc2xhdGVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgbW9kaWZ5OiBmdW5jdGlvbiBtb2RpZnkodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gdHJhbnNsYXRlICsgQ29tcG9uZW50cy5DbG9uZXMuZ3JvdyAvIDI7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgZ2xpZGUgbW92ZW1lbnQgd2l0aCBhIGBwZWVrYCBzZXR0aW5ncy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IEdsaWRlXG4gKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gUGVla2luZyAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBwYXNzZWQgdHJhbnNsYXRlIHZhbHVlIHdpdGggYSBgcGVla2Agc2V0dGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIG1vZGlmeTogZnVuY3Rpb24gbW9kaWZ5KHRyYW5zbGF0ZSkge1xuICAgICAgaWYgKEdsaWRlLnNldHRpbmdzLmZvY3VzQXQgPj0gMCkge1xuICAgICAgICB2YXIgcGVlayA9IENvbXBvbmVudHMuUGVlay52YWx1ZTtcblxuICAgICAgICBpZiAoaXNPYmplY3QocGVlaykpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlIC0gcGVlay5iZWZvcmU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlIC0gcGVlaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogVXBkYXRlcyBnbGlkZSBtb3ZlbWVudCB3aXRoIGEgYGZvY3VzQXRgIHNldHRpbmdzLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcbiAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBGb2N1c2luZyAoR2xpZGUsIENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBwYXNzZWQgdHJhbnNsYXRlIHZhbHVlIHdpdGggaW5kZXggaW4gdGhlIGBmb2N1c0F0YCBzZXR0aW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB0cmFuc2xhdGVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgbW9kaWZ5OiBmdW5jdGlvbiBtb2RpZnkodHJhbnNsYXRlKSB7XG4gICAgICB2YXIgZ2FwID0gQ29tcG9uZW50cy5HYXBzLnZhbHVlO1xuICAgICAgdmFyIHdpZHRoID0gQ29tcG9uZW50cy5TaXplcy53aWR0aDtcbiAgICAgIHZhciBmb2N1c0F0ID0gR2xpZGUuc2V0dGluZ3MuZm9jdXNBdDtcbiAgICAgIHZhciBzbGlkZVdpZHRoID0gQ29tcG9uZW50cy5TaXplcy5zbGlkZVdpZHRoO1xuXG4gICAgICBpZiAoZm9jdXNBdCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSAtICh3aWR0aCAvIDIgLSBzbGlkZVdpZHRoIC8gMik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2xhdGUgLSBzbGlkZVdpZHRoICogZm9jdXNBdCAtIGdhcCAqIGZvY3VzQXQ7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEFwcGxpZXMgZGlmZnJlbnQgdHJhbnNmb3JtZXJzIG9uIHRyYW5zbGF0ZSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IEdsaWRlXG4gKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbXV0YXRvciAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAvKipcbiAgICogTWVyZ2UgaW5zdGFuY2UgdHJhbnNmb3JtZXJzIHdpdGggY29sbGVjdGlvbiBvZiBkZWZhdWx0IHRyYW5zZm9ybWVycy5cbiAgICogSXQncyBpbXBvcnRhbnQgdGhhdCB0aGUgUnRsIGNvbXBvbmVudCBiZSBsYXN0IG9uIHRoZSBsaXN0LFxuICAgKiBzbyBpdCByZWZsZWN0cyBhbGwgcHJldmlvdXMgdHJhbnNmb3JtYXRpb25zLlxuICAgKlxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICB2YXIgVFJBTlNGT1JNRVJTID0gW0dhcCwgR3JvdywgUGVla2luZywgRm9jdXNpbmddLmNvbmNhdChHbGlkZS5fdCwgW1J0bF0pO1xuXG4gIHJldHVybiB7XG4gICAgLyoqXG4gICAgICogUGlwbGluZXMgdHJhbnNsYXRlIHZhbHVlIHdpdGggcmVnaXN0ZXJlZCB0cmFuc2Zvcm1lcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBtdXRhdGU6IGZ1bmN0aW9uIG11dGF0ZSh0cmFuc2xhdGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgVFJBTlNGT1JNRVJTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lciA9IFRSQU5TRk9STUVSU1tpXTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0cmFuc2Zvcm1lcikgJiYgaXNGdW5jdGlvbih0cmFuc2Zvcm1lcigpLm1vZGlmeSkpIHtcbiAgICAgICAgICB0cmFuc2xhdGUgPSB0cmFuc2Zvcm1lcihHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKS5tb2RpZnkodHJhbnNsYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKCdUcmFuc2Zvcm1lciBzaG91bGQgYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggYG1vZGlmeSgpYCBtZXRob2QnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJhbnNsYXRlO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gVHJhbnNsYXRlIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gIHZhciBUcmFuc2xhdGUgPSB7XG4gICAgLyoqXG4gICAgICogU2V0cyB2YWx1ZSBvZiB0cmFuc2xhdGUgb24gSFRNTCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IG11dGF0b3IoR2xpZGUsIENvbXBvbmVudHMpLm11dGF0ZSh2YWx1ZSk7XG5cbiAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgLTEgKiB0cmFuc2Zvcm0gKyAncHgsIDBweCwgMHB4KSc7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB2YWx1ZSBvZiB0cmFuc2xhdGUgZnJvbSBIVE1MIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgbmV3IHRyYW5zbGF0ZSB2YWx1ZTpcbiAgICogLSBvbiBtb3ZlIHRvIHJlZmxlY3QgaW5kZXggY2hhbmdlXG4gICAqIC0gb24gdXBkYXRpbmcgdmlhIEFQSSB0byByZWZsZWN0IHBvc3NpYmxlIGNoYW5nZXMgaW4gb3B0aW9uc1xuICAgKi9cbiAgRXZlbnRzLm9uKCdtb3ZlJywgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgZ2FwID0gQ29tcG9uZW50cy5HYXBzLnZhbHVlO1xuICAgIHZhciBsZW5ndGggPSBDb21wb25lbnRzLlNpemVzLmxlbmd0aDtcbiAgICB2YXIgd2lkdGggPSBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGg7XG5cbiAgICBpZiAoR2xpZGUuaXNUeXBlKCdjYXJvdXNlbCcpICYmIENvbXBvbmVudHMuUnVuLmlzT2Zmc2V0KCc8JykpIHtcbiAgICAgIENvbXBvbmVudHMuVHJhbnNpdGlvbi5hZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIEV2ZW50cy5lbWl0KCd0cmFuc2xhdGUuanVtcCcpO1xuXG4gICAgICAgIFRyYW5zbGF0ZS5zZXQod2lkdGggKiAobGVuZ3RoIC0gMSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBUcmFuc2xhdGUuc2V0KC13aWR0aCAtIGdhcCAqIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSAmJiBDb21wb25lbnRzLlJ1bi5pc09mZnNldCgnPicpKSB7XG4gICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBFdmVudHMuZW1pdCgndHJhbnNsYXRlLmp1bXAnKTtcblxuICAgICAgICBUcmFuc2xhdGUuc2V0KDApO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBUcmFuc2xhdGUuc2V0KHdpZHRoICogbGVuZ3RoICsgZ2FwICogbGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gVHJhbnNsYXRlLnNldChjb250ZXh0Lm1vdmVtZW50KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0cmFuc2xhdGU6XG4gICAqIC0gb24gZGVzdHJveWluZyB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRhbCBzdGF0ZVxuICAgKi9cbiAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgIFRyYW5zbGF0ZS5yZW1vdmUoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIFRyYW5zbGF0ZTtcbn1cblxuZnVuY3Rpb24gVHJhbnNpdGlvbiAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAvKipcbiAgICogSG9sZHMgaW5hY3Rpdml0eSBzdGF0dXMgb2YgdHJhbnNpdGlvbi5cbiAgICogV2hlbiB0cnVlIHRyYW5zaXRpb24gaXMgbm90IGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgdmFyIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgdmFyIFRyYW5zaXRpb24gPSB7XG4gICAgLyoqXG4gICAgICogQ29tcG9zZXMgc3RyaW5nIG9mIHRoZSBDU1MgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBjb21wb3NlOiBmdW5jdGlvbiBjb21wb3NlKHByb3BlcnR5KSB7XG4gICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcblxuICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkgKyAnICcgKyB0aGlzLmR1cmF0aW9uICsgJ21zICcgKyBzZXR0aW5ncy5hbmltYXRpb25UaW1pbmdGdW5jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcGVydHkgKyAnIDBtcyAnICsgc2V0dGluZ3MuYW5pbWF0aW9uVGltaW5nRnVuYztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHZhbHVlIG9mIHRyYW5zaXRpb24gb24gSFRNTCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmc9fSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICB2YXIgcHJvcGVydHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICd0cmFuc2Zvcm0nO1xuXG4gICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS50cmFuc2l0aW9uID0gdGhpcy5jb21wb3NlKHByb3BlcnR5KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHZhbHVlIG9mIHRyYW5zaXRpb24gZnJvbSBIVE1MIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgY2FsbGJhY2sgYWZ0ZXIgYW5pbWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBhZnRlcjogZnVuY3Rpb24gYWZ0ZXIoY2FsbGJhY2spIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSwgdGhpcy5kdXJhdGlvbik7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIHRyYW5zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgdGhpcy5zZXQoKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHRyYW5zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICBkaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuc2V0KCk7XG4gICAgfVxuICB9O1xuXG4gIGRlZmluZShUcmFuc2l0aW9uLCAnZHVyYXRpb24nLCB7XG4gICAgLyoqXG4gICAgICogR2V0cyBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBiYXNlZFxuICAgICAqIG9uIGN1cnJlbnRseSBydW5uaW5nIGFuaW1hdGlvbiB0eXBlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG5cbiAgICAgIGlmIChHbGlkZS5pc1R5cGUoJ3NsaWRlcicpICYmIENvbXBvbmVudHMuUnVuLm9mZnNldCkge1xuICAgICAgICByZXR1cm4gc2V0dGluZ3MucmV3aW5kRHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXR0aW5ncy5hbmltYXRpb25EdXJhdGlvbjtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBTZXQgdHJhbnNpdGlvbiBgc3R5bGVgIHZhbHVlOlxuICAgKiAtIG9uIGVhY2ggbW92aW5nLCBiZWNhdXNlIGl0IG1heSBiZSBjbGVhcmVkIGJ5IG9mZnNldCBtb3ZlXG4gICAqL1xuICBFdmVudHMub24oJ21vdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgVHJhbnNpdGlvbi5zZXQoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERpc2FibGUgdHJhbnNpdGlvbjpcbiAgICogLSBiZWZvcmUgaW5pdGlhbCBidWlsZCB0byBhdm9pZCB0cmFuc2l0aW9uaW5nIGZyb20gYDBgIHRvIGBzdGFydEF0YCBpbmRleFxuICAgKiAtIHdoaWxlIHJlc2l6aW5nIHdpbmRvdyBhbmQgcmVjYWxjdWxhdGluZyBkaW1lbnRpb25zXG4gICAqIC0gb24ganVtcGluZyBmcm9tIG9mZnNldCB0cmFuc2l0aW9uIGF0IHN0YXJ0IGFuZCBlbmQgZWRnZXMgaW4gYGNhcm91c2VsYCB0eXBlXG4gICAqL1xuICBFdmVudHMub24oWydidWlsZC5iZWZvcmUnLCAncmVzaXplJywgJ3RyYW5zbGF0ZS5qdW1wJ10sIGZ1bmN0aW9uICgpIHtcbiAgICBUcmFuc2l0aW9uLmRpc2FibGUoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0cmFuc2l0aW9uOlxuICAgKiAtIG9uIGVhY2ggcnVubmluZywgYmVjYXVzZSBpdCBtYXkgYmUgZGlzYWJsZWQgYnkgb2Zmc2V0IG1vdmVcbiAgICovXG4gIEV2ZW50cy5vbigncnVuJywgZnVuY3Rpb24gKCkge1xuICAgIFRyYW5zaXRpb24uZW5hYmxlKCk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgdHJhbnNpdGlvbjpcbiAgICogLSBvbiBkZXN0cm95aW5nIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGFsIHN0YXRlXG4gICAqL1xuICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgVHJhbnNpdGlvbi5yZW1vdmUoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIFRyYW5zaXRpb247XG59XG5cbi8qKlxuICogVGVzdCB2aWEgYSBnZXR0ZXIgaW4gdGhlIG9wdGlvbnMgb2JqZWN0IHRvIHNlZVxuICogaWYgdGhlIHBhc3NpdmUgcHJvcGVydHkgaXMgYWNjZXNzZWQuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9FdmVudExpc3RlbmVyT3B0aW9ucy9ibG9iL2doLXBhZ2VzL2V4cGxhaW5lci5tZCNmZWF0dXJlLWRldGVjdGlvblxuICovXG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbn0gY2F0Y2ggKGUpIHt9XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUkMSA9IHN1cHBvcnRzUGFzc2l2ZTtcblxudmFyIFNUQVJUX0VWRU5UUyA9IFsndG91Y2hzdGFydCcsICdtb3VzZWRvd24nXTtcbnZhciBNT1ZFX0VWRU5UUyA9IFsndG91Y2htb3ZlJywgJ21vdXNlbW92ZSddO1xudmFyIEVORF9FVkVOVFMgPSBbJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJywgJ21vdXNldXAnLCAnbW91c2VsZWF2ZSddO1xudmFyIE1PVVNFX0VWRU5UUyA9IFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJywgJ21vdXNlbGVhdmUnXTtcblxuZnVuY3Rpb24gU3dpcGUgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgLyoqXG4gICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAqXG4gICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAqL1xuICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gIHZhciBzd2lwZVNpbiA9IDA7XG4gIHZhciBzd2lwZVN0YXJ0WCA9IDA7XG4gIHZhciBzd2lwZVN0YXJ0WSA9IDA7XG4gIHZhciBkaXNhYmxlZCA9IGZhbHNlO1xuICB2YXIgY2FwdHVyZSA9IHN1cHBvcnRzUGFzc2l2ZSQxID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcblxuICB2YXIgU3dpcGUgPSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgc3dpcGUgYmluZGluZ3MuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgIHRoaXMuYmluZFN3aXBlU3RhcnQoKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZvciBgc3dpcGVzdGFydGAgZXZlbnQuIENhbGN1bGF0ZXMgZW50cnkgcG9pbnRzIG9mIHRoZSB1c2VyJ3MgdGFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoZXZlbnQpIHtcbiAgICAgIGlmICghZGlzYWJsZWQgJiYgIUdsaWRlLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZSgpO1xuXG4gICAgICAgIHZhciBzd2lwZSA9IHRoaXMudG91Y2hlcyhldmVudCk7XG5cbiAgICAgICAgc3dpcGVTaW4gPSBudWxsO1xuICAgICAgICBzd2lwZVN0YXJ0WCA9IHRvSW50KHN3aXBlLnBhZ2VYKTtcbiAgICAgICAgc3dpcGVTdGFydFkgPSB0b0ludChzd2lwZS5wYWdlWSk7XG5cbiAgICAgICAgdGhpcy5iaW5kU3dpcGVNb3ZlKCk7XG4gICAgICAgIHRoaXMuYmluZFN3aXBlRW5kKCk7XG5cbiAgICAgICAgRXZlbnRzLmVtaXQoJ3N3aXBlLnN0YXJ0Jyk7XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3IgYHN3aXBlbW92ZWAgZXZlbnQuIENhbGN1bGF0ZXMgdXNlcidzIHRhcCBhbmdsZSBhbmQgZGlzdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICAgKi9cbiAgICBtb3ZlOiBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICBpZiAoIUdsaWRlLmRpc2FibGVkKSB7XG4gICAgICAgIHZhciBfR2xpZGUkc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncyxcbiAgICAgICAgICAgIHRvdWNoQW5nbGUgPSBfR2xpZGUkc2V0dGluZ3MudG91Y2hBbmdsZSxcbiAgICAgICAgICAgIHRvdWNoUmF0aW8gPSBfR2xpZGUkc2V0dGluZ3MudG91Y2hSYXRpbyxcbiAgICAgICAgICAgIGNsYXNzZXMgPSBfR2xpZGUkc2V0dGluZ3MuY2xhc3NlcztcblxuXG4gICAgICAgIHZhciBzd2lwZSA9IHRoaXMudG91Y2hlcyhldmVudCk7XG5cbiAgICAgICAgdmFyIHN1YkV4U3ggPSB0b0ludChzd2lwZS5wYWdlWCkgLSBzd2lwZVN0YXJ0WDtcbiAgICAgICAgdmFyIHN1YkV5U3kgPSB0b0ludChzd2lwZS5wYWdlWSkgLSBzd2lwZVN0YXJ0WTtcbiAgICAgICAgdmFyIHBvd0VYID0gTWF0aC5hYnMoc3ViRXhTeCA8PCAyKTtcbiAgICAgICAgdmFyIHBvd0VZID0gTWF0aC5hYnMoc3ViRXlTeSA8PCAyKTtcbiAgICAgICAgdmFyIHN3aXBlSHlwb3RlbnVzZSA9IE1hdGguc3FydChwb3dFWCArIHBvd0VZKTtcbiAgICAgICAgdmFyIHN3aXBlQ2F0aGV0dXMgPSBNYXRoLnNxcnQocG93RVkpO1xuXG4gICAgICAgIHN3aXBlU2luID0gTWF0aC5hc2luKHN3aXBlQ2F0aGV0dXMgLyBzd2lwZUh5cG90ZW51c2UpO1xuXG4gICAgICAgIGlmIChzd2lwZVNpbiAqIDE4MCAvIE1hdGguUEkgPCB0b3VjaEFuZ2xlKSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICBDb21wb25lbnRzLk1vdmUubWFrZShzdWJFeFN4ICogdG9GbG9hdCh0b3VjaFJhdGlvKSk7XG5cbiAgICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QuYWRkKGNsYXNzZXMuZHJhZ2dpbmcpO1xuXG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3N3aXBlLm1vdmUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZvciBgc3dpcGVlbmRgIGV2ZW50LiBGaW5pdGlhbGl6ZXMgdXNlcidzIHRhcCBhbmQgZGVjaWRlcyBhYm91dCBnbGlkZSBtb3ZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBlbmQ6IGZ1bmN0aW9uIGVuZChldmVudCkge1xuICAgICAgaWYgKCFHbGlkZS5kaXNhYmxlZCkge1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcblxuICAgICAgICB2YXIgc3dpcGUgPSB0aGlzLnRvdWNoZXMoZXZlbnQpO1xuICAgICAgICB2YXIgdGhyZXNob2xkID0gdGhpcy50aHJlc2hvbGQoZXZlbnQpO1xuXG4gICAgICAgIHZhciBzd2lwZURpc3RhbmNlID0gc3dpcGUucGFnZVggLSBzd2lwZVN0YXJ0WDtcbiAgICAgICAgdmFyIHN3aXBlRGVnID0gc3dpcGVTaW4gKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICB2YXIgc3RlcHMgPSBNYXRoLnJvdW5kKHN3aXBlRGlzdGFuY2UgLyBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGgpO1xuXG4gICAgICAgIHRoaXMuZW5hYmxlKCk7XG5cbiAgICAgICAgaWYgKHN3aXBlRGlzdGFuY2UgPiB0aHJlc2hvbGQgJiYgc3dpcGVEZWcgPCBzZXR0aW5ncy50b3VjaEFuZ2xlKSB7XG4gICAgICAgICAgLy8gV2hpbGUgc3dpcGUgaXMgcG9zaXRpdmUgYW5kIGdyZWF0ZXIgdGhhbiB0aHJlc2hvbGQgbW92ZSBiYWNrd2FyZC5cbiAgICAgICAgICBpZiAoc2V0dGluZ3MucGVyVG91Y2gpIHtcbiAgICAgICAgICAgIHN0ZXBzID0gTWF0aC5taW4oc3RlcHMsIHRvSW50KHNldHRpbmdzLnBlclRvdWNoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKENvbXBvbmVudHMuRGlyZWN0aW9uLmlzKCdydGwnKSkge1xuICAgICAgICAgICAgc3RlcHMgPSAtc3RlcHM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZShDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlKCc8JyArIHN0ZXBzKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3dpcGVEaXN0YW5jZSA8IC10aHJlc2hvbGQgJiYgc3dpcGVEZWcgPCBzZXR0aW5ncy50b3VjaEFuZ2xlKSB7XG4gICAgICAgICAgLy8gV2hpbGUgc3dpcGUgaXMgbmVnYXRpdmUgYW5kIGxvd2VyIHRoYW4gbmVnYXRpdmUgdGhyZXNob2xkIG1vdmUgZm9yd2FyZC5cbiAgICAgICAgICBpZiAoc2V0dGluZ3MucGVyVG91Y2gpIHtcbiAgICAgICAgICAgIHN0ZXBzID0gTWF0aC5tYXgoc3RlcHMsIC10b0ludChzZXR0aW5ncy5wZXJUb3VjaCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChDb21wb25lbnRzLkRpcmVjdGlvbi5pcygncnRsJykpIHtcbiAgICAgICAgICAgIHN0ZXBzID0gLXN0ZXBzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZSgnPicgKyBzdGVwcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFdoaWxlIHN3aXBlIGRvbid0IHJlYWNoIGRpc3RhbmNlIGFwcGx5IHByZXZpb3VzIHRyYW5zZm9ybS5cbiAgICAgICAgICBDb21wb25lbnRzLk1vdmUubWFrZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShzZXR0aW5ncy5jbGFzc2VzLmRyYWdnaW5nKTtcblxuICAgICAgICB0aGlzLnVuYmluZFN3aXBlTW92ZSgpO1xuICAgICAgICB0aGlzLnVuYmluZFN3aXBlRW5kKCk7XG5cbiAgICAgICAgRXZlbnRzLmVtaXQoJ3N3aXBlLmVuZCcpO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEJpbmRzIHN3aXBlJ3Mgc3RhcnRpbmcgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGJpbmRTd2lwZVN0YXJ0OiBmdW5jdGlvbiBiaW5kU3dpcGVTdGFydCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuXG4gICAgICBpZiAoc2V0dGluZ3Muc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgQmluZGVyLm9uKFNUQVJUX0VWRU5UU1swXSwgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIF90aGlzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSwgY2FwdHVyZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXR0aW5ncy5kcmFnVGhyZXNob2xkKSB7XG4gICAgICAgIEJpbmRlci5vbihTVEFSVF9FVkVOVFNbMV0sIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBfdGhpcy5zdGFydChldmVudCk7XG4gICAgICAgIH0sIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFVuYmluZHMgc3dpcGUncyBzdGFydGluZyBldmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgdW5iaW5kU3dpcGVTdGFydDogZnVuY3Rpb24gdW5iaW5kU3dpcGVTdGFydCgpIHtcbiAgICAgIEJpbmRlci5vZmYoU1RBUlRfRVZFTlRTWzBdLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgY2FwdHVyZSk7XG4gICAgICBCaW5kZXIub2ZmKFNUQVJUX0VWRU5UU1sxXSwgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGNhcHR1cmUpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEJpbmRzIHN3aXBlJ3MgbW92aW5nIGV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBiaW5kU3dpcGVNb3ZlOiBmdW5jdGlvbiBiaW5kU3dpcGVNb3ZlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIEJpbmRlci5vbihNT1ZFX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIHRocm90dGxlKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBfdGhpczIubW92ZShldmVudCk7XG4gICAgICB9LCBHbGlkZS5zZXR0aW5ncy50aHJvdHRsZSksIGNhcHR1cmUpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFVuYmluZHMgc3dpcGUncyBtb3ZpbmcgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHVuYmluZFN3aXBlTW92ZTogZnVuY3Rpb24gdW5iaW5kU3dpcGVNb3ZlKCkge1xuICAgICAgQmluZGVyLm9mZihNT1ZFX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGNhcHR1cmUpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEJpbmRzIHN3aXBlJ3MgZW5kaW5nIGV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBiaW5kU3dpcGVFbmQ6IGZ1bmN0aW9uIGJpbmRTd2lwZUVuZCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBCaW5kZXIub24oRU5EX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBfdGhpczMuZW5kKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFVuYmluZHMgc3dpcGUncyBlbmRpbmcgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHVuYmluZFN3aXBlRW5kOiBmdW5jdGlvbiB1bmJpbmRTd2lwZUVuZCgpIHtcbiAgICAgIEJpbmRlci5vZmYoRU5EX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZXMgZXZlbnQgdG91Y2hlcyBwb2ludHMgYWNjb3J0aW5nIHRvIGRpZmZlcmVudCB0eXBlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxuICAgICAqL1xuICAgIHRvdWNoZXM6IGZ1bmN0aW9uIHRvdWNoZXMoZXZlbnQpIHtcbiAgICAgIGlmIChNT1VTRV9FVkVOVFMuaW5kZXhPZihldmVudC50eXBlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV2ZW50LnRvdWNoZXNbMF0gfHwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogR2V0cyB2YWx1ZSBvZiBtaW5pbXVtIHN3aXBlIGRpc3RhbmNlIHNldHRpbmdzIGJhc2VkIG9uIGV2ZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhyZXNob2xkOiBmdW5jdGlvbiB0aHJlc2hvbGQoZXZlbnQpIHtcbiAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuXG4gICAgICBpZiAoTU9VU0VfRVZFTlRTLmluZGV4T2YoZXZlbnQudHlwZSkgPiAtMSkge1xuICAgICAgICByZXR1cm4gc2V0dGluZ3MuZHJhZ1RocmVzaG9sZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldHRpbmdzLnN3aXBlVGhyZXNob2xkO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgc3dpcGUgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzZWxmfVxuICAgICAqL1xuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmVuYWJsZSgpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyBzd2lwZSBldmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3NlbGZ9XG4gICAgICovXG4gICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIGRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmRpc2FibGUoKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgY29tcG9uZW50IGNsYXNzOlxuICAgKiAtIGFmdGVyIGluaXRpYWwgYnVpbGRpbmdcbiAgICovXG4gIEV2ZW50cy5vbignYnVpbGQuYWZ0ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LmFkZChHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLnN3aXBlYWJsZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgc3dpcGluZyBiaW5kaW5nczpcbiAgICogLSBvbiBkZXN0cm95aW5nLCB0byByZW1vdmUgYWRkZWQgRXZlbnRMaXN0ZW5lcnNcbiAgICovXG4gIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICBTd2lwZS51bmJpbmRTd2lwZVN0YXJ0KCk7XG4gICAgU3dpcGUudW5iaW5kU3dpcGVNb3ZlKCk7XG4gICAgU3dpcGUudW5iaW5kU3dpcGVFbmQoKTtcbiAgICBCaW5kZXIuZGVzdHJveSgpO1xuICB9KTtcblxuICByZXR1cm4gU3dpcGU7XG59XG5cbmZ1bmN0aW9uIEltYWdlcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xuICAvKipcbiAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cbiAgICpcbiAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cbiAgICovXG4gIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XG5cbiAgdmFyIEltYWdlcyA9IHtcbiAgICAvKipcbiAgICAgKiBCaW5kcyBsaXN0ZW5lciB0byBnbGlkZSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICB0aGlzLmJpbmQoKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBgZHJhZ3N0YXJ0YCBldmVudCBvbiB3cmFwcGVyIHRvIHByZXZlbnQgZHJhZ2dpbmcgaW1hZ2VzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgQmluZGVyLm9uKCdkcmFnc3RhcnQnLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgdGhpcy5kcmFnc3RhcnQpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFVuYmluZHMgYGRyYWdzdGFydGAgZXZlbnQgb24gd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBCaW5kZXIub2ZmKCdkcmFnc3RhcnQnLCBDb21wb25lbnRzLkh0bWwud3JhcHBlcik7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlci4gUHJldmVudHMgZHJhZ2dpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGRyYWdzdGFydDogZnVuY3Rpb24gZHJhZ3N0YXJ0KGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGJpbmRpbmdzIGZyb20gaW1hZ2VzOlxuICAgKiAtIG9uIGRlc3Ryb3lpbmcsIHRvIHJlbW92ZSBhZGRlZCBFdmVudExpc3RlbmVyc1xuICAgKi9cbiAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgIEltYWdlcy51bmJpbmQoKTtcbiAgICBCaW5kZXIuZGVzdHJveSgpO1xuICB9KTtcblxuICByZXR1cm4gSW1hZ2VzO1xufVxuXG5mdW5jdGlvbiBBbmNob3JzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gIC8qKlxuICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxuICAgKlxuICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgKi9cbiAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAvKipcbiAgICogSG9sZHMgZGV0YWNoaW5nIHN0YXR1cyBvZiBhbmNob3JzLlxuICAgKiBQcmV2ZW50cyBkZXRhY2hpbmcgb2YgYWxyZWFkeSBkZXRhY2hlZCBhbmNob3JzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIHZhciBkZXRhY2hlZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBIb2xkcyBwcmV2ZW50aW5nIHN0YXR1cyBvZiBhbmNob3JzLlxuICAgKiBJZiBgdHJ1ZWAgcmVkaXJlY3Rpb24gYWZ0ZXIgY2xpY2sgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqL1xuICB2YXIgcHJldmVudGVkID0gZmFsc2U7XG5cbiAgdmFyIEFuY2hvcnMgPSB7XG4gICAgLyoqXG4gICAgICogU2V0dXBzIGEgaW5pdGlhbCBzdGF0ZSBvZiBhbmNob3JzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtWb2lkfVxuICAgICAqL1xuICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgIC8qKlxuICAgICAgICogSG9sZHMgY29sbGVjdGlvbiBvZiBhbmNob3JzIGVsZW1lbnRzLlxuICAgICAgICpcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBAdHlwZSB7SFRNTENvbGxlY3Rpb259XG4gICAgICAgKi9cbiAgICAgIHRoaXMuX2EgPSBDb21wb25lbnRzLkh0bWwud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdhJyk7XG5cbiAgICAgIHRoaXMuYmluZCgpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEJpbmRzIGV2ZW50cyB0byBhbmNob3JzIGluc2lkZSBhIHRyYWNrLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgQmluZGVyLm9uKCdjbGljaycsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCB0aGlzLmNsaWNrKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmRzIGV2ZW50cyBhdHRhY2hlZCB0byBhbmNob3JzIGluc2lkZSBhIHRyYWNrLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIEJpbmRlci5vZmYoJ2NsaWNrJywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgZm9yIGNsaWNrIGV2ZW50LiBQcmV2ZW50cyBjbGlja3Mgd2hlbiBnbGlkZSBpcyBpbiBgcHJldmVudGAgc3RhdHVzLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBldmVudFxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGV2ZW50KSB7XG4gICAgICBpZiAocHJldmVudGVkKSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIERldGFjaGVzIGFuY2hvcnMgY2xpY2sgZXZlbnQgaW5zaWRlIGdsaWRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7c2VsZn1cbiAgICAgKi9cbiAgICBkZXRhY2g6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIHByZXZlbnRlZCA9IHRydWU7XG5cbiAgICAgIGlmICghZGV0YWNoZWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5pdGVtc1tpXS5kcmFnZ2FibGUgPSBmYWxzZTtcblxuICAgICAgICAgIHRoaXMuaXRlbXNbaV0uc2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnLCB0aGlzLml0ZW1zW2ldLmdldEF0dHJpYnV0ZSgnaHJlZicpKTtcblxuICAgICAgICAgIHRoaXMuaXRlbXNbaV0ucmVtb3ZlQXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXRhY2hlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGFuY2hvcnMgY2xpY2sgZXZlbnRzIGluc2lkZSBnbGlkZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3NlbGZ9XG4gICAgICovXG4gICAgYXR0YWNoOiBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgICBwcmV2ZW50ZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKGRldGFjaGVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuaXRlbXNbaV0uZHJhZ2dhYmxlID0gdHJ1ZTtcblxuICAgICAgICAgIHRoaXMuaXRlbXNbaV0uc2V0QXR0cmlidXRlKCdocmVmJywgdGhpcy5pdGVtc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRldGFjaGVkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICBkZWZpbmUoQW5jaG9ycywgJ2l0ZW1zJywge1xuICAgIC8qKlxuICAgICAqIEdldHMgY29sbGVjdGlvbiBvZiB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudFtdfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIEFuY2hvcnMuX2E7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogRGV0YWNoIGFuY2hvcnMgaW5zaWRlIHNsaWRlczpcbiAgICogLSBvbiBzd2lwaW5nLCBzbyB0aGV5IHdvbid0IHJlZGlyZWN0IHRvIGl0cyBgaHJlZmAgYXR0cmlidXRlc1xuICAgKi9cbiAgRXZlbnRzLm9uKCdzd2lwZS5tb3ZlJywgZnVuY3Rpb24gKCkge1xuICAgIEFuY2hvcnMuZGV0YWNoKCk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBBdHRhY2ggYW5jaG9ycyBpbnNpZGUgc2xpZGVzOlxuICAgKiAtIGFmdGVyIHN3aXBpbmcgYW5kIHRyYW5zaXRpb25zIGVuZHMsIHNvIHRoZXkgY2FuIHJlZGlyZWN0IGFmdGVyIGNsaWNrIGFnYWluXG4gICAqL1xuICBFdmVudHMub24oJ3N3aXBlLmVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgQW5jaG9ycy5hdHRhY2goKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFVuYmluZCBhbmNob3JzIGluc2lkZSBzbGlkZXM6XG4gICAqIC0gb24gZGVzdHJveWluZywgdG8gYnJpbmcgYW5jaG9ycyB0byBpdHMgaW5pdGlhbCBzdGF0ZVxuICAgKi9cbiAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgIEFuY2hvcnMuYXR0YWNoKCk7XG4gICAgQW5jaG9ycy51bmJpbmQoKTtcbiAgICBCaW5kZXIuZGVzdHJveSgpO1xuICB9KTtcblxuICByZXR1cm4gQW5jaG9ycztcbn1cblxudmFyIE5BVl9TRUxFQ1RPUiA9ICdbZGF0YS1nbGlkZS1lbD1cImNvbnRyb2xzW25hdl1cIl0nO1xudmFyIENPTlRST0xTX1NFTEVDVE9SID0gJ1tkYXRhLWdsaWRlLWVsXj1cImNvbnRyb2xzXCJdJztcblxuZnVuY3Rpb24gQ29udHJvbHMgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgLyoqXG4gICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAqXG4gICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAqL1xuICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gIHZhciBjYXB0dXJlID0gc3VwcG9ydHNQYXNzaXZlJDEgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuXG4gIHZhciBDb250cm9scyA9IHtcbiAgICAvKipcbiAgICAgKiBJbml0cyBhcnJvd3MuIEJpbmRzIGV2ZW50cyBsaXN0ZW5lcnNcbiAgICAgKiB0byB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ29sbGVjdGlvbiBvZiBuYXZpZ2F0aW9uIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHtIVE1MQ29sbGVjdGlvbn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5fbiA9IENvbXBvbmVudHMuSHRtbC5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoTkFWX1NFTEVDVE9SKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBDb2xsZWN0aW9uIG9mIGNvbnRyb2xzIEhUTUwgZWxlbWVudHMuXG4gICAgICAgKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEB0eXBlIHtIVE1MQ29sbGVjdGlvbn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5fYyA9IENvbXBvbmVudHMuSHRtbC5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoQ09OVFJPTFNfU0VMRUNUT1IpO1xuXG4gICAgICB0aGlzLmFkZEJpbmRpbmdzKCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhY3RpdmUgY2xhc3MgdG8gY3VycmVudCBzbGlkZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgc2V0QWN0aXZlOiBmdW5jdGlvbiBzZXRBY3RpdmUoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5hZGRDbGFzcyh0aGlzLl9uW2ldLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFjdGl2ZSBjbGFzcyB0byBjdXJyZW50IHNsaWRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICByZW1vdmVBY3RpdmU6IGZ1bmN0aW9uIHJlbW92ZUFjdGl2ZSgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKHRoaXMuX25baV0uY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgYWN0aXZlIGNsYXNzIG9uIGl0ZW1zIGluc2lkZSBuYXZpZ2F0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3MoY29udHJvbHMpIHtcbiAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xuICAgICAgdmFyIGl0ZW0gPSBjb250cm9sc1tHbGlkZS5pbmRleF07XG5cbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChzZXR0aW5ncy5jbGFzc2VzLmFjdGl2ZU5hdik7XG5cbiAgICAgICAgc2libGluZ3MoaXRlbSkuZm9yRWFjaChmdW5jdGlvbiAoc2libGluZykge1xuICAgICAgICAgIHNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZShzZXR0aW5ncy5jbGFzc2VzLmFjdGl2ZU5hdik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWN0aXZlIGNsYXNzIGZyb20gYWN0aXZlIGNvbnRyb2wuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gY29udHJvbHNcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiByZW1vdmVDbGFzcyhjb250cm9scykge1xuICAgICAgdmFyIGl0ZW0gPSBjb250cm9sc1tHbGlkZS5pbmRleF07XG5cbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmFjdGl2ZU5hdik7XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQWRkcyBoYW5kbGVzIHRvIHRoZSBlYWNoIGdyb3VwIG9mIGNvbnRyb2xzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBhZGRCaW5kaW5nczogZnVuY3Rpb24gYWRkQmluZGluZ3MoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5iaW5kKHRoaXMuX2NbaV0uY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgaGFuZGxlcyBmcm9tIHRoZSBlYWNoIGdyb3VwIG9mIGNvbnRyb2xzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICByZW1vdmVCaW5kaW5nczogZnVuY3Rpb24gcmVtb3ZlQmluZGluZ3MoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy51bmJpbmQodGhpcy5fY1tpXS5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogQmluZHMgZXZlbnRzIHRvIGFycm93cyBIVE1MIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MQ29sbGVjdGlvbn0gZWxlbWVudHNcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoZWxlbWVudHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQmluZGVyLm9uKCdjbGljaycsIGVsZW1lbnRzW2ldLCB0aGlzLmNsaWNrKTtcbiAgICAgICAgQmluZGVyLm9uKCd0b3VjaHN0YXJ0JywgZWxlbWVudHNbaV0sIHRoaXMuY2xpY2ssIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFVuYmluZHMgZXZlbnRzIGJpbmRlZCB0byB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxDb2xsZWN0aW9ufSBlbGVtZW50c1xuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoZWxlbWVudHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQmluZGVyLm9mZihbJ2NsaWNrJywgJ3RvdWNoc3RhcnQnXSwgZWxlbWVudHNbaV0pO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYGNsaWNrYCBldmVudCBvbiB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXG4gICAgICogTW92ZXMgc2xpZGVyIGluIGRyaWVjdGlvbiBwcmVjaXNlZCBpblxuICAgICAqIGBkYXRhLWdsaWRlLWRpcmAgYXR0cmlidXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBjbGljazogZnVuY3Rpb24gY2xpY2soZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZShldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1nbGlkZS1kaXInKSkpO1xuICAgIH1cbiAgfTtcblxuICBkZWZpbmUoQ29udHJvbHMsICdpdGVtcycsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIGNvbGxlY3Rpb24gb2YgdGhlIGNvbnRyb2xzIEhUTUwgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudFtdfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIENvbnRyb2xzLl9jO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFN3YXAgYWN0aXZlIGNsYXNzIG9mIGN1cnJlbnQgbmF2aWdhdGlvbiBpdGVtOlxuICAgKiAtIGFmdGVyIG1vdW50aW5nIHRvIHNldCBpdCB0byBpbml0aWFsIGluZGV4XG4gICAqIC0gYWZ0ZXIgZWFjaCBtb3ZlIHRvIHRoZSBuZXcgaW5kZXhcbiAgICovXG4gIEV2ZW50cy5vbihbJ21vdW50LmFmdGVyJywgJ21vdmUuYWZ0ZXInXSwgZnVuY3Rpb24gKCkge1xuICAgIENvbnRyb2xzLnNldEFjdGl2ZSgpO1xuICB9KTtcblxuICAvKipcbiAgICogUmVtb3ZlIGJpbmRpbmdzIGFuZCBIVE1MIENsYXNzZXM6XG4gICAqIC0gb24gZGVzdHJveWluZywgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0aWFsIHN0YXRlXG4gICAqL1xuICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgQ29udHJvbHMucmVtb3ZlQmluZGluZ3MoKTtcbiAgICBDb250cm9scy5yZW1vdmVBY3RpdmUoKTtcbiAgICBCaW5kZXIuZGVzdHJveSgpO1xuICB9KTtcblxuICByZXR1cm4gQ29udHJvbHM7XG59XG5cbmZ1bmN0aW9uIEtleWJvYXJkIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gIC8qKlxuICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxuICAgKlxuICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgKi9cbiAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICB2YXIgS2V5Ym9hcmQgPSB7XG4gICAgLyoqXG4gICAgICogQmluZHMga2V5Ym9hcmQgZXZlbnRzIG9uIGNvbXBvbmVudCBtb3VudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgaWYgKEdsaWRlLnNldHRpbmdzLmtleWJvYXJkKSB7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEFkZHMga2V5Ym9hcmQgcHJlc3MgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgQmluZGVyLm9uKCdrZXl1cCcsIGRvY3VtZW50LCB0aGlzLnByZXNzKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGtleWJvYXJkIHByZXNzIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBCaW5kZXIub2ZmKCdrZXl1cCcsIGRvY3VtZW50KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGtleWJvYXJkJ3MgYXJyb3dzIHByZXNzIGFuZCBtb3ZpbmcgZ2xpZGUgZm93YXJkIGFuZCBiYWNrd2FyZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gZXZlbnRcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHByZXNzOiBmdW5jdGlvbiBwcmVzcyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5KSB7XG4gICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZSgnPicpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3KSB7XG4gICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZSgnPCcpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBiaW5kaW5ncyBmcm9tIGtleWJvYXJkOlxuICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gcmVtb3ZlIGFkZGVkIGV2ZW50c1xuICAgKiAtIG9uIHVwZGF0aW5nIHRvIHJlbW92ZSBldmVudHMgYmVmb3JlIHJlbW91bnRpbmdcbiAgICovXG4gIEV2ZW50cy5vbihbJ2Rlc3Ryb3knLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcbiAgICBLZXlib2FyZC51bmJpbmQoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJlbW91bnQgY29tcG9uZW50XG4gICAqIC0gb24gdXBkYXRpbmcgdG8gcmVmbGVjdCBwb3RlbnRpYWwgY2hhbmdlcyBpbiBzZXR0aW5nc1xuICAgKi9cbiAgRXZlbnRzLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgS2V5Ym9hcmQubW91bnQoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgYmluZGVyOlxuICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gcmVtb3ZlIGxpc3RlbmVyc1xuICAgKi9cbiAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgIEJpbmRlci5kZXN0cm95KCk7XG4gIH0pO1xuXG4gIHJldHVybiBLZXlib2FyZDtcbn1cblxuZnVuY3Rpb24gQXV0b3BsYXkgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcbiAgLyoqXG4gICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXG4gICAqXG4gICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XG4gICAqL1xuICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xuXG4gIHZhciBBdXRvcGxheSA9IHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhdXRvcGxheWluZyBhbmQgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG5cbiAgICAgIGlmIChHbGlkZS5zZXR0aW5ncy5ob3ZlcnBhdXNlKSB7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBhdXRvcGxheWluZyBpbiBjb25maWd1cmVkIGludGVydmFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gZm9yY2UgUnVuIGF1dG9wbGF5aW5nIHdpdGggcGFzc2VkIGludGVydmFsIHJlZ2FyZGxlc3Mgb2YgYGF1dG9wbGF5YCBzZXR0aW5nc1xuICAgICAqIEByZXR1cm4ge1ZvaWR9XG4gICAgICovXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKEdsaWRlLnNldHRpbmdzLmF1dG9wbGF5KSB7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGlzLl9pKSkge1xuICAgICAgICAgIHRoaXMuX2kgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoJz4nKTtcblxuICAgICAgICAgICAgX3RoaXMuc3RhcnQoKTtcbiAgICAgICAgICB9LCB0aGlzLnRpbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgYXV0b3J1bm5pbmcgb2YgdGhlIGdsaWRlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Vm9pZH1cbiAgICAgKi9cbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy5faSA9IGNsZWFySW50ZXJ2YWwodGhpcy5faSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgYXV0b3BsYXlpbmcgd2hpbGUgbW91c2UgaXMgb3ZlciBnbGlkZSdzIGFyZWEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgQmluZGVyLm9uKCdtb3VzZW92ZXInLCBDb21wb25lbnRzLkh0bWwucm9vdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc3RvcCgpO1xuICAgICAgfSk7XG5cbiAgICAgIEJpbmRlci5vbignbW91c2VvdXQnLCBDb21wb25lbnRzLkh0bWwucm9vdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc3RhcnQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIFVuYmluZCBtb3VzZW92ZXIgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1ZvaWR9XG4gICAgICovXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICBCaW5kZXIub2ZmKFsnbW91c2VvdmVyJywgJ21vdXNlb3V0J10sIENvbXBvbmVudHMuSHRtbC5yb290KTtcbiAgICB9XG4gIH07XG5cbiAgZGVmaW5lKEF1dG9wbGF5LCAndGltZScsIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRpbWUgcGVyaW9kIHZhbHVlIGZvciB0aGUgYXV0b3BsYXkgaW50ZXJ2YWwuIFByaW9yaXRpemVzXG4gICAgICogdGltZXMgaW4gYGRhdGEtZ2xpZGUtYXV0b3BsYXlgIGF0dHJ1YnV0ZXMgb3ZlciBvcHRpb25zLlxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGF1dG9wbGF5ID0gQ29tcG9uZW50cy5IdG1sLnNsaWRlc1tHbGlkZS5pbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLWdsaWRlLWF1dG9wbGF5Jyk7XG5cbiAgICAgIGlmIChhdXRvcGxheSkge1xuICAgICAgICByZXR1cm4gdG9JbnQoYXV0b3BsYXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9JbnQoR2xpZGUuc2V0dGluZ3MuYXV0b3BsYXkpO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFN0b3AgYXV0b3BsYXlpbmcgYW5kIHVuYmluZCBldmVudHM6XG4gICAqIC0gb24gZGVzdHJveWluZywgdG8gY2xlYXIgZGVmaW5lZCBpbnRlcnZhbFxuICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEkgdG8gcmVzZXQgaW50ZXJ2YWwgdGhhdCBtYXkgY2hhbmdlZFxuICAgKi9cbiAgRXZlbnRzLm9uKFsnZGVzdHJveScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xuICAgIEF1dG9wbGF5LnVuYmluZCgpO1xuICB9KTtcblxuICAvKipcbiAgICogU3RvcCBhdXRvcGxheWluZzpcbiAgICogLSBiZWZvcmUgZWFjaCBydW4sIHRvIHJlc3RhcnQgYXV0b3BsYXlpbmdcbiAgICogLSBvbiBwYXVzaW5nIHZpYSBBUElcbiAgICogLSBvbiBkZXN0cm95aW5nLCB0byBjbGVhciBkZWZpbmVkIGludGVydmFsXG4gICAqIC0gd2hpbGUgc3RhcnRpbmcgYSBzd2lwZVxuICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEkgdG8gcmVzZXQgaW50ZXJ2YWwgdGhhdCBtYXkgY2hhbmdlZFxuICAgKi9cbiAgRXZlbnRzLm9uKFsncnVuLmJlZm9yZScsICdwYXVzZScsICdkZXN0cm95JywgJ3N3aXBlLnN0YXJ0JywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XG4gICAgQXV0b3BsYXkuc3RvcCgpO1xuICB9KTtcblxuICAvKipcbiAgICogU3RhcnQgYXV0b3BsYXlpbmc6XG4gICAqIC0gYWZ0ZXIgZWFjaCBydW4sIHRvIHJlc3RhcnQgYXV0b3BsYXlpbmdcbiAgICogLSBvbiBwbGF5aW5nIHZpYSBBUElcbiAgICogLSB3aGlsZSBlbmRpbmcgYSBzd2lwZVxuICAgKi9cbiAgRXZlbnRzLm9uKFsncnVuLmFmdGVyJywgJ3BsYXknLCAnc3dpcGUuZW5kJ10sIGZ1bmN0aW9uICgpIHtcbiAgICBBdXRvcGxheS5zdGFydCgpO1xuICB9KTtcblxuICAvKipcbiAgICogUmVtb3VudCBhdXRvcGxheWluZzpcbiAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJIHRvIHJlc2V0IGludGVydmFsIHRoYXQgbWF5IGNoYW5nZWRcbiAgICovXG4gIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgIEF1dG9wbGF5Lm1vdW50KCk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBEZXN0cm95IGEgYmluZGVyOlxuICAgKiAtIG9uIGRlc3Ryb3lpbmcgZ2xpZGUgaW5zdGFuY2UgdG8gY2xlYXJ1cCBsaXN0ZW5lcnNcbiAgICovXG4gIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICBCaW5kZXIuZGVzdHJveSgpO1xuICB9KTtcblxuICByZXR1cm4gQXV0b3BsYXk7XG59XG5cbi8qKlxuICogU29ydHMga2V5cyBvZiBicmVha3BvaW50IG9iamVjdCBzbyB0aGV5IHdpbGwgYmUgb3JkZXJlZCBmcm9tIGxvd2VyIHRvIGJpZ2dlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcG9pbnRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBzb3J0QnJlYWtwb2ludHMocG9pbnRzKSB7XG4gIGlmIChpc09iamVjdChwb2ludHMpKSB7XG4gICAgcmV0dXJuIHNvcnRLZXlzKHBvaW50cyk7XG4gIH0gZWxzZSB7XG4gICAgd2FybignQnJlYWtwb2ludHMgb3B0aW9uIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIEJyZWFrcG9pbnRzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XG4gIC8qKlxuICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxuICAgKlxuICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxuICAgKi9cbiAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcblxuICAvKipcbiAgICogSG9sZHMgcmVmZXJlbmNlIHRvIHNldHRpbmdzLlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XG5cbiAgLyoqXG4gICAqIEhvbGRzIHJlZmVyZW5jZSB0byBicmVha3BvaW50cyBvYmplY3QgaW4gc2V0dGluZ3MuIFNvcnRzIGJyZWFrcG9pbnRzXG4gICAqIGZyb20gc21hbGxlciB0byBsYXJnZXIuIEl0IGlzIHJlcXVpcmVkIGluIG9yZGVyIHRvIHByb3BlclxuICAgKiBtYXRjaGluZyBjdXJyZW50bHkgYWN0aXZlIGJyZWFrcG9pbnQgc2V0dGluZ3MuXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB2YXIgcG9pbnRzID0gc29ydEJyZWFrcG9pbnRzKHNldHRpbmdzLmJyZWFrcG9pbnRzKTtcblxuICAvKipcbiAgICogQ2FjaGUgaW5pdGlhbCBzZXR0aW5ncyBiZWZvcmUgb3ZlcndyaXR0aW5nLlxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgdmFyIGRlZmF1bHRzID0gX2V4dGVuZHMoe30sIHNldHRpbmdzKTtcblxuICB2YXIgQnJlYWtwb2ludHMgPSB7XG4gICAgLyoqXG4gICAgICogTWF0Y2hlcyBzZXR0aW5ncyBmb3IgY3VycmVjdGx5IG1hdGNoaW5nIG1lZGlhIGJyZWFrcG9pbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRzXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICBtYXRjaDogZnVuY3Rpb24gbWF0Y2gocG9pbnRzKSB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5tYXRjaE1lZGlhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBmb3IgKHZhciBwb2ludCBpbiBwb2ludHMpIHtcbiAgICAgICAgICBpZiAocG9pbnRzLmhhc093blByb3BlcnR5KHBvaW50KSkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiAnICsgcG9pbnQgKyAncHgpJykubWF0Y2hlcykge1xuICAgICAgICAgICAgICByZXR1cm4gcG9pbnRzW3BvaW50XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogT3ZlcndyaXRlIGluc3RhbmNlIHNldHRpbmdzIHdpdGggY3VycmVudGx5IG1hdGNoaW5nIGJyZWFrcG9pbnQgc2V0dGluZ3MuXG4gICAqIFRoaXMgaGFwcGVucyByaWdodCBhZnRlciBjb21wb25lbnQgaW5pdGlhbGl6YXRpb24uXG4gICAqL1xuICBfZXh0ZW5kcyhzZXR0aW5ncywgQnJlYWtwb2ludHMubWF0Y2gocG9pbnRzKSk7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBnbGlkZSB3aXRoIHNldHRpbmdzIG9mIG1hdGNoZWQgYnJla3BvaW50OlxuICAgKiAtIHdpbmRvdyByZXNpemUgdG8gdXBkYXRlIHNsaWRlclxuICAgKi9cbiAgQmluZGVyLm9uKCdyZXNpemUnLCB3aW5kb3csIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICBHbGlkZS5zZXR0aW5ncyA9IG1lcmdlT3B0aW9ucyhzZXR0aW5ncywgQnJlYWtwb2ludHMubWF0Y2gocG9pbnRzKSk7XG4gIH0sIEdsaWRlLnNldHRpbmdzLnRocm90dGxlKSk7XG5cbiAgLyoqXG4gICAqIFJlc29ydCBhbmQgdXBkYXRlIGRlZmF1bHQgc2V0dGluZ3M6XG4gICAqIC0gb24gcmVpbml0IHZpYSBBUEksIHNvIGJyZWFrcG9pbnQgbWF0Y2hpbmcgd2lsbCBiZSBwZXJmb3JtZWQgd2l0aCBvcHRpb25zXG4gICAqL1xuICBFdmVudHMub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICBwb2ludHMgPSBzb3J0QnJlYWtwb2ludHMocG9pbnRzKTtcblxuICAgIGRlZmF1bHRzID0gX2V4dGVuZHMoe30sIHNldHRpbmdzKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFVuYmluZCByZXNpemUgbGlzdGVuZXI6XG4gICAqIC0gb24gZGVzdHJveWluZywgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0aWFsIHN0YXRlXG4gICAqL1xuICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgQmluZGVyLm9mZigncmVzaXplJywgd2luZG93KTtcbiAgfSk7XG5cbiAgcmV0dXJuIEJyZWFrcG9pbnRzO1xufVxuXG52YXIgQ09NUE9ORU5UUyA9IHtcbiAgLy8gUmVxdWlyZWRcbiAgSHRtbDogSHRtbCxcbiAgVHJhbnNsYXRlOiBUcmFuc2xhdGUsXG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIERpcmVjdGlvbjogRGlyZWN0aW9uLFxuICBQZWVrOiBQZWVrLFxuICBTaXplczogU2l6ZXMsXG4gIEdhcHM6IEdhcHMsXG4gIE1vdmU6IE1vdmUsXG4gIENsb25lczogQ2xvbmVzLFxuICBSZXNpemU6IFJlc2l6ZSxcbiAgQnVpbGQ6IEJ1aWxkLFxuICBSdW46IFJ1bixcblxuICAvLyBPcHRpb25hbFxuICBTd2lwZTogU3dpcGUsXG4gIEltYWdlczogSW1hZ2VzLFxuICBBbmNob3JzOiBBbmNob3JzLFxuICBDb250cm9sczogQ29udHJvbHMsXG4gIEtleWJvYXJkOiBLZXlib2FyZCxcbiAgQXV0b3BsYXk6IEF1dG9wbGF5LFxuICBCcmVha3BvaW50czogQnJlYWtwb2ludHNcbn07XG5cbnZhciBHbGlkZSQxID0gZnVuY3Rpb24gKF9Db3JlKSB7XG4gIGluaGVyaXRzKEdsaWRlJCQxLCBfQ29yZSk7XG5cbiAgZnVuY3Rpb24gR2xpZGUkJDEoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xpZGUkJDEpO1xuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChHbGlkZSQkMS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEdsaWRlJCQxKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhHbGlkZSQkMSwgW3tcbiAgICBrZXk6ICdtb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgICAgdmFyIGV4dGVuc2lvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICByZXR1cm4gZ2V0KEdsaWRlJCQxLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEdsaWRlJCQxLnByb3RvdHlwZSksICdtb3VudCcsIHRoaXMpLmNhbGwodGhpcywgX2V4dGVuZHMoe30sIENPTVBPTkVOVFMsIGV4dGVuc2lvbnMpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEdsaWRlJCQxO1xufShHbGlkZSk7XG5cbmV4cG9ydCBkZWZhdWx0IEdsaWRlJDE7XG4iLCJpbXBvcnQgR2xpZGUgZnJvbSBcIkBnbGlkZWpzL2dsaWRlXCI7XHJcblxyXG5jb25zdCBhbGxTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmdsaWRlXCIpO1xyXG5hbGxTbGlkZXIuZm9yRWFjaChpdGVtID0+IG5ldyBHbGlkZShpdGVtLCB7IHR5cGU6IFwiY2Fyb3VzZWxcIiB9KS5tb3VudCgpKTtcclxuIiwicmVxdWlyZShcIi4vZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmV4dGVuc2lvbnNcIik7XHJcbnJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5kYXRlLmV4dGVuc2lvbnNcIik7XHJcbnJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5udW1lcmljLmV4dGVuc2lvbnNcIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5qc1wiKTtcclxuIiwiY2xhc3MgTWFpbk1lbnUge1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zLm1haW5NZW51KSB7XHJcbiAgICAgIHRoaXMubWFpbk1lbnUgPSBvcHRpb25zLm1haW5NZW51O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIGJ1cmdlckJ1dHRvbihub2RlKSBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmJ1cmdlckJ1dHRvbikge1xyXG4gICAgICB0aGlzLmJ1cmdlckJ1dHRvbiA9IG9wdGlvbnMuYnVyZ2VyQnV0dG9uO1xyXG4gICAgICB0aGlzLmJ1cmdlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkJ1cmdlckJ1dHRvbkNsaWNrKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBidXJnZXJCdXR0b24obm9kZSkgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5wcm9maWxlQnV0dG9uKSB7XHJcbiAgICAgIHRoaXMucHJvZmlsZUJ1dHRvbiA9IG9wdGlvbnMucHJvZmlsZUJ1dHRvbjtcclxuICAgICAgdGhpcy5wcm9maWxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uUHJvZmlsZUJ1dHRvbkNsaWNrKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucHJvZmlsZUJ1dHRvbiA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlzUHJvZmlsZUFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5hdXRoTGlzdCA9IG9wdGlvbnMuYXV0aExpc3Q7XHJcbiAgfVxyXG5cclxuICBvbkJ1cmdlckJ1dHRvbkNsaWNrID0gZXZ0ID0+IHtcclxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGlmICh0aGlzLmlzUHJvZmlsZUFjdGl2ZSkge1xyXG4gICAgICB0aGlzLmF1dGhMaXN0LmNsYXNzTGlzdC5yZW1vdmUoXCJwYWdlLWhlYWRlcl9fYXV0aC1saXN0LS1hY3RpdmVcIik7XHJcbiAgICAgIHRoaXMuaXNQcm9maWxlQWN0aXZlID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm1haW5NZW51LmNsYXNzTGlzdC50b2dnbGUoXCJtYWluLW1lbnUtLWFjdGl2ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJ1cmdlckJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwibWFpbi1tZW51X19idXJnZXItaWNvbi0tYWN0aXZlXCIpO1xyXG4gICAgaWYgKHRoaXMucHJvZmlsZUJ1dHRvbikge1xyXG4gICAgICB0aGlzLnByb2ZpbGVCdXR0b24uY2xhc3NMaXN0LnRvZ2dsZShcInBhZ2UtaGVhZGVyX19hdXRoLXByb2ZpbGUtLWhpZGVcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25Qcm9maWxlQnV0dG9uQ2xpY2sgPSBldnQgPT4ge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAoIXRoaXMuaXNQcm9maWxlQWN0aXZlKSB7XHJcbiAgICAgIHRoaXMuYXV0aExpc3QuY2xhc3NMaXN0LmFkZChcInBhZ2UtaGVhZGVyX19hdXRoLWxpc3QtLWFjdGl2ZVwiKTtcclxuICAgICAgdGhpcy5idXJnZXJCdXR0b24uY2xhc3NMaXN0LmFkZChcIm1haW4tbWVudV9fYnVyZ2VyLWljb24tLWFjdGl2ZVwiKTtcclxuICAgICAgdGhpcy5pc1Byb2ZpbGVBY3RpdmUgPSB0cnVlO1xyXG4gICAgICB0aGlzLnByb2ZpbGVCdXR0b24uY2xhc3NMaXN0LmFkZChcInBhZ2UtaGVhZGVyX19hdXRoLXByb2ZpbGUtLWhpZGVcIik7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFpbk1lbnU7XHJcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS03LTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShtb2R1bGUuaWQsIGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLndvZmZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1SZWd1bGFyLnR0ZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1Cb2xkLndvZmZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvTW9udHNlcnJhdC1Cb2xkLnR0ZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LUJvbGQuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtUmVndWxhci50dGZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLUJvbGQud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLUJvbGQudHRmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtQm9sZC5mb250LnN2Z1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18sIHsgaGFzaDogXCIjd2ViZm9udFwiIH0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18sIHsgaGFzaDogXCIjd2ViZm9udFwiIH0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18sIHsgaGFzaDogXCIjd2ViZm9udFwiIH0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzExX19fLCB7IGhhc2g6IFwiI3dlYmZvbnRcIiB9KTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohIG5vcm1hbGl6ZS5jc3MgdjguMC4xIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL2h0bWx7bGluZS1oZWlnaHQ6MS4xNTstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6MTAwJX1ib2R5e21hcmdpbjowfW1haW57ZGlzcGxheTpibG9ja31oMXttYXJnaW46MC42N2VtIDA7Zm9udC1zaXplOjJlbX1ocnstd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtoZWlnaHQ6MDtvdmVyZmxvdzp2aXNpYmxlfXByZXtmb250LWZhbWlseTptb25vc3BhY2UsIG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWF7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1hYmJyW3RpdGxlXXtib3JkZXItYm90dG9tOm5vbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTstd2Via2l0LXRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkfWIsc3Ryb25ne2ZvbnQtd2VpZ2h0OmJvbGRlcn1jb2RlLGtiZCxzYW1we2ZvbnQtZmFtaWx5Om1vbm9zcGFjZSwgbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19c21hbGx7Zm9udC1zaXplOjgwJX1zdWIsc3Vwe2ZvbnQtc2l6ZTo3NSU7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjpyZWxhdGl2ZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX1zdWJ7Ym90dG9tOi0wLjI1ZW19c3Vwe3RvcDotMC41ZW19aW1ne2JvcmRlci1zdHlsZTpub25lfWJ1dHRvbixpbnB1dCxvcHRncm91cCxzZWxlY3QsdGV4dGFyZWF7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6MTAwJTtsaW5lLWhlaWdodDoxLjE1O21hcmdpbjowfWJ1dHRvbixpbnB1dHtvdmVyZmxvdzp2aXNpYmxlfWJ1dHRvbixzZWxlY3R7dGV4dC10cmFuc2Zvcm06bm9uZX1idXR0b24sW3R5cGU9XFxcImJ1dHRvblxcXCJdLFt0eXBlPVxcXCJyZXNldFxcXCJdLFt0eXBlPVxcXCJzdWJtaXRcXFwiXXstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9ufWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVye2JvcmRlci1zdHlsZTpub25lO3BhZGRpbmc6MH1idXR0b246LW1vei1mb2N1c3JpbmcsW3R5cGU9XFxcImJ1dHRvblxcXCJdOi1tb3otZm9jdXNyaW5nLFt0eXBlPVxcXCJyZXNldFxcXCJdOi1tb3otZm9jdXNyaW5nLFt0eXBlPVxcXCJzdWJtaXRcXFwiXTotbW96LWZvY3VzcmluZ3tvdXRsaW5lOjFweCBkb3R0ZWQgQnV0dG9uVGV4dH1maWVsZHNldHtwYWRkaW5nOjAuMzVlbSAwLjc1ZW0gMC42MjVlbX1sZWdlbmR7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2NvbG9yOmluaGVyaXQ7ZGlzcGxheTp0YWJsZTttYXgtd2lkdGg6MTAwJTtwYWRkaW5nOjA7d2hpdGUtc3BhY2U6bm9ybWFsfXByb2dyZXNze3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXRleHRhcmVhe292ZXJmbG93OmF1dG99W3R5cGU9XFxcImNoZWNrYm94XFxcIl0sW3R5cGU9XFxcInJhZGlvXFxcIl17LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3BhZGRpbmc6MH1bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9ue2hlaWdodDphdXRvfVt0eXBlPVxcXCJzZWFyY2hcXFwiXXstd2Via2l0LWFwcGVhcmFuY2U6dGV4dGZpZWxkO291dGxpbmUtb2Zmc2V0Oi0ycHh9W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uey13ZWJraXQtYXBwZWFyYW5jZTpub25lfTo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b257LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbjtmb250OmluaGVyaXR9ZGV0YWlsc3tkaXNwbGF5OmJsb2NrfXN1bW1hcnl7ZGlzcGxheTpsaXN0LWl0ZW19dGVtcGxhdGV7ZGlzcGxheTpub25lfVtoaWRkZW5de2Rpc3BsYXk6bm9uZX1AZm9udC1mYWNle2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKSBmb3JtYXQoXFxcInN2Z1xcXCIpfUBmb250LWZhY2V7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyArIFwiKSBmb3JtYXQoXFxcInN2Z1xcXCIpfUBmb250LWZhY2V7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fICsgXCIpO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzhfX18gKyBcIikgZm9ybWF0KFxcXCJzdmdcXFwiKX1AZm9udC1mYWNle2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCI7Zm9udC1zdHlsZTpub3JtYWw7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTBfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fICsgXCIpIGZvcm1hdChcXFwic3ZnXFxcIil9Ym9keXtjb2xvcjojMWYyMDQxO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiLCBcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWZ9LmNvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo4MC41NTU2JTttaW4td2lkdGg6MzIwcHg7bWF4LXdpZHRoOjE5MjBweDttYXJnaW46MCBhdXRvO3BhZGRpbmc6MCAxMHB4fUBtZWRpYSAobWF4LXdpZHRoOiAxMzAwcHgpey5jb250YWluZXJ7d2lkdGg6OTAuNTU1NiV9fUBtZWRpYSAobWF4LXdpZHRoOiA0MjVweCl7LmNvbnRhaW5lcnt3aWR0aDphdXRvO21hcmdpbjowO3BhZGRpbmc6MH19XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRzL01vbnRzZXJyYXQtUmVndWxhci1lYzkyZDMxLndvZmZcIjsiXSwic291cmNlUm9vdCI6IiJ9