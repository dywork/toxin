!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=192)}({1:function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var a=(o=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot).concat(e," */")}));return[n].concat(r).concat([a]).join("\n")}var o,s,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},a=0;a<this.length;a++){var r=this[a][0];null!=r&&(i[r]=!0)}for(var o=0;o<e.length;o++){var s=e[o];null!=s[0]&&i[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),t.push(s))}},t}},10:function(e,t,n){e.exports=n.p+"a3b387c93882604792867736aecd56c8.ttf"},11:function(e,t,n){e.exports=n.p+"04dd58d84ea0987b3dd7e26e23fae193.svg"},12:function(e,t,n){e.exports=n.p+"02969382c8f51c034b221b043a46e94a.woff"},13:function(e,t,n){e.exports=n.p+"678b12a6a938c32eb5fa88f2f439c2df.ttf"},14:function(e,t,n){e.exports=n.p+"68531a92e73b3a0b674c0bcf8001c74a.svg"},15:function(e,t,n){e.exports=n.p+"fa4554a21f2df2208345e7c153ea779e.woff"},16:function(e,t,n){e.exports=n.p+"809cd8ab97c465b57cb1a44b1795f12c.ttf"},165:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,a.default)(e),t&&t.no_symbols)return o.test(e);return r.test(e)};var i,a=(i=n(170))&&i.__esModule?i:{default:i};var r=/^[+-]?([0-9]*[.])?[0-9]+$/,o=/^[0-9]+$/;e.exports=t.default,e.exports.default=t.default},167:function(e,t,n){var i=n(168);"string"==typeof i&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1};n(3)(i,a);i.locals&&(e.exports=i.locals)},168:function(e,t,n){t=e.exports=n(1)(!1);var i=n(2),a=n(21),r=n(18),o=n(28),s=n(19),l=n(169),c=i(a),p=i(r),u=i(o),d=i(s),f=i(l);t.push([e.i,'.page-header{position:relative;z-index:100;background-color:#fff;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05)}.page-header__wrap{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:17px 0 15px}.page-header__auth{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-left:22px;padding-bottom:1px}.page-header__auth--is-auth{position:relative;padding-left:20px}.page-header__auth--is-auth::before{position:absolute;left:0;width:1px;height:30px;background:#1f2041;opacity:0.1;content:""}.page-header__auth-list{position:absolute;display:none;visibility:hidden;opacity:0}.page-header__auth .button{margin-right:20px}.page-header__auth .button:nth-child(2){margin-right:0;padding-left:18px;letter-spacing:0.3px}.page-header__user-name{margin:0;color:#1f2041;opacity:0.5}.page-header__auth-profile{display:none}@media (max-width: 1024px){.page-header__auth{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2;margin-left:auto}.page-header__auth--is-auth{margin-right:20px;padding-left:0;padding-right:20px}.page-header__auth--is-auth::before{left:auto;right:0}.page-header__auth>.button{display:none}.page-header__auth-profile{position:absolute;right:40px;display:block;-webkit-box-sizing:border-box;box-sizing:border-box;width:24px;height:24px;background:url('+c+') no-repeat;border:none;cursor:pointer;content:""}.page-header__auth-profile--hide{display:none}.page-header__auth-list{position:absolute;top:55px;left:50%;display:block;width:100vw;padding:0;list-style:none;background:#fff;-webkit-transform:translate(-50%, -10px);transform:translate(-50%, -10px);visibility:hidden;-webkit-transition:all 0.3s ease-in-out;transition:all 0.3s ease-in-out}.page-header__auth-list--active{-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0);visibility:visible;opacity:1}.page-header__auth-list .page-header__auth-item{width:100%}.page-header__auth-list .page-header__auth-item:last-child{-webkit-box-shadow:0 4px 2px -2px rgba(0,0,0,0.2);box-shadow:0 4px 2px -2px rgba(0,0,0,0.2)}.page-header__auth-list a{display:inline-block;width:100%;padding:20px 0;color:rgba(31,32,65,0.5);text-align:center;text-decoration:none;vertical-align:top;border-top:1px solid rgba(31,32,65,0.25)}.page-header__auth-list a:hover{color:#9969ff}}@media (max-width: 425px){.page-header__wrap{padding-right:20px;padding-left:20px}.page-header__auth-profile{right:60px}}@media (max-width: 380px){.page-header__auth--is-auth{margin-right:10px;padding-right:0}.page-header__auth--is-auth::before{display:none}}.logo{position:relative;min-width:120px;min-height:38px}.logo--big{margin-top:30px;margin-left:30px}.logo__link{position:absolute;top:-2px}.logo__link:hover .logo__letter{fill:#9969ff}.logo__link:hover .logo__label-left{fill:#6fcf97}.logo__letter,.logo__label-left{-webkit-transition:fill 0.4s ease;transition:fill 0.4s ease}.button{position:relative;z-index:100;padding:10px 20px;color:#fff;font-weight:normal;font-size:12px;font-family:"Quicksand","Montserrat",sans-serif;line-height:15px;text-transform:uppercase;text-decoration:none;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);border:none;border-radius:22px;cursor:pointer}.button--disable{opacity:0.5;cursor:default}.button--disable:hover::before{display:none}.button::before{position:absolute;top:0;left:0;z-index:-100;display:block;width:100%;height:100%;background:-webkit-gradient(linear, left top, left bottom, from(#9969ff), to(#5b7ef6));background:linear-gradient(#9969ff, #5b7ef6);border-radius:inherit;opacity:0;-webkit-transition:opacity 0.4s ease;transition:opacity 0.4s ease;content:""}.button:hover::before{opacity:1}.button--empty-style{padding:8px 18px;color:#bc9cff;background:#fff;border:2px solid #bc9cff}.button--empty-style::before{display:none}.button--empty-style:hover{color:#9969ff;border-color:#9969ff;background:#fff}.button--empty-disable{opacity:0.5;cursor:default}.button--empty-disable:hover{color:#bc9cff !important;background:#fff !important;border-color:#bc9cff !important}.button--icon{position:relative}.button--icon::after{position:absolute;top:50%;right:0;width:44px;height:44px;margin-top:-22px;background:url('+p+') no-repeat;background-position:center center;-webkit-transition:background 0.2s ease;transition:background 0.2s ease;content:""}.button--icon:active::after{background-position:20px center}.main-menu{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-left:auto}.main-menu__list,.main-menu__sub-menu{margin:0;padding:0;list-style:none}.main-menu__burger-icon{position:relative;display:none;width:25px;height:16px;cursor:pointer}.main-menu__burger-icon span{position:absolute;display:inline-block;width:100%;height:2px;vertical-align:top;background-color:#1f2041;-webkit-transition:opacity 0.2s ease-in-out, -webkit-transform 0.3s ease-in-out;transition:opacity 0.2s ease-in-out, -webkit-transform 0.3s ease-in-out;transition:transform 0.3s ease-in-out, opacity 0.2s ease-in-out;transition:transform 0.3s ease-in-out, opacity 0.2s ease-in-out, -webkit-transform 0.3s ease-in-out}.main-menu__burger-icon span:nth-child(2){top:7px}.main-menu__burger-icon span:last-child{top:14px}.main-menu__burger-icon--active span:first-child{-webkit-transform:rotate(45deg) translate(7px, 3px);transform:rotate(45deg) translate(7px, 3px)}.main-menu__burger-icon--active span:nth-child(2){opacity:0}.main-menu__burger-icon--active span:last-child{-webkit-transform:rotate(-45deg) translate(7px, -3px);transform:rotate(-45deg) translate(7px, -3px)}.main-menu__list{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.main-menu__sub-menu{position:absolute;top:30px;left:50%;padding:5px 20px;text-align:center;background-color:#fff;border-radius:5px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translate(-50%, 10px);transform:translate(-50%, 10px);visibility:hidden;opacity:0;-webkit-transition:all 0.4s ease;transition:all 0.4s ease}.main-menu__item{margin-right:20px}.main-menu__item:last-child{margin-right:0}.main-menu__item--sub-menu{position:relative}.main-menu__item--sub-menu:hover>a{color:#9969ff;opacity:1}.main-menu__item--sub-menu:hover>a::after{border-right-color:#ab83ff;border-bottom-color:#ab83ff;opacity:1}.main-menu__item--sub-menu::after{position:absolute;bottom:-18px;left:0;width:100%;height:20px;background:transparent;content:""}.main-menu__item--sub-menu>a{position:relative;padding-right:24px}.main-menu__item--sub-menu>a::after{position:absolute;top:50%;right:6px;width:7px;height:7px;margin-top:-6px;background-color:transparent;border-right:2px solid #1f2041;border-bottom:2px solid #1f2041;-webkit-transform:rotate(45deg);transform:rotate(45deg);opacity:0.5;content:""}.main-menu__item--sub-menu>a:hover::after{border-right-color:#ab83ff;border-bottom-color:#ab83ff;opacity:1}.main-menu__item:hover>.main-menu__sub-menu{z-index:100;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0);visibility:visible;opacity:1}.main-menu__sub-item{margin-bottom:10px}.main-menu__item a,.main-menu__sub-item a{color:rgba(31,32,65,0.5);font-size:14px;line-height:17px;text-decoration:none;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.main-menu__item a:hover,.main-menu__sub-item a:hover{color:#9969ff}@media (max-width: 1024px){.main-menu{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3;margin-left:0}.main-menu nav{position:absolute;top:69px;left:50%;width:100vw;background:#fff;-webkit-transform:translate(-50%, -10px);transform:translate(-50%, -10px);visibility:hidden;opacity:0;-webkit-transition:all 0.3s ease-in-out;transition:all 0.3s ease-in-out}.main-menu--active nav{-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0);visibility:visible;opacity:1}.main-menu__sub-menu{top:45px}.main-menu__item{width:100%}.main-menu__item:last-child{margin-right:auto;-webkit-box-shadow:0 4px 2px -2px rgba(0,0,0,0.2);box-shadow:0 4px 2px -2px rgba(0,0,0,0.2)}.main-menu__item>a{display:inline-block;width:100%;padding:20px 0;text-align:center;vertical-align:top;border-top:1px solid rgba(31,32,65,0.25)}.main-menu__list{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.main-menu__burger-icon{display:block}.main-menu__item--sub-menu::after{display:none}.main-menu__item--sub-menu>a::after{top:48.5%;right:auto;margin-left:10px}}.date-wishes{width:380px;background:#fff;border-radius:4px;-webkit-box-shadow:0 0 25px rgba(0,0,0,0.2);box-shadow:0 0 25px rgba(0,0,0,0.2)}.date-wishes fieldset{margin:0;padding:0;border:0}.date-wishes .input-group__label{color:#1f2041;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.date-wishes .button{width:100%;margin-top:31px;padding:15px 20px;padding-top:14px;font-weight:normal}.date-wishes .button--icon{z-index:0}.date-wishes__wrap{padding:40px 30px 30px}.date-wishes__group{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:20px}.date-wishes__group .input-group__input--button-split{width:106px}.date-wishes__group .date-picker-container{position:absolute;top:269px;left:50%}.drop-down-container{position:relative}.date-wishes__title{margin:0;margin-bottom:20px;color:#1f2041;font-weight:bold;font-size:24px;line-height:30px}@media (max-width: 380px){.date-wishes{width:100%;min-width:320px;margin:0 auto}.date-wishes__group .input-group{margin-right:20px}.date-wishes__group .input-group:nth-child(2){margin-right:0}.date-wishes__group .input-group__input--button-split{width:100%}.date-wishes__group .input-group__button-split{width:28%}}@media (max-width: 768px){.date-wishes{margin:0 auto}}@-webkit-keyframes shake{10%,90%{-webkit-transform:translate3d(-1px, 0, 0);transform:translate3d(-1px, 0, 0)}20%,80%{-webkit-transform:translate3d(2px, 0, 0);transform:translate3d(2px, 0, 0)}30%,50%,70%{-webkit-transform:translate3d(-4px, 0, 0);transform:translate3d(-4px, 0, 0)}40%,60%{-webkit-transform:translate3d(4px, 0, 0);transform:translate3d(4px, 0, 0)}}@keyframes shake{10%,90%{-webkit-transform:translate3d(-1px, 0, 0);transform:translate3d(-1px, 0, 0)}20%,80%{-webkit-transform:translate3d(2px, 0, 0);transform:translate3d(2px, 0, 0)}30%,50%,70%{-webkit-transform:translate3d(-4px, 0, 0);transform:translate3d(-4px, 0, 0)}40%,60%{-webkit-transform:translate3d(4px, 0, 0);transform:translate3d(4px, 0, 0)}}.date-picker{position:absolute;top:50%;left:50%;z-index:100;-webkit-box-sizing:border-box;box-sizing:border-box;width:320px;margin-top:-200px;margin-left:-160px;background-color:#fff;border:1px solid rgba(31,32,65,0.25);border-radius:4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translateY(-10px);transform:translateY(-10px);visibility:hidden;opacity:0;-webkit-transition:all 0.2s ease-in;transition:all 0.2s ease-in}.date-picker--show{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible;opacity:1}.date-picker--error-animation{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px;-webkit-animation:shake 0.7s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;animation:shake 0.7s cubic-bezier(0.36, 0.07, 0.19, 0.97) both}.date-picker__wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:20px}.date-picker__control{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:100%}.date-picker__title{margin:0;font-weight:bold;font-size:19px;line-height:24px}.date-picker__slider-btn{width:24px;height:24px;font-size:0;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:none;outline:none;cursor:pointer;-webkit-transition:-webkit-transform 0.2s ease;transition:-webkit-transform 0.2s ease;transition:transform 0.2s ease;transition:transform 0.2s ease, -webkit-transform 0.2s ease}.date-picker__slider-btn--prev{background-image:url('+u+")}.date-picker__slider-btn--prev:active{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.date-picker__slider-btn--next{background-image:url("+u+');-webkit-transform:rotate(180deg);transform:rotate(180deg)}.date-picker__slider-btn--next:active{-webkit-transform:rotate(180deg) translateX(-5px);transform:rotate(180deg) translateX(-5px)}.date-picker__calendar{margin-top:30px;margin-bottom:20px;border-collapse:collapse}.date-picker__th,.date-picker__day{-webkit-box-sizing:border-box;box-sizing:border-box;width:40px;height:40px;font-weight:bold;font-size:12px;line-height:15px;text-align:center}.date-picker__th{color:#bc9cff}.date-picker__day{color:rgba(31,32,65,0.5);font-weight:normal;border-radius:22px;cursor:pointer}.date-picker__day:hover{color:#fff !important;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff, #8ba4f9)}.date-picker__day--error{font-weight:bold;background:tomato !important}.date-picker__day--current{color:#fff !important;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#6fcf97), to(#66d2ea));background:linear-gradient(180deg, #6fcf97, #66d2ea)}.date-picker__day--select{color:#fff !important;font-weight:bold;background:-webkit-gradient(linear, left top, left bottom, from(#bc9cff), to(#8ba4f9));background:linear-gradient(180deg, #bc9cff, #8ba4f9)}.date-picker__day--select-space{border-radius:0;background:rgba(188,156,255,0.25)}.date-picker__day--not-current{color:rgba(31,32,65,0.25)}.date-picker__day--select-start,.date-picker__day--select-end{position:relative}.date-picker__day--select-start::after,.date-picker__day--select-end::after{position:absolute;top:0;width:36%;height:100%;background:-webkit-gradient(linear, left top, left bottom, from(rgba(188,156,255,0.25)), to(rgba(139,164,249,0.25)));background:linear-gradient(180deg, rgba(188,156,255,0.25), rgba(139,164,249,0.25));content:""}.date-picker__day--select-start::after{right:0}.date-picker__day--select-end::after{left:0}.date-picker__button{padding:0;color:rgba(31,32,65,0.5);font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase;background:transparent;border:none;cursor:pointer;-webkit-transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out, -webkit-transform 0.1s ease-in-out}.date-picker__button:hover{color:#bc9cff}.date-picker__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.date-picker__button--accent{color:#bc9cff}.date-picker__button--accent:hover{color:rgba(31,32,65,0.5)}.drop-down{position:absolute;top:198px;left:50%;z-index:100;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;margin-top:-200px;margin-left:-50%;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:0 0 4px 4px;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05);-webkit-transform:translateY(-10px);transform:translateY(-10px);visibility:hidden;opacity:0;-webkit-transition:all 0.2s ease-in;transition:all 0.2s ease-in}.drop-down--show{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible;opacity:1}.drop-down__wrap{padding-top:7px;padding-left:14px;padding-right:7px;padding-bottom:8px}.drop-down__count-list{margin:0;padding:0;list-style:none}.drop-down__count-item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:7px}.drop-down__count-item:last-child{margin-bottom:0}.drop-down__counter-menu{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:92px}.drop-down__count-item-name{margin:0;padding:0;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.drop-down__select-view{width:20px;margin:0;font-weight:bold;font-size:12px;line-height:15px;text-align:center}.drop-down__counter-btn{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;width:30px;height:30px;padding:0;color:rgba(31,32,65,0.5);font-size:18px;text-align:center;vertical-align:middle;background:#fff;border:1px solid rgba(31,32,65,0.5);border-radius:50%;cursor:pointer}.drop-down__counter-btn--plus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"+"}.drop-down__counter-btn--minus::after{position:absolute;top:2px;right:0;bottom:0;left:0;content:"-"}.drop-down__counter-btn--disabled{color:rgba(31,32,65,0.25);border:1px solid rgba(31,32,65,0.25);cursor:default}.drop-down__control{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-top:20px}.drop-down__button{padding:0;color:rgba(31,32,65,0.5);font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase;background:transparent;border:none;cursor:pointer;-webkit-transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, -webkit-transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out;transition:color 0.2s ease-in-out, transform 0.1s ease-in-out, -webkit-transform 0.1s ease-in-out}.drop-down__button:hover{color:#bc9cff}.drop-down__button:active{-webkit-transform:translateY(3px);transform:translateY(3px)}.drop-down__button--accent{color:#bc9cff}.drop-down__button--accent:hover{color:rgba(31,32,65,0.5)}.input-group{display:-webkit-box;display:-ms-flexbox;display:flex;margin:0}.input-group--column{-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.input-group:hover .input-group__input,.input-group:focus .input-group__input{border-color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-webkit-input-placeholder, .input-group:focus .input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-moz-placeholder, .input-group:focus .input-group__input::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input:-ms-input-placeholder, .input-group:focus .input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::-ms-input-placeholder, .input-group:focus .input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__input::placeholder,.input-group:focus .input-group__input::placeholder{color:rgba(31,32,65,0.75)}.input-group:hover .input-group__button-split,.input-group:focus .input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__label{margin:0;margin-bottom:5px}.input-group__descr{margin:0;padding-bottom:4px;color:rgba(31,32,65,0.45);font-family:Montserrat;font-size:12px;line-height:15px;text-transform:uppercase}.input-group__label--big{font-size:12px;line-height:15px;font-family:"Montserrat", "Arial", sans-serif;font-style:normal;font-weight:bold;text-transform:uppercase}.input-group__split{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;margin:0}.input-group__input{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;padding:9px 14px;color:rgba(31,32,65,0.75);font-size:14px;font-family:"Quicksand","Montserrat",sans-serif;line-height:24px;border:1px solid rgba(31,32,65,0.25);border-radius:4px;outline:none;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__input--icon{background:url('+d+') no-repeat;background-position:95% center}.input-group__input--button-split{position:relative;padding-right:0;border-right:none;border-radius:4px 0 0 4px}.input-group__input--fake{cursor:pointer}.input-group__input--active{border-color:rgba(31,32,65,0.5)}.input-group__input--hover{border-color:rgba(31,32,65,0.75)}.input-group__input--hover::-webkit-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-moz-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover:-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::-ms-input-placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input--hover::placeholder{color:rgba(31,32,65,0.75) !important}.input-group__input::-webkit-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-moz-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-moz-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::-ms-input-placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-ms-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input::placeholder{color:rgba(31,32,65,0.24);font-family:Montserrat;font-size:14px;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.input-group__input:hover,.input-group__input:focus{border-color:rgba(31,32,65,0.75)}.input-group__input:hover+.input-group__button-split,.input-group__input:focus+.input-group__button-split{border-color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-webkit-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-moz-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder:-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::-ms-input-placeholder{color:rgba(31,32,65,0.75)}.input-group__input--dark-placeholder::placeholder{color:rgba(31,32,65,0.75)}.input-group__button-split{-webkit-box-sizing:border-box;box-sizing:border-box;width:44px;padding:0;background-color:transparent;background-repeat:no-repeat;background-position:center center;border:1px solid rgba(31,32,65,0.25);border-left:none;border-radius:0 4px 4px 0;outline:none;cursor:pointer;-webkit-transition:border 0.4s ease;transition:border 0.4s ease}.input-group__button-split img{-webkit-transition:-webkit-transform 0.1s ease;transition:-webkit-transform 0.1s ease;transition:transform 0.1s ease;transition:transform 0.1s ease, -webkit-transform 0.1s ease}.input-group__button-split--down-animation:active img{-webkit-transform:translateY(2px);transform:translateY(2px)}.input-group__button-split--right-animation:active img{-webkit-transform:translateX(5px);transform:translateX(5px)}.page-footer{position:relative;-webkit-box-shadow:0 10px 20px rgba(31,32,65,0.05);box-shadow:0 10px 20px rgba(31,32,65,0.05)}.page-footer--border-top{border-top:1px solid rgba(31,32,65,0.25)}.page-footer::after{position:absolute;bottom:78px;width:100%;height:1px;background:rgba(31,32,65,0.1);content:""}.page-footer__content{display:-webkit-box;display:-ms-flexbox;display:flex;padding:101px 0 75px}.page-footer__col-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding-top:2px}.page-footer__side-info{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:29px 0}.page-footer .text-content{width:260px}.page-footer .text-content__title{margin-bottom:17px}.page-footer .nav-menu__title{margin-bottom:22px}.page-footer .nav-menu__item{margin-bottom:21px}.page-footer .logo{margin-bottom:16px}.page-footer .input-group{margin-top:23px}.page-footer .input-group__input--button-split{width:216px}.page-footer__col--large:first-child{margin-right:3.5%}@media (width: 1440px){.page-footer__col:nth-child(2){margin-right:93px}.page-footer__col:last-child{margin-left:auto}.page-footer__col-group .page-footer__col:first-child{margin-right:57px}}@media (max-width: 1100px){.page-footer__col-group{-ms-flex-wrap:wrap;flex-wrap:wrap}.page-footer__col-group .page-footer__col{-webkit-box-sizing:border-box;box-sizing:border-box;width:50%;margin-bottom:40px}.page-footer__col-group .page-footer__col:nth-child(3){margin-bottom:0}.page-footer__col-group .page-footer__col:last-child{margin-bottom:0}.page-footer__col-group .page-footer__col:last-child .text-content{width:85%}.page-footer__col-group .page-footer__col:last-child .input-group__input{width:83.07%}.page-footer__content>.page-footer__col{-webkit-box-sizing:border-box;box-sizing:border-box;width:240px;margin-right:14%}.page-footer__content>.page-footer__col .text-content{width:100%}.page-footer__content{padding-top:50px;padding-bottom:50px}}@media (max-width: 768px){.page-footer .nav-menu__title{margin-bottom:10px;font-size:14px}.page-footer .nav-menu__item{margin-bottom:10px}.page-footer .text-content__title{margin-bottom:10px;padding-bottom:10px;font-size:14px;border-bottom:2px solid #1f2041}.page-footer__content{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-top:30px;padding-bottom:40px}.page-footer__content>.page-footer__col{width:100%;margin-bottom:40px}.page-footer__col-group .page-footer__col{width:100%;margin-bottom:40px}.page-footer__col-group .page-footer__col:nth-child(3){margin-bottom:30px}.page-footer__col-group .page-footer__col:last-child .text-content{width:100%}.page-footer__col-group .page-footer__col:last-child .input-group{margin-top:20px}}@media (max-width: 555px){.page-footer::after{bottom:120px}.page-footer__side-info{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.page-footer__side-info .copyright{margin-bottom:20px;text-align:center}}@media (max-width: 394px){.page-footer::after{bottom:135px}}@media (max-width: 425px){.page-footer__wrap{padding-right:20px;padding-left:20px}}.nav-menu__list{margin:0;padding:0;list-style:none}.nav-menu__title{margin:0;margin-bottom:20px;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.nav-menu__item{margin-bottom:20px}.nav-menu__item:last-child{margin-bottom:0}.nav-menu__item a{color:rgba(31,32,65,0.5);font-size:14px;line-height:17px;text-decoration:none;-webkit-transition:color 0.4s ease;transition:color 0.4s ease}.nav-menu__item a:hover{color:#9969ff}@media (max-width: 768px){.nav-menu__title{padding-bottom:10px;border-bottom:2px solid #1f2041}.nav-menu__item a{display:inline-block;width:100%;vertical-align:top}}.text-content__title{margin:0;margin-bottom:20px;font-weight:bold;font-size:12px;line-height:15px;text-transform:uppercase}.text-content__paragraph{margin:0;color:rgba(31,32,65,0.75);font-size:14px;line-height:24px}.social-buttons__list{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin:0;padding:0;list-style:none}.social-buttons__item{margin-right:24px}.social-buttons__item:last-child{margin-right:0}.social-buttons__link .icon-content{-webkit-transition:fill 0.4s ease;transition:fill 0.4s ease}.social-buttons__link:hover .icon-content{fill:#9969ff}.copyright{font-family:Montserrat;margin:0;color:rgba(31,32,65,0.75);font-size:14px;line-height:17px}.index-block{-webkit-box-sizing:border-box;box-sizing:border-box;height:830px;background-image:url('+f+");background-repeat:no-repeat;background-position:center -69px}.index-block__wrap{position:relative;min-height:830px;padding-top:70px}.index-block__slogan{position:absolute;right:4px;bottom:92px;width:297px}.index-block__slogan p{margin:0;color:rgba(31,32,65,0.75);font-size:14px;line-height:24px;text-align:right}@media (min-width: 1440px){.index-block{background-size:cover}}@media (max-width: 425px){.index-block__slogan{right:24px}}\n",""])},169:function(e,t,n){e.exports=n.p+"bd24401345b53e29ff484675b2625722.jpg"},17:function(e,t,n){e.exports=n.p+"d5247b3734bb0aa3e89c90513b4a4b7c.svg"},170:function(e,t,n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e){return(a="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(e){return i(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":i(e)})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!("string"==typeof e||e instanceof String)){var t;throw t=null===e?"null":"object"===(t=a(e))&&e.constructor&&e.constructor.hasOwnProperty("name")?e.constructor.name:"a ".concat(t),new TypeError("Expected string but received ".concat(t,"."))}},e.exports=t.default,e.exports.default=t.default},18:function(e,t,n){e.exports=n.p+"7f7e915e030991fd2a0ff3a260129894.svg"},19:function(e,t,n){e.exports=n.p+"2aca2b81629bfaae56f0a3532836a10e.svg"},192:function(e,t,n){"use strict";n.r(t);n(4),n(167);var i=n(24),a=n.n(i),r=n(165),o=n.n(r);function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c={0:"Январь",1:"Февраль",2:"Март",3:"Апрель",4:"Май",5:"Июнь",6:"Июль",7:"Август",8:"Сентябрь",9:"Октябрь",10:"Ноябрь",11:"Декабрь"};function p(e,t,n){var i=document.createElement(e);return t&&i.classList.add(t),n&&(i.textContent=n),i}function u(e){return e<10?"0".concat(e):e}var d=function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s(this,e),l(this,"hasCurrentMonth",(function(e){return e.getMonth()===t.currentDate.getMonth()})),l(this,"compaireDate",(function(e,t){var n=e.getDate(),i=e.getMonth(),a=e.getFullYear(),r=t.getDate(),o=t.getMonth(),s=t.getFullYear();return a>s?1:a<s?-1:i>o?1:i<o?-1:n>r?1:n<r?-1:0})),l(this,"hasDataFull",(function(e){return e.split(".").every((function(e){return o()(e)}))})),l(this,"showCalendar",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.contains("date-picker--show")||e.classList.add("date-picker--show"),document.body.addEventListener("mouseup",t.onClickShowCalendar),document.addEventListener("keyup",t.onEscUnshowCalendar)})),l(this,"unshowCalendar",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.contains("date-picker--show")&&e.classList.remove("date-picker--show"),document.body.removeEventListener("mouseup",t.onClickShowCalendar),document.removeEventListener("keyup",t.onEscUnshowCalendar)})),l(this,"showArrivalMonthCalendar",(function(){var e=t.arrivalInput.value,n=t.getConverteDateByUserInput(e),i=t.compaireDate(n,new Date)>=0;t.showCalendar(),t.onInputDateArrival(),t.arrivalDate&&i&&t.updateCurrentDate(t.arrivalDate)})),l(this,"showDepartureMonthCalendar",(function(){t.showCalendar(),t.onInputDateDeparture(),t.departureDate&&t.updateCurrentDate(t.departureDate)})),l(this,"showErrorAnimation",(function(){var e=t.parentNode.querySelector(".date-picker");e.classList.add("date-picker--error-animation"),setTimeout((function(){e.classList.remove("date-picker--error-animation")}),700)})),l(this,"paintingSelectCell",(function(){var e=t.parentNode.querySelectorAll("td");if(t.arrivalDate&&t.departureDate){var n=t.getAriaDateByDate(t.arrivalDate),i=t.getAriaDateByDate(t.departureDate),a=n===i;e.forEach((function(e){var r=n===e.getAttribute("aria-date"),o=i===e.getAttribute("aria-date"),s=new Date(e.getAttribute("aria-date"));o&&!a&&(e.classList.add("date-picker__day--select-end"),e.classList.add("date-picker__day--select"));var l=t.compaireDate(s,t.arrivalDate)>0,c=t.compaireDate(s,t.departureDate)<0;l&&c&&e.classList.add("date-picker__day--select-space"),r&&i&&!a?(e.classList.add("date-picker__day--select-start"),e.classList.add("date-picker__day--select")):r&&e.classList.add("date-picker__day--select")}))}else if(t.arrivalDate){var r=t.getAriaDateByDate(t.arrivalDate);e.forEach((function(e){r===e.getAttribute("aria-date")&&e.classList.add("date-picker__day--select")}))}})),l(this,"clearSelectCell",(function(){t.parentNode.querySelectorAll("td").forEach((function(e){var t=e.classList.contains("date-picker__day--select"),n=e.classList.contains("date-picker__day--select-space"),i=e.classList.contains("date-picker__day--select-start"),a=e.classList.contains("date-picker__day--select-end");n&&e.classList.remove("date-picker__day--select-space"),t&&e.classList.remove("date-picker__day--select"),i&&e.classList.remove("date-picker__day--select-start"),a&&e.classList.remove("date-picker__day--select-end")}))})),l(this,"onClickShowCalendar",(function(e){var n=t.parentNode.querySelector(".date-picker"),i=e.target===t.arrivalInput||e.target===t.departureInput,a=n.contains(e.target);!i&&!a&&t.unshowCalendar()})),l(this,"onEscUnshowCalendar",(function(e){27===e.keyCode&&(t.unshowCalendar(),t.arrivalInput.blur(),t.departureInput.blur())})),l(this,"onFocusArrivalInput",(function(){var e=t.arrivalInput.value;if(t.hasDataFull(e)){var n=t.getConverteDateByUserInput(e);t.compaireDate(n,new Date)>=0&&t.showArrivalMonthCalendar()}else t.showCalendar()})),l(this,"onFocusDepartureInput",(function(){var e=t.departureInput.value;t.hasDataFull(e)?t.showDepartureMonthCalendar():t.showCalendar()})),l(this,"onInputDateArrival",(function(){var e=t.arrivalInput.value;if(t.hasDataFull(e)){var n=t.getConverteDateByUserInput(e),i=t.getAriaDateByDate(n),a=t.getCellByAriaDate(i),r=!1;if(t.departureDate&&(r=t.compaireDate(n,t.departureDate)>0),t.compaireDate(n,new Date)<0)t.showErrorAnimation(),a&&(a.classList.add("date-picker__day--error"),setTimeout((function(){a.classList.remove("date-picker__day--error")}),700)),t.arrivalInput.value="",t.clearSelectCell();else{if(a){var o=!1;if(t.arrivalDate&&(o=n.toDateString()===t.arrivalDate.toDateString()),!o){var s=!1;t.departureDate&&(s=t.compaireDate(n,t.departureDate)<0),s?(t.clearSelectCell(),t.onStartSelectRangeDate(a,n),t.paintingSelectCell()):r?(t.clearSelectCell(),t.onClearSelectRangeDate(),t.departureInput.value=""):(t.isEndSelect||t.isStartSelect)&&(t.clearSelectCell(),t.onClearSelectRangeDate())}}else r&&(t.clearSelectCell(),t.onClearSelectRangeDate(),t.departureInput.value="");t.onStartSelectRangeDate(a,n)}}})),l(this,"onInputDateDeparture",(function(){var e=t.arrivalInput.value,n=t.hasDataFull(e),i=t.departureInput.value,a=t.hasDataFull(i);if(!n&&a)t.showErrorAnimation(),t.arrivalInput.focus();else if(n&&t.onInputDateArrival(),a){var r=t.getConverteDateByUserInput(i),o=t.getAriaDateByDate(r),s=t.getCellByAriaDate(o);if(s)if(t.compaireDate(r,t.arrivalDate)<0)t.showErrorAnimation(),s.classList.add("date-picker__day--error"),setTimeout((function(){s.classList.remove("date-picker__day--error")}),700),t.departureInput.value="";else t.departureCell===s||(t.isEndSelect&&t.clearSelectCell(),t.onEndSelectRangeDate(s,r),t.paintingSelectCell());else t.compaireDate(r,t.arrivalDate)<0?(t.showErrorAnimation(),t.departureInput.value=""):(t.clearSelectCell(),t.onEndSelectRangeDate(s,r),t.paintingSelectCell())}})),l(this,"onStartSelectRangeDate",(function(e,n){e&&(t.arrivalCell=e,e.classList.add("date-picker__day--select")),t.isStartSelect=!0,t.isEndSelect=!1,t.arrivalDate=n})),l(this,"onEndSelectRangeDate",(function(e,n){e&&(t.departureCell=e,e.classList.add("date-picker__day--select")),t.isStartSelect=!1,t.isEndSelect=!0,t.departureDate=n})),l(this,"onClearSelectRangeDate",(function(){t.arrivalDate=null,t.departureDate=null,t.arrivalCell=null,t.departureCell=null,t.isStartSelect=!1,t.isEndSelect=!1})),l(this,"onFullClearCalendar",(function(){t.onClearSelectRangeDate(),t.clearSelectCell(),t.arrivalInput.value="",t.departureInput.value="",t.updateCurrentDate(new Date)})),l(this,"onSelectDate",(function(e){if(e.preventDefault(),"td"===e.target.tagName.toLowerCase()){t.isEndSelect&&(t.clearSelectCell(),t.onClearSelectRangeDate());var n=e.target,i=new Date(n.getAttribute("aria-date")),a=u(i.getDate()),r=u(i.getMonth()+1),o=i.getFullYear(),s="".concat(a,".").concat(r,".").concat(o),l=n===t.arrivalCell||n===t.departureCell;if(t.compaireDate(i,new Date)<0)t.showErrorAnimation(),n.classList.add("date-picker__day--error"),setTimeout((function(){n.classList.remove("date-picker__day--error")}),700);else if(t.isStartSelect&&!l){t.compaireDate(i,t.arrivalDate)<0?(t.showErrorAnimation(),n.classList.add("date-picker__day--error"),setTimeout((function(){n.classList.remove("date-picker__day--error")}),700)):(t.onEndSelectRangeDate(n,i),t.departureInput.value=s,t.paintingSelectCell(),t.updateCurrentDate(i))}else l&&!t.isEndSelect?(t.onEndSelectRangeDate(n,i),t.departureInput.value=s,t.updateCurrentDate(i)):(t.onStartSelectRangeDate(n,i),t.arrivalInput.value=s,t.updateCurrentDate(i))}})),l(this,"getAriaDateByDate",(function(e){var t=e.getDate(),n=e.getMonth(),i=e.getFullYear();return"".concat(i,"-").concat(n+1,"-").concat(t)})),l(this,"getConverteDateByUserInput",(function(e){var t=e.split("."),n=t[0],i=t[1],a=t[2];return new Date(a,i-1,n)})),l(this,"getNumberRow",(function(){var e=t.currentDate.getFullYear(),n=t.currentDate.getMonth(),i=new Date(e+1,n+1,0).getDate(),a=new Date(e,n,0).getDay(),r=5;return 6===a&&i>=30&&(r=6),5===a&&31===i&&(r=6),0===a&&28===i&&(r=4),r})),l(this,"getCalendarTableDate",(function(){var e,n,i=document.createDocumentFragment(),a=new Date,r=t.currentDate.getFullYear(),o=t.currentDate.getMonth(),s=new Date(r,o,0).getDay(),l=new Date(r,o,0).getDate(),c=t.getNumberRow();0===s?(n=0,e=o):(n=l-s,e=o-1);for(var u=0;u<c;u++){for(var d=p("tr"),f=0;f<7;f++){var m=new Date(r,e,++n),g=p("td","date-picker__day",m.getDate()),h=0===t.compaireDate(m,a);t.hasCurrentMonth(m)||h||g.classList.add("date-picker__day--not-current"),h&&g.classList.add("date-picker__day--current");var b=m.getMonth()+1,v="".concat(m.getFullYear(),"-").concat(b,"-").concat(m.getDate());g.setAttribute("aria-date",v),d.appendChild(g)}i.appendChild(d)}return i})),l(this,"getCellByAriaDate",(function(e){var n;return t.parentNode.querySelectorAll("td").forEach((function(t){t.getAttribute("aria-date")===e&&(n=t)})),n})),l(this,"getCalendar",(function(){var e=p("section","date-picker"),n=p("div","date-picker__wrap"),i=t.getCalendarTopControl(),a=t.getCalendarTable(),r=t.getCalendarBotControl();return n.appendChild(i),n.appendChild(a),n.appendChild(r),e.appendChild(n),e})),l(this,"getCalendarTopControl",(function(){var e=p("div","date-picker__control"),n=p("button","date-picker__slider-btn","Назад");n.classList.add("date-picker__slider-btn--prev"),n.type="button",n.addEventListener("click",(function(e){e.preventDefault();var n=t.currentDate.getFullYear(),i=t.currentDate.getMonth(),a=new Date(n,i-1,1);t.updateCurrentDate(a)}));var i=p("button","date-picker__slider-btn","Вперед");i.classList.add("date-picker__slider-btn--next"),i.type="button",i.addEventListener("click",(function(e){e.preventDefault();var n=t.currentDate.getFullYear(),i=t.currentDate.getMonth(),a=new Date(n,i+1,1);t.updateCurrentDate(a)}));var a=c[t.currentDate.getMonth()],r=t.currentDate.getFullYear(),o=p("h2","date-picker__title","".concat(a," ").concat(r));return o.id="date-picker-main-title",e.appendChild(n),e.appendChild(o),e.appendChild(i),e})),l(this,"getCalendarTable",(function(){var e=p("table","date-picker__calendar"),n=p("thead"),i=p("tbody"),a=p("tr");["Пн","Вт","Ср","Чт","Пт","Сб","Вс"].forEach((function(e){var t=p("th","date-picker__th",e);a.appendChild(t)})),n.appendChild(a);var r=t.getCalendarTableDate();return i.appendChild(r),i.addEventListener("click",t.onSelectDate),e.appendChild(n),e.appendChild(i),e})),l(this,"getCalendarBotControl",(function(){var e=p("div","date-picker__control");return[{text:"Очистить",isAccent:!1,clickHandler:t.onFullClearCalendar},{text:"Применить",isAccent:!0,clickHandler:t.unshowCalendar}].forEach((function(t){var n=p("button","date-picker__button",t.text);n.type="button",t.isAccent&&n.classList.add("date-picker__button--accent"),t.clickHandler&&n.addEventListener("click",(function(e){e.preventDefault(),t.clickHandler()})),e.appendChild(n)})),e})),l(this,"updateCurrentDate",(function(e){t.currentDate=e,t.updateCalendar(),t.paintingSelectCell()})),l(this,"updateCalendar",(function(){t.updateCalendarTitle(),t.updateCalendarTable()})),l(this,"updateCalendarTitle",(function(){var e=document.querySelector("#date-picker-main-title"),n=c[t.currentDate.getMonth()],i=t.currentDate.getFullYear();e.textContent="".concat(n," ").concat(i)})),l(this,"updateCalendarTable",(function(){var e=t.parentNode.querySelector("table"),n=e.querySelector("tbody");e.removeChild(n);var i=p("tbody"),a=t.getCalendarTableDate();i.addEventListener("click",t.onSelectDate),i.appendChild(a),e.appendChild(i)})),l(this,"renderCalendar",(function(){var e=t.getCalendar();t.parentNode.appendChild(e)})),n.parentNodeId?this.parentNode=document.querySelector("#".concat(n.parentNodeId)):console.error("Expected parentNodeId inside constructor object but not received"),n.arrivalInputId?(this.arrivalInput=document.querySelector("#".concat(n.arrivalInputId)),a()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#".concat(n.arrivalInputId)),this.arrivalInput.addEventListener("focus",this.onFocusArrivalInput),this.arrivalInput.addEventListener("keydown",(function(e){if(13===e.keyCode){e.preventDefault(),t.showArrivalMonthCalendar();var n=t.arrivalInput.value;t.hasDataFull(n)&&t.departureInput.focus()}}))):console.error("Expected arrivalInputId inside constructor object but not received"),n.departureInputId?(this.departureInput=document.querySelector("#".concat(n.departureInputId)),a()({mask:"99.99.9999",placeholder:"ДД.ММ.ГГГГ"}).mask("#".concat(n.departureInputId)),this.departureInput.addEventListener("focus",this.onFocusDepartureInput),this.departureInput.addEventListener("keydown",(function(e){13===e.keyCode&&(e.preventDefault(),t.showDepartureMonthCalendar())}))):console.error("Expected departureInputId inside constructor object but not received"),n.arrivalSplitBtnId?(this.arrivalSplitBtn=document.querySelector("#".concat(n.arrivalSplitBtnId)),this.arrivalSplitBtn.addEventListener("click",this.showArrivalMonthCalendar)):console.error("Expected arrivalSplitBtnId inside constructor object but not received"),n.departureSplitBtnId?(this.departureSplitBtn=document.querySelector("#".concat(n.departureSplitBtnId)),this.departureSplitBtn.addEventListener("click",this.showDepartureMonthCalendar)):console.error("Expected departureSplitBtnId inside constructor object but not received"),this.currentDate=new Date,this.arrivalDate=null,this.departureDate=null,this.arrivalCell=null,this.departureCell=null,this.isStartSelect=!1,this.isEndSelect=!1},f=n(20);n(23);new d({parentNodeId:"date-picker-container",arrivalInputId:"arrival-input",arrivalSplitBtnId:"arrival-split-btn",departureInputId:"departure-input",departureSplitBtnId:"departure-split-btn"}).renderCalendar();var m={container:document.querySelector("#drop-down-container"),input:document.querySelector("#number-guests-input"),countElements:[{name:"Взрослые",countGroupName:"guest"},{name:"Дети",countGroupName:"guest"},{name:"Младенцы",countGroupName:"child"}],countGroupView:{guest:{counter:0,views:["гость","гостя","гостей"]},child:{counter:0,views:["младенец","младенца","младенцев"]}},placeholder:"Cколько гостей"};new f.a(m).init()},2:function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},20:function(e,t,n){"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t,n){var i=document.createElement(e);return t&&i.classList.add(t),n&&(i.textContent=n),i}function r(e,t){return t[e%100>4&&e%100<20?2:[2,0,1,1,1,2][e%10<5?e%10:5]]}t.a=function e(t){var n=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"hasHaveStartValue",(function(e){return e.some((function(e){if(e.startValue)return e.startValue>0}))})),i(this,"getModifiedCountElements",(function(){return n.countElements.map((function(e,t){var n,i,a=e.minValue?e.minValue:0,r=e.startValue?e.startValue:a;return e.id="".concat(t).concat((n=1,i=1e4,Math.floor(Math.random()*(+i-+n))+ +n)),e.counter=r,e.minValue=a,e}))})),i(this,"show",(function(){n.dropDownParent.classList.contains("drop-down--show")||(n.dropDownParent.classList.add("drop-down--show"),n.input.classList.add("input-group__input--active"),window.addEventListener("mouseup",n.onClickHide),window.addEventListener("keyup",n.onPressHide))})),i(this,"hide",(function(){n.isPinShow||n.dropDownParent.classList.contains("drop-down--show")&&(n.dropDownParent.classList.remove("drop-down--show"),n.input.classList.remove("input-group__input--active"),window.removeEventListener("mouseup",n.onClickHide),window.removeEventListener("keyup",n.onPressHide))})),i(this,"onClickHide",(function(e){var t=e.target===n.input,i=n.dropDownParent.contains(e.target);!t&&!i&&n.hide()})),i(this,"onPressHide",(function(e){27===e.keyCode&&n.hide()})),i(this,"onClickClear",(function(e){e.preventDefault(),n.discardCounter(),n.discardViewCounter(),n.input.textContent=n.placeholder})),i(this,"discardCounter",(function(){n.countElements.forEach((function(e){n.dropDownParent.querySelector("#view-".concat(e.id)).textContent=e.minValue,e.counter=e.minValue})),n.dropDownParent.querySelectorAll(".drop-down__counter-btn--minus").forEach((function(e){e.classList.add("drop-down__counter-btn--disabled"),e.setAttribute("disabled","true")}))})),i(this,"discardViewCounter",(function(){Object.keys(n.countGroupView).forEach((function(e){n.countGroupView[e].counter=0}))})),i(this,"renderViewCount",(function(){var e="";Object.keys(n.countGroupView).forEach((function(t,i){if(n.countGroupView[t].counter>0){var a=n.countGroupView[t],o=a.counter,s=r(o,a.views);i>0&&e.length>1&&(e+=", "),e+="".concat(o," ").concat(s)}})),e.length>=20&&Object.keys(n.countGroupView).length>2&&(e=e.slice(0,20)+"..."),n.input.textContent=e})),i(this,"renderStartCount",(function(e){var t=e.countElements,i="";t.forEach((function(t,n){if(t.startValue>0){var a=e.countGroupView[t.countGroupName],o=a.counter,s=r(o,a.views);n>0&&i.length>1&&(i+=", "),i+="".concat(o," ").concat(s)}})),i.length>=20&&t.length>2&&(i=i.slice(0,20)+"...");var a=i.split(",");a[0].trim()===a[1].trim()&&(i=a[0]),n.input.textContent=i})),i(this,"getCountItem",(function(e){var t=a("li","drop-down__count-item"),i=a("p","drop-down__count-item-name",e.name),r=a("div","drop-down__counter-menu"),o=a("button","drop-down__counter-btn");o.classList.add("drop-down__counter-btn--minus"),e.startValue?e.startValue===e.minValue&&(o.classList.add("drop-down__counter-btn--disabled"),o.setAttribute("disabled","true")):(o.classList.add("drop-down__counter-btn--disabled"),o.setAttribute("disabled","true")),o.type="button";var s=a("p","drop-down__select-view");s.textContent=e.counter,s.id="view-".concat(e.id);var l=a("button","drop-down__counter-btn");return l.classList.add("drop-down__counter-btn--plus"),l.type="button",l.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];e.counter++,t.counter++,s.textContent=e.counter,n.renderViewCount(),o.classList.contains("drop-down__counter-btn--disabled")&&(o.classList.remove("drop-down__counter-btn--disabled"),o.removeAttribute("disabled"))})),o.addEventListener("click",(function(){var t=n.countGroupView[e.countGroupName];(e.counter--,t.counter--,s.textContent=e.counter,e.counter-1<e.minValue&&(o.classList.add("drop-down__counter-btn--disabled"),o.setAttribute("disabled","true")),n.renderViewCount(),0===t.counter)&&(Object.keys(n.countGroupView).every((function(e){return 0===n.countGroupView[e].counter}))&&(n.input.textContent=n.placeholder))})),r.appendChild(o),r.appendChild(s),r.appendChild(l),t.appendChild(i),t.appendChild(r),t})),i(this,"init",(function(){var e=n.getModifiedCountElements();n.countElements=e;var t=a("div","drop-down__wrap"),i=a("ul","drop-down__count-list"),r=a("div","drop-down__control"),o=a("button","drop-down__button","Очистить");o.type="button",o.addEventListener("click",n.onClickClear);var s=a("button","drop-down__button","Применить");s.type="button",s.classList.add("drop-down__button--accent"),s.addEventListener("click",n.hide);var l=document.createDocumentFragment();n.countElements.forEach((function(e){var t=n.getCountItem(e);l.appendChild(t)})),i.appendChild(l),n.isHideControl||(r.appendChild(o),r.appendChild(s)),t.appendChild(i),n.isHideControl||t.appendChild(r),n.dropDownParent.appendChild(t),n.container.appendChild(n.dropDownParent)})),t.container){this.container=t.container;var o=a("section","drop-down");this.dropDownParent=o}else console.error("Expected container(node) inside constructor object but not received");if(t.input){var s=t.placeholder?t.placeholder:"Выберите элимент";this.placeholder=s,this.input=t.input,this.hasHaveStartValue(t.countElements)?this.renderStartCount(t):this.input.textContent=s,t.isPinShow?this.show():this.input.addEventListener("click",this.show)}else console.error("Expected input(node) inside constructor object but not received");t.countElements?(this.countElements=t.countElements,this.inputViews=[]):console.error("Expected countElements(Array) inside constructor object but not received"),t.countGroupView?this.countGroupView=t.countGroupView:console.error("Expected countGroupView(Array) inside constructor object but not received"),t.isHideControl&&(this.isHideControl=t.isHideControl),t.isPinShow&&(this.isPinShow=t.isPinShow)}},21:function(e,t,n){e.exports=n.p+"9bf531f6c7c8c48da55d3bd2a0ada48e.svg"},22:function(e,t,n){var i,a,r;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* inputmask.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/a=[n(30),n(25)],void 0===(r="function"==typeof(i=function(e,t,n){var i=t.document,a=navigator.userAgent,r=a.indexOf("MSIE ")>0||a.indexOf("Trident/")>0,s=f("touchstart"),l=/iemobile/i.test(a),c=/iphone/i.test(a)&&!l;function p(t,i,a){if(!(this instanceof p))return new p(t,i,a);this.el=n,this.events={},this.maskset=n,this.refreshValue=!1,!0!==a&&(e.isPlainObject(t)?i=t:(i=i||{},t&&(i.alias=t)),this.opts=e.extend(!0,{},this.defaults,i),this.noMasksCache=i&&i.definitions!==n,this.userOptions=i||{},this.isRTL=this.opts.numericInput,u(this.opts.alias,i,this.opts))}function u(t,i,a){var r=p.prototype.aliases[t];return r?(r.alias&&u(r.alias,n,a),e.extend(!0,a,r),e.extend(!0,a,i),!0):(null===a.mask&&(a.mask=t),!1)}function d(t,i){function a(t,a,r){var o=!1;if(null!==t&&""!==t||((o=null!==r.regex)?t=(t=r.regex).replace(/^(\^)(.*)(\$)$/,"$2"):(o=!0,t=".*")),1===t.length&&!1===r.greedy&&0!==r.repeat&&(r.placeholder=""),r.repeat>0||"*"===r.repeat||"+"===r.repeat){var s="*"===r.repeat?0:"+"===r.repeat?1:r.repeat;t=r.groupmarker[0]+t+r.groupmarker[1]+r.quantifiermarker[0]+s+","+r.repeat+r.quantifiermarker[1]}var l,c=o?"regex_"+r.regex:r.numericInput?t.split("").reverse().join(""):t;return p.prototype.masksCache[c]===n||!0===i?(l={mask:t,maskToken:p.prototype.analyseMask(t,o,r),validPositions:{},_buffer:n,buffer:n,tests:{},excludes:{},metadata:a,maskLength:n,jitOffset:{}},!0!==i&&(p.prototype.masksCache[c]=l,l=e.extend(!0,{},p.prototype.masksCache[c]))):l=e.extend(!0,{},p.prototype.masksCache[c]),l}if(e.isFunction(t.mask)&&(t.mask=t.mask(t)),e.isArray(t.mask)){if(t.mask.length>1){if(null===t.keepStatic){t.keepStatic="auto";for(var r=0;r<t.mask.length;r++)if(t.mask[r].charAt(0)!==t.mask[0].charAt(0)){t.keepStatic=!0;break}}var o=t.groupmarker[0];return e.each(t.isRTL?t.mask.reverse():t.mask,(function(i,a){o.length>1&&(o+=t.groupmarker[1]+t.alternatormarker+t.groupmarker[0]),a.mask===n||e.isFunction(a.mask)?o+=a:o+=a.mask})),a(o+=t.groupmarker[1],t.mask,t)}t.mask=t.mask.pop()}return t.mask&&t.mask.mask!==n&&!e.isFunction(t.mask.mask)?a(t.mask.mask,t.mask,t):a(t.mask,t.mask,t)}function f(e){var t=i.createElement("input"),n="on"+e,a=n in t;return a||(t.setAttribute(n,"return;"),a="function"==typeof t[n]),t=null,a}function m(a,u,d){u=u||this.maskset,d=d||this.opts;var g,h,b,v,x,k=this,y=this.el,_=this.isRTL,w=!1,C=!1,D=!1,S=!1,E=function(e,t,i,a,r){var o=d.greedy;r&&(d.greedy=!1),t=t||0;var s,l,c,p=[],u=0;M();do{if(!0===e&&P().validPositions[u])l=(c=r&&!0===P().validPositions[u].match.optionality&&P().validPositions[u+1]===n&&(!0===P().validPositions[u].generatedInput||P().validPositions[u].input==d.skipOptionalPartCharacter&&u>0)?L(u,N(u,s,u-1)):P().validPositions[u]).match,s=c.locator.slice(),p.push(!0===i?c.input:!1===i?l.nativeDef:J(u,l));else{l=(c=I(u,s,u-1)).match,s=c.locator.slice();var f=!0!==a&&(!1!==d.jitMasking?d.jitMasking:l.jit);(!1===f||f===n||"number"==typeof f&&isFinite(f)&&f>u)&&p.push(!1===i?l.nativeDef:J(u,l))}"auto"===d.keepStatic&&l.newBlockMarker&&null!==l.fn&&(d.keepStatic=u-1),u++}while((b===n||u<b)&&(null!==l.fn||""!==l.def)||t>u);return""===p[p.length-1]&&p.pop(),!1===i&&P().maskLength!==n||(P().maskLength=u-1),d.greedy=o,p};function P(){return u}function A(e){var t=P();t.buffer=n,!0!==e&&(t.validPositions={},t.p=0)}function M(e,t,i){var a=-1,r=-1,o=i||P().validPositions;for(var s in e===n&&(e=-1),o){var l=parseInt(s);o[l]&&(t||!0!==o[l].generatedInput)&&(l<=e&&(a=l),l>=e&&(r=l))}return-1===a||a==e?r:-1==r?a:e-a<r-e?a:r}function j(e){var t=e.locator[e.alternation];return"string"==typeof t&&t.length>0&&(t=t.split(",")[0]),t!==n?t.toString():""}function O(e,t){var i=(e.alternation!=n?e.mloc[j(e)]:e.locator).join("");if(""!==i)for(;i.length<t;)i+="0";return i}function L(e,t){for(var i,a,r,o=O(F(e=e>0?e-1:0)),s=0;s<t.length;s++){var l=t[s];i=O(l,o.length);var c=Math.abs(i-o);(a===n||""!==i&&c<a||r&&!d.greedy&&r.match.optionality&&"master"===r.match.newBlockMarker&&(!l.match.optionality||!l.match.newBlockMarker)||r&&r.match.optionalQuantifier&&!l.match.optionalQuantifier)&&(a=c,r=l)}return r}function I(e,t,n){return P().validPositions[e]||L(e,N(e,t?t.slice():t,n))}function F(e,t){return P().validPositions[e]?P().validPositions[e]:(t||N(e))[0]}function T(e,t){for(var n=!1,i=N(e),a=0;a<i.length;a++)if(i[a].match&&i[a].match.def===t){n=!0;break}return n}function N(t,i,a){var r,o=P().maskToken,s=i?a:0,l=i?i.slice():[0],c=[],p=!1,u=i?i.join(""):"";function f(i,a,o,l){function m(o,l,g){function h(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,(function(e,a){if(!0===a.isQuantifier?i=h(t,n.matches[e-1]):a.hasOwnProperty("matches")&&(i=h(t,a)),i)return!1})),i}function b(t,i,a){var r,o;if((P().tests[t]||P().validPositions[t])&&e.each(P().tests[t]||[P().validPositions[t]],(function(e,t){if(t.mloc[i])return r=t,!1;var s=a!==n?a:t.alternation,l=t.locator[s]!==n?t.locator[s].toString().indexOf(i):-1;(o===n||l<o)&&-1!==l&&(r=t,o=l)})),r){var s=r.locator[r.alternation];return(r.mloc[i]||r.mloc[s]||r.locator).slice((a!==n?a:r.alternation)+1)}return a!==n?b(t,i):n}function v(e,t){function n(e){for(var t,n,i=[],a=0,r=e.length;a<r;a++)if("-"===e.charAt(a))for(n=e.charCodeAt(a+1);++t<n;)i.push(String.fromCharCode(t));else t=e.charCodeAt(a),i.push(e.charAt(a));return i.join("")}return d.regex&&null!==e.match.fn&&null!==t.match.fn?-1!==n(t.match.def.replace(/[\[\]]/g,"")).indexOf(n(e.match.def.replace(/[\[\]]/g,""))):e.match.def===t.match.nativeDef}function x(e,t){if(t===n||e.alternation===t.alternation&&-1===e.locator[e.alternation].toString().indexOf(t.locator[t.alternation])){e.mloc=e.mloc||{};var i=e.locator[e.alternation];if(i!==n){if("string"==typeof i&&(i=i.split(",")[0]),e.mloc[i]===n&&(e.mloc[i]=e.locator.slice()),t!==n){for(var a in t.mloc)"string"==typeof a&&(a=a.split(",")[0]),e.mloc[a]===n&&(e.mloc[a]=t.mloc[a]);e.locator[e.alternation]=Object.keys(e.mloc).join(",")}return!0}e.alternation=n}return!1}if(s>500&&g!==n)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+P().mask;if(s===t&&o.matches===n)return c.push({match:o,locator:l.reverse(),cd:u,mloc:{}}),!0;if(o.matches!==n){if(o.isGroup&&g!==o){if(o=m(i.matches[e.inArray(o,i.matches)+1],l,g))return!0}else if(o.isOptional){var k=o;if(o=f(o,a,l,g)){if(e.each(c,(function(e,t){t.match.optionality=!0})),r=c[c.length-1].match,g!==n||!h(r,k))return!0;p=!0,s=t}}else if(o.isAlternator){var y,_=o,w=[],C=c.slice(),D=l.length,S=a.length>0?a.shift():-1;if(-1===S||"string"==typeof S){var E,A=s,M=a.slice(),j=[];if("string"==typeof S)j=S.split(",");else for(E=0;E<_.matches.length;E++)j.push(E.toString());if(P().excludes[t]){for(var O=j.slice(),L=0,I=P().excludes[t].length;L<I;L++)j.splice(j.indexOf(P().excludes[t][L].toString()),1);0===j.length&&(P().excludes[t]=n,j=O)}(!0===d.keepStatic||isFinite(parseInt(d.keepStatic))&&A>=d.keepStatic)&&(j=j.slice(0,1));for(var F=!1,T=0;T<j.length;T++){E=parseInt(j[T]),c=[],a="string"==typeof S&&b(s,E,D)||M.slice(),_.matches[E]&&m(_.matches[E],[E].concat(l),g)?o=!0:0===T&&(F=!0),y=c.slice(),s=A,c=[];for(var N=0;N<y.length;N++){var R=y[N],z=!1;R.match.jit=R.match.jit||F,R.alternation=R.alternation||D,x(R);for(var B=0;B<w.length;B++){var G=w[B];if("string"!=typeof S||R.alternation!==n&&-1!==e.inArray(R.locator[R.alternation].toString(),j)){if(R.match.nativeDef===G.match.nativeDef){z=!0,x(G,R);break}if(v(R,G)){x(R,G)&&(z=!0,w.splice(w.indexOf(G),0,R));break}if(v(G,R)){x(G,R);break}if(K=G,(q=R).locator.slice(q.alternation).join("")==K.locator.slice(K.alternation).join("")&&null===q.match.fn&&null!==K.match.fn&&K.match.fn.test(q.match.def,P(),t,!1,d,!1)){x(R,G)&&(z=!0,w.splice(w.indexOf(G),0,R));break}}}z||w.push(R)}}c=C.concat(w),s=t,p=c.length>0,o=w.length>0,a=M.slice()}else o=m(_.matches[S]||i.matches[S],[S].concat(l),g);if(o)return!0}else if(o.isQuantifier&&g!==i.matches[e.inArray(o,i.matches)-1])for(var V=o,H=a.length>0?a.shift():0;H<(isNaN(V.quantifier.max)?H+1:V.quantifier.max)&&s<=t;H++){var U=i.matches[e.inArray(V,i.matches)-1];if(o=m(U,[H].concat(l),U)){if((r=c[c.length-1].match).optionalQuantifier=H>=V.quantifier.min,r.jit=(H||1)*U.matches.indexOf(r)>=V.quantifier.jit,r.optionalQuantifier&&h(r,U)){p=!0,s=t;break}return r.jit&&(P().jitOffset[t]=U.matches.indexOf(r)),!0}}else if(o=f(o,a,l,g))return!0}else s++;var q,K}for(var g=a.length>0?a.shift():0;g<i.matches.length;g++)if(!0!==i.matches[g].isQuantifier){var h=m(i.matches[g],[g].concat(o),l);if(h&&s===t)return h;if(s>t)break}}if(t>-1){if(i===n){for(var m,g=t-1;(m=P().validPositions[g]||P().tests[g])===n&&g>-1;)g--;m!==n&&g>-1&&(l=function(t,i){var a=[];return e.isArray(i)||(i=[i]),i.length>0&&(i[0].alternation===n?0===(a=L(t,i.slice()).locator.slice()).length&&(a=i[0].locator.slice()):e.each(i,(function(e,t){if(""!==t.def)if(0===a.length)a=t.locator.slice();else for(var n=0;n<a.length;n++)t.locator[n]&&-1===a[n].toString().indexOf(t.locator[n])&&(a[n]+=","+t.locator[n])}))),a}(g,m),u=l.join(""),s=g)}if(P().tests[t]&&P().tests[t][0].cd===u)return P().tests[t];for(var h=l.shift();h<o.length&&!(f(o[h],l,[h])&&s===t||s>t);h++);}return(0===c.length||p)&&c.push({match:{fn:null,optionality:!1,casing:null,def:"",placeholder:""},locator:[],mloc:{},cd:u}),i!==n&&P().tests[t]?e.extend(!0,[],c):(P().tests[t]=e.extend(!0,[],c),P().tests[t])}function R(){return P()._buffer===n&&(P()._buffer=E(!1,1),P().buffer===n&&(P().buffer=P()._buffer.slice())),P()._buffer}function z(e){return P().buffer!==n&&!0!==e||(P().buffer=E(!0,M(),!0),P()._buffer===n&&(P()._buffer=P().buffer.slice())),P().buffer}function B(e,t,i){var a,r;if(!0===e)A(),e=0,t=i.length;else for(a=e;a<t;a++)delete P().validPositions[a];for(r=e,a=e;a<t;a++)if(A(!0),i[a]!==d.skipOptionalPartCharacter){var o=U(r,i[a],!0,!0);!1!==o&&(A(!0),r=o.caret!==n?o.caret:o.pos+1)}}function G(t,n,i){switch(d.casing||n.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase();break;case"title":var a=P().validPositions[i-1];t=0===i||a&&a.input===String.fromCharCode(p.keyCode.SPACE)?t.toUpperCase():t.toLowerCase();break;default:if(e.isFunction(d.casing)){var r=Array.prototype.slice.call(arguments);r.push(P().validPositions),t=d.casing.apply(this,r)}}return t}function V(t,i,a){for(var r,o=d.greedy?i:i.slice(0,1),s=!1,l=a!==n?a.split(","):[],c=0;c<l.length;c++)-1!==(r=t.indexOf(l[c]))&&t.splice(r,1);for(var p=0;p<t.length;p++)if(-1!==e.inArray(t[p],o)){s=!0;break}return s}function H(t,i,a,r,o){var s,l,c,p,u,d,f,m=e.extend(!0,{},P().validPositions),g=!1,h=o!==n?o:M();if(-1===h&&o===n)l=(p=F(s=0)).alternation;else for(;h>=0;h--)if((c=P().validPositions[h])&&c.alternation!==n){if(p&&p.locator[c.alternation]!==c.locator[c.alternation])break;s=h,l=P().validPositions[s].alternation,p=c}if(l!==n){f=parseInt(s),P().excludes[f]=P().excludes[f]||[],!0!==t&&P().excludes[f].push(j(p));var b=[],v=0;for(u=f;u<M(n,!0)+1;u++)(d=P().validPositions[u])&&!0!==d.generatedInput?b.push(d.input):u<t&&v++,delete P().validPositions[u];for(;P().excludes[f]&&P().excludes[f].length<10;){var x=-1*v,k=b.slice();for(P().tests[f]=n,A(!0),g=!0;k.length>0;){var y=k.shift();if(!(g=U(M(n,!0)+1,y,!1,r,!0)))break}if(g&&i!==n){var _=M(t)+1;for(u=f;u<M()+1;u++)((d=P().validPositions[u])===n||null==d.match.fn)&&u<t+x&&x++;g=U((t+=x)>_?_:t,i,a,r,!0)}if(g)break;if(A(),p=F(f),P().validPositions=e.extend(!0,{},m),!P().excludes[f]){g=H(t,i,a,r,f-1);break}var w=j(p);if(-1!==P().excludes[f].indexOf(w)){g=H(t,i,a,r,f-1);break}for(P().excludes[f].push(w),u=f;u<M(n,!0)+1;u++)delete P().validPositions[u]}}return P().excludes[f]=n,g}function U(t,i,a,r,o,s){function l(e){return _?e.begin-e.end>1||e.begin-e.end==1:e.end-e.begin>1||e.end-e.begin==1}a=!0===a;var c=t;function p(i,a,o){var s=!1;return e.each(N(i),(function(c,p){var u=p.match;if(z(!0),!1!==(s=null!=u.fn?u.fn.test(a,P(),i,o,d,l(t)):(a===u.def||a===d.skipOptionalPartCharacter)&&""!==u.def&&{c:J(i,u,!0)||u.def,pos:i})){var f=s.c!==n?s.c:a,m=i;return f=f===d.skipOptionalPartCharacter&&null===u.fn?J(i,u,!0)||u.def:f,s.remove!==n&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort((function(e,t){return t-e})),(function(e,t){K({begin:t,end:t+1})}))),s.insert!==n&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort((function(e,t){return e-t})),(function(e,t){U(t.pos,t.c,!0,r)}))),!0!==s&&s.pos!==n&&s.pos!==i&&(m=s.pos),(!0===s||s.pos!==n||s.c!==n)&&(K(t,e.extend({},p,{input:G(f,u,m)}),r,m)||(s=!1),!1)}})),s}t.begin!==n&&(c=_?t.end:t.begin);var u=!0,f=e.extend(!0,{},P().validPositions);if(e.isFunction(d.preValidation)&&!a&&!0!==r&&!0!==s&&(u=d.preValidation(z(),c,i,l(t),d,P())),!0===u){if(q(n,c,!0),(b===n||c<b)&&(u=p(c,i,a),(!a||!0===r)&&!1===u&&!0!==s)){var m=P().validPositions[c];if(!m||null!==m.match.fn||m.match.def!==i&&i!==d.skipOptionalPartCharacter){if((d.insertMode||P().validPositions[Q(c)]===n)&&(!Y(c,!0)||P().jitOffset[c]))if(P().jitOffset[c]&&P().validPositions[Q(c)]===n)!1!==(u=U(c+P().jitOffset[c],i,a))&&(u.caret=c);else for(var g=c+1,h=Q(c);g<=h;g++)if(!1!==(u=p(g,i,a))){u=q(c,u.pos!==n?u.pos:g)||u,c=g;break}}else u={caret:Q(c)}}!1!==u||!1===d.keepStatic||null!=d.regex&&!se(z())||a||!0===o||(u=H(c,i,a,r)),!0===u&&(u={pos:c})}if(e.isFunction(d.postValidation)&&!1!==u&&!a&&!0!==r&&!0!==s){var v=d.postValidation(z(!0),t.begin!==n?_?t.end:t.begin:t,u,d);if(v!==n){if(v.refreshFromBuffer&&v.buffer){var x=v.refreshFromBuffer;B(!0===x?x:x.start,x.end,v.buffer)}u=!0===v?u:v}}return u&&u.pos===n&&(u.pos=c),!1!==u&&!0!==s||(A(!0),P().validPositions=e.extend(!0,{},f)),u}function q(t,i,a){var r;if(t===n)for(t=i-1;t>0&&!P().validPositions[t];t--);for(var o=t;o<i;o++)if(P().validPositions[o]===n&&!Y(o,!0)&&(0==o?F(o):P().validPositions[o-1])){var s=N(o).slice();""===s[s.length-1].match.def&&s.pop();var l=L(o,s);if((l=e.extend({},l,{input:J(o,l.match,!0)||l.match.def})).generatedInput=!0,K(o,l,!0),!0!==a){var c=P().validPositions[i].input;P().validPositions[i]=n,r=U(i,c,!0,!0)}}return r}function K(t,i,a,r){function o(e,t,i){var a=t[e];if(a!==n&&(null===a.match.fn&&!0!==a.match.optionality||a.input===d.radixPoint)){var r=i.begin<=e-1?t[e-1]&&null===t[e-1].match.fn&&t[e-1]:t[e-1],o=i.end>e+1?t[e+1]&&null===t[e+1].match.fn&&t[e+1]:t[e+1];return r&&o}return!1}var s=t.begin!==n?t.begin:t,l=t.end!==n?t.end:t;if(t.begin>t.end&&(s=t.end,l=t.begin),r=r!==n?r:s,s!==l||d.insertMode&&P().validPositions[r]!==n&&a===n){var c=e.extend(!0,{},P().validPositions),p=M(n,!0);for(P().p=s,h=p;h>=s;h--)P().validPositions[h]&&"+"===P().validPositions[h].match.nativeDef&&(d.isNegative=!1),delete P().validPositions[h];var u=!0,f=r,m=(P().validPositions,!1),g=f,h=f;for(i&&(P().validPositions[r]=e.extend(!0,{},i),g++,f++,s<l&&h++);h<=p;h++){var b=c[h];if(b!==n&&(h>=l||h>=s&&!0!==b.generatedInput&&o(h,c,{begin:s,end:l}))){for(;""!==F(g).match.def;){if(!1===m&&c[g]&&c[g].match.nativeDef===b.match.nativeDef)P().validPositions[g]=e.extend(!0,{},c[g]),P().validPositions[g].input=b.input,q(n,g,!0),f=g+1,u=!0;else if(d.shiftPositions&&T(g,b.match.def)){var v=U(g,b.input,!0,!0);u=!1!==v,f=v.caret||v.insert?M():g+1,m=!0}else u=!0===b.generatedInput||b.input===d.radixPoint&&!0===d.numericInput;if(u)break;if(!u&&g>l&&Y(g,!0)&&(null!==b.match.fn||g>P().maskLength))break;g++}""==F(g).match.def&&(u=!1),g=f}if(!u)break}if(!u)return P().validPositions=e.extend(!0,{},c),A(!0),!1}else i&&(P().validPositions[r]=e.extend(!0,{},i));return A(!0),!0}function Y(e,t){var n=I(e).match;if(""===n.def&&(n=F(e).match),null!=n.fn)return n.fn;if(!0!==t&&e>-1){var i=N(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function Q(e,t){for(var n=e+1;""!==F(n).match.def&&(!0===t&&(!0!==F(n).match.newBlockMarker||!Y(n))||!0!==t&&!Y(n));)n++;return n}function W(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(!0===t&&!0!==F(i).match.newBlockMarker||!0!==t&&!Y(i)&&((n=N(i)).length<2||2===n.length&&""===n[1].match.def)););return i}function $(t,i,a,r,o){if(r&&e.isFunction(d.onBeforeWrite)){var s=d.onBeforeWrite.call(k,r,i,a,d);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;B(!0===l?l:l.start,l.end,s.buffer||i),i=z(!0)}a!==n&&(a=s.caret!==n?s.caret:a)}}if(t!==n&&(t.inputmask._valueSet(i.join("")),a===n||r!==n&&"blur"===r.type?pe(t,a,0===i.length):ae(t,a),!0===o)){var c=e(t),p=t.inputmask._valueGet();C=!0,c.trigger("input"),setTimeout((function(){p===R().join("")?c.trigger("cleared"):!0===se(i)&&c.trigger("complete")}),0)}}function J(t,i,a){if((i=i||F(t).match).placeholder!==n||!0===a)return e.isFunction(i.placeholder)?i.placeholder(d):i.placeholder;if(null===i.fn){if(t>-1&&P().validPositions[t]===n){var r,o=N(t),s=[];if(o.length>1+(""===o[o.length-1].match.def?1:0))for(var l=0;l<o.length;l++)if(!0!==o[l].match.optionality&&!0!==o[l].match.optionalQuantifier&&(null===o[l].match.fn||r===n||!1!==o[l].match.fn.test(r.match.def,P(),t,!0,d))&&(s.push(o[l]),null===o[l].match.fn&&(r=o[l]),s.length>1&&/[0-9a-bA-Z]/.test(s[0].match.def)))return d.placeholder.charAt(t%d.placeholder.length)}return i.def}return d.placeholder.charAt(t%d.placeholder.length)}function X(e,t){if(r){if(e.inputmask._valueGet()!==t&&(e.placeholder!==t||""===e.placeholder)){var n=z().slice(),i=e.inputmask._valueGet();if(i!==t){var a=M();-1===a&&i===R().join("")?n=[]:-1!==a&&oe(n),$(e,n)}}}else e.placeholder!==t&&(e.placeholder=t,""===e.placeholder&&e.removeAttribute("placeholder"))}var Z,ee={on:function(t,i,a){var r=function(t){var i=this;if(i.inputmask===n&&"FORM"!==this.nodeName){var r=e.data(i,"_inputmask_opts");r?new p(r).mask(i):ee.off(i)}else{if("setvalue"===t.type||"FORM"===this.nodeName||!(i.disabled||i.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||!1===d.tabThrough&&t.keyCode===p.keyCode.TAB))){switch(t.type){case"input":if(!0===C)return C=!1,t.preventDefault();if(s){var o=arguments;return setTimeout((function(){a.apply(i,o),ae(i,i.inputmask.caretPos,n,!0)}),0),!1}break;case"keydown":w=!1,C=!1;break;case"keypress":if(!0===w)return t.preventDefault();w=!0;break;case"click":if(l||c)return o=arguments,setTimeout((function(){a.apply(i,o)}),0),!1}var u=a.apply(i,arguments);return!1===u&&(t.preventDefault(),t.stopPropagation()),u}t.preventDefault()}};t.inputmask.events[i]=t.inputmask.events[i]||[],t.inputmask.events[i].push(r),-1!==e.inArray(i,["submit","reset"])?null!==t.form&&e(t.form).on(i,r):e(t).on(i,r)},off:function(t,n){var i;t.inputmask&&t.inputmask.events&&(n?(i=[])[n]=t.inputmask.events[n]:i=t.inputmask.events,e.each(i,(function(n,i){for(;i.length>0;){var a=i.pop();-1!==e.inArray(n,["submit","reset"])?null!==t.form&&e(t.form).off(n,a):e(t).off(n,a)}delete t.inputmask.events[n]})))}},te={keydownEvent:function(t){var n=e(this),i=t.keyCode,a=ae(this);if(i===p.keyCode.BACKSPACE||i===p.keyCode.DELETE||c&&i===p.keyCode.BACKSPACE_SAFARI||t.ctrlKey&&i===p.keyCode.X&&!f("cut"))t.preventDefault(),le(0,i,a),$(this,z(!0),P().p,t,this.inputmask._valueGet()!==z().join(""));else if(i===p.keyCode.END||i===p.keyCode.PAGE_DOWN){t.preventDefault();var r=Q(M());ae(this,t.shiftKey?a.begin:r,r,!0)}else i===p.keyCode.HOME&&!t.shiftKey||i===p.keyCode.PAGE_UP?(t.preventDefault(),ae(this,0,t.shiftKey?a.begin:0,!0)):(d.undoOnEscape&&i===p.keyCode.ESCAPE||90===i&&t.ctrlKey)&&!0!==t.altKey?(ne(this,!0,!1,g.split("")),n.trigger("click")):i!==p.keyCode.INSERT||t.shiftKey||t.ctrlKey?!0===d.tabThrough&&i===p.keyCode.TAB&&(!0===t.shiftKey?(null===F(a.begin).match.fn&&(a.begin=Q(a.begin)),a.end=W(a.begin,!0),a.begin=W(a.end,!0)):(a.begin=Q(a.begin,!0),a.end=Q(a.begin,!0),a.end<P().maskLength&&a.end--),a.begin<P().maskLength&&(t.preventDefault(),ae(this,a.begin,a.end))):(d.insertMode=!d.insertMode,this.setAttribute("im-insert",d.insertMode));d.onKeyDown.call(this,t,z(),ae(this).begin,d),D=-1!==e.inArray(i,d.ignorables)},keypressEvent:function(t,i,a,r,o){var s=this,l=e(s),c=t.which||t.charCode||t.keyCode;if(!(!0===i||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||D))return c===p.keyCode.ENTER&&g!==z().join("")&&(g=z().join(""),setTimeout((function(){l.trigger("change")}),0)),!0;if(c){46===c&&!1===t.shiftKey&&""!==d.radixPoint&&(c=d.radixPoint.charCodeAt(0));var u,f=i?{begin:o,end:o}:ae(s),m=String.fromCharCode(c),h=0;if(d._radixDance&&d.numericInput){var b=z().indexOf(d.radixPoint.charAt(0))+1;f.begin<=b&&(c===d.radixPoint.charCodeAt(0)&&(h=1),f.begin-=1,f.end-=1)}P().writeOutBuffer=!0;var v=U(f,m,r);if(!1!==v&&(A(!0),u=v.caret!==n?v.caret:Q(v.pos.begin?v.pos.begin:v.pos),P().p=u),u=(d.numericInput&&v.caret===n?W(u):u)+h,!1!==a&&(setTimeout((function(){d.onKeyValidation.call(s,c,v,d)}),0),P().writeOutBuffer&&!1!==v)){var x=z();$(s,x,u,t,!0!==i)}if(t.preventDefault(),i)return!1!==v&&(v.forwardPosition=u),v}},pasteEvent:function(n){var i,a=n.originalEvent||n,r=(e(this),this.inputmask._valueGet(!0)),o=ae(this);_&&(i=o.end,o.end=o.begin,o.begin=i);var s=r.substr(0,o.begin),l=r.substr(o.end,r.length);if(s===(_?R().reverse():R()).slice(0,o.begin).join("")&&(s=""),l===(_?R().reverse():R()).slice(o.end).join("")&&(l=""),t.clipboardData&&t.clipboardData.getData)r=s+t.clipboardData.getData("Text")+l;else{if(!a.clipboardData||!a.clipboardData.getData)return!0;r=s+a.clipboardData.getData("text/plain")+l}var c=r;if(e.isFunction(d.onBeforePaste)){if(!1===(c=d.onBeforePaste.call(k,r,d)))return n.preventDefault();c||(c=r)}return ne(this,!1,!1,c.toString().split("")),$(this,z(),Q(M()),n,g!==z().join("")),n.preventDefault()},inputFallBackEvent:function(t){var n=this,i=n.inputmask._valueGet();if(z().join("")!==i){var a=ae(n);if(i=function(e,t,n){if(l){var i=t.replace(z().join(""),"");if(1===i.length){var a=t.split("");a.splice(n.begin,0,i),t=a.join("")}}return t}(0,i=function(e,t,n){return"."===t.charAt(n.begin-1)&&""!==d.radixPoint&&((t=t.split(""))[n.begin-1]=d.radixPoint.charAt(0),t=t.join("")),t}(0,i,a),a),z().join("")!==i){var r=z().join(""),o=!d.numericInput&&i.length>r.length?-1:0,s=i.substr(0,a.begin),c=i.substr(a.begin),u=r.substr(0,a.begin+o),f=r.substr(a.begin+o),m=a,g="",h=!1;if(s!==u){var b,v=(h=s.length>=u.length)?s.length:u.length;for(b=0;s.charAt(b)===u.charAt(b)&&b<v;b++);h&&(m.begin=b-o,g+=s.slice(b,m.end))}if(c!==f&&(c.length>f.length?g+=c.slice(0,1):c.length<f.length&&(m.end+=f.length-c.length,h||""===d.radixPoint||""!==c||s.charAt(m.begin+o-1)!==d.radixPoint||(m.begin--,g=d.radixPoint))),$(n,z(),{begin:m.begin+o,end:m.end+o}),g.length>0)e.each(g.split(""),(function(t,i){var a=new e.Event("keypress");a.which=i.charCodeAt(0),D=!1,te.keypressEvent.call(n,a)}));else{m.begin===m.end-1&&(m.begin=W(m.begin+1),m.begin===m.end-1?ae(n,m.begin):ae(n,m.begin,m.end));var x=new e.Event("keydown");x.keyCode=d.numericInput?p.keyCode.BACKSPACE:p.keyCode.DELETE,te.keydownEvent.call(n,x)}t.preventDefault()}}},beforeInputEvent:function(t){if(t.cancelable){var n=this;switch(t.inputType){case"insertText":return e.each(t.data.split(""),(function(t,i){var a=new e.Event("keypress");a.which=i.charCodeAt(0),D=!1,te.keypressEvent.call(n,a)})),t.preventDefault();case"deleteContentBackward":return(i=new e.Event("keydown")).keyCode=p.keyCode.BACKSPACE,te.keydownEvent.call(n,i),t.preventDefault();case"deleteContentForward":var i;return(i=new e.Event("keydown")).keyCode=p.keyCode.DELETE,te.keydownEvent.call(n,i),t.preventDefault()}}},setValueEvent:function(t){this.inputmask.refreshValue=!1;var n=this,i=(i=t&&t.detail?t.detail[0]:arguments[1])||n.inputmask._valueGet(!0);e.isFunction(d.onBeforeMask)&&(i=d.onBeforeMask.call(k,i,d)||i),ne(n,!0,!1,i=i.toString().split("")),g=z().join(""),(d.clearMaskOnLostFocus||d.clearIncomplete)&&n.inputmask._valueGet()===R().join("")&&n.inputmask._valueSet("")},focusEvent:function(e){var t=this.inputmask._valueGet();d.showMaskOnFocus&&(t!==z().join("")?$(this,z(),Q(M())):!1===S&&ae(this,Q(M()))),!0===d.positionCaretOnTab&&!1===S&&te.clickEvent.apply(this,[e,!0]),g=z().join("")},mouseleaveEvent:function(e){S=!1,d.clearMaskOnLostFocus&&i.activeElement!==this&&X(this,x)},clickEvent:function(t,a){var r=this;setTimeout((function(){if(i.activeElement===r){var t=ae(r);if(a&&(_?t.end=t.begin:t.begin=t.end),t.begin===t.end)switch(d.positionCaretOnClick){case"none":break;case"select":ae(r,0,z().length);break;case"ignore":ae(r,Q(M()));break;case"radixFocus":if(function(t){if(""!==d.radixPoint){var i=P().validPositions;if(i[t]===n||i[t].input===J(t)){if(t<Q(-1))return!0;var a=e.inArray(d.radixPoint,z());if(-1!==a){for(var r in i)if(a<r&&i[r].input!==J(r))return!1;return!0}}}return!1}(t.begin)){var o=z().join("").indexOf(d.radixPoint);ae(r,d.numericInput?Q(o):o);break}default:var s=t.begin,l=M(s,!0),c=Q(l);if(s<c)ae(r,Y(s,!0)||Y(s-1,!0)?s:Q(s));else{var p=P().validPositions[l],u=I(c,p?p.match.locator:n,p),f=J(c,u.match);if(""!==f&&z()[c]!==f&&!0!==u.match.optionalQuantifier&&!0!==u.match.newBlockMarker||!Y(c,d.keepStatic)&&u.match.def===f){var m=Q(c);(s>=m||s===c)&&(c=m)}ae(r,c)}}}}),0)},cutEvent:function(n){e(this);var a=ae(this),r=n.originalEvent||n,o=t.clipboardData||r.clipboardData,s=_?z().slice(a.end,a.begin):z().slice(a.begin,a.end);o.setData("text",_?s.reverse().join(""):s.join("")),i.execCommand&&i.execCommand("copy"),le(0,p.keyCode.DELETE,a),$(this,z(),P().p,n,g!==z().join(""))},blurEvent:function(t){var i=e(this);if(this.inputmask){X(this,x);var a=this.inputmask._valueGet(),r=z().slice();""===a&&v===n||(d.clearMaskOnLostFocus&&(-1===M()&&a===R().join("")?r=[]:oe(r)),!1===se(r)&&(setTimeout((function(){i.trigger("incomplete")}),0),d.clearIncomplete&&(A(),r=d.clearMaskOnLostFocus?[]:R().slice())),$(this,r,n,t)),g!==z().join("")&&(g=r.join(""),i.trigger("change"))}},mouseenterEvent:function(e){S=!0,i.activeElement!==this&&d.showMaskOnHover&&X(this,(_?z().slice().reverse():z()).join(""))},submitEvent:function(e){g!==z().join("")&&h.trigger("change"),d.clearMaskOnLostFocus&&-1===M()&&y.inputmask._valueGet&&y.inputmask._valueGet()===R().join("")&&y.inputmask._valueSet(""),d.clearIncomplete&&!1===se(z())&&y.inputmask._valueSet(""),d.removeMaskOnSubmit&&(y.inputmask._valueSet(y.inputmask.unmaskedvalue(),!0),setTimeout((function(){$(y,z())}),0))},resetEvent:function(e){y.inputmask.refreshValue=!0,setTimeout((function(){h.trigger("setvalue")}),0)}};function ne(t,i,a,r,o){var s=this||t.inputmask,l=r.slice(),c="",u=-1,f=n;if(A(),a||!0===d.autoUnmask)u=Q(u);else{var m=R().slice(0,Q(-1)).join(""),g=l.join("").match(new RegExp("^"+p.escapeRegex(m),"g"));g&&g.length>0&&(l.splice(0,g.length*m.length),u=Q(u))}-1===u?(P().p=Q(u),u=0):P().p=u,s.caretPos={begin:u},e.each(l,(function(i,r){if(r!==n)if(P().validPositions[i]===n&&l[i]===J(i)&&Y(i,!0)&&!1===U(i,l[i],!0,n,n,!0))P().p++;else{var o=new e.Event("_checkval");o.which=r.charCodeAt(0),c+=r;var p=M(n,!0);!function(e,t){return-1!==E(!0,0,!1).slice(e,Q(e)).join("").replace(/'/g,"").indexOf(t)&&!Y(e)&&(F(e).match.nativeDef===t.charAt(0)||null===F(e).match.fn&&F(e).match.nativeDef==="'"+t.charAt(0)||" "===F(e).match.nativeDef&&(F(e+1).match.nativeDef===t.charAt(0)||null===F(e+1).match.fn&&F(e+1).match.nativeDef==="'"+t.charAt(0)))}(u,c)?(f=te.keypressEvent.call(t,o,!0,!1,a,s.caretPos.begin))&&(u=s.caretPos.begin+1,c=""):f=te.keypressEvent.call(t,o,!0,!1,a,p+1),f&&($(n,z(),f.forwardPosition,o,!1),s.caretPos={begin:f.forwardPosition,end:f.forwardPosition})}})),i&&$(t,z(),f?f.forwardPosition:n,o||new e.Event("checkval"),o&&"input"===o.type)}function ie(t){if(t){if(t.inputmask===n)return t.value;t.inputmask&&t.inputmask.refreshValue&&te.setValueEvent.call(t)}var i=[],a=P().validPositions;for(var r in a)a[r].match&&null!=a[r].match.fn&&i.push(a[r].input);var o=0===i.length?"":(_?i.reverse():i).join("");if(e.isFunction(d.onUnMask)){var s=(_?z().slice().reverse():z()).join("");o=d.onUnMask.call(k,s,o,d)}return o}function ae(a,r,o,s){function l(e){return!_||"number"!=typeof e||d.greedy&&""===d.placeholder||!y||(e=y.inputmask._valueGet().length-e),e}var c;if(r===n)return"selectionStart"in a?(r=a.selectionStart,o=a.selectionEnd):t.getSelection?(c=t.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode!==a&&c.commonAncestorContainer!==a||(r=c.startOffset,o=c.endOffset):i.selection&&i.selection.createRange&&(o=(r=0-(c=i.selection.createRange()).duplicate().moveStart("character",-a.inputmask._valueGet().length))+c.text.length),{begin:s?r:l(r),end:s?o:l(o)};if(e.isArray(r)&&(o=_?r[0]:r[1],r=_?r[1]:r[0]),r.begin!==n&&(o=_?r.begin:r.end,r=_?r.end:r.begin),"number"==typeof r){r=s?r:l(r),o="number"==typeof(o=s?o:l(o))?o:r;var p=parseInt(((a.ownerDocument.defaultView||t).getComputedStyle?(a.ownerDocument.defaultView||t).getComputedStyle(a,null):a.currentStyle).fontSize)*o;if(a.scrollLeft=p>a.scrollWidth?p:0,a.inputmask.caretPos={begin:r,end:o},a===i.activeElement){if("selectionStart"in a)a.selectionStart=r,a.selectionEnd=o;else if(t.getSelection){if(c=i.createRange(),a.firstChild===n||null===a.firstChild){var u=i.createTextNode("");a.appendChild(u)}c.setStart(a.firstChild,r<a.inputmask._valueGet().length?r:a.inputmask._valueGet().length),c.setEnd(a.firstChild,o<a.inputmask._valueGet().length?o:a.inputmask._valueGet().length),c.collapse(!0);var f=t.getSelection();f.removeAllRanges(),f.addRange(c)}else a.createTextRange&&((c=a.createTextRange()).collapse(!0),c.moveEnd("character",o),c.moveStart("character",r),c.select());pe(a,{begin:r,end:o})}}}function re(t){var i,a,r=E(!0,M(),!0,!0),o=r.length,s=M(),l={},c=P().validPositions[s],p=c!==n?c.locator.slice():n;for(i=s+1;i<r.length;i++)p=(a=I(i,p,i-1)).locator.slice(),l[i]=e.extend(!0,{},a);var u=c&&c.alternation!==n?c.locator[c.alternation]:n;for(i=o-1;i>s&&((a=l[i]).match.optionality||a.match.optionalQuantifier&&a.match.newBlockMarker||u&&(u!==l[i].locator[c.alternation]&&null!=a.match.fn||null===a.match.fn&&a.locator[c.alternation]&&V(a.locator[c.alternation].toString().split(","),u.toString().split(","))&&""!==N(i)[0].def))&&r[i]===J(i,a.match);i--)o--;return t?{l:o,def:l[o]?l[o].match:n}:o}function oe(e){e.length=0;for(var t,i=E(!0,0,!0,n,!0);(t=i.shift())!==n;)e.push(t);return e}function se(t){if(e.isFunction(d.isComplete))return d.isComplete(t,d);if("*"===d.repeat)return n;var i=!1,a=re(!0),r=W(a.l);if(a.def===n||a.def.newBlockMarker||a.def.optionality||a.def.optionalQuantifier){i=!0;for(var o=0;o<=r;o++){var s=I(o).match;if(null!==s.fn&&P().validPositions[o]===n&&!0!==s.optionality&&!0!==s.optionalQuantifier||null===s.fn&&t[o]!==J(o,s)){i=!1;break}}}return i}function le(e,t,i,a,r){if((d.numericInput||_)&&(t===p.keyCode.BACKSPACE?t=p.keyCode.DELETE:t===p.keyCode.DELETE&&(t=p.keyCode.BACKSPACE),_)){var o=i.end;i.end=i.begin,i.begin=o}if(t===p.keyCode.BACKSPACE&&i.end-i.begin<1?(i.begin=W(i.begin),P().validPositions[i.begin]!==n&&P().validPositions[i.begin].input===d.groupSeparator&&i.begin--):t===p.keyCode.DELETE&&i.begin===i.end&&(i.end=Y(i.end,!0)&&P().validPositions[i.end]&&P().validPositions[i.end].input!==d.radixPoint?i.end+1:Q(i.end)+1,P().validPositions[i.begin]!==n&&P().validPositions[i.begin].input===d.groupSeparator&&i.end++),K(i),!0!==a&&!1!==d.keepStatic||null!==d.regex){var s=H(!0);if(s){var l=s.caret!==n?s.caret:s.pos?Q(s.pos.begin?s.pos.begin:s.pos):M(-1,!0);(t!==p.keyCode.DELETE||i.begin>l)&&i.begin}}var c=M(i.begin,!0);if(c<i.begin||-1===i.begin)P().p=Q(c);else if(!0!==a&&(P().p=i.begin,!0!==r))for(;P().p<c&&P().validPositions[P().p]===n;)P().p++}function ce(n){var a=(n.ownerDocument.defaultView||t).getComputedStyle(n,null),r=i.createElement("div");r.style.width=a.width,r.style.textAlign=a.textAlign,v=i.createElement("div"),n.inputmask.colorMask=v,v.className="im-colormask",n.parentNode.insertBefore(v,n),n.parentNode.removeChild(n),v.appendChild(n),v.appendChild(r),n.style.left=r.offsetLeft+"px",e(v).on("mouseleave",(function(e){return te.mouseleaveEvent.call(n,[e])})),e(v).on("mouseenter",(function(e){return te.mouseenterEvent.call(n,[e])})),e(v).on("click",(function(e){return ae(n,function(e){var t,r=i.createElement("span");for(var o in a)isNaN(o)&&-1!==o.indexOf("font")&&(r.style[o]=a[o]);r.style.textTransform=a.textTransform,r.style.letterSpacing=a.letterSpacing,r.style.position="absolute",r.style.height="auto",r.style.width="auto",r.style.visibility="hidden",r.style.whiteSpace="nowrap",i.body.appendChild(r);var s,l=n.inputmask._valueGet(),c=0;for(t=0,s=l.length;t<=s;t++){if(r.innerHTML+=l.charAt(t)||"_",r.offsetWidth>=e){var p=e-c,u=r.offsetWidth-e;r.innerHTML=l.charAt(t),t=(p-=r.offsetWidth/3)<u?t-1:t;break}c=r.offsetWidth}return i.body.removeChild(r),t}(e.clientX)),te.clickEvent.call(n,[e])}))}function pe(e,t,a){var r,o,s,l=[],c=!1,p=0;function u(e){if(e===n&&(e=""),c||null!==r.fn&&o.input!==n)if(c&&(null!==r.fn&&o.input!==n||""===r.def)){c=!1;var t=l.length;l[t-1]=l[t-1]+"</span>",l.push(e)}else l.push(e);else c=!0,l.push("<span class='im-static'>"+e)}if(v!==n){var f=z();if(t===n?t=ae(e):t.begin===n&&(t={begin:t,end:t}),!0!==a){var m=M();do{P().validPositions[p]?(o=P().validPositions[p],r=o.match,s=o.locator.slice(),u(f[p])):(o=I(p,s,p-1),r=o.match,s=o.locator.slice(),!1===d.jitMasking||p<m||"number"==typeof d.jitMasking&&isFinite(d.jitMasking)&&d.jitMasking>p?u(J(p,r)):c=!1),p++}while((b===n||p<b)&&(null!==r.fn||""!==r.def)||m>p||c);c&&u(),i.activeElement===e&&(l.splice(t.begin,0,t.begin===t.end||t.end>P().maskLength?'<mark class="im-caret" style="border-right-width: 1px;border-right-style: solid;">':'<mark class="im-caret-select">'),l.splice(t.end+1,0,"</mark>"))}var g=v.getElementsByTagName("div")[0];g.innerHTML=l.join(""),e.inputmask.positionColorMask(e,g)}}if(a!==n)switch(a.action){case"isComplete":return y=a.el,se(z());case"unmaskedvalue":return y!==n&&a.value===n||(Z=a.value,Z=(e.isFunction(d.onBeforeMask)&&d.onBeforeMask.call(k,Z,d)||Z).split(""),ne.call(this,n,!1,!1,Z),e.isFunction(d.onBeforeWrite)&&d.onBeforeWrite.call(k,n,z(),0,d)),ie(y);case"mask":!function(t){ee.off(t);var a=function(t,a){var r=t.getAttribute("type"),s="INPUT"===t.tagName&&-1!==e.inArray(r,a.supportsInputType)||t.isContentEditable||"TEXTAREA"===t.tagName;if(!s)if("INPUT"===t.tagName){var l=i.createElement("input");l.setAttribute("type",r),s="text"===l.type,l=null}else s="partial";return!1!==s?function(t){var r,s;function l(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():-1!==M()||!0!==a.nullable?i.activeElement===this&&a.clearMaskOnLostFocus?(_?oe(z().slice()).reverse():oe(z().slice())).join(""):r.call(this):"":r.call(this)}function c(t){s.call(this,t),this.inputmask&&e(this).trigger("setvalue",[t])}if(!t.inputmask.__valueGet){if(!0!==a.noValuePatching){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"===o("test".__proto__)?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var p=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):n;p&&p.get&&p.set?(r=p.get,s=p.set,Object.defineProperty(t,"value",{get:l,set:c,configurable:!0})):"INPUT"!==t.tagName&&(r=function(){return this.textContent},s=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:l,set:c,configurable:!0}))}else i.__lookupGetter__&&t.__lookupGetter__("value")&&(r=t.__lookupGetter__("value"),s=t.__lookupSetter__("value"),t.__defineGetter__("value",l),t.__defineSetter__("value",c));t.inputmask.__valueGet=r,t.inputmask.__valueSet=s}t.inputmask._valueGet=function(e){return _&&!0!==e?r.call(this.el).split("").reverse().join(""):r.call(this.el)},t.inputmask._valueSet=function(e,t){s.call(this.el,null===e||e===n?"":!0!==t&&_?e.split("").reverse().join(""):e)},r===n&&(r=function(){return this.value},s=function(e){this.value=e},function(t){if(e.valHooks&&(e.valHooks[t]===n||!0!==e.valHooks[t].inputmaskpatch)){var i=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},r=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=i(e);return-1!==M(n,n,e.inputmask.maskset.validPositions)||!0!==a.nullable?t:""}return i(e)},set:function(t,n){var i,a=e(t);return i=r(t,n),t.inputmask&&a.trigger("setvalue",[n]),i},inputmaskpatch:!0}}}(t.type),function(t){ee.on(t,"mouseenter",(function(t){var n=e(this);this.inputmask._valueGet()!==z().join("")&&n.trigger("setvalue")}))}(t))}}(t):t.inputmask=n,s}(t,d);if(!1!==a&&(h=e(y=t),x=y.placeholder,-1===(b=y!==n?y.maxLength:n)&&(b=n),!0===d.colorMask&&ce(y),s&&("inputMode"in y&&(y.inputmode=d.inputmode,y.setAttribute("inputmode",d.inputmode)),!0===d.disablePredictiveText&&("autocorrect"in y?y.autocorrect=!1:(!0!==d.colorMask&&ce(y),y.type="password"))),!0===a&&(y.setAttribute("im-insert",d.insertMode),ee.on(y,"submit",te.submitEvent),ee.on(y,"reset",te.resetEvent),ee.on(y,"blur",te.blurEvent),ee.on(y,"focus",te.focusEvent),!0!==d.colorMask&&(ee.on(y,"click",te.clickEvent),ee.on(y,"mouseleave",te.mouseleaveEvent),ee.on(y,"mouseenter",te.mouseenterEvent)),ee.on(y,"paste",te.pasteEvent),ee.on(y,"cut",te.cutEvent),ee.on(y,"complete",d.oncomplete),ee.on(y,"incomplete",d.onincomplete),ee.on(y,"cleared",d.oncleared),s||!0===d.inputEventOnly?y.removeAttribute("maxLength"):(ee.on(y,"keydown",te.keydownEvent),ee.on(y,"keypress",te.keypressEvent)),ee.on(y,"input",te.inputFallBackEvent),ee.on(y,"beforeinput",te.beforeInputEvent)),ee.on(y,"setvalue",te.setValueEvent),g=R().join(""),""!==y.inputmask._valueGet(!0)||!1===d.clearMaskOnLostFocus||i.activeElement===y)){var r=e.isFunction(d.onBeforeMask)&&d.onBeforeMask.call(k,y.inputmask._valueGet(!0),d)||y.inputmask._valueGet(!0);""!==r&&ne(y,!0,!1,r.split(""));var l=z().slice();g=l.join(""),!1===se(l)&&d.clearIncomplete&&A(),d.clearMaskOnLostFocus&&i.activeElement!==y&&(-1===M()?l=[]:oe(l)),(!1===d.clearMaskOnLostFocus||d.showMaskOnFocus&&i.activeElement===y||""!==y.inputmask._valueGet(!0))&&$(y,l),i.activeElement===y&&ae(y,Q(M()))}}(y);break;case"format":return Z=(e.isFunction(d.onBeforeMask)&&d.onBeforeMask.call(k,a.value,d)||a.value).split(""),ne.call(this,n,!0,!1,Z),a.metadata?{value:_?z().slice().reverse().join(""):z().join(""),metadata:m.call(this,{action:"getmetadata"},u,d)}:_?z().slice().reverse().join(""):z().join("");case"isValid":a.value?(Z=a.value.split(""),ne.call(this,n,!0,!0,Z)):a.value=z().join("");for(var ue=z(),de=re(),fe=ue.length-1;fe>de&&!Y(fe);fe--);return ue.splice(de,fe+1-de),se(ue)&&a.value===z().join("");case"getemptymask":return R().join("");case"remove":return y&&y.inputmask&&(e.data(y,"_inputmask_opts",null),h=e(y),y.inputmask._valueSet(d.autoUnmask?ie(y):y.inputmask._valueGet(!0)),ee.off(y),y.inputmask.colorMask&&((v=y.inputmask.colorMask).removeChild(y),v.parentNode.insertBefore(y,v),v.parentNode.removeChild(v)),Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(y),"value")&&y.inputmask.__valueGet&&Object.defineProperty(y,"value",{get:y.inputmask.__valueGet,set:y.inputmask.__valueSet,configurable:!0}):i.__lookupGetter__&&y.__lookupGetter__("value")&&y.inputmask.__valueGet&&(y.__defineGetter__("value",y.inputmask.__valueGet),y.__defineSetter__("value",y.inputmask.__valueSet)),y.inputmask=n),y;case"getmetadata":if(e.isArray(u.metadata)){var me=E(!0,0,!1).join("");return e.each(u.metadata,(function(e,t){if(t.mask===me)return me=t,!1})),me}return u.metadata}}return p.prototype={dataAttribute:"data-inputmask",defaults:{placeholder:"_",optionalmarker:["[","]"],quantifiermarker:["{","}"],groupmarker:["(",")"],alternatormarker:"|",escapeChar:"\\",mask:null,regex:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!1,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask.call(this,t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",_radixDance:!1,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","url","password","search"],ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123,0,229],isComplete:null,preValidation:null,postValidation:null,staticDefinitionSymbol:n,jitMasking:!1,nullable:!0,inputEventOnly:!1,noValuePatching:!1,positionCaretOnClick:"lvp",casing:null,inputmode:"verbatim",colorMask:!1,disablePredictiveText:!1,importDataAttributes:!0,shiftPositions:!0},definitions:{9:{validator:"[0-9１-９]",definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",definitionSymbol:"*"},"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]"}},aliases:{},masksCache:{},mask:function(a){var r=this;return"string"==typeof a&&(a=i.getElementById(a)||i.querySelectorAll(a)),a=a.nodeName?[a]:a,e.each(a,(function(i,a){var o=e.extend(!0,{},r.opts);if(function(i,a,r,o){if(!0===a.importDataAttributes){var s,l,c,p,d=i.getAttribute(o),f=function(e,a){null!==(a=a!==n?a:i.getAttribute(o+"-"+e))&&("string"==typeof a&&(0===e.indexOf("on")?a=t[a]:"false"===a?a=!1:"true"===a&&(a=!0)),r[e]=a)};if(d&&""!==d&&(d=d.replace(/'/g,'"'),l=JSON.parse("{"+d+"}")),l)for(p in c=n,l)if("alias"===p.toLowerCase()){c=l[p];break}for(s in f("alias",c),r.alias&&u(r.alias,r,a),a){if(l)for(p in c=n,l)if(p.toLowerCase()===s.toLowerCase()){c=l[p];break}f(s,c)}}return e.extend(!0,a,r),("rtl"===i.dir||a.rightAlign)&&(i.style.textAlign="right"),("rtl"===i.dir||a.numericInput)&&(i.dir="ltr",i.removeAttribute("dir"),a.isRTL=!0),Object.keys(r).length}(a,o,e.extend(!0,{},r.userOptions),r.dataAttribute)){var s=d(o,r.noMasksCache);s!==n&&(a.inputmask!==n&&(a.inputmask.opts.autoUnmask=!0,a.inputmask.remove()),a.inputmask=new p(n,n,!0),a.inputmask.opts=o,a.inputmask.noMasksCache=r.noMasksCache,a.inputmask.userOptions=e.extend(!0,{},r.userOptions),a.inputmask.isRTL=o.isRTL||o.numericInput,a.inputmask.el=a,a.inputmask.maskset=s,e.data(a,"_inputmask_opts",o),m.call(a.inputmask,{action:"mask"}))}})),a&&a[0]&&a[0].inputmask||this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"===o(t)?(e.extend(this.userOptions,t),this.el&&!0!==n&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return this.maskset=this.maskset||d(this.opts,this.noMasksCache),m.call(this,{action:"unmaskedvalue",value:e})},remove:function(){return m.call(this,{action:"remove"})},getemptymask:function(){return this.maskset=this.maskset||d(this.opts,this.noMasksCache),m.call(this,{action:"getemptymask"})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return this.maskset=this.maskset||d(this.opts,this.noMasksCache),m.call(this,{action:"isComplete"})},getmetadata:function(){return this.maskset=this.maskset||d(this.opts,this.noMasksCache),m.call(this,{action:"getmetadata"})},isValid:function(e){return this.maskset=this.maskset||d(this.opts,this.noMasksCache),m.call(this,{action:"isValid",value:e})},format:function(e,t){return this.maskset=this.maskset||d(this.opts,this.noMasksCache),m.call(this,{action:"format",value:e,metadata:t})},setValue:function(t){this.el&&e(this.el).trigger("setvalue",[t])},analyseMask:function(t,i,a){var r,o,s,l,c,u,d=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?(?:\|[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,f=/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,m=!1,g=new v,h=[],b=[];function v(e,t,n,i){this.matches=[],this.openGroup=e||!1,this.alternatorGroup=!1,this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function x(t,r,o){o=o!==n?o:t.matches.length;var s=t.matches[o-1];if(i)0===r.indexOf("[")||m&&/\\d|\\s|\\w]/i.test(r)||"."===r?t.matches.splice(o++,0,{fn:new RegExp(r,a.casing?"i":""),optionality:!1,newBlockMarker:s===n?"master":s.def!==r,casing:null,def:r,placeholder:n,nativeDef:r}):(m&&(r=r[r.length-1]),e.each(r.split(""),(function(e,i){s=t.matches[o-1],t.matches.splice(o++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==i&&null!==s.fn,casing:null,def:a.staticDefinitionSymbol||i,placeholder:a.staticDefinitionSymbol!==n?i:n,nativeDef:(m?"'":"")+i})}))),m=!1;else{var l=(a.definitions?a.definitions[r]:n)||p.prototype.definitions[r];l&&!m?t.matches.splice(o++,0,{fn:l.validator?"string"==typeof l.validator?new RegExp(l.validator,a.casing?"i":""):new function(){this.test=l.validator}:new RegExp("."),optionality:!1,newBlockMarker:s===n?"master":s.def!==(l.definitionSymbol||r),casing:l.casing,def:l.definitionSymbol||r,placeholder:l.placeholder,nativeDef:r}):(t.matches.splice(o++,0,{fn:null,optionality:!1,newBlockMarker:s===n?"master":s.def!==r&&null!==s.fn,casing:null,def:a.staticDefinitionSymbol||r,placeholder:a.staticDefinitionSymbol!==n?r:n,nativeDef:(m?"'":"")+r}),m=!1)}}function k(){if(h.length>0){if(x(l=h[h.length-1],o),l.isAlternator){c=h.pop();for(var e=0;e<c.matches.length;e++)c.matches[e].isGroup&&(c.matches[e].isGroup=!1);h.length>0?(l=h[h.length-1]).matches.push(c):g.matches.push(c)}}else x(g,o)}function y(e){var t=new v(!0);return t.openGroup=!1,t.matches=e,t}for(i&&(a.optionalmarker[0]=n,a.optionalmarker[1]=n);r=i?f.exec(t):d.exec(t);){if(o=r[0],i)switch(o.charAt(0)){case"?":o="{0,1}";break;case"+":case"*":o="{"+o+"}"}if(m)k();else switch(o.charAt(0)){case"(?=":case"(?!":case"(?<=":case"(?<!":break;case a.escapeChar:m=!0,i&&k();break;case a.optionalmarker[1]:case a.groupmarker[1]:if((s=h.pop()).openGroup=!1,s!==n)if(h.length>0){if((l=h[h.length-1]).matches.push(s),l.isAlternator){c=h.pop();for(var _=0;_<c.matches.length;_++)c.matches[_].isGroup=!1,c.matches[_].alternatorGroup=!1;h.length>0?(l=h[h.length-1]).matches.push(c):g.matches.push(c)}}else g.matches.push(s);else k();break;case a.optionalmarker[0]:h.push(new v(!1,!0));break;case a.groupmarker[0]:h.push(new v(!0));break;case a.quantifiermarker[0]:var w=new v(!1,!1,!0),C=(o=o.replace(/[{}]/g,"")).split("|"),D=C[0].split(","),S=isNaN(D[0])?D[0]:parseInt(D[0]),E=1===D.length?S:isNaN(D[1])?D[1]:parseInt(D[1]);"*"!==S&&"+"!==S||(S="*"===E?0:1),w.quantifier={min:S,max:E,jit:C[1]};var P=h.length>0?h[h.length-1].matches:g.matches;if((r=P.pop()).isAlternator){P.push(r),P=r.matches;var A=new v(!0),M=P.pop();P.push(A),P=A.matches,r=M}r.isGroup||(r=y([r])),P.push(r),P.push(w);break;case a.alternatormarker:var j=function(e){var t=e.pop();return t.isQuantifier&&(t=y([e.pop(),t])),t};if(h.length>0){var O=(l=h[h.length-1]).matches[l.matches.length-1];u=l.openGroup&&(O.matches===n||!1===O.isGroup&&!1===O.isAlternator)?h.pop():j(l.matches)}else u=j(g.matches);if(u.isAlternator)h.push(u);else if(u.alternatorGroup?(c=h.pop(),u.alternatorGroup=!1):c=new v(!1,!1,!1,!0),c.matches.push(u),h.push(c),u.openGroup){u.openGroup=!1;var L=new v(!0);L.alternatorGroup=!0,h.push(L)}break;default:k()}}for(;h.length>0;)s=h.pop(),g.matches.push(s);return g.matches.length>0&&(function t(r){r&&r.matches&&e.each(r.matches,(function(e,o){var s=r.matches[e+1];(s===n||s.matches===n||!1===s.isQuantifier)&&o&&o.isGroup&&(o.isGroup=!1,i||(x(o,a.groupmarker[0],0),!0!==o.openGroup&&x(o,a.groupmarker[1]))),t(o)}))}(g),b.push(g)),(a.numericInput||a.isRTL)&&function e(t){for(var i in t.matches=t.matches.reverse(),t.matches)if(t.matches.hasOwnProperty(i)){var r=parseInt(i);if(t.matches[i].isQuantifier&&t.matches[r+1]&&t.matches[r+1].isGroup){var o=t.matches[i];t.matches.splice(i,1),t.matches.splice(r+1,0,o)}t.matches[i].matches!==n?t.matches[i]=e(t.matches[i]):t.matches[i]=((s=t.matches[i])===a.optionalmarker[0]?s=a.optionalmarker[1]:s===a.optionalmarker[1]?s=a.optionalmarker[0]:s===a.groupmarker[0]?s=a.groupmarker[1]:s===a.groupmarker[1]&&(s=a.groupmarker[0]),s)}var s;return t}(b[0]),b},positionColorMask:function(e,t){e.style.left=t.offsetLeft+"px"}},p.extendDefaults=function(t){e.extend(!0,p.prototype.defaults,t)},p.extendDefinitions=function(t){e.extend(!0,p.prototype.definitions,t)},p.extendAliases=function(t){e.extend(!0,p.prototype.aliases,t)},p.format=function(e,t,n){return p(t).format(e,n)},p.unmask=function(e,t){return p(t).unmaskedvalue(e)},p.isValid=function(e,t){return p(t).isValid(e)},p.remove=function(t){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(e,t){t.inputmask&&t.inputmask.remove()}))},p.setValue=function(t,n){"string"==typeof t&&(t=i.getElementById(t)||i.querySelectorAll(t)),t=t.nodeName?[t]:t,e.each(t,(function(t,i){i.inputmask?i.inputmask.setValue(n):e(i).trigger("setvalue",[n])}))},p.escapeRegex=function(e){return e.replace(new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"].join("|\\")+")","gim"),"\\$1")},p.keyCode={BACKSPACE:8,BACKSPACE_SAFARI:127,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,RIGHT:39,SPACE:32,TAB:9,UP:38,X:88,CONTROL:17},p.dependencyLib=e,p})?i.apply(t,a):i)||(e.exports=r)},23:function(e,t){var n=document.querySelector("#mainMenuBurgerIcon"),i=document.querySelector("#authProfile"),a=document.querySelector(".main-menu"),r=document.querySelector(".page-header__auth-list"),o=!1;n.addEventListener("click",(function(e){e.preventDefault(),o?(r.classList.remove("page-header__auth-list--active"),o=!1):a.classList.toggle("main-menu--active"),n.classList.toggle("main-menu__burger-icon--active"),i.classList.toggle("page-header__auth-profile--hide")})),i.addEventListener("click",(function(e){e.preventDefault(),o||(r.classList.add("page-header__auth-list--active"),n.classList.add("main-menu__burger-icon--active"),o=!0,i.classList.add("page-header__auth-profile--hide"))}))},24:function(e,t,n){n(29),n(31),n(32),e.exports=n(22)},25:function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* global/window.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/__WEBPACK_AMD_DEFINE_RESULT__=function(){return"undefined"!=typeof window?window:new(eval("require('jsdom').JSDOM"))("").window}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},28:function(e,t,n){e.exports=n.p+"d941af0c0f548bfa52abe2276fd2dde1.svg"},29:function(e,t,n){var i,a,r;a=[n(22)],void 0===(r="function"==typeof(i=function(e){return e.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",casing:"upper"},"#":{validator:"[0-9A-Fa-f]",casing:"upper"}}),e.extendAliases({cssunit:{regex:"[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"},url:{regex:"(https?|ftp)//.*",autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,a){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)}}},onUnMask:function(e,t,n){return e},inputmode:"numeric"},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,casing:"lower",onBeforePaste:function(e,t){return(e=e.toLowerCase()).replace("mailto:","")},definitions:{"*":{validator:"[0-9１-９A-Za-zА-яЁёÀ-ÿµ!#$%&'*+/=?^_`{|}~-]"},"-":{validator:"[0-9A-Za-z-]"}},onUnMask:function(e,t,n){return e},inputmode:"email"},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),e})?i.apply(t,a):i)||(e.exports=r)},3:function(e,t,n){"use strict";var i,a={},r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],i={},a=0;a<e.length;a++){var r=e[a],o=t.base?r[0]+t.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};i[o]?i[o].parts.push(s):n.push(i[o]={id:o,parts:[s]})}return n}function l(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=a[i.id],o=0;if(r){for(r.refs++;o<r.parts.length;o++)r.parts[o](i.parts[o]);for(;o<i.parts.length;o++)r.parts.push(h(i.parts[o],t))}else{for(var s=[];o<i.parts.length;o++)s.push(h(i.parts[o],t));a[i.id]={id:i.id,refs:1,parts:s}}}}function c(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var i=n.nc;i&&(e.attributes.nonce=i)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var p,u=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function d(e,t,n,i){var a=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,a);else{var r=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function f(e,t,n){var i=n.css,a=n.media,r=n.sourceMap;if(a&&e.setAttribute("media",a),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var m=null,g=0;function h(e,t){var n,i,a;if(t.singleton){var r=g++;n=m||(m=c(t)),i=d.bind(null,n,r,!1),a=d.bind(null,n,r,!0)}else n=c(t),i=f.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=s(e,t);return l(n,t),function(e){for(var i=[],r=0;r<n.length;r++){var o=n[r],c=a[o.id];c&&(c.refs--,i.push(c))}e&&l(s(e,t),t);for(var p=0;p<i.length;p++){var u=i[p];if(0===u.refs){for(var d=0;d<u.parts.length;d++)u.parts[d]();delete a[u.id]}}}}},30:function(e,t,n){var i,a,r;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* dependencyLibs/inputmask.dependencyLib.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/a=[n(25)],void 0===(r="function"==typeof(i=function(e){var t=e.document;function n(e){return null!=e&&e===e.window}function i(e){return e instanceof Element}function a(n){return n instanceof a?n:this instanceof a?void(null!=n&&n!==e&&(this[0]=n.nodeName?n:void 0!==n[0]&&n[0].nodeName?n[0]:t.querySelector(n),void 0!==this[0]&&null!==this[0]&&(this[0].eventRegistry=this[0].eventRegistry||{}))):new a(n)}return a.prototype={on:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,a=this[0],r=function(e,i){a.addEventListener?a.addEventListener(e,t,!1):a.attachEvent&&a.attachEvent("on"+e,t),n[e]=n[e]||{},n[e][i]=n[e][i]||[],n[e][i].push(t)},o=e.split(" "),s=0;s<o.length;s++){var l=o[s].split(".");r(l[0],l[1]||"global")}return this},off:function(e,t){if(i(this[0]))for(var n=this[0].eventRegistry,a=this[0],r=function(e,t,i){if(e in n==1)if(a.removeEventListener?a.removeEventListener(e,i,!1):a.detachEvent&&a.detachEvent("on"+e,i),"global"===t)for(var r in n[e])n[e][r].splice(n[e][r].indexOf(i),1);else n[e][t].splice(n[e][t].indexOf(i),1)},o=function(e,i){var a,r,o=[];if(e.length>0)if(void 0===t)for(a=0,r=n[e][i].length;a<r;a++)o.push({ev:e,namespace:i&&i.length>0?i:"global",handler:n[e][i][a]});else o.push({ev:e,namespace:i&&i.length>0?i:"global",handler:t});else if(i.length>0)for(var s in n)for(var l in n[s])if(l===i)if(void 0===t)for(a=0,r=n[s][l].length;a<r;a++)o.push({ev:s,namespace:l,handler:n[s][l][a]});else o.push({ev:s,namespace:l,handler:t});return o},s=e.split(" "),l=0;l<s.length;l++)for(var c=s[l].split("."),p=o(c[0],c[1]),u=0,d=p.length;u<d;u++)r(p[u].ev,p[u].namespace,p[u].handler);return this},trigger:function(e){if(i(this[0]))for(var n=this[0].eventRegistry,r=this[0],o="string"==typeof e?e.split(" "):[e.type],s=0;s<o.length;s++){var l=o[s].split("."),c=l[0],p=l[1]||"global";if(void 0!==t&&"global"===p){var u,d,f={bubbles:!0,cancelable:!0,detail:arguments[1]};if(t.createEvent){try{u=new CustomEvent(c,f)}catch(e){(u=t.createEvent("CustomEvent")).initCustomEvent(c,f.bubbles,f.cancelable,f.detail)}e.type&&a.extend(u,e),r.dispatchEvent(u)}else(u=t.createEventObject()).eventType=c,u.detail=arguments[1],e.type&&a.extend(u,e),r.fireEvent("on"+u.eventType,u)}else if(void 0!==n[c])if(arguments[0]=arguments[0].type?arguments[0]:a.Event(arguments[0]),"global"===p)for(var m in n[c])for(d=0;d<n[c][m].length;d++)n[c][m][d].apply(r,arguments);else for(d=0;d<n[c][p].length;d++)n[c][p][d].apply(r,arguments)}return this}},a.isFunction=function(e){return"function"==typeof e},a.noop=function(){},a.isArray=Array.isArray,a.inArray=function(e,t,n){return null==t?-1:function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}(t,e)},a.valHooks=void 0,a.isPlainObject=function(e){return!("object"!==o(e)||e.nodeType||n(e)||e.constructor&&!Object.hasOwnProperty.call(e.constructor.prototype,"isPrototypeOf"))},a.extend=function(){var e,t,n,i,r,s,l=arguments[0]||{},c=1,p=arguments.length,u=!1;for("boolean"==typeof l&&(u=l,l=arguments[c]||{},c++),"object"===o(l)||a.isFunction(l)||(l={}),c===p&&(l=this,c--);c<p;c++)if(null!=(e=arguments[c]))for(t in e)n=l[t],l!==(i=e[t])&&(u&&i&&(a.isPlainObject(i)||(r=a.isArray(i)))?(r?(r=!1,s=n&&a.isArray(n)?n:[]):s=n&&a.isPlainObject(n)?n:{},l[t]=a.extend(u,s,i)):void 0!==i&&(l[t]=i));return l},a.each=function(e,t){var i=0;if(function(e){var t="length"in e&&e.length,i=o(e);return"function"!==i&&!n(e)&&(!(1!==e.nodeType||!t)||("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e))}(e))for(var a=e.length;i<a&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},a.data=function(e,t,n){if(void 0===n)return e.__data?e.__data[t]:null;e.__data=e.__data||{},e.__data[t]=n},"function"==typeof e.CustomEvent?a.Event=e.CustomEvent:(a.Event=function(e,n){n=n||{bubbles:!1,cancelable:!1,detail:void 0};var i=t.createEvent("CustomEvent");return i.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),i},a.Event.prototype=e.Event.prototype),a})?i.apply(t,a):i)||(e.exports=r)},31:function(e,t,n){var i,a,r;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
* inputmask.date.extensions.js
* https://github.com/RobinHerbots/Inputmask
* Copyright (c) 2010 - 2019 Robin Herbots
* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
* Version: 4.0.9
*/a=[n(22)],void 0===(r="function"==typeof(i=function(e){var t=e.dependencyLib,n={d:["[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",Date.prototype.getDate],dd:["0[1-9]|[12][0-9]|3[01]",Date.prototype.setDate,"day",function(){return s(Date.prototype.getDate.call(this),2)}],ddd:[""],dddd:[""],m:["[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return Date.prototype.getMonth.call(this)+1}],mm:["0[1-9]|1[012]",Date.prototype.setMonth,"month",function(){return s(Date.prototype.getMonth.call(this)+1,2)}],mmm:[""],mmmm:[""],yy:["[0-9]{2}",Date.prototype.setFullYear,"year",function(){return s(Date.prototype.getFullYear.call(this),2)}],yyyy:["[0-9]{4}",Date.prototype.setFullYear,"year",function(){return s(Date.prototype.getFullYear.call(this),4)}],h:["[1-9]|1[0-2]",Date.prototype.setHours,"hours",Date.prototype.getHours],hh:["0[1-9]|1[0-2]",Date.prototype.setHours,"hours",function(){return s(Date.prototype.getHours.call(this),2)}],hhh:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],H:["1?[0-9]|2[0-3]",Date.prototype.setHours,"hours",Date.prototype.getHours],HH:["0[0-9]|1[0-9]|2[0-3]",Date.prototype.setHours,"hours",function(){return s(Date.prototype.getHours.call(this),2)}],HHH:["[0-9]+",Date.prototype.setHours,"hours",Date.prototype.getHours],M:["[1-5]?[0-9]",Date.prototype.setMinutes,"minutes",Date.prototype.getMinutes],MM:["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]",Date.prototype.setMinutes,"minutes",function(){return s(Date.prototype.getMinutes.call(this),2)}],ss:["[0-5][0-9]",Date.prototype.setSeconds,"seconds",function(){return s(Date.prototype.getSeconds.call(this),2)}],l:["[0-9]{3}",Date.prototype.setMilliseconds,"milliseconds",function(){return s(Date.prototype.getMilliseconds.call(this),3)}],L:["[0-9]{2}",Date.prototype.setMilliseconds,"milliseconds",function(){return s(Date.prototype.getMilliseconds.call(this),2)}],t:["[ap]"],tt:["[ap]m"],T:["[AP]"],TT:["[AP]M"],Z:[""],o:[""],S:[""]},i={isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};function a(e){if(!e.tokenizer){var t=[];for(var i in n)-1===t.indexOf(i[0])&&t.push(i[0]);e.tokenizer="("+t.join("+|")+")+?|.",e.tokenizer=new RegExp(e.tokenizer,"g")}return e.tokenizer}function r(t,i,r,o){for(var s,l="";s=a(r).exec(t);)if(void 0===i)if(n[s[0]])l+="("+n[s[0]][0]+")";else switch(s[0]){case"[":l+="(";break;case"]":l+=")?";break;default:l+=e.escapeRegex(s[0])}else n[s[0]]?!0!==o&&n[s[0]][3]?l+=n[s[0]][3].call(i.date):n[s[0]][2]?l+=i["raw"+n[s[0]][2]]:l+=s[0]:l+=s[0];return l}function s(e,t){for(e=String(e),t=t||2;e.length<t;)e="0"+e;return e}function l(e,t,i){var r,s,l,c={date:new Date(1,0,1)},p=e;function u(e){var t=e.replace(/[^0-9]/g,"0");if(t!=e){var n=e.replace(/[^0-9]/g,""),a=(i.min&&i.min[r]||e).toString(),o=(i.max&&i.max[r]||e).toString();t=n+(n<a.slice(0,n.length)?a.slice(n.length):n>o.slice(0,n.length)?o.slice(n.length):t.toString().slice(n.length))}return t}function d(e,t,n){e[r]=u(t),e["raw"+r]=t,void 0!==l&&l.call(e.date,"month"==r?parseInt(e[r])-1:e[r])}if("string"==typeof p){for(;s=a(i).exec(t);){var f=p.slice(0,s[0].length);n.hasOwnProperty(s[0])&&(n[s[0]][0],r=n[s[0]][2],l=n[s[0]][1],d(c,f)),p=p.slice(f.length)}return c}if(p&&"object"===o(p)&&p.hasOwnProperty("date"))return p}return e.extendAliases({datetime:{mask:function(e){return n.S=e.i18n.ordinalSuffix.join("|"),e.inputFormat=i[e.inputFormat]||e.inputFormat,e.displayFormat=i[e.displayFormat]||e.displayFormat||e.inputFormat,e.outputFormat=i[e.outputFormat]||e.outputFormat||e.inputFormat,e.placeholder=""!==e.placeholder?e.placeholder:e.inputFormat.replace(/[\[\]]/,""),e.regex=r(e.inputFormat,void 0,e),null},placeholder:"",inputFormat:"isoDateTime",displayFormat:void 0,outputFormat:void 0,min:null,max:null,i18n:{dayNames:["Mon","Tue","Wed","Thu","Fri","Sat","Sun","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"],ordinalSuffix:["st","nd","rd","th"]},postValidation:function(e,t,n,i){i.min=l(i.min,i.inputFormat,i),i.max=l(i.max,i.inputFormat,i);var a=n,o=l(e.join(""),i.inputFormat,i);return a&&o.date.getTime()==o.date.getTime()&&(a=(a=function(e,t){return(!isFinite(e.rawday)||"29"==e.day&&!isFinite(e.rawyear)||new Date(e.date.getFullYear(),isFinite(e.rawmonth)?e.month:e.date.getMonth()+1,0).getDate()>=e.day)&&t}(o,a))&&function(e,t){var n=!0;if(t.min){if(e.rawyear){var i=e.rawyear.replace(/[^0-9]/g,""),a=t.min.year.substr(0,i.length);n=a<=i}e.year===e.rawyear&&t.min.date.getTime()==t.min.date.getTime()&&(n=t.min.date.getTime()<=e.date.getTime())}return n&&t.max&&t.max.date.getTime()==t.max.date.getTime()&&(n=t.max.date.getTime()>=e.date.getTime()),n}(o,i)),t&&a&&n.pos!==t?{buffer:r(i.inputFormat,o,i),refreshFromBuffer:{start:t,end:n.pos}}:a},onKeyDown:function(n,i,r,o){if(n.ctrlKey&&n.keyCode===e.keyCode.RIGHT){for(var l,c=new Date,p="";l=a(o).exec(o.inputFormat);)"d"===l[0].charAt(0)?p+=s(c.getDate(),l[0].length):"m"===l[0].charAt(0)?p+=s(c.getMonth()+1,l[0].length):"yyyy"===l[0]?p+=c.getFullYear().toString():"y"===l[0].charAt(0)&&(p+=s(c.getYear(),l[0].length));this.inputmask._valueSet(p),t(this).trigger("setvalue")}},onUnMask:function(e,t,n){return r(n.outputFormat,l(e,n.inputFormat,n),n,!0)},casing:function(e,t,n,i){return 0==t.nativeDef.indexOf("[ap]")?e.toLowerCase():0==t.nativeDef.indexOf("[AP]")?e.toUpperCase():e},insertMode:!1,shiftPositions:!1}}),e})?i.apply(t,a):i)||(e.exports=r)},32:function(e,t,n){var i,a,r;a=[n(22)],void 0===(r="function"==typeof(i=function(e){var t=e.dependencyLib;function n(t,n){for(var i="",a=0;a<t.length;a++)e.prototype.definitions[t.charAt(a)]||n.definitions[t.charAt(a)]||n.optionalmarker.start===t.charAt(a)||n.optionalmarker.end===t.charAt(a)||n.quantifiermarker.start===t.charAt(a)||n.quantifiermarker.end===t.charAt(a)||n.groupmarker.start===t.charAt(a)||n.groupmarker.end===t.charAt(a)||n.alternatormarker===t.charAt(a)?i+="\\"+t.charAt(a):i+=t.charAt(a);return i}return e.extendAliases({numeric:{mask:function(e){if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&e.digits&&"0"!==e.digits&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var t=Math.floor(e.integerDigits/e.groupSize),i=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===i?t-1:t),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&!1===e.integerOptional&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",!0===e.numericInput&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var a="[+]";if(a+=n(e.prefix,e),!0===e.integerOptional?a+="~{1,"+e.integerDigits+"}":a+="~{"+e.integerDigits+"}",void 0!==e.digits){var r=e.decimalProtect?":":e.radixPoint,o=e.digits.toString().split(",");isFinite(o[0])&&o[1]&&isFinite(o[1])?a+=r+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(e.digitsOptional?a+="["+r+";{1,"+e.digits+"}]":a+=r+";{"+e.digits+"}")}return a+=n(e.suffix,e),a+="[-]",e.greedy=!1,a},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,enforceDigitsOnBlur:!1,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,inputType:"text",inputmode:"numeric",preValidation:function(e,n,i,a,r,o){if("-"===i||i===r.negationSymbol.front)return!0===r.allowMinus&&(r.isNegative=void 0===r.isNegative||!r.isNegative,""===e.join("")||{caret:o.validPositions[n]?n:void 0,dopost:!0});if(!1===a&&i===r.radixPoint&&void 0!==r.digits&&(isNaN(r.digits)||parseInt(r.digits)>0)){var s=t.inArray(r.radixPoint,e);if(-1!==s&&void 0!==o.validPositions[s])return!0===r.numericInput?n===s:{caret:s+1}}return!0},postValidation:function(n,i,a,r){var o=r.suffix.split(""),s=r.prefix.split("");if(void 0===a.pos&&void 0!==a.caret&&!0!==a.dopost)return a;var l=void 0!==a.caret?a.caret:a.pos,c=n.slice();r.numericInput&&(l=c.length-l-1,c=c.reverse());var p=c[l];if(p===r.groupSeparator&&(p=c[l+=1]),l===c.length-r.suffix.length-1&&p===r.radixPoint)return a;void 0!==p&&p!==r.radixPoint&&p!==r.negationSymbol.front&&p!==r.negationSymbol.back&&(c[l]="?",r.prefix.length>0&&l>=(!1===r.isNegative?1:0)&&l<r.prefix.length-1+(!1===r.isNegative?1:0)?s[l-(!1===r.isNegative?1:0)]="?":r.suffix.length>0&&l>=c.length-r.suffix.length-(!1===r.isNegative?1:0)&&(o[l-(c.length-r.suffix.length-(!1===r.isNegative?1:0))]="?")),s=s.join(""),o=o.join("");var u=c.join("").replace(s,"");if(u=(u=(u=(u=u.replace(o,"")).replace(new RegExp(e.escapeRegex(r.groupSeparator),"g"),"")).replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),""),isNaN(r.placeholder)&&(u=u.replace(new RegExp(e.escapeRegex(r.placeholder),"g"),"")),u.length>1&&1!==u.indexOf(r.radixPoint)&&("0"===p&&(u=u.replace(/^\?/g,"")),u=u.replace(/^0/g,"")),u.charAt(0)===r.radixPoint&&""!==r.radixPoint&&!0!==r.numericInput&&(u="0"+u),""!==u){if(u=u.split(""),(!r.digitsOptional||r.enforceDigitsOnBlur&&"blur"===a.event)&&isFinite(r.digits)){var d=t.inArray(r.radixPoint,u),f=t.inArray(r.radixPoint,c);-1===d&&(u.push(r.radixPoint),d=u.length-1);for(var m=1;m<=r.digits;m++)r.digitsOptional&&(!r.enforceDigitsOnBlur||"blur"!==a.event)||void 0!==u[d+m]&&u[d+m]!==r.placeholder.charAt(0)?-1!==f&&void 0!==c[f+m]&&(u[d+m]=u[d+m]||c[f+m]):u[d+m]=a.placeholder||r.placeholder.charAt(0)}if(!0!==r.autoGroup||""===r.groupSeparator||p===r.radixPoint&&void 0===a.pos&&!a.dopost)u=u.join("");else{var g=u[u.length-1]===r.radixPoint&&a.c===r.radixPoint;u=e(function(e,t){var n="";if(n+="("+t.groupSeparator+"*{"+t.groupSize+"}){*}",""!==t.radixPoint){var i=e.join("").split(t.radixPoint);i[1]&&(n+=t.radixPoint+"*{"+i[1].match(/^\d*\??\d*/)[0].length+"}")}return n}(u,r),{numericInput:!0,jitMasking:!0,definitions:{"*":{validator:"[0-9?]",cardinality:1}}}).format(u.join("")),g&&(u+=r.radixPoint),u.charAt(0)===r.groupSeparator&&u.substr(1)}}if(r.isNegative&&"blur"===a.event&&(r.isNegative="0"!==u),u=s+u,u+=o,r.isNegative&&(u=r.negationSymbol.front+u,u+=r.negationSymbol.back),u=u.split(""),void 0!==p)if(p!==r.radixPoint&&p!==r.negationSymbol.front&&p!==r.negationSymbol.back)(l=t.inArray("?",u))>-1?u[l]=p:l=a.caret||0;else if(p===r.radixPoint||p===r.negationSymbol.front||p===r.negationSymbol.back){var h=t.inArray(p,u);-1!==h&&(l=h)}r.numericInput&&(l=u.length-l-1,u=u.reverse());var b={caret:void 0!==p&&void 0===a.pos||void 0===l?l:l+(r.numericInput?-1:1),buffer:u,refreshFromBuffer:a.dopost||n.join("")!==u.join("")};return b.refreshFromBuffer?b:a},onBeforeWrite:function(n,i,a,r){if(n)switch(n.type){case"keydown":return r.postValidation(i,a,{caret:a,dopost:!0},r);case"blur":case"checkval":var o;if(function(t){void 0===t.parseMinMaxOptions&&(null!==t.min&&(t.min=t.min.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.min=t.min.replace(t.radixPoint,".")),t.min=isFinite(t.min)?parseFloat(t.min):NaN,isNaN(t.min)&&(t.min=Number.MIN_VALUE)),null!==t.max&&(t.max=t.max.toString().replace(new RegExp(e.escapeRegex(t.groupSeparator),"g"),""),","===t.radixPoint&&(t.max=t.max.replace(t.radixPoint,".")),t.max=isFinite(t.max)?parseFloat(t.max):NaN,isNaN(t.max)&&(t.max=Number.MAX_VALUE)),t.parseMinMaxOptions="done")}(r),null!==r.min||null!==r.max){if(o=r.onUnMask(i.join(""),void 0,t.extend({},r,{unmaskAsNumber:!0})),null!==r.min&&o<r.min)return r.isNegative=r.min<0,r.postValidation(r.min.toString().replace(".",r.radixPoint).split(""),a,{caret:a,dopost:!0,placeholder:"0"},r);if(null!==r.max&&o>r.max)return r.isNegative=r.max<0,r.postValidation(r.max.toString().replace(".",r.radixPoint).split(""),a,{caret:a,dopost:!0,placeholder:"0"},r)}return r.postValidation(i,a,{caret:a,placeholder:"0",event:"blur"},r);case"_checkval":return{caret:a}}},regex:{integerPart:function(t,n){return n?new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?"):new RegExp("["+e.escapeRegex(t.negationSymbol.front)+"+]?\\d+")},integerNPart:function(t){return new RegExp("[\\d"+e.escapeRegex(t.groupSeparator)+e.escapeRegex(t.placeholder.charAt(0))+"]+")}},definitions:{"~":{validator:function(t,n,i,a,r,o){var s;if("k"===t||"m"===t){s={insert:[],c:0};for(var l=0,c="k"===t?2:5;l<c;l++)s.insert.push({pos:i+l,c:0});return s.pos=i+c,s}if(!0===(s=a?new RegExp("[0-9"+e.escapeRegex(r.groupSeparator)+"]").test(t):new RegExp("[0-9]").test(t))){if(!0!==r.numericInput&&void 0!==n.validPositions[i]&&"~"===n.validPositions[i].match.def&&!o){var p=n.buffer.join(""),u=(p=(p=p.replace(new RegExp("[-"+e.escapeRegex(r.negationSymbol.front)+"]","g"),"")).replace(new RegExp(e.escapeRegex(r.negationSymbol.back)+"$"),"")).split(r.radixPoint);u.length>1&&(u[1]=u[1].replace(/0/g,r.placeholder.charAt(0))),"0"===u[0]&&(u[0]=u[0].replace(/0/g,r.placeholder.charAt(0))),p=u[0]+r.radixPoint+u[1]||"";var d=n._buffer.join("");for(p===r.radixPoint&&(p=d);null===p.match(e.escapeRegex(d)+"$");)d=d.slice(1);s=void 0===(p=(p=p.replace(d,"")).split(""))[i]?{pos:i,remove:i}:{pos:i}}}else a||t!==r.radixPoint||void 0!==n.validPositions[i-1]||(s={insert:{pos:i,c:0},pos:i+1});return s},cardinality:1},"+":{validator:function(e,t,n,i,a){return a.allowMinus&&("-"===e||e===a.negationSymbol.front)},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,a){return a.allowMinus&&e===a.negationSymbol.back},cardinality:1,placeholder:""},":":{validator:function(t,n,i,a,r){var o="["+e.escapeRegex(r.radixPoint)+"]",s=new RegExp(o).test(t);return s&&n.validPositions[i]&&n.validPositions[i].match.placeholder===r.radixPoint&&(s={caret:i+1}),s},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(t,n,i){if(""===n&&!0===i.nullable)return n;var a=t.replace(i.prefix,"");return a=(a=a.replace(i.suffix,"")).replace(new RegExp(e.escapeRegex(i.groupSeparator),"g"),""),""!==i.placeholder.charAt(0)&&(a=a.replace(new RegExp(i.placeholder.charAt(0),"g"),"0")),i.unmaskAsNumber?(""!==i.radixPoint&&-1!==a.indexOf(i.radixPoint)&&(a=a.replace(e.escapeRegex.call(this,i.radixPoint),".")),a=(a=a.replace(new RegExp("^"+e.escapeRegex(i.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(i.negationSymbol.back)+"$"),""),Number(a)):a},isComplete:function(t,n){var i=(n.numericInput?t.slice().reverse():t).join("");return i=(i=(i=(i=(i=i.replace(new RegExp("^"+e.escapeRegex(n.negationSymbol.front)),"-")).replace(new RegExp(e.escapeRegex(n.negationSymbol.back)+"$"),"")).replace(n.prefix,"")).replace(n.suffix,"")).replace(new RegExp(e.escapeRegex(n.groupSeparator)+"([0-9]{3})","g"),"$1"),","===n.radixPoint&&(i=i.replace(e.escapeRegex(n.radixPoint),".")),isFinite(i)},onBeforeMask:function(n,i){i.isNegative=void 0;var a=i.radixPoint||",";"number"!=typeof n&&"number"!==i.inputType||""===a||(n=n.toString().replace(".",a));var r=n.split(a),o=r[0].replace(/[^\-0-9]/g,""),s=r.length>1?r[1].replace(/[^0-9]/g,""):"";n=o+(""!==s?a+s:s);var l=0;if(""!==a&&(l=s.length,""!==s)){var c=Math.pow(10,l||1);isFinite(i.digits)&&(l=parseInt(i.digits),c=Math.pow(10,l)),n=n.replace(e.escapeRegex(a),"."),isFinite(n)&&(n=Math.round(parseFloat(n)*c)/c),n=n.toString().replace(".",a)}return 0===i.digits&&-1!==n.indexOf(e.escapeRegex(a))&&(n=n.substring(0,n.indexOf(e.escapeRegex(a)))),function(e,n,i){if(n>0){var a=t.inArray(i.radixPoint,e);-1===a&&(e.push(i.radixPoint),a=e.length-1);for(var r=1;r<=n;r++)e[a+r]=e[a+r]||"0"}return e}(n.toString().split(""),l,i).join("")},onKeyDown:function(n,i,a,r){var o=t(this);if(n.ctrlKey)switch(n.keyCode){case e.keyCode.UP:o.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(r.step)),o.trigger("setvalue");break;case e.keyCode.DOWN:o.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(r.step)),o.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,digitsOptional:!0,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowMinus:!1}}),e})?i.apply(t,a):i)||(e.exports=r)},4:function(e,t,n){var i=n(5);"string"==typeof i&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1};n(3)(i,a);i.locals&&(e.exports=i.locals)},5:function(e,t,n){t=e.exports=n(1)(!1);var i=n(2),a=n(6),r=n(7),o=n(8),s=n(9),l=n(10),c=n(11),p=n(12),u=n(13),d=n(14),f=n(15),m=n(16),g=n(17),h=i(a),b=i(r),v=i(o,{hash:"#webfont"}),x=i(s),k=i(l),y=i(c,{hash:"#webfont"}),_=i(p),w=i(u),C=i(d,{hash:"#webfont"}),D=i(f),S=i(m),E=i(g,{hash:"#webfont"});t.push([e.i,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{margin:0.67em 0;font-size:2em}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}@font-face{font-weight:normal;font-family:"Montserrat";font-style:normal;src:url('+h+");src:url("+h+') format("woff"),url('+b+') format("truetype"),url('+v+') format("svg")}@font-face{font-weight:bold;font-family:"Montserrat";font-style:normal;src:url('+x+");src:url("+x+') format("woff"),url('+k+') format("truetype"),url('+y+') format("svg")}@font-face{font-weight:normal;font-family:"Quicksand";font-style:normal;src:url('+_+");src:url("+_+') format("woff"),url('+w+') format("truetype"),url('+C+') format("svg")}@font-face{font-weight:bold;font-family:"Quicksand";font-style:normal;src:url('+D+");src:url("+D+') format("woff"),url('+S+') format("truetype"),url('+E+') format("svg")}body{color:#1f2041;font-size:14px;font-family:"Quicksand","Montserrat",sans-serif}.container{position:relative;width:80.5556%;min-width:320px;max-width:1920px;margin:0 auto;padding:0 10px}@media (max-width: 1300px){.container{width:90.5556%}}@media (max-width: 425px){.container{width:auto;margin:0;padding:0}}\n',""])},6:function(e,t,n){e.exports=n.p+"69aaa9d6aa41b1f3656d9e4176b3a2bc.woff"},7:function(e,t,n){e.exports=n.p+"a8a117360e71de94ae3b0b0f8d15b44d.ttf"},8:function(e,t,n){e.exports=n.p+"f560c34781dabab984d59b379f3d7ffc.svg"},9:function(e,t,n){e.exports=n.p+"db91cb6874cba0087e6545db4b5ad345.woff"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLnR0ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZm9udHMvTW9udHNlcnJhdC1Cb2xkLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtUmVndWxhci50dGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL1F1aWNrc2FuZC1SZWd1bGFyLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9RdWlja3NhbmQtQm9sZC50dGYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbGlkYXRvci9saWIvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlL21haW4vbWFpbi5zY3NzP2RhNGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvbWFpbi9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvbWFpbi9pbnRlcmlvci5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL1F1aWNrc2FuZC1Cb2xkLmZvbnQuc3ZnIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWxpZGF0b3IvbGliL3V0aWwvYXNzZXJ0U3RyaW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbi9hcnJvdy5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW5wdXQvZXhwYW5kLW1vcmUuc3ZnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlL21haW4vbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Ryb3AtZG93bi9kcm9wLWRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaGVhZGVyL3VzZXIuc3ZnIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dG1hc2svZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21haW4tbWVudS9tYWluLW1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2dsb2JhbC93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvYXJyb3ctYmFjay5zdmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2suZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9kaXN0L2lucHV0bWFzay9kZXBlbmRlbmN5TGlicy9pbnB1dG1hc2suZGVwZW5kZW5jeUxpYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5wdXRtYXNrL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5kYXRlLmV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0bWFzay9kaXN0L2lucHV0bWFzay9pbnB1dG1hc2subnVtZXJpYy5leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS9pbmRleC5zY3NzPzc4MDciLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtUmVndWxhci53b2ZmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIudHRmIiwid2VicGFjazovLy8uL3NyYy9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIuZm9udC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZvbnRzL01vbnRzZXJyYXQtQm9sZC53b2ZmIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsIl9pIiwicHVzaCIsImRlZmF1bHQiLCJzdHIiLCJvcHRpb25zIiwiX2Fzc2VydFN0cmluZyIsIm5vX3N5bWJvbHMiLCJudW1lcmljTm9TeW1ib2xzIiwidGVzdCIsIm51bWVyaWMiLCJvYmoiLCJyZXF1aXJlIiwibG9jYWxzIiwiX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyIsIl90eXBlb2YiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJTdHJpbmciLCJpbnZhbGlkVHlwZSIsIlR5cGVFcnJvciIsIm1vbnRoUnVzVHJhbnNsYXRlIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCJnZXRIdG1sRWxlbWVudCIsInRhZ05hbWUiLCJjbGFzc05hbWUiLCJ0ZXh0IiwiZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwiZ2V0VHdvRGlnaXROdW1iZXJTdHJpbmciLCJudW1iZXIiLCJEYXRlUGlja2VyIiwiZG9tSW5mbyIsImRhdGUiLCJnZXRNb250aCIsImN1cnJlbnREYXRlIiwiZmlyc3REYXRlIiwic2Vjb25kRGF0ZSIsImZpcnN0RGF5IiwiZ2V0RGF0ZSIsImZpcnN0TW9udGgiLCJmaXJzdFllYXIiLCJnZXRGdWxsWWVhciIsInNlY29uZERheSIsInNlY29uZE1vbnRoIiwic2Vjb25kWWVhciIsInRleHREYXRlIiwic3BsaXQiLCJldmVyeSIsImlzTnVtZXJpYyIsImNhbGVuZGFyIiwicGFyZW50Tm9kZSIsInF1ZXJ5U2VsZWN0b3IiLCJjb250YWlucyIsImJvZHkiLCJhZGRFdmVudExpc3RlbmVyIiwib25DbGlja1Nob3dDYWxlbmRhciIsIm9uRXNjVW5zaG93Q2FsZW5kYXIiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5wdXREYXRlIiwiYXJyaXZhbElucHV0IiwiYXJyaXZhbElucHV0RGF0ZSIsImdldENvbnZlcnRlRGF0ZUJ5VXNlcklucHV0IiwiZGF0ZU1vcmVUaGlzRGF0ZSIsImNvbXBhaXJlRGF0ZSIsIkRhdGUiLCJzaG93Q2FsZW5kYXIiLCJvbklucHV0RGF0ZUFycml2YWwiLCJhcnJpdmFsRGF0ZSIsInVwZGF0ZUN1cnJlbnREYXRlIiwib25JbnB1dERhdGVEZXBhcnR1cmUiLCJkZXBhcnR1cmVEYXRlIiwiZGF0ZVBpY2tlciIsInNldFRpbWVvdXQiLCJjZWxscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhcnJpdmFsQXJpYURhdGUiLCJnZXRBcmlhRGF0ZUJ5RGF0ZSIsImRlcGFydHVyZUFyaWFEYXRlIiwiaXNEb3VibGVTZWxlY3QiLCJmb3JFYWNoIiwiY2VsbCIsImlzQ2VsbFN0YXJ0IiwiZ2V0QXR0cmlidXRlIiwiaXNDZWxsRW5kIiwiY2VsbERhdGUiLCJpc0NlbGxEYXRlTW9yZVRoYW5BcnJpdmFsRGF0ZSIsImlzQ2VsbERhdGVMZXNzVGhhbkRlcGFydHVyZURhdGUiLCJpc0NlbGxTZWxlY3QiLCJpc0NlbGxTZWxlY3RTcGFjZSIsImlzQ2VsbFN0YXJ0U2VsZWN0IiwiaXNDZWxsRW5kU2VsZWN0IiwiZXZ0IiwiaXNJbnB1dENsaWNrIiwidGFyZ2V0IiwiZGVwYXJ0dXJlSW5wdXQiLCJpc0NhbGVuZGFyQ2xpY2siLCJ1bnNob3dDYWxlbmRhciIsImtleUNvZGUiLCJibHVyIiwiaGFzRGF0YUZ1bGwiLCJzaG93QXJyaXZhbE1vbnRoQ2FsZW5kYXIiLCJzaG93RGVwYXJ0dXJlTW9udGhDYWxlbmRhciIsInBpY2tEYXRlIiwiY29udmVydGVQaWNrRGF0ZSIsImFyaWFEYXRlIiwicGlja0NlbGwiLCJnZXRDZWxsQnlBcmlhRGF0ZSIsImlzQXJyaXZhbERhdGVNb3JlIiwic2hvd0Vycm9yQW5pbWF0aW9uIiwiY2xlYXJTZWxlY3RDZWxsIiwiaXNBcnJpdmFsQ2VsbCIsInRvRGF0ZVN0cmluZyIsImlzQXJyRGF0ZUxlc3NEZXBEYXRlIiwib25TdGFydFNlbGVjdFJhbmdlRGF0ZSIsInBhaW50aW5nU2VsZWN0Q2VsbCIsIm9uQ2xlYXJTZWxlY3RSYW5nZURhdGUiLCJpc0VuZFNlbGVjdCIsImlzU3RhcnRTZWxlY3QiLCJpbnB1dEFycml2YWxEYXRlIiwiaXNBcnJpdmFsRGF0ZUZ1bGwiLCJpc1BpY2tEYXRlRnVsbCIsImZvY3VzIiwiZGVwYXJ0dXJlQ2VsbCIsIm9uRW5kU2VsZWN0UmFuZ2VEYXRlIiwic3RhcnREYXRlIiwiYXJyaXZhbENlbGwiLCJkYXRlRW5kIiwicHJldmVudERlZmF1bHQiLCJ0b0xvd2VyQ2FzZSIsInRkIiwic2VsZWN0RGF0ZSIsInNlbGVjdERheSIsInNlbGVjdE1vbnRoIiwic2VsZWN0WWVhciIsInNlbGVjdERhdGVUZXh0IiwiaXNDZWxsRG91YmxlU2VsZWN0IiwiYXJpYURheSIsImFyaWFNb250aCIsImFyaWFZZWFyIiwidXNlckRhdGUiLCJzcGxpdFVzZXJEYXRlIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwiY3VycmVudFllYXIiLCJjdXJyZW50TW9udGgiLCJsYXN0RGF5Q3VycmVudE1vbnRoIiwibGFzdFdlZWtEYXlQcmV2TW9udGgiLCJnZXREYXkiLCJudW1iZXJSb3ciLCJ2aWV3TW9udGgiLCJudW1iZXJEYXkiLCJ0YWJsZUZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vd0RhdGUiLCJsYXN0RGF5UHJldk1vbnRoIiwiZ2V0TnVtYmVyUm93IiwidGFibGVUciIsImoiLCJ2aWV3RGF0ZSIsInRhYmxlVGQiLCJpc05vd0RhdGUiLCJoYXNDdXJyZW50TW9udGgiLCJ2aWV3TW9udGhBdHIiLCJ2aWV3RGF0ZUF0ciIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiZGF0ZVBpY2tlckh0bWxTZWN0aW9uIiwiZGF0ZVBpY2tlckh0bWxXcmFwIiwiZGF0ZVBpY2tlckh0bWxDb250cm9sIiwiZ2V0Q2FsZW5kYXJUb3BDb250cm9sIiwiZGF0ZVBpY2tlckh0bWxUYWJsZSIsImdldENhbGVuZGFyVGFibGUiLCJkYXRlUGlja2VySHRtbEJvdENvbnRyb2wiLCJnZXRDYWxlbmRhckJvdENvbnRyb2wiLCJkYXRlUGlja2VySHRtbFNsaWRlckJ0blByZXYiLCJ0eXBlIiwicHJldk1vbnRoRGF0ZSIsImRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuTmV4dCIsIm1vbnRoTmFtZSIsInllYXJOYW1lIiwiZGF0ZVBpY2tlckh0bWxUaXRsZSIsImNhbGVuZGFyVGFibGUiLCJ0SGVhZCIsInRCb2R5IiwidGFibGVUckhlYWQiLCJ0aCIsInRhYmxlRGF0ZSIsImdldENhbGVuZGFyVGFibGVEYXRlIiwib25TZWxlY3REYXRlIiwiaXNBY2NlbnQiLCJjbGlja0hhbmRsZXIiLCJvbkZ1bGxDbGVhckNhbGVuZGFyIiwiYnRuIiwidXBkYXRlQ2FsZW5kYXIiLCJ1cGRhdGVDYWxlbmRhclRpdGxlIiwidXBkYXRlQ2FsZW5kYXJUYWJsZSIsInRpdGxlIiwiY2FsZW5kYXJUYWJsZUJvZHkiLCJyZW1vdmVDaGlsZCIsImdldENhbGVuZGFyIiwicGFyZW50Tm9kZUlkIiwiY29uc29sZSIsImVycm9yIiwiYXJyaXZhbElucHV0SWQiLCJJbnB1dG1hc2siLCJtYXNrIiwicGxhY2Vob2xkZXIiLCJvbkZvY3VzQXJyaXZhbElucHV0IiwiZGVwYXJ0dXJlSW5wdXRJZCIsIm9uRm9jdXNEZXBhcnR1cmVJbnB1dCIsImFycml2YWxTcGxpdEJ0bklkIiwiYXJyaXZhbFNwbGl0QnRuIiwiZGVwYXJ0dXJlU3BsaXRCdG5JZCIsImRlcGFydHVyZVNwbGl0QnRuIiwicmVuZGVyQ2FsZW5kYXIiLCJkcm9wRG93bk9wdGlvbnMiLCJjb250YWluZXIiLCJjb3VudEVsZW1lbnRzIiwiY291bnRHcm91cE5hbWUiLCJjb3VudEdyb3VwVmlldyIsImd1ZXN0IiwiY291bnRlciIsInZpZXdzIiwiY2hpbGQiLCJEcm9wRG93biIsImluaXQiLCJ1cmwiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImRlY2xPZk51bSIsInRpdGxlcyIsInNvbWUiLCJzdGFydFZhbHVlIiwiaW5kZXgiLCJtaW4iLCJtYXgiLCJtaW5WYWx1ZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImRyb3BEb3duUGFyZW50Iiwid2luZG93Iiwib25DbGlja0hpZGUiLCJvblByZXNzSGlkZSIsImlzUGluU2hvdyIsImhpZGUiLCJkaXNjYXJkQ291bnRlciIsImRpc2NhcmRWaWV3Q291bnRlciIsImtleXMiLCJ3b3JkT2ZOdW0iLCJjdXJyZW50Q291bnRlckdyb3VwIiwiY3VycmVudENvdW50ZXIiLCJjdXJyZW50V29yZCIsInNwbGl0V29yZE9mTnVtIiwidHJpbSIsImNvdW50SXRlbSIsImNvdW50SXRlbU5hbWUiLCJjb3VudGVyTWVudSIsImNvdW50SXRlbU1pbnVzIiwiY291bnRJdGVtVmlldyIsImNvdW50SXRlbVBsdXMiLCJncm91cFZpZXciLCJyZW5kZXJWaWV3Q291bnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJtb2RpZmllZENvdW50RWxlbWVudHMiLCJnZXRNb2RpZmllZENvdW50RWxlbWVudHMiLCJkcm9wRG93blBhcmVudFdyYXAiLCJjb3VudExpc3QiLCJkcm9wRG93bkNvbnRyb2wiLCJjbGVhckJ0biIsIm9uQ2xpY2tDbGVhciIsImFjY2VwdEJ0biIsImNvdW50TGlzdEZyYWdtZW50IiwiZ2V0Q291bnRJdGVtIiwiaXNIaWRlQ29udHJvbCIsImhhc0hhdmVTdGFydFZhbHVlIiwicmVuZGVyU3RhcnRDb3VudCIsInNob3ciLCJpbnB1dFZpZXdzIiwiZGVmaW5lIiwiJCIsInVuZGVmaW5lZCIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaWUiLCJpbmRleE9mIiwibW9iaWxlIiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiaWVtb2JpbGUiLCJpcGhvbmUiLCJhbGlhcyIsImludGVybmFsIiwiZWwiLCJldmVudHMiLCJtYXNrc2V0IiwicmVmcmVzaFZhbHVlIiwiaXNQbGFpbk9iamVjdCIsIm9wdHMiLCJleHRlbmQiLCJkZWZhdWx0cyIsIm5vTWFza3NDYWNoZSIsImRlZmluaXRpb25zIiwidXNlck9wdGlvbnMiLCJpc1JUTCIsIm51bWVyaWNJbnB1dCIsInJlc29sdmVBbGlhcyIsImFsaWFzU3RyIiwiYWxpYXNEZWZpbml0aW9uIiwiYWxpYXNlcyIsImdlbmVyYXRlTWFza1NldCIsIm5vY2FjaGUiLCJnZW5lcmF0ZU1hc2siLCJtZXRhZGF0YSIsInJlZ2V4TWFzayIsInJlZ2V4IiwiZ3JlZWR5IiwicmVwZWF0IiwicmVwZWF0U3RhcnQiLCJncm91cG1hcmtlciIsInF1YW50aWZpZXJtYXJrZXIiLCJtYXNrc2V0RGVmaW5pdGlvbiIsIm1hc2tkZWZLZXkiLCJyZXZlcnNlIiwibWFza3NDYWNoZSIsIm1hc2tUb2tlbiIsImFuYWx5c2VNYXNrIiwidmFsaWRQb3NpdGlvbnMiLCJfYnVmZmVyIiwiYnVmZmVyIiwidGVzdHMiLCJleGNsdWRlcyIsIm1hc2tMZW5ndGgiLCJqaXRPZmZzZXQiLCJpc0Z1bmN0aW9uIiwiaXNBcnJheSIsImtlZXBTdGF0aWMiLCJjaGFyQXQiLCJhbHRNYXNrIiwiZWFjaCIsIm5keCIsIm1zayIsImFsdGVybmF0b3JtYXJrZXIiLCJwb3AiLCJldmVudE5hbWUiLCJldk5hbWUiLCJpc1N1cHBvcnRlZCIsIm1hc2tTY29wZSIsImFjdGlvbk9iaiIsInVuZG9WYWx1ZSIsIiRlbCIsIm1heExlbmd0aCIsImNvbG9yTWFzayIsIm9yaWdpbmFsUGxhY2Vob2xkZXIiLCJpbnB1dG1hc2siLCJza2lwS2V5UHJlc3NFdmVudCIsInNraXBJbnB1dEV2ZW50IiwiaWdub3JhYmxlIiwibW91c2VFbnRlciIsImdldE1hc2tUZW1wbGF0ZSIsImJhc2VPbklucHV0IiwibWluaW1hbFBvcyIsImluY2x1ZGVNb2RlIiwibm9KaXQiLCJjbGVhck9wdGlvbmFsVGFpbCIsIm5keEludGx6ciIsInRlc3RQb3MiLCJtYXNrVGVtcGxhdGUiLCJwb3MiLCJnZXRMYXN0VmFsaWRQb3NpdGlvbiIsImdldE1hc2tTZXQiLCJtYXRjaCIsIm9wdGlvbmFsaXR5IiwiZ2VuZXJhdGVkSW5wdXQiLCJza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyIiwiZGV0ZXJtaW5lVGVzdFRlbXBsYXRlIiwiZ2V0VGVzdHMiLCJsb2NhdG9yIiwibmF0aXZlRGVmIiwiZ2V0UGxhY2Vob2xkZXIiLCJnZXRUZXN0VGVtcGxhdGUiLCJqaXRNYXNraW5nIiwiaml0IiwiaXNGaW5pdGUiLCJuZXdCbG9ja01hcmtlciIsImZuIiwiZGVmIiwicmVzZXRNYXNrU2V0Iiwic29mdCIsImNsb3Nlc3RUbyIsInN0cmljdCIsImJlZm9yZSIsImFmdGVyIiwidmFsaWRzIiwicG9zTmR4IiwicHNOZHgiLCJwYXJzZUludCIsImdldERlY2lzaW9uVGFrZXIiLCJ0c3QiLCJkZWNpc2lvblRha2VyIiwiYWx0ZXJuYXRpb24iLCJnZXRMb2NhdG9yIiwiYWxpZ24iLCJtbG9jIiwidHN0TG9jYXRvciIsImNsb3Nlc3QiLCJiZXN0TWF0Y2giLCJ0YXJnZXRMb2NhdG9yIiwiZ2V0VGVzdCIsImRpc3RhbmNlIiwiYWJzIiwib3B0aW9uYWxRdWFudGlmaWVyIiwidHN0UHMiLCJwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbiIsInZhbGlkIiwidG5keCIsImxhdGVzdE1hdGNoIiwibWFza1Rva2VucyIsIm5keEluaXRpYWxpemVyIiwibWF0Y2hlcyIsImluc2VydFN0b3AiLCJjYWNoZURlcGVuZGVuY3kiLCJyZXNvbHZlVGVzdEZyb21Ub2tlbiIsImxvb3BOZHgiLCJxdWFudGlmaWVyUmVjdXJzZSIsImhhbmRsZU1hdGNoIiwiaXNGaXJzdE1hdGNoIiwidG9rZW5Hcm91cCIsImZpcnN0TWF0Y2giLCJpbkFycmF5IiwiaXNRdWFudGlmaWVyIiwicmVzb2x2ZU5keEluaXRpYWxpemVyIiwiYWx0ZXJuYXRlTmR4IiwidGFyZ2V0QWx0ZXJuYXRpb24iLCJpbmRleFBvcyIsImxtbnQiLCJuZHhQb3MiLCJiZXN0TWF0Y2hBbHRJbmRleCIsImlzU3Vic2V0T2YiLCJleHBhbmQiLCJwYXR0ZXJuIiwic3RhcnQiLCJlbmQiLCJleHBhbmRlZCIsImNoYXJDb2RlQXQiLCJmcm9tQ2hhckNvZGUiLCJzZXRNZXJnZUxvY2F0b3JzIiwidGFyZ2V0TWF0Y2giLCJhbHRNYXRjaCIsImxvY05keCIsImNkIiwiaXNHcm91cCIsImlzT3B0aW9uYWwiLCJvcHRpb25hbFRva2VuIiwibXRjaCIsImlzQWx0ZXJuYXRvciIsIm1hbHRNYXRjaGVzIiwiYWx0ZXJuYXRlVG9rZW4iLCJtYWx0ZXJuYXRlTWF0Y2hlcyIsImN1cnJlbnRNYXRjaGVzIiwibG9vcE5keENudCIsImFsdEluZGV4Iiwic2hpZnQiLCJhbW5keCIsImN1cnJlbnRQb3MiLCJuZHhJbml0aWFsaXplckNsb25lIiwiYWx0SW5kZXhBcnIiLCJhbHRJbmRleEFyckNsb25lIiwic3BsaWNlIiwidW5NYXRjaGVkQWx0ZXJuYXRpb24iLCJuZHgxIiwiZHJvcE1hdGNoIiwibmR4MiIsImFsdE1hdGNoMiIsInF0IiwicW5keCIsImlzTmFOIiwicXVhbnRpZmllciIsInByZXZpb3VzUG9zIiwibWVyZ2VMb2NhdG9ycyIsIm10bmR4IiwiY2FzaW5nIiwiZ2V0QnVmZmVyVGVtcGxhdGUiLCJnZXRCdWZmZXIiLCJub0NhY2hlIiwicmVmcmVzaEZyb21CdWZmZXIiLCJ2YWxSZXN1bHQiLCJpc1ZhbGlkIiwiY2FyZXQiLCJlbGVtIiwidG9VcHBlckNhc2UiLCJwb3NCZWZvcmUiLCJTUEFDRSIsImFyZ3MiLCJBcnJheSIsImFyZ3VtZW50cyIsImFwcGx5IiwiY2hlY2tBbHRlcm5hdGlvbk1hdGNoIiwiYWx0QXJyMSIsImFsdEFycjIiLCJuYSIsIm5hTmR4IiwiYWx0QXJyQyIsImlzTWF0Y2giLCJuYUFyciIsImFsbmR4IiwiYWx0ZXJuYXRlIiwiZnJvbVNldFZhbGlkIiwickFsdFBvcyIsImxhc3RBbHQiLCJhbHRQb3MiLCJwcmV2QWx0UG9zIiwidmFsaWRQb3MiLCJkZWNpc2lvblBvcyIsInZhbGlkUHNDbG9uZSIsImlzVmFsaWRSc2x0IiwibEFsdFBvcyIsInZhbGlkSW5wdXRzQ2xvbmUiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3MiLCJwb3NPZmZzZXQiLCJ2YWxpZElucHV0cyIsInRhcmdldEx2cCIsImZyb21BbHRlcm5hdGUiLCJ2YWxpZGF0ZU9ubHkiLCJpc1NlbGVjdGlvbiIsInBvc09iaiIsImJlZ2luIiwibWFza1BvcyIsIl9pc1ZhbGlkIiwicG9zaXRpb24iLCJyc2x0IiwidmFsaWRhdGVkUG9zIiwic29ydCIsImEiLCJiIiwicmV2YWxpZGF0ZU1hc2siLCJpbnNlcnQiLCJyZXN1bHQiLCJwb3NpdGlvbnNDbG9uZSIsInByZVZhbGlkYXRpb24iLCJ0cmFja2JhY2tQb3NpdGlvbnMiLCJjdXJyZW50UG9zVmFsaWQiLCJpbnNlcnRNb2RlIiwic2Vla05leHQiLCJpc01hc2siLCJuUG9zIiwic25Qb3MiLCJpc0NvbXBsZXRlIiwicG9zdFZhbGlkYXRpb24iLCJwb3N0UmVzdWx0IiwicmVmcmVzaCIsIm9yaWdpbmFsUG9zIiwibmV3UG9zIiwiZmlsbE9ubHkiLCJwcyIsImN2cElucHV0IiwidmFsaWRUZXN0IiwiSXNFbmNsb3NlZFN0YXRpYyIsInNlbGVjdGlvbiIsInBvc01hdGNoIiwicmFkaXhQb2ludCIsInByZXZNYXRjaCIsIm5leHRNYXRjaCIsImx2cCIsImlzTmVnYXRpdmUiLCJuZWVkc1ZhbGlkYXRpb24iLCJzaGlmdFBvc2l0aW9ucyIsIm5ld0Jsb2NrIiwic2Vla1ByZXZpb3VzIiwid3JpdGVCdWZmZXIiLCJjYXJldFBvcyIsImV2ZW50IiwidHJpZ2dlckV2ZW50cyIsIm9uQmVmb3JlV3JpdGUiLCJfdmFsdWVTZXQiLCJyZW5kZXJDb2xvck1hc2siLCIkaW5wdXQiLCJucHRWYWwiLCJfdmFsdWVHZXQiLCJ0cmlnZ2VyIiwicmV0dXJuUEwiLCJwcmV2VGVzdCIsInN0YXRpY0FsdGVybmF0aW9ucyIsIkhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyIiwibnB0IiwibnB0VmFsdWUiLCJ2YWx1ZUJ1ZmZlciIsIkV2ZW50UnVsZXIiLCJvbiIsImV2ZW50SGFuZGxlciIsImV2IiwiZSIsInRoYXQiLCJub2RlTmFtZSIsImltT3B0cyIsIm9mZiIsImRpc2FibGVkIiwicmVhZE9ubHkiLCJjdHJsS2V5IiwidGFiVGhyb3VnaCIsIlRBQiIsInJldHVyblZhbCIsInN0b3BQcm9wYWdhdGlvbiIsImZvcm0iLCJldkFyciIsIkV2ZW50SGFuZGxlcnMiLCJrZXlkb3duRXZlbnQiLCJrIiwiQkFDS1NQQUNFIiwiREVMRVRFIiwiQkFDS1NQQUNFX1NBRkFSSSIsIlgiLCJoYW5kbGVSZW1vdmUiLCJFTkQiLCJQQUdFX0RPV04iLCJzaGlmdEtleSIsIkhPTUUiLCJQQUdFX1VQIiwidW5kb09uRXNjYXBlIiwiRVNDQVBFIiwiYWx0S2V5IiwiY2hlY2tWYWwiLCJJTlNFUlQiLCJvbktleURvd24iLCJpZ25vcmFibGVzIiwia2V5cHJlc3NFdmVudCIsImNoZWNrdmFsIiwid3JpdGVPdXQiLCJ3aGljaCIsImNoYXJDb2RlIiwibWV0YUtleSIsIkVOVEVSIiwiZm9yd2FyZFBvc2l0aW9uIiwib2Zmc2V0IiwiX3JhZGl4RGFuY2UiLCJ3cml0ZU91dEJ1ZmZlciIsIm9uS2V5VmFsaWRhdGlvbiIsInBhc3RlRXZlbnQiLCJ0ZW1wVmFsdWUiLCJvcmlnaW5hbEV2ZW50IiwiaW5wdXRWYWx1ZSIsInZhbHVlQmVmb3JlQ2FyZXQiLCJzdWJzdHIiLCJ2YWx1ZUFmdGVyQ2FyZXQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsInBhc3RlVmFsdWUiLCJvbkJlZm9yZVBhc3RlIiwiaW5wdXRGYWxsQmFja0V2ZW50IiwiaW5wdXRDaGFyIiwiaXYiLCJpZU1vYmlsZUhhbmRsZXIiLCJyYWRpeFBvaW50SGFuZGxlciIsImZyb250UGFydCIsImJhY2tQYXJ0IiwiZnJvbnRCdWZmZXJQYXJ0IiwiYmFja0J1ZmZlclBhcnQiLCJlbnRyaWVzIiwiaXNFbnRyeSIsImZwbCIsImVudHJ5Iiwia2V5cHJlc3MiLCJFdmVudCIsImtleWRvd24iLCJiZWZvcmVJbnB1dEV2ZW50IiwiY2FuY2VsYWJsZSIsImlucHV0VHlwZSIsInNldFZhbHVlRXZlbnQiLCJkZXRhaWwiLCJvbkJlZm9yZU1hc2siLCJjbGVhck1hc2tPbkxvc3RGb2N1cyIsImNsZWFySW5jb21wbGV0ZSIsImZvY3VzRXZlbnQiLCJzaG93TWFza09uRm9jdXMiLCJwb3NpdGlvbkNhcmV0T25UYWIiLCJjbGlja0V2ZW50IiwibW91c2VsZWF2ZUV2ZW50IiwiYWN0aXZlRWxlbWVudCIsInRhYmJlZCIsInNlbGVjdGVkQ2FyZXQiLCJwb3NpdGlvbkNhcmV0T25DbGljayIsImNsaWNrUG9zIiwidnBzIiwicmFkaXhQb3MiLCJ2cCIsImRvUmFkaXhGb2N1cyIsImNsaWNrUG9zaXRpb24iLCJsdmNsaWNrUG9zaXRpb24iLCJsYXN0UG9zaXRpb24iLCJ0dCIsImN1dEV2ZW50IiwiY2xpcERhdGEiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJibHVyRXZlbnQiLCJtb3VzZWVudGVyRXZlbnQiLCJzaG93TWFza09uSG92ZXIiLCJzdWJtaXRFdmVudCIsInJlbW92ZU1hc2tPblN1Ym1pdCIsInVubWFza2VkdmFsdWUiLCJyZXNldEV2ZW50IiwibnB0dmwiLCJpbml0aWF0aW5nRXZlbnQiLCJjaGFyQ29kZXMiLCJpbml0aWFsTmR4IiwiYXV0b1VubWFzayIsInN0YXRpY0lucHV0IiwiUmVnRXhwIiwiZXNjYXBlUmVnZXgiLCJpc1RlbXBsYXRlTWF0Y2giLCJ1bVZhbHVlIiwicG5keCIsInVubWFza2VkVmFsdWUiLCJvblVuTWFzayIsImJ1ZmZlclZhbHVlIiwibm90cmFuc2xhdGUiLCJ0cmFuc2xhdGVQb3NpdGlvbiIsInJhbmdlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJnZXRSYW5nZUF0IiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImNyZWF0ZVJhbmdlIiwiZHVwbGljYXRlIiwibW92ZVN0YXJ0Iiwic2Nyb2xsQ2FsYyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJmb250U2l6ZSIsInNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsImZpcnN0Q2hpbGQiLCJ0ZXh0Tm9kZSIsImNyZWF0ZVRleHROb2RlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb2xsYXBzZSIsInNlbCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwibW92ZUVuZCIsInNlbGVjdCIsImRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uIiwicmV0dXJuRGVmaW5pdGlvbiIsImJsIiwicG9zaXRpb25zIiwibHZUZXN0IiwibHZUZXN0QWx0IiwidGVtcGxhdGUiLCJjb21wbGV0ZSIsImxycCIsImFtbCIsImZyb21Jc1ZhbGlkIiwicGVuZCIsImdyb3VwU2VwYXJhdG9yIiwiaW5pdGlhbGl6ZUNvbG9yTWFzayIsImNvbXB1dGVkU3R5bGUiLCJzdHlsZSIsIndpZHRoIiwidGV4dEFsaWduIiwiaW5zZXJ0QmVmb3JlIiwibGVmdCIsIm9mZnNldExlZnQiLCJjbGllbnR4IiwidGV4dFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJoZWlnaHQiLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsIml0bCIsImlucHV0VGV4dCIsInByZXZpb3VzV2lkdGgiLCJpbm5lckhUTUwiLCJvZmZzZXRXaWR0aCIsIm9mZnNldDEiLCJvZmZzZXQyIiwiZmluZENhcmV0UG9zIiwiY2xpZW50WCIsImNsZWFyIiwiaXNTdGF0aWMiLCJzZXRFbnRyeSIsIm10bCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicG9zaXRpb25Db2xvck1hc2siLCJhY3Rpb24iLCJlbGVtZW50VHlwZSIsInN1cHBvcnRzSW5wdXRUeXBlIiwiaXNDb250ZW50RWRpdGFibGUiLCJ2YWx1ZUdldCIsInZhbHVlU2V0IiwibnVsbGFibGUiLCJzZXR0ZXIiLCJfX3ZhbHVlR2V0Iiwibm9WYWx1ZVBhdGNoaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJ2YWx1ZVByb3BlcnR5Iiwic2V0IiwiY29uZmlndXJhYmxlIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiX19kZWZpbmVTZXR0ZXJfXyIsIl9fdmFsdWVTZXQiLCJvdmVycnVsZVJUTCIsInZhbEhvb2tzIiwiaW5wdXRtYXNrcGF0Y2giLCJ2YWxob29rR2V0IiwidmFsaG9va1NldCIsIiRlbGVtIiwicGF0Y2hWYWxob29rIiwiaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2siLCJwYXRjaFZhbHVlUHJvcGVydHkiLCJpc0VsZW1lbnRUeXBlU3VwcG9ydGVkIiwiaW5wdXRtb2RlIiwiZGlzYWJsZVByZWRpY3RpdmVUZXh0IiwiYXV0b2NvcnJlY3QiLCJvbmNvbXBsZXRlIiwib25pbmNvbXBsZXRlIiwib25jbGVhcmVkIiwiaW5wdXRFdmVudE9ubHkiLCJpbml0aWFsVmFsdWUiLCJybCIsImxtaWIiLCJtYXNrVGFyZ2V0IiwibXRkdCIsImRhdGFBdHRyaWJ1dGUiLCJvcHRpb25hbG1hcmtlciIsImVzY2FwZUNoYXIiLCJub29wIiwicGFzdGVkVmFsdWUiLCJyaWdodEFsaWduIiwic3RhdGljRGVmaW5pdGlvblN5bWJvbCIsImltcG9ydERhdGFBdHRyaWJ1dGVzIiwidmFsaWRhdG9yIiwiZGVmaW5pdGlvblN5bWJvbCIsImVsZW1zIiwiZ2V0RWxlbWVudEJ5SWQiLCJzY29wZWRPcHRzIiwib3B0aW9uIiwiZGF0YW9wdGlvbnMiLCJvcHRpb25EYXRhIiwiYXR0ck9wdGlvbnMiLCJpbXBvcnRPcHRpb24iLCJwYXJzZSIsImRpciIsImltcG9ydEF0dHJpYnV0ZU9wdGlvbnMiLCJub3JlbWFzayIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJmb3JtYXQiLCJzZXRWYWx1ZSIsIm9wZW5pbmdUb2tlbiIsImN1cnJlbnRPcGVuaW5nVG9rZW4iLCJhbHRlcm5hdG9yIiwibGFzdE1hdGNoIiwidG9rZW5pemVyIiwicmVnZXhUb2tlbml6ZXIiLCJlc2NhcGVkIiwiY3VycmVudFRva2VuIiwiTWFza1Rva2VuIiwib3BlbmVuaW5ncyIsIm9wZW5Hcm91cCIsImFsdGVybmF0b3JHcm91cCIsImluc2VydFRlc3REZWZpbml0aW9uIiwibXRva2VuIiwibWFza2RlZiIsImRlZmF1bHRDYXNlIiwibW5keCIsImdyb3VwaWZ5IiwiZ3JvdXBUb2tlbiIsImV4ZWMiLCJtcWoiLCJtcSIsIm1xMCIsIm1xMSIsInRtcE1hdGNoIiwiZ3JvdXBRdWFudGlmaWVyIiwic3ViVG9rZW4iLCJ2ZXJpZnlHcm91cE1hcmtlciIsInRva2VuIiwibmV4dFRva2VuIiwicmV2ZXJzZVRva2VucyIsImludE1hdGNoIiwic3QiLCJleHRlbmREZWZhdWx0cyIsImV4dGVuZERlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4dGVuZEFsaWFzZXMiLCJ1bm1hc2siLCJET1dOIiwiTEVGVCIsIlJJR0hUIiwiVVAiLCJDT05UUk9MIiwiZGVwZW5kZW5jeUxpYiIsImJ1cmdlckJ1dHRvbiIsInByb2ZpbGVCdXR0b24iLCJtYWluTWVudSIsImF1dGhMaXN0IiwiaXNQcm9maWxlQWN0aXZlIiwidG9nZ2xlIiwiZXZhbCIsIkEiLCJjc3N1bml0IiwiaXAiLCJjaHJzIiwibWFza2VkVmFsdWUiLCJlbWFpbCIsIm1hYyIsInZpbiIsIlYiLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiQm9vbGVhbiIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImxpc3RUb1N0eWxlcyIsInN0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJwYXJ0cyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJyZWZzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJFcnJvciIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImFwcGx5VG9UYWciLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJfZG9tU3R5bGUiLCJpc1dpbmRvdyIsImlzVmFsaWRFbGVtZW50IiwiRWxlbWVudCIsIkRlcGVuZGVuY3lMaWIiLCJldmVudFJlZ2lzdHJ5IiwiaGFuZGxlciIsImFkZEV2ZW50IiwibmFtZXNwYWNlIiwiYXR0YWNoRXZlbnQiLCJfZXZlbnRzIiwiZW5keCIsIm5zRXZlbnQiLCJyZW1vdmVFdmVudCIsImRldGFjaEV2ZW50Iiwibm1zcCIsInJlc29sdmVOYW1lc3BhY2UiLCJobmR4IiwiaG5kTCIsImV2dHMiLCJldk5keCIsIm9mZkV2ZW50cyIsIm9mZkV2ZW50c0wiLCJldm50IiwicGFyYW1zIiwiYnViYmxlcyIsImNyZWF0ZUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJldmVudFR5cGUiLCJmaXJlRXZlbnQiLCJhcnIiLCJsZW4iLCJub2RlVHlwZSIsInNyYyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImNhbGxiYWNrIiwibHR5cGUiLCJpc0FycmF5bGlrZSIsIm93bmVyIiwiX19kYXRhIiwiZm9ybWF0Q29kZSIsInNldERhdGUiLCJkZCIsInBhZCIsImRkZCIsImRkZGQiLCJzZXRNb250aCIsIm1tIiwibW1tIiwibW1tbSIsInl5Iiwic2V0RnVsbFllYXIiLCJ5eXl5IiwiaCIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJoaCIsImhoaCIsIkgiLCJISCIsIkhISCIsIk0iLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsIk1NIiwic3MiLCJzZXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsInNldE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIkwiLCJUIiwiVFQiLCJaIiwiUyIsImZvcm1hdEFsaWFzIiwiaXNvRGF0ZSIsImlzb1RpbWUiLCJpc29EYXRlVGltZSIsImlzb1V0Y0RhdGVUaW1lIiwiZ2V0VG9rZW5pemVyIiwidG9rZW5zIiwiZGF0ZU9ialZhbHVlIiwicmF3IiwidmFsIiwibWFza1N0cmluZyIsInRhcmdldFByb3AiLCJkYXRlT3BlcmF0aW9uIiwiZGF0ZU9iaiIsImV4dGVuZFByb3BlcnR5IiwiY29ycmVjdGVkVmFsdWUiLCJlbnRlcmVkUGFydCIsImRhdGV0aW1lIiwiaTE4biIsIm9yZGluYWxTdWZmaXgiLCJpbnB1dEZvcm1hdCIsImRpc3BsYXlGb3JtYXQiLCJvdXRwdXRGb3JtYXQiLCJkYXlOYW1lcyIsIm1vbnRoTmFtZXMiLCJjdXJyZW50UmVzdWx0IiwiZGF0ZVBhcnRzIiwiZ2V0VGltZSIsInJhd2RheSIsInJhd3llYXIiLCJyYXdtb250aCIsImlzVmFsaWREYXRlIiwicmF3WWVhciIsIm1pblllYXIiLCJpc0RhdGVJblJhbmdlIiwidG9kYXkiLCJnZXRZZWFyIiwiYXV0b0VzY2FwZSIsInR4dCIsImVzY2FwZWRUeHQiLCJpbnRlZ2VyRGlnaXRzIiwiZGlnaXRzIiwiYXV0b0dyb3VwIiwiZ3JvdXBTaXplIiwic2VwcyIsIm1vZCIsImludGVnZXJPcHRpb25hbCIsImRpZ2l0c09wdGlvbmFsIiwiZGVjaW1hbFByb3RlY3QiLCJwcmVmaXgiLCJyYWRpeERlZiIsImRxIiwic3VmZml4IiwiZW5mb3JjZURpZ2l0c09uQmx1ciIsImFsbG93TWludXMiLCJuZWdhdGlvblN5bWJvbCIsImZyb250IiwiYmFjayIsInN0ZXAiLCJ1bm1hc2tBc051bWJlciIsImRvcG9zdCIsImNoYXJBdFBvcyIsInByb2Nlc3NWYWx1ZSIsInJhZGl4UG9zaXRpb24iLCJycGIiLCJhZGRSYWRpeCIsInBvc3RNYXNrIiwicmFkaXhTcGxpdCIsImJ1aWxkUG9zdE1hc2siLCJjYXJkaW5hbGl0eSIsIm5ld0NhcmV0UG9zIiwidW5tYXNrZWQiLCJwYXJzZU1pbk1heE9wdGlvbnMiLCJwYXJzZUZsb2F0IiwiTmFOIiwiTnVtYmVyIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwiaW50ZWdlclBhcnQiLCJlbXB0eUNoZWNrIiwiaW50ZWdlck5QYXJ0IiwicHZSYWRpeFNwbGl0IiwiYnVmZmVyVGVtcGxhdGUiLCJyYWRpeCIsInZhbHVlUGFydHMiLCJkZWNpbWFsUGFydCIsImRpZ2l0c0ZhY3RvciIsInBvdyIsInJvdW5kIiwic3Vic3RyaW5nIiwiYWxpZ25EaWdpdHMiLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsIl9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzVfX18iLCJfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF82X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfN19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzhfX18iLCJfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF85X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMTBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8xMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFy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Z0Msd0JBQTRCQyxFQUFpQyw0QkFBZ0NDLEVBQWlDLDJVQUFrVixNLGtCQzVCeGdIN3RDLEVBQU9ELFFBQVUsSUFBMEIseUMsa0JDQTNDQyxFQUFPRCxRQUFVLElBQTBCLHdDLGtCQ0EzQ0MsRUFBT0QsUUFBVSxJQUEwQix3QyxrQkNBM0NDLEVBQU9ELFFBQVUsSUFBMEIiLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTkyKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwie1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW19pXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCIoXCIuY29uY2F0KGl0ZW1bMl0sIFwiKSBhbmQgKFwiKS5jb25jYXQobWVkaWFRdWVyeSwgXCIpXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTNiMzg3YzkzODgyNjA0NzkyODY3NzM2YWVjZDU2YzgudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMDRkZDU4ZDg0ZWEwOTg3YjNkZDdlMjZlMjNmYWUxOTMuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMDI5NjkzODJjOGY1MWMwMzRiMjIxYjA0M2E0NmU5NGEud29mZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjY3OGIxMmE2YTkzOGMzMmViNWZhODhmMmY0MzljMmRmLnR0ZlwiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjY4NTMxYTkyZTczYjNhMGI2NzRjMGJjZjgwMDFjNzRhLnN2Z1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhNDU1NGEyMWYyZGYyMjA4MzQ1ZTdjMTUzZWE3NzllLndvZmZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4MDljZDhhYjk3YzQ2NWI1N2NiMWE0NGIxNzk1ZjEyYy50dGZcIjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzTnVtZXJpYztcblxudmFyIF9hc3NlcnRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvYXNzZXJ0U3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG51bWVyaWMgPSAvXlsrLV0/KFswLTldKlsuXSk/WzAtOV0rJC87XG52YXIgbnVtZXJpY05vU3ltYm9scyA9IC9eWzAtOV0rJC87XG5cbmZ1bmN0aW9uIGlzTnVtZXJpYyhzdHIsIG9wdGlvbnMpIHtcbiAgKDAsIF9hc3NlcnRTdHJpbmcuZGVmYXVsdCkoc3RyKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm5vX3N5bWJvbHMpIHtcbiAgICByZXR1cm4gbnVtZXJpY05vU3ltYm9scy50ZXN0KHN0cik7XG4gIH1cblxuICByZXR1cm4gbnVtZXJpYy50ZXN0KHN0cik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDsiLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNy0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9oZWFkZXIvdXNlci5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMV9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2J1dHRvbi9hcnJvdy5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMl9fXyA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL2RhdGUtcGlja2VyL2Fycm93LWJhY2suc3ZnXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzNfX18gPSByZXF1aXJlKFwiLi4vLi4vY29tcG9uZW50cy9pbnB1dC9leHBhbmQtbW9yZS5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfNF9fXyA9IHJlcXVpcmUoXCIuL2ludGVyaW9yLmpwZ1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8yX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfM19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzRfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucGFnZS1oZWFkZXJ7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoxMDA7YmFja2dyb3VuZC1jb2xvcjojZmZmOy13ZWJraXQtYm94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KX0ucGFnZS1oZWFkZXJfX3dyYXB7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7cGFkZGluZzoxN3B4IDAgMTVweH0ucGFnZS1oZWFkZXJfX2F1dGh7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tbGVmdDoyMnB4O3BhZGRpbmctYm90dG9tOjFweH0ucGFnZS1oZWFkZXJfX2F1dGgtLWlzLWF1dGh7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjIwcHh9LnBhZ2UtaGVhZGVyX19hdXRoLS1pcy1hdXRoOjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3dpZHRoOjFweDtoZWlnaHQ6MzBweDtiYWNrZ3JvdW5kOiMxZjIwNDE7b3BhY2l0eTowLjE7Y29udGVudDpcXFwiXFxcIn0ucGFnZS1oZWFkZXJfX2F1dGgtbGlzdHtwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowfS5wYWdlLWhlYWRlcl9fYXV0aCAuYnV0dG9ue21hcmdpbi1yaWdodDoyMHB4fS5wYWdlLWhlYWRlcl9fYXV0aCAuYnV0dG9uOm50aC1jaGlsZCgyKXttYXJnaW4tcmlnaHQ6MDtwYWRkaW5nLWxlZnQ6MThweDtsZXR0ZXItc3BhY2luZzowLjNweH0ucGFnZS1oZWFkZXJfX3VzZXItbmFtZXttYXJnaW46MDtjb2xvcjojMWYyMDQxO29wYWNpdHk6MC41fS5wYWdlLWhlYWRlcl9fYXV0aC1wcm9maWxle2Rpc3BsYXk6bm9uZX1AbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KXsucGFnZS1oZWFkZXJfX2F1dGh7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozOy1tcy1mbGV4LW9yZGVyOjI7b3JkZXI6MjttYXJnaW4tbGVmdDphdXRvfS5wYWdlLWhlYWRlcl9fYXV0aC0taXMtYXV0aHttYXJnaW4tcmlnaHQ6MjBweDtwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjIwcHh9LnBhZ2UtaGVhZGVyX19hdXRoLS1pcy1hdXRoOjpiZWZvcmV7bGVmdDphdXRvO3JpZ2h0OjB9LnBhZ2UtaGVhZGVyX19hdXRoPi5idXR0b257ZGlzcGxheTpub25lfS5wYWdlLWhlYWRlcl9fYXV0aC1wcm9maWxle3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjQwcHg7ZGlzcGxheTpibG9jazstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MjRweDtoZWlnaHQ6MjRweDtiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fICsgXCIpIG5vLXJlcGVhdDtib3JkZXI6bm9uZTtjdXJzb3I6cG9pbnRlcjtjb250ZW50OlxcXCJcXFwifS5wYWdlLWhlYWRlcl9fYXV0aC1wcm9maWxlLS1oaWRle2Rpc3BsYXk6bm9uZX0ucGFnZS1oZWFkZXJfX2F1dGgtbGlzdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTVweDtsZWZ0OjUwJTtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMHZ3O3BhZGRpbmc6MDtsaXN0LXN0eWxlOm5vbmU7YmFja2dyb3VuZDojZmZmOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtMTBweCk7dmlzaWJpbGl0eTpoaWRkZW47LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjNzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YWxsIDAuM3MgZWFzZS1pbi1vdXR9LnBhZ2UtaGVhZGVyX19hdXRoLWxpc3QtLWFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAwKTt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxfS5wYWdlLWhlYWRlcl9fYXV0aC1saXN0IC5wYWdlLWhlYWRlcl9fYXV0aC1pdGVte3dpZHRoOjEwMCV9LnBhZ2UtaGVhZGVyX19hdXRoLWxpc3QgLnBhZ2UtaGVhZGVyX19hdXRoLWl0ZW06bGFzdC1jaGlsZHstd2Via2l0LWJveC1zaGFkb3c6MCA0cHggMnB4IC0ycHggcmdiYSgwLDAsMCwwLjIpO2JveC1zaGFkb3c6MCA0cHggMnB4IC0ycHggcmdiYSgwLDAsMCwwLjIpfS5wYWdlLWhlYWRlcl9fYXV0aC1saXN0IGF7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTAwJTtwYWRkaW5nOjIwcHggMDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dmVydGljYWwtYWxpZ246dG9wO2JvcmRlci10b3A6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSl9LnBhZ2UtaGVhZGVyX19hdXRoLWxpc3QgYTpob3Zlcntjb2xvcjojOTk2OWZmfX1AbWVkaWEgKG1heC13aWR0aDogNDI1cHgpey5wYWdlLWhlYWRlcl9fd3JhcHtwYWRkaW5nLXJpZ2h0OjIwcHg7cGFkZGluZy1sZWZ0OjIwcHh9LnBhZ2UtaGVhZGVyX19hdXRoLXByb2ZpbGV7cmlnaHQ6NjBweH19QG1lZGlhIChtYXgtd2lkdGg6IDM4MHB4KXsucGFnZS1oZWFkZXJfX2F1dGgtLWlzLWF1dGh7bWFyZ2luLXJpZ2h0OjEwcHg7cGFkZGluZy1yaWdodDowfS5wYWdlLWhlYWRlcl9fYXV0aC0taXMtYXV0aDo6YmVmb3Jle2Rpc3BsYXk6bm9uZX19LmxvZ297cG9zaXRpb246cmVsYXRpdmU7bWluLXdpZHRoOjEyMHB4O21pbi1oZWlnaHQ6MzhweH0ubG9nby0tYmlne21hcmdpbi10b3A6MzBweDttYXJnaW4tbGVmdDozMHB4fS5sb2dvX19saW5re3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMnB4fS5sb2dvX19saW5rOmhvdmVyIC5sb2dvX19sZXR0ZXJ7ZmlsbDojOTk2OWZmfS5sb2dvX19saW5rOmhvdmVyIC5sb2dvX19sYWJlbC1sZWZ0e2ZpbGw6IzZmY2Y5N30ubG9nb19fbGV0dGVyLC5sb2dvX19sYWJlbC1sZWZ0ey13ZWJraXQtdHJhbnNpdGlvbjpmaWxsIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmZpbGwgMC40cyBlYXNlfS5idXR0b257cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoxMDA7cGFkZGluZzoxMHB4IDIwcHg7Y29sb3I6I2ZmZjtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zaXplOjEycHg7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCIsXFxcIk1vbnRzZXJyYXRcXFwiLHNhbnMtc2VyaWY7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7dGV4dC1kZWNvcmF0aW9uOm5vbmU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCNiYzljZmYpLCB0bygjOGJhNGY5KSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmIDAlLCAjOGJhNGY5IDEwMCUpO2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6MjJweDtjdXJzb3I6cG9pbnRlcn0uYnV0dG9uLS1kaXNhYmxle29wYWNpdHk6MC41O2N1cnNvcjpkZWZhdWx0fS5idXR0b24tLWRpc2FibGU6aG92ZXI6OmJlZm9yZXtkaXNwbGF5Om5vbmV9LmJ1dHRvbjo6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt6LWluZGV4Oi0xMDA7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjOTk2OWZmKSwgdG8oIzViN2VmNikpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KCM5OTY5ZmYsICM1YjdlZjYpO2JvcmRlci1yYWRpdXM6aW5oZXJpdDtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgMC40cyBlYXNlO3RyYW5zaXRpb246b3BhY2l0eSAwLjRzIGVhc2U7Y29udGVudDpcXFwiXFxcIn0uYnV0dG9uOmhvdmVyOjpiZWZvcmV7b3BhY2l0eToxfS5idXR0b24tLWVtcHR5LXN0eWxle3BhZGRpbmc6OHB4IDE4cHg7Y29sb3I6I2JjOWNmZjtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjJweCBzb2xpZCAjYmM5Y2ZmfS5idXR0b24tLWVtcHR5LXN0eWxlOjpiZWZvcmV7ZGlzcGxheTpub25lfS5idXR0b24tLWVtcHR5LXN0eWxlOmhvdmVye2NvbG9yOiM5OTY5ZmY7Ym9yZGVyLWNvbG9yOiM5OTY5ZmY7YmFja2dyb3VuZDojZmZmfS5idXR0b24tLWVtcHR5LWRpc2FibGV7b3BhY2l0eTowLjU7Y3Vyc29yOmRlZmF1bHR9LmJ1dHRvbi0tZW1wdHktZGlzYWJsZTpob3Zlcntjb2xvcjojYmM5Y2ZmICFpbXBvcnRhbnQ7YmFja2dyb3VuZDojZmZmICFpbXBvcnRhbnQ7Ym9yZGVyLWNvbG9yOiNiYzljZmYgIWltcG9ydGFudH0uYnV0dG9uLS1pY29ue3Bvc2l0aW9uOnJlbGF0aXZlfS5idXR0b24tLWljb246OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7cmlnaHQ6MDt3aWR0aDo0NHB4O2hlaWdodDo0NHB4O21hcmdpbi10b3A6LTIycHg7YmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyArIFwiKSBuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIDAuMnMgZWFzZTt0cmFuc2l0aW9uOmJhY2tncm91bmQgMC4ycyBlYXNlO2NvbnRlbnQ6XFxcIlxcXCJ9LmJ1dHRvbi0taWNvbjphY3RpdmU6OmFmdGVye2JhY2tncm91bmQtcG9zaXRpb246MjBweCBjZW50ZXJ9Lm1haW4tbWVudXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tbGVmdDphdXRvfS5tYWluLW1lbnVfX2xpc3QsLm1haW4tbWVudV9fc3ViLW1lbnV7bWFyZ2luOjA7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0ubWFpbi1tZW51X19idXJnZXItaWNvbntwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Om5vbmU7d2lkdGg6MjVweDtoZWlnaHQ6MTZweDtjdXJzb3I6cG9pbnRlcn0ubWFpbi1tZW51X19idXJnZXItaWNvbiBzcGFue3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEwMCU7aGVpZ2h0OjJweDt2ZXJ0aWNhbC1hbGlnbjp0b3A7YmFja2dyb3VuZC1jb2xvcjojMWYyMDQxOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDAuMnMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpvcGFjaXR5IDAuMnMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4zcyBlYXNlLWluLW91dCwgb3BhY2l0eSAwLjJzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQsIG9wYWNpdHkgMC4ycyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4zcyBlYXNlLWluLW91dH0ubWFpbi1tZW51X19idXJnZXItaWNvbiBzcGFuOm50aC1jaGlsZCgyKXt0b3A6N3B4fS5tYWluLW1lbnVfX2J1cmdlci1pY29uIHNwYW46bGFzdC1jaGlsZHt0b3A6MTRweH0ubWFpbi1tZW51X19idXJnZXItaWNvbi0tYWN0aXZlIHNwYW46Zmlyc3QtY2hpbGR7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKSB0cmFuc2xhdGUoN3B4LCAzcHgpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpIHRyYW5zbGF0ZSg3cHgsIDNweCl9Lm1haW4tbWVudV9fYnVyZ2VyLWljb24tLWFjdGl2ZSBzcGFuOm50aC1jaGlsZCgyKXtvcGFjaXR5OjB9Lm1haW4tbWVudV9fYnVyZ2VyLWljb24tLWFjdGl2ZSBzcGFuOmxhc3QtY2hpbGR7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00NWRlZykgdHJhbnNsYXRlKDdweCwgLTNweCk7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpIHRyYW5zbGF0ZSg3cHgsIC0zcHgpfS5tYWluLW1lbnVfX2xpc3R7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Lm1haW4tbWVudV9fc3ViLW1lbnV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjMwcHg7bGVmdDo1MCU7cGFkZGluZzo1cHggMjBweDt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czo1cHg7LXdlYmtpdC1ib3gtc2hhZG93OjAgMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSk7Ym94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIDEwcHgpO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246YWxsIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmFsbCAwLjRzIGVhc2V9Lm1haW4tbWVudV9faXRlbXttYXJnaW4tcmlnaHQ6MjBweH0ubWFpbi1tZW51X19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9Lm1haW4tbWVudV9faXRlbS0tc3ViLW1lbnV7cG9zaXRpb246cmVsYXRpdmV9Lm1haW4tbWVudV9faXRlbS0tc3ViLW1lbnU6aG92ZXI+YXtjb2xvcjojOTk2OWZmO29wYWNpdHk6MX0ubWFpbi1tZW51X19pdGVtLS1zdWItbWVudTpob3Zlcj5hOjphZnRlcntib3JkZXItcmlnaHQtY29sb3I6I2FiODNmZjtib3JkZXItYm90dG9tLWNvbG9yOiNhYjgzZmY7b3BhY2l0eToxfS5tYWluLW1lbnVfX2l0ZW0tLXN1Yi1tZW51OjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTE4cHg7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjIwcHg7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjb250ZW50OlxcXCJcXFwifS5tYWluLW1lbnVfX2l0ZW0tLXN1Yi1tZW51PmF7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1yaWdodDoyNHB4fS5tYWluLW1lbnVfX2l0ZW0tLXN1Yi1tZW51PmE6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7cmlnaHQ6NnB4O3dpZHRoOjdweDtoZWlnaHQ6N3B4O21hcmdpbi10b3A6LTZweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yaWdodDoycHggc29saWQgIzFmMjA0MTtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjMWYyMDQxOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7b3BhY2l0eTowLjU7Y29udGVudDpcXFwiXFxcIn0ubWFpbi1tZW51X19pdGVtLS1zdWItbWVudT5hOmhvdmVyOjphZnRlcntib3JkZXItcmlnaHQtY29sb3I6I2FiODNmZjtib3JkZXItYm90dG9tLWNvbG9yOiNhYjgzZmY7b3BhY2l0eToxfS5tYWluLW1lbnVfX2l0ZW06aG92ZXI+Lm1haW4tbWVudV9fc3ViLW1lbnV7ei1pbmRleDoxMDA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0ubWFpbi1tZW51X19zdWItaXRlbXttYXJnaW4tYm90dG9tOjEwcHh9Lm1haW4tbWVudV9faXRlbSBhLC5tYWluLW1lbnVfX3N1Yi1pdGVtIGF7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjE3cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0ubWFpbi1tZW51X19pdGVtIGE6aG92ZXIsLm1haW4tbWVudV9fc3ViLWl0ZW0gYTpob3Zlcntjb2xvcjojOTk2OWZmfUBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpey5tYWluLW1lbnV7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDo0Oy1tcy1mbGV4LW9yZGVyOjM7b3JkZXI6MzttYXJnaW4tbGVmdDowfS5tYWluLW1lbnUgbmF2e3Bvc2l0aW9uOmFic29sdXRlO3RvcDo2OXB4O2xlZnQ6NTAlO3dpZHRoOjEwMHZ3O2JhY2tncm91bmQ6I2ZmZjstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTEwcHgpO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246YWxsIDAuM3MgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjphbGwgMC4zcyBlYXNlLWluLW91dH0ubWFpbi1tZW51LS1hY3RpdmUgbmF2ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIDApO3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjF9Lm1haW4tbWVudV9fc3ViLW1lbnV7dG9wOjQ1cHh9Lm1haW4tbWVudV9faXRlbXt3aWR0aDoxMDAlfS5tYWluLW1lbnVfX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6YXV0bzstd2Via2l0LWJveC1zaGFkb3c6MCA0cHggMnB4IC0ycHggcmdiYSgwLDAsMCwwLjIpO2JveC1zaGFkb3c6MCA0cHggMnB4IC0ycHggcmdiYSgwLDAsMCwwLjIpfS5tYWluLW1lbnVfX2l0ZW0+YXtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxMDAlO3BhZGRpbmc6MjBweCAwO3RleHQtYWxpZ246Y2VudGVyO3ZlcnRpY2FsLWFsaWduOnRvcDtib3JkZXItdG9wOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpfS5tYWluLW1lbnVfX2xpc3R7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Lm1haW4tbWVudV9fYnVyZ2VyLWljb257ZGlzcGxheTpibG9ja30ubWFpbi1tZW51X19pdGVtLS1zdWItbWVudTo6YWZ0ZXJ7ZGlzcGxheTpub25lfS5tYWluLW1lbnVfX2l0ZW0tLXN1Yi1tZW51PmE6OmFmdGVye3RvcDo0OC41JTtyaWdodDphdXRvO21hcmdpbi1sZWZ0OjEwcHh9fS5kYXRlLXdpc2hlc3t3aWR0aDozODBweDtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXJhZGl1czo0cHg7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCAyNXB4IHJnYmEoMCwwLDAsMC4yKTtib3gtc2hhZG93OjAgMCAyNXB4IHJnYmEoMCwwLDAsMC4yKX0uZGF0ZS13aXNoZXMgZmllbGRzZXR7bWFyZ2luOjA7cGFkZGluZzowO2JvcmRlcjowfS5kYXRlLXdpc2hlcyAuaW5wdXQtZ3JvdXBfX2xhYmVse2NvbG9yOiMxZjIwNDE7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uZGF0ZS13aXNoZXMgLmJ1dHRvbnt3aWR0aDoxMDAlO21hcmdpbi10b3A6MzFweDtwYWRkaW5nOjE1cHggMjBweDtwYWRkaW5nLXRvcDoxNHB4O2ZvbnQtd2VpZ2h0Om5vcm1hbH0uZGF0ZS13aXNoZXMgLmJ1dHRvbi0taWNvbnt6LWluZGV4OjB9LmRhdGUtd2lzaGVzX193cmFwe3BhZGRpbmc6NDBweCAzMHB4IDMwcHh9LmRhdGUtd2lzaGVzX19ncm91cHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luLWJvdHRvbToyMHB4fS5kYXRlLXdpc2hlc19fZ3JvdXAgLmlucHV0LWdyb3VwX19pbnB1dC0tYnV0dG9uLXNwbGl0e3dpZHRoOjEwNnB4fS5kYXRlLXdpc2hlc19fZ3JvdXAgLmRhdGUtcGlja2VyLWNvbnRhaW5lcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MjY5cHg7bGVmdDo1MCV9LmRyb3AtZG93bi1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmV9LmRhdGUtd2lzaGVzX190aXRsZXttYXJnaW46MDttYXJnaW4tYm90dG9tOjIwcHg7Y29sb3I6IzFmMjA0MTtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToyNHB4O2xpbmUtaGVpZ2h0OjMwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDM4MHB4KXsuZGF0ZS13aXNoZXN7d2lkdGg6MTAwJTttaW4td2lkdGg6MzIwcHg7bWFyZ2luOjAgYXV0b30uZGF0ZS13aXNoZXNfX2dyb3VwIC5pbnB1dC1ncm91cHttYXJnaW4tcmlnaHQ6MjBweH0uZGF0ZS13aXNoZXNfX2dyb3VwIC5pbnB1dC1ncm91cDpudGgtY2hpbGQoMil7bWFyZ2luLXJpZ2h0OjB9LmRhdGUtd2lzaGVzX19ncm91cCAuaW5wdXQtZ3JvdXBfX2lucHV0LS1idXR0b24tc3BsaXR7d2lkdGg6MTAwJX0uZGF0ZS13aXNoZXNfX2dyb3VwIC5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0e3dpZHRoOjI4JX19QG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KXsuZGF0ZS13aXNoZXN7bWFyZ2luOjAgYXV0b319QC13ZWJraXQta2V5ZnJhbWVzIHNoYWtlezEwJSw5MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTFweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xcHgsIDAsIDApfTIwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMnB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMnB4LCAwLCAwKX0zMCUsNTAlLDcwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNHB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTRweCwgMCwgMCl9NDAlLDYwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCg0cHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCg0cHgsIDAsIDApfX1Aa2V5ZnJhbWVzIHNoYWtlezEwJSw5MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTFweCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xcHgsIDAsIDApfTIwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMnB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMnB4LCAwLCAwKX0zMCUsNTAlLDcwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNHB4LCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTRweCwgMCwgMCl9NDAlLDYwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCg0cHgsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCg0cHgsIDAsIDApfX0uZGF0ZS1waWNrZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTt6LWluZGV4OjEwMDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MzIwcHg7bWFyZ2luLXRvcDotMjAwcHg7bWFyZ2luLWxlZnQ6LTE2MHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czo0cHg7LXdlYmtpdC1ib3gtc2hhZG93OjAgMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSk7Ym94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2UtaW47dHJhbnNpdGlvbjphbGwgMC4ycyBlYXNlLWlufS5kYXRlLXBpY2tlci0tc2hvd3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjF9LmRhdGUtcGlja2VyLS1lcnJvci1hbmltYXRpb257LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47LXdlYmtpdC1wZXJzcGVjdGl2ZToxMDAwcHg7cGVyc3BlY3RpdmU6MTAwMHB4Oy13ZWJraXQtYW5pbWF0aW9uOnNoYWtlIDAuN3MgY3ViaWMtYmV6aWVyKDAuMzYsIDAuMDcsIDAuMTksIDAuOTcpIGJvdGg7YW5pbWF0aW9uOnNoYWtlIDAuN3MgY3ViaWMtYmV6aWVyKDAuMzYsIDAuMDcsIDAuMTksIDAuOTcpIGJvdGh9LmRhdGUtcGlja2VyX193cmFwe2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzoyMHB4fS5kYXRlLXBpY2tlcl9fY29udHJvbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47d2lkdGg6MTAwJX0uZGF0ZS1waWNrZXJfX3RpdGxle21hcmdpbjowO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjE5cHg7bGluZS1oZWlnaHQ6MjRweH0uZGF0ZS1waWNrZXJfX3NsaWRlci1idG57d2lkdGg6MjRweDtoZWlnaHQ6MjRweDtmb250LXNpemU6MDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlciBjZW50ZXI7Ym9yZGVyOm5vbmU7b3V0bGluZTpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAwLjJzIGVhc2U7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAwLjJzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMC4ycyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMnMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMC4ycyBlYXNlfS5kYXRlLXBpY2tlcl9fc2xpZGVyLWJ0bi0tcHJldntiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fICsgXCIpfS5kYXRlLXBpY2tlcl9fc2xpZGVyLWJ0bi0tcHJldjphY3RpdmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNXB4KX0uZGF0ZS1waWNrZXJfX3NsaWRlci1idG4tLW5leHR7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyArIFwiKTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LmRhdGUtcGlja2VyX19zbGlkZXItYnRuLS1uZXh0OmFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKSB0cmFuc2xhdGVYKC01cHgpO3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKSB0cmFuc2xhdGVYKC01cHgpfS5kYXRlLXBpY2tlcl9fY2FsZW5kYXJ7bWFyZ2luLXRvcDozMHB4O21hcmdpbi1ib3R0b206MjBweDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2V9LmRhdGUtcGlja2VyX190aCwuZGF0ZS1waWNrZXJfX2RheXstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmRhdGUtcGlja2VyX190aHtjb2xvcjojYmM5Y2ZmfS5kYXRlLXBpY2tlcl9fZGF5e2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXdlaWdodDpub3JtYWw7Ym9yZGVyLXJhZGl1czoyMnB4O2N1cnNvcjpwb2ludGVyfS5kYXRlLXBpY2tlcl9fZGF5OmhvdmVye2NvbG9yOiNmZmYgIWltcG9ydGFudDtmb250LXdlaWdodDpib2xkO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbSgjYmM5Y2ZmKSwgdG8oIzhiYTRmOSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiwgIzhiYTRmOSl9LmRhdGUtcGlja2VyX19kYXktLWVycm9ye2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZDp0b21hdG8gIWltcG9ydGFudH0uZGF0ZS1waWNrZXJfX2RheS0tY3VycmVudHtjb2xvcjojZmZmICFpbXBvcnRhbnQ7Zm9udC13ZWlnaHQ6Ym9sZDtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20oIzZmY2Y5NyksIHRvKCM2NmQyZWEpKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICM2ZmNmOTcsICM2NmQyZWEpfS5kYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3R7Y29sb3I6I2ZmZiAhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCNiYzljZmYpLCB0bygjOGJhNGY5KSk7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmLCAjOGJhNGY5KX0uZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LXNwYWNle2JvcmRlci1yYWRpdXM6MDtiYWNrZ3JvdW5kOnJnYmEoMTg4LDE1NiwyNTUsMC4yNSl9LmRhdGUtcGlja2VyX19kYXktLW5vdC1jdXJyZW50e2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNSl9LmRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zdGFydCwuZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LWVuZHtwb3NpdGlvbjpyZWxhdGl2ZX0uZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LXN0YXJ0OjphZnRlciwuZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LWVuZDo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7d2lkdGg6MzYlO2hlaWdodDoxMDAlO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbShyZ2JhKDE4OCwxNTYsMjU1LDAuMjUpKSwgdG8ocmdiYSgxMzksMTY0LDI0OSwwLjI1KSkpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgxODgsMTU2LDI1NSwwLjI1KSwgcmdiYSgxMzksMTY0LDI0OSwwLjI1KSk7Y29udGVudDpcXFwiXFxcIn0uZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LXN0YXJ0OjphZnRlcntyaWdodDowfS5kYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3QtZW5kOjphZnRlcntsZWZ0OjB9LmRhdGUtcGlja2VyX19idXR0b257cGFkZGluZzowO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Ym9yZGVyOm5vbmU7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCB0cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dH0uZGF0ZS1waWNrZXJfX2J1dHRvbjpob3Zlcntjb2xvcjojYmM5Y2ZmfS5kYXRlLXBpY2tlcl9fYnV0dG9uOmFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDNweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoM3B4KX0uZGF0ZS1waWNrZXJfX2J1dHRvbi0tYWNjZW50e2NvbG9yOiNiYzljZmZ9LmRhdGUtcGlja2VyX19idXR0b24tLWFjY2VudDpob3Zlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmRyb3AtZG93bntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTk4cHg7bGVmdDo1MCU7ei1pbmRleDoxMDA7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjEwMCU7bWFyZ2luLXRvcDotMjAwcHg7bWFyZ2luLWxlZnQ6LTUwJTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuNSk7Ym9yZGVyLXJhZGl1czowIDAgNHB4IDRweDstd2Via2l0LWJveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KTtib3gtc2hhZG93OjAgMTBweCAyMHB4IHJnYmEoMzEsMzIsNjUsMC4wNSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246YWxsIDAuMnMgZWFzZS1pbjt0cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2UtaW59LmRyb3AtZG93bi0tc2hvd3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjF9LmRyb3AtZG93bl9fd3JhcHtwYWRkaW5nLXRvcDo3cHg7cGFkZGluZy1sZWZ0OjE0cHg7cGFkZGluZy1yaWdodDo3cHg7cGFkZGluZy1ib3R0b206OHB4fS5kcm9wLWRvd25fX2NvdW50LWxpc3R7bWFyZ2luOjA7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0uZHJvcC1kb3duX19jb3VudC1pdGVte2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW4tYm90dG9tOjdweH0uZHJvcC1kb3duX19jb3VudC1pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5kcm9wLWRvd25fX2NvdW50ZXItbWVudXtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47d2lkdGg6OTJweH0uZHJvcC1kb3duX19jb3VudC1pdGVtLW5hbWV7bWFyZ2luOjA7cGFkZGluZzowO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmRyb3AtZG93bl9fc2VsZWN0LXZpZXd7d2lkdGg6MjBweDttYXJnaW46MDtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmRyb3AtZG93bl9fY291bnRlci1idG57cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7cGFkZGluZzowO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXNpemU6MThweDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7YmFja2dyb3VuZDojZmZmO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjUpO2JvcmRlci1yYWRpdXM6NTAlO2N1cnNvcjpwb2ludGVyfS5kcm9wLWRvd25fX2NvdW50ZXItYnRuLS1wbHVzOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MnB4O3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO2NvbnRlbnQ6XFxcIitcXFwifS5kcm9wLWRvd25fX2NvdW50ZXItYnRuLS1taW51czo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjJweDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtjb250ZW50OlxcXCItXFxcIn0uZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWR7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Y3Vyc29yOmRlZmF1bHR9LmRyb3AtZG93bl9fY29udHJvbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luLXRvcDoyMHB4fS5kcm9wLWRvd25fX2J1dHRvbntwYWRkaW5nOjA7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtib3JkZXI6bm9uZTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgMC4ycyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpjb2xvciAwLjJzIGVhc2UtaW4tb3V0LCB0cmFuc2Zvcm0gMC4xcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIHRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0LCAtd2Via2l0LXRyYW5zZm9ybSAwLjFzIGVhc2UtaW4tb3V0fS5kcm9wLWRvd25fX2J1dHRvbjpob3Zlcntjb2xvcjojYmM5Y2ZmfS5kcm9wLWRvd25fX2J1dHRvbjphY3RpdmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgzcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDNweCl9LmRyb3AtZG93bl9fYnV0dG9uLS1hY2NlbnR7Y29sb3I6I2JjOWNmZn0uZHJvcC1kb3duX19idXR0b24tLWFjY2VudDpob3Zlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmlucHV0LWdyb3Vwe2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7bWFyZ2luOjB9LmlucHV0LWdyb3VwLS1jb2x1bW57LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dCwuaW5wdXQtZ3JvdXA6Zm9jdXMgLmlucHV0LWdyb3VwX19pbnB1dHtib3JkZXItY29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgLmlucHV0LWdyb3VwOmZvY3VzIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dDo6LW1vei1wbGFjZWhvbGRlciwgLmlucHV0LWdyb3VwOmZvY3VzIC5pbnB1dC1ncm91cF9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cDpob3ZlciAuaW5wdXQtZ3JvdXBfX2lucHV0OjotbXMtaW5wdXQtcGxhY2Vob2xkZXIsIC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2lucHV0OjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXA6aG92ZXIgLmlucHV0LWdyb3VwX19pbnB1dDo6cGxhY2Vob2xkZXIsLmlucHV0LWdyb3VwOmZvY3VzIC5pbnB1dC1ncm91cF9faW5wdXQ6OnBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwOmhvdmVyIC5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0LC5pbnB1dC1ncm91cDpmb2N1cyAuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdHtib3JkZXItY29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2xhYmVse21hcmdpbjowO21hcmdpbi1ib3R0b206NXB4fS5pbnB1dC1ncm91cF9fZGVzY3J7bWFyZ2luOjA7cGFkZGluZy1ib3R0b206NHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC40NSk7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uaW5wdXQtZ3JvdXBfX2xhYmVsLS1iaWd7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtmb250LWZhbWlseTpcXFwiTW9udHNlcnJhdFxcXCIsIFxcXCJBcmlhbFxcXCIsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmlucHV0LWdyb3VwX19zcGxpdHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCU7bWFyZ2luOjB9LmlucHV0LWdyb3VwX19pbnB1dHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MTAwJTtwYWRkaW5nOjlweCAxNHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Zm9udC1zaXplOjE0cHg7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCIsXFxcIk1vbnRzZXJyYXRcXFwiLHNhbnMtc2VyaWY7bGluZS1oZWlnaHQ6MjRweDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czo0cHg7b3V0bGluZTpub25lOy13ZWJraXQtdHJhbnNpdGlvbjpib3JkZXIgMC40cyBlYXNlO3RyYW5zaXRpb246Ym9yZGVyIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1pY29ue2JhY2tncm91bmQ6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gKyBcIikgbm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246OTUlIGNlbnRlcn0uaW5wdXQtZ3JvdXBfX2lucHV0LS1idXR0b24tc3BsaXR7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1yaWdodDowO2JvcmRlci1yaWdodDpub25lO2JvcmRlci1yYWRpdXM6NHB4IDAgMCA0cHh9LmlucHV0LWdyb3VwX19pbnB1dC0tZmFrZXtjdXJzb3I6cG9pbnRlcn0uaW5wdXQtZ3JvdXBfX2lucHV0LS1hY3RpdmV7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC41KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1ob3Zlcntib3JkZXItY29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1ob3Zlcjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KSAhaW1wb3J0YW50fS5pbnB1dC1ncm91cF9faW5wdXQtLWhvdmVyOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpICFpbXBvcnRhbnR9LmlucHV0LWdyb3VwX19pbnB1dC0taG92ZXI6OnBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSkgIWltcG9ydGFudH0uaW5wdXQtZ3JvdXBfX2lucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNCk7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDtmb250LXNpemU6MTRweDstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlO3RyYW5zaXRpb246Y29sb3IgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9faW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxNHB4Oy1tb3otdHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpjb2xvciAwLjRzIGVhc2V9LmlucHV0LWdyb3VwX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxNHB4Oy1tcy10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI0KTtmb250LWZhbWlseTpNb250c2VycmF0O2ZvbnQtc2l6ZToxNHB4Oy1tcy10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjQpO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQ7Zm9udC1zaXplOjE0cHg7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0uaW5wdXQtZ3JvdXBfX2lucHV0OmhvdmVyLC5pbnB1dC1ncm91cF9faW5wdXQ6Zm9jdXN7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dDpob3ZlcisuaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdCwuaW5wdXQtZ3JvdXBfX2lucHV0OmZvY3VzKy5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0e2JvcmRlci1jb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9faW5wdXQtLWRhcmstcGxhY2Vob2xkZXI6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmlucHV0LWdyb3VwX19pbnB1dC0tZGFyay1wbGFjZWhvbGRlcjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uaW5wdXQtZ3JvdXBfX2lucHV0LS1kYXJrLXBsYWNlaG9sZGVyOjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0ey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDo0NHB4O3BhZGRpbmc6MDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlciBjZW50ZXI7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JvcmRlci1sZWZ0Om5vbmU7Ym9yZGVyLXJhZGl1czowIDRweCA0cHggMDtvdXRsaW5lOm5vbmU7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC10cmFuc2l0aW9uOmJvcmRlciAwLjRzIGVhc2U7dHJhbnNpdGlvbjpib3JkZXIgMC40cyBlYXNlfS5pbnB1dC1ncm91cF9fYnV0dG9uLXNwbGl0IGltZ3std2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4xcyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjFzIGVhc2UsIC13ZWJraXQtdHJhbnNmb3JtIDAuMXMgZWFzZX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdC0tZG93bi1hbmltYXRpb246YWN0aXZlIGltZ3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMnB4KX0uaW5wdXQtZ3JvdXBfX2J1dHRvbi1zcGxpdC0tcmlnaHQtYW5pbWF0aW9uOmFjdGl2ZSBpbWd7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCl9LnBhZ2UtZm9vdGVye3Bvc2l0aW9uOnJlbGF0aXZlOy13ZWJraXQtYm94LXNoYWRvdzowIDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JveC1zaGFkb3c6MCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KX0ucGFnZS1mb290ZXItLWJvcmRlci10b3B7Ym9yZGVyLXRvcDoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KX0ucGFnZS1mb290ZXI6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTo3OHB4O3dpZHRoOjEwMCU7aGVpZ2h0OjFweDtiYWNrZ3JvdW5kOnJnYmEoMzEsMzIsNjUsMC4xKTtjb250ZW50OlxcXCJcXFwifS5wYWdlLWZvb3Rlcl9fY29udGVudHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3BhZGRpbmc6MTAxcHggMCA3NXB4fS5wYWdlLWZvb3Rlcl9fY29sLWdyb3Vwe2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtZmxleDoxOy1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjE7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nLXRvcDoycHh9LnBhZ2UtZm9vdGVyX19zaWRlLWluZm97ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjI5cHggMH0ucGFnZS1mb290ZXIgLnRleHQtY29udGVudHt3aWR0aDoyNjBweH0ucGFnZS1mb290ZXIgLnRleHQtY29udGVudF9fdGl0bGV7bWFyZ2luLWJvdHRvbToxN3B4fS5wYWdlLWZvb3RlciAubmF2LW1lbnVfX3RpdGxle21hcmdpbi1ib3R0b206MjJweH0ucGFnZS1mb290ZXIgLm5hdi1tZW51X19pdGVte21hcmdpbi1ib3R0b206MjFweH0ucGFnZS1mb290ZXIgLmxvZ297bWFyZ2luLWJvdHRvbToxNnB4fS5wYWdlLWZvb3RlciAuaW5wdXQtZ3JvdXB7bWFyZ2luLXRvcDoyM3B4fS5wYWdlLWZvb3RlciAuaW5wdXQtZ3JvdXBfX2lucHV0LS1idXR0b24tc3BsaXR7d2lkdGg6MjE2cHh9LnBhZ2UtZm9vdGVyX19jb2wtLWxhcmdlOmZpcnN0LWNoaWxke21hcmdpbi1yaWdodDozLjUlfUBtZWRpYSAod2lkdGg6IDE0NDBweCl7LnBhZ2UtZm9vdGVyX19jb2w6bnRoLWNoaWxkKDIpe21hcmdpbi1yaWdodDo5M3B4fS5wYWdlLWZvb3Rlcl9fY29sOmxhc3QtY2hpbGR7bWFyZ2luLWxlZnQ6YXV0b30ucGFnZS1mb290ZXJfX2NvbC1ncm91cCAucGFnZS1mb290ZXJfX2NvbDpmaXJzdC1jaGlsZHttYXJnaW4tcmlnaHQ6NTdweH19QG1lZGlhIChtYXgtd2lkdGg6IDExMDBweCl7LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXB7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwfS5wYWdlLWZvb3Rlcl9fY29sLWdyb3VwIC5wYWdlLWZvb3Rlcl9fY29sey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDo1MCU7bWFyZ2luLWJvdHRvbTo0MHB4fS5wYWdlLWZvb3Rlcl9fY29sLWdyb3VwIC5wYWdlLWZvb3Rlcl9fY29sOm50aC1jaGlsZCgzKXttYXJnaW4tYm90dG9tOjB9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2w6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2w6bGFzdC1jaGlsZCAudGV4dC1jb250ZW50e3dpZHRoOjg1JX0ucGFnZS1mb290ZXJfX2NvbC1ncm91cCAucGFnZS1mb290ZXJfX2NvbDpsYXN0LWNoaWxkIC5pbnB1dC1ncm91cF9faW5wdXR7d2lkdGg6ODMuMDclfS5wYWdlLWZvb3Rlcl9fY29udGVudD4ucGFnZS1mb290ZXJfX2NvbHstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MjQwcHg7bWFyZ2luLXJpZ2h0OjE0JX0ucGFnZS1mb290ZXJfX2NvbnRlbnQ+LnBhZ2UtZm9vdGVyX19jb2wgLnRleHQtY29udGVudHt3aWR0aDoxMDAlfS5wYWdlLWZvb3Rlcl9fY29udGVudHtwYWRkaW5nLXRvcDo1MHB4O3BhZGRpbmctYm90dG9tOjUwcHh9fUBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCl7LnBhZ2UtZm9vdGVyIC5uYXYtbWVudV9fdGl0bGV7bWFyZ2luLWJvdHRvbToxMHB4O2ZvbnQtc2l6ZToxNHB4fS5wYWdlLWZvb3RlciAubmF2LW1lbnVfX2l0ZW17bWFyZ2luLWJvdHRvbToxMHB4fS5wYWdlLWZvb3RlciAudGV4dC1jb250ZW50X190aXRsZXttYXJnaW4tYm90dG9tOjEwcHg7cGFkZGluZy1ib3R0b206MTBweDtmb250LXNpemU6MTRweDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjMWYyMDQxfS5wYWdlLWZvb3Rlcl9fY29udGVudHstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nLXRvcDozMHB4O3BhZGRpbmctYm90dG9tOjQwcHh9LnBhZ2UtZm9vdGVyX19jb250ZW50Pi5wYWdlLWZvb3Rlcl9fY29se3dpZHRoOjEwMCU7bWFyZ2luLWJvdHRvbTo0MHB4fS5wYWdlLWZvb3Rlcl9fY29sLWdyb3VwIC5wYWdlLWZvb3Rlcl9fY29se3dpZHRoOjEwMCU7bWFyZ2luLWJvdHRvbTo0MHB4fS5wYWdlLWZvb3Rlcl9fY29sLWdyb3VwIC5wYWdlLWZvb3Rlcl9fY29sOm50aC1jaGlsZCgzKXttYXJnaW4tYm90dG9tOjMwcHh9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2w6bGFzdC1jaGlsZCAudGV4dC1jb250ZW50e3dpZHRoOjEwMCV9LnBhZ2UtZm9vdGVyX19jb2wtZ3JvdXAgLnBhZ2UtZm9vdGVyX19jb2w6bGFzdC1jaGlsZCAuaW5wdXQtZ3JvdXB7bWFyZ2luLXRvcDoyMHB4fX1AbWVkaWEgKG1heC13aWR0aDogNTU1cHgpey5wYWdlLWZvb3Rlcjo6YWZ0ZXJ7Ym90dG9tOjEyMHB4fS5wYWdlLWZvb3Rlcl9fc2lkZS1pbmZvey13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5wYWdlLWZvb3Rlcl9fc2lkZS1pbmZvIC5jb3B5cmlnaHR7bWFyZ2luLWJvdHRvbToyMHB4O3RleHQtYWxpZ246Y2VudGVyfX1AbWVkaWEgKG1heC13aWR0aDogMzk0cHgpey5wYWdlLWZvb3Rlcjo6YWZ0ZXJ7Ym90dG9tOjEzNXB4fX1AbWVkaWEgKG1heC13aWR0aDogNDI1cHgpey5wYWdlLWZvb3Rlcl9fd3JhcHtwYWRkaW5nLXJpZ2h0OjIwcHg7cGFkZGluZy1sZWZ0OjIwcHh9fS5uYXYtbWVudV9fbGlzdHttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lfS5uYXYtbWVudV9fdGl0bGV7bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToyMHB4O2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9Lm5hdi1tZW51X19pdGVte21hcmdpbi1ib3R0b206MjBweH0ubmF2LW1lbnVfX2l0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9Lm5hdi1tZW51X19pdGVtIGF7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjE3cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZTt0cmFuc2l0aW9uOmNvbG9yIDAuNHMgZWFzZX0ubmF2LW1lbnVfX2l0ZW0gYTpob3Zlcntjb2xvcjojOTk2OWZmfUBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCl7Lm5hdi1tZW51X190aXRsZXtwYWRkaW5nLWJvdHRvbToxMHB4O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMxZjIwNDF9Lm5hdi1tZW51X19pdGVtIGF7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTAwJTt2ZXJ0aWNhbC1hbGlnbjp0b3B9fS50ZXh0LWNvbnRlbnRfX3RpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206MjBweDtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS50ZXh0LWNvbnRlbnRfX3BhcmFncmFwaHttYXJnaW46MDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjI0cHh9LnNvY2lhbC1idXR0b25zX19saXN0e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luOjA7cGFkZGluZzowO2xpc3Qtc3R5bGU6bm9uZX0uc29jaWFsLWJ1dHRvbnNfX2l0ZW17bWFyZ2luLXJpZ2h0OjI0cHh9LnNvY2lhbC1idXR0b25zX19pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjB9LnNvY2lhbC1idXR0b25zX19saW5rIC5pY29uLWNvbnRlbnR7LXdlYmtpdC10cmFuc2l0aW9uOmZpbGwgMC40cyBlYXNlO3RyYW5zaXRpb246ZmlsbCAwLjRzIGVhc2V9LnNvY2lhbC1idXR0b25zX19saW5rOmhvdmVyIC5pY29uLWNvbnRlbnR7ZmlsbDojOTk2OWZmfS5jb3B5cmlnaHR7Zm9udC1mYW1pbHk6TW9udHNlcnJhdDttYXJnaW46MDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjE3cHh9LmluZGV4LWJsb2Nrey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6ODMwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyArIFwiKTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgLTY5cHh9LmluZGV4LWJsb2NrX193cmFwe3Bvc2l0aW9uOnJlbGF0aXZlO21pbi1oZWlnaHQ6ODMwcHg7cGFkZGluZy10b3A6NzBweH0uaW5kZXgtYmxvY2tfX3Nsb2dhbntwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDo0cHg7Ym90dG9tOjkycHg7d2lkdGg6Mjk3cHh9LmluZGV4LWJsb2NrX19zbG9nYW4gcHttYXJnaW46MDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjI0cHg7dGV4dC1hbGlnbjpyaWdodH1AbWVkaWEgKG1pbi13aWR0aDogMTQ0MHB4KXsuaW5kZXgtYmxvY2t7YmFja2dyb3VuZC1zaXplOmNvdmVyfX1AbWVkaWEgKG1heC13aWR0aDogNDI1cHgpey5pbmRleC1ibG9ja19fc2xvZ2Fue3JpZ2h0OjI0cHh9fVxcblwiLCBcIlwiXSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJiZDI0NDAxMzQ1YjUzZTI5ZmY0ODQ2NzViMjYyNTcyMi5qcGdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkNTI0N2IzNzM0YmIwYWEzZTg5YzkwNTEzYjRhNGI3Yy5zdmdcIjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFzc2VydFN0cmluZztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gYXNzZXJ0U3RyaW5nKGlucHV0KSB7XG4gIHZhciBpc1N0cmluZyA9IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmc7XG5cbiAgaWYgKCFpc1N0cmluZykge1xuICAgIHZhciBpbnZhbGlkVHlwZTtcblxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgaW52YWxpZFR5cGUgPSAnbnVsbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludmFsaWRUeXBlID0gX3R5cGVvZihpbnB1dCk7XG5cbiAgICAgIGlmIChpbnZhbGlkVHlwZSA9PT0gJ29iamVjdCcgJiYgaW5wdXQuY29uc3RydWN0b3IgJiYgaW5wdXQuY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoJ25hbWUnKSkge1xuICAgICAgICBpbnZhbGlkVHlwZSA9IGlucHV0LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhbGlkVHlwZSA9IFwiYSBcIi5jb25jYXQoaW52YWxpZFR5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBzdHJpbmcgYnV0IHJlY2VpdmVkIFwiLmNvbmNhdChpbnZhbGlkVHlwZSwgXCIuXCIpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiN2Y3ZTkxNWUwMzA5OTFmZDJhMGZmM2EyNjAxMjk4OTQuc3ZnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMmFjYTJiODE2MjliZmFhZTU2ZjBhMzUzMjgzNmExMGUuc3ZnXCI7IiwiaW1wb3J0IElucHV0bWFzayBmcm9tIFwiaW5wdXRtYXNrXCI7XHJcbmltcG9ydCBpc051bWVyaWMgZnJvbSBcInZhbGlkYXRvci9saWIvaXNOdW1lcmljXCI7XHJcblxyXG5jb25zdCBtb250aFJ1c1RyYW5zbGF0ZSA9IHtcclxuICAwOiBcItCv0L3QstCw0YDRjFwiLFxyXG4gIDE6IFwi0KTQtdCy0YDQsNC70YxcIixcclxuICAyOiBcItCc0LDRgNGCXCIsXHJcbiAgMzogXCLQkNC/0YDQtdC70YxcIixcclxuICA0OiBcItCc0LDQuVwiLFxyXG4gIDU6IFwi0JjRjtC90YxcIixcclxuICA2OiBcItCY0Y7Qu9GMXCIsXHJcbiAgNzogXCLQkNCy0LPRg9GB0YJcIixcclxuICA4OiBcItCh0LXQvdGC0Y/QsdGA0YxcIixcclxuICA5OiBcItCe0LrRgtGP0LHRgNGMXCIsXHJcbiAgMTA6IFwi0J3QvtGP0LHRgNGMXCIsXHJcbiAgMTE6IFwi0JTQtdC60LDQsdGA0YxcIlxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0SHRtbEVsZW1lbnQodGFnTmFtZSwgY2xhc3NOYW1lLCB0ZXh0KSB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XHJcblxyXG4gIGlmIChjbGFzc05hbWUpIHtcclxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRleHQpIHtcclxuICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFR3b0RpZ2l0TnVtYmVyU3RyaW5nKG51bWJlcikge1xyXG4gIGlmIChudW1iZXIgPCAxMCkge1xyXG4gICAgcmV0dXJuIGAwJHtudW1iZXJ9YDtcclxuICB9XHJcblxyXG4gIHJldHVybiBudW1iZXI7XHJcbn1cclxuXHJcbmNsYXNzIERhdGVQaWNrZXIge1xyXG4gIGNvbnN0cnVjdG9yKGRvbUluZm8gPSB7fSkge1xyXG4gICAgaWYgKGRvbUluZm8ucGFyZW50Tm9kZUlkKSB7XHJcbiAgICAgIHRoaXMucGFyZW50Tm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2RvbUluZm8ucGFyZW50Tm9kZUlkfWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBcIkV4cGVjdGVkIHBhcmVudE5vZGVJZCBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb21JbmZvLmFycml2YWxJbnB1dElkKSB7XHJcbiAgICAgIHRoaXMuYXJyaXZhbElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7ZG9tSW5mby5hcnJpdmFsSW5wdXRJZH1gKTtcclxuICAgICAgSW5wdXRtYXNrKHsgbWFzazogXCI5OS45OS45OTk5XCIsIHBsYWNlaG9sZGVyOiBcItCU0JQu0JzQnC7Qk9CT0JPQk1wiIH0pLm1hc2soXHJcbiAgICAgICAgYCMke2RvbUluZm8uYXJyaXZhbElucHV0SWR9YFxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmFycml2YWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy5vbkZvY3VzQXJyaXZhbElucHV0KTtcclxuICAgICAgdGhpcy5hcnJpdmFsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZ0ID0+IHtcclxuICAgICAgICBjb25zdCBpc1ByZXNzRW50ZXIgPSBldnQua2V5Q29kZSA9PT0gMTM7XHJcbiAgICAgICAgaWYgKGlzUHJlc3NFbnRlcikge1xyXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB0aGlzLnNob3dBcnJpdmFsTW9udGhDYWxlbmRhcigpO1xyXG4gICAgICAgICAgY29uc3QgYXJyaXZhbElucHV0RGF0ZSA9IHRoaXMuYXJyaXZhbElucHV0LnZhbHVlO1xyXG4gICAgICAgICAgaWYgKHRoaXMuaGFzRGF0YUZ1bGwoYXJyaXZhbElucHV0RGF0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC5mb2N1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgYXJyaXZhbElucHV0SWQgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZG9tSW5mby5kZXBhcnR1cmVJbnB1dElkKSB7XHJcbiAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIGAjJHtkb21JbmZvLmRlcGFydHVyZUlucHV0SWR9YFxyXG4gICAgICApO1xyXG4gICAgICBJbnB1dG1hc2soeyBtYXNrOiBcIjk5Ljk5Ljk5OTlcIiwgcGxhY2Vob2xkZXI6IFwi0JTQlC7QnNCcLtCT0JPQk9CTXCIgfSkubWFzayhcclxuICAgICAgICBgIyR7ZG9tSW5mby5kZXBhcnR1cmVJbnB1dElkfWBcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy5vbkZvY3VzRGVwYXJ0dXJlSW5wdXQpO1xyXG4gICAgICB0aGlzLmRlcGFydHVyZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGV2dCA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNQcmVzc0VudGVyID0gZXZ0LmtleUNvZGUgPT09IDEzO1xyXG4gICAgICAgIGlmIChpc1ByZXNzRW50ZXIpIHtcclxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgdGhpcy5zaG93RGVwYXJ0dXJlTW9udGhDYWxlbmRhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgZGVwYXJ0dXJlSW5wdXRJZCBpbnNpZGUgY29uc3RydWN0b3Igb2JqZWN0IGJ1dCBub3QgcmVjZWl2ZWRcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb21JbmZvLmFycml2YWxTcGxpdEJ0bklkKSB7XHJcbiAgICAgIHRoaXMuYXJyaXZhbFNwbGl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBgIyR7ZG9tSW5mby5hcnJpdmFsU3BsaXRCdG5JZH1gXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuYXJyaXZhbFNwbGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgIHRoaXMuc2hvd0Fycml2YWxNb250aENhbGVuZGFyXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgYXJyaXZhbFNwbGl0QnRuSWQgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZG9tSW5mby5kZXBhcnR1cmVTcGxpdEJ0bklkKSB7XHJcbiAgICAgIHRoaXMuZGVwYXJ0dXJlU3BsaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIGAjJHtkb21JbmZvLmRlcGFydHVyZVNwbGl0QnRuSWR9YFxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmRlcGFydHVyZVNwbGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgIHRoaXMuc2hvd0RlcGFydHVyZU1vbnRoQ2FsZW5kYXJcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBkZXBhcnR1cmVTcGxpdEJ0bklkIGluc2lkZSBjb25zdHJ1Y3RvciBvYmplY3QgYnV0IG5vdCByZWNlaXZlZFwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICB0aGlzLmFycml2YWxEYXRlID0gbnVsbDtcclxuICAgIHRoaXMuZGVwYXJ0dXJlRGF0ZSA9IG51bGw7XHJcbiAgICB0aGlzLmFycml2YWxDZWxsID0gbnVsbDtcclxuICAgIHRoaXMuZGVwYXJ0dXJlQ2VsbCA9IG51bGw7XHJcbiAgICB0aGlzLmlzU3RhcnRTZWxlY3QgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNFbmRTZWxlY3QgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGhhc0N1cnJlbnRNb250aCA9IGRhdGUgPT4ge1xyXG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSA9PT0gdGhpcy5jdXJyZW50RGF0ZS5nZXRNb250aCgpO1xyXG4gIH07XHJcblxyXG4gIGNvbXBhaXJlRGF0ZSA9IChmaXJzdERhdGUsIHNlY29uZERhdGUpID0+IHtcclxuICAgIGNvbnN0IGZpcnN0RGF5ID0gZmlyc3REYXRlLmdldERhdGUoKTtcclxuICAgIGNvbnN0IGZpcnN0TW9udGggPSBmaXJzdERhdGUuZ2V0TW9udGgoKTtcclxuICAgIGNvbnN0IGZpcnN0WWVhciA9IGZpcnN0RGF0ZS5nZXRGdWxsWWVhcigpO1xyXG5cclxuICAgIGNvbnN0IHNlY29uZERheSA9IHNlY29uZERhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgY29uc3Qgc2Vjb25kTW9udGggPSBzZWNvbmREYXRlLmdldE1vbnRoKCk7XHJcbiAgICBjb25zdCBzZWNvbmRZZWFyID0gc2Vjb25kRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG5cclxuICAgIGlmIChmaXJzdFllYXIgPiBzZWNvbmRZZWFyKSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaXJzdFllYXIgPCBzZWNvbmRZZWFyKSB7XHJcbiAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZmlyc3RNb250aCA+IHNlY29uZE1vbnRoKSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaXJzdE1vbnRoIDwgc2Vjb25kTW9udGgpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaXJzdERheSA+IHNlY29uZERheSkge1xyXG4gICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZmlyc3REYXkgPCBzZWNvbmREYXkpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAwO1xyXG4gIH07XHJcblxyXG4gIGhhc0RhdGFGdWxsID0gdGV4dERhdGUgPT4ge1xyXG4gICAgY29uc3QgdGV4dERhdGVTcGxpdCA9IHRleHREYXRlLnNwbGl0KFwiLlwiKTtcclxuICAgIGNvbnN0IGlzRGF0YUZ1bGxOdW1iZXIgPSB0ZXh0RGF0ZVNwbGl0LmV2ZXJ5KGl0ZW0gPT4gaXNOdW1lcmljKGl0ZW0pKTtcclxuICAgIHJldHVybiBpc0RhdGFGdWxsTnVtYmVyO1xyXG4gIH07XHJcblxyXG4gIHNob3dDYWxlbmRhciA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNhbGVuZGFyID0gdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuZGF0ZS1waWNrZXJcIik7XHJcbiAgICBjb25zdCBpc0hhdmVTaG93Q2xhc3MgPSBjYWxlbmRhci5jbGFzc0xpc3QuY29udGFpbnMoXCJkYXRlLXBpY2tlci0tc2hvd1wiKTtcclxuICAgIGlmICghaXNIYXZlU2hvd0NsYXNzKSB7XHJcbiAgICAgIGNhbGVuZGFyLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlci0tc2hvd1wiKTtcclxuICAgIH1cclxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5vbkNsaWNrU2hvd0NhbGVuZGFyKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uRXNjVW5zaG93Q2FsZW5kYXIpO1xyXG4gIH07XHJcblxyXG4gIHVuc2hvd0NhbGVuZGFyID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2FsZW5kYXIgPSB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcIi5kYXRlLXBpY2tlclwiKTtcclxuICAgIGNvbnN0IGlzSGF2ZVNob3dDbGFzcyA9IGNhbGVuZGFyLmNsYXNzTGlzdC5jb250YWlucyhcImRhdGUtcGlja2VyLS1zaG93XCIpO1xyXG4gICAgaWYgKGlzSGF2ZVNob3dDbGFzcykge1xyXG4gICAgICBjYWxlbmRhci5jbGFzc0xpc3QucmVtb3ZlKFwiZGF0ZS1waWNrZXItLXNob3dcIik7XHJcbiAgICB9XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMub25DbGlja1Nob3dDYWxlbmRhcik7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5vbkVzY1Vuc2hvd0NhbGVuZGFyKTtcclxuICB9O1xyXG5cclxuICBzaG93QXJyaXZhbE1vbnRoQ2FsZW5kYXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBpbnB1dERhdGUgPSB0aGlzLmFycml2YWxJbnB1dC52YWx1ZTtcclxuICAgIGNvbnN0IGFycml2YWxJbnB1dERhdGUgPSB0aGlzLmdldENvbnZlcnRlRGF0ZUJ5VXNlcklucHV0KGlucHV0RGF0ZSk7XHJcbiAgICBjb25zdCBkYXRlTW9yZVRoaXNEYXRlID1cclxuICAgICAgdGhpcy5jb21wYWlyZURhdGUoYXJyaXZhbElucHV0RGF0ZSwgbmV3IERhdGUoKSkgPj0gMDtcclxuICAgIHRoaXMuc2hvd0NhbGVuZGFyKCk7XHJcbiAgICB0aGlzLm9uSW5wdXREYXRlQXJyaXZhbCgpO1xyXG4gICAgaWYgKHRoaXMuYXJyaXZhbERhdGUgJiYgZGF0ZU1vcmVUaGlzRGF0ZSkge1xyXG4gICAgICB0aGlzLnVwZGF0ZUN1cnJlbnREYXRlKHRoaXMuYXJyaXZhbERhdGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNob3dEZXBhcnR1cmVNb250aENhbGVuZGFyID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zaG93Q2FsZW5kYXIoKTtcclxuICAgIHRoaXMub25JbnB1dERhdGVEZXBhcnR1cmUoKTtcclxuICAgIGlmICh0aGlzLmRlcGFydHVyZURhdGUpIHtcclxuICAgICAgdGhpcy51cGRhdGVDdXJyZW50RGF0ZSh0aGlzLmRlcGFydHVyZURhdGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNob3dFcnJvckFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXIgPSB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcIi5kYXRlLXBpY2tlclwiKTtcclxuICAgIGRhdGVQaWNrZXIuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyLS1lcnJvci1hbmltYXRpb25cIik7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgZGF0ZVBpY2tlci5jbGFzc0xpc3QucmVtb3ZlKFwiZGF0ZS1waWNrZXItLWVycm9yLWFuaW1hdGlvblwiKTtcclxuICAgIH0sIDcwMCk7XHJcbiAgfTtcclxuXHJcbiAgcGFpbnRpbmdTZWxlY3RDZWxsID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2VsbHMgPSB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChcInRkXCIpO1xyXG4gICAgaWYgKHRoaXMuYXJyaXZhbERhdGUgJiYgdGhpcy5kZXBhcnR1cmVEYXRlKSB7XHJcbiAgICAgIGNvbnN0IGFycml2YWxBcmlhRGF0ZSA9IHRoaXMuZ2V0QXJpYURhdGVCeURhdGUodGhpcy5hcnJpdmFsRGF0ZSk7XHJcbiAgICAgIGNvbnN0IGRlcGFydHVyZUFyaWFEYXRlID0gdGhpcy5nZXRBcmlhRGF0ZUJ5RGF0ZSh0aGlzLmRlcGFydHVyZURhdGUpO1xyXG4gICAgICBjb25zdCBpc0RvdWJsZVNlbGVjdCA9IGFycml2YWxBcmlhRGF0ZSA9PT0gZGVwYXJ0dXJlQXJpYURhdGU7XHJcblxyXG4gICAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzQ2VsbFN0YXJ0ID0gYXJyaXZhbEFyaWFEYXRlID09PSBjZWxsLmdldEF0dHJpYnV0ZShcImFyaWEtZGF0ZVwiKTtcclxuICAgICAgICBjb25zdCBpc0NlbGxFbmQgPSBkZXBhcnR1cmVBcmlhRGF0ZSA9PT0gY2VsbC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWRhdGVcIik7XHJcbiAgICAgICAgY29uc3QgY2VsbERhdGUgPSBuZXcgRGF0ZShjZWxsLmdldEF0dHJpYnV0ZShcImFyaWEtZGF0ZVwiKSk7XHJcblxyXG4gICAgICAgIGlmIChpc0NlbGxFbmQgJiYgIWlzRG91YmxlU2VsZWN0KSB7XHJcbiAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3QtZW5kXCIpO1xyXG4gICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaXNDZWxsRGF0ZU1vcmVUaGFuQXJyaXZhbERhdGUgPVxyXG4gICAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoY2VsbERhdGUsIHRoaXMuYXJyaXZhbERhdGUpID4gMDtcclxuICAgICAgICBjb25zdCBpc0NlbGxEYXRlTGVzc1RoYW5EZXBhcnR1cmVEYXRlID1cclxuICAgICAgICAgIHRoaXMuY29tcGFpcmVEYXRlKGNlbGxEYXRlLCB0aGlzLmRlcGFydHVyZURhdGUpIDwgMDtcclxuICAgICAgICBjb25zdCBpc0NlbGxEYXRlSW5SYW5nZSA9XHJcbiAgICAgICAgICBpc0NlbGxEYXRlTW9yZVRoYW5BcnJpdmFsRGF0ZSAmJiBpc0NlbGxEYXRlTGVzc1RoYW5EZXBhcnR1cmVEYXRlO1xyXG5cclxuICAgICAgICBpZiAoaXNDZWxsRGF0ZUluUmFuZ2UpIHtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zcGFjZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0NlbGxTdGFydCAmJiBkZXBhcnR1cmVBcmlhRGF0ZSAmJiAhaXNEb3VibGVTZWxlY3QpIHtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zdGFydFwiKTtcclxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdFwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzQ2VsbFN0YXJ0KSB7XHJcbiAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5hcnJpdmFsRGF0ZSkge1xyXG4gICAgICBjb25zdCBhcnJpdmFsQXJpYURhdGUgPSB0aGlzLmdldEFyaWFEYXRlQnlEYXRlKHRoaXMuYXJyaXZhbERhdGUpO1xyXG5cclxuICAgICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IHtcclxuICAgICAgICBjb25zdCBpc0NlbGxTdGFydCA9IGFycml2YWxBcmlhRGF0ZSA9PT0gY2VsbC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWRhdGVcIik7XHJcbiAgICAgICAgaWYgKGlzQ2VsbFN0YXJ0KSB7XHJcbiAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjbGVhclNlbGVjdENlbGwgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjZWxscyA9IHRoaXMucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwidGRcIik7XHJcbiAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xyXG4gICAgICBjb25zdCBpc0NlbGxTZWxlY3QgPSBjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdFwiKTtcclxuICAgICAgY29uc3QgaXNDZWxsU2VsZWN0U3BhY2UgPSBjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICBcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1zcGFjZVwiXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGlzQ2VsbFN0YXJ0U2VsZWN0ID0gY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgICAgXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3Qtc3RhcnRcIlxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBpc0NlbGxFbmRTZWxlY3QgPSBjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcclxuICAgICAgICBcImRhdGUtcGlja2VyX19kYXktLXNlbGVjdC1lbmRcIlxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGlzQ2VsbFNlbGVjdFNwYWNlKSB7XHJcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0LXNwYWNlXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNDZWxsU2VsZWN0KSB7XHJcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0XCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNDZWxsU3RhcnRTZWxlY3QpIHtcclxuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3Qtc3RhcnRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0NlbGxFbmRTZWxlY3QpIHtcclxuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3QtZW5kXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBvbkNsaWNrU2hvd0NhbGVuZGFyID0gZXZ0ID0+IHtcclxuICAgIGNvbnN0IGNhbGVuZGFyID0gdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCIuZGF0ZS1waWNrZXJcIik7XHJcbiAgICBjb25zdCBpc0lucHV0Q2xpY2sgPVxyXG4gICAgICBldnQudGFyZ2V0ID09PSB0aGlzLmFycml2YWxJbnB1dCB8fCBldnQudGFyZ2V0ID09PSB0aGlzLmRlcGFydHVyZUlucHV0O1xyXG4gICAgY29uc3QgaXNDYWxlbmRhckNsaWNrID0gY2FsZW5kYXIuY29udGFpbnMoZXZ0LnRhcmdldCk7XHJcbiAgICBjb25zdCBpc091dHNpZGVDbGljayA9ICFpc0lucHV0Q2xpY2sgJiYgIWlzQ2FsZW5kYXJDbGljaztcclxuICAgIGlmIChpc091dHNpZGVDbGljaykge1xyXG4gICAgICB0aGlzLnVuc2hvd0NhbGVuZGFyKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25Fc2NVbnNob3dDYWxlbmRhciA9IGV2dCA9PiB7XHJcbiAgICBjb25zdCBpc0VzY1ByZXNzID0gZXZ0LmtleUNvZGUgPT09IDI3O1xyXG4gICAgaWYgKGlzRXNjUHJlc3MpIHtcclxuICAgICAgdGhpcy51bnNob3dDYWxlbmRhcigpO1xyXG4gICAgICB0aGlzLmFycml2YWxJbnB1dC5ibHVyKCk7XHJcbiAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQuYmx1cigpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uRm9jdXNBcnJpdmFsSW5wdXQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBpbnB1dERhdGUgPSB0aGlzLmFycml2YWxJbnB1dC52YWx1ZTtcclxuICAgIGNvbnN0IGlzSW5wdXREYXRlRnVsbCA9IHRoaXMuaGFzRGF0YUZ1bGwoaW5wdXREYXRlKTtcclxuICAgIGlmIChpc0lucHV0RGF0ZUZ1bGwpIHtcclxuICAgICAgY29uc3QgYXJyaXZhbElucHV0RGF0ZSA9IHRoaXMuZ2V0Q29udmVydGVEYXRlQnlVc2VySW5wdXQoaW5wdXREYXRlKTtcclxuICAgICAgY29uc3QgZGF0ZU1vcmVUaGlzRGF0ZSA9XHJcbiAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoYXJyaXZhbElucHV0RGF0ZSwgbmV3IERhdGUoKSkgPj0gMDtcclxuICAgICAgaWYgKGRhdGVNb3JlVGhpc0RhdGUpIHtcclxuICAgICAgICB0aGlzLnNob3dBcnJpdmFsTW9udGhDYWxlbmRhcigpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNob3dDYWxlbmRhcigpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uRm9jdXNEZXBhcnR1cmVJbnB1dCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGlucHV0RGF0ZSA9IHRoaXMuZGVwYXJ0dXJlSW5wdXQudmFsdWU7XHJcbiAgICBjb25zdCBpc0lucHV0RGF0ZUZ1bGwgPSB0aGlzLmhhc0RhdGFGdWxsKGlucHV0RGF0ZSk7XHJcbiAgICBpZiAoaXNJbnB1dERhdGVGdWxsKSB7XHJcbiAgICAgIHRoaXMuc2hvd0RlcGFydHVyZU1vbnRoQ2FsZW5kYXIoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2hvd0NhbGVuZGFyKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25JbnB1dERhdGVBcnJpdmFsID0gKCkgPT4ge1xyXG4gICAgY29uc3QgcGlja0RhdGUgPSB0aGlzLmFycml2YWxJbnB1dC52YWx1ZTtcclxuICAgIGNvbnN0IGlzRGF0YUZ1bGwgPSB0aGlzLmhhc0RhdGFGdWxsKHBpY2tEYXRlKTtcclxuICAgIGlmIChpc0RhdGFGdWxsKSB7XHJcbiAgICAgIGNvbnN0IGNvbnZlcnRlUGlja0RhdGUgPSB0aGlzLmdldENvbnZlcnRlRGF0ZUJ5VXNlcklucHV0KHBpY2tEYXRlKTtcclxuICAgICAgY29uc3QgYXJpYURhdGUgPSB0aGlzLmdldEFyaWFEYXRlQnlEYXRlKGNvbnZlcnRlUGlja0RhdGUpO1xyXG4gICAgICBjb25zdCBwaWNrQ2VsbCA9IHRoaXMuZ2V0Q2VsbEJ5QXJpYURhdGUoYXJpYURhdGUpO1xyXG4gICAgICBsZXQgaXNBcnJpdmFsRGF0ZU1vcmUgPSBmYWxzZTtcclxuICAgICAgaWYgKHRoaXMuZGVwYXJ0dXJlRGF0ZSkge1xyXG4gICAgICAgIGlzQXJyaXZhbERhdGVNb3JlID1cclxuICAgICAgICAgIHRoaXMuY29tcGFpcmVEYXRlKGNvbnZlcnRlUGlja0RhdGUsIHRoaXMuZGVwYXJ0dXJlRGF0ZSkgPiAwO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHBpY2tEYXRlTGVzc1RoaXNEYXRlID1cclxuICAgICAgICB0aGlzLmNvbXBhaXJlRGF0ZShjb252ZXJ0ZVBpY2tEYXRlLCBuZXcgRGF0ZSgpKSA8IDA7XHJcbiAgICAgIGlmIChwaWNrRGF0ZUxlc3NUaGlzRGF0ZSkge1xyXG4gICAgICAgIHRoaXMuc2hvd0Vycm9yQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgaWYgKHBpY2tDZWxsKSB7XHJcbiAgICAgICAgICBwaWNrQ2VsbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tZXJyb3JcIik7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgcGlja0NlbGwuY2xhc3NMaXN0LnJlbW92ZShcImRhdGUtcGlja2VyX19kYXktLWVycm9yXCIpO1xyXG4gICAgICAgICAgfSwgNzAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hcnJpdmFsSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3RDZWxsKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHBpY2tDZWxsKSB7XHJcbiAgICAgICAgICBsZXQgaXNBcnJpdmFsQ2VsbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIGlmICh0aGlzLmFycml2YWxEYXRlKSB7XHJcbiAgICAgICAgICAgIGlzQXJyaXZhbENlbGwgPVxyXG4gICAgICAgICAgICAgIGNvbnZlcnRlUGlja0RhdGUudG9EYXRlU3RyaW5nKCkgPT09XHJcbiAgICAgICAgICAgICAgdGhpcy5hcnJpdmFsRGF0ZS50b0RhdGVTdHJpbmcoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoIWlzQXJyaXZhbENlbGwpIHtcclxuICAgICAgICAgICAgbGV0IGlzQXJyRGF0ZUxlc3NEZXBEYXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kZXBhcnR1cmVEYXRlKSB7XHJcbiAgICAgICAgICAgICAgaXNBcnJEYXRlTGVzc0RlcERhdGUgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoY29udmVydGVQaWNrRGF0ZSwgdGhpcy5kZXBhcnR1cmVEYXRlKSA8IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc0FyckRhdGVMZXNzRGVwRGF0ZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5vblN0YXJ0U2VsZWN0UmFuZ2VEYXRlKHBpY2tDZWxsLCBjb252ZXJ0ZVBpY2tEYXRlKTtcclxuICAgICAgICAgICAgICB0aGlzLnBhaW50aW5nU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyaXZhbERhdGVNb3JlKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgICB0aGlzLm9uQ2xlYXJTZWxlY3RSYW5nZURhdGUoKTtcclxuICAgICAgICAgICAgICB0aGlzLmRlcGFydHVyZUlucHV0LnZhbHVlID0gXCJcIjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRW5kU2VsZWN0IHx8IHRoaXMuaXNTdGFydFNlbGVjdCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5vbkNsZWFyU2VsZWN0UmFuZ2VEYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyaXZhbERhdGVNb3JlKSB7XHJcbiAgICAgICAgICB0aGlzLmNsZWFyU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgdGhpcy5vbkNsZWFyU2VsZWN0UmFuZ2VEYXRlKCk7XHJcbiAgICAgICAgICB0aGlzLmRlcGFydHVyZUlucHV0LnZhbHVlID0gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub25TdGFydFNlbGVjdFJhbmdlRGF0ZShwaWNrQ2VsbCwgY29udmVydGVQaWNrRGF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvbklucHV0RGF0ZURlcGFydHVyZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGlucHV0QXJyaXZhbERhdGUgPSB0aGlzLmFycml2YWxJbnB1dC52YWx1ZTtcclxuICAgIGNvbnN0IGlzQXJyaXZhbERhdGVGdWxsID0gdGhpcy5oYXNEYXRhRnVsbChpbnB1dEFycml2YWxEYXRlKTtcclxuICAgIGNvbnN0IHBpY2tEYXRlID0gdGhpcy5kZXBhcnR1cmVJbnB1dC52YWx1ZTtcclxuICAgIGNvbnN0IGlzUGlja0RhdGVGdWxsID0gdGhpcy5oYXNEYXRhRnVsbChwaWNrRGF0ZSk7XHJcbiAgICBpZiAoIWlzQXJyaXZhbERhdGVGdWxsICYmIGlzUGlja0RhdGVGdWxsKSB7XHJcbiAgICAgIHRoaXMuc2hvd0Vycm9yQW5pbWF0aW9uKCk7XHJcbiAgICAgIHRoaXMuYXJyaXZhbElucHV0LmZvY3VzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoaXNBcnJpdmFsRGF0ZUZ1bGwpIHtcclxuICAgICAgICB0aGlzLm9uSW5wdXREYXRlQXJyaXZhbCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNQaWNrRGF0ZUZ1bGwpIHtcclxuICAgICAgICBjb25zdCBjb252ZXJ0ZVBpY2tEYXRlID0gdGhpcy5nZXRDb252ZXJ0ZURhdGVCeVVzZXJJbnB1dChwaWNrRGF0ZSk7XHJcbiAgICAgICAgY29uc3QgYXJpYURhdGUgPSB0aGlzLmdldEFyaWFEYXRlQnlEYXRlKGNvbnZlcnRlUGlja0RhdGUpO1xyXG4gICAgICAgIGNvbnN0IHBpY2tDZWxsID0gdGhpcy5nZXRDZWxsQnlBcmlhRGF0ZShhcmlhRGF0ZSk7XHJcbiAgICAgICAgaWYgKHBpY2tDZWxsKSB7XHJcbiAgICAgICAgICBjb25zdCBpc0RhdGVTZWxlY3RMZXNzID1cclxuICAgICAgICAgICAgdGhpcy5jb21wYWlyZURhdGUoY29udmVydGVQaWNrRGF0ZSwgdGhpcy5hcnJpdmFsRGF0ZSkgPCAwO1xyXG4gICAgICAgICAgaWYgKGlzRGF0ZVNlbGVjdExlc3MpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgcGlja0NlbGwuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLWVycm9yXCIpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICBwaWNrQ2VsbC5jbGFzc0xpc3QucmVtb3ZlKFwiZGF0ZS1waWNrZXJfX2RheS0tZXJyb3JcIik7XHJcbiAgICAgICAgICAgIH0sIDcwMCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaXNEZXBhcnR1cmVDZWxsID0gdGhpcy5kZXBhcnR1cmVDZWxsID09PSBwaWNrQ2VsbDtcclxuICAgICAgICAgICAgaWYgKCFpc0RlcGFydHVyZUNlbGwpIHtcclxuICAgICAgICAgICAgICBpZiAodGhpcy5pc0VuZFNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMub25FbmRTZWxlY3RSYW5nZURhdGUocGlja0NlbGwsIGNvbnZlcnRlUGlja0RhdGUpO1xyXG4gICAgICAgICAgICAgIHRoaXMucGFpbnRpbmdTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgaXNEYXRlU2VsZWN0TGVzcyA9XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGFpcmVEYXRlKGNvbnZlcnRlUGlja0RhdGUsIHRoaXMuYXJyaXZhbERhdGUpIDwgMDtcclxuICAgICAgICAgIGlmIChpc0RhdGVTZWxlY3RMZXNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9yQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwYXJ0dXJlSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkVuZFNlbGVjdFJhbmdlRGF0ZShwaWNrQ2VsbCwgY29udmVydGVQaWNrRGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucGFpbnRpbmdTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb25TdGFydFNlbGVjdFJhbmdlRGF0ZSA9IChjZWxsLCBzdGFydERhdGUpID0+IHtcclxuICAgIGlmIChjZWxsKSB7XHJcbiAgICAgIHRoaXMuYXJyaXZhbENlbGwgPSBjZWxsO1xyXG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1zZWxlY3RcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pc1N0YXJ0U2VsZWN0ID0gdHJ1ZTtcclxuICAgIHRoaXMuaXNFbmRTZWxlY3QgPSBmYWxzZTtcclxuICAgIHRoaXMuYXJyaXZhbERhdGUgPSBzdGFydERhdGU7XHJcbiAgfTtcclxuXHJcbiAgb25FbmRTZWxlY3RSYW5nZURhdGUgPSAoY2VsbCwgZGF0ZUVuZCkgPT4ge1xyXG4gICAgaWYgKGNlbGwpIHtcclxuICAgICAgdGhpcy5kZXBhcnR1cmVDZWxsID0gY2VsbDtcclxuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tc2VsZWN0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaXNTdGFydFNlbGVjdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc0VuZFNlbGVjdCA9IHRydWU7XHJcbiAgICB0aGlzLmRlcGFydHVyZURhdGUgPSBkYXRlRW5kO1xyXG4gIH07XHJcblxyXG4gIG9uQ2xlYXJTZWxlY3RSYW5nZURhdGUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmFycml2YWxEYXRlID0gbnVsbDtcclxuICAgIHRoaXMuZGVwYXJ0dXJlRGF0ZSA9IG51bGw7XHJcbiAgICB0aGlzLmFycml2YWxDZWxsID0gbnVsbDtcclxuICAgIHRoaXMuZGVwYXJ0dXJlQ2VsbCA9IG51bGw7XHJcbiAgICB0aGlzLmlzU3RhcnRTZWxlY3QgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNFbmRTZWxlY3QgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICBvbkZ1bGxDbGVhckNhbGVuZGFyID0gKCkgPT4ge1xyXG4gICAgdGhpcy5vbkNsZWFyU2VsZWN0UmFuZ2VEYXRlKCk7XHJcbiAgICB0aGlzLmNsZWFyU2VsZWN0Q2VsbCgpO1xyXG4gICAgdGhpcy5hcnJpdmFsSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgdGhpcy5kZXBhcnR1cmVJbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICB0aGlzLnVwZGF0ZUN1cnJlbnREYXRlKG5ldyBEYXRlKCkpO1xyXG4gIH07XHJcblxyXG4gIG9uU2VsZWN0RGF0ZSA9IGV2dCA9PiB7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGlzVGRUYWcgPSBldnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZFwiO1xyXG4gICAgaWYgKGlzVGRUYWcpIHtcclxuICAgICAgaWYgKHRoaXMuaXNFbmRTZWxlY3QpIHtcclxuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgIHRoaXMub25DbGVhclNlbGVjdFJhbmdlRGF0ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB0ZCA9IGV2dC50YXJnZXQ7XHJcbiAgICAgIGNvbnN0IHNlbGVjdERhdGUgPSBuZXcgRGF0ZSh0ZC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWRhdGVcIikpO1xyXG4gICAgICBjb25zdCBzZWxlY3REYXkgPSBnZXRUd29EaWdpdE51bWJlclN0cmluZyhzZWxlY3REYXRlLmdldERhdGUoKSk7XHJcbiAgICAgIGNvbnN0IHNlbGVjdE1vbnRoID0gZ2V0VHdvRGlnaXROdW1iZXJTdHJpbmcoc2VsZWN0RGF0ZS5nZXRNb250aCgpICsgMSk7XHJcbiAgICAgIGNvbnN0IHNlbGVjdFllYXIgPSBzZWxlY3REYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgIGNvbnN0IHNlbGVjdERhdGVUZXh0ID0gYCR7c2VsZWN0RGF5fS4ke3NlbGVjdE1vbnRofS4ke3NlbGVjdFllYXJ9YDtcclxuICAgICAgY29uc3QgaXNDZWxsRG91YmxlU2VsZWN0ID1cclxuICAgICAgICB0ZCA9PT0gdGhpcy5hcnJpdmFsQ2VsbCB8fCB0ZCA9PT0gdGhpcy5kZXBhcnR1cmVDZWxsO1xyXG4gICAgICBjb25zdCBpc0RhdGVMZXNzVGhpc0RhdGUgPSB0aGlzLmNvbXBhaXJlRGF0ZShzZWxlY3REYXRlLCBuZXcgRGF0ZSgpKSA8IDA7XHJcbiAgICAgIGlmIChpc0RhdGVMZXNzVGhpc0RhdGUpIHtcclxuICAgICAgICB0aGlzLnNob3dFcnJvckFuaW1hdGlvbigpO1xyXG4gICAgICAgIHRkLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1lcnJvclwiKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRkLmNsYXNzTGlzdC5yZW1vdmUoXCJkYXRlLXBpY2tlcl9fZGF5LS1lcnJvclwiKTtcclxuICAgICAgICB9LCA3MDApO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTdGFydFNlbGVjdCAmJiAhaXNDZWxsRG91YmxlU2VsZWN0KSB7XHJcbiAgICAgICAgY29uc3QgaXNEYXRlU2VsZWN0TGVzcyA9XHJcbiAgICAgICAgICB0aGlzLmNvbXBhaXJlRGF0ZShzZWxlY3REYXRlLCB0aGlzLmFycml2YWxEYXRlKSA8IDA7XHJcbiAgICAgICAgaWYgKGlzRGF0ZVNlbGVjdExlc3MpIHtcclxuICAgICAgICAgIHRoaXMuc2hvd0Vycm9yQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICB0ZC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2RheS0tZXJyb3JcIik7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGQuY2xhc3NMaXN0LnJlbW92ZShcImRhdGUtcGlja2VyX19kYXktLWVycm9yXCIpO1xyXG4gICAgICAgICAgfSwgNzAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5vbkVuZFNlbGVjdFJhbmdlRGF0ZSh0ZCwgc2VsZWN0RGF0ZSk7XHJcbiAgICAgICAgICB0aGlzLmRlcGFydHVyZUlucHV0LnZhbHVlID0gc2VsZWN0RGF0ZVRleHQ7XHJcbiAgICAgICAgICB0aGlzLnBhaW50aW5nU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50RGF0ZShzZWxlY3REYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNDZWxsRG91YmxlU2VsZWN0ICYmICF0aGlzLmlzRW5kU2VsZWN0KSB7XHJcbiAgICAgICAgdGhpcy5vbkVuZFNlbGVjdFJhbmdlRGF0ZSh0ZCwgc2VsZWN0RGF0ZSk7XHJcbiAgICAgICAgdGhpcy5kZXBhcnR1cmVJbnB1dC52YWx1ZSA9IHNlbGVjdERhdGVUZXh0O1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ3VycmVudERhdGUoc2VsZWN0RGF0ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5vblN0YXJ0U2VsZWN0UmFuZ2VEYXRlKHRkLCBzZWxlY3REYXRlKTtcclxuICAgICAgICB0aGlzLmFycml2YWxJbnB1dC52YWx1ZSA9IHNlbGVjdERhdGVUZXh0O1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ3VycmVudERhdGUoc2VsZWN0RGF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBnZXRBcmlhRGF0ZUJ5RGF0ZSA9IGRhdGUgPT4ge1xyXG4gICAgY29uc3QgYXJpYURheSA9IGRhdGUuZ2V0RGF0ZSgpO1xyXG4gICAgY29uc3QgYXJpYU1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xyXG4gICAgY29uc3QgYXJpYVllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBhcmlhRGF0ZSA9IGAke2FyaWFZZWFyfS0ke2FyaWFNb250aCArIDF9LSR7YXJpYURheX1gO1xyXG4gICAgcmV0dXJuIGFyaWFEYXRlO1xyXG4gIH07XHJcblxyXG4gIGdldENvbnZlcnRlRGF0ZUJ5VXNlcklucHV0ID0gdXNlckRhdGUgPT4ge1xyXG4gICAgY29uc3Qgc3BsaXRVc2VyRGF0ZSA9IHVzZXJEYXRlLnNwbGl0KFwiLlwiKTtcclxuICAgIGNvbnN0IGRheSA9IHNwbGl0VXNlckRhdGVbMF07XHJcbiAgICBjb25zdCBtb250aCA9IHNwbGl0VXNlckRhdGVbMV07XHJcbiAgICBjb25zdCB5ZWFyID0gc3BsaXRVc2VyRGF0ZVsyXTtcclxuICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7XHJcbiAgfTtcclxuXHJcbiAgZ2V0TnVtYmVyUm93ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY3VycmVudFllYXIgPSB0aGlzLmN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBjdXJyZW50TW9udGggPSB0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCk7XHJcbiAgICBjb25zdCBsYXN0RGF5Q3VycmVudE1vbnRoID0gbmV3IERhdGUoXHJcbiAgICAgIGN1cnJlbnRZZWFyICsgMSxcclxuICAgICAgY3VycmVudE1vbnRoICsgMSxcclxuICAgICAgMFxyXG4gICAgKS5nZXREYXRlKCk7XHJcbiAgICBjb25zdCBsYXN0V2Vla0RheVByZXZNb250aCA9IG5ldyBEYXRlKFxyXG4gICAgICBjdXJyZW50WWVhcixcclxuICAgICAgY3VycmVudE1vbnRoLFxyXG4gICAgICAwXHJcbiAgICApLmdldERheSgpO1xyXG4gICAgY29uc3QgaXNMYXN0V2Vla0RheVN1dGVyZGF5ID0gbGFzdFdlZWtEYXlQcmV2TW9udGggPT09IDY7XHJcbiAgICBjb25zdCBpc0xhc3RXZWVrRGF5RnJpZGF5ID0gbGFzdFdlZWtEYXlQcmV2TW9udGggPT09IDU7XHJcbiAgICBjb25zdCBpc0xhc3RXZWVrRGF5U3VuZGF5ID0gbGFzdFdlZWtEYXlQcmV2TW9udGggPT09IDA7XHJcbiAgICBsZXQgbnVtYmVyUm93ID0gNTtcclxuXHJcbiAgICBpZiAoaXNMYXN0V2Vla0RheVN1dGVyZGF5ICYmIGxhc3REYXlDdXJyZW50TW9udGggPj0gMzApIHtcclxuICAgICAgbnVtYmVyUm93ID0gNjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNMYXN0V2Vla0RheUZyaWRheSAmJiBsYXN0RGF5Q3VycmVudE1vbnRoID09PSAzMSkge1xyXG4gICAgICBudW1iZXJSb3cgPSA2O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0xhc3RXZWVrRGF5U3VuZGF5ICYmIGxhc3REYXlDdXJyZW50TW9udGggPT09IDI4KSB7XHJcbiAgICAgIG51bWJlclJvdyA9IDQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVtYmVyUm93O1xyXG4gIH07XHJcblxyXG4gIGdldENhbGVuZGFyVGFibGVEYXRlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdGFibGVGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgIGNvbnN0IG5vd0RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgY3VycmVudFllYXIgPSB0aGlzLmN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBjdXJyZW50TW9udGggPSB0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCk7XHJcbiAgICBjb25zdCBsYXN0V2Vla0RheVByZXZNb250aCA9IG5ldyBEYXRlKFxyXG4gICAgICBjdXJyZW50WWVhcixcclxuICAgICAgY3VycmVudE1vbnRoLFxyXG4gICAgICAwXHJcbiAgICApLmdldERheSgpO1xyXG4gICAgY29uc3QgbGFzdERheVByZXZNb250aCA9IG5ldyBEYXRlKGN1cnJlbnRZZWFyLCBjdXJyZW50TW9udGgsIDApLmdldERhdGUoKTtcclxuICAgIGNvbnN0IG51bWJlckNvbHVtbiA9IDc7XHJcbiAgICBjb25zdCBudW1iZXJSb3cgPSB0aGlzLmdldE51bWJlclJvdygpO1xyXG5cclxuICAgIGxldCB2aWV3TW9udGg7XHJcbiAgICBsZXQgbnVtYmVyRGF5O1xyXG5cclxuICAgIGNvbnN0IGlzTGFzdFdlZWtEYXlTdW5kYXkgPSBsYXN0V2Vla0RheVByZXZNb250aCA9PT0gMDtcclxuXHJcbiAgICBpZiAoaXNMYXN0V2Vla0RheVN1bmRheSkge1xyXG4gICAgICBudW1iZXJEYXkgPSAwO1xyXG4gICAgICB2aWV3TW9udGggPSBjdXJyZW50TW9udGg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBudW1iZXJEYXkgPSBsYXN0RGF5UHJldk1vbnRoIC0gbGFzdFdlZWtEYXlQcmV2TW9udGg7XHJcbiAgICAgIHZpZXdNb250aCA9IGN1cnJlbnRNb250aCAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJSb3c7IGkrKykge1xyXG4gICAgICBjb25zdCB0YWJsZVRyID0gZ2V0SHRtbEVsZW1lbnQoXCJ0clwiKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtYmVyQ29sdW1uOyBqKyspIHtcclxuICAgICAgICBjb25zdCB2aWV3RGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnRZZWFyLCB2aWV3TW9udGgsICsrbnVtYmVyRGF5KTtcclxuICAgICAgICBjb25zdCB0YWJsZVRkID0gZ2V0SHRtbEVsZW1lbnQoXHJcbiAgICAgICAgICBcInRkXCIsXHJcbiAgICAgICAgICBcImRhdGUtcGlja2VyX19kYXlcIixcclxuICAgICAgICAgIHZpZXdEYXRlLmdldERhdGUoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgaXNOb3dEYXRlID0gdGhpcy5jb21wYWlyZURhdGUodmlld0RhdGUsIG5vd0RhdGUpID09PSAwO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaGFzQ3VycmVudE1vbnRoKHZpZXdEYXRlKSAmJiAhaXNOb3dEYXRlKSB7XHJcbiAgICAgICAgICB0YWJsZVRkLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fZGF5LS1ub3QtY3VycmVudFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc05vd0RhdGUpIHtcclxuICAgICAgICAgIHRhYmxlVGQuY2xhc3NMaXN0LmFkZChcImRhdGUtcGlja2VyX19kYXktLWN1cnJlbnRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB2aWV3TW9udGhBdHIgPSB2aWV3RGF0ZS5nZXRNb250aCgpICsgMTtcclxuICAgICAgICBjb25zdCB2aWV3RGF0ZUF0ciA9IGAke3ZpZXdEYXRlLmdldEZ1bGxZZWFyKCl9LSR7dmlld01vbnRoQXRyfS0ke3ZpZXdEYXRlLmdldERhdGUoKX1gO1xyXG5cclxuICAgICAgICB0YWJsZVRkLnNldEF0dHJpYnV0ZShcImFyaWEtZGF0ZVwiLCB2aWV3RGF0ZUF0cik7XHJcbiAgICAgICAgdGFibGVUci5hcHBlbmRDaGlsZCh0YWJsZVRkKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGFibGVGcmFnbWVudC5hcHBlbmRDaGlsZCh0YWJsZVRyKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGFibGVGcmFnbWVudDtcclxuICB9O1xyXG5cclxuICBnZXRDZWxsQnlBcmlhRGF0ZSA9IGFyaWFEYXRlID0+IHtcclxuICAgIGNvbnN0IGNlbGxzID0gdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZFwiKTtcclxuICAgIGxldCBjZWxsO1xyXG4gICAgY2VsbHMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgY29uc3QgYXJpYURhdGVJdGVtID0gaXRlbS5nZXRBdHRyaWJ1dGUoXCJhcmlhLWRhdGVcIik7XHJcbiAgICAgIGlmIChhcmlhRGF0ZUl0ZW0gPT09IGFyaWFEYXRlKSBjZWxsID0gaXRlbTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNlbGw7XHJcbiAgfTtcclxuXHJcbiAgZ2V0Q2FsZW5kYXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbFNlY3Rpb24gPSBnZXRIdG1sRWxlbWVudChcInNlY3Rpb25cIiwgXCJkYXRlLXBpY2tlclwiKTtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXJIdG1sV3JhcCA9IGdldEh0bWxFbGVtZW50KFwiZGl2XCIsIFwiZGF0ZS1waWNrZXJfX3dyYXBcIik7XHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbENvbnRyb2wgPSB0aGlzLmdldENhbGVuZGFyVG9wQ29udHJvbCgpO1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlckh0bWxUYWJsZSA9IHRoaXMuZ2V0Q2FsZW5kYXJUYWJsZSgpO1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlckh0bWxCb3RDb250cm9sID0gdGhpcy5nZXRDYWxlbmRhckJvdENvbnRyb2woKTtcclxuICAgIGRhdGVQaWNrZXJIdG1sV3JhcC5hcHBlbmRDaGlsZChkYXRlUGlja2VySHRtbENvbnRyb2wpO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxXcmFwLmFwcGVuZENoaWxkKGRhdGVQaWNrZXJIdG1sVGFibGUpO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxXcmFwLmFwcGVuZENoaWxkKGRhdGVQaWNrZXJIdG1sQm90Q29udHJvbCk7XHJcbiAgICBkYXRlUGlja2VySHRtbFNlY3Rpb24uYXBwZW5kQ2hpbGQoZGF0ZVBpY2tlckh0bWxXcmFwKTtcclxuXHJcbiAgICByZXR1cm4gZGF0ZVBpY2tlckh0bWxTZWN0aW9uO1xyXG4gIH07XHJcblxyXG4gIGdldENhbGVuZGFyVG9wQ29udHJvbCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXJIdG1sQ29udHJvbCA9IGdldEh0bWxFbGVtZW50KFwiZGl2XCIsIFwiZGF0ZS1waWNrZXJfX2NvbnRyb2xcIik7XHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbFNsaWRlckJ0blByZXYgPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJidXR0b25cIixcclxuICAgICAgXCJkYXRlLXBpY2tlcl9fc2xpZGVyLWJ0blwiLFxyXG4gICAgICBcItCd0LDQt9Cw0LRcIlxyXG4gICAgKTtcclxuICAgIGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuUHJldi5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX3NsaWRlci1idG4tLXByZXZcIik7XHJcbiAgICBkYXRlUGlja2VySHRtbFNsaWRlckJ0blByZXYudHlwZSA9IFwiYnV0dG9uXCI7XHJcblxyXG4gICAgZGF0ZVBpY2tlckh0bWxTbGlkZXJCdG5QcmV2LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldnQgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29uc3QgeWVhciA9IHRoaXMuY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgY29uc3QgbW9udGggPSB0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgIGNvbnN0IGRheSA9IDE7XHJcbiAgICAgIGNvbnN0IHByZXZNb250aERhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7XHJcbiAgICAgIHRoaXMudXBkYXRlQ3VycmVudERhdGUocHJldk1vbnRoRGF0ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbFNsaWRlckJ0bk5leHQgPSBnZXRIdG1sRWxlbWVudChcclxuICAgICAgXCJidXR0b25cIixcclxuICAgICAgXCJkYXRlLXBpY2tlcl9fc2xpZGVyLWJ0blwiLFxyXG4gICAgICBcItCS0L/QtdGA0LXQtFwiXHJcbiAgICApO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxTbGlkZXJCdG5OZXh0LmNsYXNzTGlzdC5hZGQoXCJkYXRlLXBpY2tlcl9fc2xpZGVyLWJ0bi0tbmV4dFwiKTtcclxuICAgIGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuTmV4dC50eXBlID0gXCJidXR0b25cIjtcclxuXHJcbiAgICBkYXRlUGlja2VySHRtbFNsaWRlckJ0bk5leHQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2dCA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBjb25zdCB5ZWFyID0gdGhpcy5jdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICBjb25zdCBtb250aCA9IHRoaXMuY3VycmVudERhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgY29uc3QgZGF5ID0gMTtcclxuICAgICAgY29uc3QgcHJldk1vbnRoRGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoICsgMSwgZGF5KTtcclxuICAgICAgdGhpcy51cGRhdGVDdXJyZW50RGF0ZShwcmV2TW9udGhEYXRlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG1vbnRoTmFtZSA9IG1vbnRoUnVzVHJhbnNsYXRlW3RoaXMuY3VycmVudERhdGUuZ2V0TW9udGgoKV07XHJcbiAgICBjb25zdCB5ZWFyTmFtZSA9IHRoaXMuY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICBjb25zdCBkYXRlUGlja2VySHRtbFRpdGxlID0gZ2V0SHRtbEVsZW1lbnQoXHJcbiAgICAgIFwiaDJcIixcclxuICAgICAgXCJkYXRlLXBpY2tlcl9fdGl0bGVcIixcclxuICAgICAgYCR7bW9udGhOYW1lfSAke3llYXJOYW1lfWBcclxuICAgICk7XHJcblxyXG4gICAgZGF0ZVBpY2tlckh0bWxUaXRsZS5pZCA9IFwiZGF0ZS1waWNrZXItbWFpbi10aXRsZVwiO1xyXG5cclxuICAgIGRhdGVQaWNrZXJIdG1sQ29udHJvbC5hcHBlbmRDaGlsZChkYXRlUGlja2VySHRtbFNsaWRlckJ0blByZXYpO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxDb250cm9sLmFwcGVuZENoaWxkKGRhdGVQaWNrZXJIdG1sVGl0bGUpO1xyXG4gICAgZGF0ZVBpY2tlckh0bWxDb250cm9sLmFwcGVuZENoaWxkKGRhdGVQaWNrZXJIdG1sU2xpZGVyQnRuTmV4dCk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGVQaWNrZXJIdG1sQ29udHJvbDtcclxuICB9O1xyXG5cclxuICBnZXRDYWxlbmRhclRhYmxlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2FsZW5kYXJUYWJsZSA9IGdldEh0bWxFbGVtZW50KFwidGFibGVcIiwgXCJkYXRlLXBpY2tlcl9fY2FsZW5kYXJcIik7XHJcbiAgICBjb25zdCB0SGVhZCA9IGdldEh0bWxFbGVtZW50KFwidGhlYWRcIik7XHJcbiAgICBjb25zdCB0Qm9keSA9IGdldEh0bWxFbGVtZW50KFwidGJvZHlcIik7XHJcbiAgICBjb25zdCB0YWJsZVRySGVhZCA9IGdldEh0bWxFbGVtZW50KFwidHJcIik7XHJcbiAgICBjb25zdCB0YWJsZUhlYWQgPSBbXCLQn9C9XCIsIFwi0JLRglwiLCBcItCh0YBcIiwgXCLQp9GCXCIsIFwi0J/RglwiLCBcItCh0LFcIiwgXCLQktGBXCJdO1xyXG5cclxuICAgIHRhYmxlSGVhZC5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCB0aCA9IGdldEh0bWxFbGVtZW50KFwidGhcIiwgXCJkYXRlLXBpY2tlcl9fdGhcIiwgaXRlbSk7XHJcbiAgICAgIHRhYmxlVHJIZWFkLmFwcGVuZENoaWxkKHRoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRIZWFkLmFwcGVuZENoaWxkKHRhYmxlVHJIZWFkKTtcclxuICAgIGNvbnN0IHRhYmxlRGF0ZSA9IHRoaXMuZ2V0Q2FsZW5kYXJUYWJsZURhdGUoKTtcclxuXHJcbiAgICB0Qm9keS5hcHBlbmRDaGlsZCh0YWJsZURhdGUpO1xyXG4gICAgdEJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub25TZWxlY3REYXRlKTtcclxuXHJcbiAgICBjYWxlbmRhclRhYmxlLmFwcGVuZENoaWxkKHRIZWFkKTtcclxuICAgIGNhbGVuZGFyVGFibGUuYXBwZW5kQ2hpbGQodEJvZHkpO1xyXG4gICAgcmV0dXJuIGNhbGVuZGFyVGFibGU7XHJcbiAgfTtcclxuXHJcbiAgZ2V0Q2FsZW5kYXJCb3RDb250cm9sID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlckh0bWxDb250cm9sID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkYXRlLXBpY2tlcl9fY29udHJvbFwiKTtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXJCdXR0b25zID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgdGV4dDogXCLQntGH0LjRgdGC0LjRgtGMXCIsXHJcbiAgICAgICAgaXNBY2NlbnQ6IGZhbHNlLFxyXG4gICAgICAgIGNsaWNrSGFuZGxlcjogdGhpcy5vbkZ1bGxDbGVhckNhbGVuZGFyXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgdGV4dDogXCLQn9GA0LjQvNC10L3QuNGC0YxcIiwgaXNBY2NlbnQ6IHRydWUsIGNsaWNrSGFuZGxlcjogdGhpcy51bnNob3dDYWxlbmRhciB9XHJcbiAgICBdO1xyXG5cclxuICAgIGRhdGVQaWNrZXJCdXR0b25zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIGNvbnN0IGJ0biA9IGdldEh0bWxFbGVtZW50KFwiYnV0dG9uXCIsIFwiZGF0ZS1waWNrZXJfX2J1dHRvblwiLCBpdGVtLnRleHQpO1xyXG4gICAgICBidG4udHlwZSA9IFwiYnV0dG9uXCI7XHJcblxyXG4gICAgICBpZiAoaXRlbS5pc0FjY2VudCkge1xyXG4gICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1waWNrZXJfX2J1dHRvbi0tYWNjZW50XCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXRlbS5jbGlja0hhbmRsZXIpIHtcclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2dCA9PiB7XHJcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGl0ZW0uY2xpY2tIYW5kbGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRhdGVQaWNrZXJIdG1sQ29udHJvbC5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGVQaWNrZXJIdG1sQ29udHJvbDtcclxuICB9O1xyXG5cclxuICB1cGRhdGVDdXJyZW50RGF0ZSA9IGRhdGUgPT4ge1xyXG4gICAgdGhpcy5jdXJyZW50RGF0ZSA9IGRhdGU7XHJcbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyKCk7XHJcbiAgICB0aGlzLnBhaW50aW5nU2VsZWN0Q2VsbCgpO1xyXG4gIH07XHJcblxyXG4gIHVwZGF0ZUNhbGVuZGFyID0gKCkgPT4ge1xyXG4gICAgdGhpcy51cGRhdGVDYWxlbmRhclRpdGxlKCk7XHJcbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyVGFibGUoKTtcclxuICB9O1xyXG5cclxuICB1cGRhdGVDYWxlbmRhclRpdGxlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2RhdGUtcGlja2VyLW1haW4tdGl0bGVcIik7XHJcbiAgICBjb25zdCBtb250aE5hbWUgPSBtb250aFJ1c1RyYW5zbGF0ZVt0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCldO1xyXG4gICAgY29uc3QgeWVhck5hbWUgPSB0aGlzLmN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IGAke21vbnRoTmFtZX0gJHt5ZWFyTmFtZX1gO1xyXG4gIH07XHJcblxyXG4gIHVwZGF0ZUNhbGVuZGFyVGFibGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWxlbmRhclRhYmxlID0gdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoXCJ0YWJsZVwiKTtcclxuICAgIGNvbnN0IGNhbGVuZGFyVGFibGVCb2R5ID0gY2FsZW5kYXJUYWJsZS5xdWVyeVNlbGVjdG9yKFwidGJvZHlcIik7XHJcbiAgICBjYWxlbmRhclRhYmxlLnJlbW92ZUNoaWxkKGNhbGVuZGFyVGFibGVCb2R5KTtcclxuICAgIGNvbnN0IHRCb2R5ID0gZ2V0SHRtbEVsZW1lbnQoXCJ0Ym9keVwiKTtcclxuICAgIGNvbnN0IHRhYmxlRGF0ZSA9IHRoaXMuZ2V0Q2FsZW5kYXJUYWJsZURhdGUoKTtcclxuICAgIHRCb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uU2VsZWN0RGF0ZSk7XHJcbiAgICB0Qm9keS5hcHBlbmRDaGlsZCh0YWJsZURhdGUpO1xyXG4gICAgY2FsZW5kYXJUYWJsZS5hcHBlbmRDaGlsZCh0Qm9keSk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyQ2FsZW5kYXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjYWxlbmRhciA9IHRoaXMuZ2V0Q2FsZW5kYXIoKTtcclxuICAgIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChjYWxlbmRhcik7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0ZVBpY2tlcjtcclxuIiwiaW1wb3J0IFwiLi4vLi4vc3R5bGUvaW5kZXguc2Nzc1wiO1xyXG5pbXBvcnQgXCIuL21haW4uc2Nzc1wiO1xyXG5pbXBvcnQgRGF0ZVBpY2tlciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9kYXRlLXBpY2tlci9kYXRlLXBpY2tlclwiO1xyXG5pbXBvcnQgRHJvcERvd24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvZHJvcC1kb3duL2Ryb3AtZG93blwiO1xyXG5pbXBvcnQgXCIuLi8uLi9jb21wb25lbnRzL21haW4tbWVudS9tYWluLW1lbnVcIjtcclxuXHJcbmNvbnN0IGRhdGVQaWNrZXJEb21JbmZvID0ge1xyXG4gIHBhcmVudE5vZGVJZDogXCJkYXRlLXBpY2tlci1jb250YWluZXJcIixcclxuICBhcnJpdmFsSW5wdXRJZDogXCJhcnJpdmFsLWlucHV0XCIsXHJcbiAgYXJyaXZhbFNwbGl0QnRuSWQ6IFwiYXJyaXZhbC1zcGxpdC1idG5cIixcclxuICBkZXBhcnR1cmVJbnB1dElkOiBcImRlcGFydHVyZS1pbnB1dFwiLFxyXG4gIGRlcGFydHVyZVNwbGl0QnRuSWQ6IFwiZGVwYXJ0dXJlLXNwbGl0LWJ0blwiXHJcbn07XHJcblxyXG5jb25zdCBkYXRlUGlja2VyID0gbmV3IERhdGVQaWNrZXIoZGF0ZVBpY2tlckRvbUluZm8pO1xyXG5kYXRlUGlja2VyLnJlbmRlckNhbGVuZGFyKCk7XHJcblxyXG5jb25zdCBkcm9wRG93bkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZHJvcC1kb3duLWNvbnRhaW5lclwiKTtcclxuY29uc3QgaW5wdXREcm9wRG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbnVtYmVyLWd1ZXN0cy1pbnB1dFwiKTtcclxuXHJcbmNvbnN0IGRyb3BEb3duT3B0aW9ucyA9IHtcclxuICBjb250YWluZXI6IGRyb3BEb3duQ29udGFpbmVyLFxyXG4gIGlucHV0OiBpbnB1dERyb3BEb3duLFxyXG4gIGNvdW50RWxlbWVudHM6IFtcclxuICAgIHsgbmFtZTogXCLQktC30YDQvtGB0LvRi9C1XCIsIGNvdW50R3JvdXBOYW1lOiBcImd1ZXN0XCIgfSxcclxuICAgIHsgbmFtZTogXCLQlNC10YLQuFwiLCBjb3VudEdyb3VwTmFtZTogXCJndWVzdFwiIH0sXHJcbiAgICB7IG5hbWU6IFwi0JzQu9Cw0LTQtdC90YbRi1wiLCBjb3VudEdyb3VwTmFtZTogXCJjaGlsZFwiIH1cclxuICBdLFxyXG4gIGNvdW50R3JvdXBWaWV3OiB7XHJcbiAgICBndWVzdDogeyBjb3VudGVyOiAwLCB2aWV3czogW1wi0LPQvtGB0YLRjFwiLCBcItCz0L7RgdGC0Y9cIiwgXCLQs9C+0YHRgtC10LlcIl0gfSxcclxuICAgIGNoaWxkOiB7IGNvdW50ZXI6IDAsIHZpZXdzOiBbXCLQvNC70LDQtNC10L3QtdGGXCIsIFwi0LzQu9Cw0LTQtdC90YbQsFwiLCBcItC80LvQsNC00LXQvdGG0LXQslwiXSB9XHJcbiAgfSxcclxuICBwbGFjZWhvbGRlcjogXCJD0LrQvtC70YzQutC+INCz0L7RgdGC0LXQuVwiXHJcbn07XHJcblxyXG5jb25zdCBkcm9wRG93biA9IG5ldyBEcm9wRG93bihkcm9wRG93bk9wdGlvbnMpO1xyXG5kcm9wRG93bi5pbml0KCk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsImZ1bmN0aW9uIGdldEh0bWxFbGVtZW50KHRhZ05hbWUsIGNsYXNzTmFtZSwgdGV4dCkge1xyXG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xyXG5cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICB9XHJcblxyXG4gIGlmICh0ZXh0KSB7XHJcbiAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcclxuICB9XHJcblxyXG4gIHJldHVybiBlbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIobWluLCBtYXgpIHtcclxuICBjb25zdCByYW5kb21OdW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoK21heCAtICttaW4pKSArICttaW47XHJcbiAgcmV0dXJuIHJhbmRvbU51bWJlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVjbE9mTnVtKG51bWJlciwgdGl0bGVzKSB7XHJcbiAgY29uc3QgY2FzZXMgPSBbMiwgMCwgMSwgMSwgMSwgMl07XHJcbiAgcmV0dXJuIHRpdGxlc1tcclxuICAgIG51bWJlciAlIDEwMCA+IDQgJiYgbnVtYmVyICUgMTAwIDwgMjBcclxuICAgICAgPyAyXHJcbiAgICAgIDogY2FzZXNbbnVtYmVyICUgMTAgPCA1ID8gbnVtYmVyICUgMTAgOiA1XVxyXG4gIF07XHJcbn1cclxuXHJcbmNsYXNzIERyb3BEb3duIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucy5jb250YWluZXIpIHtcclxuICAgICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcclxuICAgICAgY29uc3QgZHJvcERvd25QYXJlbnQgPSBnZXRIdG1sRWxlbWVudChcInNlY3Rpb25cIiwgXCJkcm9wLWRvd25cIik7XHJcbiAgICAgIHRoaXMuZHJvcERvd25QYXJlbnQgPSBkcm9wRG93blBhcmVudDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBjb250YWluZXIobm9kZSkgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5pbnB1dCkge1xyXG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXJcclxuICAgICAgICA/IG9wdGlvbnMucGxhY2Vob2xkZXJcclxuICAgICAgICA6IFwi0JLRi9Cx0LXRgNC40YLQtSDRjdC70LjQvNC10L3RglwiO1xyXG4gICAgICB0aGlzLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XHJcbiAgICAgIHRoaXMuaW5wdXQgPSBvcHRpb25zLmlucHV0O1xyXG4gICAgICBjb25zdCBpc0hhdmVTdGFydFZhbHVlID0gdGhpcy5oYXNIYXZlU3RhcnRWYWx1ZShvcHRpb25zLmNvdW50RWxlbWVudHMpO1xyXG4gICAgICBpZiAoaXNIYXZlU3RhcnRWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyU3RhcnRDb3VudChvcHRpb25zKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmlucHV0LnRleHRDb250ZW50ID0gcGxhY2Vob2xkZXI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghb3B0aW9ucy5pc1BpblNob3cpIHtcclxuICAgICAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNob3cpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgaW5wdXQobm9kZSkgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5jb3VudEVsZW1lbnRzKSB7XHJcbiAgICAgIHRoaXMuY291bnRFbGVtZW50cyA9IG9wdGlvbnMuY291bnRFbGVtZW50cztcclxuICAgICAgdGhpcy5pbnB1dFZpZXdzID0gW107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIFwiRXhwZWN0ZWQgY291bnRFbGVtZW50cyhBcnJheSkgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5jb3VudEdyb3VwVmlldykge1xyXG4gICAgICB0aGlzLmNvdW50R3JvdXBWaWV3ID0gb3B0aW9ucy5jb3VudEdyb3VwVmlldztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgXCJFeHBlY3RlZCBjb3VudEdyb3VwVmlldyhBcnJheSkgaW5zaWRlIGNvbnN0cnVjdG9yIG9iamVjdCBidXQgbm90IHJlY2VpdmVkXCJcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5pc0hpZGVDb250cm9sKSB7XHJcbiAgICAgIHRoaXMuaXNIaWRlQ29udHJvbCA9IG9wdGlvbnMuaXNIaWRlQ29udHJvbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5pc1BpblNob3cpIHtcclxuICAgICAgdGhpcy5pc1BpblNob3cgPSBvcHRpb25zLmlzUGluU2hvdztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhc0hhdmVTdGFydFZhbHVlID0gY291bnRFbGVtZW50cyA9PiB7XHJcbiAgICByZXR1cm4gY291bnRFbGVtZW50cy5zb21lKGl0ZW0gPT4ge1xyXG4gICAgICBpZiAoaXRlbS5zdGFydFZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uc3RhcnRWYWx1ZSA+IDA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGdldE1vZGlmaWVkQ291bnRFbGVtZW50cyA9ICgpID0+IHtcclxuICAgIGNvbnN0IG1vZGlmaWVkQ291bnRFbGVtZW50cyA9IHRoaXMuY291bnRFbGVtZW50cy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IG1pblZhbHVlID0gaXRlbS5taW5WYWx1ZSA/IGl0ZW0ubWluVmFsdWUgOiAwO1xyXG4gICAgICBjb25zdCBjb3VudGVyID0gaXRlbS5zdGFydFZhbHVlID8gaXRlbS5zdGFydFZhbHVlIDogbWluVmFsdWU7XHJcbiAgICAgIGl0ZW0uaWQgPSBgJHtpbmRleH0ke2dldFJhbmRvbU51bWJlcigxLCAxMDAwMCl9YDtcclxuICAgICAgaXRlbS5jb3VudGVyID0gY291bnRlcjtcclxuICAgICAgaXRlbS5taW5WYWx1ZSA9IG1pblZhbHVlO1xyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBtb2RpZmllZENvdW50RWxlbWVudHM7XHJcbiAgfTtcclxuXHJcbiAgc2hvdyA9ICgpID0+IHtcclxuICAgIGNvbnN0IGlzSGF2ZUNsYXNzID0gdGhpcy5kcm9wRG93blBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgIFwiZHJvcC1kb3duLS1zaG93XCJcclxuICAgICk7XHJcbiAgICBpZiAoIWlzSGF2ZUNsYXNzKSB7XHJcbiAgICAgIHRoaXMuZHJvcERvd25QYXJlbnQuY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bi0tc2hvd1wiKTtcclxuICAgICAgdGhpcy5pbnB1dC5jbGFzc0xpc3QuYWRkKFwiaW5wdXQtZ3JvdXBfX2lucHV0LS1hY3RpdmVcIik7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm9uQ2xpY2tIaWRlKTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uUHJlc3NIaWRlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBoaWRlID0gKCkgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNQaW5TaG93KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpc0hhdmVDbGFzcyA9IHRoaXMuZHJvcERvd25QYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICBcImRyb3AtZG93bi0tc2hvd1wiXHJcbiAgICApO1xyXG4gICAgaWYgKGlzSGF2ZUNsYXNzKSB7XHJcbiAgICAgIHRoaXMuZHJvcERvd25QYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShcImRyb3AtZG93bi0tc2hvd1wiKTtcclxuICAgICAgdGhpcy5pbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwiaW5wdXQtZ3JvdXBfX2lucHV0LS1hY3RpdmVcIik7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm9uQ2xpY2tIaWRlKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uUHJlc3NIaWRlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvbkNsaWNrSGlkZSA9IGV2dCA9PiB7XHJcbiAgICBjb25zdCBpc0lucHV0Q2xpY2sgPSBldnQudGFyZ2V0ID09PSB0aGlzLmlucHV0O1xyXG4gICAgY29uc3QgaXNDYWxlbmRhckNsaWNrID0gdGhpcy5kcm9wRG93blBhcmVudC5jb250YWlucyhldnQudGFyZ2V0KTtcclxuICAgIGNvbnN0IGlzT3V0c2lkZUNsaWNrID0gIWlzSW5wdXRDbGljayAmJiAhaXNDYWxlbmRhckNsaWNrO1xyXG4gICAgaWYgKGlzT3V0c2lkZUNsaWNrKSB7XHJcbiAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG9uUHJlc3NIaWRlID0gZXZ0ID0+IHtcclxuICAgIGNvbnN0IGlzRXNjUHJlc3MgPSBldnQua2V5Q29kZSA9PT0gMjc7XHJcbiAgICBpZiAoaXNFc2NQcmVzcykge1xyXG4gICAgICB0aGlzLmhpZGUoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBvbkNsaWNrQ2xlYXIgPSBldnQgPT4ge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB0aGlzLmRpc2NhcmRDb3VudGVyKCk7XHJcbiAgICB0aGlzLmRpc2NhcmRWaWV3Q291bnRlcigpO1xyXG4gICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgfTtcclxuXHJcbiAgZGlzY2FyZENvdW50ZXIgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmNvdW50RWxlbWVudHMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgY29uc3Qgdmlld0NvdW50ZXIgPSB0aGlzLmRyb3BEb3duUGFyZW50LnF1ZXJ5U2VsZWN0b3IoYCN2aWV3LSR7aXRlbS5pZH1gKTtcclxuICAgICAgdmlld0NvdW50ZXIudGV4dENvbnRlbnQgPSBpdGVtLm1pblZhbHVlO1xyXG4gICAgICBpdGVtLmNvdW50ZXIgPSBpdGVtLm1pblZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbWludXNCdXR0b25zID0gdGhpcy5kcm9wRG93blBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgICBcIi5kcm9wLWRvd25fX2NvdW50ZXItYnRuLS1taW51c1wiXHJcbiAgICApO1xyXG4gICAgbWludXNCdXR0b25zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bl9fY291bnRlci1idG4tLWRpc2FibGVkXCIpO1xyXG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGRpc2NhcmRWaWV3Q291bnRlciA9ICgpID0+IHtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIHRoaXMuY291bnRHcm91cFZpZXdbaXRlbV0uY291bnRlciA9IDA7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZW5kZXJWaWV3Q291bnQgPSAoKSA9PiB7XHJcbiAgICBsZXQgd29yZE9mTnVtID0gXCJcIjtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMuY291bnRHcm91cFZpZXcpLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmNvdW50R3JvdXBWaWV3W2l0ZW1dLmNvdW50ZXIgPiAwKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXJHcm91cCA9IHRoaXMuY291bnRHcm91cFZpZXdbaXRlbV07XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ZXIgPSBjdXJyZW50Q291bnRlckdyb3VwLmNvdW50ZXI7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFdvcmQgPSBkZWNsT2ZOdW0oXHJcbiAgICAgICAgICBjdXJyZW50Q291bnRlcixcclxuICAgICAgICAgIGN1cnJlbnRDb3VudGVyR3JvdXAudmlld3NcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpbmRleCA+IDAgJiYgd29yZE9mTnVtLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHdvcmRPZk51bSArPSBcIiwgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdvcmRPZk51bSArPSBgJHtjdXJyZW50Q291bnRlcn0gJHtjdXJyZW50V29yZH1gO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAod29yZE9mTnVtLmxlbmd0aCA+PSAyMCAmJiBPYmplY3Qua2V5cyh0aGlzLmNvdW50R3JvdXBWaWV3KS5sZW5ndGggPiAyKSB7XHJcbiAgICAgIHdvcmRPZk51bSA9IHdvcmRPZk51bS5zbGljZSgwLCAyMCkgKyBcIi4uLlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSB3b3JkT2ZOdW07XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyU3RhcnRDb3VudCA9IG9wdGlvbnMgPT4ge1xyXG4gICAgY29uc3QgY291bnRFbGVtZW50cyA9IG9wdGlvbnMuY291bnRFbGVtZW50cztcclxuICAgIGxldCB3b3JkT2ZOdW0gPSBcIlwiO1xyXG4gICAgY291bnRFbGVtZW50cy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAoaXRlbS5zdGFydFZhbHVlID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb3VudGVyR3JvdXAgPSBvcHRpb25zLmNvdW50R3JvdXBWaWV3W2l0ZW0uY291bnRHcm91cE5hbWVdO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb3VudGVyID0gY3VycmVudENvdW50ZXJHcm91cC5jb3VudGVyO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRXb3JkID0gZGVjbE9mTnVtKFxyXG4gICAgICAgICAgY3VycmVudENvdW50ZXIsXHJcbiAgICAgICAgICBjdXJyZW50Q291bnRlckdyb3VwLnZpZXdzXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAwICYmIHdvcmRPZk51bS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICB3b3JkT2ZOdW0gKz0gXCIsIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3b3JkT2ZOdW0gKz0gYCR7Y3VycmVudENvdW50ZXJ9ICR7Y3VycmVudFdvcmR9YDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHdvcmRPZk51bS5sZW5ndGggPj0gMjAgJiYgY291bnRFbGVtZW50cy5sZW5ndGggPiAyKSB7XHJcbiAgICAgIHdvcmRPZk51bSA9IHdvcmRPZk51bS5zbGljZSgwLCAyMCkgKyBcIi4uLlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNwbGl0V29yZE9mTnVtID0gd29yZE9mTnVtLnNwbGl0KFwiLFwiKTtcclxuXHJcbiAgICBpZiAoc3BsaXRXb3JkT2ZOdW1bMF0udHJpbSgpID09PSBzcGxpdFdvcmRPZk51bVsxXS50cmltKCkpIHtcclxuICAgICAgd29yZE9mTnVtID0gc3BsaXRXb3JkT2ZOdW1bMF07XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHdvcmRPZk51bTtcclxuICB9O1xyXG5cclxuICBnZXRDb3VudEl0ZW0gPSBlbGVtZW50ID0+IHtcclxuICAgIGNvbnN0IGNvdW50SXRlbSA9IGdldEh0bWxFbGVtZW50KFwibGlcIiwgXCJkcm9wLWRvd25fX2NvdW50LWl0ZW1cIik7XHJcbiAgICBjb25zdCBjb3VudEl0ZW1OYW1lID0gZ2V0SHRtbEVsZW1lbnQoXHJcbiAgICAgIFwicFwiLFxyXG4gICAgICBcImRyb3AtZG93bl9fY291bnQtaXRlbS1uYW1lXCIsXHJcbiAgICAgIGVsZW1lbnQubmFtZVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGNvdW50ZXJNZW51ID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkcm9wLWRvd25fX2NvdW50ZXItbWVudVwiKTtcclxuICAgIGNvbnN0IGNvdW50SXRlbU1pbnVzID0gZ2V0SHRtbEVsZW1lbnQoXCJidXR0b25cIiwgXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuXCIpO1xyXG4gICAgY291bnRJdGVtTWludXMuY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bl9fY291bnRlci1idG4tLW1pbnVzXCIpO1xyXG4gICAgaWYgKGVsZW1lbnQuc3RhcnRWYWx1ZSkge1xyXG4gICAgICBpZiAoZWxlbWVudC5zdGFydFZhbHVlID09PSBlbGVtZW50Lm1pblZhbHVlKSB7XHJcbiAgICAgICAgY291bnRJdGVtTWludXMuY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bl9fY291bnRlci1idG4tLWRpc2FibGVkXCIpO1xyXG4gICAgICAgIGNvdW50SXRlbU1pbnVzLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY291bnRJdGVtTWludXMuY2xhc3NMaXN0LmFkZChcImRyb3AtZG93bl9fY291bnRlci1idG4tLWRpc2FibGVkXCIpO1xyXG4gICAgICBjb3VudEl0ZW1NaW51cy5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XHJcbiAgICB9XHJcbiAgICBjb3VudEl0ZW1NaW51cy50eXBlID0gXCJidXR0b25cIjtcclxuICAgIGNvbnN0IGNvdW50SXRlbVZpZXcgPSBnZXRIdG1sRWxlbWVudChcInBcIiwgXCJkcm9wLWRvd25fX3NlbGVjdC12aWV3XCIpO1xyXG4gICAgY291bnRJdGVtVmlldy50ZXh0Q29udGVudCA9IGVsZW1lbnQuY291bnRlcjtcclxuICAgIGNvdW50SXRlbVZpZXcuaWQgPSBgdmlldy0ke2VsZW1lbnQuaWR9YDtcclxuICAgIGNvbnN0IGNvdW50SXRlbVBsdXMgPSBnZXRIdG1sRWxlbWVudChcImJ1dHRvblwiLCBcImRyb3AtZG93bl9fY291bnRlci1idG5cIik7XHJcbiAgICBjb3VudEl0ZW1QbHVzLmNsYXNzTGlzdC5hZGQoXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1wbHVzXCIpO1xyXG4gICAgY291bnRJdGVtUGx1cy50eXBlID0gXCJidXR0b25cIjtcclxuXHJcbiAgICBjb3VudEl0ZW1QbHVzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGdyb3VwVmlldyA9IHRoaXMuY291bnRHcm91cFZpZXdbZWxlbWVudC5jb3VudEdyb3VwTmFtZV07XHJcbiAgICAgIGVsZW1lbnQuY291bnRlcisrO1xyXG4gICAgICBncm91cFZpZXcuY291bnRlcisrO1xyXG4gICAgICBjb3VudEl0ZW1WaWV3LnRleHRDb250ZW50ID0gZWxlbWVudC5jb3VudGVyO1xyXG4gICAgICB0aGlzLnJlbmRlclZpZXdDb3VudCgpO1xyXG4gICAgICBjb25zdCBpc01pbnVzRGlzYWJsZWQgPSBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuY29udGFpbnMoXHJcbiAgICAgICAgXCJkcm9wLWRvd25fX2NvdW50ZXItYnRuLS1kaXNhYmxlZFwiXHJcbiAgICAgICk7XHJcbiAgICAgIGlmIChpc01pbnVzRGlzYWJsZWQpIHtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QucmVtb3ZlKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgICAgY291bnRJdGVtTWludXMucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvdW50SXRlbU1pbnVzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGdyb3VwVmlldyA9IHRoaXMuY291bnRHcm91cFZpZXdbZWxlbWVudC5jb3VudEdyb3VwTmFtZV07XHJcbiAgICAgIGVsZW1lbnQuY291bnRlci0tO1xyXG4gICAgICBncm91cFZpZXcuY291bnRlci0tO1xyXG4gICAgICBjb3VudEl0ZW1WaWV3LnRleHRDb250ZW50ID0gZWxlbWVudC5jb3VudGVyO1xyXG4gICAgICBjb25zdCBuZXh0RGVjcmltZW50Q291bnRlciA9IGVsZW1lbnQuY291bnRlciAtIDE7XHJcbiAgICAgIGlmIChuZXh0RGVjcmltZW50Q291bnRlciA8IGVsZW1lbnQubWluVmFsdWUpIHtcclxuICAgICAgICBjb3VudEl0ZW1NaW51cy5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19jb3VudGVyLWJ0bi0tZGlzYWJsZWRcIik7XHJcbiAgICAgICAgY291bnRJdGVtTWludXMuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucmVuZGVyVmlld0NvdW50KCk7XHJcbiAgICAgIGlmIChncm91cFZpZXcuY291bnRlciA9PT0gMCkge1xyXG4gICAgICAgIGNvbnN0IGlzQ291bnRlckdyb3VwQ2xlYXIgPSBPYmplY3Qua2V5cyh0aGlzLmNvdW50R3JvdXBWaWV3KS5ldmVyeShcclxuICAgICAgICAgIGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb3VudEdyb3VwVmlld1tpdGVtXS5jb3VudGVyID09PSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGlzQ291bnRlckdyb3VwQ2xlYXIpIHtcclxuICAgICAgICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSB0aGlzLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY291bnRlck1lbnUuYXBwZW5kQ2hpbGQoY291bnRJdGVtTWludXMpO1xyXG4gICAgY291bnRlck1lbnUuYXBwZW5kQ2hpbGQoY291bnRJdGVtVmlldyk7XHJcbiAgICBjb3VudGVyTWVudS5hcHBlbmRDaGlsZChjb3VudEl0ZW1QbHVzKTtcclxuICAgIGNvdW50SXRlbS5hcHBlbmRDaGlsZChjb3VudEl0ZW1OYW1lKTtcclxuICAgIGNvdW50SXRlbS5hcHBlbmRDaGlsZChjb3VudGVyTWVudSk7XHJcbiAgICByZXR1cm4gY291bnRJdGVtO1xyXG4gIH07XHJcblxyXG4gIGluaXQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2RpZmllZENvdW50RWxlbWVudHMgPSB0aGlzLmdldE1vZGlmaWVkQ291bnRFbGVtZW50cygpO1xyXG4gICAgdGhpcy5jb3VudEVsZW1lbnRzID0gbW9kaWZpZWRDb3VudEVsZW1lbnRzO1xyXG4gICAgY29uc3QgZHJvcERvd25QYXJlbnRXcmFwID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkcm9wLWRvd25fX3dyYXBcIik7XHJcbiAgICBjb25zdCBjb3VudExpc3QgPSBnZXRIdG1sRWxlbWVudChcInVsXCIsIFwiZHJvcC1kb3duX19jb3VudC1saXN0XCIpO1xyXG4gICAgY29uc3QgZHJvcERvd25Db250cm9sID0gZ2V0SHRtbEVsZW1lbnQoXCJkaXZcIiwgXCJkcm9wLWRvd25fX2NvbnRyb2xcIik7XHJcbiAgICBjb25zdCBjbGVhckJ0biA9IGdldEh0bWxFbGVtZW50KFwiYnV0dG9uXCIsIFwiZHJvcC1kb3duX19idXR0b25cIiwgXCLQntGH0LjRgdGC0LjRgtGMXCIpO1xyXG4gICAgY2xlYXJCdG4udHlwZSA9IFwiYnV0dG9uXCI7XHJcbiAgICBjbGVhckJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrQ2xlYXIpO1xyXG4gICAgY29uc3QgYWNjZXB0QnRuID0gZ2V0SHRtbEVsZW1lbnQoXHJcbiAgICAgIFwiYnV0dG9uXCIsXHJcbiAgICAgIFwiZHJvcC1kb3duX19idXR0b25cIixcclxuICAgICAgXCLQn9GA0LjQvNC10L3QuNGC0YxcIlxyXG4gICAgKTtcclxuICAgIGFjY2VwdEJ0bi50eXBlID0gXCJidXR0b25cIjtcclxuICAgIGFjY2VwdEJ0bi5jbGFzc0xpc3QuYWRkKFwiZHJvcC1kb3duX19idXR0b24tLWFjY2VudFwiKTtcclxuICAgIGFjY2VwdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oaWRlKTtcclxuICAgIGNvbnN0IGNvdW50TGlzdEZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICAgIHRoaXMuY291bnRFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICBjb25zdCBjb3VudEl0ZW0gPSB0aGlzLmdldENvdW50SXRlbShlbGVtZW50KTtcclxuICAgICAgY291bnRMaXN0RnJhZ21lbnQuYXBwZW5kQ2hpbGQoY291bnRJdGVtKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvdW50TGlzdC5hcHBlbmRDaGlsZChjb3VudExpc3RGcmFnbWVudCk7XHJcbiAgICBpZiAoIXRoaXMuaXNIaWRlQ29udHJvbCkge1xyXG4gICAgICBkcm9wRG93bkNvbnRyb2wuYXBwZW5kQ2hpbGQoY2xlYXJCdG4pO1xyXG4gICAgICBkcm9wRG93bkNvbnRyb2wuYXBwZW5kQ2hpbGQoYWNjZXB0QnRuKTtcclxuICAgIH1cclxuXHJcbiAgICBkcm9wRG93blBhcmVudFdyYXAuYXBwZW5kQ2hpbGQoY291bnRMaXN0KTtcclxuXHJcbiAgICBpZiAoIXRoaXMuaXNIaWRlQ29udHJvbCkge1xyXG4gICAgICBkcm9wRG93blBhcmVudFdyYXAuYXBwZW5kQ2hpbGQoZHJvcERvd25Db250cm9sKTtcclxuICAgIH1cclxuICAgIHRoaXMuZHJvcERvd25QYXJlbnQuYXBwZW5kQ2hpbGQoZHJvcERvd25QYXJlbnRXcmFwKTtcclxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZHJvcERvd25QYXJlbnQpO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERyb3BEb3duO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI5YmY1MzFmNmM3YzhjNDhkYTU1ZDNiZDJhMGFkYTQ4ZS5zdmdcIjsiLCIvKiFcbiogaW5wdXRtYXNrLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuL2RlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliXCIsIFwiLi9nbG9iYWwvd2luZG93XCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vZGVwZW5kZW5jeUxpYnMvaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWJcIiksIHJlcXVpcmUoXCIuL2dsb2JhbC93aW5kb3dcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5JbnB1dG1hc2sgPSBmYWN0b3J5KHdpbmRvdy5kZXBlbmRlbmN5TGliIHx8IGpRdWVyeSwgd2luZG93KTtcbiAgICB9XG59KShmdW5jdGlvbigkLCB3aW5kb3csIHVuZGVmaW5lZCkge1xuICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCwgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LCBpZSA9IHVhLmluZGV4T2YoXCJNU0lFIFwiKSA+IDAgfHwgdWEuaW5kZXhPZihcIlRyaWRlbnQvXCIpID4gMCwgbW9iaWxlID0gaXNJbnB1dEV2ZW50U3VwcG9ydGVkKFwidG91Y2hzdGFydFwiKSwgaWVtb2JpbGUgPSAvaWVtb2JpbGUvaS50ZXN0KHVhKSwgaXBob25lID0gL2lwaG9uZS9pLnRlc3QodWEpICYmICFpZW1vYmlsZTtcbiAgICBmdW5jdGlvbiBJbnB1dG1hc2soYWxpYXMsIG9wdGlvbnMsIGludGVybmFsKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJbnB1dG1hc2spKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IElucHV0bWFzayhhbGlhcywgb3B0aW9ucywgaW50ZXJuYWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XG4gICAgICAgIHRoaXMubWFza3NldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWZyZXNoVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGludGVybmFsICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KGFsaWFzKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBhbGlhcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICAgICAgaWYgKGFsaWFzKSBvcHRpb25zLmFsaWFzID0gYWxpYXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLm5vTWFza3NDYWNoZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWZpbml0aW9ucyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy51c2VyT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICB0aGlzLmlzUlRMID0gdGhpcy5vcHRzLm51bWVyaWNJbnB1dDtcbiAgICAgICAgICAgIHJlc29sdmVBbGlhcyh0aGlzLm9wdHMuYWxpYXMsIG9wdGlvbnMsIHRoaXMub3B0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSW5wdXRtYXNrLnByb3RvdHlwZSA9IHtcbiAgICAgICAgZGF0YUF0dHJpYnV0ZTogXCJkYXRhLWlucHV0bWFza1wiLFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiX1wiLFxuICAgICAgICAgICAgb3B0aW9uYWxtYXJrZXI6IFsgXCJbXCIsIFwiXVwiIF0sXG4gICAgICAgICAgICBxdWFudGlmaWVybWFya2VyOiBbIFwie1wiLCBcIn1cIiBdLFxuICAgICAgICAgICAgZ3JvdXBtYXJrZXI6IFsgXCIoXCIsIFwiKVwiIF0sXG4gICAgICAgICAgICBhbHRlcm5hdG9ybWFya2VyOiBcInxcIixcbiAgICAgICAgICAgIGVzY2FwZUNoYXI6IFwiXFxcXFwiLFxuICAgICAgICAgICAgbWFzazogbnVsbCxcbiAgICAgICAgICAgIHJlZ2V4OiBudWxsLFxuICAgICAgICAgICAgb25jb21wbGV0ZTogJC5ub29wLFxuICAgICAgICAgICAgb25pbmNvbXBsZXRlOiAkLm5vb3AsXG4gICAgICAgICAgICBvbmNsZWFyZWQ6ICQubm9vcCxcbiAgICAgICAgICAgIHJlcGVhdDogMCxcbiAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiBmYWxzZSxcbiAgICAgICAgICAgIHJlbW92ZU1hc2tPblN1Ym1pdDogZmFsc2UsXG4gICAgICAgICAgICBjbGVhck1hc2tPbkxvc3RGb2N1czogdHJ1ZSxcbiAgICAgICAgICAgIGluc2VydE1vZGU6IHRydWUsXG4gICAgICAgICAgICBjbGVhckluY29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgICAgYWxpYXM6IG51bGwsXG4gICAgICAgICAgICBvbktleURvd246ICQubm9vcCxcbiAgICAgICAgICAgIG9uQmVmb3JlTWFzazogbnVsbCxcbiAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsIHBhc3RlZFZhbHVlLCBvcHRzKSA6IHBhc3RlZFZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IG51bGwsXG4gICAgICAgICAgICBvblVuTWFzazogbnVsbCxcbiAgICAgICAgICAgIHNob3dNYXNrT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dNYXNrT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgIG9uS2V5VmFsaWRhdGlvbjogJC5ub29wLFxuICAgICAgICAgICAgc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjogXCIgXCIsXG4gICAgICAgICAgICBudW1lcmljSW5wdXQ6IGZhbHNlLFxuICAgICAgICAgICAgcmlnaHRBbGlnbjogZmFsc2UsXG4gICAgICAgICAgICB1bmRvT25Fc2NhcGU6IHRydWUsXG4gICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiLFxuICAgICAgICAgICAgX3JhZGl4RGFuY2U6IGZhbHNlLFxuICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiXCIsXG4gICAgICAgICAgICBrZWVwU3RhdGljOiBudWxsLFxuICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uVGFiOiB0cnVlLFxuICAgICAgICAgICAgdGFiVGhyb3VnaDogZmFsc2UsXG4gICAgICAgICAgICBzdXBwb3J0c0lucHV0VHlwZTogWyBcInRleHRcIiwgXCJ0ZWxcIiwgXCJ1cmxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiIF0sXG4gICAgICAgICAgICBpZ25vcmFibGVzOiBbIDgsIDksIDEzLCAxOSwgMjcsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDUsIDQ2LCA5MywgMTEyLCAxMTMsIDExNCwgMTE1LCAxMTYsIDExNywgMTE4LCAxMTksIDEyMCwgMTIxLCAxMjIsIDEyMywgMCwgMjI5IF0sXG4gICAgICAgICAgICBpc0NvbXBsZXRlOiBudWxsLFxuICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogbnVsbCxcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBudWxsLFxuICAgICAgICAgICAgc3RhdGljRGVmaW5pdGlvblN5bWJvbDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaml0TWFza2luZzogZmFsc2UsXG4gICAgICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGlucHV0RXZlbnRPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIG5vVmFsdWVQYXRjaGluZzogZmFsc2UsXG4gICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25DbGljazogXCJsdnBcIixcbiAgICAgICAgICAgIGNhc2luZzogbnVsbCxcbiAgICAgICAgICAgIGlucHV0bW9kZTogXCJ2ZXJiYXRpbVwiLFxuICAgICAgICAgICAgY29sb3JNYXNrOiBmYWxzZSxcbiAgICAgICAgICAgIGRpc2FibGVQcmVkaWN0aXZlVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBpbXBvcnREYXRhQXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgIHNoaWZ0UG9zaXRpb25zOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICA5OiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlcXHVmZjExLVxcdWZmMTldXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFsaWFzZXM6IHt9LFxuICAgICAgICBtYXNrc0NhY2hlOiB7fSxcbiAgICAgICAgbWFzazogZnVuY3Rpb24oZWxlbXMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGZ1bmN0aW9uIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMobnB0LCBvcHRzLCB1c2VyT3B0aW9ucywgZGF0YUF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmltcG9ydERhdGFBdHRyaWJ1dGVzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyT3B0aW9ucyA9IG5wdC5nZXRBdHRyaWJ1dGUoZGF0YUF0dHJpYnV0ZSksIG9wdGlvbiwgZGF0YW9wdGlvbnMsIG9wdGlvbkRhdGEsIHA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbXBvcnRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBvcHRpb25EYXRhICE9PSB1bmRlZmluZWQgPyBvcHRpb25EYXRhIDogbnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlICsgXCItXCIgKyBvcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbkRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbkRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pbmRleE9mKFwib25cIikgPT09IDApIG9wdGlvbkRhdGEgPSB3aW5kb3dbb3B0aW9uRGF0YV07IGVsc2UgaWYgKG9wdGlvbkRhdGEgPT09IFwiZmFsc2VcIikgb3B0aW9uRGF0YSA9IGZhbHNlOyBlbHNlIGlmIChvcHRpb25EYXRhID09PSBcInRydWVcIikgb3B0aW9uRGF0YSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPcHRpb25zW29wdGlvbl0gPSBvcHRpb25EYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ck9wdGlvbnMgJiYgYXR0ck9wdGlvbnMgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJPcHRpb25zID0gYXR0ck9wdGlvbnMucmVwbGFjZSgvJy9nLCAnXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFvcHRpb25zID0gSlNPTi5wYXJzZShcIntcIiArIGF0dHJPcHRpb25zICsgXCJ9XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiBkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLnRvTG93ZXJDYXNlKCkgPT09IFwiYWxpYXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gZGF0YW9wdGlvbnNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRPcHRpb24oXCJhbGlhc1wiLCBvcHRpb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJPcHRpb25zLmFsaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQWxpYXModXNlck9wdGlvbnMuYWxpYXMsIHVzZXJPcHRpb25zLCBvcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKG9wdGlvbiBpbiBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YW9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCBpbiBkYXRhb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC50b0xvd2VyQ2FzZSgpID09PSBvcHRpb24udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IGRhdGFvcHRpb25zW3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnRPcHRpb24ob3B0aW9uLCBvcHRpb25EYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCBvcHRzLCB1c2VyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5kaXIgPT09IFwicnRsXCIgfHwgb3B0cy5yaWdodEFsaWduKSB7XG4gICAgICAgICAgICAgICAgICAgIG5wdC5zdHlsZS50ZXh0QWxpZ24gPSBcInJpZ2h0XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChucHQuZGlyID09PSBcInJ0bFwiIHx8IG9wdHMubnVtZXJpY0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5wdC5kaXIgPSBcImx0clwiO1xuICAgICAgICAgICAgICAgICAgICBucHQucmVtb3ZlQXR0cmlidXRlKFwiZGlyXCIpO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzUlRMID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHVzZXJPcHRpb25zKS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgZWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtcykgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gWyBlbGVtcyBdIDogZWxlbXM7XG4gICAgICAgICAgICAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uKG5keCwgZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGVkT3B0cyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGF0Lm9wdHMpO1xuICAgICAgICAgICAgICAgIGlmIChpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKGVsLCBzY29wZWRPcHRzLCAkLmV4dGVuZCh0cnVlLCB7fSwgdGhhdC51c2VyT3B0aW9ucyksIHRoYXQuZGF0YUF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZW5lcmF0ZU1hc2tTZXQoc2NvcGVkT3B0cywgdGhhdC5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFza3NldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sgPSBuZXcgSW5wdXRtYXNrKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5vcHRzID0gc2NvcGVkT3B0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5ub01hc2tzQ2FjaGUgPSB0aGF0Lm5vTWFza3NDYWNoZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay51c2VyT3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGF0LnVzZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5pc1JUTCA9IHNjb3BlZE9wdHMuaXNSVEwgfHwgc2NvcGVkT3B0cy5udW1lcmljSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suZWwgPSBlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5tYXNrc2V0ID0gbWFza3NldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZGF0YShlbCwgXCJfaW5wdXRtYXNrX29wdHNcIiwgc2NvcGVkT3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrU2NvcGUuY2FsbChlbC5pbnB1dG1hc2ssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwibWFza1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1zICYmIGVsZW1zWzBdID8gZWxlbXNbMF0uaW5wdXRtYXNrIHx8IHRoaXMgOiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBvcHRpb246IGZ1bmN0aW9uKG9wdGlvbnMsIG5vcmVtYXNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRzW29wdGlvbnNdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMudXNlck9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsICYmIG5vcmVtYXNrICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFzayh0aGlzLmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVubWFza2VkdmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwidW5tYXNrZWR2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZW1vdmVcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldGVtcHR5bWFzazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0ZW1wdHltYXNrXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBoYXNNYXNrZWRWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMub3B0cy5hdXRvVW5tYXNrO1xuICAgICAgICB9LFxuICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubWFza3NldCA9IHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlLmNhbGwodGhpcywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc0NvbXBsZXRlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXRtZXRhZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiaXNWYWxpZFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24odmFsdWUsIG1ldGFkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tzZXQgPSB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZS5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWwpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuZWwpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbmFseXNlTWFzazogZnVuY3Rpb24obWFzaywgcmVnZXhNYXNrLCBvcHRzKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5pemVyID0gLyg/Ols/KitdfFxce1swLTlcXCtcXCpdKyg/OixbMC05XFwrXFwqXSopPyg/OlxcfFswLTlcXCtcXCpdKik/XFx9KXxbXi4/KiteJHtbXSgpfFxcXFxdK3wuL2csIHJlZ2V4VG9rZW5pemVyID0gL1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZywgZXNjYXBlZCA9IGZhbHNlLCBjdXJyZW50VG9rZW4gPSBuZXcgTWFza1Rva2VuKCksIG1hdGNoLCBtLCBvcGVuZW5pbmdzID0gW10sIG1hc2tUb2tlbnMgPSBbXSwgb3BlbmluZ1Rva2VuLCBjdXJyZW50T3BlbmluZ1Rva2VuLCBhbHRlcm5hdG9yLCBsYXN0TWF0Y2gsIGdyb3VwVG9rZW47XG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrVG9rZW4oaXNHcm91cCwgaXNPcHRpb25hbCwgaXNRdWFudGlmaWVyLCBpc0FsdGVybmF0b3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5Hcm91cCA9IGlzR3JvdXAgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5hbHRlcm5hdG9yR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNPcHRpb25hbCA9IGlzT3B0aW9uYWwgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1F1YW50aWZpZXIgPSBpc1F1YW50aWZpZXIgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0FsdGVybmF0b3IgPSBpc0FsdGVybmF0b3IgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0ge1xuICAgICAgICAgICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICAgICAgICAgIG1heDogMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpbnNlcnRUZXN0RGVmaW5pdGlvbihtdG9rZW4sIGVsZW1lbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkID8gcG9zaXRpb24gOiBtdG9rZW4ubWF0Y2hlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbmRleE9mKFwiW1wiKSA9PT0gMCB8fCBlc2NhcGVkICYmIC9cXFxcZHxcXFxcc3xcXFxcd10vaS50ZXN0KGVsZW1lbnQpIHx8IGVsZW1lbnQgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBuZXcgUmVnRXhwKGVsZW1lbnQsIG9wdHMuY2FzaW5nID8gXCJpXCIgOiBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHByZXZNYXRjaCA9PT0gdW5kZWZpbmVkID8gXCJtYXN0ZXJcIiA6IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXNjYXBlZCkgZWxlbWVudCA9IGVsZW1lbnRbZWxlbWVudC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChlbGVtZW50LnNwbGl0KFwiXCIpLCBmdW5jdGlvbihuZHgsIGxtbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2TWF0Y2ggPSBtdG9rZW4ubWF0Y2hlc1twb3NpdGlvbiAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSBsbW50ICYmIHByZXZNYXRjaC5mbiAhPT0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbCB8fCBsbW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBsbW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVEZWY6IChlc2NhcGVkID8gXCInXCIgOiBcIlwiKSArIGxtbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2RlZiA9IChvcHRzLmRlZmluaXRpb25zID8gb3B0cy5kZWZpbml0aW9uc1tlbGVtZW50XSA6IHVuZGVmaW5lZCkgfHwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9uc1tlbGVtZW50XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tkZWYgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG1hc2tkZWYudmFsaWRhdG9yID8gdHlwZW9mIG1hc2tkZWYudmFsaWRhdG9yID09IFwic3RyaW5nXCIgPyBuZXcgUmVnRXhwKG1hc2tkZWYudmFsaWRhdG9yLCBvcHRzLmNhc2luZyA/IFwiaVwiIDogXCJcIikgOiBuZXcgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IG1hc2tkZWYudmFsaWRhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoXCIuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogcHJldk1hdGNoID09PSB1bmRlZmluZWQgPyBcIm1hc3RlclwiIDogcHJldk1hdGNoLmRlZiAhPT0gKG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG1hc2tkZWYuY2FzaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogbWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRGVmOiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiBwcmV2TWF0Y2ggPT09IHVuZGVmaW5lZCA/IFwibWFzdGVyXCIgOiBwcmV2TWF0Y2guZGVmICE9PSBlbGVtZW50ICYmIHByZXZNYXRjaC5mbiAhPT0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogb3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sICE9PSB1bmRlZmluZWQgPyBlbGVtZW50IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZURlZjogKGVzY2FwZWQgPyBcIidcIiA6IFwiXCIpICsgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB2ZXJpZnlHcm91cE1hcmtlcihtYXNrVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuICYmIG1hc2tUb2tlbi5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChtYXNrVG9rZW4ubWF0Y2hlcywgZnVuY3Rpb24obmR4LCB0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRUb2tlbiA9IG1hc2tUb2tlbi5tYXRjaGVzW25keCArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChuZXh0VG9rZW4gPT09IHVuZGVmaW5lZCB8fCAobmV4dFRva2VuLm1hdGNoZXMgPT09IHVuZGVmaW5lZCB8fCBuZXh0VG9rZW4uaXNRdWFudGlmaWVyID09PSBmYWxzZSkpICYmIHRva2VuICYmIHRva2VuLmlzR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi5pc0dyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleE1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24odG9rZW4sIG9wdHMuZ3JvdXBtYXJrZXJbMF0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4ub3Blbkdyb3VwICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXN0RGVmaW5pdGlvbih0b2tlbiwgb3B0cy5ncm91cG1hcmtlclsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmF1bHRDYXNlKCkge1xuICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudE9wZW5pbmdUb2tlbiwgbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCkgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudFRva2VuLCBtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbikge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VTdGF0aWMoc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ID09PSBvcHRzLm9wdGlvbmFsbWFya2VyWzBdKSBzdCA9IG9wdHMub3B0aW9uYWxtYXJrZXJbMV07IGVsc2UgaWYgKHN0ID09PSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdKSBzdCA9IG9wdHMub3B0aW9uYWxtYXJrZXJbMF07IGVsc2UgaWYgKHN0ID09PSBvcHRzLmdyb3VwbWFya2VyWzBdKSBzdCA9IG9wdHMuZ3JvdXBtYXJrZXJbMV07IGVsc2UgaWYgKHN0ID09PSBvcHRzLmdyb3VwbWFya2VyWzFdKSBzdCA9IG9wdHMuZ3JvdXBtYXJrZXJbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMgPSBtYXNrVG9rZW4ubWF0Y2hlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbWF0Y2ggaW4gbWFza1Rva2VuLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzLmhhc093blByb3BlcnR5KG1hdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludE1hdGNoID0gcGFyc2VJbnQobWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXS5pc1F1YW50aWZpZXIgJiYgbWFza1Rva2VuLm1hdGNoZXNbaW50TWF0Y2ggKyAxXSAmJiBtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCArIDFdLmlzR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXQgPSBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMuc3BsaWNlKG1hdGNoLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UoaW50TWF0Y2ggKyAxLCAwLCBxdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdLm1hdGNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSA9IHJldmVyc2VUb2tlbnMobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdID0gcmV2ZXJzZVN0YXRpYyhtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBncm91cGlmeShtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgTWFza1Rva2VuKHRydWUpO1xuICAgICAgICAgICAgICAgIGdyb3VwVG9rZW4ub3Blbkdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXBUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZWdleE1hc2spIHtcbiAgICAgICAgICAgICAgICBvcHRzLm9wdGlvbmFsbWFya2VyWzBdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG9wdHMub3B0aW9uYWxtYXJrZXJbMV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSByZWdleE1hc2sgPyByZWdleFRva2VuaXplci5leGVjKG1hc2spIDogdG9rZW5pemVyLmV4ZWMobWFzaykpIHtcbiAgICAgICAgICAgICAgICBtID0gbWF0Y2hbMF07XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBcInswLDF9XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIipcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBcIntcIiArIG0gKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD89XCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD8hXCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiKD88PVwiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBcIig/PCFcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5lc2NhcGVDaGFyOlxuICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdOlxuICAgICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyWzFdOlxuICAgICAgICAgICAgICAgICAgICBvcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBvcGVuaW5nVG9rZW4ub3Blbkdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmFsdGVybmF0b3JHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKGZhbHNlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXJbMF06XG4gICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5xdWFudGlmaWVybWFya2VyWzBdOlxuICAgICAgICAgICAgICAgICAgICB2YXIgcXVhbnRpZmllciA9IG5ldyBNYXNrVG9rZW4oZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgvW3t9XS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1xaiA9IG0uc3BsaXQoXCJ8XCIpLCBtcSA9IG1xalswXS5zcGxpdChcIixcIiksIG1xMCA9IGlzTmFOKG1xWzBdKSA/IG1xWzBdIDogcGFyc2VJbnQobXFbMF0pLCBtcTEgPSBtcS5sZW5ndGggPT09IDEgPyBtcTAgOiBpc05hTihtcVsxXSkgPyBtcVsxXSA6IHBhcnNlSW50KG1xWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1xMCA9PT0gXCIqXCIgfHwgbXEwID09PSBcIitcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXEwID0gbXExID09PSBcIipcIiA/IDAgOiAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHF1YW50aWZpZXIucXVhbnRpZmllciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogbXEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBtcTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBqaXQ6IG1xalsxXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG9wZW5lbmluZ3MubGVuZ3RoID4gMCA/IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXS5tYXRjaGVzIDogY3VycmVudFRva2VuLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaC5tYXRjaGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyb3VwVG9rZW4gPSBuZXcgTWFza1Rva2VuKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcE1hdGNoID0gbWF0Y2hlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChncm91cFRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBncm91cFRva2VuLm1hdGNoZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRtcE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2guaXNHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBncm91cGlmeShbIG1hdGNoIF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChxdWFudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5hbHRlcm5hdG9ybWFya2VyOlxuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBRdWFudGlmaWVyID0gZnVuY3Rpb24obWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RNYXRjaCA9IG1hdGNoZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmlzUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGdyb3VwaWZ5KFsgbWF0Y2hlcy5wb3AoKSwgbGFzdE1hdGNoIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJUb2tlbiA9IGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlc1tjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbi5vcGVuR3JvdXAgJiYgKHN1YlRva2VuLm1hdGNoZXMgPT09IHVuZGVmaW5lZCB8fCBzdWJUb2tlbi5pc0dyb3VwID09PSBmYWxzZSAmJiBzdWJUb2tlbi5pc0FsdGVybmF0b3IgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGdyb3VwUXVhbnRpZmllcihjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoID0gZ3JvdXBRdWFudGlmaWVyKGN1cnJlbnRUb2tlbi5tYXRjaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGxhc3RNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hdGNoLmFsdGVybmF0b3JHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5hbHRlcm5hdG9yR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG5ldyBNYXNrVG9rZW4oZmFsc2UsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yLm1hdGNoZXMucHVzaChsYXN0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RNYXRjaC5vcGVuR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2gub3Blbkdyb3VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdGVybmF0b3JHcm91cCA9IG5ldyBNYXNrVG9rZW4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvckdyb3VwLmFsdGVybmF0b3JHcm91cCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3JHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKG9wZW5lbmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCk7XG4gICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcihjdXJyZW50VG9rZW4pO1xuICAgICAgICAgICAgICAgIG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0IHx8IG9wdHMuaXNSVEwpIHtcbiAgICAgICAgICAgICAgICByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbnNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hc2tUb2tlbnM7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uQ29sb3JNYXNrOiBmdW5jdGlvbihpbnB1dCwgdGVtcGxhdGUpIHtcbiAgICAgICAgICAgIGlucHV0LnN0eWxlLmxlZnQgPSB0ZW1wbGF0ZS5vZmZzZXRMZWZ0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZXh0ZW5kRGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICQuZXh0ZW5kKHRydWUsIElucHV0bWFzay5wcm90b3R5cGUuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zID0gZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgICAgICAkLmV4dGVuZCh0cnVlLCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zLCBkZWZpbml0aW9uKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5leHRlbmRBbGlhc2VzID0gZnVuY3Rpb24oYWxpYXMpIHtcbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgSW5wdXRtYXNrLnByb3RvdHlwZS5hbGlhc2VzLCBhbGlhcyk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZm9ybWF0ID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykuZm9ybWF0KHZhbHVlLCBtZXRhZGF0YSk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2sudW5tYXNrID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS51bm1hc2tlZHZhbHVlKHZhbHVlKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5pc1ZhbGlkID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5pc1ZhbGlkKHZhbHVlKTtcbiAgICB9O1xuICAgIElucHV0bWFzay5yZW1vdmUgPSBmdW5jdGlvbihlbGVtcykge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gWyBlbGVtcyBdIDogZWxlbXM7XG4gICAgICAgICQuZWFjaChlbGVtcywgZnVuY3Rpb24obmR4LCBlbCkge1xuICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzaykgZWwuaW5wdXRtYXNrLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIElucHV0bWFzay5zZXRWYWx1ZSA9IGZ1bmN0aW9uKGVsZW1zLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKSB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gWyBlbGVtcyBdIDogZWxlbXM7XG4gICAgICAgICQuZWFjaChlbGVtcywgZnVuY3Rpb24obmR4LCBlbCkge1xuICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzaykgZWwuaW5wdXRtYXNrLnNldFZhbHVlKHZhbHVlKTsgZWxzZSAkKGVsKS50cmlnZ2VyKFwic2V0dmFsdWVcIiwgWyB2YWx1ZSBdKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZXNjYXBlUmVnZXggPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgdmFyIHNwZWNpYWxzID0gWyBcIi9cIiwgXCIuXCIsIFwiKlwiLCBcIitcIiwgXCI/XCIsIFwifFwiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBcIlxcXFxcIiwgXCIkXCIsIFwiXlwiIF07XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiKFxcXFxcIiArIHNwZWNpYWxzLmpvaW4oXCJ8XFxcXFwiKSArIFwiKVwiLCBcImdpbVwiKSwgXCJcXFxcJDFcIik7XG4gICAgfTtcbiAgICBJbnB1dG1hc2sua2V5Q29kZSA9IHtcbiAgICAgICAgQkFDS1NQQUNFOiA4LFxuICAgICAgICBCQUNLU1BBQ0VfU0FGQVJJOiAxMjcsXG4gICAgICAgIERFTEVURTogNDYsXG4gICAgICAgIERPV046IDQwLFxuICAgICAgICBFTkQ6IDM1LFxuICAgICAgICBFTlRFUjogMTMsXG4gICAgICAgIEVTQ0FQRTogMjcsXG4gICAgICAgIEhPTUU6IDM2LFxuICAgICAgICBJTlNFUlQ6IDQ1LFxuICAgICAgICBMRUZUOiAzNyxcbiAgICAgICAgUEFHRV9ET1dOOiAzNCxcbiAgICAgICAgUEFHRV9VUDogMzMsXG4gICAgICAgIFJJR0hUOiAzOSxcbiAgICAgICAgU1BBQ0U6IDMyLFxuICAgICAgICBUQUI6IDksXG4gICAgICAgIFVQOiAzOCxcbiAgICAgICAgWDogODgsXG4gICAgICAgIENPTlRST0w6IDE3XG4gICAgfTtcbiAgICBJbnB1dG1hc2suZGVwZW5kZW5jeUxpYiA9ICQ7XG4gICAgZnVuY3Rpb24gcmVzb2x2ZUFsaWFzKGFsaWFzU3RyLCBvcHRpb25zLCBvcHRzKSB7XG4gICAgICAgIHZhciBhbGlhc0RlZmluaXRpb24gPSBJbnB1dG1hc2sucHJvdG90eXBlLmFsaWFzZXNbYWxpYXNTdHJdO1xuICAgICAgICBpZiAoYWxpYXNEZWZpbml0aW9uKSB7XG4gICAgICAgICAgICBpZiAoYWxpYXNEZWZpbml0aW9uLmFsaWFzKSByZXNvbHZlQWxpYXMoYWxpYXNEZWZpbml0aW9uLmFsaWFzLCB1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgb3B0cywgYWxpYXNEZWZpbml0aW9uKTtcbiAgICAgICAgICAgICQuZXh0ZW5kKHRydWUsIG9wdHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0cy5tYXNrID09PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRzLm1hc2sgPSBhbGlhc1N0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFza1NldChvcHRzLCBub2NhY2hlKSB7XG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFzayhtYXNrLCBtZXRhZGF0YSwgb3B0cykge1xuICAgICAgICAgICAgdmFyIHJlZ2V4TWFzayA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG1hc2sgPT09IG51bGwgfHwgbWFzayA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHJlZ2V4TWFzayA9IG9wdHMucmVnZXggIT09IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4TWFzaykge1xuICAgICAgICAgICAgICAgICAgICBtYXNrID0gb3B0cy5yZWdleDtcbiAgICAgICAgICAgICAgICAgICAgbWFzayA9IG1hc2sucmVwbGFjZSgvXihcXF4pKC4qKShcXCQpJC8sIFwiJDJcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnZXhNYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFzayA9IFwiLipcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFzay5sZW5ndGggPT09IDEgJiYgb3B0cy5ncmVlZHkgPT09IGZhbHNlICYmIG9wdHMucmVwZWF0ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5wbGFjZWhvbGRlciA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgPiAwIHx8IG9wdHMucmVwZWF0ID09PSBcIipcIiB8fCBvcHRzLnJlcGVhdCA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVwZWF0U3RhcnQgPSBvcHRzLnJlcGVhdCA9PT0gXCIqXCIgPyAwIDogb3B0cy5yZXBlYXQgPT09IFwiK1wiID8gMSA6IG9wdHMucmVwZWF0O1xuICAgICAgICAgICAgICAgIG1hc2sgPSBvcHRzLmdyb3VwbWFya2VyWzBdICsgbWFzayArIG9wdHMuZ3JvdXBtYXJrZXJbMV0gKyBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMF0gKyByZXBlYXRTdGFydCArIFwiLFwiICsgb3B0cy5yZXBlYXQgKyBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWFza3NldERlZmluaXRpb24sIG1hc2tkZWZLZXkgPSByZWdleE1hc2sgPyBcInJlZ2V4X1wiICsgb3B0cy5yZWdleCA6IG9wdHMubnVtZXJpY0lucHV0ID8gbWFzay5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IG1hc2s7XG4gICAgICAgICAgICBpZiAoSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tkZWZLZXldID09PSB1bmRlZmluZWQgfHwgbm9jYWNoZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG1hc2tzZXREZWZpbml0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBtYXNrOiBtYXNrLFxuICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW46IElucHV0bWFzay5wcm90b3R5cGUuYW5hbHlzZU1hc2sobWFzaywgcmVnZXhNYXNrLCBvcHRzKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRQb3NpdGlvbnM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBfYnVmZmVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB0ZXN0czoge30sXG4gICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhLFxuICAgICAgICAgICAgICAgICAgICBtYXNrTGVuZ3RoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGppdE9mZnNldDoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChub2NhY2hlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XSA9IG1hc2tzZXREZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgICAgICBtYXNrc2V0RGVmaW5pdGlvbiA9ICQuZXh0ZW5kKHRydWUsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBtYXNrc2V0RGVmaW5pdGlvbiA9ICQuZXh0ZW5kKHRydWUsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pO1xuICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXREZWZpbml0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtcztcbiAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm1hc2spKSB7XG4gICAgICAgICAgICBvcHRzLm1hc2sgPSBvcHRzLm1hc2sob3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCQuaXNBcnJheShvcHRzLm1hc2spKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5tYXNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMua2VlcFN0YXRpYyA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdHMubWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWFza1tpXS5jaGFyQXQoMCkgIT09IG9wdHMubWFza1swXS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmtlZXBTdGF0aWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhbHRNYXNrID0gb3B0cy5ncm91cG1hcmtlclswXTtcbiAgICAgICAgICAgICAgICAkLmVhY2gob3B0cy5pc1JUTCA/IG9wdHMubWFzay5yZXZlcnNlKCkgOiBvcHRzLm1hc2ssIGZ1bmN0aW9uKG5keCwgbXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gb3B0cy5ncm91cG1hcmtlclsxXSArIG9wdHMuYWx0ZXJuYXRvcm1hcmtlciArIG9wdHMuZ3JvdXBtYXJrZXJbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zay5tYXNrICE9PSB1bmRlZmluZWQgJiYgISQuaXNGdW5jdGlvbihtc2subWFzaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gbXNrLm1hc2s7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXNrICs9IG1zaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGFsdE1hc2sgKz0gb3B0cy5ncm91cG1hcmtlclsxXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVNYXNrKGFsdE1hc2ssIG9wdHMubWFzaywgb3B0cyk7XG4gICAgICAgICAgICB9IGVsc2Ugb3B0cy5tYXNrID0gb3B0cy5tYXNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLm1hc2sgJiYgb3B0cy5tYXNrLm1hc2sgIT09IHVuZGVmaW5lZCAmJiAhJC5pc0Z1bmN0aW9uKG9wdHMubWFzay5tYXNrKSkge1xuICAgICAgICAgICAgbXMgPSBnZW5lcmF0ZU1hc2sob3B0cy5tYXNrLm1hc2ssIG9wdHMubWFzaywgb3B0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtcyA9IGdlbmVyYXRlTWFzayhvcHRzLm1hc2ssIG9wdHMubWFzaywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgZXZOYW1lID0gXCJvblwiICsgZXZlbnROYW1lLCBpc1N1cHBvcnRlZCA9IGV2TmFtZSBpbiBlbDtcbiAgICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGV2TmFtZSwgXCJyZXR1cm47XCIpO1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxbZXZOYW1lXSA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIGVsID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYXNrU2NvcGUoYWN0aW9uT2JqLCBtYXNrc2V0LCBvcHRzKSB7XG4gICAgICAgIG1hc2tzZXQgPSBtYXNrc2V0IHx8IHRoaXMubWFza3NldDtcbiAgICAgICAgb3B0cyA9IG9wdHMgfHwgdGhpcy5vcHRzO1xuICAgICAgICB2YXIgaW5wdXRtYXNrID0gdGhpcywgZWwgPSB0aGlzLmVsLCBpc1JUTCA9IHRoaXMuaXNSVEwsIHVuZG9WYWx1ZSwgJGVsLCBza2lwS2V5UHJlc3NFdmVudCA9IGZhbHNlLCBza2lwSW5wdXRFdmVudCA9IGZhbHNlLCBpZ25vcmFibGUgPSBmYWxzZSwgbWF4TGVuZ3RoLCBtb3VzZUVudGVyID0gZmFsc2UsIGNvbG9yTWFzaywgb3JpZ2luYWxQbGFjZWhvbGRlcjtcbiAgICAgICAgdmFyIGdldE1hc2tUZW1wbGF0ZSA9IGZ1bmN0aW9uKGJhc2VPbklucHV0LCBtaW5pbWFsUG9zLCBpbmNsdWRlTW9kZSwgbm9KaXQsIGNsZWFyT3B0aW9uYWxUYWlsKSB7XG4gICAgICAgICAgICB2YXIgZ3JlZWR5ID0gb3B0cy5ncmVlZHk7XG4gICAgICAgICAgICBpZiAoY2xlYXJPcHRpb25hbFRhaWwpIG9wdHMuZ3JlZWR5ID0gZmFsc2U7XG4gICAgICAgICAgICBtaW5pbWFsUG9zID0gbWluaW1hbFBvcyB8fCAwO1xuICAgICAgICAgICAgdmFyIG1hc2tUZW1wbGF0ZSA9IFtdLCBuZHhJbnRsenIsIHBvcyA9IDAsIHRlc3QsIHRlc3RQb3MsIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGJhc2VPbklucHV0ID09PSB0cnVlICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBjbGVhck9wdGlvbmFsVGFpbCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaC5vcHRpb25hbGl0eSA9PT0gdHJ1ZSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zICsgMV0gPT09IHVuZGVmaW5lZCAmJiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10uZ2VuZXJhdGVkSW5wdXQgPT09IHRydWUgfHwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQgPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmIHBvcyA+IDApID8gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcywgZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpKSA6IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdFBvcy5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5wdXNoKGluY2x1ZGVNb2RlID09PSB0cnVlID8gdGVzdFBvcy5pbnB1dCA6IGluY2x1ZGVNb2RlID09PSBmYWxzZSA/IHRlc3QubmF0aXZlRGVmIDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGppdE1hc2tpbmcgPSBub0ppdCA9PT0gdHJ1ZSA/IGZhbHNlIDogb3B0cy5qaXRNYXNraW5nICE9PSBmYWxzZSA/IG9wdHMuaml0TWFza2luZyA6IHRlc3Quaml0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaml0TWFza2luZyA9PT0gZmFsc2UgfHwgaml0TWFza2luZyA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBqaXRNYXNraW5nID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKGppdE1hc2tpbmcpICYmIGppdE1hc2tpbmcgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZS5wdXNoKGluY2x1ZGVNb2RlID09PSBmYWxzZSA/IHRlc3QubmF0aXZlRGVmIDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYyA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3QubmV3QmxvY2tNYXJrZXIgJiYgdGVzdC5mbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gcG9zIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIH0gd2hpbGUgKChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBwb3MgPCBtYXhMZW5ndGgpICYmICh0ZXN0LmZuICE9PSBudWxsIHx8IHRlc3QuZGVmICE9PSBcIlwiKSB8fCBtaW5pbWFsUG9zID4gcG9zKTtcbiAgICAgICAgICAgIGlmIChtYXNrVGVtcGxhdGVbbWFza1RlbXBsYXRlLmxlbmd0aCAtIDFdID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVNb2RlICE9PSBmYWxzZSB8fCBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA9PT0gdW5kZWZpbmVkKSBnZXRNYXNrU2V0KCkubWFza0xlbmd0aCA9IHBvcyAtIDE7XG4gICAgICAgICAgICBvcHRzLmdyZWVkeSA9IGdyZWVkeTtcbiAgICAgICAgICAgIHJldHVybiBtYXNrVGVtcGxhdGU7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGdldE1hc2tTZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFza3NldDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXNldE1hc2tTZXQoc29mdCkge1xuICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZXRNYXNrU2V0KCk7XG4gICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChzb2Z0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbWFza3NldC52YWxpZFBvc2l0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIG1hc2tzZXQucCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xvc2VzdFRvLCBzdHJpY3QsIHZhbGlkUG9zaXRpb25zKSB7XG4gICAgICAgICAgICB2YXIgYmVmb3JlID0gLTEsIGFmdGVyID0gLTEsIHZhbGlkcyA9IHZhbGlkUG9zaXRpb25zIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcbiAgICAgICAgICAgIGlmIChjbG9zZXN0VG8gPT09IHVuZGVmaW5lZCkgY2xvc2VzdFRvID0gLTE7XG4gICAgICAgICAgICBmb3IgKHZhciBwb3NOZHggaW4gdmFsaWRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBzTmR4ID0gcGFyc2VJbnQocG9zTmR4KTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRzW3BzTmR4XSAmJiAoc3RyaWN0IHx8IHZhbGlkc1twc05keF0uZ2VuZXJhdGVkSW5wdXQgIT09IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwc05keCA8PSBjbG9zZXN0VG8pIGJlZm9yZSA9IHBzTmR4O1xuICAgICAgICAgICAgICAgICAgICBpZiAocHNOZHggPj0gY2xvc2VzdFRvKSBhZnRlciA9IHBzTmR4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiZWZvcmUgPT09IC0xIHx8IGJlZm9yZSA9PSBjbG9zZXN0VG8gPyBhZnRlciA6IGFmdGVyID09IC0xID8gYmVmb3JlIDogY2xvc2VzdFRvIC0gYmVmb3JlIDwgYWZ0ZXIgLSBjbG9zZXN0VG8gPyBiZWZvcmUgOiBhZnRlcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXREZWNpc2lvblRha2VyKHRzdCkge1xuICAgICAgICAgICAgdmFyIGRlY2lzaW9uVGFrZXIgPSB0c3QubG9jYXRvclt0c3QuYWx0ZXJuYXRpb25dO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWNpc2lvblRha2VyID09IFwic3RyaW5nXCIgJiYgZGVjaXNpb25UYWtlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZGVjaXNpb25UYWtlciA9IGRlY2lzaW9uVGFrZXIuc3BsaXQoXCIsXCIpWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY2lzaW9uVGFrZXIgIT09IHVuZGVmaW5lZCA/IGRlY2lzaW9uVGFrZXIudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TG9jYXRvcih0c3QsIGFsaWduKSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRvciA9ICh0c3QuYWx0ZXJuYXRpb24gIT0gdW5kZWZpbmVkID8gdHN0Lm1sb2NbZ2V0RGVjaXNpb25UYWtlcih0c3QpXSA6IHRzdC5sb2NhdG9yKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgaWYgKGxvY2F0b3IgIT09IFwiXCIpIHdoaWxlIChsb2NhdG9yLmxlbmd0aCA8IGFsaWduKSBsb2NhdG9yICs9IFwiMFwiO1xuICAgICAgICAgICAgcmV0dXJuIGxvY2F0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcywgdGVzdHMpIHtcbiAgICAgICAgICAgIHBvcyA9IHBvcyA+IDAgPyBwb3MgLSAxIDogMDtcbiAgICAgICAgICAgIHZhciBhbHRUZXN0ID0gZ2V0VGVzdChwb3MpLCB0YXJnZXRMb2NhdG9yID0gZ2V0TG9jYXRvcihhbHRUZXN0KSwgdHN0TG9jYXRvciwgY2xvc2VzdCwgYmVzdE1hdGNoO1xuICAgICAgICAgICAgZm9yICh2YXIgbmR4ID0gMDsgbmR4IDwgdGVzdHMubGVuZ3RoOyBuZHgrKykge1xuICAgICAgICAgICAgICAgIHZhciB0c3QgPSB0ZXN0c1tuZHhdO1xuICAgICAgICAgICAgICAgIHRzdExvY2F0b3IgPSBnZXRMb2NhdG9yKHRzdCwgdGFyZ2V0TG9jYXRvci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKHRzdExvY2F0b3IgLSB0YXJnZXRMb2NhdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VzdCA9PT0gdW5kZWZpbmVkIHx8IHRzdExvY2F0b3IgIT09IFwiXCIgJiYgZGlzdGFuY2UgPCBjbG9zZXN0IHx8IGJlc3RNYXRjaCAmJiAhb3B0cy5ncmVlZHkgJiYgYmVzdE1hdGNoLm1hdGNoLm9wdGlvbmFsaXR5ICYmIGJlc3RNYXRjaC5tYXRjaC5uZXdCbG9ja01hcmtlciA9PT0gXCJtYXN0ZXJcIiAmJiAoIXRzdC5tYXRjaC5vcHRpb25hbGl0eSB8fCAhdHN0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyKSB8fCBiZXN0TWF0Y2ggJiYgYmVzdE1hdGNoLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiAhdHN0Lm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaCA9IHRzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmVzdE1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgdHN0UHMpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSB8fCBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocG9zLCBnZXRUZXN0cyhwb3MsIG5keEludGx6ciA/IG5keEludGx6ci5zbGljZSgpIDogbmR4SW50bHpyLCB0c3RQcykpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFRlc3QocG9zLCB0ZXN0cykge1xuICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICh0ZXN0cyB8fCBnZXRUZXN0cyhwb3MpKVswXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihwb3MsIGRlZikge1xuICAgICAgICAgICAgdmFyIHZhbGlkID0gZmFsc2UsIHRlc3RzID0gZ2V0VGVzdHMocG9zKTtcbiAgICAgICAgICAgIGZvciAodmFyIHRuZHggPSAwOyB0bmR4IDwgdGVzdHMubGVuZ3RoOyB0bmR4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdHNbdG5keF0ubWF0Y2ggJiYgdGVzdHNbdG5keF0ubWF0Y2guZGVmID09PSBkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7XG4gICAgICAgICAgICB2YXIgbWFza1Rva2VucyA9IGdldE1hc2tTZXQoKS5tYXNrVG9rZW4sIHRlc3RQb3MgPSBuZHhJbnRsenIgPyB0c3RQcyA6IDAsIG5keEluaXRpYWxpemVyID0gbmR4SW50bHpyID8gbmR4SW50bHpyLnNsaWNlKCkgOiBbIDAgXSwgbWF0Y2hlcyA9IFtdLCBpbnNlcnRTdG9wID0gZmFsc2UsIGxhdGVzdE1hdGNoLCBjYWNoZURlcGVuZGVuY3kgPSBuZHhJbnRsenIgPyBuZHhJbnRsenIuam9pbihcIlwiKSA6IFwiXCI7XG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXNrVG9rZW4sIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hdGNoKG1hdGNoLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdE1hdGNoID0gJC5pbkFycmF5KGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXMpID09PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRva2VuR3JvdXAubWF0Y2hlcywgZnVuY3Rpb24obmR4LCBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNRdWFudGlmaWVyID09PSB0cnVlKSBmaXJzdE1hdGNoID0gaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXNbbmR4IC0gMV0pOyBlbHNlIGlmIChtYXRjaC5oYXNPd25Qcm9wZXJ0eShcIm1hdGNoZXNcIikpIGZpcnN0TWF0Y2ggPSBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIG1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0TWF0Y2gpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVOZHhJbml0aWFsaXplcihwb3MsIGFsdGVybmF0ZU5keCwgdGFyZ2V0QWx0ZXJuYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2gsIGluZGV4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdIHx8IFsgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gXSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsbW50Lm1sb2NbYWx0ZXJuYXRlTmR4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gbG1udDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRpb24gPSB0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0QWx0ZXJuYXRpb24gOiBsbW50LmFsdGVybmF0aW9uLCBuZHhQb3MgPSBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dICE9PSB1bmRlZmluZWQgPyBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuaW5kZXhPZihhbHRlcm5hdGVOZHgpIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaW5kZXhQb3MgPT09IHVuZGVmaW5lZCB8fCBuZHhQb3MgPCBpbmRleFBvcykgJiYgbmR4UG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoID0gbG1udDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4UG9zID0gbmR4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmVzdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RNYXRjaEFsdEluZGV4ID0gYmVzdE1hdGNoLmxvY2F0b3JbYmVzdE1hdGNoLmFsdGVybmF0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRvciA9IGJlc3RNYXRjaC5tbG9jW2FsdGVybmF0ZU5keF0gfHwgYmVzdE1hdGNoLm1sb2NbYmVzdE1hdGNoQWx0SW5kZXhdIHx8IGJlc3RNYXRjaC5sb2NhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdG9yLnNsaWNlKCh0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0QWx0ZXJuYXRpb24gOiBiZXN0TWF0Y2guYWx0ZXJuYXRpb24pICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRBbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gcmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcywgYWx0ZXJuYXRlTmR4KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc1N1YnNldE9mKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBleHBhbmQocGF0dGVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBhbmRlZCA9IFtdLCBzdGFydCwgZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGF0dGVybi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4uY2hhckF0KGkpID09PSBcIi1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gcGF0dGVybi5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgrK3N0YXJ0IDwgZW5kKSBleHBhbmRlZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoc3RhcnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcGF0dGVybi5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQucHVzaChwYXR0ZXJuLmNoYXJBdChpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZGVkLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yZWdleCAmJiBzb3VyY2UubWF0Y2guZm4gIT09IG51bGwgJiYgdGFyZ2V0Lm1hdGNoLmZuICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZCh0YXJnZXQubWF0Y2guZGVmLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpKS5pbmRleE9mKGV4cGFuZChzb3VyY2UubWF0Y2guZGVmLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpKSkgIT09IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5tYXRjaC5kZWYgPT09IHRhcmdldC5tYXRjaC5uYXRpdmVEZWY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3RhdGljQ2FuTWF0Y2hEZWZpbml0aW9uKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xvYyA9IHNvdXJjZS5sb2NhdG9yLnNsaWNlKHNvdXJjZS5hbHRlcm5hdGlvbikuam9pbihcIlwiKSwgdGxvYyA9IHRhcmdldC5sb2NhdG9yLnNsaWNlKHRhcmdldC5hbHRlcm5hdGlvbikuam9pbihcIlwiKSwgY2FuTWF0Y2ggPSBzbG9jID09IHRsb2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5NYXRjaCA9IGNhbk1hdGNoICYmIHNvdXJjZS5tYXRjaC5mbiA9PT0gbnVsbCAmJiB0YXJnZXQubWF0Y2guZm4gIT09IG51bGwgPyB0YXJnZXQubWF0Y2guZm4udGVzdChzb3VyY2UubWF0Y2guZGVmLCBnZXRNYXNrU2V0KCksIHBvcywgZmFsc2UsIG9wdHMsIGZhbHNlKSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbk1hdGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldE1lcmdlTG9jYXRvcnModGFyZ2V0TWF0Y2gsIGFsdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2ggPT09IHVuZGVmaW5lZCB8fCB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiA9PT0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gJiYgdGFyZ2V0TWF0Y2gubG9jYXRvclt0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaC5tbG9jID0gdGFyZ2V0TWF0Y2gubWxvYyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jTmR4ID0gdGFyZ2V0TWF0Y2gubG9jYXRvclt0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY05keCA9PT0gdW5kZWZpbmVkKSB0YXJnZXRNYXRjaC5hbHRlcm5hdGlvbiA9IHVuZGVmaW5lZDsgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jTmR4ID09PSBcInN0cmluZ1wiKSBsb2NOZHggPSBsb2NOZHguc3BsaXQoXCIsXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWF0Y2gubWxvY1tsb2NOZHhdID09PSB1bmRlZmluZWQpIHRhcmdldE1hdGNoLm1sb2NbbG9jTmR4XSA9IHRhcmdldE1hdGNoLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCBpbiBhbHRNYXRjaC5tbG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZHggPT09IFwic3RyaW5nXCIpIG5keCA9IG5keC5zcGxpdChcIixcIilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1hdGNoLm1sb2NbbmR4XSA9PT0gdW5kZWZpbmVkKSB0YXJnZXRNYXRjaC5tbG9jW25keF0gPSBhbHRNYXRjaC5tbG9jW25keF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNYXRjaC5sb2NhdG9yW3RhcmdldE1hdGNoLmFsdGVybmF0aW9uXSA9IE9iamVjdC5rZXlzKHRhcmdldE1hdGNoLm1sb2MpLmpvaW4oXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IDUwMCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIklucHV0bWFzazogVGhlcmUgaXMgcHJvYmFibHkgYW4gZXJyb3IgaW4geW91ciBtYXNrIGRlZmluaXRpb24gb3IgaW4gdGhlIGNvZGUuIENyZWF0ZSBhbiBpc3N1ZSBvbiBnaXRodWIgd2l0aCBhbiBleGFtcGxlIG9mIHRoZSBtYXNrIHlvdSBhcmUgdXNpbmcuIFwiICsgZ2V0TWFza1NldCgpLm1hc2s7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPT09IHBvcyAmJiBtYXRjaC5tYXRjaGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0b3I6IGxvb3BOZHgucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWxvYzoge31cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gubWF0Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNHcm91cCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpICsgMV0sIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWF0Y2hlcywgZnVuY3Rpb24obmR4LCBtdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGNoLm1hdGNoLm9wdGlvbmFsaXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpZmllclJlY3Vyc2UgPT09IHVuZGVmaW5lZCAmJiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsIG9wdGlvbmFsVG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzQWx0ZXJuYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRlcm5hdGVUb2tlbiA9IG1hdGNoLCBtYWx0ZXJuYXRlTWF0Y2hlcyA9IFtdLCBtYWx0TWF0Y2hlcywgY3VycmVudE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIGxvb3BOZHhDbnQgPSBsb29wTmR4Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0SW5kZXggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRJbmRleCA9PT0gLTEgfHwgdHlwZW9mIGFsdEluZGV4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zID0gdGVzdFBvcywgbmR4SW5pdGlhbGl6ZXJDbG9uZSA9IG5keEluaXRpYWxpemVyLnNsaWNlKCksIGFsdEluZGV4QXJyID0gW10sIGFtbmR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFsdEluZGV4ID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyID0gYWx0SW5kZXguc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhbW5keCA9IDA7IGFtbmR4IDwgYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IGFtbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRJbmRleEFyci5wdXNoKGFtbmR4LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdEluZGV4QXJyQ2xvbmUgPSBhbHRJbmRleEFyci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsID0gZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW3Bvc10ubGVuZ3RoOyBpIDwgZWw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdEluZGV4QXJyLnNwbGljZShhbHRJbmRleEFyci5pbmRleE9mKGdldE1hc2tTZXQoKS5leGNsdWRlc1twb3NdW2ldLnRvU3RyaW5nKCkpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRJbmRleEFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbcG9zXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRJbmRleEFyciA9IGFsdEluZGV4QXJyQ2xvbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYyA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZShwYXJzZUludChvcHRzLmtlZXBTdGF0aWMpKSAmJiBjdXJyZW50UG9zID49IG9wdHMua2VlcFN0YXRpYykgYWx0SW5kZXhBcnIgPSBhbHRJbmRleEFyci5zbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuTWF0Y2hlZEFsdGVybmF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keCA9IDA7IG5keCA8IGFsdEluZGV4QXJyLmxlbmd0aDsgbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtbmR4ID0gcGFyc2VJbnQoYWx0SW5kZXhBcnJbbmR4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZHhJbml0aWFsaXplciA9IHR5cGVvZiBhbHRJbmRleCA9PT0gXCJzdHJpbmdcIiA/IHJlc29sdmVOZHhJbml0aWFsaXplcih0ZXN0UG9zLCBhbW5keCwgbG9vcE5keENudCkgfHwgbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpIDogbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdICYmIGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdLCBbIGFtbmR4IF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSkpIG1hdGNoID0gdHJ1ZTsgZWxzZSBpZiAobmR4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5NYXRjaGVkQWx0ZXJuYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gY3VycmVudFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDEgPSAwOyBuZHgxIDwgbWFsdE1hdGNoZXMubGVuZ3RoOyBuZHgxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2ggPSBtYWx0TWF0Y2hlc1tuZHgxXSwgZHJvcE1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0TWF0Y2gubWF0Y2guaml0ID0gYWx0TWF0Y2gubWF0Y2guaml0IHx8IHVuTWF0Y2hlZEFsdGVybmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoLmFsdGVybmF0aW9uID0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gfHwgbG9vcE5keENudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHgyID0gMDsgbmR4MiA8IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aDsgbmR4MisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRNYXRjaDIgPSBtYWx0ZXJuYXRlTWF0Y2hlc1tuZHgyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbHRJbmRleCAhPT0gXCJzdHJpbmdcIiB8fCBhbHRNYXRjaC5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkICYmICQuaW5BcnJheShhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpLCBhbHRJbmRleEFycikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWx0TWF0Y2gubWF0Y2gubmF0aXZlRGVmID09PSBhbHRNYXRjaDIubWF0Y2gubmF0aXZlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoMiwgYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N1YnNldE9mKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gsIGFsdE1hdGNoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMuc3BsaWNlKG1hbHRlcm5hdGVNYXRjaGVzLmluZGV4T2YoYWx0TWF0Y2gyKSwgMCwgYWx0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTdWJzZXRPZihhbHRNYXRjaDIsIGFsdE1hdGNoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLCBhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRpY0Nhbk1hdGNoRGVmaW5pdGlvbihhbHRNYXRjaCwgYWx0TWF0Y2gyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXRNZXJnZUxvY2F0b3JzKGFsdE1hdGNoLCBhbHRNYXRjaDIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlcm5hdGVNYXRjaGVzLnNwbGljZShtYWx0ZXJuYXRlTWF0Y2hlcy5pbmRleE9mKGFsdE1hdGNoMiksIDAsIGFsdE1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkcm9wTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMucHVzaChhbHRNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBjdXJyZW50TWF0Y2hlcy5jb25jYXQobWFsdGVybmF0ZU1hdGNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gbWF0Y2hlcy5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEluaXRpYWxpemVyID0gbmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXRjaCA9IGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYWx0SW5kZXhdIHx8IG1hc2tUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSwgWyBhbHRJbmRleCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzUXVhbnRpZmllciAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdCA9IG1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHFuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHFuZHggPCAoaXNOYU4ocXQucXVhbnRpZmllci5tYXgpID8gcW5keCArIDEgOiBxdC5xdWFudGlmaWVyLm1heCkgJiYgdGVzdFBvcyA8PSBwb3M7IHFuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5Hcm91cCA9IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShxdCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gaGFuZGxlTWF0Y2godG9rZW5Hcm91cCwgWyBxbmR4IF0uY29uY2F0KGxvb3BOZHgpLCB0b2tlbkdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciA9IHFuZHggPj0gcXQucXVhbnRpZmllci5taW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RNYXRjaC5qaXQgPSAocW5keCB8fCAxKSAqIHRva2VuR3JvdXAubWF0Y2hlcy5pbmRleE9mKGxhdGVzdE1hdGNoKSA+PSBxdC5xdWFudGlmaWVyLmppdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgJiYgaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0TWF0Y2guaml0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmppdE9mZnNldFtwb3NdID0gdG9rZW5Hcm91cC5tYXRjaGVzLmluZGV4T2YobGF0ZXN0TWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0bmR4ID0gbmR4SW5pdGlhbGl6ZXIubGVuZ3RoID4gMCA/IG5keEluaXRpYWxpemVyLnNoaWZ0KCkgOiAwOyB0bmR4IDwgbWFza1Rva2VuLm1hdGNoZXMubGVuZ3RoOyB0bmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLmlzUXVhbnRpZmllciAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbdG5keF0sIFsgdG5keCBdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIHRlc3RQb3MgPT09IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGVzdFBvcyA+IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWVyZ2VMb2NhdG9ycyhwb3MsIHRlc3RzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0b3IgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoISQuaXNBcnJheSh0ZXN0cykpIHRlc3RzID0gWyB0ZXN0cyBdO1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0c1swXS5hbHRlcm5hdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yID0gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcywgdGVzdHMuc2xpY2UoKSkubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0b3IubGVuZ3RoID09PSAwKSBsb2NhdG9yID0gdGVzdHNbMF0ubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHRlc3RzLCBmdW5jdGlvbihuZHgsIHRzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0c3QuZGVmICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhdG9yLmxlbmd0aCA9PT0gMCkgbG9jYXRvciA9IHRzdC5sb2NhdG9yLnNsaWNlKCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhdG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRzdC5sb2NhdG9yW2ldICYmIGxvY2F0b3JbaV0udG9TdHJpbmcoKS5pbmRleE9mKHRzdC5sb2NhdG9yW2ldKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRvcltpXSArPSBcIixcIiArIHRzdC5sb2NhdG9yW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5keEludGx6ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1BvcyA9IHBvcyAtIDEsIHRlc3Q7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgodGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twcmV2aW91c1Bvc10gfHwgZ2V0TWFza1NldCgpLnRlc3RzW3ByZXZpb3VzUG9zXSkgPT09IHVuZGVmaW5lZCAmJiBwcmV2aW91c1BvcyA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1Bvcy0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0ICE9PSB1bmRlZmluZWQgJiYgcHJldmlvdXNQb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmR4SW5pdGlhbGl6ZXIgPSBtZXJnZUxvY2F0b3JzKHByZXZpb3VzUG9zLCB0ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlRGVwZW5kZW5jeSA9IG5keEluaXRpYWxpemVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UG9zID0gcHJldmlvdXNQb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS50ZXN0c1twb3NdICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdWzBdLmNkID09PSBjYWNoZURlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtdG5keCA9IG5keEluaXRpYWxpemVyLnNoaWZ0KCk7IG10bmR4IDwgbWFza1Rva2Vucy5sZW5ndGg7IG10bmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWFza1Rva2Vuc1ttdG5keF0sIG5keEluaXRpYWxpemVyLCBbIG10bmR4IF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgdGVzdFBvcyA9PT0gcG9zIHx8IHRlc3RQb3MgPiBwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAwIHx8IGluc2VydFN0b3ApIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtYXRjaDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWY6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsb2NhdG9yOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgbWxvYzoge30sXG4gICAgICAgICAgICAgICAgICAgIGNkOiBjYWNoZURlcGVuZGVuY3lcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZHhJbnRsenIgIT09IHVuZGVmaW5lZCAmJiBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh0cnVlLCBbXSwgbWF0Y2hlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSA9ICQuZXh0ZW5kKHRydWUsIFtdLCBtYXRjaGVzKTtcbiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJUZW1wbGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuX2J1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLl9idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUoZmFsc2UsIDEpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuYnVmZmVyID09PSB1bmRlZmluZWQpIGdldE1hc2tTZXQoKS5idWZmZXIgPSBnZXRNYXNrU2V0KCkuX2J1ZmZlci5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldE1hc2tTZXQoKS5fYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEJ1ZmZlcihub0NhY2hlKSB7XG4gICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLmJ1ZmZlciA9PT0gdW5kZWZpbmVkIHx8IG5vQ2FjaGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkuYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkuX2J1ZmZlciA9PT0gdW5kZWZpbmVkKSBnZXRNYXNrU2V0KCkuX2J1ZmZlciA9IGdldE1hc2tTZXQoKS5idWZmZXIuc2xpY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkuYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hGcm9tQnVmZmVyKHN0YXJ0LCBlbmQsIGJ1ZmZlcikge1xuICAgICAgICAgICAgdmFyIGksIHA7XG4gICAgICAgICAgICBpZiAoc3RhcnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgZW5kID0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAgPSBzdGFydDtcbiAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcltpXSAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxSZXN1bHQgPSBpc1ZhbGlkKHAsIGJ1ZmZlcltpXSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gdmFsUmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyB2YWxSZXN1bHQuY2FyZXQgOiB2YWxSZXN1bHQucG9zICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjYXNpbmcoZWxlbSwgdGVzdCwgcG9zKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdHMuY2FzaW5nIHx8IHRlc3QuY2FzaW5nKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJ1cHBlclwiOlxuICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBcImxvd2VyXCI6XG4gICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgICAgICAgICB2YXIgcG9zQmVmb3JlID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChwb3MgPT09IDAgfHwgcG9zQmVmb3JlICYmIHBvc0JlZm9yZS5pbnB1dCA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZShJbnB1dG1hc2sua2V5Q29kZS5TUEFDRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5jYXNpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBvcHRzLmNhc2luZy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjaGVja0FsdGVybmF0aW9uTWF0Y2goYWx0QXJyMSwgYWx0QXJyMiwgbmEpIHtcbiAgICAgICAgICAgIHZhciBhbHRBcnJDID0gb3B0cy5ncmVlZHkgPyBhbHRBcnIyIDogYWx0QXJyMi5zbGljZSgwLCAxKSwgaXNNYXRjaCA9IGZhbHNlLCBuYUFyciA9IG5hICE9PSB1bmRlZmluZWQgPyBuYS5zcGxpdChcIixcIikgOiBbXSwgbmFOZHg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKChuYU5keCA9IGFsdEFycjEuaW5kZXhPZihuYUFycltpXSkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBhbHRBcnIxLnNwbGljZShuYU5keCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgYWxuZHggPSAwOyBhbG5keCA8IGFsdEFycjEubGVuZ3RoOyBhbG5keCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShhbHRBcnIxW2FsbmR4XSwgYWx0QXJyQykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNNYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgckFsdFBvcykge1xuICAgICAgICAgICAgdmFyIHZhbGlkUHNDbG9uZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpLCBsYXN0QWx0LCBhbHRlcm5hdGlvbiwgaXNWYWxpZFJzbHQgPSBmYWxzZSwgYWx0UG9zLCBwcmV2QWx0UG9zLCBpLCB2YWxpZFBvcywgZGVjaXNpb25Qb3MsIGxBbHRQb3MgPSByQWx0UG9zICE9PSB1bmRlZmluZWQgPyByQWx0UG9zIDogZ2V0TGFzdFZhbGlkUG9zaXRpb24oKTtcbiAgICAgICAgICAgIGlmIChsQWx0UG9zID09PSAtMSAmJiByQWx0UG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsYXN0QWx0ID0gMDtcbiAgICAgICAgICAgICAgICBwcmV2QWx0UG9zID0gZ2V0VGVzdChsYXN0QWx0KTtcbiAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbiA9IHByZXZBbHRQb3MuYWx0ZXJuYXRpb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoO2xBbHRQb3MgPj0gMDsgbEFsdFBvcy0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsQWx0UG9zXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdFBvcyAmJiBhbHRQb3MuYWx0ZXJuYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZBbHRQb3MgJiYgcHJldkFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0gIT09IGFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBbHQgPSBsQWx0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpb24gPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0uYWx0ZXJuYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2QWx0UG9zID0gYWx0UG9zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsdGVybmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkZWNpc2lvblBvcyA9IHBhcnNlSW50KGxhc3RBbHQpO1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10gPSBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdIHx8IFtdO1xuICAgICAgICAgICAgICAgIGlmIChwb3MgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGdldERlY2lzaW9uVGFrZXIocHJldkFsdFBvcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsaWRJbnB1dHNDbG9uZSA9IFtdLCBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB0cnVlKSArIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkUG9zICYmIHZhbGlkUG9zLmdlbmVyYXRlZElucHV0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZElucHV0c0Nsb25lLnB1c2godmFsaWRQb3MuaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCBwb3MpIHN0YXRpY0lucHV0c0JlZm9yZVBvcysrO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0TWFza1NldCgpLmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXSAmJiBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdLmxlbmd0aCA8IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NPZmZzZXQgPSBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgKiAtMSwgdmFsaWRJbnB1dHMgPSB2YWxpZElucHV0c0Nsb25lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS50ZXN0c1tkZWNpc2lvblBvc10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodmFsaWRJbnB1dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdmFsaWRJbnB1dHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGlzVmFsaWRSc2x0ID0gaXNWYWxpZChnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHRydWUpICsgMSwgaW5wdXQsIGZhbHNlLCBmcm9tU2V0VmFsaWQsIHRydWUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkUnNsdCAmJiBjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihwb3MpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSArIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmFsaWRQb3MgPT09IHVuZGVmaW5lZCB8fCB2YWxpZFBvcy5tYXRjaC5mbiA9PSBudWxsKSAmJiBpIDwgcG9zICsgcG9zT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc09mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHBvcyArIHBvc09mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0ID0gaXNWYWxpZChwb3MgPiB0YXJnZXRMdnAgPyB0YXJnZXRMdnAgOiBwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRSc2x0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBbHRQb3MgPSBnZXRUZXN0KGRlY2lzaW9uUG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB2YWxpZFBzQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjaXNpb25UYWtlciA9IGdldERlY2lzaW9uVGFrZXIocHJldkFsdFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10uaW5kZXhPZihkZWNpc2lvblRha2VyKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQgPSBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZGVjaXNpb25Qb3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5leGNsdWRlc1tkZWNpc2lvblBvc10ucHVzaChkZWNpc2lvblRha2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBkZWNpc2lvblBvczsgaSA8IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSkgKyAxOyBpKyspIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0ID0gYWx0ZXJuYXRlKHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQsIGRlY2lzaW9uUG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRNYXNrU2V0KCkuZXhjbHVkZXNbZGVjaXNpb25Qb3NdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWRSc2x0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCwgZnJvbUFsdGVybmF0ZSwgdmFsaWRhdGVPbmx5KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBpc1NlbGVjdGlvbihwb3NPYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgPyBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID4gMSB8fCBwb3NPYmouYmVnaW4gLSBwb3NPYmouZW5kID09PSAxIDogcG9zT2JqLmVuZCAtIHBvc09iai5iZWdpbiA+IDEgfHwgcG9zT2JqLmVuZCAtIHBvc09iai5iZWdpbiA9PT0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmljdCA9IHN0cmljdCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBtYXNrUG9zID0gcG9zO1xuICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWFza1BvcyA9IGlzUlRMID8gcG9zLmVuZCA6IHBvcy5iZWdpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9pc1ZhbGlkKHBvc2l0aW9uLCBjLCBzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICQuZWFjaChnZXRUZXN0cyhwb3NpdGlvbiksIGZ1bmN0aW9uKG5keCwgdHN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gdHN0Lm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBnZXRCdWZmZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJzbHQgPSB0ZXN0LmZuICE9IG51bGwgPyB0ZXN0LmZuLnRlc3QoYywgZ2V0TWFza1NldCgpLCBwb3NpdGlvbiwgc3RyaWN0LCBvcHRzLCBpc1NlbGVjdGlvbihwb3MpKSA6IChjID09PSB0ZXN0LmRlZiB8fCBjID09PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIpICYmIHRlc3QuZGVmICE9PSBcIlwiID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYzogZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsIHRydWUpIHx8IHRlc3QuZGVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICB9IDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSByc2x0LmMgIT09IHVuZGVmaW5lZCA/IHJzbHQuYyA6IGMsIHZhbGlkYXRlZFBvcyA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0gPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciAmJiB0ZXN0LmZuID09PSBudWxsID8gZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24sIHRlc3QsIHRydWUpIHx8IHRlc3QuZGVmIDogZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0LnJlbW92ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocnNsdC5yZW1vdmUpKSByc2x0LnJlbW92ZSA9IFsgcnNsdC5yZW1vdmUgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5yZW1vdmUuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmFsaWRhdGVNYXNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBsbW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsbW50ICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0Lmluc2VydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocnNsdC5pbnNlcnQpKSByc2x0Lmluc2VydCA9IFsgcnNsdC5pbnNlcnQgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5pbnNlcnQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24obmR4LCBsbW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQobG1udC5wb3MsIGxtbnQuYywgdHJ1ZSwgZnJvbVNldFZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyc2x0ICE9PSB0cnVlICYmIHJzbHQucG9zICE9PSB1bmRlZmluZWQgJiYgcnNsdC5wb3MgIT09IHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkUG9zID0gcnNsdC5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnNsdCAhPT0gdHJ1ZSAmJiByc2x0LnBvcyA9PT0gdW5kZWZpbmVkICYmIHJzbHQuYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXZhbGlkYXRlTWFzayhwb3MsICQuZXh0ZW5kKHt9LCB0c3QsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogY2FzaW5nKGVsZW0sIHRlc3QsIHZhbGlkYXRlZFBvcylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmcm9tU2V0VmFsaWQsIHZhbGlkYXRlZFBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByc2x0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnNsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpO1xuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLnByZVZhbGlkYXRpb24pICYmICFzdHJpY3QgJiYgZnJvbVNldFZhbGlkICE9PSB0cnVlICYmIHZhbGlkYXRlT25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9wdHMucHJlVmFsaWRhdGlvbihnZXRCdWZmZXIoKSwgbWFza1BvcywgYywgaXNTZWxlY3Rpb24ocG9zKSwgb3B0cywgZ2V0TWFza1NldCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0cmFja2JhY2tQb3NpdGlvbnModW5kZWZpbmVkLCBtYXNrUG9zLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAobWF4TGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbWFza1BvcyA8IG1heExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfaXNWYWxpZChtYXNrUG9zLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKCFzdHJpY3QgfHwgZnJvbVNldFZhbGlkID09PSB0cnVlKSAmJiByZXN1bHQgPT09IGZhbHNlICYmIHZhbGlkYXRlT25seSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3NWYWxpZCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9zVmFsaWQgJiYgY3VycmVudFBvc1ZhbGlkLm1hdGNoLmZuID09PSBudWxsICYmIChjdXJyZW50UG9zVmFsaWQubWF0Y2guZGVmID09PSBjIHx8IGMgPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBzZWVrTmV4dChtYXNrUG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3B0cy5pbnNlcnRNb2RlIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzZWVrTmV4dChtYXNrUG9zKV0gPT09IHVuZGVmaW5lZCkgJiYgKCFpc01hc2sobWFza1BvcywgdHJ1ZSkgfHwgZ2V0TWFza1NldCgpLmppdE9mZnNldFttYXNrUG9zXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS5qaXRPZmZzZXRbbWFza1Bvc10gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3NlZWtOZXh0KG1hc2tQb3MpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpc1ZhbGlkKG1hc2tQb3MgKyBnZXRNYXNrU2V0KCkuaml0T2Zmc2V0W21hc2tQb3NdLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHJlc3VsdC5jYXJldCA9IG1hc2tQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBmb3IgKHZhciBuUG9zID0gbWFza1BvcyArIDEsIHNuUG9zID0gc2Vla05leHQobWFza1Bvcyk7IG5Qb3MgPD0gc25Qb3M7IG5Qb3MrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2lzVmFsaWQoblBvcywgYywgc3RyaWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tiYWNrUG9zaXRpb25zKG1hc2tQb3MsIHJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5wb3MgOiBuUG9zKSB8fCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1BvcyA9IG5Qb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UgJiYgb3B0cy5rZWVwU3RhdGljICE9PSBmYWxzZSAmJiAob3B0cy5yZWdleCA9PSBudWxsIHx8IGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpKSAmJiAhc3RyaWN0ICYmIGZyb21BbHRlcm5hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYWx0ZXJuYXRlKG1hc2tQb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hc2tQb3NcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMucG9zdFZhbGlkYXRpb24pICYmIHJlc3VsdCAhPT0gZmFsc2UgJiYgIXN0cmljdCAmJiBmcm9tU2V0VmFsaWQgIT09IHRydWUgJiYgdmFsaWRhdGVPbmx5ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3RSZXN1bHQgPSBvcHRzLnBvc3RWYWxpZGF0aW9uKGdldEJ1ZmZlcih0cnVlKSwgcG9zLmJlZ2luICE9PSB1bmRlZmluZWQgPyBpc1JUTCA/IHBvcy5lbmQgOiBwb3MuYmVnaW4gOiBwb3MsIHJlc3VsdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKHBvc3RSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zdFJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlciAmJiBwb3N0UmVzdWx0LmJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSBwb3N0UmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gdHJ1ZSA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcG9zdFJlc3VsdC5idWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBvc3RSZXN1bHQgPT09IHRydWUgPyByZXN1bHQgOiBwb3N0UmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnBvcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnBvcyA9IG1hc2tQb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSB8fCB2YWxpZGF0ZU9ubHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIHBvc2l0aW9uc0Nsb25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdHJhY2tiYWNrUG9zaXRpb25zKG9yaWdpbmFsUG9zLCBuZXdQb3MsIGZpbGxPbmx5KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsUG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKG9yaWdpbmFsUG9zID0gbmV3UG9zIC0gMTsgb3JpZ2luYWxQb3MgPiAwOyBvcmlnaW5hbFBvcy0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbb3JpZ2luYWxQb3NdKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBwcyA9IG9yaWdpbmFsUG9zOyBwcyA8IG5ld1BvczsgcHMrKykge1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcHNdID09PSB1bmRlZmluZWQgJiYgIWlzTWFzayhwcywgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZwID0gcHMgPT0gMCA/IGdldFRlc3QocHMpIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BzIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh2cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocHMpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbdGVzdHMubGVuZ3RoIC0gMV0ubWF0Y2guZGVmID09PSBcIlwiKSB0ZXN0cy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0TWF0Y2ggPSBkZXRlcm1pbmVUZXN0VGVtcGxhdGUocHMsIHRlc3RzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaCA9ICQuZXh0ZW5kKHt9LCBiZXN0TWF0Y2gsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZ2V0UGxhY2Vob2xkZXIocHMsIGJlc3RNYXRjaC5tYXRjaCwgdHJ1ZSkgfHwgYmVzdE1hdGNoLm1hdGNoLmRlZlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2guZ2VuZXJhdGVkSW5wdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0ZU1hc2socHMsIGJlc3RNYXRjaCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbE9ubHkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3ZwSW5wdXQgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXS5pbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpc1ZhbGlkKG5ld1BvcywgY3ZwSW5wdXQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXZhbGlkYXRlTWFzayhwb3MsIHZhbGlkVGVzdCwgZnJvbVNldFZhbGlkLCB2YWxpZGF0ZWRQb3MpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIElzRW5jbG9zZWRTdGF0aWMocG9zLCB2YWxpZHMsIHNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBwb3NNYXRjaCA9IHZhbGlkc1twb3NdO1xuICAgICAgICAgICAgICAgIGlmIChwb3NNYXRjaCAhPT0gdW5kZWZpbmVkICYmIChwb3NNYXRjaC5tYXRjaC5mbiA9PT0gbnVsbCAmJiBwb3NNYXRjaC5tYXRjaC5vcHRpb25hbGl0eSAhPT0gdHJ1ZSB8fCBwb3NNYXRjaC5pbnB1dCA9PT0gb3B0cy5yYWRpeFBvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldk1hdGNoID0gc2VsZWN0aW9uLmJlZ2luIDw9IHBvcyAtIDEgPyB2YWxpZHNbcG9zIC0gMV0gJiYgdmFsaWRzW3BvcyAtIDFdLm1hdGNoLmZuID09PSBudWxsICYmIHZhbGlkc1twb3MgLSAxXSA6IHZhbGlkc1twb3MgLSAxXSwgbmV4dE1hdGNoID0gc2VsZWN0aW9uLmVuZCA+IHBvcyArIDEgPyB2YWxpZHNbcG9zICsgMV0gJiYgdmFsaWRzW3BvcyArIDFdLm1hdGNoLmZuID09PSBudWxsICYmIHZhbGlkc1twb3MgKyAxXSA6IHZhbGlkc1twb3MgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZNYXRjaCAmJiBuZXh0TWF0Y2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiZWdpbiA9IHBvcy5iZWdpbiAhPT0gdW5kZWZpbmVkID8gcG9zLmJlZ2luIDogcG9zLCBlbmQgPSBwb3MuZW5kICE9PSB1bmRlZmluZWQgPyBwb3MuZW5kIDogcG9zO1xuICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiA+IHBvcy5lbmQpIHtcbiAgICAgICAgICAgICAgICBiZWdpbiA9IHBvcy5lbmQ7XG4gICAgICAgICAgICAgICAgZW5kID0gcG9zLmJlZ2luO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsaWRhdGVkUG9zID0gdmFsaWRhdGVkUG9zICE9PSB1bmRlZmluZWQgPyB2YWxpZGF0ZWRQb3MgOiBiZWdpbjtcbiAgICAgICAgICAgIGlmIChiZWdpbiAhPT0gZW5kIHx8IG9wdHMuaW5zZXJ0TW9kZSAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSAhPT0gdW5kZWZpbmVkICYmIGZyb21TZXRWYWxpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQodHJ1ZSwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHVuZGVmaW5lZCwgdHJ1ZSksIGk7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBiZWdpbjtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBsdnA7IGkgPj0gYmVnaW47IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSB0cnVlLCBqID0gdmFsaWRhdGVkUG9zLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMsIG5lZWRzVmFsaWRhdGlvbiA9IGZhbHNlLCBwb3NNYXRjaCA9IGosIGkgPSBqO1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZFRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ZhbGlkYXRlZFBvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdmFsaWRUZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2grKztcbiAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmVnaW4gPCBlbmQpIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICg7aSA8PSBsdnA7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHBvc2l0aW9uc0Nsb25lW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodCAhPT0gdW5kZWZpbmVkICYmIChpID49IGVuZCB8fCBpID49IGJlZ2luICYmIHQuZ2VuZXJhdGVkSW5wdXQgIT09IHRydWUgJiYgSXNFbmNsb3NlZFN0YXRpYyhpLCBwb3NpdGlvbnNDbG9uZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgfSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0VGVzdChwb3NNYXRjaCkubWF0Y2guZGVmICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRzVmFsaWRhdGlvbiA9PT0gZmFsc2UgJiYgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdICYmIHBvc2l0aW9uc0Nsb25lW3Bvc01hdGNoXS5tYXRjaC5uYXRpdmVEZWYgPT09IHQubWF0Y2gubmF0aXZlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NNYXRjaF0gPSAkLmV4dGVuZCh0cnVlLCB7fSwgcG9zaXRpb25zQ2xvbmVbcG9zTWF0Y2hdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc01hdGNoXS5pbnB1dCA9IHQuaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrYmFja1Bvc2l0aW9ucyh1bmRlZmluZWQsIHBvc01hdGNoLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IHBvc01hdGNoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5zaGlmdFBvc2l0aW9ucyAmJiBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihwb3NNYXRjaCwgdC5tYXRjaC5kZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBpc1ZhbGlkKHBvc01hdGNoLCB0LmlucHV0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSByZXN1bHQgIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gcmVzdWx0LmNhcmV0IHx8IHJlc3VsdC5pbnNlcnQgPyBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIDogcG9zTWF0Y2ggKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1ZhbGlkYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdC5nZW5lcmF0ZWRJbnB1dCA9PT0gdHJ1ZSB8fCB0LmlucHV0ID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5udW1lcmljSW5wdXQgPT09IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCAmJiBwb3NNYXRjaCA+IGVuZCAmJiBpc01hc2socG9zTWF0Y2gsIHRydWUpICYmICh0Lm1hdGNoLmZuICE9PSBudWxsIHx8IHBvc01hdGNoID4gZ2V0TWFza1NldCgpLm1hc2tMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NNYXRjaCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFRlc3QocG9zTWF0Y2gpLm1hdGNoLmRlZiA9PSBcIlwiKSB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0Y2ggPSBqO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBwb3NpdGlvbnNDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsaWRUZXN0KSB7XG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ZhbGlkYXRlZFBvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdmFsaWRUZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc2V0TWFza1NldCh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTWFzayhwb3MsIHN0cmljdCkge1xuICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0VGVtcGxhdGUocG9zKS5tYXRjaDtcbiAgICAgICAgICAgIGlmICh0ZXN0LmRlZiA9PT0gXCJcIikgdGVzdCA9IGdldFRlc3QocG9zKS5tYXRjaDtcbiAgICAgICAgICAgIGlmICh0ZXN0LmZuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5mbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJpY3QgIT09IHRydWUgJiYgcG9zID4gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwb3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0cy5sZW5ndGggPiAxICsgKHRlc3RzW3Rlc3RzLmxlbmd0aCAtIDFdLm1hdGNoLmRlZiA9PT0gXCJcIiA/IDEgOiAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZWVrTmV4dChwb3MsIG5ld0Jsb2NrKSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3MgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKGdldFRlc3QocG9zaXRpb24pLm1hdGNoLmRlZiAhPT0gXCJcIiAmJiAobmV3QmxvY2sgPT09IHRydWUgJiYgKGdldFRlc3QocG9zaXRpb24pLm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8ICFpc01hc2socG9zaXRpb24pKSB8fCBuZXdCbG9jayAhPT0gdHJ1ZSAmJiAhaXNNYXNrKHBvc2l0aW9uKSkpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNlZWtQcmV2aW91cyhwb3MsIG5ld0Jsb2NrKSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3MsIHRlc3RzO1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uIDw9IDApIHJldHVybiAwO1xuICAgICAgICAgICAgd2hpbGUgKC0tcG9zaXRpb24gPiAwICYmIChuZXdCbG9jayA9PT0gdHJ1ZSAmJiBnZXRUZXN0KHBvc2l0aW9uKS5tYXRjaC5uZXdCbG9ja01hcmtlciAhPT0gdHJ1ZSB8fCBuZXdCbG9jayAhPT0gdHJ1ZSAmJiAhaXNNYXNrKHBvc2l0aW9uKSAmJiAodGVzdHMgPSBnZXRUZXN0cyhwb3NpdGlvbiksIFxuICAgICAgICAgICAgdGVzdHMubGVuZ3RoIDwgMiB8fCB0ZXN0cy5sZW5ndGggPT09IDIgJiYgdGVzdHNbMV0ubWF0Y2guZGVmID09PSBcIlwiKSkpIHt9XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2FyZXRQb3MsIGV2ZW50LCB0cmlnZ2VyRXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLCBldmVudCwgYnVmZmVyLCBjYXJldFBvcywgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09IHRydWUgPyByZWZyZXNoIDogcmVmcmVzaC5zdGFydCwgcmVmcmVzaC5lbmQsIHJlc3VsdC5idWZmZXIgfHwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGdldEJ1ZmZlcih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgIT09IHVuZGVmaW5lZCkgY2FyZXRQb3MgPSByZXN1bHQuY2FyZXQgIT09IHVuZGVmaW5lZCA/IHJlc3VsdC5jYXJldCA6IGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZVNldChidWZmZXIuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zICE9PSB1bmRlZmluZWQgJiYgKGV2ZW50ID09PSB1bmRlZmluZWQgfHwgZXZlbnQudHlwZSAhPT0gXCJibHVyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHJlbmRlckNvbG9yTWFzayhpbnB1dCwgY2FyZXRQb3MsIGJ1ZmZlci5sZW5ndGggPT09IDApO1xuICAgICAgICAgICAgICAgIGlmICh0cmlnZ2VyRXZlbnRzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKGlucHV0KSwgbnB0VmFsID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnB0VmFsID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNsZWFyZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QsIHJldHVyblBMKSB7XG4gICAgICAgICAgICB0ZXN0ID0gdGVzdCB8fCBnZXRUZXN0KHBvcykubWF0Y2g7XG4gICAgICAgICAgICBpZiAodGVzdC5wbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkIHx8IHJldHVyblBMID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbih0ZXN0LnBsYWNlaG9sZGVyKSA/IHRlc3QucGxhY2Vob2xkZXIob3B0cykgOiB0ZXN0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0ZXN0LmZuID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+IC0xICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocG9zKSwgc3RhdGljQWx0ZXJuYXRpb25zID0gW10sIHByZXZUZXN0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHMubGVuZ3RoID4gMSArICh0ZXN0c1t0ZXN0cy5sZW5ndGggLSAxXS5tYXRjaC5kZWYgPT09IFwiXCIgPyAxIDogMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxpdHkgIT09IHRydWUgJiYgdGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlICYmICh0ZXN0c1tpXS5tYXRjaC5mbiA9PT0gbnVsbCB8fCAocHJldlRlc3QgPT09IHVuZGVmaW5lZCB8fCB0ZXN0c1tpXS5tYXRjaC5mbi50ZXN0KHByZXZUZXN0Lm1hdGNoLmRlZiwgZ2V0TWFza1NldCgpLCBwb3MsIHRydWUsIG9wdHMpICE9PSBmYWxzZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0FsdGVybmF0aW9ucy5wdXNoKHRlc3RzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RzW2ldLm1hdGNoLmZuID09PSBudWxsKSBwcmV2VGVzdCA9IHRlc3RzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGljQWx0ZXJuYXRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvWzAtOWEtYkEtWl0vLnRlc3Qoc3RhdGljQWx0ZXJuYXRpb25zWzBdLm1hdGNoLmRlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQocG9zICUgb3B0cy5wbGFjZWhvbGRlci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0LmRlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIobnB0LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGllKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IHZhbHVlICYmIChucHQucGxhY2Vob2xkZXIgIT09IHZhbHVlIHx8IG5wdC5wbGFjZWhvbGRlciA9PT0gXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCksIG5wdFZhbHVlID0gbnB0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5wdFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobHZwID09PSAtMSAmJiBucHRWYWx1ZSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGx2cCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIobnB0LCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChucHQucGxhY2Vob2xkZXIgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbnB0LnBsYWNlaG9sZGVyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKG5wdC5wbGFjZWhvbGRlciA9PT0gXCJcIikgbnB0LnJlbW92ZUF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBFdmVudFJ1bGVyID0ge1xuICAgICAgICAgICAgb246IGZ1bmN0aW9uKGlucHV0LCBldmVudE5hbWUsIGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHZhciBldiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5pbnB1dG1hc2sgPT09IHVuZGVmaW5lZCAmJiB0aGlzLm5vZGVOYW1lICE9PSBcIkZPUk1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltT3B0cyA9ICQuZGF0YSh0aGF0LCBcIl9pbnB1dG1hc2tfb3B0c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbU9wdHMpIG5ldyBJbnB1dG1hc2soaW1PcHRzKS5tYXNrKHRoYXQpOyBlbHNlIEV2ZW50UnVsZXIub2ZmKHRoYXQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUudHlwZSAhPT0gXCJzZXR2YWx1ZVwiICYmIHRoaXMubm9kZU5hbWUgIT09IFwiRk9STVwiICYmICh0aGF0LmRpc2FibGVkIHx8IHRoYXQucmVhZE9ubHkgJiYgIShlLnR5cGUgPT09IFwia2V5ZG93blwiICYmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSA2NykgfHwgb3B0cy50YWJUaHJvdWdoID09PSBmYWxzZSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcElucHV0RXZlbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KHRoYXQsIHRoYXQuaW5wdXRtYXNrLmNhcmV0UG9zLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcEtleVByZXNzRXZlbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEtleVByZXNzRXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZW1vYmlsZSB8fCBpcGhvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IGV2ZW50SGFuZGxlci5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHVyblZhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXSA9IGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50TmFtZV0ucHVzaChldik7XG4gICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShldmVudE5hbWUsIFsgXCJzdWJtaXRcIiwgXCJyZXNldFwiIF0pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZm9ybSAhPT0gbnVsbCkgJChpbnB1dC5mb3JtKS5vbihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS5vbihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2ZmOiBmdW5jdGlvbihpbnB1dCwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrICYmIGlucHV0LmlucHV0bWFzay5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50c1tldmVudF0gPSBpbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IGlucHV0LmlucHV0bWFzay5ldmVudHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnROYW1lLCBldkFycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGV2QXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXYgPSBldkFyci5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGV2ZW50TmFtZSwgWyBcInN1Ym1pdFwiLCBcInJlc2V0XCIgXSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5mb3JtICE9PSBudWxsKSAkKGlucHV0LmZvcm0pLm9mZihldmVudE5hbWUsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS5vZmYoZXZlbnROYW1lLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGtleWRvd25FdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBrID0gZS5rZXlDb2RlLCBwb3MgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgfHwgaXBob25lICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRV9TQUZBUkkgfHwgZS5jdHJsS2V5ICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLlggJiYgIWlzSW5wdXRFdmVudFN1cHBvcnRlZChcImN1dFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcih0cnVlKSwgZ2V0TWFza1NldCgpLnAsIGUsIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTkQgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUEFHRV9ET1dOKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogY2FyZXRQb3MsIGNhcmV0UG9zLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkhPTUUgJiYgIWUuc2hpZnRLZXkgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUEFHRV9VUCkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCAwLCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogMCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgob3B0cy51bmRvT25Fc2NhcGUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuRVNDQVBFIHx8IGsgPT09IDkwICYmIGUuY3RybEtleSkgJiYgZS5hbHRLZXkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsIHRydWUsIGZhbHNlLCB1bmRvVmFsdWUuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNsaWNrXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuSU5TRVJUICYmICEoZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaW5zZXJ0TW9kZSA9ICFvcHRzLmluc2VydE1vZGU7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImltLWluc2VydFwiLCBvcHRzLmluc2VydE1vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy50YWJUaHJvdWdoID09PSB0cnVlICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zaGlmdEtleSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFRlc3QocG9zLmJlZ2luKS5tYXRjaC5mbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuZW5kID0gc2Vla1ByZXZpb3VzKHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmVuZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPSBzZWVrTmV4dChwb3MuYmVnaW4sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtOZXh0KHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmVuZCA8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoKSBwb3MuZW5kLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcy5iZWdpbiA8IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgcG9zLmJlZ2luLCBwb3MuZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRzLm9uS2V5RG93bi5jYWxsKHRoaXMsIGUsIGdldEJ1ZmZlcigpLCBjYXJldChpbnB1dCkuYmVnaW4sIG9wdHMpO1xuICAgICAgICAgICAgICAgIGlnbm9yYWJsZSA9ICQuaW5BcnJheShrLCBvcHRzLmlnbm9yYWJsZXMpICE9PSAtMTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBrZXlwcmVzc0V2ZW50OiBmdW5jdGlvbihlLCBjaGVja3ZhbCwgd3JpdGVPdXQsIHN0cmljdCwgbmR4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLndoaWNoIHx8IGUuY2hhckNvZGUgfHwgZS5rZXlDb2RlO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja3ZhbCAhPT0gdHJ1ZSAmJiAoIShlLmN0cmxLZXkgJiYgZS5hbHRLZXkpICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGlnbm9yYWJsZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTlRFUiAmJiB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrID09PSA0NiAmJiBlLnNoaWZ0S2V5ID09PSBmYWxzZSAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIpIGsgPSBvcHRzLnJhZGl4UG9pbnQuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBjaGVja3ZhbCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbmR4XG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogY2FyZXQoaW5wdXQpLCBmb3J3YXJkUG9zaXRpb24sIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGspLCBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuX3JhZGl4RGFuY2UgJiYgb3B0cy5udW1lcmljSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBnZXRCdWZmZXIoKS5pbmRleE9mKG9wdHMucmFkaXhQb2ludC5jaGFyQXQoMCkpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zLmJlZ2luIDw9IGNhcmV0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrID09PSBvcHRzLnJhZGl4UG9pbnQuY2hhckNvZGVBdCgwKSkgb2Zmc2V0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcy5lbmQgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbFJlc3VsdCA9IGlzVmFsaWQocG9zLCBjLCBzdHJpY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZFBvc2l0aW9uID0gdmFsUmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyB2YWxSZXN1bHQuY2FyZXQgOiBzZWVrTmV4dCh2YWxSZXN1bHQucG9zLmJlZ2luID8gdmFsUmVzdWx0LnBvcy5iZWdpbiA6IHZhbFJlc3VsdC5wb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gZm9yd2FyZFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZFBvc2l0aW9uID0gKG9wdHMubnVtZXJpY0lucHV0ICYmIHZhbFJlc3VsdC5jYXJldCA9PT0gdW5kZWZpbmVkID8gc2Vla1ByZXZpb3VzKGZvcndhcmRQb3NpdGlvbikgOiBmb3J3YXJkUG9zaXRpb24pICsgb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyaXRlT3V0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMub25LZXlWYWxpZGF0aW9uLmNhbGwoaW5wdXQsIGssIHZhbFJlc3VsdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS53cml0ZU91dEJ1ZmZlciAmJiB2YWxSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgZm9yd2FyZFBvc2l0aW9uLCBlLCBjaGVja3ZhbCAhPT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gZmFsc2UpIHZhbFJlc3VsdC5mb3J3YXJkUG9zaXRpb24gPSBmb3J3YXJkUG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0ZUV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSwgJGlucHV0ID0gJChpbnB1dCksIGlucHV0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpLCBjYXJldFBvcyA9IGNhcmV0KGlucHV0KSwgdGVtcFZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChpc1JUTCkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wVmFsdWUgPSBjYXJldFBvcy5lbmQ7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zLmVuZCA9IGNhcmV0UG9zLmJlZ2luO1xuICAgICAgICAgICAgICAgICAgICBjYXJldFBvcy5iZWdpbiA9IHRlbXBWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlQmVmb3JlQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiksIHZhbHVlQWZ0ZXJDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKGNhcmV0UG9zLmVuZCwgaW5wdXRWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUJlZm9yZUNhcmV0ID09PSAoaXNSVEwgPyBnZXRCdWZmZXJUZW1wbGF0ZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKDAsIGNhcmV0UG9zLmJlZ2luKS5qb2luKFwiXCIpKSB2YWx1ZUJlZm9yZUNhcmV0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVBZnRlckNhcmV0ID09PSAoaXNSVEwgPyBnZXRCdWZmZXJUZW1wbGF0ZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkpLnNsaWNlKGNhcmV0UG9zLmVuZCkuam9pbihcIlwiKSkgdmFsdWVBZnRlckNhcmV0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpICsgdmFsdWVBZnRlckNhcmV0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuY2xpcGJvYXJkRGF0YSAmJiBldi5jbGlwYm9hcmREYXRhLmdldERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQgKyBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpICsgdmFsdWVBZnRlckNhcmV0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgcGFzdGVWYWx1ZSA9IGlucHV0VmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlUGFzdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhc3RlVmFsdWUgPSBvcHRzLm9uQmVmb3JlUGFzdGUuY2FsbChpbnB1dG1hc2ssIGlucHV0VmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFzdGVWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXN0ZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGVja1ZhbChpbnB1dCwgZmFsc2UsIGZhbHNlLCBwYXN0ZVZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSksIGUsIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dEZhbGxCYWNrRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByYWRpeFBvaW50SGFuZGxlcihpbnB1dCwgaW5wdXRWYWx1ZSwgY2FyZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0VmFsdWUuY2hhckF0KGNhcmV0UG9zLmJlZ2luIC0gMSkgPT09IFwiLlwiICYmIG9wdHMucmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlW2NhcmV0UG9zLmJlZ2luIC0gMV0gPSBvcHRzLnJhZGl4UG9pbnQuY2hhckF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaWVNb2JpbGVIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWVtb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dENoYXIgPSBpbnB1dFZhbHVlLnJlcGxhY2UoZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRDaGFyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdiA9IGlucHV0VmFsdWUuc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXYuc3BsaWNlKGNhcmV0UG9zLmJlZ2luLCAwLCBpbnB1dENoYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSBpdi5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBpbnB1dFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRCdWZmZXIoKS5qb2luKFwiXCIpICE9PSBpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHJhZGl4UG9pbnRIYW5kbGVyKGlucHV0LCBpbnB1dFZhbHVlLCBjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSBpZU1vYmlsZUhhbmRsZXIoaW5wdXQsIGlucHV0VmFsdWUsIGNhcmV0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgIT09IGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBvZmZzZXQgPSAhb3B0cy5udW1lcmljSW5wdXQgJiYgaW5wdXRWYWx1ZS5sZW5ndGggPiBidWZmZXIubGVuZ3RoID8gLTEgOiAwLCBmcm9udFBhcnQgPSBpbnB1dFZhbHVlLnN1YnN0cigwLCBjYXJldFBvcy5iZWdpbiksIGJhY2tQYXJ0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoY2FyZXRQb3MuYmVnaW4pLCBmcm9udEJ1ZmZlclBhcnQgPSBidWZmZXIuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luICsgb2Zmc2V0KSwgYmFja0J1ZmZlclBhcnQgPSBidWZmZXIuc3Vic3RyKGNhcmV0UG9zLmJlZ2luICsgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBjYXJldFBvcywgZW50cmllcyA9IFwiXCIsIGlzRW50cnkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9udFBhcnQgIT09IGZyb250QnVmZmVyUGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcGwgPSAoaXNFbnRyeSA9IGZyb250UGFydC5sZW5ndGggPj0gZnJvbnRCdWZmZXJQYXJ0Lmxlbmd0aCkgPyBmcm9udFBhcnQubGVuZ3RoIDogZnJvbnRCdWZmZXJQYXJ0Lmxlbmd0aCwgaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBmcm9udFBhcnQuY2hhckF0KGkpID09PSBmcm9udEJ1ZmZlclBhcnQuY2hhckF0KGkpICYmIGkgPCBmcGw7IGkrKykgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5iZWdpbiA9IGkgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgKz0gZnJvbnRQYXJ0LnNsaWNlKGksIHNlbGVjdGlvbi5lbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWNrUGFydCAhPT0gYmFja0J1ZmZlclBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja1BhcnQubGVuZ3RoID4gYmFja0J1ZmZlclBhcnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgKz0gYmFja1BhcnQuc2xpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tQYXJ0Lmxlbmd0aCA8IGJhY2tCdWZmZXJQYXJ0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmVuZCArPSBiYWNrQnVmZmVyUGFydC5sZW5ndGggLSBiYWNrUGFydC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRW50cnkgJiYgb3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiICYmIGJhY2tQYXJ0ID09PSBcIlwiICYmIGZyb250UGFydC5jaGFyQXQoc2VsZWN0aW9uLmJlZ2luICsgb2Zmc2V0IC0gMSkgPT09IG9wdHMucmFkaXhQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5iZWdpbi0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgPSBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogc2VsZWN0aW9uLmJlZ2luICsgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogc2VsZWN0aW9uLmVuZCArIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGVudHJpZXMuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gbmV3ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5cHJlc3Mud2hpY2ggPSBlbnRyeS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5iZWdpbiA9PT0gc2VsZWN0aW9uLmVuZCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmJlZ2luID0gc2Vla1ByZXZpb3VzKHNlbGVjdGlvbi5iZWdpbiArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uLmJlZ2luID09PSBzZWxlY3Rpb24uZW5kIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHNlbGVjdGlvbi5iZWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgc2VsZWN0aW9uLmJlZ2luLCBzZWxlY3Rpb24uZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZG93biA9IG5ldyAkLkV2ZW50KFwia2V5ZG93blwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBvcHRzLm51bWVyaWNJbnB1dCA/IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSA6IElucHV0bWFzay5rZXlDb2RlLkRFTEVURTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiZWZvcmVJbnB1dEV2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuY2FuY2VsYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuaW5wdXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluc2VydFRleHRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChlLmRhdGEuc3BsaXQoXCJcIiksIGZ1bmN0aW9uKG5keCwgZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gZW50cnkuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZUNvbnRlbnRCYWNrd2FyZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleWRvd24gPSBuZXcgJC5FdmVudChcImtleWRvd25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duLmtleUNvZGUgPSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0U7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudC5jYWxsKGlucHV0LCBrZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlQ29udGVudEZvcndhcmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlkb3duID0gbmV3ICQuRXZlbnQoXCJrZXlkb3duXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ZG93bi5rZXlDb2RlID0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRIYW5kbGVycy5rZXlkb3duRXZlbnQuY2FsbChpbnB1dCwga2V5ZG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFZhbHVlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0bWFzay5yZWZyZXNoVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCB2YWx1ZSA9IGUgJiYgZS5kZXRhaWwgPyBlLmRldGFpbFswXSA6IGFyZ3VtZW50c1sxXSwgdmFsdWUgPSB2YWx1ZSB8fCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spKSB2YWx1ZSA9IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCB2YWx1ZSwgb3B0cykgfHwgdmFsdWU7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCB0cnVlLCBmYWxzZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzIHx8IG9wdHMuY2xlYXJJbmNvbXBsZXRlKSAmJiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb2N1c0V2ZW50OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc2hvd01hc2tPbkZvY3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChucHRWYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW91c2VFbnRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucG9zaXRpb25DYXJldE9uVGFiID09PSB0cnVlICYmIG1vdXNlRW50ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5hcHBseShpbnB1dCwgWyBlLCB0cnVlIF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdXNlbGVhdmVFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgbW91c2VFbnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKGlucHV0LCBvcmlnaW5hbFBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpY2tFdmVudDogZnVuY3Rpb24oZSwgdGFiYmVkKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9SYWRpeEZvY3VzKGNsaWNrUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodnBzW2NsaWNrUG9zXSA9PT0gdW5kZWZpbmVkIHx8IHZwc1tjbGlja1Bvc10uaW5wdXQgPT09IGdldFBsYWNlaG9sZGVyKGNsaWNrUG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1BvcyA8IHNlZWtOZXh0KC0xKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdnAgaW4gdnBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3MgPCB2cCAmJiB2cHNbdnBdLmlucHV0ICE9PSBnZXRQbGFjZWhvbGRlcih2cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZENhcmV0ID0gY2FyZXQoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JUTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENhcmV0LmVuZCA9IHNlbGVjdGVkQ2FyZXQuYmVnaW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDYXJldC5iZWdpbiA9IHNlbGVjdGVkQ2FyZXQuZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZENhcmV0LmJlZ2luID09PSBzZWxlY3RlZENhcmV0LmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3B0cy5wb3NpdGlvbkNhcmV0T25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vbmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIGdldEJ1ZmZlcigpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaWdub3JlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmFkaXhGb2N1c1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9SYWRpeEZvY3VzKHNlbGVjdGVkQ2FyZXQuYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBvcHRzLm51bWVyaWNJbnB1dCA/IHNlZWtOZXh0KHJhZGl4UG9zKSA6IHJhZGl4UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGlja1Bvc2l0aW9uID0gc2VsZWN0ZWRDYXJldC5iZWdpbiwgbHZjbGlja1Bvc2l0aW9uID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xpY2tQb3NpdGlvbiwgdHJ1ZSksIGxhc3RQb3NpdGlvbiA9IHNlZWtOZXh0KGx2Y2xpY2tQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1Bvc2l0aW9uIDwgbGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgIWlzTWFzayhjbGlja1Bvc2l0aW9uLCB0cnVlKSAmJiAhaXNNYXNrKGNsaWNrUG9zaXRpb24gLSAxLCB0cnVlKSA/IHNlZWtOZXh0KGNsaWNrUG9zaXRpb24pIDogY2xpY2tQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZwID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2Y2xpY2tQb3NpdGlvbl0sIHR0ID0gZ2V0VGVzdFRlbXBsYXRlKGxhc3RQb3NpdGlvbiwgbHZwID8gbHZwLm1hdGNoLmxvY2F0b3IgOiB1bmRlZmluZWQsIGx2cCksIHBsYWNlaG9sZGVyID0gZ2V0UGxhY2Vob2xkZXIobGFzdFBvc2l0aW9uLCB0dC5tYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIgIT09IFwiXCIgJiYgZ2V0QnVmZmVyKClbbGFzdFBvc2l0aW9uXSAhPT0gcGxhY2Vob2xkZXIgJiYgdHQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlICYmIHR0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyICE9PSB0cnVlIHx8ICFpc01hc2sobGFzdFBvc2l0aW9uLCBvcHRzLmtlZXBTdGF0aWMpICYmIHR0Lm1hdGNoLmRlZiA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gc2Vla05leHQobGFzdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tQb3NpdGlvbiA+PSBuZXdQb3MgfHwgY2xpY2tQb3NpdGlvbiA9PT0gbGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQb3NpdGlvbiA9IG5ld1BvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgbGFzdFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXRFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsICRpbnB1dCA9ICQoaW5wdXQpLCBwb3MgPSBjYXJldChpbnB1dCksIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGU7XG4gICAgICAgICAgICAgICAgdmFyIGNsaXBib2FyZERhdGEgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YSB8fCBldi5jbGlwYm9hcmREYXRhLCBjbGlwRGF0YSA9IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmVuZCwgcG9zLmJlZ2luKSA6IGdldEJ1ZmZlcigpLnNsaWNlKHBvcy5iZWdpbiwgcG9zLmVuZCk7XG4gICAgICAgICAgICAgICAgY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dFwiLCBpc1JUTCA/IGNsaXBEYXRhLnJldmVyc2UoKS5qb2luKFwiXCIpIDogY2xpcERhdGEuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4ZWNDb21tYW5kKSBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgICAgICAgICAgICAgaGFuZGxlUmVtb3ZlKGlucHV0LCBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUsIHBvcyk7XG4gICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibHVyRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIoaW5wdXQsIG9yaWdpbmFsUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCksIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChucHRWYWx1ZSAhPT0gXCJcIiB8fCBjb2xvck1hc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSA9PT0gLTEgJiYgbnB0VmFsdWUgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlKGJ1ZmZlcikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJpbmNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFySW5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgdW5kZWZpbmVkLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdXNlZW50ZXJFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgbW91c2VFbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0ICYmIG9wdHMuc2hvd01hc2tPbkhvdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIEhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKGlucHV0LCAoaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlcigpKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VibWl0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiBnZXRMYXN0VmFsaWRQb3NpdGlvbigpID09PSAtMSAmJiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0ICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNsZWFySW5jb21wbGV0ZSAmJiBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucmVtb3ZlTWFza09uU3VibWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5fdmFsdWVTZXQoZWwuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgZ2V0QnVmZmVyKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXRFdmVudDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5yZWZyZXNoVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsKGlucHV0LCB3cml0ZU91dCwgc3RyaWN0LCBucHR2bCwgaW5pdGlhdGluZ0V2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRtYXNrID0gdGhpcyB8fCBpbnB1dC5pbnB1dG1hc2ssIGlucHV0VmFsdWUgPSBucHR2bC5zbGljZSgpLCBjaGFyQ29kZXMgPSBcIlwiLCBpbml0aWFsTmR4ID0gLTEsIHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVGVtcGxhdGVNYXRjaChuZHgsIGNoYXJDb2Rlcykge1xuICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZU5keCA9IGdldE1hc2tUZW1wbGF0ZSh0cnVlLCAwLCBmYWxzZSkuc2xpY2UobmR4LCBzZWVrTmV4dChuZHgpKS5qb2luKFwiXCIpLnJlcGxhY2UoLycvZywgXCJcIikuaW5kZXhPZihjaGFyQ29kZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFyQ29kZU5keCAhPT0gLTEgJiYgIWlzTWFzayhuZHgpICYmIChnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBjaGFyQ29kZXMuY2hhckF0KDApIHx8IGdldFRlc3QobmR4KS5tYXRjaC5mbiA9PT0gbnVsbCAmJiBnZXRUZXN0KG5keCkubWF0Y2gubmF0aXZlRGVmID09PSBcIidcIiArIGNoYXJDb2Rlcy5jaGFyQXQoMCkgfHwgZ2V0VGVzdChuZHgpLm1hdGNoLm5hdGl2ZURlZiA9PT0gXCIgXCIgJiYgKGdldFRlc3QobmR4ICsgMSkubWF0Y2gubmF0aXZlRGVmID09PSBjaGFyQ29kZXMuY2hhckF0KDApIHx8IGdldFRlc3QobmR4ICsgMSkubWF0Y2guZm4gPT09IG51bGwgJiYgZ2V0VGVzdChuZHggKyAxKS5tYXRjaC5uYXRpdmVEZWYgPT09IFwiJ1wiICsgY2hhckNvZGVzLmNoYXJBdCgwKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCk7XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiBvcHRzLmF1dG9Vbm1hc2sgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGljSW5wdXQgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKDAsIHNlZWtOZXh0KC0xKSkuam9pbihcIlwiKSwgbWF0Y2hlcyA9IGlucHV0VmFsdWUuam9pbihcIlwiKS5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHN0YXRpY0lucHV0KSwgXCJnXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZS5zcGxpY2UoMCwgbWF0Y2hlcy5sZW5ndGggKiBzdGF0aWNJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gc2Vla05leHQoaW5pdGlhbE5keCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gc2Vla05leHQoaW5pdGlhbE5keCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5pdGlhbE5keCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpO1xuICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGdldE1hc2tTZXQoKS5wID0gaW5pdGlhbE5keDtcbiAgICAgICAgICAgIGlucHV0bWFzay5jYXJldFBvcyA9IHtcbiAgICAgICAgICAgICAgICBiZWdpbjogaW5pdGlhbE5keFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICQuZWFjaChpbnB1dFZhbHVlLCBmdW5jdGlvbihuZHgsIGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZHhdID09PSB1bmRlZmluZWQgJiYgaW5wdXRWYWx1ZVtuZHhdID09PSBnZXRQbGFjZWhvbGRlcihuZHgpICYmIGlzTWFzayhuZHgsIHRydWUpICYmIGlzVmFsaWQobmR4LCBpbnB1dFZhbHVlW25keF0sIHRydWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSBuZXcgJC5FdmVudChcIl9jaGVja3ZhbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gY2hhckNvZGUuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlcyArPSBjaGFyQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbih1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RlbXBsYXRlTWF0Y2goaW5pdGlhbE5keCwgY2hhckNvZGVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgdHJ1ZSwgZmFsc2UsIHN0cmljdCwgaW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxOZHggPSBpbnB1dG1hc2suY2FyZXRQb3MuYmVnaW4gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZXMgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCB0cnVlLCBmYWxzZSwgc3RyaWN0LCBsdnAgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcih1bmRlZmluZWQsIGdldEJ1ZmZlcigpLCByZXN1bHQuZm9yd2FyZFBvc2l0aW9uLCBrZXlwcmVzcywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFzay5jYXJldFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IHJlc3VsdC5mb3J3YXJkUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcmVzdWx0LmZvcndhcmRQb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh3cml0ZU91dCkgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCByZXN1bHQgPyByZXN1bHQuZm9yd2FyZFBvc2l0aW9uIDogdW5kZWZpbmVkLCBpbml0aWF0aW5nRXZlbnQgfHwgbmV3ICQuRXZlbnQoXCJjaGVja3ZhbFwiKSwgaW5pdGlhdGluZ0V2ZW50ICYmIGluaXRpYXRpbmdFdmVudC50eXBlID09PSBcImlucHV0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVubWFza2VkdmFsdWUoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2sgJiYgaW5wdXQuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBFdmVudEhhbmRsZXJzLnNldFZhbHVlRXZlbnQuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVtVmFsdWUgPSBbXSwgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xuICAgICAgICAgICAgZm9yICh2YXIgcG5keCBpbiB2cHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodnBzW3BuZHhdLm1hdGNoICYmIHZwc1twbmR4XS5tYXRjaC5mbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHVtVmFsdWUucHVzaCh2cHNbcG5keF0uaW5wdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1bm1hc2tlZFZhbHVlID0gdW1WYWx1ZS5sZW5ndGggPT09IDAgPyBcIlwiIDogKGlzUlRMID8gdW1WYWx1ZS5yZXZlcnNlKCkgOiB1bVZhbHVlKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLm9uVW5NYXNrKSkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXJWYWx1ZSA9IChpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpIDogZ2V0QnVmZmVyKCkpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgdW5tYXNrZWRWYWx1ZSA9IG9wdHMub25Vbk1hc2suY2FsbChpbnB1dG1hc2ssIGJ1ZmZlclZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhcmV0KGlucHV0LCBiZWdpbiwgZW5kLCBub3RyYW5zbGF0ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gdHJhbnNsYXRlUG9zaXRpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUlRMICYmIHR5cGVvZiBwb3MgPT09IFwibnVtYmVyXCIgJiYgKCFvcHRzLmdyZWVkeSB8fCBvcHRzLnBsYWNlaG9sZGVyICE9PSBcIlwiKSAmJiBlbCkge1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoIC0gcG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgaWYgKGJlZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KGJlZ2luKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpc1JUTCA/IGJlZ2luWzBdIDogYmVnaW5bMV07XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gaXNSVEwgPyBiZWdpblsxXSA6IGJlZ2luWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYmVnaW4uYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpc1JUTCA/IGJlZ2luLmJlZ2luIDogYmVnaW4uZW5kO1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IGlzUlRMID8gYmVnaW4uZW5kIDogYmVnaW4uYmVnaW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBub3RyYW5zbGF0ZSA/IGJlZ2luIDogdHJhbnNsYXRlUG9zaXRpb24oYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBub3RyYW5zbGF0ZSA/IGVuZCA6IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHR5cGVvZiBlbmQgPT0gXCJudW1iZXJcIiA/IGVuZCA6IGJlZ2luO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FsYyA9IHBhcnNlSW50KCgoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUgPyAoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoaW5wdXQsIG51bGwpIDogaW5wdXQuY3VycmVudFN0eWxlKS5mb250U2l6ZSkgKiBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNjcm9sbExlZnQgPSBzY3JvbGxDYWxjID4gaW5wdXQuc2Nyb2xsV2lkdGggPyBzY3JvbGxDYWxjIDogMDtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLmNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzZWxlY3Rpb25TdGFydFwiIGluIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBiZWdpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmZpcnN0Q2hpbGQgPT09IHVuZGVmaW5lZCB8fCBpbnB1dC5maXJzdENoaWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGlucHV0LmZpcnN0Q2hpbGQsIGJlZ2luIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGJlZ2luIDogaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGlucHV0LmZpcnN0Q2hpbGQsIGVuZCA8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggPyBlbmQgOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5jcmVhdGVUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVFbmQoXCJjaGFyYWN0ZXJcIiwgZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ29sb3JNYXNrKGlucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKFwic2VsZWN0aW9uU3RhcnRcIiBpbiBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IGlucHV0LnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpbnB1dC5zZWxlY3Rpb25FbmQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gd2luZG93LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5wYXJlbnROb2RlID09PSBpbnB1dCB8fCByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9PT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSByYW5nZS5lbmRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSAwIC0gcmFuZ2UuZHVwbGljYXRlKCkubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIC1pbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gYmVnaW4gKyByYW5nZS50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IG5vdHJhbnNsYXRlID8gYmVnaW4gOiB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbiksXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbm90cmFuc2xhdGUgPyBlbmQgOiB0cmFuc2xhdGVQb3NpdGlvbihlbmQpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbihyZXR1cm5EZWZpbml0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHRydWUsIHRydWUpLCBibCA9IGJ1ZmZlci5sZW5ndGgsIHBvcywgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgcG9zaXRpb25zID0ge30sIGx2VGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLCBuZHhJbnRsenIgPSBsdlRlc3QgIT09IHVuZGVmaW5lZCA/IGx2VGVzdC5sb2NhdG9yLnNsaWNlKCkgOiB1bmRlZmluZWQsIHRlc3RQb3M7XG4gICAgICAgICAgICBmb3IgKHBvcyA9IGx2cCArIDE7IHBvcyA8IGJ1ZmZlci5sZW5ndGg7IHBvcysrKSB7XG4gICAgICAgICAgICAgICAgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSk7XG4gICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25zW3Bvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGVzdFBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbHZUZXN0QWx0ID0gbHZUZXN0ICYmIGx2VGVzdC5hbHRlcm5hdGlvbiAhPT0gdW5kZWZpbmVkID8gbHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGZvciAocG9zID0gYmwgLSAxOyBwb3MgPiBsdnA7IHBvcy0tKSB7XG4gICAgICAgICAgICAgICAgdGVzdFBvcyA9IHBvc2l0aW9uc1twb3NdO1xuICAgICAgICAgICAgICAgIGlmICgodGVzdFBvcy5tYXRjaC5vcHRpb25hbGl0eSB8fCB0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAmJiB0ZXN0UG9zLm1hdGNoLm5ld0Jsb2NrTWFya2VyIHx8IGx2VGVzdEFsdCAmJiAobHZUZXN0QWx0ICE9PSBwb3NpdGlvbnNbcG9zXS5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgdGVzdFBvcy5tYXRjaC5mbiAhPSBudWxsIHx8IHRlc3RQb3MubWF0Y2guZm4gPT09IG51bGwgJiYgdGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgY2hlY2tBbHRlcm5hdGlvbk1hdGNoKHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLCBsdlRlc3RBbHQudG9TdHJpbmcoKS5zcGxpdChcIixcIikpICYmIGdldFRlc3RzKHBvcylbMF0uZGVmICE9PSBcIlwiKSkgJiYgYnVmZmVyW3Bvc10gPT09IGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdFBvcy5tYXRjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYmwtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuRGVmaW5pdGlvbiA/IHtcbiAgICAgICAgICAgICAgICBsOiBibCxcbiAgICAgICAgICAgICAgICBkZWY6IHBvc2l0aW9uc1tibF0gPyBwb3NpdGlvbnNbYmxdLm1hdGNoIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9IDogYmw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSB7XG4gICAgICAgICAgICBidWZmZXIubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IGdldE1hc2tUZW1wbGF0ZSh0cnVlLCAwLCB0cnVlLCB1bmRlZmluZWQsIHRydWUpLCBsbW50LCB2YWxpZFBvcztcbiAgICAgICAgICAgIHdoaWxlIChsbW50ID0gdGVtcGxhdGUuc2hpZnQoKSwgbG1udCAhPT0gdW5kZWZpbmVkKSBidWZmZXIucHVzaChsbW50KTtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNDb21wbGV0ZShidWZmZXIpIHtcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5pc0NvbXBsZXRlKSkgcmV0dXJuIG9wdHMuaXNDb21wbGV0ZShidWZmZXIsIG9wdHMpO1xuICAgICAgICAgICAgaWYgKG9wdHMucmVwZWF0ID09PSBcIipcIikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9IGZhbHNlLCBscnAgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbih0cnVlKSwgYW1sID0gc2Vla1ByZXZpb3VzKGxycC5sKTtcbiAgICAgICAgICAgIGlmIChscnAuZGVmID09PSB1bmRlZmluZWQgfHwgbHJwLmRlZi5uZXdCbG9ja01hcmtlciB8fCBscnAuZGVmLm9wdGlvbmFsaXR5IHx8IGxycC5kZWYub3B0aW9uYWxRdWFudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGFtbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKGkpLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdC5mbiAhPT0gbnVsbCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gPT09IHVuZGVmaW5lZCAmJiB0ZXN0Lm9wdGlvbmFsaXR5ICE9PSB0cnVlICYmIHRlc3Qub3B0aW9uYWxRdWFudGlmaWVyICE9PSB0cnVlIHx8IHRlc3QuZm4gPT09IG51bGwgJiYgYnVmZmVyW2ldICE9PSBnZXRQbGFjZWhvbGRlcihpLCB0ZXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zLCBzdHJpY3QsIGZyb21Jc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgfHwgaXNSVEwpIHtcbiAgICAgICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFKSB7XG4gICAgICAgICAgICAgICAgICAgIGsgPSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgayA9IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwZW5kID0gcG9zLmVuZDtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmVuZCA9IHBvcy5iZWdpbjtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gcGVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFICYmIHBvcy5lbmQgLSBwb3MuYmVnaW4gPCAxKSB7XG4gICAgICAgICAgICAgICAgcG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dICE9PSB1bmRlZmluZWQgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5iZWdpbl0uaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgJiYgcG9zLmJlZ2luID09PSBwb3MuZW5kKSB7XG4gICAgICAgICAgICAgICAgcG9zLmVuZCA9IGlzTWFzayhwb3MuZW5kLCB0cnVlKSAmJiAoZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvcy5lbmRdICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuZW5kXS5pbnB1dCAhPT0gb3B0cy5yYWRpeFBvaW50KSA/IHBvcy5lbmQgKyAxIDogc2Vla05leHQocG9zLmVuZCkgKyAxO1xuICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXSAhPT0gdW5kZWZpbmVkICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dLmlucHV0ID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcy5lbmQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXZhbGlkYXRlTWFzayhwb3MpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAhPT0gdHJ1ZSAmJiBvcHRzLmtlZXBTdGF0aWMgIT09IGZhbHNlIHx8IG9wdHMucmVnZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYWx0ZXJuYXRlKHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1BvcyA9IHJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkID8gcmVzdWx0LmNhcmV0IDogcmVzdWx0LnBvcyA/IHNlZWtOZXh0KHJlc3VsdC5wb3MuYmVnaW4gPyByZXN1bHQucG9zLmJlZ2luIDogcmVzdWx0LnBvcykgOiBnZXRMYXN0VmFsaWRQb3NpdGlvbigtMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrICE9PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgfHwgcG9zLmJlZ2luID4gbmV3UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MuYmVnaW4gPT0gbmV3UG9zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbiwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobHZwIDwgcG9zLmJlZ2luIHx8IHBvcy5iZWdpbiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGx2cCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gcG9zLmJlZ2luO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tSXNWYWxpZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZ2V0TWFza1NldCgpLnAgPCBsdnAgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2dldE1hc2tTZXQoKS5wXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpemVDb2xvck1hc2soaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gKGlucHV0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93KS5nZXRDb21wdXRlZFN0eWxlKGlucHV0LCBudWxsKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZpbmRDYXJldFBvcyhjbGllbnR4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSwgY2FyZXRQb3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc3R5bGUgaW4gY29tcHV0ZWRTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oc3R5bGUpICYmIHN0eWxlLmluZGV4T2YoXCJmb250XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdHlsZVtzdHlsZV0gPSBjb21wdXRlZFN0eWxlW3N0eWxlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSBjb21wdXRlZFN0eWxlLnRleHRUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gY29tcHV0ZWRTdHlsZS5sZXR0ZXJTcGFjaW5nO1xuICAgICAgICAgICAgICAgIGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICAgICAgZS5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLndpZHRoID0gXCJhdXRvXCI7XG4gICAgICAgICAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBlLnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSk7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0VGV4dCA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSwgcHJldmlvdXNXaWR0aCA9IDAsIGl0bDtcbiAgICAgICAgICAgICAgICBmb3IgKGNhcmV0UG9zID0gMCwgaXRsID0gaW5wdXRUZXh0Lmxlbmd0aDsgY2FyZXRQb3MgPD0gaXRsOyBjYXJldFBvcysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MICs9IGlucHV0VGV4dC5jaGFyQXQoY2FyZXRQb3MpIHx8IFwiX1wiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5vZmZzZXRXaWR0aCA+PSBjbGllbnR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0MSA9IGNsaWVudHggLSBwcmV2aW91c1dpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldDIgPSBlLm9mZnNldFdpZHRoIC0gY2xpZW50eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MID0gaW5wdXRUZXh0LmNoYXJBdChjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQxIC09IGUub2Zmc2V0V2lkdGggLyAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBvZmZzZXQxIDwgb2Zmc2V0MiA/IGNhcmV0UG9zIC0gMSA6IGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNXaWR0aCA9IGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhcmV0UG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHRlbXBsYXRlLnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICAgICAgICAgIHRlbXBsYXRlLnN0eWxlLnRleHRBbGlnbiA9IGNvbXB1dGVkU3R5bGUudGV4dEFsaWduO1xuICAgICAgICAgICAgY29sb3JNYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5jb2xvck1hc2sgPSBjb2xvck1hc2s7XG4gICAgICAgICAgICBjb2xvck1hc2suY2xhc3NOYW1lID0gXCJpbS1jb2xvcm1hc2tcIjtcbiAgICAgICAgICAgIGlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbG9yTWFzaywgaW5wdXQpO1xuICAgICAgICAgICAgaW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICBjb2xvck1hc2suYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICAgICAgY29sb3JNYXNrLmFwcGVuZENoaWxkKHRlbXBsYXRlKTtcbiAgICAgICAgICAgIGlucHV0LnN0eWxlLmxlZnQgPSB0ZW1wbGF0ZS5vZmZzZXRMZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMubW91c2VsZWF2ZUV2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwibW91c2VlbnRlclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMubW91c2VlbnRlckV2ZW50LmNhbGwoaW5wdXQsIFsgZSBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJChjb2xvck1hc2spLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBmaW5kQ2FyZXRQb3MoZS5jbGllbnRYKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudC5jYWxsKGlucHV0LCBbIGUgXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZW5kZXJDb2xvck1hc2soaW5wdXQsIGNhcmV0UG9zLCBjbGVhcikge1xuICAgICAgICAgICAgdmFyIG1hc2tUZW1wbGF0ZSA9IFtdLCBpc1N0YXRpYyA9IGZhbHNlLCB0ZXN0LCB0ZXN0UG9zLCBuZHhJbnRsenIsIHBvcyA9IDA7XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRFbnRyeShlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeSA9PT0gdW5kZWZpbmVkKSBlbnRyeSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1N0YXRpYyAmJiAodGVzdC5mbiA9PT0gbnVsbCB8fCB0ZXN0UG9zLmlucHV0ID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzU3RhdGljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFza1RlbXBsYXRlLnB1c2goXCI8c3BhbiBjbGFzcz0naW0tc3RhdGljJz5cIiArIGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU3RhdGljICYmICh0ZXN0LmZuICE9PSBudWxsICYmIHRlc3RQb3MuaW5wdXQgIT09IHVuZGVmaW5lZCB8fCB0ZXN0LmRlZiA9PT0gXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG10bCA9IG1hc2tUZW1wbGF0ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIG1hc2tUZW1wbGF0ZVttdGwgLSAxXSA9IG1hc2tUZW1wbGF0ZVttdGwgLSAxXSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUucHVzaChlbnRyeSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2tUZW1wbGF0ZS5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldENhcmV0KCkge1xuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUuc3BsaWNlKGNhcmV0UG9zLmJlZ2luLCAwLCBjYXJldFBvcy5iZWdpbiA9PT0gY2FyZXRQb3MuZW5kIHx8IGNhcmV0UG9zLmVuZCA+IGdldE1hc2tTZXQoKS5tYXNrTGVuZ3RoID8gJzxtYXJrIGNsYXNzPVwiaW0tY2FyZXRcIiBzdHlsZT1cImJvcmRlci1yaWdodC13aWR0aDogMXB4O2JvcmRlci1yaWdodC1zdHlsZTogc29saWQ7XCI+JyA6ICc8bWFyayBjbGFzcz1cImltLWNhcmV0LXNlbGVjdFwiPicpO1xuICAgICAgICAgICAgICAgICAgICBtYXNrVGVtcGxhdGUuc3BsaWNlKGNhcmV0UG9zLmVuZCArIDEsIDAsIFwiPC9tYXJrPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29sb3JNYXNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjYXJldFBvcy5iZWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBjYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2xlYXIgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdGVzdFBvcy5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFbnRyeShidWZmZXJbcG9zXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3QgPSB0ZXN0UG9zLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmppdE1hc2tpbmcgPT09IGZhbHNlIHx8IHBvcyA8IGx2cCB8fCB0eXBlb2Ygb3B0cy5qaXRNYXNraW5nID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKG9wdHMuaml0TWFza2luZykgJiYgb3B0cy5qaXRNYXNraW5nID4gcG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVudHJ5KGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKChtYXhMZW5ndGggPT09IHVuZGVmaW5lZCB8fCBwb3MgPCBtYXhMZW5ndGgpICYmICh0ZXN0LmZuICE9PSBudWxsIHx8IHRlc3QuZGVmICE9PSBcIlwiKSB8fCBsdnAgPiBwb3MgfHwgaXNTdGF0aWMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdGF0aWMpIHNldEVudHJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIHNldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IGNvbG9yTWFzay5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXTtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBtYXNrVGVtcGxhdGUuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2sucG9zaXRpb25Db2xvck1hc2soaW5wdXQsIHRlbXBsYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYXNrKGVsZW0pIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRWxlbWVudFR5cGVTdXBwb3J0ZWQoaW5wdXQsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXRjaFZhbHVlUHJvcGVydHkobnB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUdldDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlU2V0O1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXRjaFZhbGhvb2sodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQudmFsSG9va3MgJiYgKCQudmFsSG9va3NbdHlwZV0gPT09IHVuZGVmaW5lZCB8fCAkLnZhbEhvb2tzW3R5cGVdLmlucHV0bWFza3BhdGNoICE9PSB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rR2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLmdldCA/ICQudmFsSG9va3NbdHlwZV0uZ2V0IDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rU2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLnNldCA/ICQudmFsSG9va3NbdHlwZV0uc2V0IDogZnVuY3Rpb24oZWxlbSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQudmFsSG9va3NbdHlwZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWxob29rR2V0KGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TGFzdFZhbGlkUG9zaXRpb24odW5kZWZpbmVkLCB1bmRlZmluZWQsIGVsZW0uaW5wdXRtYXNrLm1hc2tzZXQudmFsaWRQb3NpdGlvbnMpICE9PSAtMSB8fCBvcHRzLm51bGxhYmxlICE9PSB0cnVlID8gcmVzdWx0IDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcmV0dXJuIHZhbGhvb2tHZXQoZWxlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oZWxlbSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoZWxlbSksIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbGhvb2tTZXQoZWxlbSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW0udHJpZ2dlcihcInNldHZhbHVlXCIsIFsgdmFsdWUgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dG1hc2twYXRjaDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzayA/IHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSA6IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgIT09IC0xIHx8IG9wdHMubnVsbGFibGUgIT09IHRydWUgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzICYmIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPyAoaXNSVEwgPyBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKS5yZXZlcnNlKCkgOiBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKS5zbGljZSgpKSkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcykgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB2YWx1ZUdldC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNldHRlcih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXIoXCJzZXR2YWx1ZVwiLCBbIHZhbHVlIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihucHQsIFwibW91c2VlbnRlclwiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXMsIHZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5ub1ZhbHVlUGF0Y2hpbmcgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSB0eXBlb2YgXCJ0ZXN0XCIuX19wcm90b19fID09PSBcIm9iamVjdFwiID8gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZVByb3BlcnR5ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YobnB0KSwgXCJ2YWx1ZVwiKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlUHJvcGVydHkgJiYgdmFsdWVQcm9wZXJ0eS5nZXQgJiYgdmFsdWVQcm9wZXJ0eS5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gdmFsdWVQcm9wZXJ0eS5nZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldCA9IHZhbHVlUHJvcGVydHkuc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBzZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChucHQudGFnTmFtZSAhPT0gXCJJTlBVVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlU2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBzZXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gbnB0Ll9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBucHQuX19sb29rdXBTZXR0ZXJfXyhcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBucHQuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGdldHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5wdC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgc2V0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0ID0gdmFsdWVHZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fX3ZhbHVlU2V0ID0gdmFsdWVTZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBucHQuaW5wdXRtYXNrLl92YWx1ZUdldCA9IGZ1bmN0aW9uKG92ZXJydWxlUlRMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzUlRMICYmIG92ZXJydWxlUlRMICE9PSB0cnVlID8gdmFsdWVHZXQuY2FsbCh0aGlzLmVsKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcy5lbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSwgb3ZlcnJ1bGVSVEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldC5jYWxsKHRoaXMuZWwsIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBcIlwiIDogb3ZlcnJ1bGVSVEwgIT09IHRydWUgJiYgaXNSVEwgPyB2YWx1ZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVHZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlR2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRjaFZhbGhvb2sobnB0LnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRUeXBlID0gaW5wdXQuZ2V0QXR0cmlidXRlKFwidHlwZVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdXBwb3J0ZWQgPSBpbnB1dC50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgJC5pbkFycmF5KGVsZW1lbnRUeXBlLCBvcHRzLnN1cHBvcnRzSW5wdXRUeXBlKSAhPT0gLTEgfHwgaW5wdXQuaXNDb250ZW50RWRpdGFibGUgfHwgaW5wdXQudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiO1xuICAgICAgICAgICAgICAgIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnRhZ05hbWUgPT09IFwiSU5QVVRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBlbGVtZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N1cHBvcnRlZCA9IGVsLnR5cGUgPT09IFwidGV4dFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaXNTdXBwb3J0ZWQgPSBcInBhcnRpYWxcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzU3VwcG9ydGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXRjaFZhbHVlUHJvcGVydHkoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpbnB1dC5pbnB1dG1hc2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRXZlbnRSdWxlci5vZmYoZWxlbSk7XG4gICAgICAgICAgICB2YXIgaXNTdXBwb3J0ZWQgPSBpc0VsZW1lbnRUeXBlU3VwcG9ydGVkKGVsZW0sIG9wdHMpO1xuICAgICAgICAgICAgaWYgKGlzU3VwcG9ydGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGVsID0gZWxlbTtcbiAgICAgICAgICAgICAgICAkZWwgPSAkKGVsKTtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFBsYWNlaG9sZGVyID0gZWwucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoID0gZWwgIT09IHVuZGVmaW5lZCA/IGVsLm1heExlbmd0aCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAobWF4TGVuZ3RoID09PSAtMSkgbWF4TGVuZ3RoID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmNvbG9yTWFzayA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplQ29sb3JNYXNrKGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbnB1dE1vZGVcIiBpbiBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtb2RlID0gb3B0cy5pbnB1dG1vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpbnB1dG1vZGVcIiwgb3B0cy5pbnB1dG1vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpc2FibGVQcmVkaWN0aXZlVGV4dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiYXV0b2NvcnJlY3RcIiBpbiBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmF1dG9jb3JyZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNvbG9yTWFzayAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplQ29sb3JNYXNrKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwudHlwZSA9IFwicGFzc3dvcmRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiaW0taW5zZXJ0XCIsIG9wdHMuaW5zZXJ0TW9kZSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwic3VibWl0XCIsIEV2ZW50SGFuZGxlcnMuc3VibWl0RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInJlc2V0XCIsIEV2ZW50SGFuZGxlcnMucmVzZXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiYmx1clwiLCBFdmVudEhhbmRsZXJzLmJsdXJFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiZm9jdXNcIiwgRXZlbnRIYW5kbGVycy5mb2N1c0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY29sb3JNYXNrICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImNsaWNrXCIsIEV2ZW50SGFuZGxlcnMuY2xpY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcIm1vdXNlbGVhdmVcIiwgRXZlbnRIYW5kbGVycy5tb3VzZWxlYXZlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJtb3VzZWVudGVyXCIsIEV2ZW50SGFuZGxlcnMubW91c2VlbnRlckV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcInBhc3RlXCIsIEV2ZW50SGFuZGxlcnMucGFzdGVFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY3V0XCIsIEV2ZW50SGFuZGxlcnMuY3V0RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImNvbXBsZXRlXCIsIG9wdHMub25jb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiaW5jb21wbGV0ZVwiLCBvcHRzLm9uaW5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiY2xlYXJlZFwiLCBvcHRzLm9uY2xlYXJlZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbW9iaWxlICYmIG9wdHMuaW5wdXRFdmVudE9ubHkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwia2V5ZG93blwiLCBFdmVudEhhbmRsZXJzLmtleWRvd25FdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9uKGVsLCBcImtleXByZXNzXCIsIEV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJtYXhMZW5ndGhcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJpbnB1dFwiLCBFdmVudEhhbmRsZXJzLmlucHV0RmFsbEJhY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIEV2ZW50UnVsZXIub24oZWwsIFwiYmVmb3JlaW5wdXRcIiwgRXZlbnRIYW5kbGVycy5iZWZvcmVJbnB1dEV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgRXZlbnRSdWxlci5vbihlbCwgXCJzZXR2YWx1ZVwiLCBFdmVudEhhbmRsZXJzLnNldFZhbHVlRXZlbnQpO1xuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKSAhPT0gXCJcIiB8fCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID09PSBmYWxzZSB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbFZhbHVlID0gJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpLCBvcHRzKSB8fCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KHRydWUpIDogZWwuaW5wdXRtYXNrLl92YWx1ZUdldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gXCJcIikgY2hlY2tWYWwoZWwsIHRydWUsIGZhbHNlLCBpbml0aWFsVmFsdWUuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlKGJ1ZmZlcikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhckluY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldExhc3RWYWxpZFBvc2l0aW9uKCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPT09IGZhbHNlIHx8IG9wdHMuc2hvd01hc2tPbkZvY3VzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsIHx8IGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSkgIT09IFwiXCIpIHdyaXRlQnVmZmVyKGVsLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0KGVsLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlQnVmZmVyO1xuICAgICAgICBpZiAoYWN0aW9uT2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uT2JqLmFjdGlvbikge1xuICAgICAgICAgICAgICBjYXNlIFwiaXNDb21wbGV0ZVwiOlxuICAgICAgICAgICAgICAgIGVsID0gYWN0aW9uT2JqLmVsO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKTtcblxuICAgICAgICAgICAgICBjYXNlIFwidW5tYXNrZWR2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIGlmIChlbCA9PT0gdW5kZWZpbmVkIHx8IGFjdGlvbk9iai52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9ICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIHZhbHVlQnVmZmVyLCBvcHRzKSB8fCB2YWx1ZUJ1ZmZlciA6IHZhbHVlQnVmZmVyKS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwuY2FsbCh0aGlzLCB1bmRlZmluZWQsIGZhbHNlLCBmYWxzZSwgdmFsdWVCdWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIG9wdHMub25CZWZvcmVXcml0ZS5jYWxsKGlucHV0bWFzaywgdW5kZWZpbmVkLCBnZXRCdWZmZXIoKSwgMCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZHZhbHVlKGVsKTtcblxuICAgICAgICAgICAgICBjYXNlIFwibWFza1wiOlxuICAgICAgICAgICAgICAgIG1hc2soZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJmb3JtYXRcIjpcbiAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9ICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dG1hc2ssIGFjdGlvbk9iai52YWx1ZSwgb3B0cykgfHwgYWN0aW9uT2JqLnZhbHVlIDogYWN0aW9uT2JqLnZhbHVlKS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICBjaGVja1ZhbC5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgdHJ1ZSwgZmFsc2UsIHZhbHVlQnVmZmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uT2JqLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogZ2V0QnVmZmVyKCkuam9pbihcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXNrU2NvcGUuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldG1ldGFkYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG1hc2tzZXQsIG9wdHMpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJpc1ZhbGlkXCI6XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbk9iai52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZUJ1ZmZlciA9IGFjdGlvbk9iai52YWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWwuY2FsbCh0aGlzLCB1bmRlZmluZWQsIHRydWUsIHRydWUsIHZhbHVlQnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25PYmoudmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHJsID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oKSwgbG1pYiA9IGJ1ZmZlci5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGZvciAoO2xtaWIgPiBybDsgbG1pYi0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hc2sobG1pYikpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidWZmZXIuc3BsaWNlKHJsLCBsbWliICsgMSAtIHJsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNDb21wbGV0ZShidWZmZXIpICYmIGFjdGlvbk9iai52YWx1ZSA9PT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcblxuICAgICAgICAgICAgICBjYXNlIFwiZ2V0ZW1wdHltYXNrXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKTtcblxuICAgICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLmlucHV0bWFzaykge1xuICAgICAgICAgICAgICAgICAgICAkLmRhdGEoZWwsIFwiX2lucHV0bWFza19vcHRzXCIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAkZWwgPSAkKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChvcHRzLmF1dG9Vbm1hc2sgPyB1bm1hc2tlZHZhbHVlKGVsKSA6IGVsLmlucHV0bWFzay5fdmFsdWVHZXQodHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBFdmVudFJ1bGVyLm9mZihlbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2suY29sb3JNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1hc2sgPSBlbC5pbnB1dG1hc2suY29sb3JNYXNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNYXNrLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFzay5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgY29sb3JNYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWFzay5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbG9yTWFzayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVQcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKGVsKSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBlbC5pbnB1dG1hc2suX192YWx1ZVNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBlbC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5pbnB1dG1hc2suX192YWx1ZUdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLCBlbC5pbnB1dG1hc2suX192YWx1ZUdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX19kZWZpbmVTZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlU2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiZ2V0bWV0YWRhdGFcIjpcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0FycmF5KG1hc2tzZXQubWV0YWRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrVGFyZ2V0ID0gZ2V0TWFza1RlbXBsYXRlKHRydWUsIDAsIGZhbHNlKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2gobWFza3NldC5tZXRhZGF0YSwgZnVuY3Rpb24obmR4LCBtdGR0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXRkdC5tYXNrID09PSBtYXNrVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RhcmdldCA9IG10ZHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tUYXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrc2V0Lm1ldGFkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJbnB1dG1hc2s7XG59KTsiLCJjb25zdCBidXJnZXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW5NZW51QnVyZ2VySWNvblwiKTtcclxuY29uc3QgcHJvZmlsZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXV0aFByb2ZpbGVcIik7XHJcbmNvbnN0IG1haW5NZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluLW1lbnVcIik7XHJcbmNvbnN0IGF1dGhMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlLWhlYWRlcl9fYXV0aC1saXN0XCIpO1xyXG5sZXQgaXNQcm9maWxlQWN0aXZlID0gZmFsc2U7XHJcblxyXG5idXJnZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGV2dCA9PiB7XHJcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgaWYgKGlzUHJvZmlsZUFjdGl2ZSkge1xyXG4gICAgYXV0aExpc3QuY2xhc3NMaXN0LnJlbW92ZShcInBhZ2UtaGVhZGVyX19hdXRoLWxpc3QtLWFjdGl2ZVwiKTtcclxuICAgIGlzUHJvZmlsZUFjdGl2ZSA9IGZhbHNlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtYWluTWVudS5jbGFzc0xpc3QudG9nZ2xlKFwibWFpbi1tZW51LS1hY3RpdmVcIik7XHJcbiAgfVxyXG4gIGJ1cmdlckJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwibWFpbi1tZW51X19idXJnZXItaWNvbi0tYWN0aXZlXCIpO1xyXG4gIHByb2ZpbGVCdXR0b24uY2xhc3NMaXN0LnRvZ2dsZShcInBhZ2UtaGVhZGVyX19hdXRoLXByb2ZpbGUtLWhpZGVcIik7XHJcbn0pO1xyXG5cclxucHJvZmlsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZ0ID0+IHtcclxuICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICBpZiAoIWlzUHJvZmlsZUFjdGl2ZSkge1xyXG4gICAgYXV0aExpc3QuY2xhc3NMaXN0LmFkZChcInBhZ2UtaGVhZGVyX19hdXRoLWxpc3QtLWFjdGl2ZVwiKTtcclxuICAgIGJ1cmdlckJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibWFpbi1tZW51X19idXJnZXItaWNvbi0tYWN0aXZlXCIpO1xyXG4gICAgaXNQcm9maWxlQWN0aXZlID0gdHJ1ZTtcclxuICAgIHByb2ZpbGVCdXR0b24uY2xhc3NMaXN0LmFkZChcInBhZ2UtaGVhZGVyX19hdXRoLXByb2ZpbGUtLWhpZGVcIik7XHJcbiAgfVxyXG59KTtcclxuIiwicmVxdWlyZShcIi4vZGlzdC9pbnB1dG1hc2svaW5wdXRtYXNrLmV4dGVuc2lvbnNcIik7XHJcbnJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5kYXRlLmV4dGVuc2lvbnNcIik7XHJcbnJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5udW1lcmljLmV4dGVuc2lvbnNcIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2Rpc3QvaW5wdXRtYXNrL2lucHV0bWFzay5qc1wiKTtcclxuIiwiLyohXG4qIGdsb2JhbC93aW5kb3cuanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC45XG4qL1xuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG5ldyAoZXZhbChcInJlcXVpcmUoJ2pzZG9tJykuSlNET01cIikpKFwiXCIpLndpbmRvdztcbn0pOyBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbmV3IChldmFsKFwicmVxdWlyZSgnanNkb20nKS5KU0RPTVwiKSkoXCJcIikud2luZG93OyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImQ5NDFhZjBjMGY1NDhiZmE1MmFiZTIyNzZmZDJkZGUxLnN2Z1wiOyIsIi8qIVxuKiBpbnB1dG1hc2suZXh0ZW5zaW9ucy5qc1xuKiBodHRwczovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL0lucHV0bWFza1xuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE5IFJvYmluIEhlcmJvdHNcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiogVmVyc2lvbjogNC4wLjlcbiovXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbIFwiLi9pbnB1dG1hc2tcIiBdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9pbnB1dG1hc2tcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3Rvcnkod2luZG93LklucHV0bWFzayk7XG4gICAgfVxufSkoZnVuY3Rpb24oSW5wdXRtYXNrKSB7XG4gICAgSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zKHtcbiAgICAgICAgQToge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiZcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIiNcIjoge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLUZhLWZdXCIsXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICB9XG4gICAgfSk7XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBjc3N1bml0OiB7XG4gICAgICAgICAgICByZWdleDogXCJbKy1dP1swLTldK1xcXFwuPyhbMC05XSspPyhweHxlbXxyZW18ZXh8JXxpbnxjbXxtbXxwdHxwYylcIlxuICAgICAgICB9LFxuICAgICAgICB1cmw6IHtcbiAgICAgICAgICAgIHJlZ2V4OiBcIihodHRwcz98ZnRwKS8vLipcIixcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGlwOiB7XG4gICAgICAgICAgICBtYXNrOiBcImlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV1cIixcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICAgICAgaToge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zIC0gMSA+IC0xICYmIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICE9PSBcIi5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocnMgPSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSArIGNocnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyAtIDIgPiAtMSAmJiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2hycyA9IFwiMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjaHJzID0gXCIwMFwiICsgY2hycztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XVwiKS50ZXN0KGNocnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiXG4gICAgICAgIH0sXG4gICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICBtYXNrOiBcIip7MSw2NH1bLip7MSw2NH1dWy4qezEsNjR9XVsuKnsxLDYzfV1ALXsxLDYzfS4tezEsNjN9Wy4tezEsNjN9XVsuLXsxLDYzfV1cIixcbiAgICAgICAgICAgIGdyZWVkeTogZmFsc2UsXG4gICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIixcbiAgICAgICAgICAgIG9uQmVmb3JlUGFzdGU6IGZ1bmN0aW9uKHBhc3RlZFZhbHVlLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgcGFzdGVkVmFsdWUgPSBwYXN0ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXN0ZWRWYWx1ZS5yZXBsYWNlKFwibWFpbHRvOlwiLCBcIlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFwiKlwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XFx1ZmYxMS1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1ISMkJSYnKisvPT9eX2B7fH1+LV1cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCItXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXotXVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwiZW1haWxcIlxuICAgICAgICB9LFxuICAgICAgICBtYWM6IHtcbiAgICAgICAgICAgIG1hc2s6IFwiIyM6IyM6IyM6IyM6IyM6IyNcIlxuICAgICAgICB9LFxuICAgICAgICB2aW46IHtcbiAgICAgICAgICAgIG1hc2s6IFwiVnsxM305ezR9XCIsXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgIFY6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLUhKLU5QUi1aYS1oai1ucHItelxcXFxkXVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGVhckluY29tcGxldGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSW5wdXRtYXNrO1xufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlcyA9IFtdO1xuICB2YXIgbmV3U3R5bGVzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjc3MgPSBpdGVtWzFdO1xuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl07XG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfTtcblxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBwYXJ0czogW3BhcnRdXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuICAgIHZhciBqID0gMDtcblxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrO1xuXG4gICAgICBmb3IgKDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge1xuICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgcmVmczogMSxcbiAgICAgICAgcGFydHM6IHBhcnRzXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgb3B0aW9ucy5hdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuYXR0cmlidXRlcyA9IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnID8gb3B0aW9ucy5hdHRyaWJ1dGVzIDoge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldO1xuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cbiAgICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgICBkb21TdHlsZS5yZWZzLS07XG4gICAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgdmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcbiAgICAgIGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1heVJlbW92ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfZG9tU3R5bGUgPSBtYXlSZW1vdmVbX2ldO1xuXG4gICAgICBpZiAoX2RvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBfZG9tU3R5bGUucGFydHNbal0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtfZG9tU3R5bGUuaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07IiwiLyohXG4qIGRlcGVuZGVuY3lMaWJzL2lucHV0bWFzay5kZXBlbmRlbmN5TGliLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuLi9nbG9iYWwvd2luZG93XCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4uL2dsb2JhbC93aW5kb3dcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5kZXBlbmRlbmN5TGliID0gZmFjdG9yeSh3aW5kb3cpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICBmdW5jdGlvbiBpbmRleE9mKGxpc3QsIGVsZW0pIHtcbiAgICAgICAgdmFyIGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgICAgICAgZm9yICg7aSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQXJyYXlsaWtlKG9iaikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCwgbHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgICAgICBpZiAobHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBpc1dpbmRvdyhvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIC0gMSBpbiBvYmo7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIGVsZW0gaW5zdGFuY2VvZiBFbGVtZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBEZXBlbmRlbmN5TGliKGVsZW0pIHtcbiAgICAgICAgaWYgKGVsZW0gaW5zdGFuY2VvZiBEZXBlbmRlbmN5TGliKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGVwZW5kZW5jeUxpYikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGVwZW5kZW5jeUxpYihlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbSAhPT0gdW5kZWZpbmVkICYmIGVsZW0gIT09IG51bGwgJiYgZWxlbSAhPT0gd2luZG93KSB7XG4gICAgICAgICAgICB0aGlzWzBdID0gZWxlbS5ub2RlTmFtZSA/IGVsZW0gOiBlbGVtWzBdICE9PSB1bmRlZmluZWQgJiYgZWxlbVswXS5ub2RlTmFtZSA/IGVsZW1bMF0gOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0pO1xuICAgICAgICAgICAgaWYgKHRoaXNbMF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzWzBdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpc1swXS5ldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5IHx8IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtKSB7XG4gICAgICAgIHJldHVybiBpc1dpbmRvdyhlbGVtKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ID8gZWxlbS5kZWZhdWx0VmlldyB8fCBlbGVtLnBhcmVudFdpbmRvdyA6IGZhbHNlO1xuICAgIH1cbiAgICBEZXBlbmRlbmN5TGliLnByb3RvdHlwZSA9IHtcbiAgICAgICAgb246IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBhZGRFdmVudCA9IGZ1bmN0aW9uKGV2LCBuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKGV2LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5hdHRhY2hFdmVudChcIm9uXCIgKyBldiwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl0gPSBldmVudFJlZ2lzdHJ5W2V2XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXSA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0gfHwgW107XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ucHVzaChoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBfZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgZXYgPSBuc0V2ZW50WzBdLCBuYW1lc3BhY2UgPSBuc0V2ZW50WzFdIHx8IFwiZ2xvYmFsXCI7XG4gICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50KGV2LCBuYW1lc3BhY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVnaXN0cnkgPSB0aGlzWzBdLmV2ZW50UmVnaXN0cnksIGVsZW0gPSB0aGlzWzBdO1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGV2LCBuYW1lc3BhY2UsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2IGluIGV2ZW50UmVnaXN0cnkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZGV0YWNoRXZlbnQoXCJvblwiICsgZXYsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJnbG9iYWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLmluZGV4T2YoaGFuZGxlciksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5zcGxpY2UoZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXS5pbmRleE9mKGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVOYW1lc3BhY2UgPSBmdW5jdGlvbihldiwgbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldnRzID0gW10sIGhuZHgsIGhuZEw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChobmR4ID0gMCwgaG5kTCA9IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBobmR4IDwgaG5kTDsgaG5keCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldjogZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSAmJiBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IG5hbWVzcGFjZSA6IFwiZ2xvYmFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXZOZHggaW4gZXZlbnRSZWdpc3RyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldk5keF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5tc3AgPT09IG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaG5keCA9IDAsIGhuZEwgPSBldmVudFJlZ2lzdHJ5W2V2TmR4XVtubXNwXS5sZW5ndGg7IGhuZHggPCBobmRMOyBobmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2OiBldk5keCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbm1zcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGV2ZW50UmVnaXN0cnlbZXZOZHhdW25tc3BdW2huZHhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXY6IGV2TmR4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5tc3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZ0cztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBfZXZlbnRzID0gZXZlbnRzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbmR4ID0gMDsgZW5keCA8IF9ldmVudHMubGVuZ3RoOyBlbmR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5zRXZlbnQgPSBfZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSwgb2ZmRXZlbnRzID0gcmVzb2x2ZU5hbWVzcGFjZShuc0V2ZW50WzBdLCBuc0V2ZW50WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG9mZkV2ZW50c0wgPSBvZmZFdmVudHMubGVuZ3RoOyBpIDwgb2ZmRXZlbnRzTDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFdmVudChvZmZFdmVudHNbaV0uZXYsIG9mZkV2ZW50c1tpXS5uYW1lc3BhY2UsIG9mZkV2ZW50c1tpXS5oYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudCh0aGlzWzBdKSkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJlZ2lzdHJ5ID0gdGhpc1swXS5ldmVudFJlZ2lzdHJ5LCBlbGVtID0gdGhpc1swXTtcbiAgICAgICAgICAgICAgICB2YXIgX2V2ZW50cyA9IHR5cGVvZiBldmVudHMgPT09IFwic3RyaW5nXCIgPyBldmVudHMuc3BsaXQoXCIgXCIpIDogWyBldmVudHMudHlwZSBdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGVuZHggPSAwOyBlbmR4IDwgX2V2ZW50cy5sZW5ndGg7IGVuZHgrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnNFdmVudCA9IF9ldmVudHNbZW5keF0uc3BsaXQoXCIuXCIpLCBldiA9IG5zRXZlbnRbMF0sIG5hbWVzcGFjZSA9IG5zRXZlbnRbMV0gfHwgXCJnbG9iYWxcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50ICE9PSB1bmRlZmluZWQgJiYgbmFtZXNwYWNlID09PSBcImdsb2JhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZudCwgaSwgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXYsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudC5pbml0Q3VzdG9tRXZlbnQoZXYsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMudHlwZSkgRGVwZW5kZW5jeUxpYi5leHRlbmQoZXZudCwgZXZlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoZXZudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2bnQuZXZlbnRUeXBlID0gZXY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZudC5kZXRhaWwgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cy50eXBlKSBEZXBlbmRlbmN5TGliLmV4dGVuZChldm50LCBldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZmlyZUV2ZW50KFwib25cIiArIGV2bnQuZXZlbnRUeXBlLCBldm50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudFJlZ2lzdHJ5W2V2XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBhcmd1bWVudHNbMF0udHlwZSA/IGFyZ3VtZW50c1swXSA6IERlcGVuZGVuY3lMaWIuRXZlbnQoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgPT09IFwiZ2xvYmFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBubXNwIGluIGV2ZW50UmVnaXN0cnlbZXZdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudFJlZ2lzdHJ5W2V2XVtubXNwXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbm1zcF1baV0uYXBwbHkoZWxlbSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXVtpXS5hcHBseShlbGVtLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIubm9vcCA9IGZ1bmN0aW9uKCkge307XG4gICAgRGVwZW5kZW5jeUxpYi5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbiAgICBEZXBlbmRlbmN5TGliLmluQXJyYXkgPSBmdW5jdGlvbihlbGVtLCBhcnIsIGkpIHtcbiAgICAgICAgcmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mKGFyciwgZWxlbSwgaSk7XG4gICAgfTtcbiAgICBEZXBlbmRlbmN5TGliLnZhbEhvb2tzID0gdW5kZWZpbmVkO1xuICAgIERlcGVuZGVuY3lMaWIuaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgaXNXaW5kb3cob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmouY29uc3RydWN0b3IgJiYgIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5leHRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLCB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBkZWVwID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgZGVlcCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1tpXSB8fCB7fTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhRGVwZW5kZW5jeUxpYi5pc0Z1bmN0aW9uKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRoaXM7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7aSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMgPSBhcmd1bWVudHNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvcHkgPSBvcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBjb3B5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVlcCAmJiBjb3B5ICYmIChEZXBlbmRlbmN5TGliLmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gRGVwZW5kZW5jeUxpYi5pc0FycmF5KGNvcHkpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5SXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlJc0FycmF5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgRGVwZW5kZW5jeUxpYi5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgRGVwZW5kZW5jeUxpYi5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IERlcGVuZGVuY3lMaWIuZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3B5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGNvcHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIERlcGVuZGVuY3lMaWIuZWFjaCA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHZhbHVlLCBpID0gMDtcbiAgICAgICAgaWYgKGlzQXJyYXlsaWtlKG9iaikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxpYi5kYXRhID0gZnVuY3Rpb24ob3duZXIsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvd25lci5fX2RhdGEgPyBvd25lci5fX2RhdGFba2V5XSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvd25lci5fX2RhdGEgPSBvd25lci5fX2RhdGEgfHwge307XG4gICAgICAgICAgICBvd25lci5fX2RhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIERlcGVuZGVuY3lMaWIuRXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgRGVwZW5kZW5jeUxpYi5FdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7XG4gICAgICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgICB9O1xuICAgICAgICBEZXBlbmRlbmN5TGliLkV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgfVxuICAgIHJldHVybiBEZXBlbmRlbmN5TGliO1xufSk7IiwiLyohXG4qIGlucHV0bWFzay5kYXRlLmV4dGVuc2lvbnMuanNcbiogaHR0cHM6Ly9naXRodWIuY29tL1JvYmluSGVyYm90cy9JbnB1dG1hc2tcbiogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxOSBSb2JpbiBIZXJib3RzXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4qIFZlcnNpb246IDQuMC45XG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWyBcIi4vaW5wdXRtYXNrXCIgXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vaW5wdXRtYXNrXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KHdpbmRvdy5JbnB1dG1hc2spO1xuICAgIH1cbn0pKGZ1bmN0aW9uKElucHV0bWFzaykge1xuICAgIHZhciAkID0gSW5wdXRtYXNrLmRlcGVuZGVuY3lMaWI7XG4gICAgdmFyIGZvcm1hdENvZGUgPSB7XG4gICAgICAgIGQ6IFsgXCJbMS05XXxbMTJdWzAtOV18M1swMV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSwgXCJkYXlcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSBdLFxuICAgICAgICBkZDogWyBcIjBbMS05XXxbMTJdWzAtOV18M1swMV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSwgXCJkYXlcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldERhdGUuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgZGRkOiBbIFwiXCIgXSxcbiAgICAgICAgZGRkZDogWyBcIlwiIF0sXG4gICAgICAgIG06IFsgXCJbMS05XXwxWzAxMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TW9udGgsIFwibW9udGhcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5wcm90b3R5cGUuZ2V0TW9udGguY2FsbCh0aGlzKSArIDE7XG4gICAgICAgIH0gXSxcbiAgICAgICAgbW06IFsgXCIwWzEtOV18MVswMTJdXCIsIERhdGUucHJvdG90eXBlLnNldE1vbnRoLCBcIm1vbnRoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNb250aC5jYWxsKHRoaXMpICsgMSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgbW1tOiBbIFwiXCIgXSxcbiAgICAgICAgbW1tbTogWyBcIlwiIF0sXG4gICAgICAgIHl5OiBbIFwiWzAtOV17Mn1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0RnVsbFllYXIsIFwieWVhclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgeXl5eTogWyBcIlswLTldezR9XCIsIERhdGUucHJvdG90eXBlLnNldEZ1bGxZZWFyLCBcInllYXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyLmNhbGwodGhpcyksIDQpO1xuICAgICAgICB9IF0sXG4gICAgICAgIGg6IFsgXCJbMS05XXwxWzAtMl1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgaGg6IFsgXCIwWzEtOV18MVswLTJdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBoaGg6IFsgXCJbMC05XStcIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgRGF0ZS5wcm90b3R5cGUuZ2V0SG91cnMgXSxcbiAgICAgICAgSDogWyBcIjE/WzAtOV18MlswLTNdXCIsIERhdGUucHJvdG90eXBlLnNldEhvdXJzLCBcImhvdXJzXCIsIERhdGUucHJvdG90eXBlLmdldEhvdXJzIF0sXG4gICAgICAgIEhIOiBbIFwiMFswLTldfDFbMC05XXwyWzAtM11cIiwgRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsIFwiaG91cnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEhvdXJzLmNhbGwodGhpcyksIDIpO1xuICAgICAgICB9IF0sXG4gICAgICAgIEhISDogWyBcIlswLTldK1wiLCBEYXRlLnByb3RvdHlwZS5zZXRIb3VycywgXCJob3Vyc1wiLCBEYXRlLnByb3RvdHlwZS5nZXRIb3VycyBdLFxuICAgICAgICBNOiBbIFwiWzEtNV0/WzAtOV1cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWludXRlcywgXCJtaW51dGVzXCIsIERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMgXSxcbiAgICAgICAgTU06IFsgXCIwWzAtOV18MVswLTldfDJbMC05XXwzWzAtOV18NFswLTldfDVbMC05XVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaW51dGVzLCBcIm1pbnV0ZXNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1pbnV0ZXMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgc3M6IFsgXCJbMC01XVswLTldXCIsIERhdGUucHJvdG90eXBlLnNldFNlY29uZHMsIFwic2Vjb25kc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0U2Vjb25kcy5jYWxsKHRoaXMpLCAyKTtcbiAgICAgICAgfSBdLFxuICAgICAgICBsOiBbIFwiWzAtOV17M31cIiwgRGF0ZS5wcm90b3R5cGUuc2V0TWlsbGlzZWNvbmRzLCBcIm1pbGxpc2Vjb25kc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzLmNhbGwodGhpcyksIDMpO1xuICAgICAgICB9IF0sXG4gICAgICAgIEw6IFsgXCJbMC05XXsyfVwiLCBEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMsIFwibWlsbGlzZWNvbmRzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNaWxsaXNlY29uZHMuY2FsbCh0aGlzKSwgMik7XG4gICAgICAgIH0gXSxcbiAgICAgICAgdDogWyBcIlthcF1cIiBdLFxuICAgICAgICB0dDogWyBcIlthcF1tXCIgXSxcbiAgICAgICAgVDogWyBcIltBUF1cIiBdLFxuICAgICAgICBUVDogWyBcIltBUF1NXCIgXSxcbiAgICAgICAgWjogWyBcIlwiIF0sXG4gICAgICAgIG86IFsgXCJcIiBdLFxuICAgICAgICBTOiBbIFwiXCIgXVxuICAgIH0sIGZvcm1hdEFsaWFzID0ge1xuICAgICAgICBpc29EYXRlOiBcInl5eXktbW0tZGRcIixcbiAgICAgICAgaXNvVGltZTogXCJISDpNTTpzc1wiLFxuICAgICAgICBpc29EYXRlVGltZTogXCJ5eXl5LW1tLWRkJ1QnSEg6TU06c3NcIixcbiAgICAgICAgaXNvVXRjRGF0ZVRpbWU6IFwiVVRDOnl5eXktbW0tZGQnVCdISDpNTTpzcydaJ1wiXG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRUb2tlbml6ZXIob3B0cykge1xuICAgICAgICBpZiAoIW9wdHMudG9rZW5pemVyKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW5zID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBuZHggaW4gZm9ybWF0Q29kZSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMuaW5kZXhPZihuZHhbMF0pID09PSAtMSkgdG9rZW5zLnB1c2gobmR4WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdHMudG9rZW5pemVyID0gXCIoXCIgKyB0b2tlbnMuam9pbihcIit8XCIpICsgXCIpKz98LlwiO1xuICAgICAgICAgICAgb3B0cy50b2tlbml6ZXIgPSBuZXcgUmVnRXhwKG9wdHMudG9rZW5pemVyLCBcImdcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdHMudG9rZW5pemVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlUGFydHMsIGN1cnJlbnRSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuICFpc0Zpbml0ZShkYXRlUGFydHMucmF3ZGF5KSB8fCBkYXRlUGFydHMuZGF5ID09IFwiMjlcIiAmJiAhaXNGaW5pdGUoZGF0ZVBhcnRzLnJhd3llYXIpIHx8IG5ldyBEYXRlKGRhdGVQYXJ0cy5kYXRlLmdldEZ1bGxZZWFyKCksIGlzRmluaXRlKGRhdGVQYXJ0cy5yYXdtb250aCkgPyBkYXRlUGFydHMubW9udGggOiBkYXRlUGFydHMuZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF0ZSgpID49IGRhdGVQYXJ0cy5kYXkgPyBjdXJyZW50UmVzdWx0IDogZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRGF0ZUluUmFuZ2UoZGF0ZVBhcnRzLCBvcHRzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgICBpZiAob3B0cy5taW4pIHtcbiAgICAgICAgICAgIGlmIChkYXRlUGFydHNbXCJyYXd5ZWFyXCJdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhd1llYXIgPSBkYXRlUGFydHNbXCJyYXd5ZWFyXCJdLnJlcGxhY2UoL1teMC05XS9nLCBcIlwiKSwgbWluWWVhciA9IG9wdHMubWluLnllYXIuc3Vic3RyKDAsIHJhd1llYXIubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBtaW5ZZWFyIDw9IHJhd1llYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZVBhcnRzW1wieWVhclwiXSA9PT0gZGF0ZVBhcnRzW1wicmF3eWVhclwiXSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbi5kYXRlLmdldFRpbWUoKSA9PT0gb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCkgPD0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ICYmIG9wdHMubWF4ICYmIG9wdHMubWF4LmRhdGUuZ2V0VGltZSgpID09PSBvcHRzLm1heC5kYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gb3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkgPj0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlKGZvcm1hdCwgZGF0ZU9ialZhbHVlLCBvcHRzLCByYXcpIHtcbiAgICAgICAgdmFyIG1hc2sgPSBcIlwiLCBtYXRjaDtcbiAgICAgICAgd2hpbGUgKG1hdGNoID0gZ2V0VG9rZW5pemVyKG9wdHMpLmV4ZWMoZm9ybWF0KSkge1xuICAgICAgICAgICAgaWYgKGRhdGVPYmpWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCIoXCIgKyBmb3JtYXRDb2RlW21hdGNoWzBdXVswXSArIFwiKVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiW1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIihcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIl1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCIpP1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBJbnB1dG1hc2suZXNjYXBlUmVnZXgobWF0Y2hbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Q29kZVttYXRjaFswXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhdyAhPT0gdHJ1ZSAmJiBmb3JtYXRDb2RlW21hdGNoWzBdXVszXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldEZuID0gZm9ybWF0Q29kZVttYXRjaFswXV1bM107XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrICs9IGdldEZuLmNhbGwoZGF0ZU9ialZhbHVlLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdENvZGVbbWF0Y2hbMF1dWzJdKSBtYXNrICs9IGRhdGVPYmpWYWx1ZVtcInJhd1wiICsgZm9ybWF0Q29kZVttYXRjaFswXV1bMl1dOyBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2sgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhZCh2YWwsIGxlbikge1xuICAgICAgICB2YWwgPSBTdHJpbmcodmFsKTtcbiAgICAgICAgbGVuID0gbGVuIHx8IDI7XG4gICAgICAgIHdoaWxlICh2YWwubGVuZ3RoIDwgbGVuKSB2YWwgPSBcIjBcIiArIHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5hbHlzZU1hc2sobWFza1N0cmluZywgZm9ybWF0LCBvcHRzKSB7XG4gICAgICAgIHZhciBkYXRlT2JqID0ge1xuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoMSwgMCwgMSlcbiAgICAgICAgfSwgdGFyZ2V0UHJvcCwgbWFzayA9IG1hc2tTdHJpbmcsIG1hdGNoLCBkYXRlT3BlcmF0aW9uLCB0YXJnZXRWYWxpZGF0b3I7XG4gICAgICAgIGZ1bmN0aW9uIGV4dGVuZFByb3BlcnR5KHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY29ycmVjdGVkVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXjAtOV0vZywgXCIwXCIpO1xuICAgICAgICAgICAgaWYgKGNvcnJlY3RlZFZhbHVlICE9IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudGVyZWRQYXJ0ID0gdmFsdWUucmVwbGFjZSgvW14wLTldL2csIFwiXCIpLCBtaW4gPSAob3B0cy5taW4gJiYgb3B0cy5taW5bdGFyZ2V0UHJvcF0gfHwgdmFsdWUpLnRvU3RyaW5nKCksIG1heCA9IChvcHRzLm1heCAmJiBvcHRzLm1heFt0YXJnZXRQcm9wXSB8fCB2YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb3JyZWN0ZWRWYWx1ZSA9IGVudGVyZWRQYXJ0ICsgKGVudGVyZWRQYXJ0IDwgbWluLnNsaWNlKDAsIGVudGVyZWRQYXJ0Lmxlbmd0aCkgPyBtaW4uc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSA6IGVudGVyZWRQYXJ0ID4gbWF4LnNsaWNlKDAsIGVudGVyZWRQYXJ0Lmxlbmd0aCkgPyBtYXguc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSA6IGNvcnJlY3RlZFZhbHVlLnRvU3RyaW5nKCkuc2xpY2UoZW50ZXJlZFBhcnQubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29ycmVjdGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0VmFsdWUoZGF0ZU9iaiwgdmFsdWUsIG9wdHMpIHtcbiAgICAgICAgICAgIGRhdGVPYmpbdGFyZ2V0UHJvcF0gPSBleHRlbmRQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgICAgICBkYXRlT2JqW1wicmF3XCIgKyB0YXJnZXRQcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGRhdGVPcGVyYXRpb24gIT09IHVuZGVmaW5lZCkgZGF0ZU9wZXJhdGlvbi5jYWxsKGRhdGVPYmouZGF0ZSwgdGFyZ2V0UHJvcCA9PSBcIm1vbnRoXCIgPyBwYXJzZUludChkYXRlT2JqW3RhcmdldFByb3BdKSAtIDEgOiBkYXRlT2JqW3RhcmdldFByb3BdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1hc2sgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBtYXNrLnNsaWNlKDAsIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdENvZGUuaGFzT3duUHJvcGVydHkobWF0Y2hbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFZhbGlkYXRvciA9IGZvcm1hdENvZGVbbWF0Y2hbMF1dWzBdO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRQcm9wID0gZm9ybWF0Q29kZVttYXRjaFswXV1bMl07XG4gICAgICAgICAgICAgICAgICAgIGRhdGVPcGVyYXRpb24gPSBmb3JtYXRDb2RlW21hdGNoWzBdXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZGF0ZU9iaiwgdmFsdWUsIG9wdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrID0gbWFzay5zbGljZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGVPYmo7XG4gICAgICAgIH0gZWxzZSBpZiAobWFzayAmJiB0eXBlb2YgbWFzayA9PT0gXCJvYmplY3RcIiAmJiBtYXNrLmhhc093blByb3BlcnR5KFwiZGF0ZVwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xuICAgICAgICBkYXRldGltZToge1xuICAgICAgICAgICAgbWFzazogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgICAgIGZvcm1hdENvZGUuUyA9IG9wdHMuaTE4bi5vcmRpbmFsU3VmZml4LmpvaW4oXCJ8XCIpO1xuICAgICAgICAgICAgICAgIG9wdHMuaW5wdXRGb3JtYXQgPSBmb3JtYXRBbGlhc1tvcHRzLmlucHV0Rm9ybWF0XSB8fCBvcHRzLmlucHV0Rm9ybWF0O1xuICAgICAgICAgICAgICAgIG9wdHMuZGlzcGxheUZvcm1hdCA9IGZvcm1hdEFsaWFzW29wdHMuZGlzcGxheUZvcm1hdF0gfHwgb3B0cy5kaXNwbGF5Rm9ybWF0IHx8IG9wdHMuaW5wdXRGb3JtYXQ7XG4gICAgICAgICAgICAgICAgb3B0cy5vdXRwdXRGb3JtYXQgPSBmb3JtYXRBbGlhc1tvcHRzLm91dHB1dEZvcm1hdF0gfHwgb3B0cy5vdXRwdXRGb3JtYXQgfHwgb3B0cy5pbnB1dEZvcm1hdDtcbiAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyID0gb3B0cy5wbGFjZWhvbGRlciAhPT0gXCJcIiA/IG9wdHMucGxhY2Vob2xkZXIgOiBvcHRzLmlucHV0Rm9ybWF0LnJlcGxhY2UoL1tcXFtcXF1dLywgXCJcIik7XG4gICAgICAgICAgICAgICAgb3B0cy5yZWdleCA9IHBhcnNlKG9wdHMuaW5wdXRGb3JtYXQsIHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXG4gICAgICAgICAgICBpbnB1dEZvcm1hdDogXCJpc29EYXRlVGltZVwiLFxuICAgICAgICAgICAgZGlzcGxheUZvcm1hdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3V0cHV0Rm9ybWF0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtaW46IG51bGwsXG4gICAgICAgICAgICBtYXg6IG51bGwsXG4gICAgICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICAgICAgZGF5TmFtZXM6IFsgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiwgXCJTdW5cIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiLCBcIlN1bmRheVwiIF0sXG4gICAgICAgICAgICAgICAgbW9udGhOYW1lczogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiLCBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcbiAgICAgICAgICAgICAgICBvcmRpbmFsU3VmZml4OiBbIFwic3RcIiwgXCJuZFwiLCBcInJkXCIsIFwidGhcIiBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9zdFZhbGlkYXRpb246IGZ1bmN0aW9uKGJ1ZmZlciwgcG9zLCBjdXJyZW50UmVzdWx0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5taW4gPSBhbmFseXNlTWFzayhvcHRzLm1pbiwgb3B0cy5pbnB1dEZvcm1hdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgb3B0cy5tYXggPSBhbmFseXNlTWFzayhvcHRzLm1heCwgb3B0cy5pbnB1dEZvcm1hdCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1cnJlbnRSZXN1bHQsIGRhdGVQYXJ0cyA9IGFuYWx5c2VNYXNrKGJ1ZmZlci5qb2luKFwiXCIpLCBvcHRzLmlucHV0Rm9ybWF0LCBvcHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIGRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKSA9PT0gZGF0ZVBhcnRzLmRhdGUuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzVmFsaWREYXRlKGRhdGVQYXJ0cywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICYmIGlzRGF0ZUluUmFuZ2UoZGF0ZVBhcnRzLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBvcyAmJiByZXN1bHQgJiYgY3VycmVudFJlc3VsdC5wb3MgIT09IHBvcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBwYXJzZShvcHRzLmlucHV0Rm9ybWF0LCBkYXRlUGFydHMsIG9wdHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogY3VycmVudFJlc3VsdC5wb3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpLCBtYXRjaCwgZGF0ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IGdldFRva2VuaXplcihvcHRzKS5leGVjKG9wdHMuaW5wdXRGb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcImRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldERhdGUoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcIm1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldE1vbnRoKCkgKyAxLCBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gXCJ5eXl5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICs9IHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0uY2hhckF0KDApID09PSBcInlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgKz0gcGFkKHRvZGF5LmdldFllYXIoKSwgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZShvcHRzLm91dHB1dEZvcm1hdCwgYW5hbHlzZU1hc2sobWFza2VkVmFsdWUsIG9wdHMuaW5wdXRGb3JtYXQsIG9wdHMpLCBvcHRzLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXNpbmc6IGZ1bmN0aW9uKGVsZW0sIHRlc3QsIHBvcywgdmFsaWRQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIlthcF1cIikgPT0gMCkgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIltBUF1cIikgPT0gMCkgcmV0dXJuIGVsZW0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIHNoaWZ0UG9zaXRpb25zOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIElucHV0bWFzaztcbn0pOyIsIi8qIVxuKiBpbnB1dG1hc2subnVtZXJpYy5leHRlbnNpb25zLmpzXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTkgUm9iaW4gSGVyYm90c1xuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuKiBWZXJzaW9uOiA0LjAuOVxuKi9cblxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsgXCIuL2lucHV0bWFza1wiIF0sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2lucHV0bWFza1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeSh3aW5kb3cuSW5wdXRtYXNrKTtcbiAgICB9XG59KShmdW5jdGlvbihJbnB1dG1hc2spIHtcbiAgICB2YXIgJCA9IElucHV0bWFzay5kZXBlbmRlbmN5TGliO1xuICAgIGZ1bmN0aW9uIGF1dG9Fc2NhcGUodHh0LCBvcHRzKSB7XG4gICAgICAgIHZhciBlc2NhcGVkVHh0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChJbnB1dG1hc2sucHJvdG90eXBlLmRlZmluaXRpb25zW3R4dC5jaGFyQXQoaSldIHx8IG9wdHMuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gfHwgb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQgPT09IHR4dC5jaGFyQXQoaSkgfHwgb3B0cy5xdWFudGlmaWVybWFya2VyLmVuZCA9PT0gdHh0LmNoYXJBdChpKSB8fCBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuZ3JvdXBtYXJrZXIuZW5kID09PSB0eHQuY2hhckF0KGkpIHx8IG9wdHMuYWx0ZXJuYXRvcm1hcmtlciA9PT0gdHh0LmNoYXJBdChpKSkge1xuICAgICAgICAgICAgICAgIGVzY2FwZWRUeHQgKz0gXCJcXFxcXCIgKyB0eHQuY2hhckF0KGkpO1xuICAgICAgICAgICAgfSBlbHNlIGVzY2FwZWRUeHQgKz0gdHh0LmNoYXJBdChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXNjYXBlZFR4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWxpZ25EaWdpdHMoYnVmZmVyLCBkaWdpdHMsIG9wdHMpIHtcbiAgICAgICAgaWYgKGRpZ2l0cyA+IDApIHtcbiAgICAgICAgICAgIHZhciByYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChyYWRpeFBvc2l0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgcmFkaXhQb3NpdGlvbiA9IGJ1ZmZlci5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZGlnaXRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldID0gYnVmZmVyW3JhZGl4UG9zaXRpb24gKyBpXSB8fCBcIjBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XG4gICAgICAgIG51bWVyaWM6IHtcbiAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZXBlYXQgIT09IDAgJiYgaXNOYU4ob3B0cy5pbnRlZ2VyRGlnaXRzKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPSBvcHRzLnJlcGVhdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0cy5yZXBlYXQgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmdyb3VwU2VwYXJhdG9yID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgb3B0cy5kaWdpdHMgJiYgb3B0cy5kaWdpdHMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmdyb3VwU2VwYXJhdG9yID0gXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLlwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmdyb3VwU2VwYXJhdG9yID09PSBcIiBcIikge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuYXV0b0dyb3VwID0gb3B0cy5hdXRvR3JvdXAgJiYgb3B0cy5ncm91cFNlcGFyYXRvciAhPT0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5hdXRvR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmdyb3VwU2l6ZSA9PSBcInN0cmluZ1wiICYmIGlzRmluaXRlKG9wdHMuZ3JvdXBTaXplKSkgb3B0cy5ncm91cFNpemUgPSBwYXJzZUludChvcHRzLmdyb3VwU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShvcHRzLmludGVnZXJEaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwcyA9IE1hdGguZmxvb3Iob3B0cy5pbnRlZ2VyRGlnaXRzIC8gb3B0cy5ncm91cFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZCA9IG9wdHMuaW50ZWdlckRpZ2l0cyAlIG9wdHMuZ3JvdXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gcGFyc2VJbnQob3B0cy5pbnRlZ2VyRGlnaXRzKSArIChtb2QgPT09IDAgPyBzZXBzIC0gMSA6IHNlcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaW50ZWdlckRpZ2l0cyA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPSBcIipcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5wbGFjZWhvbGRlci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2sgPT09IFwicmFkaXhGb2N1c1wiICYmIChvcHRzLnBsYWNlaG9sZGVyID09PSBcIlwiICYmIG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9IFwibHZwXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbXCI7XCJdID0gb3B0cy5kZWZpbml0aW9uc1tcIn5cIl07XG4gICAgICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9uc1tcIjtcIl0uZGVmaW5pdGlvblN5bWJvbCA9IFwiflwiO1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrID0gb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljayA9PT0gXCJyYWRpeEZvY3VzXCIgPyBcImx2cFwiIDogb3B0cy5wb3NpdGlvbkNhcmV0T25DbGljaztcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kaWdpdHNPcHRpb25hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5kaWdpdHMpKSBvcHRzLmRpZ2l0cyA9IDI7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZGVjaW1hbFByb3RlY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1hc2sgPSBcIlsrXVwiO1xuICAgICAgICAgICAgICAgIG1hc2sgKz0gYXV0b0VzY2FwZShvcHRzLnByZWZpeCwgb3B0cyk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc2sgKz0gXCJ+ezEsXCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgbWFzayArPSBcIn57XCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhEZWYgPSBvcHRzLmRlY2ltYWxQcm90ZWN0ID8gXCI6XCIgOiBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcSA9IG9wdHMuZGlnaXRzLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUoZHFbMF0pICYmIGRxWzFdICYmIGlzRmluaXRlKGRxWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSByYWRpeERlZiArIFwiO3tcIiArIG9wdHMuZGlnaXRzICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpZ2l0c09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayArPSBcIltcIiArIHJhZGl4RGVmICsgXCI7ezEsXCIgKyBvcHRzLmRpZ2l0cyArIFwifV1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXNrICs9IHJhZGl4RGVmICsgXCI7e1wiICsgb3B0cy5kaWdpdHMgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXNrICs9IGF1dG9Fc2NhcGUob3B0cy5zdWZmaXgsIG9wdHMpO1xuICAgICAgICAgICAgICAgIG1hc2sgKz0gXCJbLV1cIjtcbiAgICAgICAgICAgICAgICBvcHRzLmdyZWVkeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxuICAgICAgICAgICAgZ3JlZWR5OiBmYWxzZSxcbiAgICAgICAgICAgIGRpZ2l0czogXCIqXCIsXG4gICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgIGVuZm9yY2VEaWdpdHNPbkJsdXI6IGZhbHNlLFxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICBwb3NpdGlvbkNhcmV0T25DbGljazogXCJyYWRpeEZvY3VzXCIsXG4gICAgICAgICAgICBncm91cFNpemU6IDMsXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgIGF1dG9Hcm91cDogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd01pbnVzOiB0cnVlLFxuICAgICAgICAgICAgbmVnYXRpb25TeW1ib2w6IHtcbiAgICAgICAgICAgICAgICBmcm9udDogXCItXCIsXG4gICAgICAgICAgICAgICAgYmFjazogXCJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGludGVnZXJEaWdpdHM6IFwiK1wiLFxuICAgICAgICAgICAgaW50ZWdlck9wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgcHJlZml4OiBcIlwiLFxuICAgICAgICAgICAgc3VmZml4OiBcIlwiLFxuICAgICAgICAgICAgcmlnaHRBbGlnbjogdHJ1ZSxcbiAgICAgICAgICAgIGRlY2ltYWxQcm90ZWN0OiB0cnVlLFxuICAgICAgICAgICAgbWluOiBudWxsLFxuICAgICAgICAgICAgbWF4OiBudWxsLFxuICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgIGluc2VydE1vZGU6IHRydWUsXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiBmYWxzZSxcbiAgICAgICAgICAgIHVubWFza0FzTnVtYmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGlucHV0VHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBpbnB1dG1vZGU6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgcHJlVmFsaWRhdGlvbjogZnVuY3Rpb24oYnVmZmVyLCBwb3MsIGMsIGlzU2VsZWN0aW9uLCBvcHRzLCBtYXNrc2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IFwiLVwiIHx8IGMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuYWxsb3dNaW51cyAhPT0gdHJ1ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBvcHRzLmlzTmVnYXRpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhb3B0cy5pc05lZ2F0aXZlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmpvaW4oXCJcIikgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSA/IHBvcyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvcG9zdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNTZWxlY3Rpb24gPT09IGZhbHNlICYmIGMgPT09IG9wdHMucmFkaXhQb2ludCAmJiAob3B0cy5kaWdpdHMgIT09IHVuZGVmaW5lZCAmJiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3MgIT09IC0xICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3NdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3MgPT09IHJhZGl4UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcmFkaXhQb3MgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbihidWZmZXIsIHBvcywgY3VycmVudFJlc3VsdCwgb3B0cykge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkUG9zdE1hc2soYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3N0TWFzayA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHBvc3RNYXNrICs9IFwiKFwiICsgb3B0cy5ncm91cFNlcGFyYXRvciArIFwiKntcIiArIG9wdHMuZ3JvdXBTaXplICsgXCJ9KXsqfVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhTcGxpdCA9IGJ1ZmZlci5qb2luKFwiXCIpLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhTcGxpdFsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RNYXNrICs9IG9wdHMucmFkaXhQb2ludCArIFwiKntcIiArIHJhZGl4U3BsaXRbMV0ubWF0Y2goL15cXGQqXFw/P1xcZCovKVswXS5sZW5ndGggKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zdE1hc2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzdWZmaXggPSBvcHRzLnN1ZmZpeC5zcGxpdChcIlwiKSwgcHJlZml4ID0gb3B0cy5wcmVmaXguc3BsaXQoXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZXN1bHQucG9zID09PSB1bmRlZmluZWQgJiYgY3VycmVudFJlc3VsdC5jYXJldCAhPT0gdW5kZWZpbmVkICYmIGN1cnJlbnRSZXN1bHQuZG9wb3N0ICE9PSB0cnVlKSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjdXJyZW50UmVzdWx0LmNhcmV0ICE9PSB1bmRlZmluZWQgPyBjdXJyZW50UmVzdWx0LmNhcmV0IDogY3VycmVudFJlc3VsdC5wb3M7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0gbWFza2VkVmFsdWUubGVuZ3RoIC0gY2FyZXRQb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJBdFBvcyA9IG1hc2tlZFZhbHVlW2NhcmV0UG9zXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNhcmV0UG9zID09PSBtYXNrZWRWYWx1ZS5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAxICYmIGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50KSByZXR1cm4gY3VycmVudFJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza2VkVmFsdWVbY2FyZXRQb3NdID0gXCI/XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wcmVmaXgubGVuZ3RoID4gMCAmJiBjYXJldFBvcyA+PSAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSAmJiBjYXJldFBvcyA8IG9wdHMucHJlZml4Lmxlbmd0aCAtIDEgKyAob3B0cy5pc05lZ2F0aXZlID09PSBmYWxzZSA/IDEgOiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeFtjYXJldFBvcyAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApXSA9IFwiP1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLnN1ZmZpeC5sZW5ndGggPiAwICYmIGNhcmV0UG9zID49IG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4W2NhcmV0UG9zIC0gKG1hc2tlZFZhbHVlLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIChvcHRzLmlzTmVnYXRpdmUgPT09IGZhbHNlID8gMSA6IDApKV0gPSBcIj9cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVmaXggPSBwcmVmaXguam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICBzdWZmaXggPSBzdWZmaXguam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUuam9pbihcIlwiKS5yZXBsYWNlKHByZWZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uoc3VmZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiWy1cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiXVwiLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihvcHRzLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnBsYWNlaG9sZGVyKSwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZS5sZW5ndGggPiAxICYmIHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKC9eXFw/L2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKC9eMC9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZS5jaGFyQXQoMCkgPT09IG9wdHMucmFkaXhQb2ludCAmJiBvcHRzLnJhZGl4UG9pbnQgIT09IFwiXCIgJiYgb3B0cy5udW1lcmljSW5wdXQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gXCIwXCIgKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzVmFsdWUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKCFvcHRzLmRpZ2l0c09wdGlvbmFsIHx8IG9wdHMuZW5mb3JjZURpZ2l0c09uQmx1ciAmJiBjdXJyZW50UmVzdWx0LmV2ZW50ID09PSBcImJsdXJcIikgJiYgaXNGaW5pdGUob3B0cy5kaWdpdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcnBiID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza2VkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4UG9zaXRpb24gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlLnB1c2gob3B0cy5yYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpeFBvc2l0aW9uID0gcHJvY2Vzc1ZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBvcHRzLmRpZ2l0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghb3B0cy5kaWdpdHNPcHRpb25hbCB8fCBvcHRzLmVuZm9yY2VEaWdpdHNPbkJsdXIgJiYgY3VycmVudFJlc3VsdC5ldmVudCA9PT0gXCJibHVyXCIpICYmIChwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldID09PSB1bmRlZmluZWQgfHwgcHJvY2Vzc1ZhbHVlW3JhZGl4UG9zaXRpb24gKyBpXSA9PT0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBjdXJyZW50UmVzdWx0LnBsYWNlaG9sZGVyIHx8IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocnBiICE9PSAtMSAmJiBtYXNrZWRWYWx1ZVtycGIgKyBpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtyYWRpeFBvc2l0aW9uICsgaV0gPSBwcm9jZXNzVmFsdWVbcmFkaXhQb3NpdGlvbiArIGldIHx8IG1hc2tlZFZhbHVlW3JwYiArIGldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5hdXRvR3JvdXAgPT09IHRydWUgJiYgb3B0cy5ncm91cFNlcGFyYXRvciAhPT0gXCJcIiAmJiAoY2hhckF0UG9zICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgY3VycmVudFJlc3VsdC5wb3MgIT09IHVuZGVmaW5lZCB8fCBjdXJyZW50UmVzdWx0LmRvcG9zdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRSYWRpeCA9IHByb2Nlc3NWYWx1ZVtwcm9jZXNzVmFsdWUubGVuZ3RoIC0gMV0gPT09IG9wdHMucmFkaXhQb2ludCAmJiBjdXJyZW50UmVzdWx0LmMgPT09IG9wdHMucmFkaXhQb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IElucHV0bWFzayhidWlsZFBvc3RNYXNrKHByb2Nlc3NWYWx1ZSwgb3B0cyksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmljSW5wdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaml0TWFza2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIipcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTk/XVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmZvcm1hdChwcm9jZXNzVmFsdWUuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkUmFkaXgpIHByb2Nlc3NWYWx1ZSArPSBvcHRzLnJhZGl4UG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlLmNoYXJBdCgwKSA9PT0gb3B0cy5ncm91cFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuaXNOZWdhdGl2ZSAmJiBjdXJyZW50UmVzdWx0LmV2ZW50ID09PSBcImJsdXJcIikge1xuICAgICAgICAgICAgICAgICAgICBvcHRzLmlzTmVnYXRpdmUgPSBwcm9jZXNzVmFsdWUgIT09IFwiMFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcmVmaXggKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlICs9IHN1ZmZpeDtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5pc05lZ2F0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgKyBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSArPSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhckF0UG9zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGNoYXJBdFBvcyAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBjaGFyQXRQb3MgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSAkLmluQXJyYXkoXCI/XCIsIHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3MgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZVtjYXJldFBvc10gPSBjaGFyQXRQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2FyZXRQb3MgPSBjdXJyZW50UmVzdWx0LmNhcmV0IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckF0UG9zID09PSBvcHRzLnJhZGl4UG9pbnQgfHwgY2hhckF0UG9zID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IHx8IGNoYXJBdFBvcyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2FyZXRQb3MgPSAkLmluQXJyYXkoY2hhckF0UG9zLCBwcm9jZXNzVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NhcmV0UG9zICE9PSAtMSkgY2FyZXRQb3MgPSBuZXdDYXJldFBvcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBwcm9jZXNzVmFsdWUubGVuZ3RoIC0gY2FyZXRQb3MgLSAxO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IChjaGFyQXRQb3MgPT09IHVuZGVmaW5lZCB8fCBjdXJyZW50UmVzdWx0LnBvcyAhPT0gdW5kZWZpbmVkKSAmJiBjYXJldFBvcyAhPT0gdW5kZWZpbmVkID8gY2FyZXRQb3MgKyAob3B0cy5udW1lcmljSW5wdXQgPyAtMSA6IDEpIDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogcHJvY2Vzc1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogY3VycmVudFJlc3VsdC5kb3Bvc3QgfHwgYnVmZmVyLmpvaW4oXCJcIikgIT09IHByb2Nlc3NWYWx1ZS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlciA/IHJzbHQgOiBjdXJyZW50UmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IGZ1bmN0aW9uKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXJzZU1pbk1heE9wdGlvbnMob3B0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wYXJzZU1pbk1heE9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5taW4gPSBvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhQb2ludCA9PT0gXCIsXCIpIG9wdHMubWluID0gb3B0cy5taW4ucmVwbGFjZShvcHRzLnJhZGl4UG9pbnQsIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLm1pbiA9IGlzRmluaXRlKG9wdHMubWluKSA/IHBhcnNlRmxvYXQob3B0cy5taW4pIDogTmFOO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihvcHRzLm1pbikpIG9wdHMubWluID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1heCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMubWF4ID0gb3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4UG9pbnQgPT09IFwiLFwiKSBvcHRzLm1heCA9IG9wdHMubWF4LnJlcGxhY2Uob3B0cy5yYWRpeFBvaW50LCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5tYXggPSBpc0Zpbml0ZShvcHRzLm1heCkgPyBwYXJzZUZsb2F0KG9wdHMubWF4KSA6IE5hTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob3B0cy5tYXgpKSBvcHRzLm1heCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnBhcnNlTWluTWF4T3B0aW9ucyA9IFwiZG9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgY2FyZXRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBvcHRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJibHVyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5tYXNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZU1pbk1heE9wdGlvbnMob3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5taW4gIT09IG51bGwgfHwgb3B0cy5tYXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tlZCA9IG9wdHMub25Vbk1hc2soYnVmZmVyLmpvaW4oXCJcIiksIHVuZGVmaW5lZCwgJC5leHRlbmQoe30sIG9wdHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWluICE9PSBudWxsICYmIHVubWFza2VkIDwgb3B0cy5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc05lZ2F0aXZlID0gb3B0cy5taW4gPCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5wb3N0VmFsaWRhdGlvbihvcHRzLm1pbi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksIGNhcmV0UG9zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3Bvc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRzLm1heCAhPT0gbnVsbCAmJiB1bm1hc2tlZCA+IG9wdHMubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IG9wdHMubWF4IDwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucG9zdFZhbGlkYXRpb24ob3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLCBjYXJldFBvcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IGNhcmV0UG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9wb3N0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnBvc3RWYWxpZGF0aW9uKGJ1ZmZlciwgY2FyZXRQb3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogY2FyZXRQb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImJsdXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiX2NoZWNrdmFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBjYXJldFBvc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWdleDoge1xuICAgICAgICAgICAgICAgIGludGVnZXJQYXJ0OiBmdW5jdGlvbihvcHRzLCBlbXB0eUNoZWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eUNoZWNrID8gbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XCIpIDogbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XFxcXGQrXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZWdlck5QYXJ0OiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiW1xcXFxkXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpICsgXCJdK1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBcIn5cIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzLCBpc1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQsIGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hycyA9PT0gXCJrXCIgfHwgY2hycyA9PT0gXCJtXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNocnMgPT09IFwia1wiID8gMiA6IDU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZC5pbnNlcnQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkLnBvcyA9IHBvcyArIGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gc3RyaWN0ID8gbmV3IFJlZ0V4cChcIlswLTlcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIFwiXVwiKS50ZXN0KGNocnMpIDogbmV3IFJlZ0V4cChcIlswLTldXCIpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCAhPT0gdHJ1ZSAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gIT09IHVuZGVmaW5lZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10ubWF0Y2guZGVmID09PSBcIn5cIiAmJiAhaXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpICsgXCJdXCIsIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHZSYWRpeFNwbGl0ID0gcHJvY2Vzc1ZhbHVlLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHZSYWRpeFNwbGl0WzFdID0gcHZSYWRpeFNwbGl0WzFdLnJlcGxhY2UoLzAvZywgb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdlJhZGl4U3BsaXRbMF0gPT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdlJhZGl4U3BsaXRbMF0gPSBwdlJhZGl4U3BsaXRbMF0ucmVwbGFjZSgvMC9nLCBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHZSYWRpeFNwbGl0WzBdICsgb3B0cy5yYWRpeFBvaW50ICsgcHZSYWRpeFNwbGl0WzFdIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJUZW1wbGF0ZSA9IG1hc2tzZXQuX2J1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IGJ1ZmZlclRlbXBsYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcm9jZXNzVmFsdWUubWF0Y2goSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KGJ1ZmZlclRlbXBsYXRlKSArIFwiJFwiKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyVGVtcGxhdGUgPSBidWZmZXJUZW1wbGF0ZS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShidWZmZXJUZW1wbGF0ZSwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZVtwb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBwb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIGNocnMgPT09IG9wdHMucmFkaXhQb2ludCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3BvcyAtIDFdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIitcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIChjaHJzID09PSBcIi1cIiB8fCBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIi1cIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5hbGxvd01pbnVzICYmIGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIjpcIjoge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXggPSBcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpICsgXCJdXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG5ldyBSZWdFeHAocmFkaXgpLnRlc3QoY2hycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLnBsYWNlaG9sZGVyID09PSBvcHRzLnJhZGl4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5yYWRpeFBvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbihtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIGlmICh1bm1hc2tlZFZhbHVlID09PSBcIlwiICYmIG9wdHMubnVsbGFibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAob3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCksIFwiZ1wiKSwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy51bm1hc2tBc051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ICE9PSBcIlwiICYmIHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgIT09IC0xKSBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkpLCBcIi1cIik7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHByb2Nlc3NWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24oYnVmZmVyLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gKG9wdHMubnVtZXJpY0lucHV0ID8gYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpIDogYnVmZmVyKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpKSwgXCItXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spICsgXCIkXCIpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBtYXNrZWRWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsIFwiXCIpO1xuICAgICAgICAgICAgICAgIG1hc2tlZFZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIik7XG4gICAgICAgICAgICAgICAgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgXCIoWzAtOV17M30pXCIsIFwiZ1wiKSwgXCIkMVwiKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yYWRpeFBvaW50ID09PSBcIixcIikgbWFza2VkVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKG1hc2tlZFZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkJlZm9yZU1hc2s6IGZ1bmN0aW9uKGluaXRpYWxWYWx1ZSwgb3B0cykge1xuICAgICAgICAgICAgICAgIG9wdHMuaXNOZWdhdGl2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb2ludCA9IG9wdHMucmFkaXhQb2ludCB8fCBcIixcIjtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBpbml0aWFsVmFsdWUgPT0gXCJudW1iZXJcIiB8fCBvcHRzLmlucHV0VHlwZSA9PT0gXCJudW1iZXJcIikgJiYgcmFkaXhQb2ludCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlUGFydHMgPSBpbml0aWFsVmFsdWUuc3BsaXQocmFkaXhQb2ludCksIGludGVnZXJQYXJ0ID0gdmFsdWVQYXJ0c1swXS5yZXBsYWNlKC9bXlxcLTAtOV0vZywgXCJcIiksIGRlY2ltYWxQYXJ0ID0gdmFsdWVQYXJ0cy5sZW5ndGggPiAxID8gdmFsdWVQYXJ0c1sxXS5yZXBsYWNlKC9bXjAtOV0vZywgXCJcIikgOiBcIlwiO1xuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGludGVnZXJQYXJ0ICsgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiID8gcmFkaXhQb2ludCArIGRlY2ltYWxQYXJ0IDogZGVjaW1hbFBhcnQpO1xuICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvaW50ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9IGRlY2ltYWxQYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2ltYWxQYXJ0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyB8fCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShvcHRzLmRpZ2l0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBwYXJzZUludChvcHRzLmRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCksIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShpbml0aWFsVmFsdWUpKSBpbml0aWFsVmFsdWUgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoaW5pdGlhbFZhbHVlKSAqIGRpZ2l0c0ZhY3RvcikgLyBkaWdpdHNGYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCByYWRpeFBvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0cy5kaWdpdHMgPT09IDAgJiYgaW5pdGlhbFZhbHVlLmluZGV4T2YoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHJhZGl4UG9pbnQpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnN1YnN0cmluZygwLCBpbml0aWFsVmFsdWUuaW5kZXhPZihJbnB1dG1hc2suZXNjYXBlUmVnZXgocmFkaXhQb2ludCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsaWduRGlnaXRzKGluaXRpYWxWYWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpLCBkaWdpdHMsIG9wdHMpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgSW5wdXRtYXNrLmtleUNvZGUuVVA6XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKSArIHBhcnNlSW50KG9wdHMuc3RlcCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnB1dG1hc2sua2V5Q29kZS5ET1dOOlxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgLSBwYXJzZUludChvcHRzLnN0ZXApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVuY3k6IHtcbiAgICAgICAgICAgIHByZWZpeDogXCIkIFwiLFxuICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiLFwiLFxuICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxuICAgICAgICAgICAgYXV0b0dyb3VwOiB0cnVlLFxuICAgICAgICAgICAgZGlnaXRzOiAyLFxuICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGRlY2ltYWw6IHtcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIlxuICAgICAgICB9LFxuICAgICAgICBpbnRlZ2VyOiB7XG4gICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXG4gICAgICAgICAgICBkaWdpdHM6IDAsXG4gICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIHBlcmNlbnRhZ2U6IHtcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIGRpZ2l0czogMixcbiAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXG4gICAgICAgICAgICBhdXRvR3JvdXA6IGZhbHNlLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiAxMDAsXG4gICAgICAgICAgICBzdWZmaXg6IFwiICVcIixcbiAgICAgICAgICAgIGFsbG93TWludXM6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSW5wdXRtYXNrO1xufSk7IiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTctMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8xX19fID0gcmVxdWlyZShcIi4uL2ZvbnRzL01vbnRzZXJyYXQtUmVndWxhci50dGZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMl9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LVJlZ3VsYXIuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfM19fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LUJvbGQud29mZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF80X19fID0gcmVxdWlyZShcIi4uL2ZvbnRzL01vbnRzZXJyYXQtQm9sZC50dGZcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfNV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9Nb250c2VycmF0LUJvbGQuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfNl9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtUmVndWxhci53b2ZmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzdfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIudHRmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzhfX18gPSByZXF1aXJlKFwiLi4vZm9udHMvUXVpY2tzYW5kLVJlZ3VsYXIuZm9udC5zdmdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfOV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtQm9sZC53b2ZmXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzEwX19fID0gcmVxdWlyZShcIi4uL2ZvbnRzL1F1aWNrc2FuZC1Cb2xkLnR0ZlwiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8xMV9fXyA9IHJlcXVpcmUoXCIuLi9mb250cy9RdWlja3NhbmQtQm9sZC5mb250LnN2Z1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8yX19fLCB7IGhhc2g6IFwiI3dlYmZvbnRcIiB9KTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfM19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF81X19fLCB7IGhhc2g6IFwiI3dlYmZvbnRcIiB9KTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfNl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX1BVUkVfSU1QT1JUXzdfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF84X19fLCB7IGhhc2g6IFwiI3dlYmZvbnRcIiB9KTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfUFVSRV9JTVBPUlRfOV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8xMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzExX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9QVVJFX0lNUE9SVF8xMV9fXywgeyBoYXNoOiBcIiN3ZWJmb250XCIgfSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMSB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9odG1se2xpbmUtaGVpZ2h0OjEuMTU7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCV9Ym9keXttYXJnaW46MH1tYWlue2Rpc3BsYXk6YmxvY2t9aDF7bWFyZ2luOjAuNjdlbSAwO2ZvbnQtc2l6ZToyZW19aHJ7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7aGVpZ2h0OjA7b3ZlcmZsb3c6dmlzaWJsZX1wcmV7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLCBtb25vc3BhY2U7Zm9udC1zaXplOjFlbX1he2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9YWJiclt0aXRsZV17Ym9yZGVyLWJvdHRvbTpub25lO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7LXdlYmtpdC10ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZDt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZH1iLHN0cm9uZ3tmb250LXdlaWdodDpib2xkZXJ9Y29kZSxrYmQsc2FtcHtmb250LWZhbWlseTptb25vc3BhY2UsIG1vbm9zcGFjZTtmb250LXNpemU6MWVtfXNtYWxse2ZvbnQtc2l6ZTo4MCV9c3ViLHN1cHtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246cmVsYXRpdmU7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9c3Vie2JvdHRvbTotMC4yNWVtfXN1cHt0b3A6LTAuNWVtfWltZ3tib3JkZXItc3R5bGU6bm9uZX1idXR0b24saW5wdXQsb3B0Z3JvdXAsc2VsZWN0LHRleHRhcmVhe2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOjEwMCU7bGluZS1oZWlnaHQ6MS4xNTttYXJnaW46MH1idXR0b24saW5wdXR7b3ZlcmZsb3c6dmlzaWJsZX1idXR0b24sc2VsZWN0e3RleHQtdHJhbnNmb3JtOm5vbmV9YnV0dG9uLFt0eXBlPVxcXCJidXR0b25cXFwiXSxbdHlwZT1cXFwicmVzZXRcXFwiXSxbdHlwZT1cXFwic3VibWl0XFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcImJ1dHRvblxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJyZXNldFxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJzdWJtaXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcntib3JkZXItc3R5bGU6bm9uZTtwYWRkaW5nOjB9YnV0dG9uOi1tb3otZm9jdXNyaW5nLFt0eXBlPVxcXCJidXR0b25cXFwiXTotbW96LWZvY3VzcmluZyxbdHlwZT1cXFwicmVzZXRcXFwiXTotbW96LWZvY3VzcmluZyxbdHlwZT1cXFwic3VibWl0XFxcIl06LW1vei1mb2N1c3Jpbmd7b3V0bGluZToxcHggZG90dGVkIEJ1dHRvblRleHR9ZmllbGRzZXR7cGFkZGluZzowLjM1ZW0gMC43NWVtIDAuNjI1ZW19bGVnZW5key13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtjb2xvcjppbmhlcml0O2Rpc3BsYXk6dGFibGU7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzowO3doaXRlLXNwYWNlOm5vcm1hbH1wcm9ncmVzc3t2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX10ZXh0YXJlYXtvdmVyZmxvdzphdXRvfVt0eXBlPVxcXCJjaGVja2JveFxcXCJdLFt0eXBlPVxcXCJyYWRpb1xcXCJdey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9W3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b31bdHlwZT1cXFwic2VhcmNoXFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOnRleHRmaWVsZDtvdXRsaW5lLW9mZnNldDotMnB4fVt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX06Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b247Zm9udDppbmhlcml0fWRldGFpbHN7ZGlzcGxheTpibG9ja31zdW1tYXJ5e2Rpc3BsYXk6bGlzdC1pdGVtfXRlbXBsYXRle2Rpc3BsYXk6bm9uZX1baGlkZGVuXXtkaXNwbGF5Om5vbmV9QGZvbnQtZmFjZXtmb250LXdlaWdodDpub3JtYWw7Zm9udC1mYW1pbHk6XFxcIk1vbnRzZXJyYXRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyArIFwiKTtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fICsgXCIpIGZvcm1hdChcXFwic3ZnXFxcIil9QGZvbnQtZmFjZXtmb250LXdlaWdodDpib2xkO2ZvbnQtZmFtaWx5OlxcXCJNb250c2VycmF0XFxcIjtmb250LXN0eWxlOm5vcm1hbDtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gKyBcIik7c3JjOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyArIFwiKSBmb3JtYXQoXFxcInN2Z1xcXCIpfUBmb250LWZhY2V7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyArIFwiKTtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fICsgXCIpIGZvcm1hdChcXFwic3ZnXFxcIil9QGZvbnQtZmFjZXtmb250LXdlaWdodDpib2xkO2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO3NyYzp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyArIFwiKTtzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18gKyBcIikgZm9ybWF0KFxcXCJzdmdcXFwiKX1ib2R5e2NvbG9yOiMxZjIwNDE7Zm9udC1zaXplOjE0cHg7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCIsXFxcIk1vbnRzZXJyYXRcXFwiLHNhbnMtc2VyaWZ9LmNvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo4MC41NTU2JTttaW4td2lkdGg6MzIwcHg7bWF4LXdpZHRoOjE5MjBweDttYXJnaW46MCBhdXRvO3BhZGRpbmc6MCAxMHB4fUBtZWRpYSAobWF4LXdpZHRoOiAxMzAwcHgpey5jb250YWluZXJ7d2lkdGg6OTAuNTU1NiV9fUBtZWRpYSAobWF4LXdpZHRoOiA0MjVweCl7LmNvbnRhaW5lcnt3aWR0aDphdXRvO21hcmdpbjowO3BhZGRpbmc6MH19XFxuXCIsIFwiXCJdKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjY5YWFhOWQ2YWE0MWIxZjM2NTZkOWU0MTc2YjNhMmJjLndvZmZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhOGExMTczNjBlNzFkZTk0YWUzYjBiMGY4ZDE1YjQ0ZC50dGZcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmNTYwYzM0NzgxZGFiYWI5ODRkNTliMzc5ZjNkN2ZmYy5zdmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYjkxY2I2ODc0Y2JhMDA4N2U2NTQ1ZGI0YjVhZDM0NS53b2ZmXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==